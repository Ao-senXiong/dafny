// Dafny program the_program compiled into C#
// To recompile, you will need the libraries
//     System.Runtime.Numerics.dll System.Collections.Immutable.dll
// but the 'dotnet' tool in net6.0 should pick those up automatically.
// Optionally, you may want to include compiler switches like
//     /debug /nowarn:162,164,168,183,219,436,1717,1718

using System;
using System.Numerics;
using System.Collections;
namespace Formatting {

  public partial class __default {
    public static System.String ReindentProgramFromFirstToken(Microsoft.Dafny.IToken firstToken, Formatting.IIndentationFormatter reindent) {
      System.String s = default(System.String);
      Microsoft.Dafny.IToken token;
      token = firstToken;
      System.Text.StringBuilder sb;
      System.Text.StringBuilder _nw0 = new System.Text.StringBuilder();
      sb = _nw0;
      while ((token) != (object)((Microsoft.Dafny.IToken)null)) {
        System.String newLeadingTrivia;
        newLeadingTrivia = (reindent).GetNewLeadingTrivia(token);
        System.String newTrailingTrivia;
        newTrailingTrivia = (reindent).GetNewTrailingTrivia(token);
        (sb).Append(newLeadingTrivia);
        (sb).Append(token.val);
        (sb).Append(newTrailingTrivia);
        token = token.Next;
      }
      System.String _out0;
      _out0 = (sb).ToString().ToString();
      s = _out0;
      return s;
    }
  }

  public interface IIndentationFormatter {
    System.String GetNewLeadingTrivia(Microsoft.Dafny.IToken token);
    System.String GetNewTrailingTrivia(Microsoft.Dafny.IToken token);
  }
  public class _Companion_IIndentationFormatter {
  }
} // end of namespace Formatting


namespace Std.Wrappers {

  public partial class __default {
    public static Std.Wrappers._IOutcomeResult<__E> Need<__E>(bool condition, __E error) {
      if (condition) {
        return Std.Wrappers.OutcomeResult<__E>.create_Pass_k();
      } else {
        return Std.Wrappers.OutcomeResult<__E>.create_Fail_k(error);
      }
    }
  }

  public interface _IOption<out T> {
    bool is_None { get; }
    bool is_Some { get; }
    T dtor_value { get; }
    _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0);
    bool IsFailure();
    Std.Wrappers._IOption<__U> PropagateFailure<__U>();
    T Extract();
    Std.Wrappers._IResult<T, __E> ToResult<__E>(__E error);
    Std.Wrappers._IOutcome<__E> ToOutcome<__E>(__E error);
  }
  public abstract class Option<T> : _IOption<T> {
    public Option() {
    }
    public static Std.Wrappers._IOption<T> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOption<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOption<T>>(Std.Wrappers.Option<T>.Default());
    }
    public static _IOption<T> create_None() {
      return new Option_None<T>();
    }
    public static _IOption<T> create_Some(T @value) {
      return new Option_Some<T>(@value);
    }
    public bool is_None { get { return this is Option_None<T>; } }
    public bool is_Some { get { return this is Option_Some<T>; } }
    public T dtor_value {
      get {
        var d = this;
        return ((Option_Some<T>)d)._value;
      }
    }
    public abstract _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0);
    public bool IsFailure() {
      return (this).is_None;
    }
    public Std.Wrappers._IOption<__U> PropagateFailure<__U>() {
      return Std.Wrappers.Option<__U>.create_None();
    }
    public T Extract() {
      return (this).dtor_value;
    }
    public static T GetOr(Std.Wrappers._IOption<T> _this, T @default) {
      Std.Wrappers._IOption<T> _source0 = _this;
      if (_source0.is_None) {
        return @default;
      } else {
        T __mcc_h0 = _source0.dtor_value;
        T v = __mcc_h0;
        return v;
      }
    }
    public Std.Wrappers._IResult<T, __E> ToResult<__E>(__E error) {
      Std.Wrappers._IOption<T> _source1 = this;
      if (_source1.is_None) {
        return Std.Wrappers.Result<T, __E>.create_Failure(error);
      } else {
        T __mcc_h0 = _source1.dtor_value;
        T v = __mcc_h0;
        return Std.Wrappers.Result<T, __E>.create_Success(v);
      }
    }
    public Std.Wrappers._IOutcome<__E> ToOutcome<__E>(__E error) {
      Std.Wrappers._IOption<T> _source2 = this;
      if (_source2.is_None) {
        return Std.Wrappers.Outcome<__E>.create_Fail(error);
      } else {
        T __mcc_h0 = _source2.dtor_value;
        T v = __mcc_h0;
        return Std.Wrappers.Outcome<__E>.create_Pass();
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IOption<T> _this, Func<Std.Wrappers._IOption<T>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IOption<T>, __FC>>(rewrap)(_this);
    }
  }
  public class Option_None<T> : Option<T> {
    public Option_None() : base() {
    }
    public override _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOption<__T> dt) { return dt; }
      return new Option_None<__T>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Option_None<T>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Option.None";
      return s;
    }
  }
  public class Option_Some<T> : Option<T> {
    public readonly T _value;
    public Option_Some(T @value) : base() {
      this._value = @value;
    }
    public override _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOption<__T> dt) { return dt; }
      return new Option_Some<__T>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Option_Some<T>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Option.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }

  public interface _IResult<out R, out E> {
    bool is_Success { get; }
    bool is_Failure { get; }
    R dtor_value { get; }
    E dtor_error { get; }
    _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1);
    bool IsFailure();
    Std.Wrappers._IResult<__U, E> PropagateFailure<__U>();
    R Extract();
    Std.Wrappers._IOption<R> ToOption();
    Std.Wrappers._IOutcome<E> ToOutcome();
  }
  public abstract class Result<R, E> : _IResult<R, E> {
    public Result() {
    }
    public static Std.Wrappers._IResult<R, E> Default(R _default_R) {
      return create_Success(_default_R);
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IResult<R, E>> _TypeDescriptor(Dafny.TypeDescriptor<R> _td_R) {
      return new Dafny.TypeDescriptor<Std.Wrappers._IResult<R, E>>(Std.Wrappers.Result<R, E>.Default(_td_R.Default()));
    }
    public static _IResult<R, E> create_Success(R @value) {
      return new Result_Success<R, E>(@value);
    }
    public static _IResult<R, E> create_Failure(E error) {
      return new Result_Failure<R, E>(error);
    }
    public bool is_Success { get { return this is Result_Success<R, E>; } }
    public bool is_Failure { get { return this is Result_Failure<R, E>; } }
    public R dtor_value {
      get {
        var d = this;
        return ((Result_Success<R, E>)d)._value;
      }
    }
    public E dtor_error {
      get {
        var d = this;
        return ((Result_Failure<R, E>)d)._error;
      }
    }
    public abstract _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1);
    public bool IsFailure() {
      return (this).is_Failure;
    }
    public Std.Wrappers._IResult<__U, E> PropagateFailure<__U>() {
      return Std.Wrappers.Result<__U, E>.create_Failure((this).dtor_error);
    }
    public R Extract() {
      return (this).dtor_value;
    }
    public static R GetOr(Std.Wrappers._IResult<R, E> _this, R @default) {
      Std.Wrappers._IResult<R, E> _source3 = _this;
      if (_source3.is_Success) {
        R _10___mcc_h0 = _source3.dtor_value;
        R _11_s = _10___mcc_h0;
        return _11_s;
      } else {
        E _12___mcc_h1 = _source3.dtor_error;
        E _13_e = _12___mcc_h1;
        return @default;
      }
    }
    public Std.Wrappers._IOption<R> ToOption() {
      Std.Wrappers._IResult<R, E> _source4 = this;
      if (_source4.is_Success) {
        R _14___mcc_h0 = _source4.dtor_value;
        R _15_s = _14___mcc_h0;
        return Std.Wrappers.Option<R>.create_Some(_15_s);
      } else {
        E _16___mcc_h1 = _source4.dtor_error;
        E _17_e = _16___mcc_h1;
        return Std.Wrappers.Option<R>.create_None();
      }
    }
    public Std.Wrappers._IOutcome<E> ToOutcome() {
      Std.Wrappers._IResult<R, E> _source5 = this;
      if (_source5.is_Success) {
        R _18___mcc_h0 = _source5.dtor_value;
        R _19_s = _18___mcc_h0;
        return Std.Wrappers.Outcome<E>.create_Pass();
      } else {
        E _20___mcc_h1 = _source5.dtor_error;
        E _21_e = _20___mcc_h1;
        return Std.Wrappers.Outcome<E>.create_Fail(_21_e);
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IResult<R, E> _this, Func<Std.Wrappers._IResult<R, E>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IResult<R, E>, __FC>>(rewrap)(_this);
    }
    public static Std.Wrappers._IResult<R, __NewE> MapFailure<__NewE>(Std.Wrappers._IResult<R, E> _this, Func<E, __NewE> reWrap) {
      Std.Wrappers._IResult<R, E> _source6 = _this;
      if (_source6.is_Success) {
        R _22___mcc_h0 = _source6.dtor_value;
        R _23_s = _22___mcc_h0;
        return Std.Wrappers.Result<R, __NewE>.create_Success(_23_s);
      } else {
        E _24___mcc_h1 = _source6.dtor_error;
        E _25_e = _24___mcc_h1;
        return Std.Wrappers.Result<R, __NewE>.create_Failure(Dafny.Helpers.Id<Func<E, __NewE>>(reWrap)(_25_e));
      }
    }
  }
  public class Result_Success<R, E> : Result<R, E> {
    public readonly R _value;
    public Result_Success(R @value) : base() {
      this._value = @value;
    }
    public override _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1) {
      if (this is _IResult<__R, __E> dt) { return dt; }
      return new Result_Success<__R, __E>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Result_Success<R, E>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Result.Success";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Result_Failure<R, E> : Result<R, E> {
    public readonly E _error;
    public Result_Failure(E error) : base() {
      this._error = error;
    }
    public override _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1) {
      if (this is _IResult<__R, __E> dt) { return dt; }
      return new Result_Failure<__R, __E>(converter1(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Result_Failure<R, E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Result.Failure";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }

  public interface _IOutcome<out E> {
    bool is_Pass { get; }
    bool is_Fail { get; }
    E dtor_error { get; }
    _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0);
    bool IsFailure();
    Std.Wrappers._IOutcome<E> PropagateFailure();
    Std.Wrappers._IOption<__R> ToOption<__R>(__R r);
    Std.Wrappers._IResult<__R, E> ToResult<__R>(__R r);
  }
  public abstract class Outcome<E> : _IOutcome<E> {
    public Outcome() {
    }
    public static Std.Wrappers._IOutcome<E> Default() {
      return create_Pass();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOutcome<E>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOutcome<E>>(Std.Wrappers.Outcome<E>.Default());
    }
    public static _IOutcome<E> create_Pass() {
      return new Outcome_Pass<E>();
    }
    public static _IOutcome<E> create_Fail(E error) {
      return new Outcome_Fail<E>(error);
    }
    public bool is_Pass { get { return this is Outcome_Pass<E>; } }
    public bool is_Fail { get { return this is Outcome_Fail<E>; } }
    public E dtor_error {
      get {
        var d = this;
        return ((Outcome_Fail<E>)d)._error;
      }
    }
    public abstract _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0);
    public bool IsFailure() {
      return (this).is_Fail;
    }
    public Std.Wrappers._IOutcome<E> PropagateFailure() {
      return this;
    }
    public Std.Wrappers._IOption<__R> ToOption<__R>(__R r) {
      Std.Wrappers._IOutcome<E> _source7 = this;
      if (_source7.is_Pass) {
        return Std.Wrappers.Option<__R>.create_Some(r);
      } else {
        E _26___mcc_h0 = _source7.dtor_error;
        E _27_e = _26___mcc_h0;
        return Std.Wrappers.Option<__R>.create_None();
      }
    }
    public Std.Wrappers._IResult<__R, E> ToResult<__R>(__R r) {
      Std.Wrappers._IOutcome<E> _source8 = this;
      if (_source8.is_Pass) {
        return Std.Wrappers.Result<__R, E>.create_Success(r);
      } else {
        E _28___mcc_h0 = _source8.dtor_error;
        E _29_e = _28___mcc_h0;
        return Std.Wrappers.Result<__R, E>.create_Failure(_29_e);
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IOutcome<E> _this, Func<Std.Wrappers._IOutcome<E>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IOutcome<E>, __FC>>(rewrap)(_this);
    }
    public static Std.Wrappers._IResult<__T, __NewE> MapFailure<__T, __NewE>(Std.Wrappers._IOutcome<E> _this, Func<E, __NewE> rewrap, __T @default) {
      Std.Wrappers._IOutcome<E> _source9 = _this;
      if (_source9.is_Pass) {
        return Std.Wrappers.Result<__T, __NewE>.create_Success(@default);
      } else {
        E _30___mcc_h0 = _source9.dtor_error;
        E _31_e = _30___mcc_h0;
        return Std.Wrappers.Result<__T, __NewE>.create_Failure(Dafny.Helpers.Id<Func<E, __NewE>>(rewrap)(_31_e));
      }
    }
    public static Std.Wrappers._IOutcome<E> Need(bool condition, E error) {
      if (condition) {
        return Std.Wrappers.Outcome<E>.create_Pass();
      } else {
        return Std.Wrappers.Outcome<E>.create_Fail(error);
      }
    }
  }
  public class Outcome_Pass<E> : Outcome<E> {
    public Outcome_Pass() : base() {
    }
    public override _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcome<__E> dt) { return dt; }
      return new Outcome_Pass<__E>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Outcome_Pass<E>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Outcome.Pass";
      return s;
    }
  }
  public class Outcome_Fail<E> : Outcome<E> {
    public readonly E _error;
    public Outcome_Fail(E error) : base() {
      this._error = error;
    }
    public override _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcome<__E> dt) { return dt; }
      return new Outcome_Fail<__E>(converter0(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Outcome_Fail<E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Outcome.Fail";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }

  public interface _IOutcomeResult<out E> {
    bool is_Pass_k { get; }
    bool is_Fail_k { get; }
    E dtor_error { get; }
    _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0);
    bool IsFailure();
    Std.Wrappers._IResult<__U, E> PropagateFailure<__U>();
  }
  public abstract class OutcomeResult<E> : _IOutcomeResult<E> {
    public OutcomeResult() {
    }
    public static Std.Wrappers._IOutcomeResult<E> Default() {
      return create_Pass_k();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOutcomeResult<E>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOutcomeResult<E>>(Std.Wrappers.OutcomeResult<E>.Default());
    }
    public static _IOutcomeResult<E> create_Pass_k() {
      return new OutcomeResult_Pass_k<E>();
    }
    public static _IOutcomeResult<E> create_Fail_k(E error) {
      return new OutcomeResult_Fail_k<E>(error);
    }
    public bool is_Pass_k { get { return this is OutcomeResult_Pass_k<E>; } }
    public bool is_Fail_k { get { return this is OutcomeResult_Fail_k<E>; } }
    public E dtor_error {
      get {
        var d = this;
        return ((OutcomeResult_Fail_k<E>)d)._error;
      }
    }
    public abstract _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0);
    public bool IsFailure() {
      return (this).is_Fail_k;
    }
    public Std.Wrappers._IResult<__U, E> PropagateFailure<__U>() {
      return Std.Wrappers.Result<__U, E>.create_Failure((this).dtor_error);
    }
  }
  public class OutcomeResult_Pass_k<E> : OutcomeResult<E> {
    public OutcomeResult_Pass_k() : base() {
    }
    public override _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcomeResult<__E> dt) { return dt; }
      return new OutcomeResult_Pass_k<__E>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.OutcomeResult_Pass_k<E>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.OutcomeResult.Pass'";
      return s;
    }
  }
  public class OutcomeResult_Fail_k<E> : OutcomeResult<E> {
    public readonly E _error;
    public OutcomeResult_Fail_k(E error) : base() {
      this._error = error;
    }
    public override _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcomeResult<__E> dt) { return dt; }
      return new OutcomeResult_Fail_k<__E>(converter0(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.OutcomeResult_Fail_k<E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.OutcomeResult.Fail'";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }
} // end of namespace Std.Wrappers
namespace Std.Math {

  public partial class __default {
    public static BigInteger Min(BigInteger a, BigInteger b) {
      if ((a) < (b)) {
        return a;
      } else {
        return b;
      }
    }
    public static BigInteger Min3(BigInteger a, BigInteger b, BigInteger c) {
      return Std.Math.__default.Min(a, Std.Math.__default.Min(b, c));
    }
    public static BigInteger Max(BigInteger a, BigInteger b) {
      if ((a) < (b)) {
        return b;
      } else {
        return a;
      }
    }
    public static BigInteger Max3(BigInteger a, BigInteger b, BigInteger c) {
      return Std.Math.__default.Max(a, Std.Math.__default.Max(b, c));
    }
    public static BigInteger Abs(BigInteger a) {
      if ((a).Sign == -1) {
        return (BigInteger.Zero) - (a);
      } else {
        return a;
      }
    }
  }
} // end of namespace Std.Math
namespace Std.Collections.Seq {

  public partial class __default {
    public static __T First<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Select(BigInteger.Zero);
    }
    public static Dafny.ISequence<__T> DropFirst<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Drop(BigInteger.One);
    }
    public static __T Last<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Select((new BigInteger((xs).Count)) - (BigInteger.One));
    }
    public static Dafny.ISequence<__T> DropLast<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
    }
    public static __T[] ToArray<__T>(Dafny.ISequence<__T> xs) {
      __T[] a = new __T[0];
      Func<BigInteger, __T> _init2 = Dafny.Helpers.Id<Func<Dafny.ISequence<__T>, Func<BigInteger, __T>>>((_75_xs) => ((System.Func<BigInteger, __T>)((_76_i) => {
        return (_75_xs).Select(_76_i);
      })))(xs);
      __T[] _nw3 = new __T[Dafny.Helpers.ToIntChecked(new BigInteger((xs).Count), "array size exceeds memory limit")];
      for (var _i0_2 = 0; _i0_2 < new BigInteger(_nw3.Length); _i0_2++) {
        _nw3[(int)(_i0_2)] = _init2(_i0_2);
      }
      a = _nw3;
      return a;
    }
    public static Dafny.ISet<__T> ToSet<__T>(Dafny.ISequence<__T> xs) {
      return Dafny.Helpers.Id<Func<Dafny.ISequence<__T>, Dafny.ISet<__T>>>((_77_xs) => ((System.Func<Dafny.ISet<__T>>)(() => {
        var _coll0 = new System.Collections.Generic.List<__T>();
        foreach (__T _compr_0 in (_77_xs).Elements) {
          __T _78_x = (__T)_compr_0;
          if ((_77_xs).Contains(_78_x)) {
            _coll0.Add(_78_x);
          }
        }
        return Dafny.Set<__T>.FromCollection(_coll0);
      }))())(xs);
    }
    public static BigInteger IndexOf<__T>(Dafny.ISequence<__T> xs, __T v) {
      BigInteger _79___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if (object.Equals((xs).Select(BigInteger.Zero), v)) {
        return (BigInteger.Zero) + (_79___accumulator);
      } else {
        _79___accumulator = (_79___accumulator) + (BigInteger.One);
        Dafny.ISequence<__T> _in0 = (xs).Drop(BigInteger.One);
        __T _in1 = v;
        xs = _in0;
        v = _in1;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<BigInteger> IndexOfOption<__T>(Dafny.ISequence<__T> xs, __T v) {
      return Std.Collections.Seq.__default.IndexByOption<__T>(xs, Dafny.Helpers.Id<Func<__T, Func<__T, bool>>>((_80_v) => ((System.Func<__T, bool>)((_81_x) => {
        return object.Equals(_81_x, _80_v);
      })))(v));
    }
    public static Std.Wrappers._IOption<BigInteger> IndexByOption<__T>(Dafny.ISequence<__T> xs, Func<__T, bool> p) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Option<BigInteger>.create_None();
      } else if (Dafny.Helpers.Id<Func<__T, bool>>(p)((xs).Select(BigInteger.Zero))) {
        return Std.Wrappers.Option<BigInteger>.create_Some(BigInteger.Zero);
      } else {
        Std.Wrappers._IOption<BigInteger> _82_o_k = Std.Collections.Seq.__default.IndexByOption<__T>((xs).Drop(BigInteger.One), p);
        if ((_82_o_k).is_Some) {
          return Std.Wrappers.Option<BigInteger>.create_Some(((_82_o_k).dtor_value) + (BigInteger.One));
        } else {
          return Std.Wrappers.Option<BigInteger>.create_None();
        }
      }
    }
    public static BigInteger LastIndexOf<__T>(Dafny.ISequence<__T> xs, __T v) {
    TAIL_CALL_START:;
      if (object.Equals((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One)), v)) {
        return (new BigInteger((xs).Count)) - (BigInteger.One);
      } else {
        Dafny.ISequence<__T> _in2 = (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
        __T _in3 = v;
        xs = _in2;
        v = _in3;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<BigInteger> LastIndexOfOption<__T>(Dafny.ISequence<__T> xs, __T v) {
      return Std.Collections.Seq.__default.LastIndexByOption<__T>(xs, Dafny.Helpers.Id<Func<__T, Func<__T, bool>>>((_83_v) => ((System.Func<__T, bool>)((_84_x) => {
        return object.Equals(_84_x, _83_v);
      })))(v));
    }
    public static Std.Wrappers._IOption<BigInteger> LastIndexByOption<__T>(Dafny.ISequence<__T> xs, Func<__T, bool> p) {
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Option<BigInteger>.create_None();
      } else if (Dafny.Helpers.Id<Func<__T, bool>>(p)((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One)))) {
        return Std.Wrappers.Option<BigInteger>.create_Some((new BigInteger((xs).Count)) - (BigInteger.One));
      } else {
        Dafny.ISequence<__T> _in4 = (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
        Func<__T, bool> _in5 = p;
        xs = _in4;
        p = _in5;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Remove<__T>(Dafny.ISequence<__T> xs, BigInteger pos) {
      return Dafny.Sequence<__T>.Concat((xs).Take(pos), (xs).Drop((pos) + (BigInteger.One)));
    }
    public static Dafny.ISequence<__T> RemoveValue<__T>(Dafny.ISequence<__T> xs, __T v) {
      if (!(xs).Contains(v)) {
        return xs;
      } else {
        BigInteger _85_i = Std.Collections.Seq.__default.IndexOf<__T>(xs, v);
        return Dafny.Sequence<__T>.Concat((xs).Take(_85_i), (xs).Drop((_85_i) + (BigInteger.One)));
      }
    }
    public static Dafny.ISequence<__T> Insert<__T>(Dafny.ISequence<__T> xs, __T a, BigInteger pos) {
      return Dafny.Sequence<__T>.Concat(Dafny.Sequence<__T>.Concat((xs).Take(pos), Dafny.Sequence<__T>.FromElements(a)), (xs).Drop(pos));
    }
    public static Dafny.ISequence<__T> Reverse<__T>(Dafny.ISequence<__T> xs) {
      Dafny.ISequence<__T> _86___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((xs).Equals(Dafny.Sequence<__T>.FromElements())) {
        return Dafny.Sequence<__T>.Concat(_86___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _86___accumulator = Dafny.Sequence<__T>.Concat(_86___accumulator, Dafny.Sequence<__T>.FromElements((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One))));
        Dafny.ISequence<__T> _in6 = (xs).Subsequence(BigInteger.Zero, (new BigInteger((xs).Count)) - (BigInteger.One));
        xs = _in6;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Repeat<__T>(__T v, BigInteger length) {
      Dafny.ISequence<__T> _87___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((length).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_87___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _87___accumulator = Dafny.Sequence<__T>.Concat(_87___accumulator, Dafny.Sequence<__T>.FromElements(v));
        __T _in7 = v;
        BigInteger _in8 = (length) - (BigInteger.One);
        v = _in7;
        length = _in8;
        goto TAIL_CALL_START;
      }
    }
    public static _System._ITuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>> Unzip<__A, __B>(Dafny.ISequence<_System._ITuple2<__A, __B>> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>>.create(Dafny.Sequence<__A>.FromElements(), Dafny.Sequence<__B>.FromElements());
      } else {
        _System._ITuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>> _let_tmp_rhs0 = Std.Collections.Seq.__default.Unzip<__A, __B>(Std.Collections.Seq.__default.DropLast<_System._ITuple2<__A, __B>>(xs));
        Dafny.ISequence<__A> _88_a = _let_tmp_rhs0.dtor__0;
        Dafny.ISequence<__B> _89_b = _let_tmp_rhs0.dtor__1;
        return _System.Tuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>>.create(Dafny.Sequence<__A>.Concat(_88_a, Dafny.Sequence<__A>.FromElements((Std.Collections.Seq.__default.Last<_System._ITuple2<__A, __B>>(xs)).dtor__0)), Dafny.Sequence<__B>.Concat(_89_b, Dafny.Sequence<__B>.FromElements((Std.Collections.Seq.__default.Last<_System._ITuple2<__A, __B>>(xs)).dtor__1)));
      }
    }
    public static Dafny.ISequence<_System._ITuple2<__A, __B>> Zip<__A, __B>(Dafny.ISequence<__A> xs, Dafny.ISequence<__B> ys) {
      Dafny.ISequence<_System._ITuple2<__A, __B>> _90___accumulator = Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<_System._ITuple2<__A, __B>>.Concat(Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements(), _90___accumulator);
      } else {
        _90___accumulator = Dafny.Sequence<_System._ITuple2<__A, __B>>.Concat(Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements(_System.Tuple2<__A, __B>.create(Std.Collections.Seq.__default.Last<__A>(xs), Std.Collections.Seq.__default.Last<__B>(ys))), _90___accumulator);
        Dafny.ISequence<__A> _in9 = Std.Collections.Seq.__default.DropLast<__A>(xs);
        Dafny.ISequence<__B> _in10 = Std.Collections.Seq.__default.DropLast<__B>(ys);
        xs = _in9;
        ys = _in10;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger Max(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)) == (BigInteger.One)) {
        return (xs).Select(BigInteger.Zero);
      } else {
        return Std.Math.__default.Max((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.Max((xs).Drop(BigInteger.One)));
      }
    }
    public static BigInteger Min(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)) == (BigInteger.One)) {
        return (xs).Select(BigInteger.Zero);
      } else {
        return Std.Math.__default.Min((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.Min((xs).Drop(BigInteger.One)));
      }
    }
    public static Dafny.ISequence<__T> Flatten<__T>(Dafny.ISequence<Dafny.ISequence<__T>> xs) {
      Dafny.ISequence<__T> _91___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_91___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _91___accumulator = Dafny.Sequence<__T>.Concat(_91___accumulator, (xs).Select(BigInteger.Zero));
        Dafny.ISequence<Dafny.ISequence<__T>> _in11 = (xs).Drop(BigInteger.One);
        xs = _in11;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> FlattenReverse<__T>(Dafny.ISequence<Dafny.ISequence<__T>> xs) {
      Dafny.ISequence<__T> _92___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(Dafny.Sequence<__T>.FromElements(), _92___accumulator);
      } else {
        _92___accumulator = Dafny.Sequence<__T>.Concat(Std.Collections.Seq.__default.Last<Dafny.ISequence<__T>>(xs), _92___accumulator);
        Dafny.ISequence<Dafny.ISequence<__T>> _in12 = Std.Collections.Seq.__default.DropLast<Dafny.ISequence<__T>>(xs);
        xs = _in12;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Join<__T>(Dafny.ISequence<Dafny.ISequence<__T>> seqs, Dafny.ISequence<__T> separator) {
      Dafny.ISequence<__T> _93___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((seqs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_93___accumulator, Dafny.Sequence<__T>.FromElements());
      } else if ((new BigInteger((seqs).Count)) == (BigInteger.One)) {
        return Dafny.Sequence<__T>.Concat(_93___accumulator, (seqs).Select(BigInteger.Zero));
      } else {
        _93___accumulator = Dafny.Sequence<__T>.Concat(_93___accumulator, Dafny.Sequence<__T>.Concat((seqs).Select(BigInteger.Zero), separator));
        Dafny.ISequence<Dafny.ISequence<__T>> _in13 = (seqs).Drop(BigInteger.One);
        Dafny.ISequence<__T> _in14 = separator;
        seqs = _in13;
        separator = _in14;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.ISequence<__T>> Split<__T>(Dafny.ISequence<__T> s, __T delim) {
      Dafny.ISequence<Dafny.ISequence<__T>> _94___accumulator = Dafny.Sequence<Dafny.ISequence<__T>>.FromElements();
    TAIL_CALL_START:;
      Std.Wrappers._IOption<BigInteger> _95_i = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      if ((_95_i).is_Some) {
        _94___accumulator = Dafny.Sequence<Dafny.ISequence<__T>>.Concat(_94___accumulator, Dafny.Sequence<Dafny.ISequence<__T>>.FromElements((s).Take((_95_i).dtor_value)));
        Dafny.ISequence<__T> _in15 = (s).Drop(((_95_i).dtor_value) + (BigInteger.One));
        __T _in16 = delim;
        s = _in15;
        delim = _in16;
        goto TAIL_CALL_START;
      } else {
        return Dafny.Sequence<Dafny.ISequence<__T>>.Concat(_94___accumulator, Dafny.Sequence<Dafny.ISequence<__T>>.FromElements(s));
      }
    }
    public static _System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>> SplitOnce<__T>(Dafny.ISequence<__T> s, __T delim) {
      Std.Wrappers._IOption<BigInteger> _96_i = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      return _System.Tuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>.create((s).Take((_96_i).dtor_value), (s).Drop(((_96_i).dtor_value) + (BigInteger.One)));
    }
    public static Std.Wrappers._IOption<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>> SplitOnceOption<__T>(Dafny.ISequence<__T> s, __T delim) {
      Std.Wrappers._IOption<BigInteger> _97_valueOrError0 = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      if ((_97_valueOrError0).IsFailure()) {
        return (_97_valueOrError0).PropagateFailure<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>>();
      } else {
        BigInteger _98_i = (_97_valueOrError0).Extract();
        return Std.Wrappers.Option<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>>.create_Some(_System.Tuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>.create((s).Take(_98_i), (s).Drop((_98_i) + (BigInteger.One))));
      }
    }
    public static Dafny.ISequence<__R> Map<__T, __R>(Func<__T, __R> f, Dafny.ISequence<__T> xs) {
      Dafny.ISequence<__R> _99___accumulator = Dafny.Sequence<__R>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__R>.Concat(_99___accumulator, Dafny.Sequence<__R>.FromElements());
      } else {
        _99___accumulator = Dafny.Sequence<__R>.Concat(_99___accumulator, Dafny.Sequence<__R>.FromElements(Dafny.Helpers.Id<Func<__T, __R>>(f)((xs).Select(BigInteger.Zero))));
        Func<__T, __R> _in17 = f;
        Dafny.ISequence<__T> _in18 = (xs).Drop(BigInteger.One);
        f = _in17;
        xs = _in18;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IResult<Dafny.ISequence<__R>, __E> MapWithResult<__T, __R, __E>(Func<__T, Std.Wrappers._IResult<__R, __E>> f, Dafny.ISequence<__T> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Result<Dafny.ISequence<__R>, __E>.create_Success(Dafny.Sequence<__R>.FromElements());
      } else {
        Std.Wrappers._IResult<__R, __E> _100_valueOrError0 = Dafny.Helpers.Id<Func<__T, Std.Wrappers._IResult<__R, __E>>>(f)((xs).Select(BigInteger.Zero));
        if ((_100_valueOrError0).IsFailure()) {
          return (_100_valueOrError0).PropagateFailure<Dafny.ISequence<__R>>();
        } else {
          __R _101_head = (_100_valueOrError0).Extract();
          Std.Wrappers._IResult<Dafny.ISequence<__R>, __E> _102_valueOrError1 = Std.Collections.Seq.__default.MapWithResult<__T, __R, __E>(f, (xs).Drop(BigInteger.One));
          if ((_102_valueOrError1).IsFailure()) {
            return (_102_valueOrError1).PropagateFailure<Dafny.ISequence<__R>>();
          } else {
            Dafny.ISequence<__R> _103_tail = (_102_valueOrError1).Extract();
            return Std.Wrappers.Result<Dafny.ISequence<__R>, __E>.create_Success(Dafny.Sequence<__R>.Concat(Dafny.Sequence<__R>.FromElements(_101_head), _103_tail));
          }
        }
      }
    }
    public static Dafny.ISequence<__T> Filter<__T>(Func<__T, bool> f, Dafny.ISequence<__T> xs) {
      Dafny.ISequence<__T> _104___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_104___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _104___accumulator = Dafny.Sequence<__T>.Concat(_104___accumulator, ((Dafny.Helpers.Id<Func<__T, bool>>(f)((xs).Select(BigInteger.Zero))) ? (Dafny.Sequence<__T>.FromElements((xs).Select(BigInteger.Zero))) : (Dafny.Sequence<__T>.FromElements())));
        Func<__T, bool> _in19 = f;
        Dafny.ISequence<__T> _in20 = (xs).Drop(BigInteger.One);
        f = _in19;
        xs = _in20;
        goto TAIL_CALL_START;
      }
    }
    public static __A FoldLeft<__A, __T>(Func<__A, __T, __A> f, __A init, Dafny.ISequence<__T> xs) {
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return init;
      } else {
        Func<__A, __T, __A> _in21 = f;
        __A _in22 = Dafny.Helpers.Id<Func<__A, __T, __A>>(f)(init, (xs).Select(BigInteger.Zero));
        Dafny.ISequence<__T> _in23 = (xs).Drop(BigInteger.One);
        f = _in21;
        init = _in22;
        xs = _in23;
        goto TAIL_CALL_START;
      }
    }
    public static __A FoldRight<__A, __T>(Func<__T, __A, __A> f, Dafny.ISequence<__T> xs, __A init) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return init;
      } else {
        return Dafny.Helpers.Id<Func<__T, __A, __A>>(f)((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.FoldRight<__A, __T>(f, (xs).Drop(BigInteger.One), init));
      }
    }
    public static Dafny.ISequence<__T> SetToSeq<__T>(Dafny.ISet<__T> s) {
      Dafny.ISequence<__T> xs = Dafny.Sequence<__T>.Empty;
      xs = Dafny.Sequence<__T>.FromElements();
      Dafny.ISet<__T> _105_left;
      _105_left = s;
      while (!(_105_left).Equals(Dafny.Set<__T>.FromElements())) {
        __T _106_x;
        foreach (__T _assign_such_that_0 in (_105_left).Elements) {
          _106_x = (__T)_assign_such_that_0;
          if ((_105_left).Contains(_106_x)) {
            goto after__ASSIGN_SUCH_THAT_0;
          }
        }
        throw new System.Exception("assign-such-that search produced no value (line 7231)");
      after__ASSIGN_SUCH_THAT_0:;
        _105_left = Dafny.Set<__T>.Difference(_105_left, Dafny.Set<__T>.FromElements(_106_x));
        xs = Dafny.Sequence<__T>.Concat(xs, Dafny.Sequence<__T>.FromElements(_106_x));
      }
      return xs;
    }
    public static Dafny.ISequence<__T> SetToSortedSeq<__T>(Dafny.ISet<__T> s, Func<__T, __T, bool> R) {
      Dafny.ISequence<__T> xs = Dafny.Sequence<__T>.Empty;
      Dafny.ISequence<__T> _out6;
      _out6 = Std.Collections.Seq.__default.SetToSeq<__T>(s);
      xs = _out6;
      xs = Std.Collections.Seq.__default.MergeSortBy<__T>(R, xs);
      return xs;
    }
    public static Dafny.ISequence<__T> MergeSortBy<__T>(Func<__T, __T, bool> lessThanOrEq, Dafny.ISequence<__T> a) {
      if ((new BigInteger((a).Count)) <= (BigInteger.One)) {
        return a;
      } else {
        BigInteger _107_splitIndex = Dafny.Helpers.EuclideanDivision(new BigInteger((a).Count), new BigInteger(2));
        Dafny.ISequence<__T> _108_left = (a).Take(_107_splitIndex);
        Dafny.ISequence<__T> _109_right = (a).Drop(_107_splitIndex);
        Dafny.ISequence<__T> _110_leftSorted = Std.Collections.Seq.__default.MergeSortBy<__T>(lessThanOrEq, _108_left);
        Dafny.ISequence<__T> _111_rightSorted = Std.Collections.Seq.__default.MergeSortBy<__T>(lessThanOrEq, _109_right);
        return Std.Collections.Seq.__default.MergeSortedWith<__T>(_110_leftSorted, _111_rightSorted, lessThanOrEq);
      }
    }
    public static Dafny.ISequence<__T> MergeSortedWith<__T>(Dafny.ISequence<__T> left, Dafny.ISequence<__T> right, Func<__T, __T, bool> lessThanOrEq) {
      Dafny.ISequence<__T> _112___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((left).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_112___accumulator, right);
      } else if ((new BigInteger((right).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_112___accumulator, left);
      } else if (Dafny.Helpers.Id<Func<__T, __T, bool>>(lessThanOrEq)((left).Select(BigInteger.Zero), (right).Select(BigInteger.Zero))) {
        _112___accumulator = Dafny.Sequence<__T>.Concat(_112___accumulator, Dafny.Sequence<__T>.FromElements((left).Select(BigInteger.Zero)));
        Dafny.ISequence<__T> _in24 = (left).Drop(BigInteger.One);
        Dafny.ISequence<__T> _in25 = right;
        Func<__T, __T, bool> _in26 = lessThanOrEq;
        left = _in24;
        right = _in25;
        lessThanOrEq = _in26;
        goto TAIL_CALL_START;
      } else {
        _112___accumulator = Dafny.Sequence<__T>.Concat(_112___accumulator, Dafny.Sequence<__T>.FromElements((right).Select(BigInteger.Zero)));
        Dafny.ISequence<__T> _in27 = left;
        Dafny.ISequence<__T> _in28 = (right).Drop(BigInteger.One);
        Func<__T, __T, bool> _in29 = lessThanOrEq;
        left = _in27;
        right = _in28;
        lessThanOrEq = _in29;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Collections.Seq
namespace Std.Arithmetic.GeneralInternals {

} // end of namespace Std.Arithmetic.GeneralInternals
namespace Std.Arithmetic.MulInternalsNonlinear {

} // end of namespace Std.Arithmetic.MulInternalsNonlinear
namespace Std.Arithmetic.MulInternals {

  public partial class __default {
    public static BigInteger MulPos(BigInteger x, BigInteger y) {
      BigInteger _141___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if ((x).Sign == 0) {
        return (BigInteger.Zero) + (_141___accumulator);
      } else {
        _141___accumulator = (_141___accumulator) + (y);
        BigInteger _in32 = (x) - (BigInteger.One);
        BigInteger _in33 = y;
        x = _in32;
        y = _in33;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger MulRecursive(BigInteger x, BigInteger y) {
      if ((x).Sign != -1) {
        return Std.Arithmetic.MulInternals.__default.MulPos(x, y);
      } else {
        return (new BigInteger(-1)) * (Std.Arithmetic.MulInternals.__default.MulPos((new BigInteger(-1)) * (x), y));
      }
    }
  }
} // end of namespace Std.Arithmetic.MulInternals
namespace Std.Arithmetic.Mul {

} // end of namespace Std.Arithmetic.Mul
namespace Std.Arithmetic.ModInternalsNonlinear {

} // end of namespace Std.Arithmetic.ModInternalsNonlinear
namespace Std.Arithmetic.DivInternalsNonlinear {

} // end of namespace Std.Arithmetic.DivInternalsNonlinear
namespace Std.Arithmetic.ModInternals {

  public partial class __default {
    public static BigInteger ModRecursive(BigInteger x, BigInteger d) {
    TAIL_CALL_START:;
      if ((x).Sign == -1) {
        BigInteger _in34 = (d) + (x);
        BigInteger _in35 = d;
        x = _in34;
        d = _in35;
        goto TAIL_CALL_START;
      } else if ((x) < (d)) {
        return x;
      } else {
        BigInteger _in36 = (x) - (d);
        BigInteger _in37 = d;
        x = _in36;
        d = _in37;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.ModInternals
namespace Std.Arithmetic.DivInternals {

  public partial class __default {
    public static BigInteger DivPos(BigInteger x, BigInteger d) {
      BigInteger _142___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if ((x).Sign == -1) {
        _142___accumulator = (_142___accumulator) + (new BigInteger(-1));
        BigInteger _in38 = (x) + (d);
        BigInteger _in39 = d;
        x = _in38;
        d = _in39;
        goto TAIL_CALL_START;
      } else if ((x) < (d)) {
        return (BigInteger.Zero) + (_142___accumulator);
      } else {
        _142___accumulator = (_142___accumulator) + (BigInteger.One);
        BigInteger _in40 = (x) - (d);
        BigInteger _in41 = d;
        x = _in40;
        d = _in41;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger DivRecursive(BigInteger x, BigInteger d) {
      if ((d).Sign == 1) {
        return Std.Arithmetic.DivInternals.__default.DivPos(x, d);
      } else {
        return (new BigInteger(-1)) * (Std.Arithmetic.DivInternals.__default.DivPos(x, (new BigInteger(-1)) * (d)));
      }
    }
  }
} // end of namespace Std.Arithmetic.DivInternals
namespace Std.Arithmetic.DivMod {

  public partial class __default {
    public static bool MultiplesVanish(BigInteger a, BigInteger b, BigInteger m) {
      return (Dafny.Helpers.EuclideanModulus(((m) * (a)) + (b), m)) == (Dafny.Helpers.EuclideanModulus(b, m));
    }
  }
} // end of namespace Std.Arithmetic.DivMod
namespace Std.Arithmetic.Power {

  public partial class __default {
    public static BigInteger Pow(BigInteger b, BigInteger e) {
      BigInteger _143___accumulator = BigInteger.One;
    TAIL_CALL_START:;
      if ((e).Sign == 0) {
        return (BigInteger.One) * (_143___accumulator);
      } else {
        _143___accumulator = (_143___accumulator) * (b);
        BigInteger _in42 = b;
        BigInteger _in43 = (e) - (BigInteger.One);
        b = _in42;
        e = _in43;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.Power
namespace Std.Arithmetic.Logarithm {

  public partial class __default {
    public static BigInteger Log(BigInteger @base, BigInteger pow) {
      BigInteger _144___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if ((pow) < (@base)) {
        return (BigInteger.Zero) + (_144___accumulator);
      } else {
        _144___accumulator = (_144___accumulator) + (BigInteger.One);
        BigInteger _in44 = @base;
        BigInteger _in45 = Dafny.Helpers.EuclideanDivision(pow, @base);
        @base = _in44;
        pow = _in45;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.Logarithm
namespace Std.Arithmetic.Power2 {

  public partial class __default {
    public static BigInteger Pow2(BigInteger e) {
      return Std.Arithmetic.Power.__default.Pow(new BigInteger(2), e);
    }
  }
} // end of namespace Std.Arithmetic.Power2
namespace Std.Arithmetic {

} // end of namespace Std.Arithmetic
namespace Std.Strings.HexConversion {

  public partial class __default {
    public static BigInteger BASE() {
      return Std.Strings.HexConversion.__default.@base;
    }
    public static bool IsDigitChar(Dafny.Rune c) {
      return (Std.Strings.HexConversion.__default.charToDigit).Contains(c);
    }
    public static Dafny.ISequence<Dafny.Rune> OfDigits(Dafny.ISequence<BigInteger> digits) {
      Dafny.ISequence<Dafny.Rune> _145___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((digits).Equals(Dafny.Sequence<BigInteger>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(), _145___accumulator);
      } else {
        _145___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.HexConversion.__default.chars).Select((digits).Select(BigInteger.Zero))), _145___accumulator);
        Dafny.ISequence<BigInteger> _in46 = (digits).Drop(BigInteger.One);
        digits = _in46;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.HexConversion.__default.chars).Select(BigInteger.Zero));
      } else {
        return Std.Strings.HexConversion.__default.OfDigits(Std.Strings.HexConversion.__default.FromNat(n));
      }
    }
    public static bool IsNumberStr(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus) {
      return !(!(str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) || (((((str).Select(BigInteger.Zero)) == (minus)) || ((Std.Strings.HexConversion.__default.charToDigit).Contains((str).Select(BigInteger.Zero)))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, bool>>((_146_str) => Dafny.Helpers.Quantifier<Dafny.Rune>(((_146_str).Drop(BigInteger.One)).UniqueElements, true, (((_forall_var_1) => {
        Dafny.Rune _147_c = (Dafny.Rune)_forall_var_1;
        return !(((_146_str).Drop(BigInteger.One)).Contains(_147_c)) || (Std.Strings.HexConversion.__default.IsDigitChar(_147_c));
      }))))(str)));
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n, Dafny.Rune minus) {
      if ((n).Sign != -1) {
        return Std.Strings.HexConversion.__default.OfNat(n);
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(minus), Std.Strings.HexConversion.__default.OfNat((BigInteger.Zero) - (n)));
      }
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return BigInteger.Zero;
      } else {
        Dafny.Rune _148_c = (str).Select((new BigInteger((str).Count)) - (BigInteger.One));
        return ((Std.Strings.HexConversion.__default.ToNat((str).Take((new BigInteger((str).Count)) - (BigInteger.One)))) * (Std.Strings.HexConversion.__default.@base)) + (Dafny.Map<Dafny.Rune, BigInteger>.Select(Std.Strings.HexConversion.__default.charToDigit, _148_c));
      }
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus) {
      if (Dafny.Sequence<Dafny.Rune>.IsPrefixOf(Dafny.Sequence<Dafny.Rune>.FromElements(minus), str)) {
        return (BigInteger.Zero) - (Std.Strings.HexConversion.__default.ToNat((str).Drop(BigInteger.One)));
      } else {
        return Std.Strings.HexConversion.__default.ToNat(str);
      }
    }
    public static BigInteger ToNatRight(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        return ((Std.Strings.HexConversion.__default.ToNatRight(Std.Collections.Seq.__default.DropFirst<BigInteger>(xs))) * (Std.Strings.HexConversion.__default.BASE())) + (Std.Collections.Seq.__default.First<BigInteger>(xs));
      }
    }
    public static BigInteger ToNatLeft(Dafny.ISequence<BigInteger> xs) {
      BigInteger _149___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return (BigInteger.Zero) + (_149___accumulator);
      } else {
        _149___accumulator = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) * (Std.Arithmetic.Power.__default.Pow(Std.Strings.HexConversion.__default.BASE(), (new BigInteger((xs).Count)) - (BigInteger.One)))) + (_149___accumulator);
        Dafny.ISequence<BigInteger> _in47 = Std.Collections.Seq.__default.DropLast<BigInteger>(xs);
        xs = _in47;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> FromNat(BigInteger n) {
      Dafny.ISequence<BigInteger> _150___accumulator = Dafny.Sequence<BigInteger>.FromElements();
    TAIL_CALL_START:;
      if ((n).Sign == 0) {
        return Dafny.Sequence<BigInteger>.Concat(_150___accumulator, Dafny.Sequence<BigInteger>.FromElements());
      } else {
        _150___accumulator = Dafny.Sequence<BigInteger>.Concat(_150___accumulator, Dafny.Sequence<BigInteger>.FromElements(Dafny.Helpers.EuclideanModulus(n, Std.Strings.HexConversion.__default.BASE())));
        BigInteger _in48 = Dafny.Helpers.EuclideanDivision(n, Std.Strings.HexConversion.__default.BASE());
        n = _in48;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtend(Dafny.ISequence<BigInteger> xs, BigInteger n) {
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)) >= (n)) {
        return xs;
      } else {
        Dafny.ISequence<BigInteger> _in49 = Dafny.Sequence<BigInteger>.Concat(xs, Dafny.Sequence<BigInteger>.FromElements(BigInteger.Zero));
        BigInteger _in50 = n;
        xs = _in49;
        n = _in50;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtendMultiple(Dafny.ISequence<BigInteger> xs, BigInteger n) {
      BigInteger _151_newLen = ((new BigInteger((xs).Count)) + (n)) - (Dafny.Helpers.EuclideanModulus(new BigInteger((xs).Count), n));
      return Std.Strings.HexConversion.__default.SeqExtend(xs, _151_newLen);
    }
    public static Dafny.ISequence<BigInteger> FromNatWithLen(BigInteger n, BigInteger len) {
      return Std.Strings.HexConversion.__default.SeqExtend(Std.Strings.HexConversion.__default.FromNat(n), len);
    }
    public static Dafny.ISequence<BigInteger> SeqZero(BigInteger len) {
      Dafny.ISequence<BigInteger> _152_xs = Std.Strings.HexConversion.__default.FromNatWithLen(BigInteger.Zero, len);
      return _152_xs;
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqAdd(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs1 = Std.Strings.HexConversion.__default.SeqAdd(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _153_zs_k = _let_tmp_rhs1.dtor__0;
        BigInteger _154_cin = _let_tmp_rhs1.dtor__1;
        BigInteger _155_sum = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) + (Std.Collections.Seq.__default.Last<BigInteger>(ys))) + (_154_cin);
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs2 = (((_155_sum) < (Std.Strings.HexConversion.__default.BASE())) ? (_System.Tuple2<BigInteger, BigInteger>.create(_155_sum, BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((_155_sum) - (Std.Strings.HexConversion.__default.BASE()), BigInteger.One)));
        BigInteger _156_sum__out = _let_tmp_rhs2.dtor__0;
        BigInteger _157_cout = _let_tmp_rhs2.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_153_zs_k, Dafny.Sequence<BigInteger>.FromElements(_156_sum__out)), _157_cout);
      }
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqSub(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs3 = Std.Strings.HexConversion.__default.SeqSub(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _158_zs = _let_tmp_rhs3.dtor__0;
        BigInteger _159_cin = _let_tmp_rhs3.dtor__1;
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs4 = (((Std.Collections.Seq.__default.Last<BigInteger>(xs)) >= ((Std.Collections.Seq.__default.Last<BigInteger>(ys)) + (_159_cin))) ? (_System.Tuple2<BigInteger, BigInteger>.create(((Std.Collections.Seq.__default.Last<BigInteger>(xs)) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_159_cin), BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((((Std.Strings.HexConversion.__default.BASE()) + (Std.Collections.Seq.__default.Last<BigInteger>(xs))) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_159_cin), BigInteger.One)));
        BigInteger _160_diff__out = _let_tmp_rhs4.dtor__0;
        BigInteger _161_cout = _let_tmp_rhs4.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_158_zs, Dafny.Sequence<BigInteger>.FromElements(_160_diff__out)), _161_cout);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> HEX__DIGITS {
      get {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789ABCDEF");
      }
    }
    public static Dafny.ISequence<Dafny.Rune> chars {
      get {
        return Std.Strings.HexConversion.__default.HEX__DIGITS;
      }
    }
    public static BigInteger @base {
      get {
        return new BigInteger((Std.Strings.HexConversion.__default.chars).Count);
      }
    }
    public static Dafny.IMap<Dafny.Rune, BigInteger> charToDigit {
      get {
        return Dafny.Map<Dafny.Rune, BigInteger>.FromElements(new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('0'), BigInteger.Zero), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('1'), BigInteger.One), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('2'), new BigInteger(2)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('3'), new BigInteger(3)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('4'), new BigInteger(4)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('5'), new BigInteger(5)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('6'), new BigInteger(6)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('7'), new BigInteger(7)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('8'), new BigInteger(8)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('9'), new BigInteger(9)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('a'), new BigInteger(10)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('b'), new BigInteger(11)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('c'), new BigInteger(12)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('d'), new BigInteger(13)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('e'), new BigInteger(14)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('f'), new BigInteger(15)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('A'), new BigInteger(10)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('B'), new BigInteger(11)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('C'), new BigInteger(12)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('D'), new BigInteger(13)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('E'), new BigInteger(14)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('F'), new BigInteger(15)));
      }
    }
  }

  public partial class CharSeq {
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class digit {
    private static readonly Dafny.TypeDescriptor<BigInteger> _TYPE = new Dafny.TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static Dafny.TypeDescriptor<BigInteger> _TypeDescriptor() {
      return _TYPE;
    }
  }
} // end of namespace Std.Strings.HexConversion
namespace Std.Strings.DecimalConversion {

  public partial class __default {
    public static BigInteger BASE() {
      return Std.Strings.DecimalConversion.__default.@base;
    }
    public static bool IsDigitChar(Dafny.Rune c) {
      return (Std.Strings.DecimalConversion.__default.charToDigit).Contains(c);
    }
    public static Dafny.ISequence<Dafny.Rune> OfDigits(Dafny.ISequence<BigInteger> digits) {
      Dafny.ISequence<Dafny.Rune> _162___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((digits).Equals(Dafny.Sequence<BigInteger>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(), _162___accumulator);
      } else {
        _162___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.DecimalConversion.__default.chars).Select((digits).Select(BigInteger.Zero))), _162___accumulator);
        Dafny.ISequence<BigInteger> _in51 = (digits).Drop(BigInteger.One);
        digits = _in51;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.DecimalConversion.__default.chars).Select(BigInteger.Zero));
      } else {
        return Std.Strings.DecimalConversion.__default.OfDigits(Std.Strings.DecimalConversion.__default.FromNat(n));
      }
    }
    public static bool IsNumberStr(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus) {
      return !(!(str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) || (((((str).Select(BigInteger.Zero)) == (minus)) || ((Std.Strings.DecimalConversion.__default.charToDigit).Contains((str).Select(BigInteger.Zero)))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, bool>>((_163_str) => Dafny.Helpers.Quantifier<Dafny.Rune>(((_163_str).Drop(BigInteger.One)).UniqueElements, true, (((_forall_var_2) => {
        Dafny.Rune _164_c = (Dafny.Rune)_forall_var_2;
        return !(((_163_str).Drop(BigInteger.One)).Contains(_164_c)) || (Std.Strings.DecimalConversion.__default.IsDigitChar(_164_c));
      }))))(str)));
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n, Dafny.Rune minus) {
      if ((n).Sign != -1) {
        return Std.Strings.DecimalConversion.__default.OfNat(n);
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(minus), Std.Strings.DecimalConversion.__default.OfNat((BigInteger.Zero) - (n)));
      }
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return BigInteger.Zero;
      } else {
        Dafny.Rune _165_c = (str).Select((new BigInteger((str).Count)) - (BigInteger.One));
        return ((Std.Strings.DecimalConversion.__default.ToNat((str).Take((new BigInteger((str).Count)) - (BigInteger.One)))) * (Std.Strings.DecimalConversion.__default.@base)) + (Dafny.Map<Dafny.Rune, BigInteger>.Select(Std.Strings.DecimalConversion.__default.charToDigit, _165_c));
      }
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus) {
      if (Dafny.Sequence<Dafny.Rune>.IsPrefixOf(Dafny.Sequence<Dafny.Rune>.FromElements(minus), str)) {
        return (BigInteger.Zero) - (Std.Strings.DecimalConversion.__default.ToNat((str).Drop(BigInteger.One)));
      } else {
        return Std.Strings.DecimalConversion.__default.ToNat(str);
      }
    }
    public static BigInteger ToNatRight(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        return ((Std.Strings.DecimalConversion.__default.ToNatRight(Std.Collections.Seq.__default.DropFirst<BigInteger>(xs))) * (Std.Strings.DecimalConversion.__default.BASE())) + (Std.Collections.Seq.__default.First<BigInteger>(xs));
      }
    }
    public static BigInteger ToNatLeft(Dafny.ISequence<BigInteger> xs) {
      BigInteger _166___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return (BigInteger.Zero) + (_166___accumulator);
      } else {
        _166___accumulator = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) * (Std.Arithmetic.Power.__default.Pow(Std.Strings.DecimalConversion.__default.BASE(), (new BigInteger((xs).Count)) - (BigInteger.One)))) + (_166___accumulator);
        Dafny.ISequence<BigInteger> _in52 = Std.Collections.Seq.__default.DropLast<BigInteger>(xs);
        xs = _in52;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> FromNat(BigInteger n) {
      Dafny.ISequence<BigInteger> _167___accumulator = Dafny.Sequence<BigInteger>.FromElements();
    TAIL_CALL_START:;
      if ((n).Sign == 0) {
        return Dafny.Sequence<BigInteger>.Concat(_167___accumulator, Dafny.Sequence<BigInteger>.FromElements());
      } else {
        _167___accumulator = Dafny.Sequence<BigInteger>.Concat(_167___accumulator, Dafny.Sequence<BigInteger>.FromElements(Dafny.Helpers.EuclideanModulus(n, Std.Strings.DecimalConversion.__default.BASE())));
        BigInteger _in53 = Dafny.Helpers.EuclideanDivision(n, Std.Strings.DecimalConversion.__default.BASE());
        n = _in53;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtend(Dafny.ISequence<BigInteger> xs, BigInteger n) {
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)) >= (n)) {
        return xs;
      } else {
        Dafny.ISequence<BigInteger> _in54 = Dafny.Sequence<BigInteger>.Concat(xs, Dafny.Sequence<BigInteger>.FromElements(BigInteger.Zero));
        BigInteger _in55 = n;
        xs = _in54;
        n = _in55;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtendMultiple(Dafny.ISequence<BigInteger> xs, BigInteger n) {
      BigInteger _168_newLen = ((new BigInteger((xs).Count)) + (n)) - (Dafny.Helpers.EuclideanModulus(new BigInteger((xs).Count), n));
      return Std.Strings.DecimalConversion.__default.SeqExtend(xs, _168_newLen);
    }
    public static Dafny.ISequence<BigInteger> FromNatWithLen(BigInteger n, BigInteger len) {
      return Std.Strings.DecimalConversion.__default.SeqExtend(Std.Strings.DecimalConversion.__default.FromNat(n), len);
    }
    public static Dafny.ISequence<BigInteger> SeqZero(BigInteger len) {
      Dafny.ISequence<BigInteger> _169_xs = Std.Strings.DecimalConversion.__default.FromNatWithLen(BigInteger.Zero, len);
      return _169_xs;
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqAdd(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs5 = Std.Strings.DecimalConversion.__default.SeqAdd(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _170_zs_k = _let_tmp_rhs5.dtor__0;
        BigInteger _171_cin = _let_tmp_rhs5.dtor__1;
        BigInteger _172_sum = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) + (Std.Collections.Seq.__default.Last<BigInteger>(ys))) + (_171_cin);
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs6 = (((_172_sum) < (Std.Strings.DecimalConversion.__default.BASE())) ? (_System.Tuple2<BigInteger, BigInteger>.create(_172_sum, BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((_172_sum) - (Std.Strings.DecimalConversion.__default.BASE()), BigInteger.One)));
        BigInteger _173_sum__out = _let_tmp_rhs6.dtor__0;
        BigInteger _174_cout = _let_tmp_rhs6.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_170_zs_k, Dafny.Sequence<BigInteger>.FromElements(_173_sum__out)), _174_cout);
      }
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqSub(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs7 = Std.Strings.DecimalConversion.__default.SeqSub(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _175_zs = _let_tmp_rhs7.dtor__0;
        BigInteger _176_cin = _let_tmp_rhs7.dtor__1;
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs8 = (((Std.Collections.Seq.__default.Last<BigInteger>(xs)) >= ((Std.Collections.Seq.__default.Last<BigInteger>(ys)) + (_176_cin))) ? (_System.Tuple2<BigInteger, BigInteger>.create(((Std.Collections.Seq.__default.Last<BigInteger>(xs)) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_176_cin), BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((((Std.Strings.DecimalConversion.__default.BASE()) + (Std.Collections.Seq.__default.Last<BigInteger>(xs))) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_176_cin), BigInteger.One)));
        BigInteger _177_diff__out = _let_tmp_rhs8.dtor__0;
        BigInteger _178_cout = _let_tmp_rhs8.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_175_zs, Dafny.Sequence<BigInteger>.FromElements(_177_diff__out)), _178_cout);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> DIGITS {
      get {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789");
      }
    }
    public static Dafny.ISequence<Dafny.Rune> chars {
      get {
        return Std.Strings.DecimalConversion.__default.DIGITS;
      }
    }
    public static BigInteger @base {
      get {
        return new BigInteger((Std.Strings.DecimalConversion.__default.chars).Count);
      }
    }
    public static Dafny.IMap<Dafny.Rune, BigInteger> charToDigit {
      get {
        return Dafny.Map<Dafny.Rune, BigInteger>.FromElements(new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('0'), BigInteger.Zero), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('1'), BigInteger.One), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('2'), new BigInteger(2)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('3'), new BigInteger(3)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('4'), new BigInteger(4)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('5'), new BigInteger(5)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('6'), new BigInteger(6)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('7'), new BigInteger(7)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('8'), new BigInteger(8)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('9'), new BigInteger(9)));
      }
    }
  }

  public partial class CharSeq {
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class digit {
    private static readonly Dafny.TypeDescriptor<BigInteger> _TYPE = new Dafny.TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static Dafny.TypeDescriptor<BigInteger> _TypeDescriptor() {
      return _TYPE;
    }
  }
} // end of namespace Std.Strings.DecimalConversion
namespace Std.Strings.CharStrEscaping {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> Escape(Dafny.ISequence<Dafny.Rune> str, Dafny.ISet<Dafny.Rune> mustEscape, Dafny.Rune escape) {
      Dafny.ISequence<Dafny.Rune> _179___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_179___accumulator, str);
      } else if ((mustEscape).Contains((str).Select(BigInteger.Zero))) {
        _179___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_179___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements(escape, (str).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in56 = (str).Drop(BigInteger.One);
        Dafny.ISet<Dafny.Rune> _in57 = mustEscape;
        Dafny.Rune _in58 = escape;
        str = _in56;
        mustEscape = _in57;
        escape = _in58;
        goto TAIL_CALL_START;
      } else {
        _179___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_179___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in59 = (str).Drop(BigInteger.One);
        Dafny.ISet<Dafny.Rune> _in60 = mustEscape;
        Dafny.Rune _in61 = escape;
        str = _in59;
        mustEscape = _in60;
        escape = _in61;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> Unescape(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune escape) {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(str);
      } else if (((str).Select(BigInteger.Zero)) == (escape)) {
        if ((new BigInteger((str).Count)) > (BigInteger.One)) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _180_valueOrError0 = Std.Strings.CharStrEscaping.__default.Unescape((str).Drop(new BigInteger(2)), escape);
          if ((_180_valueOrError0).IsFailure()) {
            return (_180_valueOrError0).PropagateFailure<Dafny.ISequence<Dafny.Rune>>();
          } else {
            Dafny.ISequence<Dafny.Rune> _181_tl = (_180_valueOrError0).Extract();
            return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.One)), _181_tl));
          }
        } else {
          return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
        }
      } else {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _182_valueOrError1 = Std.Strings.CharStrEscaping.__default.Unescape((str).Drop(BigInteger.One), escape);
        if ((_182_valueOrError1).IsFailure()) {
          return (_182_valueOrError1).PropagateFailure<Dafny.ISequence<Dafny.Rune>>();
        } else {
          Dafny.ISequence<Dafny.Rune> _183_tl = (_182_valueOrError1).Extract();
          return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.Zero)), _183_tl));
        }
      }
    }
  }
} // end of namespace Std.Strings.CharStrEscaping
namespace Std.Strings {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      return Std.Strings.DecimalConversion.__default.OfNat(n);
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n) {
      return Std.Strings.DecimalConversion.__default.OfInt(n, new Dafny.Rune('-'));
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.DecimalConversion.__default.ToNat(str);
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.DecimalConversion.__default.ToInt(str, new Dafny.Rune('-'));
    }
    public static Dafny.ISequence<Dafny.Rune> EscapeQuotes(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.CharStrEscaping.__default.Escape(str, Dafny.Set<Dafny.Rune>.FromElements(new Dafny.Rune('\"'), new Dafny.Rune('\'')), new Dafny.Rune('\\'));
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> UnescapeQuotes(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.CharStrEscaping.__default.Unescape(str, new Dafny.Rune('\\'));
    }
    public static Dafny.ISequence<Dafny.Rune> OfBool(bool b) {
      if (b) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false");
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfChar(Dafny.Rune c) {
      return Dafny.Sequence<Dafny.Rune>.FromElements(c);
    }
  }
} // end of namespace Std.Strings

namespace DAST.Format {


  public interface _IUnOpFormat {
    bool is_NoFormat { get; }
    bool is_CombineNotInner { get; }
    _IUnOpFormat DowncastClone();
  }
  public abstract class UnOpFormat : _IUnOpFormat {
    public UnOpFormat() {
    }
    private static readonly DAST.Format._IUnOpFormat theDefault = create_NoFormat();
    public static DAST.Format._IUnOpFormat Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST.Format._IUnOpFormat> _TYPE = new Dafny.TypeDescriptor<DAST.Format._IUnOpFormat>(DAST.Format.UnOpFormat.Default());
    public static Dafny.TypeDescriptor<DAST.Format._IUnOpFormat> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnOpFormat create_NoFormat() {
      return new UnOpFormat_NoFormat();
    }
    public static _IUnOpFormat create_CombineNotInner() {
      return new UnOpFormat_CombineNotInner();
    }
    public bool is_NoFormat { get { return this is UnOpFormat_NoFormat; } }
    public bool is_CombineNotInner { get { return this is UnOpFormat_CombineNotInner; } }
    public static System.Collections.Generic.IEnumerable<_IUnOpFormat> AllSingletonConstructors {
      get {
        yield return UnOpFormat.create_NoFormat();
        yield return UnOpFormat.create_CombineNotInner();
      }
    }
    public abstract _IUnOpFormat DowncastClone();
  }
  public class UnOpFormat_NoFormat : UnOpFormat {
    public UnOpFormat_NoFormat() : base() {
    }
    public override _IUnOpFormat DowncastClone() {
      if (this is _IUnOpFormat dt) { return dt; }
      return new UnOpFormat_NoFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.UnOpFormat_NoFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Format.UnOpFormat.NoFormat";
      return s;
    }
  }
  public class UnOpFormat_CombineNotInner : UnOpFormat {
    public UnOpFormat_CombineNotInner() : base() {
    }
    public override _IUnOpFormat DowncastClone() {
      if (this is _IUnOpFormat dt) { return dt; }
      return new UnOpFormat_CombineNotInner();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.UnOpFormat_CombineNotInner;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Format.UnOpFormat.CombineNotInner";
      return s;
    }
  }

  public interface _IBinOpFormat {
    bool is_NoFormat { get; }
    bool is_ImpliesFormat { get; }
    bool is_Equivalence { get; }
    bool is_ReverseOperands { get; }
    _IBinOpFormat DowncastClone();
  }
  public abstract class BinOpFormat : _IBinOpFormat {
    public BinOpFormat() {
    }
    private static readonly DAST.Format._IBinOpFormat theDefault = create_NoFormat();
    public static DAST.Format._IBinOpFormat Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST.Format._IBinOpFormat> _TYPE = new Dafny.TypeDescriptor<DAST.Format._IBinOpFormat>(DAST.Format.BinOpFormat.Default());
    public static Dafny.TypeDescriptor<DAST.Format._IBinOpFormat> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOpFormat create_NoFormat() {
      return new BinOpFormat_NoFormat();
    }
    public static _IBinOpFormat create_ImpliesFormat() {
      return new BinOpFormat_ImpliesFormat();
    }
    public static _IBinOpFormat create_Equivalence() {
      return new BinOpFormat_Equivalence();
    }
    public static _IBinOpFormat create_ReverseOperands() {
      return new BinOpFormat_ReverseOperands();
    }
    public bool is_NoFormat { get { return this is BinOpFormat_NoFormat; } }
    public bool is_ImpliesFormat { get { return this is BinOpFormat_ImpliesFormat; } }
    public bool is_Equivalence { get { return this is BinOpFormat_Equivalence; } }
    public bool is_ReverseOperands { get { return this is BinOpFormat_ReverseOperands; } }
    public static System.Collections.Generic.IEnumerable<_IBinOpFormat> AllSingletonConstructors {
      get {
        yield return BinOpFormat.create_NoFormat();
        yield return BinOpFormat.create_ImpliesFormat();
        yield return BinOpFormat.create_Equivalence();
        yield return BinOpFormat.create_ReverseOperands();
      }
    }
    public abstract _IBinOpFormat DowncastClone();
  }
  public class BinOpFormat_NoFormat : BinOpFormat {
    public BinOpFormat_NoFormat() : base() {
    }
    public override _IBinOpFormat DowncastClone() {
      if (this is _IBinOpFormat dt) { return dt; }
      return new BinOpFormat_NoFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinOpFormat_NoFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Format.BinOpFormat.NoFormat";
      return s;
    }
  }
  public class BinOpFormat_ImpliesFormat : BinOpFormat {
    public BinOpFormat_ImpliesFormat() : base() {
    }
    public override _IBinOpFormat DowncastClone() {
      if (this is _IBinOpFormat dt) { return dt; }
      return new BinOpFormat_ImpliesFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinOpFormat_ImpliesFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Format.BinOpFormat.ImpliesFormat";
      return s;
    }
  }
  public class BinOpFormat_Equivalence : BinOpFormat {
    public BinOpFormat_Equivalence() : base() {
    }
    public override _IBinOpFormat DowncastClone() {
      if (this is _IBinOpFormat dt) { return dt; }
      return new BinOpFormat_Equivalence();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinOpFormat_Equivalence;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Format.BinOpFormat.Equivalence";
      return s;
    }
  }
  public class BinOpFormat_ReverseOperands : BinOpFormat {
    public BinOpFormat_ReverseOperands() : base() {
    }
    public override _IBinOpFormat DowncastClone() {
      if (this is _IBinOpFormat dt) { return dt; }
      return new BinOpFormat_ReverseOperands();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinOpFormat_ReverseOperands;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Format.BinOpFormat.ReverseOperands";
      return s;
    }
  }
} // end of namespace DAST.Format
namespace DAST {


  public interface _IModule {
    bool is_Module { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    bool dtor_isExtern { get; }
    Dafny.ISequence<DAST._IModuleItem> dtor_body { get; }
    _IModule DowncastClone();
  }
  public class Module : _IModule {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly bool _isExtern;
    public readonly Dafny.ISequence<DAST._IModuleItem> _body;
    public Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      this._name = name;
      this._isExtern = isExtern;
      this._body = body;
    }
    public _IModule DowncastClone() {
      if (this is _IModule dt) { return dt; }
      return new Module(_name, _isExtern, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Module;
      return oth != null && object.Equals(this._name, oth._name) && this._isExtern == oth._isExtern && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isExtern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Module.Module";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isExtern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IModule theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, false, Dafny.Sequence<DAST._IModuleItem>.Empty);
    public static DAST._IModule Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModule> _TYPE = new Dafny.TypeDescriptor<DAST._IModule>(DAST.Module.Default());
    public static Dafny.TypeDescriptor<DAST._IModule> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModule create(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return new Module(name, isExtern, body);
    }
    public static _IModule create_Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return create(name, isExtern, body);
    }
    public bool is_Module { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public bool dtor_isExtern {
      get {
        return this._isExtern;
      }
    }
    public Dafny.ISequence<DAST._IModuleItem> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IModuleItem {
    bool is_Module { get; }
    bool is_Class { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    bool is_Datatype { get; }
    DAST._IModule dtor_Module_a0 { get; }
    DAST._IClass dtor_Class_a0 { get; }
    DAST._ITrait dtor_Trait_a0 { get; }
    DAST._INewtype dtor_Newtype_a0 { get; }
    DAST._IDatatype dtor_Datatype_a0 { get; }
    _IModuleItem DowncastClone();
  }
  public abstract class ModuleItem : _IModuleItem {
    public ModuleItem() {
    }
    private static readonly DAST._IModuleItem theDefault = create_Module(DAST.Module.Default());
    public static DAST._IModuleItem Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModuleItem> _TYPE = new Dafny.TypeDescriptor<DAST._IModuleItem>(DAST.ModuleItem.Default());
    public static Dafny.TypeDescriptor<DAST._IModuleItem> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModuleItem create_Module(DAST._IModule _a0) {
      return new ModuleItem_Module(_a0);
    }
    public static _IModuleItem create_Class(DAST._IClass _a0) {
      return new ModuleItem_Class(_a0);
    }
    public static _IModuleItem create_Trait(DAST._ITrait _a0) {
      return new ModuleItem_Trait(_a0);
    }
    public static _IModuleItem create_Newtype(DAST._INewtype _a0) {
      return new ModuleItem_Newtype(_a0);
    }
    public static _IModuleItem create_Datatype(DAST._IDatatype _a0) {
      return new ModuleItem_Datatype(_a0);
    }
    public bool is_Module { get { return this is ModuleItem_Module; } }
    public bool is_Class { get { return this is ModuleItem_Class; } }
    public bool is_Trait { get { return this is ModuleItem_Trait; } }
    public bool is_Newtype { get { return this is ModuleItem_Newtype; } }
    public bool is_Datatype { get { return this is ModuleItem_Datatype; } }
    public DAST._IModule dtor_Module_a0 {
      get {
        var d = this;
        return ((ModuleItem_Module)d)._a0;
      }
    }
    public DAST._IClass dtor_Class_a0 {
      get {
        var d = this;
        return ((ModuleItem_Class)d)._a0;
      }
    }
    public DAST._ITrait dtor_Trait_a0 {
      get {
        var d = this;
        return ((ModuleItem_Trait)d)._a0;
      }
    }
    public DAST._INewtype dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Newtype)d)._a0;
      }
    }
    public DAST._IDatatype dtor_Datatype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Datatype)d)._a0;
      }
    }
    public abstract _IModuleItem DowncastClone();
  }
  public class ModuleItem_Module : ModuleItem {
    public readonly DAST._IModule _a0;
    public ModuleItem_Module(DAST._IModule _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Module(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Module;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Module";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Class : ModuleItem {
    public readonly DAST._IClass _a0;
    public ModuleItem_Class(DAST._IClass _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Class(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Class;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Class";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Trait : ModuleItem {
    public readonly DAST._ITrait _a0;
    public ModuleItem_Trait(DAST._ITrait _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Trait(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Trait;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Newtype : ModuleItem {
    public readonly DAST._INewtype _a0;
    public ModuleItem_Newtype(DAST._INewtype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Datatype : ModuleItem {
    public readonly DAST._IDatatype _a0;
    public ModuleItem_Datatype(DAST._IDatatype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Datatype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Datatype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IType {
    bool is_Path { get; }
    bool is_Nullable { get; }
    bool is_Tuple { get; }
    bool is_Array { get; }
    bool is_Seq { get; }
    bool is_Set { get; }
    bool is_Multiset { get; }
    bool is_Map { get; }
    bool is_Arrow { get; }
    bool is_Primitive { get; }
    bool is_Passthrough { get; }
    bool is_TypeArg { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    DAST._IResolvedType dtor_resolved { get; }
    DAST._IType dtor_Nullable_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_Tuple_a0 { get; }
    DAST._IType dtor_element { get; }
    BigInteger dtor_dims { get; }
    DAST._IType dtor_key { get; }
    DAST._IType dtor_value { get; }
    Dafny.ISequence<DAST._IType> dtor_args { get; }
    DAST._IType dtor_result { get; }
    DAST._IPrimitive dtor_Primitive_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 { get; }
    _IType DowncastClone();
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly DAST._IType theDefault = create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.ResolvedType.Default());
    public static DAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IType> _TYPE = new Dafny.TypeDescriptor<DAST._IType>(DAST.Type.Default());
    public static Dafny.TypeDescriptor<DAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) {
      return new Type_Path(_a0, typeArgs, resolved);
    }
    public static _IType create_Nullable(DAST._IType _a0) {
      return new Type_Nullable(_a0);
    }
    public static _IType create_Tuple(Dafny.ISequence<DAST._IType> _a0) {
      return new Type_Tuple(_a0);
    }
    public static _IType create_Array(DAST._IType element, BigInteger dims) {
      return new Type_Array(element, dims);
    }
    public static _IType create_Seq(DAST._IType element) {
      return new Type_Seq(element);
    }
    public static _IType create_Set(DAST._IType element) {
      return new Type_Set(element);
    }
    public static _IType create_Multiset(DAST._IType element) {
      return new Type_Multiset(element);
    }
    public static _IType create_Map(DAST._IType key, DAST._IType @value) {
      return new Type_Map(key, @value);
    }
    public static _IType create_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) {
      return new Type_Arrow(args, result);
    }
    public static _IType create_Primitive(DAST._IPrimitive _a0) {
      return new Type_Primitive(_a0);
    }
    public static _IType create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_Passthrough(_a0);
    }
    public static _IType create_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_TypeArg(_a0);
    }
    public bool is_Path { get { return this is Type_Path; } }
    public bool is_Nullable { get { return this is Type_Nullable; } }
    public bool is_Tuple { get { return this is Type_Tuple; } }
    public bool is_Array { get { return this is Type_Array; } }
    public bool is_Seq { get { return this is Type_Seq; } }
    public bool is_Set { get { return this is Type_Set; } }
    public bool is_Multiset { get { return this is Type_Multiset; } }
    public bool is_Map { get { return this is Type_Map; } }
    public bool is_Arrow { get { return this is Type_Arrow; } }
    public bool is_Primitive { get { return this is Type_Primitive; } }
    public bool is_Passthrough { get { return this is Type_Passthrough; } }
    public bool is_TypeArg { get { return this is Type_TypeArg; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 {
      get {
        var d = this;
        return ((Type_Path)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Type_Path)d)._typeArgs;
      }
    }
    public DAST._IResolvedType dtor_resolved {
      get {
        var d = this;
        return ((Type_Path)d)._resolved;
      }
    }
    public DAST._IType dtor_Nullable_a0 {
      get {
        var d = this;
        return ((Type_Nullable)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Type_Tuple)d)._a0;
      }
    }
    public DAST._IType dtor_element {
      get {
        var d = this;
        if (d is Type_Array) { return ((Type_Array)d)._element; }
        if (d is Type_Seq) { return ((Type_Seq)d)._element; }
        if (d is Type_Set) { return ((Type_Set)d)._element; }
        return ((Type_Multiset)d)._element;
      }
    }
    public BigInteger dtor_dims {
      get {
        var d = this;
        return ((Type_Array)d)._dims;
      }
    }
    public DAST._IType dtor_key {
      get {
        var d = this;
        return ((Type_Map)d)._key;
      }
    }
    public DAST._IType dtor_value {
      get {
        var d = this;
        return ((Type_Map)d)._value;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_args {
      get {
        var d = this;
        return ((Type_Arrow)d)._args;
      }
    }
    public DAST._IType dtor_result {
      get {
        var d = this;
        return ((Type_Arrow)d)._result;
      }
    }
    public DAST._IPrimitive dtor_Primitive_a0 {
      get {
        var d = this;
        return ((Type_Primitive)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((Type_Passthrough)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 {
      get {
        var d = this;
        return ((Type_TypeArg)d)._a0;
      }
    }
    public abstract _IType DowncastClone();
  }
  public class Type_Path : Type {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly DAST._IResolvedType _resolved;
    public Type_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) : base() {
      this._a0 = _a0;
      this._typeArgs = typeArgs;
      this._resolved = resolved;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Path(_a0, _typeArgs, _resolved);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Path;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._resolved, oth._resolved);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._resolved));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Path";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._resolved);
      s += ")";
      return s;
    }
  }
  public class Type_Nullable : Type {
    public readonly DAST._IType _a0;
    public Type_Nullable(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Nullable(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Nullable;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Nullable";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Tuple : Type {
    public readonly Dafny.ISequence<DAST._IType> _a0;
    public Type_Tuple(Dafny.ISequence<DAST._IType> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Array : Type {
    public readonly DAST._IType _element;
    public readonly BigInteger _dims;
    public Type_Array(DAST._IType element, BigInteger dims) : base() {
      this._element = element;
      this._dims = dims;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Array(_element, _dims);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Array;
      return oth != null && object.Equals(this._element, oth._element) && this._dims == oth._dims;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Array";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dims);
      s += ")";
      return s;
    }
  }
  public class Type_Seq : Type {
    public readonly DAST._IType _element;
    public Type_Seq(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Seq(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Seq;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Seq";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Set : Type {
    public readonly DAST._IType _element;
    public Type_Set(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Set(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Set;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Set";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Multiset : Type {
    public readonly DAST._IType _element;
    public Type_Multiset(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Multiset(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Multiset;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Multiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Map : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_Map(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Map(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Map;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Map";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_Arrow : Type {
    public readonly Dafny.ISequence<DAST._IType> _args;
    public readonly DAST._IType _result;
    public Type_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) : base() {
      this._args = args;
      this._result = result;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Arrow(_args, _result);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Arrow;
      return oth != null && object.Equals(this._args, oth._args) && object.Equals(this._result, oth._result);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._result));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Arrow";
      s += "(";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._result);
      s += ")";
      return s;
    }
  }
  public class Type_Primitive : Type {
    public readonly DAST._IPrimitive _a0;
    public Type_Primitive(DAST._IPrimitive _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Primitive(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Primitive;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Primitive";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Passthrough : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeArg : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeArg(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_TypeArg;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.TypeArg";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IPrimitive {
    bool is_Int { get; }
    bool is_Real { get; }
    bool is_String { get; }
    bool is_Bool { get; }
    bool is_Char { get; }
    _IPrimitive DowncastClone();
  }
  public abstract class Primitive : _IPrimitive {
    public Primitive() {
    }
    private static readonly DAST._IPrimitive theDefault = create_Int();
    public static DAST._IPrimitive Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IPrimitive> _TYPE = new Dafny.TypeDescriptor<DAST._IPrimitive>(DAST.Primitive.Default());
    public static Dafny.TypeDescriptor<DAST._IPrimitive> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrimitive create_Int() {
      return new Primitive_Int();
    }
    public static _IPrimitive create_Real() {
      return new Primitive_Real();
    }
    public static _IPrimitive create_String() {
      return new Primitive_String();
    }
    public static _IPrimitive create_Bool() {
      return new Primitive_Bool();
    }
    public static _IPrimitive create_Char() {
      return new Primitive_Char();
    }
    public bool is_Int { get { return this is Primitive_Int; } }
    public bool is_Real { get { return this is Primitive_Real; } }
    public bool is_String { get { return this is Primitive_String; } }
    public bool is_Bool { get { return this is Primitive_Bool; } }
    public bool is_Char { get { return this is Primitive_Char; } }
    public static System.Collections.Generic.IEnumerable<_IPrimitive> AllSingletonConstructors {
      get {
        yield return Primitive.create_Int();
        yield return Primitive.create_Real();
        yield return Primitive.create_String();
        yield return Primitive.create_Bool();
        yield return Primitive.create_Char();
      }
    }
    public abstract _IPrimitive DowncastClone();
  }
  public class Primitive_Int : Primitive {
    public Primitive_Int() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Int";
      return s;
    }
  }
  public class Primitive_Real : Primitive {
    public Primitive_Real() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Real();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Real;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Real";
      return s;
    }
  }
  public class Primitive_String : Primitive {
    public Primitive_String() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_String();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_String;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.String";
      return s;
    }
  }
  public class Primitive_Bool : Primitive {
    public Primitive_Bool() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Bool";
      return s;
    }
  }
  public class Primitive_Char : Primitive {
    public Primitive_Char() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Char();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Char;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Char";
      return s;
    }
  }

  public interface _INewtypeRange {
    bool is_U8 { get; }
    bool is_I8 { get; }
    bool is_U16 { get; }
    bool is_I16 { get; }
    bool is_U32 { get; }
    bool is_I32 { get; }
    bool is_U64 { get; }
    bool is_I64 { get; }
    bool is_U128 { get; }
    bool is_I128 { get; }
    bool is_BigInt { get; }
    bool is_NoRange { get; }
    _INewtypeRange DowncastClone();
  }
  public abstract class NewtypeRange : _INewtypeRange {
    public NewtypeRange() {
    }
    private static readonly DAST._INewtypeRange theDefault = create_U8();
    public static DAST._INewtypeRange Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtypeRange> _TYPE = new Dafny.TypeDescriptor<DAST._INewtypeRange>(DAST.NewtypeRange.Default());
    public static Dafny.TypeDescriptor<DAST._INewtypeRange> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtypeRange create_U8() {
      return new NewtypeRange_U8();
    }
    public static _INewtypeRange create_I8() {
      return new NewtypeRange_I8();
    }
    public static _INewtypeRange create_U16() {
      return new NewtypeRange_U16();
    }
    public static _INewtypeRange create_I16() {
      return new NewtypeRange_I16();
    }
    public static _INewtypeRange create_U32() {
      return new NewtypeRange_U32();
    }
    public static _INewtypeRange create_I32() {
      return new NewtypeRange_I32();
    }
    public static _INewtypeRange create_U64() {
      return new NewtypeRange_U64();
    }
    public static _INewtypeRange create_I64() {
      return new NewtypeRange_I64();
    }
    public static _INewtypeRange create_U128() {
      return new NewtypeRange_U128();
    }
    public static _INewtypeRange create_I128() {
      return new NewtypeRange_I128();
    }
    public static _INewtypeRange create_BigInt() {
      return new NewtypeRange_BigInt();
    }
    public static _INewtypeRange create_NoRange() {
      return new NewtypeRange_NoRange();
    }
    public bool is_U8 { get { return this is NewtypeRange_U8; } }
    public bool is_I8 { get { return this is NewtypeRange_I8; } }
    public bool is_U16 { get { return this is NewtypeRange_U16; } }
    public bool is_I16 { get { return this is NewtypeRange_I16; } }
    public bool is_U32 { get { return this is NewtypeRange_U32; } }
    public bool is_I32 { get { return this is NewtypeRange_I32; } }
    public bool is_U64 { get { return this is NewtypeRange_U64; } }
    public bool is_I64 { get { return this is NewtypeRange_I64; } }
    public bool is_U128 { get { return this is NewtypeRange_U128; } }
    public bool is_I128 { get { return this is NewtypeRange_I128; } }
    public bool is_BigInt { get { return this is NewtypeRange_BigInt; } }
    public bool is_NoRange { get { return this is NewtypeRange_NoRange; } }
    public static System.Collections.Generic.IEnumerable<_INewtypeRange> AllSingletonConstructors {
      get {
        yield return NewtypeRange.create_U8();
        yield return NewtypeRange.create_I8();
        yield return NewtypeRange.create_U16();
        yield return NewtypeRange.create_I16();
        yield return NewtypeRange.create_U32();
        yield return NewtypeRange.create_I32();
        yield return NewtypeRange.create_U64();
        yield return NewtypeRange.create_I64();
        yield return NewtypeRange.create_U128();
        yield return NewtypeRange.create_I128();
        yield return NewtypeRange.create_BigInt();
        yield return NewtypeRange.create_NoRange();
      }
    }
    public abstract _INewtypeRange DowncastClone();
  }
  public class NewtypeRange_U8 : NewtypeRange {
    public NewtypeRange_U8() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U8();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U8";
      return s;
    }
  }
  public class NewtypeRange_I8 : NewtypeRange {
    public NewtypeRange_I8() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I8();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I8";
      return s;
    }
  }
  public class NewtypeRange_U16 : NewtypeRange {
    public NewtypeRange_U16() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U16();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U16";
      return s;
    }
  }
  public class NewtypeRange_I16 : NewtypeRange {
    public NewtypeRange_I16() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I16();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I16";
      return s;
    }
  }
  public class NewtypeRange_U32 : NewtypeRange {
    public NewtypeRange_U32() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U32();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U32";
      return s;
    }
  }
  public class NewtypeRange_I32 : NewtypeRange {
    public NewtypeRange_I32() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I32();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I32";
      return s;
    }
  }
  public class NewtypeRange_U64 : NewtypeRange {
    public NewtypeRange_U64() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U64();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U64";
      return s;
    }
  }
  public class NewtypeRange_I64 : NewtypeRange {
    public NewtypeRange_I64() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I64();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I64";
      return s;
    }
  }
  public class NewtypeRange_U128 : NewtypeRange {
    public NewtypeRange_U128() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U128();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U128";
      return s;
    }
  }
  public class NewtypeRange_I128 : NewtypeRange {
    public NewtypeRange_I128() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I128();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I128";
      return s;
    }
  }
  public class NewtypeRange_BigInt : NewtypeRange {
    public NewtypeRange_BigInt() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_BigInt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_BigInt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.BigInt";
      return s;
    }
  }
  public class NewtypeRange_NoRange : NewtypeRange {
    public NewtypeRange_NoRange() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_NoRange();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_NoRange;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.NoRange";
      return s;
    }
  }

  public interface _IResolvedType {
    bool is_Datatype { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    DAST._IType dtor_baseType { get; }
    DAST._INewtypeRange dtor_range { get; }
    bool dtor_erase { get; }
    _IResolvedType DowncastClone();
  }
  public abstract class ResolvedType : _IResolvedType {
    public ResolvedType() {
    }
    private static readonly DAST._IResolvedType theDefault = create_Datatype(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty);
    public static DAST._IResolvedType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IResolvedType> _TYPE = new Dafny.TypeDescriptor<DAST._IResolvedType>(DAST.ResolvedType.Default());
    public static Dafny.TypeDescriptor<DAST._IResolvedType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IResolvedType create_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Datatype(path);
    }
    public static _IResolvedType create_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Trait(path);
    }
    public static _IResolvedType create_Newtype(DAST._IType baseType, DAST._INewtypeRange range, bool erase) {
      return new ResolvedType_Newtype(baseType, range, erase);
    }
    public bool is_Datatype { get { return this is ResolvedType_Datatype; } }
    public bool is_Trait { get { return this is ResolvedType_Trait; } }
    public bool is_Newtype { get { return this is ResolvedType_Newtype; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is ResolvedType_Datatype) { return ((ResolvedType_Datatype)d)._path; }
        return ((ResolvedType_Trait)d)._path;
      }
    }
    public DAST._IType dtor_baseType {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._baseType;
      }
    }
    public DAST._INewtypeRange dtor_range {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._range;
      }
    }
    public bool dtor_erase {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._erase;
      }
    }
    public abstract _IResolvedType DowncastClone();
  }
  public class ResolvedType_Datatype : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Datatype(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Datatype;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Trait : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Trait(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Trait;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Newtype : ResolvedType {
    public readonly DAST._IType _baseType;
    public readonly DAST._INewtypeRange _range;
    public readonly bool _erase;
    public ResolvedType_Newtype(DAST._IType baseType, DAST._INewtypeRange range, bool erase) : base() {
      this._baseType = baseType;
      this._range = range;
      this._erase = erase;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Newtype(_baseType, _range, _erase);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Newtype;
      return oth != null && object.Equals(this._baseType, oth._baseType) && object.Equals(this._range, oth._range) && this._erase == oth._erase;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._baseType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._range));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._erase));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._baseType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._range);
      s += ", ";
      s += Dafny.Helpers.ToString(this._erase);
      s += ")";
      return s;
    }
  }

  public interface _IIdent {
    bool is_Ident { get; }
    Dafny.ISequence<Dafny.Rune> dtor_id { get; }
  }
  public class Ident : _IIdent {
    public readonly Dafny.ISequence<Dafny.Rune> _id;
    public Ident(Dafny.ISequence<Dafny.Rune> id) {
      this._id = id;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Ident;
      return oth != null && object.Equals(this._id, oth._id);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._id));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Ident.Ident";
      s += "(";
      s += this._id.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IIdent create(Dafny.ISequence<Dafny.Rune> id) {
      return new Ident(id);
    }
    public static _IIdent create_Ident(Dafny.ISequence<Dafny.Rune> id) {
      return create(id);
    }
    public bool is_Ident { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_id {
      get {
        return this._id;
      }
    }
  }

  public interface _IClass {
    bool is_Class { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IType> dtor_superClasses { get; }
    Dafny.ISequence<DAST._IField> dtor_fields { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _IClass DowncastClone();
  }
  public class Class : _IClass {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IType> _superClasses;
    public readonly Dafny.ISequence<DAST._IField> _fields;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._superClasses = superClasses;
      this._fields = fields;
      this._body = body;
    }
    public _IClass DowncastClone() {
      if (this is _IClass dt) { return dt; }
      return new Class(_name, _enclosingModule, _typeParams, _superClasses, _fields, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Class;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._superClasses, oth._superClasses) && object.Equals(this._fields, oth._fields) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._superClasses));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Class.Class";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._superClasses);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IClass theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IField>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._IClass Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IClass> _TYPE = new Dafny.TypeDescriptor<DAST._IClass>(DAST.Class.Default());
    public static Dafny.TypeDescriptor<DAST._IClass> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClass create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return new Class(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public static _IClass create_Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public bool is_Class { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_superClasses {
      get {
        return this._superClasses;
      }
    }
    public Dafny.ISequence<DAST._IField> dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _ITrait DowncastClone();
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_name, _typeParams, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Trait;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Trait.Trait";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._ITrait theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ITrait> _TYPE = new Dafny.TypeDescriptor<DAST._ITrait>(DAST.Trait.Default());
    public static Dafny.TypeDescriptor<DAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return new Trait(name, typeParams, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, typeParams, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IDatatype {
    bool is_Datatype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    bool dtor_isCo { get; }
    _IDatatype DowncastClone();
  }
  public class Datatype : _IDatatype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IDatatypeCtor> _ctors;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly bool _isCo;
    public Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._ctors = ctors;
      this._body = body;
      this._isCo = isCo;
    }
    public _IDatatype DowncastClone() {
      if (this is _IDatatype dt) { return dt; }
      return new Datatype(_name, _enclosingModule, _typeParams, _ctors, _body, _isCo);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Datatype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._ctors, oth._ctors) && object.Equals(this._body, oth._body) && this._isCo == oth._isCo;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ctors));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Datatype.Datatype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ctors);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IDatatypeCtor>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, false);
    public static DAST._IDatatype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatype> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatype>(DAST.Datatype.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return new Datatype(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public static _IDatatype create_Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return create(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public bool is_Datatype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors {
      get {
        return this._ctors;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public bool dtor_isCo {
      get {
        return this._isCo;
      }
    }
  }

  public interface _IDatatypeCtor {
    bool is_DatatypeCtor { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_args { get; }
    bool dtor_hasAnyArgs { get; }
    _IDatatypeCtor DowncastClone();
  }
  public class DatatypeCtor : _IDatatypeCtor {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IFormal> _args;
    public readonly bool _hasAnyArgs;
    public DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      this._name = name;
      this._args = args;
      this._hasAnyArgs = hasAnyArgs;
    }
    public _IDatatypeCtor DowncastClone() {
      if (this is _IDatatypeCtor dt) { return dt; }
      return new DatatypeCtor(_name, _args, _hasAnyArgs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.DatatypeCtor;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._args, oth._args) && this._hasAnyArgs == oth._hasAnyArgs;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasAnyArgs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.DatatypeCtor.DatatypeCtor";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasAnyArgs);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatypeCtor theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, false);
    public static DAST._IDatatypeCtor Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatypeCtor>(DAST.DatatypeCtor.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatypeCtor create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return new DatatypeCtor(name, args, hasAnyArgs);
    }
    public static _IDatatypeCtor create_DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return create(name, args, hasAnyArgs);
    }
    public bool is_DatatypeCtor { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_args {
      get {
        return this._args;
      }
    }
    public bool dtor_hasAnyArgs {
      get {
        return this._hasAnyArgs;
      }
    }
  }

  public interface _INewtype {
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    DAST._IType dtor_base { get; }
    DAST._INewtypeRange dtor_range { get; }
    Dafny.ISequence<DAST._IStatement> dtor_witnessStmts { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_witnessExpr { get; }
    _INewtype DowncastClone();
  }
  public class Newtype : _INewtype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly DAST._IType _base;
    public readonly DAST._INewtypeRange _range;
    public readonly Dafny.ISequence<DAST._IStatement> _witnessStmts;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _witnessExpr;
    public Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, DAST._INewtypeRange range, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr) {
      this._name = name;
      this._typeParams = typeParams;
      this._base = @base;
      this._range = range;
      this._witnessStmts = witnessStmts;
      this._witnessExpr = witnessExpr;
    }
    public _INewtype DowncastClone() {
      if (this is _INewtype dt) { return dt; }
      return new Newtype(_name, _typeParams, _base, _range, _witnessStmts, _witnessExpr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Newtype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._base, oth._base) && object.Equals(this._range, oth._range) && object.Equals(this._witnessStmts, oth._witnessStmts) && object.Equals(this._witnessExpr, oth._witnessExpr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._range));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessStmts));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessExpr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Newtype.Newtype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += Dafny.Helpers.ToString(this._range);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessStmts);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessExpr);
      s += ")";
      return s;
    }
    private static readonly DAST._INewtype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Type.Default(), DAST.NewtypeRange.Default(), Dafny.Sequence<DAST._IStatement>.Empty, Std.Wrappers.Option<DAST._IExpression>.Default());
    public static DAST._INewtype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtype> _TYPE = new Dafny.TypeDescriptor<DAST._INewtype>(DAST.Newtype.Default());
    public static Dafny.TypeDescriptor<DAST._INewtype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, DAST._INewtypeRange range, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr) {
      return new Newtype(name, typeParams, @base, range, witnessStmts, witnessExpr);
    }
    public static _INewtype create_Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, DAST._INewtypeRange range, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr) {
      return create(name, typeParams, @base, range, witnessStmts, witnessExpr);
    }
    public bool is_Newtype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public DAST._IType dtor_base {
      get {
        return this._base;
      }
    }
    public DAST._INewtypeRange dtor_range {
      get {
        return this._range;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_witnessStmts {
      get {
        return this._witnessStmts;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_witnessExpr {
      get {
        return this._witnessExpr;
      }
    }
  }

  public interface _IClassItem {
    bool is_Method { get; }
    DAST._IMethod dtor_Method_a0 { get; }
  }
  public class ClassItem : _IClassItem {
    public readonly DAST._IMethod _a0;
    public ClassItem(DAST._IMethod _a0) {
      this._a0 = _a0;
    }
    public static DAST._IMethod DowncastClone(DAST._IMethod _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ClassItem;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ClassItem.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = DAST.Method.Default();
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClassItem create(DAST._IMethod _a0) {
      return new ClassItem(_a0);
    }
    public static _IClassItem create_Method(DAST._IMethod _a0) {
      return create(_a0);
    }
    public bool is_Method { get { return true; } }
    public DAST._IMethod dtor_Method_a0 {
      get {
        return this._a0;
      }
    }
  }

  public interface _IField {
    bool is_Field { get; }
    DAST._IFormal dtor_formal { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_defaultValue { get; }
    _IField DowncastClone();
  }
  public class Field : _IField {
    public readonly DAST._IFormal _formal;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _defaultValue;
    public Field(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      this._formal = formal;
      this._defaultValue = defaultValue;
    }
    public _IField DowncastClone() {
      if (this is _IField dt) { return dt; }
      return new Field(_formal, _defaultValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Field;
      return oth != null && object.Equals(this._formal, oth._formal) && object.Equals(this._defaultValue, oth._defaultValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formal));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._defaultValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Field.Field";
      s += "(";
      s += Dafny.Helpers.ToString(this._formal);
      s += ", ";
      s += Dafny.Helpers.ToString(this._defaultValue);
      s += ")";
      return s;
    }
    private static readonly DAST._IField theDefault = create(DAST.Formal.Default(), Std.Wrappers.Option<DAST._IExpression>.Default());
    public static DAST._IField Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IField> _TYPE = new Dafny.TypeDescriptor<DAST._IField>(DAST.Field.Default());
    public static Dafny.TypeDescriptor<DAST._IField> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IField create(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      return new Field(formal, defaultValue);
    }
    public static _IField create_Field(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      return create(formal, defaultValue);
    }
    public bool is_Field { get { return true; } }
    public DAST._IFormal dtor_formal {
      get {
        return this._formal;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_defaultValue {
      get {
        return this._defaultValue;
      }
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    _IFormal DowncastClone();
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      this._name = name;
      this._typ = typ;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
    private static readonly DAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default());
    public static DAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IFormal> _TYPE = new Dafny.TypeDescriptor<DAST._IFormal>(DAST.Formal.Default());
    public static Dafny.TypeDescriptor<DAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return new Formal(name, typ);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return create(name, typ);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        return this._typ;
      }
    }
  }

  public interface _IMethod {
    bool is_Method { get; }
    bool dtor_isStatic { get; }
    bool dtor_hasBody { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<DAST._IType> dtor_outTypes { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars { get; }
    _IMethod DowncastClone();
  }
  public class Method : _IMethod {
    public readonly bool _isStatic;
    public readonly bool _hasBody;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _overridingPath;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public readonly Dafny.ISequence<DAST._IType> _outTypes;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outVars;
    public Method(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      this._isStatic = isStatic;
      this._hasBody = hasBody;
      this._overridingPath = overridingPath;
      this._name = name;
      this._typeParams = typeParams;
      this._params = @params;
      this._body = body;
      this._outTypes = outTypes;
      this._outVars = outVars;
    }
    public _IMethod DowncastClone() {
      if (this is _IMethod dt) { return dt; }
      return new Method(_isStatic, _hasBody, _overridingPath, _name, _typeParams, _params, _body, _outTypes, _outVars);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Method;
      return oth != null && this._isStatic == oth._isStatic && this._hasBody == oth._hasBody && object.Equals(this._overridingPath, oth._overridingPath) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._params, oth._params) && object.Equals(this._body, oth._body) && object.Equals(this._outTypes, oth._outTypes) && object.Equals(this._outVars, oth._outVars);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasBody));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._overridingPath));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outTypes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outVars));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Method.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasBody);
      s += ", ";
      s += Dafny.Helpers.ToString(this._overridingPath);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outTypes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outVars);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = create(false, false, Std.Wrappers.Option<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, Dafny.Sequence<DAST._IStatement>.Empty, Dafny.Sequence<DAST._IType>.Empty, Std.Wrappers.Option<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default());
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMethod create(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return new Method(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public static _IMethod create_Method(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return create(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public bool is_Method { get { return true; } }
    public bool dtor_isStatic {
      get {
        return this._isStatic;
      }
    }
    public bool dtor_hasBody {
      get {
        return this._hasBody;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath {
      get {
        return this._overridingPath;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        return this._params;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_outTypes {
      get {
        return this._outTypes;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars {
      get {
        return this._outVars;
      }
    }
  }

  public interface _IStatement {
    bool is_DeclareVar { get; }
    bool is_Assign { get; }
    bool is_If { get; }
    bool is_Labeled { get; }
    bool is_While { get; }
    bool is_Foreach { get; }
    bool is_Call { get; }
    bool is_Return { get; }
    bool is_EarlyReturn { get; }
    bool is_Break { get; }
    bool is_TailRecursive { get; }
    bool is_JumpTailCallStart { get; }
    bool is_Halt { get; }
    bool is_Print { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_maybeValue { get; }
    DAST._IAssignLhs dtor_lhs { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IExpression dtor_cond { get; }
    Dafny.ISequence<DAST._IStatement> dtor_thn { get; }
    Dafny.ISequence<DAST._IStatement> dtor_els { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_boundName { get; }
    DAST._IType dtor_boundType { get; }
    DAST._IExpression dtor_over { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs { get; }
    DAST._IExpression dtor_expr { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_toLabel { get; }
    DAST._IExpression dtor_Print_a0 { get; }
    _IStatement DowncastClone();
  }
  public abstract class Statement : _IStatement {
    public Statement() {
    }
    private static readonly DAST._IStatement theDefault = create_DeclareVar(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default(), Std.Wrappers.Option<DAST._IExpression>.Default());
    public static DAST._IStatement Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IStatement> _TYPE = new Dafny.TypeDescriptor<DAST._IStatement>(DAST.Statement.Default());
    public static Dafny.TypeDescriptor<DAST._IStatement> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStatement create_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, Std.Wrappers._IOption<DAST._IExpression> maybeValue) {
      return new Statement_DeclareVar(name, typ, maybeValue);
    }
    public static _IStatement create_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) {
      return new Statement_Assign(lhs, @value);
    }
    public static _IStatement create_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) {
      return new Statement_If(cond, thn, els);
    }
    public static _IStatement create_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Labeled(lbl, body);
    }
    public static _IStatement create_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_While(cond, body);
    }
    public static _IStatement create_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Foreach(boundName, boundType, over, body);
    }
    public static _IStatement create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) {
      return new Statement_Call(@on, name, typeArgs, args, outs);
    }
    public static _IStatement create_Return(DAST._IExpression expr) {
      return new Statement_Return(expr);
    }
    public static _IStatement create_EarlyReturn() {
      return new Statement_EarlyReturn();
    }
    public static _IStatement create_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> toLabel) {
      return new Statement_Break(toLabel);
    }
    public static _IStatement create_TailRecursive(Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_TailRecursive(body);
    }
    public static _IStatement create_JumpTailCallStart() {
      return new Statement_JumpTailCallStart();
    }
    public static _IStatement create_Halt() {
      return new Statement_Halt();
    }
    public static _IStatement create_Print(DAST._IExpression _a0) {
      return new Statement_Print(_a0);
    }
    public bool is_DeclareVar { get { return this is Statement_DeclareVar; } }
    public bool is_Assign { get { return this is Statement_Assign; } }
    public bool is_If { get { return this is Statement_If; } }
    public bool is_Labeled { get { return this is Statement_Labeled; } }
    public bool is_While { get { return this is Statement_While; } }
    public bool is_Foreach { get { return this is Statement_Foreach; } }
    public bool is_Call { get { return this is Statement_Call; } }
    public bool is_Return { get { return this is Statement_Return; } }
    public bool is_EarlyReturn { get { return this is Statement_EarlyReturn; } }
    public bool is_Break { get { return this is Statement_Break; } }
    public bool is_TailRecursive { get { return this is Statement_TailRecursive; } }
    public bool is_JumpTailCallStart { get { return this is Statement_JumpTailCallStart; } }
    public bool is_Halt { get { return this is Statement_Halt; } }
    public bool is_Print { get { return this is Statement_Print; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Statement_DeclareVar) { return ((Statement_DeclareVar)d)._name; }
        return ((Statement_Call)d)._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._typ;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_maybeValue {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._maybeValue;
      }
    }
    public DAST._IAssignLhs dtor_lhs {
      get {
        var d = this;
        return ((Statement_Assign)d)._lhs;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        return ((Statement_Assign)d)._value;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        if (d is Statement_If) { return ((Statement_If)d)._cond; }
        return ((Statement_While)d)._cond;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_thn {
      get {
        var d = this;
        return ((Statement_If)d)._thn;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_els {
      get {
        var d = this;
        return ((Statement_If)d)._els;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Statement_Labeled)d)._lbl;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        if (d is Statement_Labeled) { return ((Statement_Labeled)d)._body; }
        if (d is Statement_While) { return ((Statement_While)d)._body; }
        if (d is Statement_Foreach) { return ((Statement_Foreach)d)._body; }
        return ((Statement_TailRecursive)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_boundName {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundName;
      }
    }
    public DAST._IType dtor_boundType {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundType;
      }
    }
    public DAST._IExpression dtor_over {
      get {
        var d = this;
        return ((Statement_Foreach)d)._over;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        return ((Statement_Call)d)._on;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Statement_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        return ((Statement_Call)d)._args;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs {
      get {
        var d = this;
        return ((Statement_Call)d)._outs;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        return ((Statement_Return)d)._expr;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_toLabel {
      get {
        var d = this;
        return ((Statement_Break)d)._toLabel;
      }
    }
    public DAST._IExpression dtor_Print_a0 {
      get {
        var d = this;
        return ((Statement_Print)d)._a0;
      }
    }
    public abstract _IStatement DowncastClone();
  }
  public class Statement_DeclareVar : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _maybeValue;
    public Statement_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, Std.Wrappers._IOption<DAST._IExpression> maybeValue) : base() {
      this._name = name;
      this._typ = typ;
      this._maybeValue = maybeValue;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_DeclareVar(_name, _typ, _maybeValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_DeclareVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._maybeValue, oth._maybeValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._maybeValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.DeclareVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._maybeValue);
      s += ")";
      return s;
    }
  }
  public class Statement_Assign : Statement {
    public readonly DAST._IAssignLhs _lhs;
    public readonly DAST._IExpression _value;
    public Statement_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) : base() {
      this._lhs = lhs;
      this._value = @value;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Assign(_lhs, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Assign;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Assign";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Statement_If : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _thn;
    public readonly Dafny.ISequence<DAST._IStatement> _els;
    public Statement_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_If(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_If;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.If";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Statement_Labeled : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._lbl = lbl;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Labeled(_lbl, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Labeled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Labeled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_While : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._cond = cond;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_While(_cond, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_While;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.While";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Foreach : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _boundName;
    public readonly DAST._IType _boundType;
    public readonly DAST._IExpression _over;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._boundName = boundName;
      this._boundType = boundType;
      this._over = over;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Foreach(_boundName, _boundType, _over, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Foreach;
      return oth != null && object.Equals(this._boundName, oth._boundName) && object.Equals(this._boundType, oth._boundType) && object.Equals(this._over, oth._over) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._over));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Foreach";
      s += "(";
      s += this._boundName.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._boundType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._over);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Call : Statement {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outs;
    public Statement_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
      this._outs = outs;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Call(_on, _name, _typeArgs, _args, _outs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args) && object.Equals(this._outs, oth._outs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outs);
      s += ")";
      return s;
    }
  }
  public class Statement_Return : Statement {
    public readonly DAST._IExpression _expr;
    public Statement_Return(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Return(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Return;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Statement_EarlyReturn : Statement {
    public Statement_EarlyReturn() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_EarlyReturn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_EarlyReturn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.EarlyReturn";
      return s;
    }
  }
  public class Statement_Break : Statement {
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _toLabel;
    public Statement_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> toLabel) : base() {
      this._toLabel = toLabel;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Break(_toLabel);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Break;
      return oth != null && object.Equals(this._toLabel, oth._toLabel);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._toLabel));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._toLabel);
      s += ")";
      return s;
    }
  }
  public class Statement_TailRecursive : Statement {
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_TailRecursive(Dafny.ISequence<DAST._IStatement> body) : base() {
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_TailRecursive(_body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_TailRecursive;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.TailRecursive";
      s += "(";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_JumpTailCallStart : Statement {
    public Statement_JumpTailCallStart() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_JumpTailCallStart();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_JumpTailCallStart;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.JumpTailCallStart";
      return s;
    }
  }
  public class Statement_Halt : Statement {
    public Statement_Halt() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Halt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Halt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Halt";
      return s;
    }
  }
  public class Statement_Print : Statement {
    public readonly DAST._IExpression _a0;
    public Statement_Print(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IAssignLhs {
    bool is_Ident { get; }
    bool is_Select { get; }
    bool is_Index { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    DAST._IExpression dtor_expr { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    _IAssignLhs DowncastClone();
  }
  public abstract class AssignLhs : _IAssignLhs {
    public AssignLhs() {
    }
    private static readonly DAST._IAssignLhs theDefault = create_Ident(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._IAssignLhs Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IAssignLhs> _TYPE = new Dafny.TypeDescriptor<DAST._IAssignLhs>(DAST.AssignLhs.Default());
    public static Dafny.TypeDescriptor<DAST._IAssignLhs> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignLhs create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new AssignLhs_Ident(_a0);
    }
    public static _IAssignLhs create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) {
      return new AssignLhs_Select(expr, field);
    }
    public static _IAssignLhs create_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) {
      return new AssignLhs_Index(expr, indices);
    }
    public bool is_Ident { get { return this is AssignLhs_Ident; } }
    public bool is_Select { get { return this is AssignLhs_Select; } }
    public bool is_Index { get { return this is AssignLhs_Index; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((AssignLhs_Ident)d)._a0;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is AssignLhs_Select) { return ((AssignLhs_Select)d)._expr; }
        return ((AssignLhs_Index)d)._expr;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((AssignLhs_Select)d)._field;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((AssignLhs_Index)d)._indices;
      }
    }
    public abstract _IAssignLhs DowncastClone();
  }
  public class AssignLhs_Ident : AssignLhs {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public AssignLhs_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Ident";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Select : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public AssignLhs_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._expr = expr;
      this._field = field;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Select(_expr, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Index : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public AssignLhs_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._indices = indices;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Index(_expr, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }

  public interface _ICollKind {
    bool is_Seq { get; }
    bool is_Array { get; }
    bool is_Map { get; }
    _ICollKind DowncastClone();
  }
  public abstract class CollKind : _ICollKind {
    public CollKind() {
    }
    private static readonly DAST._ICollKind theDefault = create_Seq();
    public static DAST._ICollKind Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICollKind> _TYPE = new Dafny.TypeDescriptor<DAST._ICollKind>(DAST.CollKind.Default());
    public static Dafny.TypeDescriptor<DAST._ICollKind> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICollKind create_Seq() {
      return new CollKind_Seq();
    }
    public static _ICollKind create_Array() {
      return new CollKind_Array();
    }
    public static _ICollKind create_Map() {
      return new CollKind_Map();
    }
    public bool is_Seq { get { return this is CollKind_Seq; } }
    public bool is_Array { get { return this is CollKind_Array; } }
    public bool is_Map { get { return this is CollKind_Map; } }
    public static System.Collections.Generic.IEnumerable<_ICollKind> AllSingletonConstructors {
      get {
        yield return CollKind.create_Seq();
        yield return CollKind.create_Array();
        yield return CollKind.create_Map();
      }
    }
    public abstract _ICollKind DowncastClone();
  }
  public class CollKind_Seq : CollKind {
    public CollKind_Seq() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Seq();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Seq;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Seq";
      return s;
    }
  }
  public class CollKind_Array : CollKind {
    public CollKind_Array() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Array();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Array;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Array";
      return s;
    }
  }
  public class CollKind_Map : CollKind {
    public CollKind_Map() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Map();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Map;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Map";
      return s;
    }
  }

  public interface _IBinOp {
    bool is_Eq { get; }
    bool is_Div { get; }
    bool is_EuclidianDiv { get; }
    bool is_Mod { get; }
    bool is_EuclidianMod { get; }
    bool is_Lt { get; }
    bool is_Plus { get; }
    bool is_Minus { get; }
    bool is_Times { get; }
    bool is_BitwiseAnd { get; }
    bool is_BitwiseOr { get; }
    bool is_BitwiseXor { get; }
    bool is_BitwiseShiftRight { get; }
    bool is_BitwiseShiftLeft { get; }
    bool is_And { get; }
    bool is_Or { get; }
    bool is_In { get; }
    bool is_SetDifference { get; }
    bool is_Concat { get; }
    bool is_Passthrough { get; }
    bool dtor_referential { get; }
    bool dtor_nullable { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    _IBinOp DowncastClone();
  }
  public abstract class BinOp : _IBinOp {
    public BinOp() {
    }
    private static readonly DAST._IBinOp theDefault = create_Eq(false, false);
    public static DAST._IBinOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IBinOp> _TYPE = new Dafny.TypeDescriptor<DAST._IBinOp>(DAST.BinOp.Default());
    public static Dafny.TypeDescriptor<DAST._IBinOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOp create_Eq(bool referential, bool nullable) {
      return new BinOp_Eq(referential, nullable);
    }
    public static _IBinOp create_Div() {
      return new BinOp_Div();
    }
    public static _IBinOp create_EuclidianDiv() {
      return new BinOp_EuclidianDiv();
    }
    public static _IBinOp create_Mod() {
      return new BinOp_Mod();
    }
    public static _IBinOp create_EuclidianMod() {
      return new BinOp_EuclidianMod();
    }
    public static _IBinOp create_Lt() {
      return new BinOp_Lt();
    }
    public static _IBinOp create_Plus() {
      return new BinOp_Plus();
    }
    public static _IBinOp create_Minus() {
      return new BinOp_Minus();
    }
    public static _IBinOp create_Times() {
      return new BinOp_Times();
    }
    public static _IBinOp create_BitwiseAnd() {
      return new BinOp_BitwiseAnd();
    }
    public static _IBinOp create_BitwiseOr() {
      return new BinOp_BitwiseOr();
    }
    public static _IBinOp create_BitwiseXor() {
      return new BinOp_BitwiseXor();
    }
    public static _IBinOp create_BitwiseShiftRight() {
      return new BinOp_BitwiseShiftRight();
    }
    public static _IBinOp create_BitwiseShiftLeft() {
      return new BinOp_BitwiseShiftLeft();
    }
    public static _IBinOp create_And() {
      return new BinOp_And();
    }
    public static _IBinOp create_Or() {
      return new BinOp_Or();
    }
    public static _IBinOp create_In() {
      return new BinOp_In();
    }
    public static _IBinOp create_SetDifference() {
      return new BinOp_SetDifference();
    }
    public static _IBinOp create_Concat() {
      return new BinOp_Concat();
    }
    public static _IBinOp create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new BinOp_Passthrough(_a0);
    }
    public bool is_Eq { get { return this is BinOp_Eq; } }
    public bool is_Div { get { return this is BinOp_Div; } }
    public bool is_EuclidianDiv { get { return this is BinOp_EuclidianDiv; } }
    public bool is_Mod { get { return this is BinOp_Mod; } }
    public bool is_EuclidianMod { get { return this is BinOp_EuclidianMod; } }
    public bool is_Lt { get { return this is BinOp_Lt; } }
    public bool is_Plus { get { return this is BinOp_Plus; } }
    public bool is_Minus { get { return this is BinOp_Minus; } }
    public bool is_Times { get { return this is BinOp_Times; } }
    public bool is_BitwiseAnd { get { return this is BinOp_BitwiseAnd; } }
    public bool is_BitwiseOr { get { return this is BinOp_BitwiseOr; } }
    public bool is_BitwiseXor { get { return this is BinOp_BitwiseXor; } }
    public bool is_BitwiseShiftRight { get { return this is BinOp_BitwiseShiftRight; } }
    public bool is_BitwiseShiftLeft { get { return this is BinOp_BitwiseShiftLeft; } }
    public bool is_And { get { return this is BinOp_And; } }
    public bool is_Or { get { return this is BinOp_Or; } }
    public bool is_In { get { return this is BinOp_In; } }
    public bool is_SetDifference { get { return this is BinOp_SetDifference; } }
    public bool is_Concat { get { return this is BinOp_Concat; } }
    public bool is_Passthrough { get { return this is BinOp_Passthrough; } }
    public bool dtor_referential {
      get {
        var d = this;
        return ((BinOp_Eq)d)._referential;
      }
    }
    public bool dtor_nullable {
      get {
        var d = this;
        return ((BinOp_Eq)d)._nullable;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((BinOp_Passthrough)d)._a0;
      }
    }
    public abstract _IBinOp DowncastClone();
  }
  public class BinOp_Eq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Eq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Eq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Eq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Eq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Div : BinOp {
    public BinOp_Div() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Div();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Div;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Div";
      return s;
    }
  }
  public class BinOp_EuclidianDiv : BinOp {
    public BinOp_EuclidianDiv() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianDiv();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianDiv;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianDiv";
      return s;
    }
  }
  public class BinOp_Mod : BinOp {
    public BinOp_Mod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Mod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Mod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Mod";
      return s;
    }
  }
  public class BinOp_EuclidianMod : BinOp {
    public BinOp_EuclidianMod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianMod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianMod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianMod";
      return s;
    }
  }
  public class BinOp_Lt : BinOp {
    public BinOp_Lt() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Lt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Lt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Lt";
      return s;
    }
  }
  public class BinOp_Plus : BinOp {
    public BinOp_Plus() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Plus();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Plus;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Plus";
      return s;
    }
  }
  public class BinOp_Minus : BinOp {
    public BinOp_Minus() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Minus();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Minus;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Minus";
      return s;
    }
  }
  public class BinOp_Times : BinOp {
    public BinOp_Times() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Times();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Times;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Times";
      return s;
    }
  }
  public class BinOp_BitwiseAnd : BinOp {
    public BinOp_BitwiseAnd() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseAnd();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseAnd;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseAnd";
      return s;
    }
  }
  public class BinOp_BitwiseOr : BinOp {
    public BinOp_BitwiseOr() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseOr();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseOr;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseOr";
      return s;
    }
  }
  public class BinOp_BitwiseXor : BinOp {
    public BinOp_BitwiseXor() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseXor();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseXor;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseXor";
      return s;
    }
  }
  public class BinOp_BitwiseShiftRight : BinOp {
    public BinOp_BitwiseShiftRight() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseShiftRight();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseShiftRight;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseShiftRight";
      return s;
    }
  }
  public class BinOp_BitwiseShiftLeft : BinOp {
    public BinOp_BitwiseShiftLeft() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseShiftLeft();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseShiftLeft;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseShiftLeft";
      return s;
    }
  }
  public class BinOp_And : BinOp {
    public BinOp_And() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_And();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_And;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.And";
      return s;
    }
  }
  public class BinOp_Or : BinOp {
    public BinOp_Or() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Or();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Or;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Or";
      return s;
    }
  }
  public class BinOp_In : BinOp {
    public BinOp_In() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_In();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_In;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.In";
      return s;
    }
  }
  public class BinOp_SetDifference : BinOp {
    public BinOp_SetDifference() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetDifference();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetDifference;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetDifference";
      return s;
    }
  }
  public class BinOp_Concat : BinOp {
    public BinOp_Concat() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Concat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Concat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Concat";
      return s;
    }
  }
  public class BinOp_Passthrough : BinOp {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public BinOp_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IExpression {
    bool is_Literal { get; }
    bool is_Ident { get; }
    bool is_Companion { get; }
    bool is_Tuple { get; }
    bool is_New { get; }
    bool is_NewArray { get; }
    bool is_DatatypeValue { get; }
    bool is_Convert { get; }
    bool is_SeqConstruct { get; }
    bool is_SeqValue { get; }
    bool is_SetValue { get; }
    bool is_MapValue { get; }
    bool is_This { get; }
    bool is_Ite { get; }
    bool is_UnOp { get; }
    bool is_BinOp { get; }
    bool is_ArrayLen { get; }
    bool is_Select { get; }
    bool is_SelectFn { get; }
    bool is_Index { get; }
    bool is_IndexRange { get; }
    bool is_TupleSelect { get; }
    bool is_Call { get; }
    bool is_Lambda { get; }
    bool is_BetaRedex { get; }
    bool is_IIFE { get; }
    bool is_Apply { get; }
    bool is_TypeTest { get; }
    bool is_InitializationValue { get; }
    bool is_BoolBoundedPool { get; }
    bool is_SetBoundedPool { get; }
    bool is_SeqBoundedPool { get; }
    bool is_IntRange { get; }
    DAST._ILiteral dtor_Literal_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 { get; }
    Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Dafny.ISequence<DAST._IExpression> dtor_dims { get; }
    DAST._IType dtor_typ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_variant { get; }
    bool dtor_isCo { get; }
    Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IType dtor_from { get; }
    DAST._IExpression dtor_length { get; }
    DAST._IExpression dtor_elem { get; }
    Dafny.ISequence<DAST._IExpression> dtor_elements { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems { get; }
    DAST._IExpression dtor_cond { get; }
    DAST._IExpression dtor_thn { get; }
    DAST._IExpression dtor_els { get; }
    DAST._IUnaryOp dtor_unOp { get; }
    DAST._IExpression dtor_expr { get; }
    DAST.Format._IUnOpFormat dtor_format1 { get; }
    DAST._IBinOp dtor_op { get; }
    DAST._IExpression dtor_left { get; }
    DAST._IExpression dtor_right { get; }
    DAST.Format._IBinOpFormat dtor_format2 { get; }
    BigInteger dtor_dim { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    bool dtor_isConstant { get; }
    bool dtor_onDatatype { get; }
    bool dtor_isStatic { get; }
    BigInteger dtor_arity { get; }
    DAST._ICollKind dtor_collKind { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    bool dtor_isArray { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_low { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_high { get; }
    BigInteger dtor_index { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    DAST._IType dtor_retType { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values { get; }
    DAST._IExpression dtor_iifeBody { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType { get; }
    DAST._IExpression dtor_of { get; }
    bool dtor_includeDuplicates { get; }
    DAST._IExpression dtor_lo { get; }
    DAST._IExpression dtor_hi { get; }
    _IExpression DowncastClone();
  }
  public abstract class Expression : _IExpression {
    public Expression() {
    }
    private static readonly DAST._IExpression theDefault = create_Literal(DAST.Literal.Default());
    public static DAST._IExpression Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IExpression> _TYPE = new Dafny.TypeDescriptor<DAST._IExpression>(DAST.Expression.Default());
    public static Dafny.TypeDescriptor<DAST._IExpression> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpression create_Literal(DAST._ILiteral _a0) {
      return new Expression_Literal(_a0);
    }
    public static _IExpression create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expression_Ident(_a0);
    }
    public static _IExpression create_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) {
      return new Expression_Companion(_a0);
    }
    public static _IExpression create_Tuple(Dafny.ISequence<DAST._IExpression> _a0) {
      return new Expression_Tuple(_a0);
    }
    public static _IExpression create_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_New(path, typeArgs, args);
    }
    public static _IExpression create_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) {
      return new Expression_NewArray(dims, typ);
    }
    public static _IExpression create_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) {
      return new Expression_DatatypeValue(path, typeArgs, variant, isCo, contents);
    }
    public static _IExpression create_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) {
      return new Expression_Convert(@value, @from, typ);
    }
    public static _IExpression create_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) {
      return new Expression_SeqConstruct(length, elem);
    }
    public static _IExpression create_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) {
      return new Expression_SeqValue(elements, typ);
    }
    public static _IExpression create_SetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_SetValue(elements);
    }
    public static _IExpression create_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) {
      return new Expression_MapValue(mapElems);
    }
    public static _IExpression create_This() {
      return new Expression_This();
    }
    public static _IExpression create_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) {
      return new Expression_Ite(cond, thn, els);
    }
    public static _IExpression create_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr, DAST.Format._IUnOpFormat format1) {
      return new Expression_UnOp(unOp, expr, format1);
    }
    public static _IExpression create_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right, DAST.Format._IBinOpFormat format2) {
      return new Expression_BinOp(op, left, right, format2);
    }
    public static _IExpression create_ArrayLen(DAST._IExpression expr, BigInteger dim) {
      return new Expression_ArrayLen(expr, dim);
    }
    public static _IExpression create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) {
      return new Expression_Select(expr, field, isConstant, onDatatype);
    }
    public static _IExpression create_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) {
      return new Expression_SelectFn(expr, field, onDatatype, isStatic, arity);
    }
    public static _IExpression create_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) {
      return new Expression_Index(expr, collKind, indices);
    }
    public static _IExpression create_IndexRange(DAST._IExpression expr, bool isArray, Std.Wrappers._IOption<DAST._IExpression> low, Std.Wrappers._IOption<DAST._IExpression> high) {
      return new Expression_IndexRange(expr, isArray, low, high);
    }
    public static _IExpression create_TupleSelect(DAST._IExpression expr, BigInteger index) {
      return new Expression_TupleSelect(expr, index);
    }
    public static _IExpression create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Call(@on, name, typeArgs, args);
    }
    public static _IExpression create_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) {
      return new Expression_Lambda(@params, retType, body);
    }
    public static _IExpression create_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) {
      return new Expression_BetaRedex(values, retType, expr);
    }
    public static _IExpression create_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) {
      return new Expression_IIFE(name, typ, @value, iifeBody);
    }
    public static _IExpression create_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Apply(expr, args);
    }
    public static _IExpression create_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) {
      return new Expression_TypeTest(@on, dType, variant);
    }
    public static _IExpression create_InitializationValue(DAST._IType typ) {
      return new Expression_InitializationValue(typ);
    }
    public static _IExpression create_BoolBoundedPool() {
      return new Expression_BoolBoundedPool();
    }
    public static _IExpression create_SetBoundedPool(DAST._IExpression of) {
      return new Expression_SetBoundedPool(of);
    }
    public static _IExpression create_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) {
      return new Expression_SeqBoundedPool(of, includeDuplicates);
    }
    public static _IExpression create_IntRange(DAST._IExpression lo, DAST._IExpression hi) {
      return new Expression_IntRange(lo, hi);
    }
    public bool is_Literal { get { return this is Expression_Literal; } }
    public bool is_Ident { get { return this is Expression_Ident; } }
    public bool is_Companion { get { return this is Expression_Companion; } }
    public bool is_Tuple { get { return this is Expression_Tuple; } }
    public bool is_New { get { return this is Expression_New; } }
    public bool is_NewArray { get { return this is Expression_NewArray; } }
    public bool is_DatatypeValue { get { return this is Expression_DatatypeValue; } }
    public bool is_Convert { get { return this is Expression_Convert; } }
    public bool is_SeqConstruct { get { return this is Expression_SeqConstruct; } }
    public bool is_SeqValue { get { return this is Expression_SeqValue; } }
    public bool is_SetValue { get { return this is Expression_SetValue; } }
    public bool is_MapValue { get { return this is Expression_MapValue; } }
    public bool is_This { get { return this is Expression_This; } }
    public bool is_Ite { get { return this is Expression_Ite; } }
    public bool is_UnOp { get { return this is Expression_UnOp; } }
    public bool is_BinOp { get { return this is Expression_BinOp; } }
    public bool is_ArrayLen { get { return this is Expression_ArrayLen; } }
    public bool is_Select { get { return this is Expression_Select; } }
    public bool is_SelectFn { get { return this is Expression_SelectFn; } }
    public bool is_Index { get { return this is Expression_Index; } }
    public bool is_IndexRange { get { return this is Expression_IndexRange; } }
    public bool is_TupleSelect { get { return this is Expression_TupleSelect; } }
    public bool is_Call { get { return this is Expression_Call; } }
    public bool is_Lambda { get { return this is Expression_Lambda; } }
    public bool is_BetaRedex { get { return this is Expression_BetaRedex; } }
    public bool is_IIFE { get { return this is Expression_IIFE; } }
    public bool is_Apply { get { return this is Expression_Apply; } }
    public bool is_TypeTest { get { return this is Expression_TypeTest; } }
    public bool is_InitializationValue { get { return this is Expression_InitializationValue; } }
    public bool is_BoolBoundedPool { get { return this is Expression_BoolBoundedPool; } }
    public bool is_SetBoundedPool { get { return this is Expression_SetBoundedPool; } }
    public bool is_SeqBoundedPool { get { return this is Expression_SeqBoundedPool; } }
    public bool is_IntRange { get { return this is Expression_IntRange; } }
    public DAST._ILiteral dtor_Literal_a0 {
      get {
        var d = this;
        return ((Expression_Literal)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((Expression_Ident)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 {
      get {
        var d = this;
        return ((Expression_Companion)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Expression_Tuple)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._path; }
        return ((Expression_DatatypeValue)d)._path;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._typeArgs; }
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._typeArgs; }
        return ((Expression_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._args; }
        if (d is Expression_Call) { return ((Expression_Call)d)._args; }
        return ((Expression_Apply)d)._args;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_dims {
      get {
        var d = this;
        return ((Expression_NewArray)d)._dims;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        if (d is Expression_NewArray) { return ((Expression_NewArray)d)._typ; }
        if (d is Expression_Convert) { return ((Expression_Convert)d)._typ; }
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._typ; }
        if (d is Expression_IIFE) { return ((Expression_IIFE)d)._typ; }
        return ((Expression_InitializationValue)d)._typ;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_variant {
      get {
        var d = this;
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._variant; }
        return ((Expression_TypeTest)d)._variant;
      }
    }
    public bool dtor_isCo {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._isCo;
      }
    }
    public Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._contents;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        if (d is Expression_Convert) { return ((Expression_Convert)d)._value; }
        return ((Expression_IIFE)d)._value;
      }
    }
    public DAST._IType dtor_from {
      get {
        var d = this;
        return ((Expression_Convert)d)._from;
      }
    }
    public DAST._IExpression dtor_length {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._length;
      }
    }
    public DAST._IExpression dtor_elem {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._elem;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_elements {
      get {
        var d = this;
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._elements; }
        return ((Expression_SetValue)d)._elements;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems {
      get {
        var d = this;
        return ((Expression_MapValue)d)._mapElems;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        return ((Expression_Ite)d)._cond;
      }
    }
    public DAST._IExpression dtor_thn {
      get {
        var d = this;
        return ((Expression_Ite)d)._thn;
      }
    }
    public DAST._IExpression dtor_els {
      get {
        var d = this;
        return ((Expression_Ite)d)._els;
      }
    }
    public DAST._IUnaryOp dtor_unOp {
      get {
        var d = this;
        return ((Expression_UnOp)d)._unOp;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is Expression_UnOp) { return ((Expression_UnOp)d)._expr; }
        if (d is Expression_ArrayLen) { return ((Expression_ArrayLen)d)._expr; }
        if (d is Expression_Select) { return ((Expression_Select)d)._expr; }
        if (d is Expression_SelectFn) { return ((Expression_SelectFn)d)._expr; }
        if (d is Expression_Index) { return ((Expression_Index)d)._expr; }
        if (d is Expression_IndexRange) { return ((Expression_IndexRange)d)._expr; }
        if (d is Expression_TupleSelect) { return ((Expression_TupleSelect)d)._expr; }
        if (d is Expression_BetaRedex) { return ((Expression_BetaRedex)d)._expr; }
        return ((Expression_Apply)d)._expr;
      }
    }
    public DAST.Format._IUnOpFormat dtor_format1 {
      get {
        var d = this;
        return ((Expression_UnOp)d)._format1;
      }
    }
    public DAST._IBinOp dtor_op {
      get {
        var d = this;
        return ((Expression_BinOp)d)._op;
      }
    }
    public DAST._IExpression dtor_left {
      get {
        var d = this;
        return ((Expression_BinOp)d)._left;
      }
    }
    public DAST._IExpression dtor_right {
      get {
        var d = this;
        return ((Expression_BinOp)d)._right;
      }
    }
    public DAST.Format._IBinOpFormat dtor_format2 {
      get {
        var d = this;
        return ((Expression_BinOp)d)._format2;
      }
    }
    public BigInteger dtor_dim {
      get {
        var d = this;
        return ((Expression_ArrayLen)d)._dim;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._field; }
        return ((Expression_SelectFn)d)._field;
      }
    }
    public bool dtor_isConstant {
      get {
        var d = this;
        return ((Expression_Select)d)._isConstant;
      }
    }
    public bool dtor_onDatatype {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._onDatatype; }
        return ((Expression_SelectFn)d)._onDatatype;
      }
    }
    public bool dtor_isStatic {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._isStatic;
      }
    }
    public BigInteger dtor_arity {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._arity;
      }
    }
    public DAST._ICollKind dtor_collKind {
      get {
        var d = this;
        return ((Expression_Index)d)._collKind;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((Expression_Index)d)._indices;
      }
    }
    public bool dtor_isArray {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._isArray;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_low {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._low;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_high {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._high;
      }
    }
    public BigInteger dtor_index {
      get {
        var d = this;
        return ((Expression_TupleSelect)d)._index;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._on; }
        return ((Expression_TypeTest)d)._on;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._name; }
        return ((Expression_IIFE)d)._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        var d = this;
        return ((Expression_Lambda)d)._params;
      }
    }
    public DAST._IType dtor_retType {
      get {
        var d = this;
        if (d is Expression_Lambda) { return ((Expression_Lambda)d)._retType; }
        return ((Expression_BetaRedex)d)._retType;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        return ((Expression_Lambda)d)._body;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values {
      get {
        var d = this;
        return ((Expression_BetaRedex)d)._values;
      }
    }
    public DAST._IExpression dtor_iifeBody {
      get {
        var d = this;
        return ((Expression_IIFE)d)._iifeBody;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType {
      get {
        var d = this;
        return ((Expression_TypeTest)d)._dType;
      }
    }
    public DAST._IExpression dtor_of {
      get {
        var d = this;
        if (d is Expression_SetBoundedPool) { return ((Expression_SetBoundedPool)d)._of; }
        return ((Expression_SeqBoundedPool)d)._of;
      }
    }
    public bool dtor_includeDuplicates {
      get {
        var d = this;
        return ((Expression_SeqBoundedPool)d)._includeDuplicates;
      }
    }
    public DAST._IExpression dtor_lo {
      get {
        var d = this;
        return ((Expression_IntRange)d)._lo;
      }
    }
    public DAST._IExpression dtor_hi {
      get {
        var d = this;
        return ((Expression_IntRange)d)._hi;
      }
    }
    public abstract _IExpression DowncastClone();
  }
  public class Expression_Literal : Expression {
    public readonly DAST._ILiteral _a0;
    public Expression_Literal(DAST._ILiteral _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Literal(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Literal;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Literal";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Ident : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expression_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ident";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_Companion : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public Expression_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Companion(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Companion;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Companion";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Tuple : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _a0;
    public Expression_Tuple(Dafny.ISequence<DAST._IExpression> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_New : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_New(_path, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_New;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_NewArray : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _dims;
    public readonly DAST._IType _typ;
    public Expression_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) : base() {
      this._dims = dims;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_NewArray(_dims, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_NewArray;
      return oth != null && object.Equals(this._dims, oth._dims) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.NewArray";
      s += "(";
      s += Dafny.Helpers.ToString(this._dims);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_DatatypeValue : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public readonly bool _isCo;
    public readonly Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _contents;
    public Expression_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._variant = variant;
      this._isCo = isCo;
      this._contents = contents;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_DatatypeValue(_path, _typeArgs, _variant, _isCo, _contents);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_DatatypeValue;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._variant, oth._variant) && this._isCo == oth._isCo && object.Equals(this._contents, oth._contents);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._contents));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.DatatypeValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._contents);
      s += ")";
      return s;
    }
  }
  public class Expression_Convert : Expression {
    public readonly DAST._IExpression _value;
    public readonly DAST._IType _from;
    public readonly DAST._IType _typ;
    public Expression_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) : base() {
      this._value = @value;
      this._from = @from;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Convert(_value, _from, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Convert;
      return oth != null && object.Equals(this._value, oth._value) && object.Equals(this._from, oth._from) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._from));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Convert";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._from);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqConstruct : Expression {
    public readonly DAST._IExpression _length;
    public readonly DAST._IExpression _elem;
    public Expression_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) : base() {
      this._length = length;
      this._elem = elem;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqConstruct(_length, _elem);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqConstruct;
      return oth != null && object.Equals(this._length, oth._length) && object.Equals(this._elem, oth._elem);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._length));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elem));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqConstruct";
      s += "(";
      s += Dafny.Helpers.ToString(this._length);
      s += ", ";
      s += Dafny.Helpers.ToString(this._elem);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public readonly DAST._IType _typ;
    public Expression_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) : base() {
      this._elements = elements;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqValue(_elements, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqValue;
      return oth != null && object.Equals(this._elements, oth._elements) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_SetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValue : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _mapElems;
    public Expression_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) : base() {
      this._mapElems = mapElems;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValue(_mapElems);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValue;
      return oth != null && object.Equals(this._mapElems, oth._mapElems);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mapElems));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._mapElems);
      s += ")";
      return s;
    }
  }
  public class Expression_This : Expression {
    public Expression_This() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_This();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_This;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.This";
      return s;
    }
  }
  public class Expression_Ite : Expression {
    public readonly DAST._IExpression _cond;
    public readonly DAST._IExpression _thn;
    public readonly DAST._IExpression _els;
    public Expression_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ite(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ite;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expression_UnOp : Expression {
    public readonly DAST._IUnaryOp _unOp;
    public readonly DAST._IExpression _expr;
    public readonly DAST.Format._IUnOpFormat _format1;
    public Expression_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr, DAST.Format._IUnOpFormat format1) : base() {
      this._unOp = unOp;
      this._expr = expr;
      this._format1 = format1;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_UnOp(_unOp, _expr, _format1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_UnOp;
      return oth != null && object.Equals(this._unOp, oth._unOp) && object.Equals(this._expr, oth._expr) && object.Equals(this._format1, oth._format1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._unOp));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.UnOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._unOp);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format1);
      s += ")";
      return s;
    }
  }
  public class Expression_BinOp : Expression {
    public readonly DAST._IBinOp _op;
    public readonly DAST._IExpression _left;
    public readonly DAST._IExpression _right;
    public readonly DAST.Format._IBinOpFormat _format2;
    public Expression_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right, DAST.Format._IBinOpFormat format2) : base() {
      this._op = op;
      this._left = left;
      this._right = right;
      this._format2 = format2;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BinOp(_op, _left, _right, _format2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BinOp;
      return oth != null && object.Equals(this._op, oth._op) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right) && object.Equals(this._format2, oth._format2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format2));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BinOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._op);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format2);
      s += ")";
      return s;
    }
  }
  public class Expression_ArrayLen : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _dim;
    public Expression_ArrayLen(DAST._IExpression expr, BigInteger dim) : base() {
      this._expr = expr;
      this._dim = dim;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ArrayLen(_expr, _dim);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ArrayLen;
      return oth != null && object.Equals(this._expr, oth._expr) && this._dim == oth._dim;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dim));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ArrayLen";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dim);
      s += ")";
      return s;
    }
  }
  public class Expression_Select : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _isConstant;
    public readonly bool _onDatatype;
    public Expression_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) : base() {
      this._expr = expr;
      this._field = field;
      this._isConstant = isConstant;
      this._onDatatype = onDatatype;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Select(_expr, _field, _isConstant, _onDatatype);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._isConstant == oth._isConstant && this._onDatatype == oth._onDatatype;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isConstant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isConstant);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ")";
      return s;
    }
  }
  public class Expression_SelectFn : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _onDatatype;
    public readonly bool _isStatic;
    public readonly BigInteger _arity;
    public Expression_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) : base() {
      this._expr = expr;
      this._field = field;
      this._onDatatype = onDatatype;
      this._isStatic = isStatic;
      this._arity = arity;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SelectFn(_expr, _field, _onDatatype, _isStatic, _arity);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SelectFn;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._onDatatype == oth._onDatatype && this._isStatic == oth._isStatic && this._arity == oth._arity;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arity));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SelectFn";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arity);
      s += ")";
      return s;
    }
  }
  public class Expression_Index : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._ICollKind _collKind;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public Expression_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._collKind = collKind;
      this._indices = indices;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Index(_expr, _collKind, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._collKind, oth._collKind) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._collKind));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._collKind);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }
  public class Expression_IndexRange : Expression {
    public readonly DAST._IExpression _expr;
    public readonly bool _isArray;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _low;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _high;
    public Expression_IndexRange(DAST._IExpression expr, bool isArray, Std.Wrappers._IOption<DAST._IExpression> low, Std.Wrappers._IOption<DAST._IExpression> high) : base() {
      this._expr = expr;
      this._isArray = isArray;
      this._low = low;
      this._high = high;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IndexRange(_expr, _isArray, _low, _high);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IndexRange;
      return oth != null && object.Equals(this._expr, oth._expr) && this._isArray == oth._isArray && object.Equals(this._low, oth._low) && object.Equals(this._high, oth._high);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isArray));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._low));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._high));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IndexRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isArray);
      s += ", ";
      s += Dafny.Helpers.ToString(this._low);
      s += ", ";
      s += Dafny.Helpers.ToString(this._high);
      s += ")";
      return s;
    }
  }
  public class Expression_TupleSelect : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _index;
    public Expression_TupleSelect(DAST._IExpression expr, BigInteger index) : base() {
      this._expr = expr;
      this._index = index;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TupleSelect(_expr, _index);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TupleSelect;
      return oth != null && object.Equals(this._expr, oth._expr) && this._index == oth._index;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._index));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TupleSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._index);
      s += ")";
      return s;
    }
  }
  public class Expression_Call : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Call(_on, _name, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_Lambda : Expression {
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly DAST._IType _retType;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Expression_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._params = @params;
      this._retType = retType;
      this._body = body;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Lambda(_params, _retType, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Lambda;
      return oth != null && object.Equals(this._params, oth._params) && object.Equals(this._retType, oth._retType) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Lambda";
      s += "(";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expression_BetaRedex : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _values;
    public readonly DAST._IType _retType;
    public readonly DAST._IExpression _expr;
    public Expression_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) : base() {
      this._values = values;
      this._retType = retType;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BetaRedex(_values, _retType, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BetaRedex;
      return oth != null && object.Equals(this._values, oth._values) && object.Equals(this._retType, oth._retType) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._values));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BetaRedex";
      s += "(";
      s += Dafny.Helpers.ToString(this._values);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_IIFE : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IExpression _value;
    public readonly DAST._IExpression _iifeBody;
    public Expression_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) : base() {
      this._name = name;
      this._typ = typ;
      this._value = @value;
      this._iifeBody = iifeBody;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IIFE(_name, _typ, _value, _iifeBody);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IIFE;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._value, oth._value) && object.Equals(this._iifeBody, oth._iifeBody);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._iifeBody));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IIFE";
      s += "(";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._iifeBody);
      s += ")";
      return s;
    }
  }
  public class Expression_Apply : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._expr = expr;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Apply(_expr, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Apply;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Apply";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_TypeTest : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _dType;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public Expression_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) : base() {
      this._on = @on;
      this._dType = dType;
      this._variant = variant;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TypeTest(_on, _dType, _variant);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TypeTest;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._dType, oth._dType) && object.Equals(this._variant, oth._variant);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TypeTest";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dType);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_InitializationValue : Expression {
    public readonly DAST._IType _typ;
    public Expression_InitializationValue(DAST._IType typ) : base() {
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_InitializationValue(_typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_InitializationValue;
      return oth != null && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.InitializationValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_BoolBoundedPool : Expression {
    public Expression_BoolBoundedPool() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BoolBoundedPool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BoolBoundedPool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BoolBoundedPool";
      return s;
    }
  }
  public class Expression_SetBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public Expression_SetBoundedPool(DAST._IExpression of) : base() {
      this._of = of;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBoundedPool(_of);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBoundedPool;
      return oth != null && object.Equals(this._of, oth._of);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public readonly bool _includeDuplicates;
    public Expression_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) : base() {
      this._of = of;
      this._includeDuplicates = includeDuplicates;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqBoundedPool(_of, _includeDuplicates);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqBoundedPool;
      return oth != null && object.Equals(this._of, oth._of) && this._includeDuplicates == oth._includeDuplicates;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._includeDuplicates));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ", ";
      s += Dafny.Helpers.ToString(this._includeDuplicates);
      s += ")";
      return s;
    }
  }
  public class Expression_IntRange : Expression {
    public readonly DAST._IExpression _lo;
    public readonly DAST._IExpression _hi;
    public Expression_IntRange(DAST._IExpression lo, DAST._IExpression hi) : base() {
      this._lo = lo;
      this._hi = hi;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IntRange(_lo, _hi);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IntRange;
      return oth != null && object.Equals(this._lo, oth._lo) && object.Equals(this._hi, oth._hi);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hi));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IntRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._lo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hi);
      s += ")";
      return s;
    }
  }

  public interface _IUnaryOp {
    bool is_Not { get; }
    bool is_BitwiseNot { get; }
    bool is_Cardinality { get; }
    _IUnaryOp DowncastClone();
  }
  public abstract class UnaryOp : _IUnaryOp {
    public UnaryOp() {
    }
    private static readonly DAST._IUnaryOp theDefault = create_Not();
    public static DAST._IUnaryOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IUnaryOp> _TYPE = new Dafny.TypeDescriptor<DAST._IUnaryOp>(DAST.UnaryOp.Default());
    public static Dafny.TypeDescriptor<DAST._IUnaryOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnaryOp create_Not() {
      return new UnaryOp_Not();
    }
    public static _IUnaryOp create_BitwiseNot() {
      return new UnaryOp_BitwiseNot();
    }
    public static _IUnaryOp create_Cardinality() {
      return new UnaryOp_Cardinality();
    }
    public bool is_Not { get { return this is UnaryOp_Not; } }
    public bool is_BitwiseNot { get { return this is UnaryOp_BitwiseNot; } }
    public bool is_Cardinality { get { return this is UnaryOp_Cardinality; } }
    public static System.Collections.Generic.IEnumerable<_IUnaryOp> AllSingletonConstructors {
      get {
        yield return UnaryOp.create_Not();
        yield return UnaryOp.create_BitwiseNot();
        yield return UnaryOp.create_Cardinality();
      }
    }
    public abstract _IUnaryOp DowncastClone();
  }
  public class UnaryOp_Not : UnaryOp {
    public UnaryOp_Not() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Not();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Not;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Not";
      return s;
    }
  }
  public class UnaryOp_BitwiseNot : UnaryOp {
    public UnaryOp_BitwiseNot() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_BitwiseNot();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_BitwiseNot;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.BitwiseNot";
      return s;
    }
  }
  public class UnaryOp_Cardinality : UnaryOp {
    public UnaryOp_Cardinality() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Cardinality();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Cardinality;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Cardinality";
      return s;
    }
  }

  public interface _ILiteral {
    bool is_BoolLiteral { get; }
    bool is_IntLiteral { get; }
    bool is_DecLiteral { get; }
    bool is_StringLiteral { get; }
    bool is_CharLiteral { get; }
    bool is_Null { get; }
    bool dtor_BoolLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 { get; }
    DAST._IType dtor_IntLiteral_a1 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 { get; }
    DAST._IType dtor_DecLiteral_a2 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 { get; }
    Dafny.Rune dtor_CharLiteral_a0 { get; }
    DAST._IType dtor_Null_a0 { get; }
    _ILiteral DowncastClone();
  }
  public abstract class Literal : _ILiteral {
    public Literal() {
    }
    private static readonly DAST._ILiteral theDefault = create_BoolLiteral(false);
    public static DAST._ILiteral Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ILiteral> _TYPE = new Dafny.TypeDescriptor<DAST._ILiteral>(DAST.Literal.Default());
    public static Dafny.TypeDescriptor<DAST._ILiteral> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ILiteral create_BoolLiteral(bool _a0) {
      return new Literal_BoolLiteral(_a0);
    }
    public static _ILiteral create_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) {
      return new Literal_IntLiteral(_a0, _a1);
    }
    public static _ILiteral create_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) {
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public static _ILiteral create_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Literal_StringLiteral(_a0);
    }
    public static _ILiteral create_CharLiteral(Dafny.Rune _a0) {
      return new Literal_CharLiteral(_a0);
    }
    public static _ILiteral create_Null(DAST._IType _a0) {
      return new Literal_Null(_a0);
    }
    public bool is_BoolLiteral { get { return this is Literal_BoolLiteral; } }
    public bool is_IntLiteral { get { return this is Literal_IntLiteral; } }
    public bool is_DecLiteral { get { return this is Literal_DecLiteral; } }
    public bool is_StringLiteral { get { return this is Literal_StringLiteral; } }
    public bool is_CharLiteral { get { return this is Literal_CharLiteral; } }
    public bool is_Null { get { return this is Literal_Null; } }
    public bool dtor_BoolLiteral_a0 {
      get {
        var d = this;
        return ((Literal_BoolLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_IntLiteral_a1 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a1;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a1;
      }
    }
    public DAST._IType dtor_DecLiteral_a2 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a2;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 {
      get {
        var d = this;
        return ((Literal_StringLiteral)d)._a0;
      }
    }
    public Dafny.Rune dtor_CharLiteral_a0 {
      get {
        var d = this;
        return ((Literal_CharLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_Null_a0 {
      get {
        var d = this;
        return ((Literal_Null)d)._a0;
      }
    }
    public abstract _ILiteral DowncastClone();
  }
  public class Literal_BoolLiteral : Literal {
    public readonly bool _a0;
    public Literal_BoolLiteral(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_BoolLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_BoolLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.BoolLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_IntLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly DAST._IType _a1;
    public Literal_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_IntLiteral(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_IntLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.IntLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Literal_DecLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly Dafny.ISequence<Dafny.Rune> _a1;
    public readonly DAST._IType _a2;
    public Literal_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
      this._a2 = _a2;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_DecLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1) && object.Equals(this._a2, oth._a2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a2));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.DecLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += this._a1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a2);
      s += ")";
      return s;
    }
  }
  public class Literal_StringLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Literal_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_StringLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_StringLiteral;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.StringLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Literal_CharLiteral : Literal {
    public readonly Dafny.Rune _a0;
    public Literal_CharLiteral(Dafny.Rune _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_CharLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_CharLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.CharLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_Null : Literal {
    public readonly DAST._IType _a0;
    public Literal_Null(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_Null(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_Null;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.Null";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
} // end of namespace DAST

namespace D2DPrettyPrinter {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> PrettyPrint(Dafny.ISequence<DAST._IModule> d) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Microsoft.Dafny.Compilers.WrapException.Throw();
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Not Implemented Yet");
      return s;
    }
  }
} // end of namespace D2DPrettyPrinter
namespace ResolvedDesugaredExecutableDafnyPlugin {


  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _out14;
      _out14 = D2DPrettyPrinter.__default.PrettyPrint(p);
      s = _out14;
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      return s;
    }
  }
} // end of namespace ResolvedDesugaredExecutableDafnyPlugin
namespace RAST {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> SeqToString<__T>(Dafny.ISequence<__T> s, Func<__T, Dafny.ISequence<Dafny.Rune>> f, Dafny.ISequence<Dafny.Rune> separator) {
      if ((new BigInteger((s).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Helpers.Id<Func<__T, Dafny.ISequence<Dafny.Rune>>>(f)((s).Select(BigInteger.Zero)), (((new BigInteger((s).Count)) > (BigInteger.One)) ? (Dafny.Sequence<Dafny.Rune>.Concat(separator, RAST.__default.SeqToString<__T>((s).Drop(BigInteger.One), f, separator))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
      }
    }
    public static BigInteger SeqToHeight<__T>(Dafny.ISequence<__T> s, Func<__T, BigInteger> f) {
      if ((new BigInteger((s).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        BigInteger _801_i = Dafny.Helpers.Id<Func<__T, BigInteger>>(f)((s).Select(BigInteger.Zero));
        BigInteger _802_j = RAST.__default.SeqToHeight<__T>((s).Drop(BigInteger.One), f);
        if ((_801_i) < (_802_j)) {
          return _802_j;
        } else {
          return _801_i;
        }
      }
    }
    public static RAST._IType Rc(RAST._IType underlying) {
      return RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc"), Dafny.Sequence<RAST._IType>.FromElements(underlying));
    }
    public static RAST._IType RefCell(RAST._IType underlying) {
      return RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cell::RefCell"), Dafny.Sequence<RAST._IType>.FromElements(underlying));
    }
    public static RAST._IType Vec(RAST._IType underlying) {
      return RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::vec::Vec"), Dafny.Sequence<RAST._IType>.FromElements(underlying));
    }
    public static RAST._IType RawType(Dafny.ISequence<Dafny.Rune> content) {
      return RAST.Type.create_TypeApp(content, Dafny.Sequence<RAST._IType>.FromElements());
    }
    public static Dafny.ISequence<Dafny.Rune> AddIndent(Dafny.ISequence<Dafny.Rune> raw, Dafny.ISequence<Dafny.Rune> ind) {
      Dafny.ISequence<Dafny.Rune> _803___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((raw).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, raw);
      } else if ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[({")).Contains((raw).Select(BigInteger.Zero))) {
        _803___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in103 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in104 = Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND);
        raw = _in103;
        ind = _in104;
        goto TAIL_CALL_START;
      } else if (((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("})]")).Contains((raw).Select(BigInteger.Zero))) && ((new BigInteger((ind).Count)) > (new BigInteger(2)))) {
        _803___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in105 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in106 = (ind).Take((new BigInteger((ind).Count)) - (new BigInteger(2)));
        raw = _in105;
        ind = _in106;
        goto TAIL_CALL_START;
      } else if (((raw).Select(BigInteger.Zero)) == (new Dafny.Rune('\n'))) {
        _803___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)), ind));
        Dafny.ISequence<Dafny.Rune> _in107 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in108 = ind;
        raw = _in107;
        ind = _in108;
        goto TAIL_CALL_START;
      } else {
        _803___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in109 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in110 = ind;
        raw = _in109;
        ind = _in110;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger max(BigInteger i, BigInteger j) {
      if ((i) < (j)) {
        return j;
      } else {
        return i;
      }
    }
    public static RAST._IExpr RcNew(RAST._IExpr underlying) {
      return RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(underlying));
    }
    public static RAST._IType Self {
      get {
        return RAST.Type.create_Borrowed(RAST.Type.create_SelfOwned());
      }
    }
    public static RAST._IType SelfMut {
      get {
        return RAST.Type.create_BorrowedMut(RAST.Type.create_SelfOwned());
      }
    }
    public static RAST._IType CloneTrait {
      get {
        return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Clone"));
      }
    }
    public static RAST._IType DafnyPrintTrait {
      get {
        return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint"));
      }
    }
    public static RAST._IType DefaultTrait {
      get {
        return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default"));
      }
    }
    public static RAST._IType StaticTrait {
      get {
        return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'static"));
      }
    }
    public static byte PUB {
      get {
        return (byte)(1);
      }
    }
    public static byte PRIV {
      get {
        return (byte)(0);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> IND {
      get {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  ");
      }
    }
  }

  public interface _IMod {
    bool is_Mod { get; }
    bool is_ExternMod { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._IModDecl> dtor_body { get; }
    _IMod DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class Mod : _IMod {
    public Mod() {
    }
    private static readonly RAST._IMod theDefault = create_Mod(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IModDecl>.Empty);
    public static RAST._IMod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IMod> _TYPE = new Dafny.TypeDescriptor<RAST._IMod>(RAST.Mod.Default());
    public static Dafny.TypeDescriptor<RAST._IMod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMod create_Mod(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IModDecl> body) {
      return new Mod_Mod(name, body);
    }
    public static _IMod create_ExternMod(Dafny.ISequence<Dafny.Rune> name) {
      return new Mod_ExternMod(name);
    }
    public bool is_Mod { get { return this is Mod_Mod; } }
    public bool is_ExternMod { get { return this is Mod_ExternMod; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Mod_Mod) { return ((Mod_Mod)d)._name; }
        return ((Mod_ExternMod)d)._name;
      }
    }
    public Dafny.ISequence<RAST._IModDecl> dtor_body {
      get {
        var d = this;
        return ((Mod_Mod)d)._body;
      }
    }
    public abstract _IMod DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      RAST._IMod _source25 = this;
      if (_source25.is_Mod) {
        Dafny.ISequence<Dafny.Rune> _804___mcc_h0 = _source25.dtor_name;
        Dafny.ISequence<RAST._IModDecl> _805___mcc_h1 = _source25.dtor_body;
        Dafny.ISequence<RAST._IModDecl> _806_body = _805___mcc_h1;
        Dafny.ISequence<Dafny.Rune> _807_name = _804___mcc_h0;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), _807_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), RAST.__default.IND), RAST.__default.SeqToString<RAST._IModDecl>(_806_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IModDecl, Dafny.ISequence<Dafny.Rune>>>>((_808_ind) => ((System.Func<RAST._IModDecl, Dafny.ISequence<Dafny.Rune>>)((_809_modDecl) => {
          return (_809_modDecl)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_808_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else {
        Dafny.ISequence<Dafny.Rune> _810___mcc_h2 = _source25.dtor_name;
        Dafny.ISequence<Dafny.Rune> _811_name = _810___mcc_h2;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), _811_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      }
    }
  }
  public class Mod_Mod : Mod {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._IModDecl> _body;
    public Mod_Mod(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IModDecl> body) : base() {
      this._name = name;
      this._body = body;
    }
    public override _IMod DowncastClone() {
      if (this is _IMod dt) { return dt; }
      return new Mod_Mod(_name, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Mod_Mod;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Mod.Mod";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Mod_ExternMod : Mod {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Mod_ExternMod(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _IMod DowncastClone() {
      if (this is _IMod dt) { return dt; }
      return new Mod_ExternMod(_name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Mod_ExternMod;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Mod.ExternMod";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IModDecl {
    bool is_RawDecl { get; }
    bool is_ModDecl { get; }
    bool is_StructDecl { get; }
    bool is_EnumDecl { get; }
    bool is_ImplDecl { get; }
    bool is_TraitDecl { get; }
    Dafny.ISequence<Dafny.Rune> dtor_body { get; }
    RAST._IMod dtor_mod { get; }
    RAST._IStruct dtor_struct { get; }
    RAST._IEnum dtor_enum { get; }
    RAST._IImpl dtor_impl { get; }
    RAST._ITrait dtor_tr { get; }
    _IModDecl DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class ModDecl : _IModDecl {
    public ModDecl() {
    }
    private static readonly RAST._IModDecl theDefault = create_RawDecl(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IModDecl Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IModDecl> _TYPE = new Dafny.TypeDescriptor<RAST._IModDecl>(RAST.ModDecl.Default());
    public static Dafny.TypeDescriptor<RAST._IModDecl> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModDecl create_RawDecl(Dafny.ISequence<Dafny.Rune> body) {
      return new ModDecl_RawDecl(body);
    }
    public static _IModDecl create_ModDecl(RAST._IMod mod) {
      return new ModDecl_ModDecl(mod);
    }
    public static _IModDecl create_StructDecl(RAST._IStruct @struct) {
      return new ModDecl_StructDecl(@struct);
    }
    public static _IModDecl create_EnumDecl(RAST._IEnum @enum) {
      return new ModDecl_EnumDecl(@enum);
    }
    public static _IModDecl create_ImplDecl(RAST._IImpl impl) {
      return new ModDecl_ImplDecl(impl);
    }
    public static _IModDecl create_TraitDecl(RAST._ITrait tr) {
      return new ModDecl_TraitDecl(tr);
    }
    public bool is_RawDecl { get { return this is ModDecl_RawDecl; } }
    public bool is_ModDecl { get { return this is ModDecl_ModDecl; } }
    public bool is_StructDecl { get { return this is ModDecl_StructDecl; } }
    public bool is_EnumDecl { get { return this is ModDecl_EnumDecl; } }
    public bool is_ImplDecl { get { return this is ModDecl_ImplDecl; } }
    public bool is_TraitDecl { get { return this is ModDecl_TraitDecl; } }
    public Dafny.ISequence<Dafny.Rune> dtor_body {
      get {
        var d = this;
        return ((ModDecl_RawDecl)d)._body;
      }
    }
    public RAST._IMod dtor_mod {
      get {
        var d = this;
        return ((ModDecl_ModDecl)d)._mod;
      }
    }
    public RAST._IStruct dtor_struct {
      get {
        var d = this;
        return ((ModDecl_StructDecl)d)._struct;
      }
    }
    public RAST._IEnum dtor_enum {
      get {
        var d = this;
        return ((ModDecl_EnumDecl)d)._enum;
      }
    }
    public RAST._IImpl dtor_impl {
      get {
        var d = this;
        return ((ModDecl_ImplDecl)d)._impl;
      }
    }
    public RAST._ITrait dtor_tr {
      get {
        var d = this;
        return ((ModDecl_TraitDecl)d)._tr;
      }
    }
    public abstract _IModDecl DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((this).is_ModDecl) {
        return ((this).dtor_mod)._ToString(ind);
      } else if ((this).is_StructDecl) {
        return ((this).dtor_struct)._ToString(ind);
      } else if ((this).is_ImplDecl) {
        return ((this).dtor_impl)._ToString(ind);
      } else if ((this).is_EnumDecl) {
        return ((this).dtor_enum)._ToString(ind);
      } else if ((this).is_TraitDecl) {
        return ((this).dtor_tr)._ToString(ind);
      } else {
        return (this).dtor_body;
      }
    }
  }
  public class ModDecl_RawDecl : ModDecl {
    public readonly Dafny.ISequence<Dafny.Rune> _body;
    public ModDecl_RawDecl(Dafny.ISequence<Dafny.Rune> body) : base() {
      this._body = body;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_RawDecl(_body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_RawDecl;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.RawDecl";
      s += "(";
      s += this._body.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class ModDecl_ModDecl : ModDecl {
    public readonly RAST._IMod _mod;
    public ModDecl_ModDecl(RAST._IMod mod) : base() {
      this._mod = mod;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_ModDecl(_mod);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_ModDecl;
      return oth != null && object.Equals(this._mod, oth._mod);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mod));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.ModDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._mod);
      s += ")";
      return s;
    }
  }
  public class ModDecl_StructDecl : ModDecl {
    public readonly RAST._IStruct _struct;
    public ModDecl_StructDecl(RAST._IStruct @struct) : base() {
      this._struct = @struct;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_StructDecl(_struct);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_StructDecl;
      return oth != null && object.Equals(this._struct, oth._struct);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._struct));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.StructDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._struct);
      s += ")";
      return s;
    }
  }
  public class ModDecl_EnumDecl : ModDecl {
    public readonly RAST._IEnum _enum;
    public ModDecl_EnumDecl(RAST._IEnum @enum) : base() {
      this._enum = @enum;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_EnumDecl(_enum);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_EnumDecl;
      return oth != null && object.Equals(this._enum, oth._enum);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enum));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.EnumDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._enum);
      s += ")";
      return s;
    }
  }
  public class ModDecl_ImplDecl : ModDecl {
    public readonly RAST._IImpl _impl;
    public ModDecl_ImplDecl(RAST._IImpl impl) : base() {
      this._impl = impl;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_ImplDecl(_impl);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_ImplDecl;
      return oth != null && object.Equals(this._impl, oth._impl);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._impl));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.ImplDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._impl);
      s += ")";
      return s;
    }
  }
  public class ModDecl_TraitDecl : ModDecl {
    public readonly RAST._ITrait _tr;
    public ModDecl_TraitDecl(RAST._ITrait tr) : base() {
      this._tr = tr;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_TraitDecl(_tr);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_TraitDecl;
      return oth != null && object.Equals(this._tr, oth._tr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.TraitDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._tr);
      s += ")";
      return s;
    }
  }

  public interface _IAttribute {
    bool is_RawAttribute { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
  }
  public class Attribute : _IAttribute {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Attribute(Dafny.ISequence<Dafny.Rune> content) {
      this._content = content;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Attribute;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Attribute.RawAttribute";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAttribute create(Dafny.ISequence<Dafny.Rune> content) {
      return new Attribute(content);
    }
    public static _IAttribute create_RawAttribute(Dafny.ISequence<Dafny.Rune> content) {
      return create(content);
    }
    public bool is_RawAttribute { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> ToStringMultiple(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> ind) {
      return RAST.__default.SeqToString<Dafny.ISequence<Dafny.Rune>>(attributes, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>>>((_812_ind) => ((System.Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>)((_813_attribute) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_813_attribute), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _812_ind);
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
    }
  }

  public interface _IStruct {
    bool is_Struct { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    RAST._IFormals dtor_fields { get; }
    _IStruct DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Struct : _IStruct {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _attributes;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IFormals _fields;
    public Struct(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IFormals fields) {
      this._attributes = attributes;
      this._name = name;
      this._typeParams = typeParams;
      this._fields = fields;
    }
    public _IStruct DowncastClone() {
      if (this is _IStruct dt) { return dt; }
      return new Struct(_attributes, _name, _typeParams, _fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Struct;
      return oth != null && object.Equals(this._attributes, oth._attributes) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Struct.Struct";
      s += "(";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
    private static readonly RAST._IStruct theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._ITypeParam>.Empty, RAST.Formals.Default());
    public static RAST._IStruct Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IStruct> _TYPE = new Dafny.TypeDescriptor<RAST._IStruct>(RAST.Struct.Default());
    public static Dafny.TypeDescriptor<RAST._IStruct> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStruct create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IFormals fields) {
      return new Struct(attributes, name, typeParams, fields);
    }
    public static _IStruct create_Struct(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IFormals fields) {
      return create(attributes, name, typeParams, fields);
    }
    public bool is_Struct { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes {
      get {
        return this._attributes;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public RAST._IFormals dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Attribute.ToStringMultiple((this).dtor_attributes, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub struct ")), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_fields)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND), ((this).dtor_fields).is_NamedFormals)), ((((this).dtor_fields).is_NamelessFormals) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
    }
  }

  public interface _INamelessFormal {
    bool is_NamelessFormal { get; }
    byte dtor_visibility { get; }
    RAST._IType dtor_tpe { get; }
    _INamelessFormal DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class NamelessFormal : _INamelessFormal {
    public readonly byte _visibility;
    public readonly RAST._IType _tpe;
    public NamelessFormal(byte visibility, RAST._IType tpe) {
      this._visibility = visibility;
      this._tpe = tpe;
    }
    public _INamelessFormal DowncastClone() {
      if (this is _INamelessFormal dt) { return dt; }
      return new NamelessFormal(_visibility, _tpe);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.NamelessFormal;
      return oth != null && this._visibility == oth._visibility && object.Equals(this._tpe, oth._tpe);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._visibility));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.NamelessFormal.NamelessFormal";
      s += "(";
      s += Dafny.Helpers.ToString(this._visibility);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ")";
      return s;
    }
    private static readonly RAST._INamelessFormal theDefault = create(0, RAST.Type.Default());
    public static RAST._INamelessFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._INamelessFormal> _TYPE = new Dafny.TypeDescriptor<RAST._INamelessFormal>(RAST.NamelessFormal.Default());
    public static Dafny.TypeDescriptor<RAST._INamelessFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INamelessFormal create(byte visibility, RAST._IType tpe) {
      return new NamelessFormal(visibility, tpe);
    }
    public static _INamelessFormal create_NamelessFormal(byte visibility, RAST._IType tpe) {
      return create(visibility, tpe);
    }
    public bool is_NamelessFormal { get { return true; } }
    public byte dtor_visibility {
      get {
        return this._visibility;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        return this._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(((((this).dtor_visibility) == (RAST.__default.PUB)) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), ((this).dtor_tpe)._ToString(ind));
    }
  }

  public interface _IFormals {
    bool is_NamedFormals { get; }
    bool is_NamelessFormals { get; }
    Dafny.ISequence<RAST._IFormal> dtor_fields { get; }
    Dafny.ISequence<RAST._INamelessFormal> dtor_types { get; }
    _IFormals DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine);
  }
  public abstract class Formals : _IFormals {
    public Formals() {
    }
    private static readonly RAST._IFormals theDefault = create_NamedFormals(Dafny.Sequence<RAST._IFormal>.Empty);
    public static RAST._IFormals Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFormals> _TYPE = new Dafny.TypeDescriptor<RAST._IFormals>(RAST.Formals.Default());
    public static Dafny.TypeDescriptor<RAST._IFormals> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormals create_NamedFormals(Dafny.ISequence<RAST._IFormal> fields) {
      return new Formals_NamedFormals(fields);
    }
    public static _IFormals create_NamelessFormals(Dafny.ISequence<RAST._INamelessFormal> types) {
      return new Formals_NamelessFormals(types);
    }
    public bool is_NamedFormals { get { return this is Formals_NamedFormals; } }
    public bool is_NamelessFormals { get { return this is Formals_NamelessFormals; } }
    public Dafny.ISequence<RAST._IFormal> dtor_fields {
      get {
        var d = this;
        return ((Formals_NamedFormals)d)._fields;
      }
    }
    public Dafny.ISequence<RAST._INamelessFormal> dtor_types {
      get {
        var d = this;
        return ((Formals_NamelessFormals)d)._types;
      }
    }
    public abstract _IFormals DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine) {
      if ((this).is_NamedFormals) {
        Dafny.ISequence<Dafny.Rune> _814_separator = ((newLine) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"), ind), RAST.__default.IND)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")));
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs40 = (((newLine) && ((new BigInteger(((this).dtor_fields).Count)).Sign == 1)) ? (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind))) : ((((new BigInteger(((this).dtor_fields).Count)).Sign == 1) ? (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "))) : (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))))));
        Dafny.ISequence<Dafny.Rune> _815_beginSpace = _let_tmp_rhs40.dtor__0;
        Dafny.ISequence<Dafny.Rune> _816_endSpace = _let_tmp_rhs40.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"), _815_beginSpace), RAST.__default.SeqToString<RAST._IFormal>((this).dtor_fields, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>>>((_817_ind) => ((System.Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>)((_818_field) => {
          return (_818_field)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_817_ind, RAST.__default.IND));
        })))(ind), _814_separator)), _816_endSpace), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else {
        Dafny.ISequence<Dafny.Rune> _819_separator = ((newLine) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"), ind), RAST.__default.IND)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")));
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), RAST.__default.SeqToString<RAST._INamelessFormal>((this).dtor_types, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._INamelessFormal, Dafny.ISequence<Dafny.Rune>>>>((_820_ind) => ((System.Func<RAST._INamelessFormal, Dafny.ISequence<Dafny.Rune>>)((_821_t) => {
          return (_821_t)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_820_ind, RAST.__default.IND));
        })))(ind), _819_separator)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
    }
  }
  public class Formals_NamedFormals : Formals {
    public readonly Dafny.ISequence<RAST._IFormal> _fields;
    public Formals_NamedFormals(Dafny.ISequence<RAST._IFormal> fields) : base() {
      this._fields = fields;
    }
    public override _IFormals DowncastClone() {
      if (this is _IFormals dt) { return dt; }
      return new Formals_NamedFormals(_fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formals_NamedFormals;
      return oth != null && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Formals.NamedFormals";
      s += "(";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
  }
  public class Formals_NamelessFormals : Formals {
    public readonly Dafny.ISequence<RAST._INamelessFormal> _types;
    public Formals_NamelessFormals(Dafny.ISequence<RAST._INamelessFormal> types) : base() {
      this._types = types;
    }
    public override _IFormals DowncastClone() {
      if (this is _IFormals dt) { return dt; }
      return new Formals_NamelessFormals(_types);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formals_NamelessFormals;
      return oth != null && object.Equals(this._types, oth._types);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._types));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Formals.NamelessFormals";
      s += "(";
      s += Dafny.Helpers.ToString(this._types);
      s += ")";
      return s;
    }
  }

  public interface _IEnumCase {
    bool is_EnumCase { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IFormals dtor_fields { get; }
    _IEnumCase DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine);
  }
  public class EnumCase : _IEnumCase {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IFormals _fields;
    public EnumCase(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      this._name = name;
      this._fields = fields;
    }
    public _IEnumCase DowncastClone() {
      if (this is _IEnumCase dt) { return dt; }
      return new EnumCase(_name, _fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.EnumCase;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.EnumCase.EnumCase";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
    private static readonly RAST._IEnumCase theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Formals.Default());
    public static RAST._IEnumCase Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IEnumCase> _TYPE = new Dafny.TypeDescriptor<RAST._IEnumCase>(RAST.EnumCase.Default());
    public static Dafny.TypeDescriptor<RAST._IEnumCase> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEnumCase create(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      return new EnumCase(name, fields);
    }
    public static _IEnumCase create_EnumCase(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      return create(name, fields);
    }
    public bool is_EnumCase { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public RAST._IFormals dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine) {
      return Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_name, ((this).dtor_fields)._ToString(ind, newLine));
    }
  }

  public interface _IEnum {
    bool is_Enum { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    Dafny.ISequence<RAST._IEnumCase> dtor_variants { get; }
    _IEnum DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Enum : _IEnum {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _attributes;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly Dafny.ISequence<RAST._IEnumCase> _variants;
    public Enum(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      this._attributes = attributes;
      this._name = name;
      this._typeParams = typeParams;
      this._variants = variants;
    }
    public _IEnum DowncastClone() {
      if (this is _IEnum dt) { return dt; }
      return new Enum(_attributes, _name, _typeParams, _variants);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Enum;
      return oth != null && object.Equals(this._attributes, oth._attributes) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._variants, oth._variants);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variants));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Enum.Enum";
      s += "(";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._variants);
      s += ")";
      return s;
    }
    private static readonly RAST._IEnum theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._ITypeParam>.Empty, Dafny.Sequence<RAST._IEnumCase>.Empty);
    public static RAST._IEnum Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IEnum> _TYPE = new Dafny.TypeDescriptor<RAST._IEnum>(RAST.Enum.Default());
    public static Dafny.TypeDescriptor<RAST._IEnum> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEnum create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      return new Enum(attributes, name, typeParams, variants);
    }
    public static _IEnum create_Enum(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      return create(attributes, name, typeParams, variants);
    }
    public bool is_Enum { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes {
      get {
        return this._attributes;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<RAST._IEnumCase> dtor_variants {
      get {
        return this._variants;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Attribute.ToStringMultiple((this).dtor_attributes, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub enum ")), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IEnumCase>((this).dtor_variants, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IEnumCase, Dafny.ISequence<Dafny.Rune>>>>((_822_ind) => ((System.Func<RAST._IEnumCase, Dafny.ISequence<Dafny.Rune>>)((_823_variant) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _822_ind), RAST.__default.IND), (_823_variant)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_822_ind, RAST.__default.IND), false));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }

  public interface _ITypeParam {
    bool is_RawTypeParam { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    Dafny.ISequence<RAST._IType> dtor_constraints { get; }
    _ITypeParam DowncastClone();
    RAST._ITypeParam AddConstraints(Dafny.ISequence<RAST._IType> constraints);
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class TypeParam : _ITypeParam {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public readonly Dafny.ISequence<RAST._IType> _constraints;
    public TypeParam(Dafny.ISequence<Dafny.Rune> content, Dafny.ISequence<RAST._IType> constraints) {
      this._content = content;
      this._constraints = constraints;
    }
    public _ITypeParam DowncastClone() {
      if (this is _ITypeParam dt) { return dt; }
      return new TypeParam(_content, _constraints);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.TypeParam;
      return oth != null && object.Equals(this._content, oth._content) && object.Equals(this._constraints, oth._constraints);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._constraints));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.TypeParam.RawTypeParam";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._constraints);
      s += ")";
      return s;
    }
    private static readonly RAST._ITypeParam theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IType>.Empty);
    public static RAST._ITypeParam Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._ITypeParam> _TYPE = new Dafny.TypeDescriptor<RAST._ITypeParam>(RAST.TypeParam.Default());
    public static Dafny.TypeDescriptor<RAST._ITypeParam> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITypeParam create(Dafny.ISequence<Dafny.Rune> content, Dafny.ISequence<RAST._IType> constraints) {
      return new TypeParam(content, constraints);
    }
    public static _ITypeParam create_RawTypeParam(Dafny.ISequence<Dafny.Rune> content, Dafny.ISequence<RAST._IType> constraints) {
      return create(content, constraints);
    }
    public bool is_RawTypeParam { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public Dafny.ISequence<RAST._IType> dtor_constraints {
      get {
        return this._constraints;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> ToStringMultiple(Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<Dafny.Rune> ind) {
      if ((new BigInteger((typeParams).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), RAST.__default.SeqToString<RAST._ITypeParam>(typeParams, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._ITypeParam, Dafny.ISequence<Dafny.Rune>>>>((_824_ind) => ((System.Func<RAST._ITypeParam, Dafny.ISequence<Dafny.Rune>>)((_825_t) => {
          return (_825_t)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_824_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
    }
    public static Dafny.ISequence<RAST._ITypeParam> AddConstraintsMultiple(Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IType> constraints) {
      Dafny.ISequence<RAST._ITypeParam> _826___accumulator = Dafny.Sequence<RAST._ITypeParam>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((typeParams).Count)).Sign == 0) {
        return Dafny.Sequence<RAST._ITypeParam>.Concat(_826___accumulator, Dafny.Sequence<RAST._ITypeParam>.FromElements());
      } else {
        _826___accumulator = Dafny.Sequence<RAST._ITypeParam>.Concat(_826___accumulator, Dafny.Sequence<RAST._ITypeParam>.FromElements(((typeParams).Select(BigInteger.Zero)).AddConstraints(constraints)));
        Dafny.ISequence<RAST._ITypeParam> _in111 = (typeParams).Drop(BigInteger.One);
        Dafny.ISequence<RAST._IType> _in112 = constraints;
        typeParams = _in111;
        constraints = _in112;
        goto TAIL_CALL_START;
      }
    }
    public RAST._ITypeParam AddConstraints(Dafny.ISequence<RAST._IType> constraints) {
      RAST._ITypeParam _827_dt__update__tmp_h0 = this;
      Dafny.ISequence<RAST._IType> _828_dt__update_hconstraints_h0 = Dafny.Sequence<RAST._IType>.Concat((this).dtor_constraints, constraints);
      return RAST.TypeParam.create((_827_dt__update__tmp_h0).dtor_content, _828_dt__update_hconstraints_h0);
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_content, (((new BigInteger(((this).dtor_constraints).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": "), RAST.__default.SeqToString<RAST._IType>((this).dtor_constraints, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_829_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_830_t) => {
        return (_830_t)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_829_ind, RAST.__default.IND));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + "))))));
    }
  }

  public interface _IType {
    bool is_SelfOwned { get; }
    bool is_U8 { get; }
    bool is_U16 { get; }
    bool is_U32 { get; }
    bool is_U64 { get; }
    bool is_U128 { get; }
    bool is_I8 { get; }
    bool is_I16 { get; }
    bool is_I32 { get; }
    bool is_I64 { get; }
    bool is_I128 { get; }
    bool is_TypeApp { get; }
    bool is_Borrowed { get; }
    bool is_BorrowedMut { get; }
    bool is_ImplType { get; }
    bool is_DynType { get; }
    bool is_TupleType { get; }
    bool is_FnType { get; }
    bool is_IntersectionType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_baseName { get; }
    Dafny.ISequence<RAST._IType> dtor_arguments { get; }
    RAST._IType dtor_underlying { get; }
    RAST._IType dtor_returnType { get; }
    RAST._IType dtor_left { get; }
    RAST._IType dtor_right { get; }
    _IType DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly RAST._IType theDefault = create_SelfOwned();
    public static RAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IType> _TYPE = new Dafny.TypeDescriptor<RAST._IType>(RAST.Type.Default());
    public static Dafny.TypeDescriptor<RAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_SelfOwned() {
      return new Type_SelfOwned();
    }
    public static _IType create_U8() {
      return new Type_U8();
    }
    public static _IType create_U16() {
      return new Type_U16();
    }
    public static _IType create_U32() {
      return new Type_U32();
    }
    public static _IType create_U64() {
      return new Type_U64();
    }
    public static _IType create_U128() {
      return new Type_U128();
    }
    public static _IType create_I8() {
      return new Type_I8();
    }
    public static _IType create_I16() {
      return new Type_I16();
    }
    public static _IType create_I32() {
      return new Type_I32();
    }
    public static _IType create_I64() {
      return new Type_I64();
    }
    public static _IType create_I128() {
      return new Type_I128();
    }
    public static _IType create_TypeApp(Dafny.ISequence<Dafny.Rune> baseName, Dafny.ISequence<RAST._IType> arguments) {
      return new Type_TypeApp(baseName, arguments);
    }
    public static _IType create_Borrowed(RAST._IType underlying) {
      return new Type_Borrowed(underlying);
    }
    public static _IType create_BorrowedMut(RAST._IType underlying) {
      return new Type_BorrowedMut(underlying);
    }
    public static _IType create_ImplType(RAST._IType underlying) {
      return new Type_ImplType(underlying);
    }
    public static _IType create_DynType(RAST._IType underlying) {
      return new Type_DynType(underlying);
    }
    public static _IType create_TupleType(Dafny.ISequence<RAST._IType> arguments) {
      return new Type_TupleType(arguments);
    }
    public static _IType create_FnType(Dafny.ISequence<RAST._IType> arguments, RAST._IType returnType) {
      return new Type_FnType(arguments, returnType);
    }
    public static _IType create_IntersectionType(RAST._IType left, RAST._IType right) {
      return new Type_IntersectionType(left, right);
    }
    public bool is_SelfOwned { get { return this is Type_SelfOwned; } }
    public bool is_U8 { get { return this is Type_U8; } }
    public bool is_U16 { get { return this is Type_U16; } }
    public bool is_U32 { get { return this is Type_U32; } }
    public bool is_U64 { get { return this is Type_U64; } }
    public bool is_U128 { get { return this is Type_U128; } }
    public bool is_I8 { get { return this is Type_I8; } }
    public bool is_I16 { get { return this is Type_I16; } }
    public bool is_I32 { get { return this is Type_I32; } }
    public bool is_I64 { get { return this is Type_I64; } }
    public bool is_I128 { get { return this is Type_I128; } }
    public bool is_TypeApp { get { return this is Type_TypeApp; } }
    public bool is_Borrowed { get { return this is Type_Borrowed; } }
    public bool is_BorrowedMut { get { return this is Type_BorrowedMut; } }
    public bool is_ImplType { get { return this is Type_ImplType; } }
    public bool is_DynType { get { return this is Type_DynType; } }
    public bool is_TupleType { get { return this is Type_TupleType; } }
    public bool is_FnType { get { return this is Type_FnType; } }
    public bool is_IntersectionType { get { return this is Type_IntersectionType; } }
    public Dafny.ISequence<Dafny.Rune> dtor_baseName {
      get {
        var d = this;
        return ((Type_TypeApp)d)._baseName;
      }
    }
    public Dafny.ISequence<RAST._IType> dtor_arguments {
      get {
        var d = this;
        if (d is Type_TypeApp) { return ((Type_TypeApp)d)._arguments; }
        if (d is Type_TupleType) { return ((Type_TupleType)d)._arguments; }
        return ((Type_FnType)d)._arguments;
      }
    }
    public RAST._IType dtor_underlying {
      get {
        var d = this;
        if (d is Type_Borrowed) { return ((Type_Borrowed)d)._underlying; }
        if (d is Type_BorrowedMut) { return ((Type_BorrowedMut)d)._underlying; }
        if (d is Type_ImplType) { return ((Type_ImplType)d)._underlying; }
        return ((Type_DynType)d)._underlying;
      }
    }
    public RAST._IType dtor_returnType {
      get {
        var d = this;
        return ((Type_FnType)d)._returnType;
      }
    }
    public RAST._IType dtor_left {
      get {
        var d = this;
        return ((Type_IntersectionType)d)._left;
      }
    }
    public RAST._IType dtor_right {
      get {
        var d = this;
        return ((Type_IntersectionType)d)._right;
      }
    }
    public abstract _IType DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      RAST._IType _source26 = this;
      if (_source26.is_SelfOwned) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
      } else if (_source26.is_U8) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u8");
      } else if (_source26.is_U16) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u16");
      } else if (_source26.is_U32) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u32");
      } else if (_source26.is_U64) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u64");
      } else if (_source26.is_U128) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u128");
      } else if (_source26.is_I8) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i8");
      } else if (_source26.is_I16) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i16");
      } else if (_source26.is_I32) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i32");
      } else if (_source26.is_I64) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i64");
      } else if (_source26.is_I128) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i128");
      } else if (_source26.is_TypeApp) {
        Dafny.ISequence<Dafny.Rune> _831___mcc_h0 = _source26.dtor_baseName;
        Dafny.ISequence<RAST._IType> _832___mcc_h1 = _source26.dtor_arguments;
        Dafny.ISequence<RAST._IType> _833_args = _832___mcc_h1;
        Dafny.ISequence<Dafny.Rune> _834_base = _831___mcc_h0;
        return Dafny.Sequence<Dafny.Rune>.Concat(_834_base, (((_833_args).Equals(Dafny.Sequence<RAST._IType>.FromElements())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), RAST.__default.SeqToString<RAST._IType>(_833_args, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_835_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_836_arg) => {
          return (_836_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_835_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")))));
      } else if (_source26.is_Borrowed) {
        RAST._IType _837___mcc_h2 = _source26.dtor_underlying;
        RAST._IType _838_underlying = _837___mcc_h2;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), (_838_underlying)._ToString(ind));
      } else if (_source26.is_BorrowedMut) {
        RAST._IType _839___mcc_h3 = _source26.dtor_underlying;
        RAST._IType _840_underlying = _839___mcc_h3;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut "), (_840_underlying)._ToString(ind));
      } else if (_source26.is_ImplType) {
        RAST._IType _841___mcc_h4 = _source26.dtor_underlying;
        RAST._IType _842_underlying = _841___mcc_h4;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), (_842_underlying)._ToString(ind));
      } else if (_source26.is_DynType) {
        RAST._IType _843___mcc_h5 = _source26.dtor_underlying;
        RAST._IType _844_underlying = _843___mcc_h5;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn "), (_844_underlying)._ToString(ind));
      } else if (_source26.is_TupleType) {
        Dafny.ISequence<RAST._IType> _845___mcc_h6 = _source26.dtor_arguments;
        Dafny.ISequence<RAST._IType> _846_args = _845___mcc_h6;
        if ((_846_args).Equals(Dafny.Sequence<RAST._IType>.FromElements())) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()");
        } else {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), RAST.__default.SeqToString<RAST._IType>(_846_args, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_847_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_848_arg) => {
            return (_848_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_847_ind, RAST.__default.IND));
          })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
        }
      } else if (_source26.is_FnType) {
        Dafny.ISequence<RAST._IType> _849___mcc_h7 = _source26.dtor_arguments;
        RAST._IType _850___mcc_h8 = _source26.dtor_returnType;
        RAST._IType _851_returnType = _850___mcc_h8;
        Dafny.ISequence<RAST._IType> _852_arguments = _849___mcc_h7;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Fn("), RAST.__default.SeqToString<RAST._IType>(_852_arguments, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_853_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_854_arg) => {
          return (_854_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_853_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), (_851_returnType)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)));
      } else {
        RAST._IType _855___mcc_h9 = _source26.dtor_left;
        RAST._IType _856___mcc_h10 = _source26.dtor_right;
        RAST._IType _857_right = _856___mcc_h10;
        RAST._IType _858_left = _855___mcc_h9;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_858_left)._ToString(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + ")), (_857_right)._ToString(ind));
      }
    }
  }
  public class Type_SelfOwned : Type {
    public Type_SelfOwned() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_SelfOwned();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_SelfOwned;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.SelfOwned";
      return s;
    }
  }
  public class Type_U8 : Type {
    public Type_U8() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U8();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U8";
      return s;
    }
  }
  public class Type_U16 : Type {
    public Type_U16() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U16();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U16";
      return s;
    }
  }
  public class Type_U32 : Type {
    public Type_U32() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U32();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U32";
      return s;
    }
  }
  public class Type_U64 : Type {
    public Type_U64() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U64();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U64";
      return s;
    }
  }
  public class Type_U128 : Type {
    public Type_U128() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U128();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U128";
      return s;
    }
  }
  public class Type_I8 : Type {
    public Type_I8() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I8();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I8";
      return s;
    }
  }
  public class Type_I16 : Type {
    public Type_I16() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I16();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I16";
      return s;
    }
  }
  public class Type_I32 : Type {
    public Type_I32() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I32();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I32";
      return s;
    }
  }
  public class Type_I64 : Type {
    public Type_I64() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I64();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I64";
      return s;
    }
  }
  public class Type_I128 : Type {
    public Type_I128() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I128();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I128";
      return s;
    }
  }
  public class Type_TypeApp : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _baseName;
    public readonly Dafny.ISequence<RAST._IType> _arguments;
    public Type_TypeApp(Dafny.ISequence<Dafny.Rune> baseName, Dafny.ISequence<RAST._IType> arguments) : base() {
      this._baseName = baseName;
      this._arguments = arguments;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeApp(_baseName, _arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_TypeApp;
      return oth != null && object.Equals(this._baseName, oth._baseName) && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._baseName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.TypeApp";
      s += "(";
      s += this._baseName.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Type_Borrowed : Type {
    public readonly RAST._IType _underlying;
    public Type_Borrowed(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Borrowed(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_Borrowed;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.Borrowed";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_BorrowedMut : Type {
    public readonly RAST._IType _underlying;
    public Type_BorrowedMut(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_BorrowedMut(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_BorrowedMut;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.BorrowedMut";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_ImplType : Type {
    public readonly RAST._IType _underlying;
    public Type_ImplType(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_ImplType(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_ImplType;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.ImplType";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_DynType : Type {
    public readonly RAST._IType _underlying;
    public Type_DynType(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_DynType(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_DynType;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.DynType";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_TupleType : Type {
    public readonly Dafny.ISequence<RAST._IType> _arguments;
    public Type_TupleType(Dafny.ISequence<RAST._IType> arguments) : base() {
      this._arguments = arguments;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TupleType(_arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_TupleType;
      return oth != null && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.TupleType";
      s += "(";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Type_FnType : Type {
    public readonly Dafny.ISequence<RAST._IType> _arguments;
    public readonly RAST._IType _returnType;
    public Type_FnType(Dafny.ISequence<RAST._IType> arguments, RAST._IType returnType) : base() {
      this._arguments = arguments;
      this._returnType = returnType;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_FnType(_arguments, _returnType);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_FnType;
      return oth != null && object.Equals(this._arguments, oth._arguments) && object.Equals(this._returnType, oth._returnType);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._returnType));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.FnType";
      s += "(";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ", ";
      s += Dafny.Helpers.ToString(this._returnType);
      s += ")";
      return s;
    }
  }
  public class Type_IntersectionType : Type {
    public readonly RAST._IType _left;
    public readonly RAST._IType _right;
    public Type_IntersectionType(RAST._IType left, RAST._IType right) : base() {
      this._left = left;
      this._right = right;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_IntersectionType(_left, _right);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_IntersectionType;
      return oth != null && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.IntersectionType";
      s += "(";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ")";
      return s;
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    RAST._IType dtor_tpe { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Dafny.ISequence<RAST._IImplMember> dtor_body { get; }
    _ITrait DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Trait(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._where = @where;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_typeParams, _tpe, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Trait;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Trait.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly RAST._ITrait theDefault = create(Dafny.Sequence<RAST._ITypeParam>.Empty, RAST.Type.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IImplMember>.Empty);
    public static RAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._ITrait> _TYPE = new Dafny.TypeDescriptor<RAST._ITrait>(RAST.Trait.Default());
    public static Dafny.TypeDescriptor<RAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Trait(typeParams, tpe, @where, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return create(typeParams, tpe, @where, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        return this._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        return this._where;
      }
    }
    public Dafny.ISequence<RAST._IImplMember> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("trait "), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_tpe)._ToString(ind)), ((!((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IImplMember>((this).dtor_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>>>((_859_ind) => ((System.Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>)((_860_member) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _859_ind), RAST.__default.IND), (_860_member)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_859_ind, RAST.__default.IND)));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), (((new BigInteger(((this).dtor_body).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }

  public interface _IImpl {
    bool is_ImplFor { get; }
    bool is_Impl { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    RAST._IType dtor_tpe { get; }
    RAST._IType dtor_forType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Dafny.ISequence<RAST._IImplMember> dtor_body { get; }
    _IImpl DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class Impl : _IImpl {
    public Impl() {
    }
    private static readonly RAST._IImpl theDefault = create_ImplFor(Dafny.Sequence<RAST._ITypeParam>.Empty, RAST.Type.Default(), RAST.Type.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IImplMember>.Empty);
    public static RAST._IImpl Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IImpl> _TYPE = new Dafny.TypeDescriptor<RAST._IImpl>(RAST.Impl.Default());
    public static Dafny.TypeDescriptor<RAST._IImpl> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IImpl create_ImplFor(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, RAST._IType forType, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Impl_ImplFor(typeParams, tpe, forType, @where, body);
    }
    public static _IImpl create_Impl(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Impl_Impl(typeParams, tpe, @where, body);
    }
    public bool is_ImplFor { get { return this is Impl_ImplFor; } }
    public bool is_Impl { get { return this is Impl_Impl; } }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._typeParams; }
        return ((Impl_Impl)d)._typeParams;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._tpe; }
        return ((Impl_Impl)d)._tpe;
      }
    }
    public RAST._IType dtor_forType {
      get {
        var d = this;
        return ((Impl_ImplFor)d)._forType;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._where; }
        return ((Impl_Impl)d)._where;
      }
    }
    public Dafny.ISequence<RAST._IImplMember> dtor_body {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._body; }
        return ((Impl_Impl)d)._body;
      }
    }
    public abstract _IImpl DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_tpe)._ToString(ind)), (((this).is_ImplFor) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" for "), ((this).dtor_forType)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), ((!((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IImplMember>((this).dtor_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>>>((_861_ind) => ((System.Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>)((_862_member) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _861_ind), RAST.__default.IND), (_862_member)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_861_ind, RAST.__default.IND)));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), (((new BigInteger(((this).dtor_body).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }
  public class Impl_ImplFor : Impl {
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly RAST._IType _forType;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Impl_ImplFor(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, RAST._IType forType, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) : base() {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._forType = forType;
      this._where = @where;
      this._body = body;
    }
    public override _IImpl DowncastClone() {
      if (this is _IImpl dt) { return dt; }
      return new Impl_ImplFor(_typeParams, _tpe, _forType, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Impl_ImplFor;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._forType, oth._forType) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._forType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Impl.ImplFor";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += Dafny.Helpers.ToString(this._forType);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Impl_Impl : Impl {
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Impl_Impl(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) : base() {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._where = @where;
      this._body = body;
    }
    public override _IImpl DowncastClone() {
      if (this is _IImpl dt) { return dt; }
      return new Impl_Impl(_typeParams, _tpe, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Impl_Impl;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Impl.Impl";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }

  public interface _IImplMember {
    bool is_RawImplMember { get; }
    bool is_FnDecl { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    byte dtor_pub { get; }
    RAST._IFn dtor_fun { get; }
    _IImplMember DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class ImplMember : _IImplMember {
    public ImplMember() {
    }
    private static readonly RAST._IImplMember theDefault = create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IImplMember Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IImplMember> _TYPE = new Dafny.TypeDescriptor<RAST._IImplMember>(RAST.ImplMember.Default());
    public static Dafny.TypeDescriptor<RAST._IImplMember> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IImplMember create_RawImplMember(Dafny.ISequence<Dafny.Rune> content) {
      return new ImplMember_RawImplMember(content);
    }
    public static _IImplMember create_FnDecl(byte pub, RAST._IFn fun) {
      return new ImplMember_FnDecl(pub, fun);
    }
    public bool is_RawImplMember { get { return this is ImplMember_RawImplMember; } }
    public bool is_FnDecl { get { return this is ImplMember_FnDecl; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        var d = this;
        return ((ImplMember_RawImplMember)d)._content;
      }
    }
    public byte dtor_pub {
      get {
        var d = this;
        return ((ImplMember_FnDecl)d)._pub;
      }
    }
    public RAST._IFn dtor_fun {
      get {
        var d = this;
        return ((ImplMember_FnDecl)d)._fun;
      }
    }
    public abstract _IImplMember DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((this).is_FnDecl) {
        return Dafny.Sequence<Dafny.Rune>.Concat(((((this).dtor_pub) == (RAST.__default.PUB)) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), ((this).dtor_fun)._ToString(ind));
      } else {
        return (this).dtor_content;
      }
    }
  }
  public class ImplMember_RawImplMember : ImplMember {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public ImplMember_RawImplMember(Dafny.ISequence<Dafny.Rune> content) : base() {
      this._content = content;
    }
    public override _IImplMember DowncastClone() {
      if (this is _IImplMember dt) { return dt; }
      return new ImplMember_RawImplMember(_content);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ImplMember_RawImplMember;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ImplMember.RawImplMember";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class ImplMember_FnDecl : ImplMember {
    public readonly byte _pub;
    public readonly RAST._IFn _fun;
    public ImplMember_FnDecl(byte pub, RAST._IFn fun) : base() {
      this._pub = pub;
      this._fun = fun;
    }
    public override _IImplMember DowncastClone() {
      if (this is _IImplMember dt) { return dt; }
      return new ImplMember_FnDecl(_pub, _fun);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ImplMember_FnDecl;
      return oth != null && this._pub == oth._pub && object.Equals(this._fun, oth._fun);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pub));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fun));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ImplMember.FnDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._pub);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fun);
      s += ")";
      return s;
    }
  }

  public partial class VISIBILITY {
    public static System.Collections.Generic.IEnumerable<byte> IntegerRange(BigInteger lo, BigInteger hi) {
      for (var j = lo; j < hi; j++) { yield return (byte)j; }
    }
    private static readonly Dafny.TypeDescriptor<byte> _TYPE = new Dafny.TypeDescriptor<byte>(0);
    public static Dafny.TypeDescriptor<byte> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IType dtor_tpe { get; }
    _IFormal DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IType _tpe;
    public Formal(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      this._name = name;
      this._tpe = tpe;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _tpe);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._tpe, oth._tpe);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ")";
      return s;
    }
    private static readonly RAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Type.Default());
    public static RAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFormal> _TYPE = new Dafny.TypeDescriptor<RAST._IFormal>(RAST.Formal.Default());
    public static Dafny.TypeDescriptor<RAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      return new Formal(name, tpe);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      return create(name, tpe);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        return this._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) && (((this).dtor_tpe).is_SelfOwned)) {
        return (this).dtor_name;
      } else if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"))) && (object.Equals((this).dtor_tpe, RAST.Type.create_Borrowed(RAST.Type.create_SelfOwned())))) {
        return (this).dtor_name;
      } else if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut self"))) && (object.Equals((this).dtor_tpe, RAST.Type.create_Borrowed(RAST.__default.SelfMut)))) {
        return (this).dtor_name;
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_name, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), ((this).dtor_tpe)._ToString(ind));
      }
    }
    public static RAST._IFormal self {
      get {
        return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"), RAST.__default.Self);
      }
    }
    public static RAST._IFormal selfOwned {
      get {
        return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), RAST.Type.create_SelfOwned());
      }
    }
    public static RAST._IFormal selfMut {
      get {
        return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut self"), RAST.__default.SelfMut);
      }
    }
  }

  public interface _IPattern {
    bool is_RawPattern { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
  }
  public class Pattern : _IPattern {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Pattern(Dafny.ISequence<Dafny.Rune> content) {
      this._content = content;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Pattern;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Pattern.RawPattern";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPattern create(Dafny.ISequence<Dafny.Rune> content) {
      return new Pattern(content);
    }
    public static _IPattern create_RawPattern(Dafny.ISequence<Dafny.Rune> content) {
      return create(content);
    }
    public bool is_RawPattern { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> _this, Dafny.ISequence<Dafny.Rune> ind) {
      return (_this);
    }
  }

  public interface _IMatchCase {
    bool is_MatchCase { get; }
    Dafny.ISequence<Dafny.Rune> dtor_pattern { get; }
    RAST._IExpr dtor_rhs { get; }
    _IMatchCase DowncastClone();
    BigInteger Height();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class MatchCase : _IMatchCase {
    public readonly Dafny.ISequence<Dafny.Rune> _pattern;
    public readonly RAST._IExpr _rhs;
    public MatchCase(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      this._pattern = pattern;
      this._rhs = rhs;
    }
    public _IMatchCase DowncastClone() {
      if (this is _IMatchCase dt) { return dt; }
      return new MatchCase(_pattern, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.MatchCase;
      return oth != null && object.Equals(this._pattern, oth._pattern) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pattern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.MatchCase.MatchCase";
      s += "(";
      s += Dafny.Helpers.ToString(this._pattern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
    private static readonly RAST._IMatchCase theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Expr.Default());
    public static RAST._IMatchCase Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IMatchCase> _TYPE = new Dafny.TypeDescriptor<RAST._IMatchCase>(RAST.MatchCase.Default());
    public static Dafny.TypeDescriptor<RAST._IMatchCase> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMatchCase create(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      return new MatchCase(pattern, rhs);
    }
    public static _IMatchCase create_MatchCase(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      return create(pattern, rhs);
    }
    public bool is_MatchCase { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_pattern {
      get {
        return this._pattern;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        return this._rhs;
      }
    }
    public BigInteger Height() {
      return (BigInteger.One) + (((this).dtor_rhs).Height());
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      Dafny.ISequence<Dafny.Rune> _863_newIndent = ((((this).dtor_rhs).is_Block) ? (ind) : (Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)));
      Dafny.ISequence<Dafny.Rune> _864_rhsString = ((this).dtor_rhs)._ToString(_863_newIndent);
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Pattern._ToString((this).dtor_pattern, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" =>")), ((((_864_rhsString).Contains(new Dafny.Rune('\n'))) && (((_864_rhsString).Select(BigInteger.Zero)) != (new Dafny.Rune('{')))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), _864_rhsString)) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), _864_rhsString))));
    }
  }

  public interface _IAssignIdentifier {
    bool is_AssignIdentifier { get; }
    Dafny.ISequence<Dafny.Rune> dtor_identifier { get; }
    RAST._IExpr dtor_rhs { get; }
    _IAssignIdentifier DowncastClone();
    BigInteger Height();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class AssignIdentifier : _IAssignIdentifier {
    public readonly Dafny.ISequence<Dafny.Rune> _identifier;
    public readonly RAST._IExpr _rhs;
    public AssignIdentifier(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      this._identifier = identifier;
      this._rhs = rhs;
    }
    public _IAssignIdentifier DowncastClone() {
      if (this is _IAssignIdentifier dt) { return dt; }
      return new AssignIdentifier(_identifier, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.AssignIdentifier;
      return oth != null && object.Equals(this._identifier, oth._identifier) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._identifier));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.AssignIdentifier.AssignIdentifier";
      s += "(";
      s += this._identifier.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
    private static readonly RAST._IAssignIdentifier theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Expr.Default());
    public static RAST._IAssignIdentifier Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IAssignIdentifier> _TYPE = new Dafny.TypeDescriptor<RAST._IAssignIdentifier>(RAST.AssignIdentifier.Default());
    public static Dafny.TypeDescriptor<RAST._IAssignIdentifier> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignIdentifier create(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      return new AssignIdentifier(identifier, rhs);
    }
    public static _IAssignIdentifier create_AssignIdentifier(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      return create(identifier, rhs);
    }
    public bool is_AssignIdentifier { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_identifier {
      get {
        return this._identifier;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        return this._rhs;
      }
    }
    public BigInteger Height() {
      return (BigInteger.One) + (((this).dtor_rhs).Height());
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_identifier, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), ((this).dtor_rhs)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)));
    }
  }

  public interface _IDeclareType {
    bool is_MUT { get; }
    bool is_CONST { get; }
    _IDeclareType DowncastClone();
  }
  public abstract class DeclareType : _IDeclareType {
    public DeclareType() {
    }
    private static readonly RAST._IDeclareType theDefault = create_MUT();
    public static RAST._IDeclareType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IDeclareType> _TYPE = new Dafny.TypeDescriptor<RAST._IDeclareType>(RAST.DeclareType.Default());
    public static Dafny.TypeDescriptor<RAST._IDeclareType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDeclareType create_MUT() {
      return new DeclareType_MUT();
    }
    public static _IDeclareType create_CONST() {
      return new DeclareType_CONST();
    }
    public bool is_MUT { get { return this is DeclareType_MUT; } }
    public bool is_CONST { get { return this is DeclareType_CONST; } }
    public static System.Collections.Generic.IEnumerable<_IDeclareType> AllSingletonConstructors {
      get {
        yield return DeclareType.create_MUT();
        yield return DeclareType.create_CONST();
      }
    }
    public abstract _IDeclareType DowncastClone();
  }
  public class DeclareType_MUT : DeclareType {
    public DeclareType_MUT() : base() {
    }
    public override _IDeclareType DowncastClone() {
      if (this is _IDeclareType dt) { return dt; }
      return new DeclareType_MUT();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.DeclareType_MUT;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.DeclareType.MUT";
      return s;
    }
  }
  public class DeclareType_CONST : DeclareType {
    public DeclareType_CONST() : base() {
    }
    public override _IDeclareType DowncastClone() {
      if (this is _IDeclareType dt) { return dt; }
      return new DeclareType_CONST();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.DeclareType_CONST;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.DeclareType.CONST";
      return s;
    }
  }

  public interface _IExpr {
    bool is_RawExpr { get; }
    bool is_Match { get; }
    bool is_StmtExpr { get; }
    bool is_Block { get; }
    bool is_StructBuild { get; }
    bool is_Tuple { get; }
    bool is_UnaryOp { get; }
    bool is_BinaryOp { get; }
    bool is_LiteralInt { get; }
    bool is_ConversionNum { get; }
    bool is_DeclareVar { get; }
    bool is_AssignVar { get; }
    bool is_IfExpr { get; }
    bool is_Loop { get; }
    bool is_For { get; }
    bool is_Labelled { get; }
    bool is_Break { get; }
    bool is_Continue { get; }
    bool is_Return { get; }
    bool is_Call { get; }
    bool is_Borrow { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    RAST._IExpr dtor_matchee { get; }
    Dafny.ISequence<RAST._IMatchCase> dtor_cases { get; }
    RAST._IExpr dtor_stmt { get; }
    RAST._IExpr dtor_rhs { get; }
    RAST._IExpr dtor_underlying { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._IAssignIdentifier> dtor_assignments { get; }
    Dafny.ISequence<RAST._IExpr> dtor_arguments { get; }
    Dafny.ISequence<Dafny.Rune> dtor_op1 { get; }
    DAST.Format._IUnOpFormat dtor_format { get; }
    Dafny.ISequence<Dafny.Rune> dtor_op2 { get; }
    RAST._IExpr dtor_left { get; }
    RAST._IExpr dtor_right { get; }
    DAST.Format._IBinOpFormat dtor_format2 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_value { get; }
    RAST._IType dtor_tpe { get; }
    RAST._IDeclareType dtor_declareType { get; }
    Std.Wrappers._IOption<RAST._IType> dtor_optType { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_optRhs { get; }
    RAST._IExpr dtor_cond { get; }
    RAST._IExpr dtor_thn { get; }
    RAST._IExpr dtor_els { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_optCond { get; }
    RAST._IExpr dtor_range { get; }
    RAST._IExpr dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_optLbl { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_optExpr { get; }
    RAST._IExpr dtor_obj { get; }
    Dafny.ISequence<RAST._IType> dtor_typeParameters { get; }
    _IExpr DowncastClone();
    bool NoExtraSemicolonAfter();
    BigInteger Height();
    RAST._IExpr Optimize();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
    RAST._IExpr Then(RAST._IExpr rhs2);
  }
  public abstract class Expr : _IExpr {
    public Expr() {
    }
    private static readonly RAST._IExpr theDefault = create_RawExpr(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IExpr Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IExpr> _TYPE = new Dafny.TypeDescriptor<RAST._IExpr>(RAST.Expr.Default());
    public static Dafny.TypeDescriptor<RAST._IExpr> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpr create_RawExpr(Dafny.ISequence<Dafny.Rune> content) {
      return new Expr_RawExpr(content);
    }
    public static _IExpr create_Match(RAST._IExpr matchee, Dafny.ISequence<RAST._IMatchCase> cases) {
      return new Expr_Match(matchee, cases);
    }
    public static _IExpr create_StmtExpr(RAST._IExpr stmt, RAST._IExpr rhs) {
      return new Expr_StmtExpr(stmt, rhs);
    }
    public static _IExpr create_Block(RAST._IExpr underlying) {
      return new Expr_Block(underlying);
    }
    public static _IExpr create_StructBuild(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IAssignIdentifier> assignments) {
      return new Expr_StructBuild(name, assignments);
    }
    public static _IExpr create_Tuple(Dafny.ISequence<RAST._IExpr> arguments) {
      return new Expr_Tuple(arguments);
    }
    public static _IExpr create_UnaryOp(Dafny.ISequence<Dafny.Rune> op1, RAST._IExpr underlying, DAST.Format._IUnOpFormat format) {
      return new Expr_UnaryOp(op1, underlying, format);
    }
    public static _IExpr create_BinaryOp(Dafny.ISequence<Dafny.Rune> op2, RAST._IExpr left, RAST._IExpr right, DAST.Format._IBinOpFormat format2) {
      return new Expr_BinaryOp(op2, left, right, format2);
    }
    public static _IExpr create_LiteralInt(Dafny.ISequence<Dafny.Rune> @value) {
      return new Expr_LiteralInt(@value);
    }
    public static _IExpr create_ConversionNum(RAST._IType tpe, RAST._IExpr underlying) {
      return new Expr_ConversionNum(tpe, underlying);
    }
    public static _IExpr create_DeclareVar(RAST._IDeclareType declareType, Dafny.ISequence<Dafny.Rune> name, Std.Wrappers._IOption<RAST._IType> optType, Std.Wrappers._IOption<RAST._IExpr> optRhs) {
      return new Expr_DeclareVar(declareType, name, optType, optRhs);
    }
    public static _IExpr create_AssignVar(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr rhs) {
      return new Expr_AssignVar(name, rhs);
    }
    public static _IExpr create_IfExpr(RAST._IExpr cond, RAST._IExpr thn, RAST._IExpr els) {
      return new Expr_IfExpr(cond, thn, els);
    }
    public static _IExpr create_Loop(Std.Wrappers._IOption<RAST._IExpr> optCond, RAST._IExpr underlying) {
      return new Expr_Loop(optCond, underlying);
    }
    public static _IExpr create_For(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr range, RAST._IExpr body) {
      return new Expr_For(name, range, body);
    }
    public static _IExpr create_Labelled(Dafny.ISequence<Dafny.Rune> lbl, RAST._IExpr underlying) {
      return new Expr_Labelled(lbl, underlying);
    }
    public static _IExpr create_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) {
      return new Expr_Break(optLbl);
    }
    public static _IExpr create_Continue(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) {
      return new Expr_Continue(optLbl);
    }
    public static _IExpr create_Return(Std.Wrappers._IOption<RAST._IExpr> optExpr) {
      return new Expr_Return(optExpr);
    }
    public static _IExpr create_Call(RAST._IExpr obj, Dafny.ISequence<RAST._IType> typeParameters, Dafny.ISequence<RAST._IExpr> arguments) {
      return new Expr_Call(obj, typeParameters, arguments);
    }
    public static _IExpr create_Borrow(RAST._IExpr underlying) {
      return new Expr_Borrow(underlying);
    }
    public bool is_RawExpr { get { return this is Expr_RawExpr; } }
    public bool is_Match { get { return this is Expr_Match; } }
    public bool is_StmtExpr { get { return this is Expr_StmtExpr; } }
    public bool is_Block { get { return this is Expr_Block; } }
    public bool is_StructBuild { get { return this is Expr_StructBuild; } }
    public bool is_Tuple { get { return this is Expr_Tuple; } }
    public bool is_UnaryOp { get { return this is Expr_UnaryOp; } }
    public bool is_BinaryOp { get { return this is Expr_BinaryOp; } }
    public bool is_LiteralInt { get { return this is Expr_LiteralInt; } }
    public bool is_ConversionNum { get { return this is Expr_ConversionNum; } }
    public bool is_DeclareVar { get { return this is Expr_DeclareVar; } }
    public bool is_AssignVar { get { return this is Expr_AssignVar; } }
    public bool is_IfExpr { get { return this is Expr_IfExpr; } }
    public bool is_Loop { get { return this is Expr_Loop; } }
    public bool is_For { get { return this is Expr_For; } }
    public bool is_Labelled { get { return this is Expr_Labelled; } }
    public bool is_Break { get { return this is Expr_Break; } }
    public bool is_Continue { get { return this is Expr_Continue; } }
    public bool is_Return { get { return this is Expr_Return; } }
    public bool is_Call { get { return this is Expr_Call; } }
    public bool is_Borrow { get { return this is Expr_Borrow; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        var d = this;
        return ((Expr_RawExpr)d)._content;
      }
    }
    public RAST._IExpr dtor_matchee {
      get {
        var d = this;
        return ((Expr_Match)d)._matchee;
      }
    }
    public Dafny.ISequence<RAST._IMatchCase> dtor_cases {
      get {
        var d = this;
        return ((Expr_Match)d)._cases;
      }
    }
    public RAST._IExpr dtor_stmt {
      get {
        var d = this;
        return ((Expr_StmtExpr)d)._stmt;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        var d = this;
        if (d is Expr_StmtExpr) { return ((Expr_StmtExpr)d)._rhs; }
        return ((Expr_AssignVar)d)._rhs;
      }
    }
    public RAST._IExpr dtor_underlying {
      get {
        var d = this;
        if (d is Expr_Block) { return ((Expr_Block)d)._underlying; }
        if (d is Expr_UnaryOp) { return ((Expr_UnaryOp)d)._underlying; }
        if (d is Expr_ConversionNum) { return ((Expr_ConversionNum)d)._underlying; }
        if (d is Expr_Loop) { return ((Expr_Loop)d)._underlying; }
        if (d is Expr_Labelled) { return ((Expr_Labelled)d)._underlying; }
        return ((Expr_Borrow)d)._underlying;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Expr_StructBuild) { return ((Expr_StructBuild)d)._name; }
        if (d is Expr_DeclareVar) { return ((Expr_DeclareVar)d)._name; }
        if (d is Expr_AssignVar) { return ((Expr_AssignVar)d)._name; }
        return ((Expr_For)d)._name;
      }
    }
    public Dafny.ISequence<RAST._IAssignIdentifier> dtor_assignments {
      get {
        var d = this;
        return ((Expr_StructBuild)d)._assignments;
      }
    }
    public Dafny.ISequence<RAST._IExpr> dtor_arguments {
      get {
        var d = this;
        if (d is Expr_Tuple) { return ((Expr_Tuple)d)._arguments; }
        return ((Expr_Call)d)._arguments;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_op1 {
      get {
        var d = this;
        return ((Expr_UnaryOp)d)._op1;
      }
    }
    public DAST.Format._IUnOpFormat dtor_format {
      get {
        var d = this;
        return ((Expr_UnaryOp)d)._format;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_op2 {
      get {
        var d = this;
        return ((Expr_BinaryOp)d)._op2;
      }
    }
    public RAST._IExpr dtor_left {
      get {
        var d = this;
        return ((Expr_BinaryOp)d)._left;
      }
    }
    public RAST._IExpr dtor_right {
      get {
        var d = this;
        return ((Expr_BinaryOp)d)._right;
      }
    }
    public DAST.Format._IBinOpFormat dtor_format2 {
      get {
        var d = this;
        return ((Expr_BinaryOp)d)._format2;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_value {
      get {
        var d = this;
        return ((Expr_LiteralInt)d)._value;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        var d = this;
        return ((Expr_ConversionNum)d)._tpe;
      }
    }
    public RAST._IDeclareType dtor_declareType {
      get {
        var d = this;
        return ((Expr_DeclareVar)d)._declareType;
      }
    }
    public Std.Wrappers._IOption<RAST._IType> dtor_optType {
      get {
        var d = this;
        return ((Expr_DeclareVar)d)._optType;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_optRhs {
      get {
        var d = this;
        return ((Expr_DeclareVar)d)._optRhs;
      }
    }
    public RAST._IExpr dtor_cond {
      get {
        var d = this;
        return ((Expr_IfExpr)d)._cond;
      }
    }
    public RAST._IExpr dtor_thn {
      get {
        var d = this;
        return ((Expr_IfExpr)d)._thn;
      }
    }
    public RAST._IExpr dtor_els {
      get {
        var d = this;
        return ((Expr_IfExpr)d)._els;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_optCond {
      get {
        var d = this;
        return ((Expr_Loop)d)._optCond;
      }
    }
    public RAST._IExpr dtor_range {
      get {
        var d = this;
        return ((Expr_For)d)._range;
      }
    }
    public RAST._IExpr dtor_body {
      get {
        var d = this;
        return ((Expr_For)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Expr_Labelled)d)._lbl;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_optLbl {
      get {
        var d = this;
        if (d is Expr_Break) { return ((Expr_Break)d)._optLbl; }
        return ((Expr_Continue)d)._optLbl;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_optExpr {
      get {
        var d = this;
        return ((Expr_Return)d)._optExpr;
      }
    }
    public RAST._IExpr dtor_obj {
      get {
        var d = this;
        return ((Expr_Call)d)._obj;
      }
    }
    public Dafny.ISequence<RAST._IType> dtor_typeParameters {
      get {
        var d = this;
        return ((Expr_Call)d)._typeParameters;
      }
    }
    public abstract _IExpr DowncastClone();
    public bool NoExtraSemicolonAfter() {
      return ((((((this).is_DeclareVar) || ((this).is_AssignVar)) || ((this).is_Break)) || ((this).is_Continue)) || ((this).is_Return)) || ((((this).is_RawExpr) && ((new BigInteger(((this).dtor_content).Count)).Sign == 1)) && ((((this).dtor_content).Select((new BigInteger(((this).dtor_content).Count)) - (BigInteger.One))) == (new Dafny.Rune(';'))));
    }
    public BigInteger Height() {
      RAST._IExpr _source27 = this;
      if (_source27.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _865___mcc_h0 = _source27.dtor_content;
        return BigInteger.One;
      } else if (_source27.is_Match) {
        RAST._IExpr _866___mcc_h2 = _source27.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _867___mcc_h3 = _source27.dtor_cases;
        Dafny.ISequence<RAST._IMatchCase> _868_cases = _867___mcc_h3;
        RAST._IExpr _869_matchee = _866___mcc_h2;
        return (BigInteger.One) + (RAST.__default.max((_869_matchee).Height(), RAST.__default.SeqToHeight<RAST._IMatchCase>(_868_cases, ((System.Func<RAST._IMatchCase, BigInteger>)((_870_oneCase) => {
          return (_870_oneCase).Height();
        })))));
      } else if (_source27.is_StmtExpr) {
        RAST._IExpr _871___mcc_h6 = _source27.dtor_stmt;
        RAST._IExpr _872___mcc_h7 = _source27.dtor_rhs;
        RAST._IExpr _873_rhs = _872___mcc_h7;
        RAST._IExpr _874_stmt = _871___mcc_h6;
        BigInteger _875_default = (BigInteger.One) + (RAST.__default.max((_874_stmt).Height(), (_873_rhs).Height()));
        RAST._IExpr _source28 = this;
        if (_source28.is_RawExpr) {
          Dafny.ISequence<Dafny.Rune> _876___mcc_h84 = _source28.dtor_content;
          return _875_default;
        } else if (_source28.is_Match) {
          RAST._IExpr _877___mcc_h86 = _source28.dtor_matchee;
          Dafny.ISequence<RAST._IMatchCase> _878___mcc_h87 = _source28.dtor_cases;
          return _875_default;
        } else if (_source28.is_StmtExpr) {
          RAST._IExpr _879___mcc_h90 = _source28.dtor_stmt;
          RAST._IExpr _880___mcc_h91 = _source28.dtor_rhs;
          RAST._IExpr _source29 = _879___mcc_h90;
          if (_source29.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _881___mcc_h94 = _source29.dtor_content;
            return _875_default;
          } else if (_source29.is_Match) {
            RAST._IExpr _882___mcc_h96 = _source29.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _883___mcc_h97 = _source29.dtor_cases;
            return _875_default;
          } else if (_source29.is_StmtExpr) {
            RAST._IExpr _884___mcc_h100 = _source29.dtor_stmt;
            RAST._IExpr _885___mcc_h101 = _source29.dtor_rhs;
            return _875_default;
          } else if (_source29.is_Block) {
            RAST._IExpr _886___mcc_h104 = _source29.dtor_underlying;
            return _875_default;
          } else if (_source29.is_StructBuild) {
            Dafny.ISequence<Dafny.Rune> _887___mcc_h106 = _source29.dtor_name;
            Dafny.ISequence<RAST._IAssignIdentifier> _888___mcc_h107 = _source29.dtor_assignments;
            return _875_default;
          } else if (_source29.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _889___mcc_h110 = _source29.dtor_arguments;
            return _875_default;
          } else if (_source29.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _890___mcc_h112 = _source29.dtor_op1;
            RAST._IExpr _891___mcc_h113 = _source29.dtor_underlying;
            DAST.Format._IUnOpFormat _892___mcc_h114 = _source29.dtor_format;
            return _875_default;
          } else if (_source29.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _893___mcc_h118 = _source29.dtor_op2;
            RAST._IExpr _894___mcc_h119 = _source29.dtor_left;
            RAST._IExpr _895___mcc_h120 = _source29.dtor_right;
            DAST.Format._IBinOpFormat _896___mcc_h121 = _source29.dtor_format2;
            return _875_default;
          } else if (_source29.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _897___mcc_h126 = _source29.dtor_value;
            return _875_default;
          } else if (_source29.is_ConversionNum) {
            RAST._IType _898___mcc_h128 = _source29.dtor_tpe;
            RAST._IExpr _899___mcc_h129 = _source29.dtor_underlying;
            return _875_default;
          } else if (_source29.is_DeclareVar) {
            RAST._IDeclareType _900___mcc_h132 = _source29.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _901___mcc_h133 = _source29.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _902___mcc_h134 = _source29.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _903___mcc_h135 = _source29.dtor_optRhs;
            Std.Wrappers._IOption<RAST._IType> _source30 = _902___mcc_h134;
            if (_source30.is_None) {
              return _875_default;
            } else {
              RAST._IType _904___mcc_h140 = _source30.dtor_value;
              Std.Wrappers._IOption<RAST._IExpr> _source31 = _903___mcc_h135;
              if (_source31.is_None) {
                RAST._IExpr _source32 = _880___mcc_h91;
                if (_source32.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _905___mcc_h142 = _source32.dtor_content;
                  return _875_default;
                } else if (_source32.is_Match) {
                  RAST._IExpr _906___mcc_h144 = _source32.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _907___mcc_h145 = _source32.dtor_cases;
                  return _875_default;
                } else if (_source32.is_StmtExpr) {
                  RAST._IExpr _908___mcc_h148 = _source32.dtor_stmt;
                  RAST._IExpr _909___mcc_h149 = _source32.dtor_rhs;
                  RAST._IExpr _source33 = _908___mcc_h148;
                  if (_source33.is_RawExpr) {
                    Dafny.ISequence<Dafny.Rune> _910___mcc_h152 = _source33.dtor_content;
                    return _875_default;
                  } else if (_source33.is_Match) {
                    RAST._IExpr _911___mcc_h154 = _source33.dtor_matchee;
                    Dafny.ISequence<RAST._IMatchCase> _912___mcc_h155 = _source33.dtor_cases;
                    return _875_default;
                  } else if (_source33.is_StmtExpr) {
                    RAST._IExpr _913___mcc_h158 = _source33.dtor_stmt;
                    RAST._IExpr _914___mcc_h159 = _source33.dtor_rhs;
                    return _875_default;
                  } else if (_source33.is_Block) {
                    RAST._IExpr _915___mcc_h162 = _source33.dtor_underlying;
                    return _875_default;
                  } else if (_source33.is_StructBuild) {
                    Dafny.ISequence<Dafny.Rune> _916___mcc_h164 = _source33.dtor_name;
                    Dafny.ISequence<RAST._IAssignIdentifier> _917___mcc_h165 = _source33.dtor_assignments;
                    return _875_default;
                  } else if (_source33.is_Tuple) {
                    Dafny.ISequence<RAST._IExpr> _918___mcc_h168 = _source33.dtor_arguments;
                    return _875_default;
                  } else if (_source33.is_UnaryOp) {
                    Dafny.ISequence<Dafny.Rune> _919___mcc_h170 = _source33.dtor_op1;
                    RAST._IExpr _920___mcc_h171 = _source33.dtor_underlying;
                    DAST.Format._IUnOpFormat _921___mcc_h172 = _source33.dtor_format;
                    return _875_default;
                  } else if (_source33.is_BinaryOp) {
                    Dafny.ISequence<Dafny.Rune> _922___mcc_h176 = _source33.dtor_op2;
                    RAST._IExpr _923___mcc_h177 = _source33.dtor_left;
                    RAST._IExpr _924___mcc_h178 = _source33.dtor_right;
                    DAST.Format._IBinOpFormat _925___mcc_h179 = _source33.dtor_format2;
                    return _875_default;
                  } else if (_source33.is_LiteralInt) {
                    Dafny.ISequence<Dafny.Rune> _926___mcc_h184 = _source33.dtor_value;
                    return _875_default;
                  } else if (_source33.is_ConversionNum) {
                    RAST._IType _927___mcc_h186 = _source33.dtor_tpe;
                    RAST._IExpr _928___mcc_h187 = _source33.dtor_underlying;
                    return _875_default;
                  } else if (_source33.is_DeclareVar) {
                    RAST._IDeclareType _929___mcc_h190 = _source33.dtor_declareType;
                    Dafny.ISequence<Dafny.Rune> _930___mcc_h191 = _source33.dtor_name;
                    Std.Wrappers._IOption<RAST._IType> _931___mcc_h192 = _source33.dtor_optType;
                    Std.Wrappers._IOption<RAST._IExpr> _932___mcc_h193 = _source33.dtor_optRhs;
                    return _875_default;
                  } else if (_source33.is_AssignVar) {
                    Dafny.ISequence<Dafny.Rune> _933___mcc_h198 = _source33.dtor_name;
                    RAST._IExpr _934___mcc_h199 = _source33.dtor_rhs;
                    RAST._IExpr _935_last = _909___mcc_h149;
                    RAST._IExpr _936_rhs = _934___mcc_h199;
                    Dafny.ISequence<Dafny.Rune> _937_name2 = _933___mcc_h198;
                    RAST._IType _938_tpe = _904___mcc_h140;
                    Dafny.ISequence<Dafny.Rune> _939_name = _901___mcc_h133;
                    RAST._IDeclareType _940_mod = _900___mcc_h132;
                    if ((_939_name).Equals(_937_name2)) {
                      return (BigInteger.One) + (_875_default);
                    } else {
                      return _875_default;
                    }
                  } else if (_source33.is_IfExpr) {
                    RAST._IExpr _941___mcc_h202 = _source33.dtor_cond;
                    RAST._IExpr _942___mcc_h203 = _source33.dtor_thn;
                    RAST._IExpr _943___mcc_h204 = _source33.dtor_els;
                    return _875_default;
                  } else if (_source33.is_Loop) {
                    Std.Wrappers._IOption<RAST._IExpr> _944___mcc_h208 = _source33.dtor_optCond;
                    RAST._IExpr _945___mcc_h209 = _source33.dtor_underlying;
                    return _875_default;
                  } else if (_source33.is_For) {
                    Dafny.ISequence<Dafny.Rune> _946___mcc_h212 = _source33.dtor_name;
                    RAST._IExpr _947___mcc_h213 = _source33.dtor_range;
                    RAST._IExpr _948___mcc_h214 = _source33.dtor_body;
                    return _875_default;
                  } else if (_source33.is_Labelled) {
                    Dafny.ISequence<Dafny.Rune> _949___mcc_h218 = _source33.dtor_lbl;
                    RAST._IExpr _950___mcc_h219 = _source33.dtor_underlying;
                    return _875_default;
                  } else if (_source33.is_Break) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _951___mcc_h222 = _source33.dtor_optLbl;
                    return _875_default;
                  } else if (_source33.is_Continue) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _952___mcc_h224 = _source33.dtor_optLbl;
                    return _875_default;
                  } else if (_source33.is_Return) {
                    Std.Wrappers._IOption<RAST._IExpr> _953___mcc_h226 = _source33.dtor_optExpr;
                    return _875_default;
                  } else if (_source33.is_Call) {
                    RAST._IExpr _954___mcc_h228 = _source33.dtor_obj;
                    Dafny.ISequence<RAST._IType> _955___mcc_h229 = _source33.dtor_typeParameters;
                    Dafny.ISequence<RAST._IExpr> _956___mcc_h230 = _source33.dtor_arguments;
                    return _875_default;
                  } else {
                    RAST._IExpr _957___mcc_h234 = _source33.dtor_underlying;
                    return _875_default;
                  }
                } else if (_source32.is_Block) {
                  RAST._IExpr _958___mcc_h236 = _source32.dtor_underlying;
                  return _875_default;
                } else if (_source32.is_StructBuild) {
                  Dafny.ISequence<Dafny.Rune> _959___mcc_h238 = _source32.dtor_name;
                  Dafny.ISequence<RAST._IAssignIdentifier> _960___mcc_h239 = _source32.dtor_assignments;
                  return _875_default;
                } else if (_source32.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _961___mcc_h242 = _source32.dtor_arguments;
                  return _875_default;
                } else if (_source32.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _962___mcc_h244 = _source32.dtor_op1;
                  RAST._IExpr _963___mcc_h245 = _source32.dtor_underlying;
                  DAST.Format._IUnOpFormat _964___mcc_h246 = _source32.dtor_format;
                  return _875_default;
                } else if (_source32.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _965___mcc_h250 = _source32.dtor_op2;
                  RAST._IExpr _966___mcc_h251 = _source32.dtor_left;
                  RAST._IExpr _967___mcc_h252 = _source32.dtor_right;
                  DAST.Format._IBinOpFormat _968___mcc_h253 = _source32.dtor_format2;
                  return _875_default;
                } else if (_source32.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _969___mcc_h258 = _source32.dtor_value;
                  return _875_default;
                } else if (_source32.is_ConversionNum) {
                  RAST._IType _970___mcc_h260 = _source32.dtor_tpe;
                  RAST._IExpr _971___mcc_h261 = _source32.dtor_underlying;
                  return _875_default;
                } else if (_source32.is_DeclareVar) {
                  RAST._IDeclareType _972___mcc_h264 = _source32.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _973___mcc_h265 = _source32.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _974___mcc_h266 = _source32.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _975___mcc_h267 = _source32.dtor_optRhs;
                  return _875_default;
                } else if (_source32.is_AssignVar) {
                  Dafny.ISequence<Dafny.Rune> _976___mcc_h272 = _source32.dtor_name;
                  RAST._IExpr _977___mcc_h273 = _source32.dtor_rhs;
                  return _875_default;
                } else if (_source32.is_IfExpr) {
                  RAST._IExpr _978___mcc_h276 = _source32.dtor_cond;
                  RAST._IExpr _979___mcc_h277 = _source32.dtor_thn;
                  RAST._IExpr _980___mcc_h278 = _source32.dtor_els;
                  return _875_default;
                } else if (_source32.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _981___mcc_h282 = _source32.dtor_optCond;
                  RAST._IExpr _982___mcc_h283 = _source32.dtor_underlying;
                  return _875_default;
                } else if (_source32.is_For) {
                  Dafny.ISequence<Dafny.Rune> _983___mcc_h286 = _source32.dtor_name;
                  RAST._IExpr _984___mcc_h287 = _source32.dtor_range;
                  RAST._IExpr _985___mcc_h288 = _source32.dtor_body;
                  return _875_default;
                } else if (_source32.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _986___mcc_h292 = _source32.dtor_lbl;
                  RAST._IExpr _987___mcc_h293 = _source32.dtor_underlying;
                  return _875_default;
                } else if (_source32.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _988___mcc_h296 = _source32.dtor_optLbl;
                  return _875_default;
                } else if (_source32.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _989___mcc_h298 = _source32.dtor_optLbl;
                  return _875_default;
                } else if (_source32.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _990___mcc_h300 = _source32.dtor_optExpr;
                  return _875_default;
                } else if (_source32.is_Call) {
                  RAST._IExpr _991___mcc_h302 = _source32.dtor_obj;
                  Dafny.ISequence<RAST._IType> _992___mcc_h303 = _source32.dtor_typeParameters;
                  Dafny.ISequence<RAST._IExpr> _993___mcc_h304 = _source32.dtor_arguments;
                  return _875_default;
                } else {
                  RAST._IExpr _994___mcc_h308 = _source32.dtor_underlying;
                  return _875_default;
                }
              } else {
                RAST._IExpr _995___mcc_h310 = _source31.dtor_value;
                return _875_default;
              }
            }
          } else if (_source29.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _996___mcc_h312 = _source29.dtor_name;
            RAST._IExpr _997___mcc_h313 = _source29.dtor_rhs;
            return _875_default;
          } else if (_source29.is_IfExpr) {
            RAST._IExpr _998___mcc_h316 = _source29.dtor_cond;
            RAST._IExpr _999___mcc_h317 = _source29.dtor_thn;
            RAST._IExpr _1000___mcc_h318 = _source29.dtor_els;
            return _875_default;
          } else if (_source29.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1001___mcc_h322 = _source29.dtor_optCond;
            RAST._IExpr _1002___mcc_h323 = _source29.dtor_underlying;
            return _875_default;
          } else if (_source29.is_For) {
            Dafny.ISequence<Dafny.Rune> _1003___mcc_h326 = _source29.dtor_name;
            RAST._IExpr _1004___mcc_h327 = _source29.dtor_range;
            RAST._IExpr _1005___mcc_h328 = _source29.dtor_body;
            return _875_default;
          } else if (_source29.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1006___mcc_h332 = _source29.dtor_lbl;
            RAST._IExpr _1007___mcc_h333 = _source29.dtor_underlying;
            return _875_default;
          } else if (_source29.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1008___mcc_h336 = _source29.dtor_optLbl;
            return _875_default;
          } else if (_source29.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1009___mcc_h338 = _source29.dtor_optLbl;
            return _875_default;
          } else if (_source29.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1010___mcc_h340 = _source29.dtor_optExpr;
            return _875_default;
          } else if (_source29.is_Call) {
            RAST._IExpr _1011___mcc_h342 = _source29.dtor_obj;
            Dafny.ISequence<RAST._IType> _1012___mcc_h343 = _source29.dtor_typeParameters;
            Dafny.ISequence<RAST._IExpr> _1013___mcc_h344 = _source29.dtor_arguments;
            return _875_default;
          } else {
            RAST._IExpr _1014___mcc_h348 = _source29.dtor_underlying;
            return _875_default;
          }
        } else if (_source28.is_Block) {
          RAST._IExpr _1015___mcc_h350 = _source28.dtor_underlying;
          return _875_default;
        } else if (_source28.is_StructBuild) {
          Dafny.ISequence<Dafny.Rune> _1016___mcc_h352 = _source28.dtor_name;
          Dafny.ISequence<RAST._IAssignIdentifier> _1017___mcc_h353 = _source28.dtor_assignments;
          return _875_default;
        } else if (_source28.is_Tuple) {
          Dafny.ISequence<RAST._IExpr> _1018___mcc_h356 = _source28.dtor_arguments;
          return _875_default;
        } else if (_source28.is_UnaryOp) {
          Dafny.ISequence<Dafny.Rune> _1019___mcc_h358 = _source28.dtor_op1;
          RAST._IExpr _1020___mcc_h359 = _source28.dtor_underlying;
          DAST.Format._IUnOpFormat _1021___mcc_h360 = _source28.dtor_format;
          return _875_default;
        } else if (_source28.is_BinaryOp) {
          Dafny.ISequence<Dafny.Rune> _1022___mcc_h364 = _source28.dtor_op2;
          RAST._IExpr _1023___mcc_h365 = _source28.dtor_left;
          RAST._IExpr _1024___mcc_h366 = _source28.dtor_right;
          DAST.Format._IBinOpFormat _1025___mcc_h367 = _source28.dtor_format2;
          return _875_default;
        } else if (_source28.is_LiteralInt) {
          Dafny.ISequence<Dafny.Rune> _1026___mcc_h372 = _source28.dtor_value;
          return _875_default;
        } else if (_source28.is_ConversionNum) {
          RAST._IType _1027___mcc_h374 = _source28.dtor_tpe;
          RAST._IExpr _1028___mcc_h375 = _source28.dtor_underlying;
          return _875_default;
        } else if (_source28.is_DeclareVar) {
          RAST._IDeclareType _1029___mcc_h378 = _source28.dtor_declareType;
          Dafny.ISequence<Dafny.Rune> _1030___mcc_h379 = _source28.dtor_name;
          Std.Wrappers._IOption<RAST._IType> _1031___mcc_h380 = _source28.dtor_optType;
          Std.Wrappers._IOption<RAST._IExpr> _1032___mcc_h381 = _source28.dtor_optRhs;
          return _875_default;
        } else if (_source28.is_AssignVar) {
          Dafny.ISequence<Dafny.Rune> _1033___mcc_h386 = _source28.dtor_name;
          RAST._IExpr _1034___mcc_h387 = _source28.dtor_rhs;
          return _875_default;
        } else if (_source28.is_IfExpr) {
          RAST._IExpr _1035___mcc_h390 = _source28.dtor_cond;
          RAST._IExpr _1036___mcc_h391 = _source28.dtor_thn;
          RAST._IExpr _1037___mcc_h392 = _source28.dtor_els;
          return _875_default;
        } else if (_source28.is_Loop) {
          Std.Wrappers._IOption<RAST._IExpr> _1038___mcc_h396 = _source28.dtor_optCond;
          RAST._IExpr _1039___mcc_h397 = _source28.dtor_underlying;
          return _875_default;
        } else if (_source28.is_For) {
          Dafny.ISequence<Dafny.Rune> _1040___mcc_h400 = _source28.dtor_name;
          RAST._IExpr _1041___mcc_h401 = _source28.dtor_range;
          RAST._IExpr _1042___mcc_h402 = _source28.dtor_body;
          return _875_default;
        } else if (_source28.is_Labelled) {
          Dafny.ISequence<Dafny.Rune> _1043___mcc_h406 = _source28.dtor_lbl;
          RAST._IExpr _1044___mcc_h407 = _source28.dtor_underlying;
          return _875_default;
        } else if (_source28.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1045___mcc_h410 = _source28.dtor_optLbl;
          return _875_default;
        } else if (_source28.is_Continue) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1046___mcc_h412 = _source28.dtor_optLbl;
          return _875_default;
        } else if (_source28.is_Return) {
          Std.Wrappers._IOption<RAST._IExpr> _1047___mcc_h414 = _source28.dtor_optExpr;
          return _875_default;
        } else if (_source28.is_Call) {
          RAST._IExpr _1048___mcc_h416 = _source28.dtor_obj;
          Dafny.ISequence<RAST._IType> _1049___mcc_h417 = _source28.dtor_typeParameters;
          Dafny.ISequence<RAST._IExpr> _1050___mcc_h418 = _source28.dtor_arguments;
          return _875_default;
        } else {
          RAST._IExpr _1051___mcc_h422 = _source28.dtor_underlying;
          return _875_default;
        }
      } else if (_source27.is_Block) {
        RAST._IExpr _1052___mcc_h10 = _source27.dtor_underlying;
        RAST._IExpr _1053_underlying = _1052___mcc_h10;
        return (BigInteger.One) + ((_1053_underlying).Height());
      } else if (_source27.is_StructBuild) {
        Dafny.ISequence<Dafny.Rune> _1054___mcc_h12 = _source27.dtor_name;
        Dafny.ISequence<RAST._IAssignIdentifier> _1055___mcc_h13 = _source27.dtor_assignments;
        Dafny.ISequence<RAST._IAssignIdentifier> _1056_assignments = _1055___mcc_h13;
        Dafny.ISequence<Dafny.Rune> _1057_name = _1054___mcc_h12;
        return (BigInteger.One) + (RAST.__default.SeqToHeight<RAST._IAssignIdentifier>(_1056_assignments, ((System.Func<RAST._IAssignIdentifier, BigInteger>)((_1058_assignment) => {
          return (_1058_assignment).Height();
        }))));
      } else if (_source27.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _1059___mcc_h16 = _source27.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _1060_arguments = _1059___mcc_h16;
        return (BigInteger.One) + (RAST.__default.SeqToHeight<RAST._IExpr>(_1060_arguments, ((System.Func<RAST._IExpr, BigInteger>)((_1061_argument) => {
          return (_1061_argument).Height();
        }))));
      } else if (_source27.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _1062___mcc_h18 = _source27.dtor_op1;
        RAST._IExpr _1063___mcc_h19 = _source27.dtor_underlying;
        DAST.Format._IUnOpFormat _1064___mcc_h20 = _source27.dtor_format;
        RAST._IExpr _1065_underlying = _1063___mcc_h19;
        return (BigInteger.One) + ((_1065_underlying).Height());
      } else if (_source27.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _1066___mcc_h24 = _source27.dtor_op2;
        RAST._IExpr _1067___mcc_h25 = _source27.dtor_left;
        RAST._IExpr _1068___mcc_h26 = _source27.dtor_right;
        DAST.Format._IBinOpFormat _1069___mcc_h27 = _source27.dtor_format2;
        DAST.Format._IBinOpFormat _1070_format = _1069___mcc_h27;
        RAST._IExpr _1071_right = _1068___mcc_h26;
        RAST._IExpr _1072_left = _1067___mcc_h25;
        Dafny.ISequence<Dafny.Rune> _1073_op = _1066___mcc_h24;
        return (BigInteger.One) + (RAST.__default.max((_1072_left).Height(), (_1071_right).Height()));
      } else if (_source27.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _1074___mcc_h32 = _source27.dtor_value;
        return BigInteger.One;
      } else if (_source27.is_ConversionNum) {
        RAST._IType _1075___mcc_h34 = _source27.dtor_tpe;
        RAST._IExpr _1076___mcc_h35 = _source27.dtor_underlying;
        RAST._IExpr _1077_underlying = _1076___mcc_h35;
        return (BigInteger.One) + ((_1077_underlying).Height());
      } else if (_source27.is_DeclareVar) {
        RAST._IDeclareType _1078___mcc_h38 = _source27.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _1079___mcc_h39 = _source27.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _1080___mcc_h40 = _source27.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _1081___mcc_h41 = _source27.dtor_optRhs;
        Std.Wrappers._IOption<RAST._IExpr> _1082_expr = _1081___mcc_h41;
        Std.Wrappers._IOption<RAST._IType> _1083_tpe = _1080___mcc_h40;
        Dafny.ISequence<Dafny.Rune> _1084_name = _1079___mcc_h39;
        RAST._IDeclareType _1085_declareType = _1078___mcc_h38;
        return (BigInteger.One) + (((System.Func<Std.Wrappers._IOption<RAST._IExpr>, BigInteger>)((_source34) => {
          if (_source34.is_None) {
            return BigInteger.Zero;
          } else {
            RAST._IExpr _1086___mcc_h424 = _source34.dtor_value;
            RAST._IExpr _1087_e = _1086___mcc_h424;
            return (_1087_e).Height();
          }
        }))(_1082_expr));
      } else if (_source27.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _1088___mcc_h46 = _source27.dtor_name;
        RAST._IExpr _1089___mcc_h47 = _source27.dtor_rhs;
        RAST._IExpr _1090_expr = _1089___mcc_h47;
        Dafny.ISequence<Dafny.Rune> _1091_name = _1088___mcc_h46;
        return (BigInteger.One) + ((_1090_expr).Height());
      } else if (_source27.is_IfExpr) {
        RAST._IExpr _1092___mcc_h50 = _source27.dtor_cond;
        RAST._IExpr _1093___mcc_h51 = _source27.dtor_thn;
        RAST._IExpr _1094___mcc_h52 = _source27.dtor_els;
        RAST._IExpr _1095_els = _1094___mcc_h52;
        RAST._IExpr _1096_thn = _1093___mcc_h51;
        RAST._IExpr _1097_cond = _1092___mcc_h50;
        return (BigInteger.One) + (RAST.__default.max((_1097_cond).Height(), RAST.__default.max((_1096_thn).Height(), (_1095_els).Height())));
      } else if (_source27.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _1098___mcc_h56 = _source27.dtor_optCond;
        RAST._IExpr _1099___mcc_h57 = _source27.dtor_underlying;
        RAST._IExpr _1100_underlying = _1099___mcc_h57;
        Std.Wrappers._IOption<RAST._IExpr> _1101_optCond = _1098___mcc_h56;
        return (BigInteger.One) + ((((_1101_optCond).is_Some) ? (RAST.__default.max(((_1101_optCond).dtor_value).Height(), (_1100_underlying).Height())) : ((_1100_underlying).Height())));
      } else if (_source27.is_For) {
        Dafny.ISequence<Dafny.Rune> _1102___mcc_h60 = _source27.dtor_name;
        RAST._IExpr _1103___mcc_h61 = _source27.dtor_range;
        RAST._IExpr _1104___mcc_h62 = _source27.dtor_body;
        RAST._IExpr _1105_body = _1104___mcc_h62;
        RAST._IExpr _1106_range = _1103___mcc_h61;
        Dafny.ISequence<Dafny.Rune> _1107_name = _1102___mcc_h60;
        return (BigInteger.One) + (RAST.__default.max((_1106_range).Height(), (_1105_body).Height()));
      } else if (_source27.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _1108___mcc_h66 = _source27.dtor_lbl;
        RAST._IExpr _1109___mcc_h67 = _source27.dtor_underlying;
        RAST._IExpr _1110_underlying = _1109___mcc_h67;
        Dafny.ISequence<Dafny.Rune> _1111_lbl = _1108___mcc_h66;
        return (BigInteger.One) + ((_1110_underlying).Height());
      } else if (_source27.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1112___mcc_h70 = _source27.dtor_optLbl;
        return BigInteger.One;
      } else if (_source27.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1113___mcc_h72 = _source27.dtor_optLbl;
        return BigInteger.One;
      } else if (_source27.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _1114___mcc_h74 = _source27.dtor_optExpr;
        Std.Wrappers._IOption<RAST._IExpr> _1115_optExpr = _1114___mcc_h74;
        if ((_1115_optExpr).is_Some) {
          return (BigInteger.One) + (((_1115_optExpr).dtor_value).Height());
        } else {
          return BigInteger.One;
        }
      } else if (_source27.is_Call) {
        RAST._IExpr _1116___mcc_h76 = _source27.dtor_obj;
        Dafny.ISequence<RAST._IType> _1117___mcc_h77 = _source27.dtor_typeParameters;
        Dafny.ISequence<RAST._IExpr> _1118___mcc_h78 = _source27.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _1119_args = _1118___mcc_h78;
        Dafny.ISequence<RAST._IType> _1120_tpes = _1117___mcc_h77;
        RAST._IExpr _1121_obj = _1116___mcc_h76;
        return (BigInteger.One) + (RAST.__default.max((_1121_obj).Height(), RAST.__default.max(RAST.__default.SeqToHeight<RAST._IType>(_1120_tpes, ((System.Func<RAST._IType, BigInteger>)((_1122_tpe) => {
          return BigInteger.One;
        }))), RAST.__default.SeqToHeight<RAST._IExpr>(_1119_args, ((System.Func<RAST._IExpr, BigInteger>)((_1123_arg) => {
          return (_1123_arg).Height();
        }))))));
      } else {
        RAST._IExpr _1124___mcc_h82 = _source27.dtor_underlying;
        RAST._IExpr _1125_underlying = _1124___mcc_h82;
        return (BigInteger.One) + ((_1125_underlying).Height());
      }
    }
    public RAST._IExpr Optimize() {
      RAST._IExpr _source35 = this;
      if (_source35.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _1126___mcc_h0 = _source35.dtor_content;
        return this;
      } else if (_source35.is_Match) {
        RAST._IExpr _1127___mcc_h2 = _source35.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _1128___mcc_h3 = _source35.dtor_cases;
        return this;
      } else if (_source35.is_StmtExpr) {
        RAST._IExpr _1129___mcc_h6 = _source35.dtor_stmt;
        RAST._IExpr _1130___mcc_h7 = _source35.dtor_rhs;
        RAST._IExpr _source36 = _1129___mcc_h6;
        if (_source36.is_RawExpr) {
          Dafny.ISequence<Dafny.Rune> _1131___mcc_h10 = _source36.dtor_content;
          return this;
        } else if (_source36.is_Match) {
          RAST._IExpr _1132___mcc_h12 = _source36.dtor_matchee;
          Dafny.ISequence<RAST._IMatchCase> _1133___mcc_h13 = _source36.dtor_cases;
          return this;
        } else if (_source36.is_StmtExpr) {
          RAST._IExpr _1134___mcc_h16 = _source36.dtor_stmt;
          RAST._IExpr _1135___mcc_h17 = _source36.dtor_rhs;
          return this;
        } else if (_source36.is_Block) {
          RAST._IExpr _1136___mcc_h20 = _source36.dtor_underlying;
          return this;
        } else if (_source36.is_StructBuild) {
          Dafny.ISequence<Dafny.Rune> _1137___mcc_h22 = _source36.dtor_name;
          Dafny.ISequence<RAST._IAssignIdentifier> _1138___mcc_h23 = _source36.dtor_assignments;
          return this;
        } else if (_source36.is_Tuple) {
          Dafny.ISequence<RAST._IExpr> _1139___mcc_h26 = _source36.dtor_arguments;
          return this;
        } else if (_source36.is_UnaryOp) {
          Dafny.ISequence<Dafny.Rune> _1140___mcc_h28 = _source36.dtor_op1;
          RAST._IExpr _1141___mcc_h29 = _source36.dtor_underlying;
          DAST.Format._IUnOpFormat _1142___mcc_h30 = _source36.dtor_format;
          return this;
        } else if (_source36.is_BinaryOp) {
          Dafny.ISequence<Dafny.Rune> _1143___mcc_h34 = _source36.dtor_op2;
          RAST._IExpr _1144___mcc_h35 = _source36.dtor_left;
          RAST._IExpr _1145___mcc_h36 = _source36.dtor_right;
          DAST.Format._IBinOpFormat _1146___mcc_h37 = _source36.dtor_format2;
          return this;
        } else if (_source36.is_LiteralInt) {
          Dafny.ISequence<Dafny.Rune> _1147___mcc_h42 = _source36.dtor_value;
          return this;
        } else if (_source36.is_ConversionNum) {
          RAST._IType _1148___mcc_h44 = _source36.dtor_tpe;
          RAST._IExpr _1149___mcc_h45 = _source36.dtor_underlying;
          return this;
        } else if (_source36.is_DeclareVar) {
          RAST._IDeclareType _1150___mcc_h48 = _source36.dtor_declareType;
          Dafny.ISequence<Dafny.Rune> _1151___mcc_h49 = _source36.dtor_name;
          Std.Wrappers._IOption<RAST._IType> _1152___mcc_h50 = _source36.dtor_optType;
          Std.Wrappers._IOption<RAST._IExpr> _1153___mcc_h51 = _source36.dtor_optRhs;
          Std.Wrappers._IOption<RAST._IType> _source37 = _1152___mcc_h50;
          if (_source37.is_None) {
            return this;
          } else {
            RAST._IType _1154___mcc_h56 = _source37.dtor_value;
            Std.Wrappers._IOption<RAST._IExpr> _source38 = _1153___mcc_h51;
            if (_source38.is_None) {
              RAST._IExpr _source39 = _1130___mcc_h7;
              if (_source39.is_RawExpr) {
                Dafny.ISequence<Dafny.Rune> _1155___mcc_h58 = _source39.dtor_content;
                return this;
              } else if (_source39.is_Match) {
                RAST._IExpr _1156___mcc_h60 = _source39.dtor_matchee;
                Dafny.ISequence<RAST._IMatchCase> _1157___mcc_h61 = _source39.dtor_cases;
                return this;
              } else if (_source39.is_StmtExpr) {
                RAST._IExpr _1158___mcc_h64 = _source39.dtor_stmt;
                RAST._IExpr _1159___mcc_h65 = _source39.dtor_rhs;
                RAST._IExpr _source40 = _1158___mcc_h64;
                if (_source40.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _1160___mcc_h68 = _source40.dtor_content;
                  return this;
                } else if (_source40.is_Match) {
                  RAST._IExpr _1161___mcc_h70 = _source40.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _1162___mcc_h71 = _source40.dtor_cases;
                  return this;
                } else if (_source40.is_StmtExpr) {
                  RAST._IExpr _1163___mcc_h74 = _source40.dtor_stmt;
                  RAST._IExpr _1164___mcc_h75 = _source40.dtor_rhs;
                  return this;
                } else if (_source40.is_Block) {
                  RAST._IExpr _1165___mcc_h78 = _source40.dtor_underlying;
                  return this;
                } else if (_source40.is_StructBuild) {
                  Dafny.ISequence<Dafny.Rune> _1166___mcc_h80 = _source40.dtor_name;
                  Dafny.ISequence<RAST._IAssignIdentifier> _1167___mcc_h81 = _source40.dtor_assignments;
                  return this;
                } else if (_source40.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _1168___mcc_h84 = _source40.dtor_arguments;
                  return this;
                } else if (_source40.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _1169___mcc_h86 = _source40.dtor_op1;
                  RAST._IExpr _1170___mcc_h87 = _source40.dtor_underlying;
                  DAST.Format._IUnOpFormat _1171___mcc_h88 = _source40.dtor_format;
                  return this;
                } else if (_source40.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _1172___mcc_h92 = _source40.dtor_op2;
                  RAST._IExpr _1173___mcc_h93 = _source40.dtor_left;
                  RAST._IExpr _1174___mcc_h94 = _source40.dtor_right;
                  DAST.Format._IBinOpFormat _1175___mcc_h95 = _source40.dtor_format2;
                  return this;
                } else if (_source40.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _1176___mcc_h100 = _source40.dtor_value;
                  return this;
                } else if (_source40.is_ConversionNum) {
                  RAST._IType _1177___mcc_h102 = _source40.dtor_tpe;
                  RAST._IExpr _1178___mcc_h103 = _source40.dtor_underlying;
                  return this;
                } else if (_source40.is_DeclareVar) {
                  RAST._IDeclareType _1179___mcc_h106 = _source40.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _1180___mcc_h107 = _source40.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _1181___mcc_h108 = _source40.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _1182___mcc_h109 = _source40.dtor_optRhs;
                  return this;
                } else if (_source40.is_AssignVar) {
                  Dafny.ISequence<Dafny.Rune> _1183___mcc_h114 = _source40.dtor_name;
                  RAST._IExpr _1184___mcc_h115 = _source40.dtor_rhs;
                  RAST._IExpr _1185_last = _1159___mcc_h65;
                  RAST._IExpr _1186_rhs = _1184___mcc_h115;
                  Dafny.ISequence<Dafny.Rune> _1187_name2 = _1183___mcc_h114;
                  RAST._IType _1188_tpe = _1154___mcc_h56;
                  Dafny.ISequence<Dafny.Rune> _1189_name = _1151___mcc_h49;
                  RAST._IDeclareType _1190_mod = _1150___mcc_h48;
                  if ((_1189_name).Equals(_1187_name2)) {
                    RAST._IExpr _1191_rewriting = RAST.Expr.create_StmtExpr(RAST.Expr.create_DeclareVar(_1190_mod, _1189_name, Std.Wrappers.Option<RAST._IType>.create_Some(_1188_tpe), Std.Wrappers.Option<RAST._IExpr>.create_Some(_1186_rhs)), _1185_last);
                    return _1191_rewriting;
                  } else {
                    return this;
                  }
                } else if (_source40.is_IfExpr) {
                  RAST._IExpr _1192___mcc_h118 = _source40.dtor_cond;
                  RAST._IExpr _1193___mcc_h119 = _source40.dtor_thn;
                  RAST._IExpr _1194___mcc_h120 = _source40.dtor_els;
                  return this;
                } else if (_source40.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _1195___mcc_h124 = _source40.dtor_optCond;
                  RAST._IExpr _1196___mcc_h125 = _source40.dtor_underlying;
                  return this;
                } else if (_source40.is_For) {
                  Dafny.ISequence<Dafny.Rune> _1197___mcc_h128 = _source40.dtor_name;
                  RAST._IExpr _1198___mcc_h129 = _source40.dtor_range;
                  RAST._IExpr _1199___mcc_h130 = _source40.dtor_body;
                  return this;
                } else if (_source40.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _1200___mcc_h134 = _source40.dtor_lbl;
                  RAST._IExpr _1201___mcc_h135 = _source40.dtor_underlying;
                  return this;
                } else if (_source40.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1202___mcc_h138 = _source40.dtor_optLbl;
                  return this;
                } else if (_source40.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1203___mcc_h140 = _source40.dtor_optLbl;
                  return this;
                } else if (_source40.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _1204___mcc_h142 = _source40.dtor_optExpr;
                  return this;
                } else if (_source40.is_Call) {
                  RAST._IExpr _1205___mcc_h144 = _source40.dtor_obj;
                  Dafny.ISequence<RAST._IType> _1206___mcc_h145 = _source40.dtor_typeParameters;
                  Dafny.ISequence<RAST._IExpr> _1207___mcc_h146 = _source40.dtor_arguments;
                  return this;
                } else {
                  RAST._IExpr _1208___mcc_h150 = _source40.dtor_underlying;
                  return this;
                }
              } else if (_source39.is_Block) {
                RAST._IExpr _1209___mcc_h152 = _source39.dtor_underlying;
                return this;
              } else if (_source39.is_StructBuild) {
                Dafny.ISequence<Dafny.Rune> _1210___mcc_h154 = _source39.dtor_name;
                Dafny.ISequence<RAST._IAssignIdentifier> _1211___mcc_h155 = _source39.dtor_assignments;
                return this;
              } else if (_source39.is_Tuple) {
                Dafny.ISequence<RAST._IExpr> _1212___mcc_h158 = _source39.dtor_arguments;
                return this;
              } else if (_source39.is_UnaryOp) {
                Dafny.ISequence<Dafny.Rune> _1213___mcc_h160 = _source39.dtor_op1;
                RAST._IExpr _1214___mcc_h161 = _source39.dtor_underlying;
                DAST.Format._IUnOpFormat _1215___mcc_h162 = _source39.dtor_format;
                return this;
              } else if (_source39.is_BinaryOp) {
                Dafny.ISequence<Dafny.Rune> _1216___mcc_h166 = _source39.dtor_op2;
                RAST._IExpr _1217___mcc_h167 = _source39.dtor_left;
                RAST._IExpr _1218___mcc_h168 = _source39.dtor_right;
                DAST.Format._IBinOpFormat _1219___mcc_h169 = _source39.dtor_format2;
                return this;
              } else if (_source39.is_LiteralInt) {
                Dafny.ISequence<Dafny.Rune> _1220___mcc_h174 = _source39.dtor_value;
                return this;
              } else if (_source39.is_ConversionNum) {
                RAST._IType _1221___mcc_h176 = _source39.dtor_tpe;
                RAST._IExpr _1222___mcc_h177 = _source39.dtor_underlying;
                return this;
              } else if (_source39.is_DeclareVar) {
                RAST._IDeclareType _1223___mcc_h180 = _source39.dtor_declareType;
                Dafny.ISequence<Dafny.Rune> _1224___mcc_h181 = _source39.dtor_name;
                Std.Wrappers._IOption<RAST._IType> _1225___mcc_h182 = _source39.dtor_optType;
                Std.Wrappers._IOption<RAST._IExpr> _1226___mcc_h183 = _source39.dtor_optRhs;
                return this;
              } else if (_source39.is_AssignVar) {
                Dafny.ISequence<Dafny.Rune> _1227___mcc_h188 = _source39.dtor_name;
                RAST._IExpr _1228___mcc_h189 = _source39.dtor_rhs;
                return this;
              } else if (_source39.is_IfExpr) {
                RAST._IExpr _1229___mcc_h192 = _source39.dtor_cond;
                RAST._IExpr _1230___mcc_h193 = _source39.dtor_thn;
                RAST._IExpr _1231___mcc_h194 = _source39.dtor_els;
                return this;
              } else if (_source39.is_Loop) {
                Std.Wrappers._IOption<RAST._IExpr> _1232___mcc_h198 = _source39.dtor_optCond;
                RAST._IExpr _1233___mcc_h199 = _source39.dtor_underlying;
                return this;
              } else if (_source39.is_For) {
                Dafny.ISequence<Dafny.Rune> _1234___mcc_h202 = _source39.dtor_name;
                RAST._IExpr _1235___mcc_h203 = _source39.dtor_range;
                RAST._IExpr _1236___mcc_h204 = _source39.dtor_body;
                return this;
              } else if (_source39.is_Labelled) {
                Dafny.ISequence<Dafny.Rune> _1237___mcc_h208 = _source39.dtor_lbl;
                RAST._IExpr _1238___mcc_h209 = _source39.dtor_underlying;
                return this;
              } else if (_source39.is_Break) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1239___mcc_h212 = _source39.dtor_optLbl;
                return this;
              } else if (_source39.is_Continue) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1240___mcc_h214 = _source39.dtor_optLbl;
                return this;
              } else if (_source39.is_Return) {
                Std.Wrappers._IOption<RAST._IExpr> _1241___mcc_h216 = _source39.dtor_optExpr;
                return this;
              } else if (_source39.is_Call) {
                RAST._IExpr _1242___mcc_h218 = _source39.dtor_obj;
                Dafny.ISequence<RAST._IType> _1243___mcc_h219 = _source39.dtor_typeParameters;
                Dafny.ISequence<RAST._IExpr> _1244___mcc_h220 = _source39.dtor_arguments;
                return this;
              } else {
                RAST._IExpr _1245___mcc_h224 = _source39.dtor_underlying;
                return this;
              }
            } else {
              RAST._IExpr _1246___mcc_h226 = _source38.dtor_value;
              return this;
            }
          }
        } else if (_source36.is_AssignVar) {
          Dafny.ISequence<Dafny.Rune> _1247___mcc_h228 = _source36.dtor_name;
          RAST._IExpr _1248___mcc_h229 = _source36.dtor_rhs;
          return this;
        } else if (_source36.is_IfExpr) {
          RAST._IExpr _1249___mcc_h232 = _source36.dtor_cond;
          RAST._IExpr _1250___mcc_h233 = _source36.dtor_thn;
          RAST._IExpr _1251___mcc_h234 = _source36.dtor_els;
          return this;
        } else if (_source36.is_Loop) {
          Std.Wrappers._IOption<RAST._IExpr> _1252___mcc_h238 = _source36.dtor_optCond;
          RAST._IExpr _1253___mcc_h239 = _source36.dtor_underlying;
          return this;
        } else if (_source36.is_For) {
          Dafny.ISequence<Dafny.Rune> _1254___mcc_h242 = _source36.dtor_name;
          RAST._IExpr _1255___mcc_h243 = _source36.dtor_range;
          RAST._IExpr _1256___mcc_h244 = _source36.dtor_body;
          return this;
        } else if (_source36.is_Labelled) {
          Dafny.ISequence<Dafny.Rune> _1257___mcc_h248 = _source36.dtor_lbl;
          RAST._IExpr _1258___mcc_h249 = _source36.dtor_underlying;
          return this;
        } else if (_source36.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1259___mcc_h252 = _source36.dtor_optLbl;
          return this;
        } else if (_source36.is_Continue) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1260___mcc_h254 = _source36.dtor_optLbl;
          return this;
        } else if (_source36.is_Return) {
          Std.Wrappers._IOption<RAST._IExpr> _1261___mcc_h256 = _source36.dtor_optExpr;
          return this;
        } else if (_source36.is_Call) {
          RAST._IExpr _1262___mcc_h258 = _source36.dtor_obj;
          Dafny.ISequence<RAST._IType> _1263___mcc_h259 = _source36.dtor_typeParameters;
          Dafny.ISequence<RAST._IExpr> _1264___mcc_h260 = _source36.dtor_arguments;
          return this;
        } else {
          RAST._IExpr _1265___mcc_h264 = _source36.dtor_underlying;
          return this;
        }
      } else if (_source35.is_Block) {
        RAST._IExpr _1266___mcc_h266 = _source35.dtor_underlying;
        return this;
      } else if (_source35.is_StructBuild) {
        Dafny.ISequence<Dafny.Rune> _1267___mcc_h268 = _source35.dtor_name;
        Dafny.ISequence<RAST._IAssignIdentifier> _1268___mcc_h269 = _source35.dtor_assignments;
        return this;
      } else if (_source35.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _1269___mcc_h272 = _source35.dtor_arguments;
        return this;
      } else if (_source35.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _1270___mcc_h274 = _source35.dtor_op1;
        RAST._IExpr _1271___mcc_h275 = _source35.dtor_underlying;
        DAST.Format._IUnOpFormat _1272___mcc_h276 = _source35.dtor_format;
        return this;
      } else if (_source35.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _1273___mcc_h280 = _source35.dtor_op2;
        RAST._IExpr _1274___mcc_h281 = _source35.dtor_left;
        RAST._IExpr _1275___mcc_h282 = _source35.dtor_right;
        DAST.Format._IBinOpFormat _1276___mcc_h283 = _source35.dtor_format2;
        return this;
      } else if (_source35.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _1277___mcc_h288 = _source35.dtor_value;
        return this;
      } else if (_source35.is_ConversionNum) {
        RAST._IType _1278___mcc_h290 = _source35.dtor_tpe;
        RAST._IExpr _1279___mcc_h291 = _source35.dtor_underlying;
        RAST._IExpr _1280_expr = _1279___mcc_h291;
        RAST._IType _1281_tpe = _1278___mcc_h290;
        if (((((((((((_1281_tpe).is_U8) || ((_1281_tpe).is_U16)) || ((_1281_tpe).is_U32)) || ((_1281_tpe).is_U64)) || ((_1281_tpe).is_U128)) || ((_1281_tpe).is_I8)) || ((_1281_tpe).is_I16)) || ((_1281_tpe).is_I32)) || ((_1281_tpe).is_I64)) || ((_1281_tpe).is_I128)) {
          RAST._IExpr _source41 = _1280_expr;
          if (_source41.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _1282___mcc_h340 = _source41.dtor_content;
            return this;
          } else if (_source41.is_Match) {
            RAST._IExpr _1283___mcc_h342 = _source41.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _1284___mcc_h343 = _source41.dtor_cases;
            return this;
          } else if (_source41.is_StmtExpr) {
            RAST._IExpr _1285___mcc_h346 = _source41.dtor_stmt;
            RAST._IExpr _1286___mcc_h347 = _source41.dtor_rhs;
            return this;
          } else if (_source41.is_Block) {
            RAST._IExpr _1287___mcc_h350 = _source41.dtor_underlying;
            return this;
          } else if (_source41.is_StructBuild) {
            Dafny.ISequence<Dafny.Rune> _1288___mcc_h352 = _source41.dtor_name;
            Dafny.ISequence<RAST._IAssignIdentifier> _1289___mcc_h353 = _source41.dtor_assignments;
            return this;
          } else if (_source41.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _1290___mcc_h356 = _source41.dtor_arguments;
            return this;
          } else if (_source41.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _1291___mcc_h358 = _source41.dtor_op1;
            RAST._IExpr _1292___mcc_h359 = _source41.dtor_underlying;
            DAST.Format._IUnOpFormat _1293___mcc_h360 = _source41.dtor_format;
            return this;
          } else if (_source41.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _1294___mcc_h364 = _source41.dtor_op2;
            RAST._IExpr _1295___mcc_h365 = _source41.dtor_left;
            RAST._IExpr _1296___mcc_h366 = _source41.dtor_right;
            DAST.Format._IBinOpFormat _1297___mcc_h367 = _source41.dtor_format2;
            return this;
          } else if (_source41.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _1298___mcc_h372 = _source41.dtor_value;
            Dafny.ISequence<Dafny.Rune> _1299_number = _1298___mcc_h372;
            return RAST.Expr.create_RawExpr(_1299_number);
          } else if (_source41.is_ConversionNum) {
            RAST._IType _1300___mcc_h374 = _source41.dtor_tpe;
            RAST._IExpr _1301___mcc_h375 = _source41.dtor_underlying;
            return this;
          } else if (_source41.is_DeclareVar) {
            RAST._IDeclareType _1302___mcc_h378 = _source41.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _1303___mcc_h379 = _source41.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _1304___mcc_h380 = _source41.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _1305___mcc_h381 = _source41.dtor_optRhs;
            return this;
          } else if (_source41.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _1306___mcc_h386 = _source41.dtor_name;
            RAST._IExpr _1307___mcc_h387 = _source41.dtor_rhs;
            return this;
          } else if (_source41.is_IfExpr) {
            RAST._IExpr _1308___mcc_h390 = _source41.dtor_cond;
            RAST._IExpr _1309___mcc_h391 = _source41.dtor_thn;
            RAST._IExpr _1310___mcc_h392 = _source41.dtor_els;
            return this;
          } else if (_source41.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1311___mcc_h396 = _source41.dtor_optCond;
            RAST._IExpr _1312___mcc_h397 = _source41.dtor_underlying;
            return this;
          } else if (_source41.is_For) {
            Dafny.ISequence<Dafny.Rune> _1313___mcc_h400 = _source41.dtor_name;
            RAST._IExpr _1314___mcc_h401 = _source41.dtor_range;
            RAST._IExpr _1315___mcc_h402 = _source41.dtor_body;
            return this;
          } else if (_source41.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1316___mcc_h406 = _source41.dtor_lbl;
            RAST._IExpr _1317___mcc_h407 = _source41.dtor_underlying;
            return this;
          } else if (_source41.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1318___mcc_h410 = _source41.dtor_optLbl;
            return this;
          } else if (_source41.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1319___mcc_h412 = _source41.dtor_optLbl;
            return this;
          } else if (_source41.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1320___mcc_h414 = _source41.dtor_optExpr;
            return this;
          } else if (_source41.is_Call) {
            RAST._IExpr _1321___mcc_h416 = _source41.dtor_obj;
            Dafny.ISequence<RAST._IType> _1322___mcc_h417 = _source41.dtor_typeParameters;
            Dafny.ISequence<RAST._IExpr> _1323___mcc_h418 = _source41.dtor_arguments;
            return this;
          } else {
            RAST._IExpr _1324___mcc_h422 = _source41.dtor_underlying;
            return this;
          }
        } else {
          return this;
        }
      } else if (_source35.is_DeclareVar) {
        RAST._IDeclareType _1325___mcc_h294 = _source35.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _1326___mcc_h295 = _source35.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _1327___mcc_h296 = _source35.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _1328___mcc_h297 = _source35.dtor_optRhs;
        return this;
      } else if (_source35.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _1329___mcc_h302 = _source35.dtor_name;
        RAST._IExpr _1330___mcc_h303 = _source35.dtor_rhs;
        return this;
      } else if (_source35.is_IfExpr) {
        RAST._IExpr _1331___mcc_h306 = _source35.dtor_cond;
        RAST._IExpr _1332___mcc_h307 = _source35.dtor_thn;
        RAST._IExpr _1333___mcc_h308 = _source35.dtor_els;
        return this;
      } else if (_source35.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _1334___mcc_h312 = _source35.dtor_optCond;
        RAST._IExpr _1335___mcc_h313 = _source35.dtor_underlying;
        return this;
      } else if (_source35.is_For) {
        Dafny.ISequence<Dafny.Rune> _1336___mcc_h316 = _source35.dtor_name;
        RAST._IExpr _1337___mcc_h317 = _source35.dtor_range;
        RAST._IExpr _1338___mcc_h318 = _source35.dtor_body;
        return this;
      } else if (_source35.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _1339___mcc_h322 = _source35.dtor_lbl;
        RAST._IExpr _1340___mcc_h323 = _source35.dtor_underlying;
        return this;
      } else if (_source35.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1341___mcc_h326 = _source35.dtor_optLbl;
        return this;
      } else if (_source35.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1342___mcc_h328 = _source35.dtor_optLbl;
        return this;
      } else if (_source35.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _1343___mcc_h330 = _source35.dtor_optExpr;
        return this;
      } else if (_source35.is_Call) {
        RAST._IExpr _1344___mcc_h332 = _source35.dtor_obj;
        Dafny.ISequence<RAST._IType> _1345___mcc_h333 = _source35.dtor_typeParameters;
        Dafny.ISequence<RAST._IExpr> _1346___mcc_h334 = _source35.dtor_arguments;
        return this;
      } else {
        RAST._IExpr _1347___mcc_h338 = _source35.dtor_underlying;
        return this;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      var _pat_let_tv4 = ind;
      RAST._IExpr _source42 = (this).Optimize();
      if (_source42.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _1348___mcc_h0 = _source42.dtor_content;
        RAST._IExpr _1349_r = (this).Optimize();
        return RAST.__default.AddIndent((_1349_r).dtor_content, ind);
      } else if (_source42.is_Match) {
        RAST._IExpr _1350___mcc_h2 = _source42.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _1351___mcc_h3 = _source42.dtor_cases;
        Dafny.ISequence<RAST._IMatchCase> _1352_cases = _1351___mcc_h3;
        RAST._IExpr _1353_matchee = _1350___mcc_h2;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match "), (_1353_matchee)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IMatchCase>(_1352_cases, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IMatchCase, Dafny.ISequence<Dafny.Rune>>>>((_1354_ind) => ((System.Func<RAST._IMatchCase, Dafny.ISequence<Dafny.Rune>>)((_1355_c) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _1354_ind), RAST.__default.IND), (_1355_c)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_1354_ind, RAST.__default.IND)));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source42.is_StmtExpr) {
        RAST._IExpr _1356___mcc_h6 = _source42.dtor_stmt;
        RAST._IExpr _1357___mcc_h7 = _source42.dtor_rhs;
        RAST._IExpr _1358_rhs = _1357___mcc_h7;
        RAST._IExpr _1359_stmt = _1356___mcc_h6;
        if (object.Equals(_1359_stmt, RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))) {
          return (_1358_rhs)._ToString(ind);
        } else {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_1359_stmt)._ToString(ind), (((_1359_stmt).NoExtraSemicolonAfter()) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), (_1358_rhs)._ToString(ind));
        }
      } else if (_source42.is_Block) {
        RAST._IExpr _1360___mcc_h10 = _source42.dtor_underlying;
        RAST._IExpr _1361_underlying = _1360___mcc_h10;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n"), ind), RAST.__default.IND), (_1361_underlying)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source42.is_StructBuild) {
        Dafny.ISequence<Dafny.Rune> _1362___mcc_h12 = _source42.dtor_name;
        Dafny.ISequence<RAST._IAssignIdentifier> _1363___mcc_h13 = _source42.dtor_assignments;
        Dafny.ISequence<RAST._IAssignIdentifier> _1364_assignments = _1363___mcc_h13;
        Dafny.ISequence<Dafny.Rune> _1365_name = _1362___mcc_h12;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1365_name, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IAssignIdentifier>(_1364_assignments, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IAssignIdentifier, Dafny.ISequence<Dafny.Rune>>>>((_1366_ind) => ((System.Func<RAST._IAssignIdentifier, Dafny.ISequence<Dafny.Rune>>)((_1367_assignment) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _1366_ind), RAST.__default.IND), (_1367_assignment)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_1366_ind, RAST.__default.IND)));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), (((new BigInteger((_1364_assignments).Count)).Sign == 1) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source42.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _1368___mcc_h16 = _source42.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _1369_arguments = _1368___mcc_h16;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), RAST.__default.SeqToString<RAST._IExpr>(_1369_arguments, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>>>((_1370_ind) => ((System.Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>)((_1371_arg) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _1370_ind), RAST.__default.IND), (_1371_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_1370_ind, RAST.__default.IND)));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), (((new BigInteger((_1369_arguments).Count)).Sign == 1) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      } else if (_source42.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _1372___mcc_h18 = _source42.dtor_op1;
        RAST._IExpr _1373___mcc_h19 = _source42.dtor_underlying;
        DAST.Format._IUnOpFormat _1374___mcc_h20 = _source42.dtor_format;
        if (object.Equals(_1372___mcc_h18, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"))) {
          RAST._IExpr _source43 = _1373___mcc_h19;
          if (_source43.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _1375___mcc_h24 = _source43.dtor_content;
            DAST.Format._IUnOpFormat _1376_format = _1374___mcc_h20;
            RAST._IExpr _1377_underlying = _1373___mcc_h19;
            Dafny.ISequence<Dafny.Rune> _1378_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1378_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1377_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          } else if (_source43.is_Match) {
            RAST._IExpr _1379___mcc_h27 = _source43.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _1380___mcc_h28 = _source43.dtor_cases;
            DAST.Format._IUnOpFormat _1381_format = _1374___mcc_h20;
            RAST._IExpr _1382_underlying = _1373___mcc_h19;
            Dafny.ISequence<Dafny.Rune> _1383_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1383_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1382_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          } else if (_source43.is_StmtExpr) {
            RAST._IExpr _1384___mcc_h33 = _source43.dtor_stmt;
            RAST._IExpr _1385___mcc_h34 = _source43.dtor_rhs;
            DAST.Format._IUnOpFormat _1386_format = _1374___mcc_h20;
            RAST._IExpr _1387_underlying = _1373___mcc_h19;
            Dafny.ISequence<Dafny.Rune> _1388_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1388_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1387_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          } else if (_source43.is_Block) {
            RAST._IExpr _1389___mcc_h39 = _source43.dtor_underlying;
            DAST.Format._IUnOpFormat _1390_format = _1374___mcc_h20;
            RAST._IExpr _1391_underlying = _1373___mcc_h19;
            Dafny.ISequence<Dafny.Rune> _1392_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1392_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1391_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          } else if (_source43.is_StructBuild) {
            Dafny.ISequence<Dafny.Rune> _1393___mcc_h42 = _source43.dtor_name;
            Dafny.ISequence<RAST._IAssignIdentifier> _1394___mcc_h43 = _source43.dtor_assignments;
            DAST.Format._IUnOpFormat _1395_format = _1374___mcc_h20;
            RAST._IExpr _1396_underlying = _1373___mcc_h19;
            Dafny.ISequence<Dafny.Rune> _1397_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1397_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1396_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          } else if (_source43.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _1398___mcc_h48 = _source43.dtor_arguments;
            DAST.Format._IUnOpFormat _1399_format = _1374___mcc_h20;
            RAST._IExpr _1400_underlying = _1373___mcc_h19;
            Dafny.ISequence<Dafny.Rune> _1401_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1401_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1400_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          } else if (_source43.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _1402___mcc_h51 = _source43.dtor_op1;
            RAST._IExpr _1403___mcc_h52 = _source43.dtor_underlying;
            DAST.Format._IUnOpFormat _1404___mcc_h53 = _source43.dtor_format;
            DAST.Format._IUnOpFormat _1405_format = _1374___mcc_h20;
            RAST._IExpr _1406_underlying = _1373___mcc_h19;
            Dafny.ISequence<Dafny.Rune> _1407_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1407_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1406_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          } else if (_source43.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _1408___mcc_h60 = _source43.dtor_op2;
            RAST._IExpr _1409___mcc_h61 = _source43.dtor_left;
            RAST._IExpr _1410___mcc_h62 = _source43.dtor_right;
            DAST.Format._IBinOpFormat _1411___mcc_h63 = _source43.dtor_format2;
            if (object.Equals(_1408___mcc_h60, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="))) {
              DAST.Format._IUnOpFormat _source44 = _1374___mcc_h20;
              if (_source44.is_NoFormat) {
                DAST.Format._IUnOpFormat _1412_format = _1374___mcc_h20;
                RAST._IExpr _1413_underlying = _1373___mcc_h19;
                Dafny.ISequence<Dafny.Rune> _1414_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
                return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1414_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1413_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              } else {
                DAST.Format._IBinOpFormat _1415_format = _1411___mcc_h63;
                RAST._IExpr _1416_right = _1410___mcc_h62;
                RAST._IExpr _1417_left = _1409___mcc_h61;
                return (RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!="), _1417_left, _1416_right, DAST.Format.BinOpFormat.create_NoFormat()))._ToString(ind);
              }
            } else if (object.Equals(_1408___mcc_h60, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"))) {
              DAST.Format._IBinOpFormat _source45 = _1411___mcc_h63;
              if (_source45.is_NoFormat) {
                DAST.Format._IUnOpFormat _source46 = _1374___mcc_h20;
                if (_source46.is_NoFormat) {
                  DAST.Format._IUnOpFormat _1418_format = _1374___mcc_h20;
                  RAST._IExpr _1419_underlying = _1373___mcc_h19;
                  Dafny.ISequence<Dafny.Rune> _1420_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
                  return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1420_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1419_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                } else {
                  RAST._IExpr _1421_right = _1410___mcc_h62;
                  RAST._IExpr _1422_left = _1409___mcc_h61;
                  return (RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">="), _1422_left, _1421_right, DAST.Format.BinOpFormat.create_NoFormat()))._ToString(ind);
                }
              } else if (_source45.is_ImpliesFormat) {
                DAST.Format._IUnOpFormat _1423_format = _1374___mcc_h20;
                RAST._IExpr _1424_underlying = _1373___mcc_h19;
                Dafny.ISequence<Dafny.Rune> _1425_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
                return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1425_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1424_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              } else if (_source45.is_Equivalence) {
                DAST.Format._IUnOpFormat _1426_format = _1374___mcc_h20;
                RAST._IExpr _1427_underlying = _1373___mcc_h19;
                Dafny.ISequence<Dafny.Rune> _1428_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
                return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1428_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1427_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              } else {
                DAST.Format._IUnOpFormat _source47 = _1374___mcc_h20;
                if (_source47.is_NoFormat) {
                  DAST.Format._IUnOpFormat _1429_format = _1374___mcc_h20;
                  RAST._IExpr _1430_underlying = _1373___mcc_h19;
                  Dafny.ISequence<Dafny.Rune> _1431_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
                  return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1431_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1430_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                } else {
                  RAST._IExpr _1432_right = _1410___mcc_h62;
                  RAST._IExpr _1433_left = _1409___mcc_h61;
                  return (RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _1432_right, _1433_left, DAST.Format.BinOpFormat.create_NoFormat()))._ToString(ind);
                }
              }
            } else {
              DAST.Format._IUnOpFormat _1434_format = _1374___mcc_h20;
              RAST._IExpr _1435_underlying = _1373___mcc_h19;
              Dafny.ISequence<Dafny.Rune> _1436_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1436_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1435_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          } else if (_source43.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _1437___mcc_h72 = _source43.dtor_value;
            DAST.Format._IUnOpFormat _1438_format = _1374___mcc_h20;
            RAST._IExpr _1439_underlying = _1373___mcc_h19;
            Dafny.ISequence<Dafny.Rune> _1440_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1440_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1439_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          } else if (_source43.is_ConversionNum) {
            RAST._IType _1441___mcc_h75 = _source43.dtor_tpe;
            RAST._IExpr _1442___mcc_h76 = _source43.dtor_underlying;
            DAST.Format._IUnOpFormat _1443_format = _1374___mcc_h20;
            RAST._IExpr _1444_underlying = _1373___mcc_h19;
            Dafny.ISequence<Dafny.Rune> _1445_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1445_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1444_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          } else if (_source43.is_DeclareVar) {
            RAST._IDeclareType _1446___mcc_h81 = _source43.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _1447___mcc_h82 = _source43.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _1448___mcc_h83 = _source43.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _1449___mcc_h84 = _source43.dtor_optRhs;
            DAST.Format._IUnOpFormat _1450_format = _1374___mcc_h20;
            RAST._IExpr _1451_underlying = _1373___mcc_h19;
            Dafny.ISequence<Dafny.Rune> _1452_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1452_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1451_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          } else if (_source43.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _1453___mcc_h93 = _source43.dtor_name;
            RAST._IExpr _1454___mcc_h94 = _source43.dtor_rhs;
            DAST.Format._IUnOpFormat _1455_format = _1374___mcc_h20;
            RAST._IExpr _1456_underlying = _1373___mcc_h19;
            Dafny.ISequence<Dafny.Rune> _1457_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1457_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1456_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          } else if (_source43.is_IfExpr) {
            RAST._IExpr _1458___mcc_h99 = _source43.dtor_cond;
            RAST._IExpr _1459___mcc_h100 = _source43.dtor_thn;
            RAST._IExpr _1460___mcc_h101 = _source43.dtor_els;
            DAST.Format._IUnOpFormat _1461_format = _1374___mcc_h20;
            RAST._IExpr _1462_underlying = _1373___mcc_h19;
            Dafny.ISequence<Dafny.Rune> _1463_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1463_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1462_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          } else if (_source43.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1464___mcc_h108 = _source43.dtor_optCond;
            RAST._IExpr _1465___mcc_h109 = _source43.dtor_underlying;
            DAST.Format._IUnOpFormat _1466_format = _1374___mcc_h20;
            RAST._IExpr _1467_underlying = _1373___mcc_h19;
            Dafny.ISequence<Dafny.Rune> _1468_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1468_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1467_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          } else if (_source43.is_For) {
            Dafny.ISequence<Dafny.Rune> _1469___mcc_h114 = _source43.dtor_name;
            RAST._IExpr _1470___mcc_h115 = _source43.dtor_range;
            RAST._IExpr _1471___mcc_h116 = _source43.dtor_body;
            DAST.Format._IUnOpFormat _1472_format = _1374___mcc_h20;
            RAST._IExpr _1473_underlying = _1373___mcc_h19;
            Dafny.ISequence<Dafny.Rune> _1474_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1474_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1473_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          } else if (_source43.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1475___mcc_h123 = _source43.dtor_lbl;
            RAST._IExpr _1476___mcc_h124 = _source43.dtor_underlying;
            DAST.Format._IUnOpFormat _1477_format = _1374___mcc_h20;
            RAST._IExpr _1478_underlying = _1373___mcc_h19;
            Dafny.ISequence<Dafny.Rune> _1479_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1479_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1478_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          } else if (_source43.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1480___mcc_h129 = _source43.dtor_optLbl;
            DAST.Format._IUnOpFormat _1481_format = _1374___mcc_h20;
            RAST._IExpr _1482_underlying = _1373___mcc_h19;
            Dafny.ISequence<Dafny.Rune> _1483_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1483_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1482_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          } else if (_source43.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1484___mcc_h132 = _source43.dtor_optLbl;
            DAST.Format._IUnOpFormat _1485_format = _1374___mcc_h20;
            RAST._IExpr _1486_underlying = _1373___mcc_h19;
            Dafny.ISequence<Dafny.Rune> _1487_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1487_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1486_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          } else if (_source43.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1488___mcc_h135 = _source43.dtor_optExpr;
            DAST.Format._IUnOpFormat _1489_format = _1374___mcc_h20;
            RAST._IExpr _1490_underlying = _1373___mcc_h19;
            Dafny.ISequence<Dafny.Rune> _1491_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1491_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1490_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          } else if (_source43.is_Call) {
            RAST._IExpr _1492___mcc_h138 = _source43.dtor_obj;
            Dafny.ISequence<RAST._IType> _1493___mcc_h139 = _source43.dtor_typeParameters;
            Dafny.ISequence<RAST._IExpr> _1494___mcc_h140 = _source43.dtor_arguments;
            DAST.Format._IUnOpFormat _1495_format = _1374___mcc_h20;
            RAST._IExpr _1496_underlying = _1373___mcc_h19;
            Dafny.ISequence<Dafny.Rune> _1497_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1497_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1496_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          } else {
            RAST._IExpr _1498___mcc_h147 = _source43.dtor_underlying;
            DAST.Format._IUnOpFormat _1499_format = _1374___mcc_h20;
            RAST._IExpr _1500_underlying = _1373___mcc_h19;
            Dafny.ISequence<Dafny.Rune> _1501_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1501_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1500_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
        } else {
          DAST.Format._IUnOpFormat _1502_format = _1374___mcc_h20;
          RAST._IExpr _1503_underlying = _1373___mcc_h19;
          Dafny.ISequence<Dafny.Rune> _1504_op = _1372___mcc_h18;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1504_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1503_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
        }
      } else if (_source42.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _1505___mcc_h150 = _source42.dtor_op2;
        RAST._IExpr _1506___mcc_h151 = _source42.dtor_left;
        RAST._IExpr _1507___mcc_h152 = _source42.dtor_right;
        DAST.Format._IBinOpFormat _1508___mcc_h153 = _source42.dtor_format2;
        DAST.Format._IBinOpFormat _1509_format = _1508___mcc_h153;
        RAST._IExpr _1510_right = _1507___mcc_h152;
        RAST._IExpr _1511_left = _1506___mcc_h151;
        Dafny.ISequence<Dafny.Rune> _1512_op2 = _1505___mcc_h150;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_1511_left)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), _1512_op2), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1510_right)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      } else if (_source42.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _1513___mcc_h158 = _source42.dtor_value;
        Dafny.ISequence<Dafny.Rune> _1514_number = _1513___mcc_h158;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::dafny_runtime::BigInt::parse_bytes(b\""), _1514_number), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"));
      } else if (_source42.is_ConversionNum) {
        RAST._IType _1515___mcc_h160 = _source42.dtor_tpe;
        RAST._IExpr _1516___mcc_h161 = _source42.dtor_underlying;
        RAST._IExpr _1517_expr = _1516___mcc_h161;
        RAST._IType _1518_tpe = _1515___mcc_h160;
        if (((((((((((_1518_tpe).is_U8) || ((_1518_tpe).is_U16)) || ((_1518_tpe).is_U32)) || ((_1518_tpe).is_U64)) || ((_1518_tpe).is_U128)) || ((_1518_tpe).is_I8)) || ((_1518_tpe).is_I16)) || ((_1518_tpe).is_I32)) || ((_1518_tpe).is_I64)) || ((_1518_tpe).is_I128)) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("num::ToPrimitive::to_"), (_1518_tpe)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1517_expr)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
        } else {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<b>Unsupported: Numeric conversion to "), (_1518_tpe)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("</b>"));
        }
      } else if (_source42.is_DeclareVar) {
        RAST._IDeclareType _1519___mcc_h164 = _source42.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _1520___mcc_h165 = _source42.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _1521___mcc_h166 = _source42.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _1522___mcc_h167 = _source42.dtor_optRhs;
        Std.Wrappers._IOption<RAST._IExpr> _1523_optExpr = _1522___mcc_h167;
        Std.Wrappers._IOption<RAST._IType> _1524_optType = _1521___mcc_h166;
        Dafny.ISequence<Dafny.Rune> _1525_name = _1520___mcc_h165;
        RAST._IDeclareType _1526_declareType = _1519___mcc_h164;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let "), ((object.Equals(_1526_declareType, RAST.DeclareType.create_MUT())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mut ")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), _1525_name), (((_1524_optType).is_Some) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": "), ((_1524_optType).dtor_value)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), (((_1523_optExpr).is_Some) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "), ((_1523_optExpr).dtor_value)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else if (_source42.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _1527___mcc_h172 = _source42.dtor_name;
        RAST._IExpr _1528___mcc_h173 = _source42.dtor_rhs;
        RAST._IExpr _1529_expr = _1528___mcc_h173;
        Dafny.ISequence<Dafny.Rune> _1530_name = _1527___mcc_h172;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1530_name, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), (_1529_expr)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else if (_source42.is_IfExpr) {
        RAST._IExpr _1531___mcc_h176 = _source42.dtor_cond;
        RAST._IExpr _1532___mcc_h177 = _source42.dtor_thn;
        RAST._IExpr _1533___mcc_h178 = _source42.dtor_els;
        RAST._IExpr _1534_els = _1533___mcc_h178;
        RAST._IExpr _1535_thn = _1532___mcc_h177;
        RAST._IExpr _1536_cond = _1531___mcc_h176;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if "), (_1536_cond)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), ind), RAST.__default.IND), (_1535_thn)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} else {\n")), ind), RAST.__default.IND), (_1534_els)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source42.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _1537___mcc_h182 = _source42.dtor_optCond;
        RAST._IExpr _1538___mcc_h183 = _source42.dtor_underlying;
        RAST._IExpr _1539_underlying = _1538___mcc_h183;
        Std.Wrappers._IOption<RAST._IExpr> _1540_optCond = _1537___mcc_h182;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((System.Func<Std.Wrappers._IOption<RAST._IExpr>, Dafny.ISequence<Dafny.Rune>>)((_source48) => {
          if (_source48.is_None) {
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("loop");
          } else {
            RAST._IExpr _1541___mcc_h210 = _source48.dtor_value;
            RAST._IExpr _1542_c = _1541___mcc_h210;
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while "), (_1542_c)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_pat_let_tv4, RAST.__default.IND)));
          }
        }))(_1540_optCond), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), ind), RAST.__default.IND), (_1539_underlying)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source42.is_For) {
        Dafny.ISequence<Dafny.Rune> _1543___mcc_h186 = _source42.dtor_name;
        RAST._IExpr _1544___mcc_h187 = _source42.dtor_range;
        RAST._IExpr _1545___mcc_h188 = _source42.dtor_body;
        RAST._IExpr _1546_body = _1545___mcc_h188;
        RAST._IExpr _1547_range = _1544___mcc_h187;
        Dafny.ISequence<Dafny.Rune> _1548_name = _1543___mcc_h186;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for "), _1548_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" in ")), (_1547_range)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), ind), RAST.__default.IND), (_1546_body)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source42.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _1549___mcc_h192 = _source42.dtor_lbl;
        RAST._IExpr _1550___mcc_h193 = _source42.dtor_underlying;
        RAST._IExpr _1551_underlying = _1550___mcc_h193;
        Dafny.ISequence<Dafny.Rune> _1552_name = _1549___mcc_h192;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'"), _1552_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_1551_underlying)._ToString(ind));
      } else if (_source42.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1553___mcc_h196 = _source42.dtor_optLbl;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1554_optLbl = _1553___mcc_h196;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source49 = _1554_optLbl;
        if (_source49.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;");
        } else {
          Dafny.ISequence<Dafny.Rune> _1555___mcc_h211 = _source49.dtor_value;
          Dafny.ISequence<Dafny.Rune> _1556_lbl = _1555___mcc_h211;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break '"), _1556_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
        }
      } else if (_source42.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1557___mcc_h198 = _source42.dtor_optLbl;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1558_optLbl = _1557___mcc_h198;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source50 = _1558_optLbl;
        if (_source50.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue;");
        } else {
          Dafny.ISequence<Dafny.Rune> _1559___mcc_h212 = _source50.dtor_value;
          Dafny.ISequence<Dafny.Rune> _1560_lbl = _1559___mcc_h212;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue '"), _1560_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
        }
      } else if (_source42.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _1561___mcc_h200 = _source42.dtor_optExpr;
        Std.Wrappers._IOption<RAST._IExpr> _1562_optExpr = _1561___mcc_h200;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), (((_1562_optExpr).is_Some) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), ((_1562_optExpr).dtor_value)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else if (_source42.is_Call) {
        RAST._IExpr _1563___mcc_h202 = _source42.dtor_obj;
        Dafny.ISequence<RAST._IType> _1564___mcc_h203 = _source42.dtor_typeParameters;
        Dafny.ISequence<RAST._IExpr> _1565___mcc_h204 = _source42.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _1566_args = _1565___mcc_h204;
        Dafny.ISequence<RAST._IType> _1567_tpes = _1564___mcc_h203;
        RAST._IExpr _1568_expr = _1563___mcc_h202;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_1568_expr)._ToString(ind), (((new BigInteger((_1567_tpes).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<"), RAST.__default.SeqToString<RAST._IType>(_1567_tpes, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_1569_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_1570_tpe) => {
          return (_1570_tpe)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_1569_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), RAST.__default.SeqToString<RAST._IExpr>(_1566_args, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>>>((_1571_ind) => ((System.Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>)((_1572_arg) => {
          return (_1572_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_1571_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      } else {
        RAST._IExpr _1573___mcc_h208 = _source42.dtor_underlying;
        RAST._IExpr _1574_underlying = _1573___mcc_h208;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), (_1574_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
    }
    public RAST._IExpr Then(RAST._IExpr rhs2) {
      if ((this).is_StmtExpr) {
        return RAST.Expr.create_StmtExpr((this).dtor_stmt, ((this).dtor_rhs).Then(rhs2));
      } else {
        return RAST.Expr.create_StmtExpr(this, rhs2);
      }
    }
  }
  public class Expr_RawExpr : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Expr_RawExpr(Dafny.ISequence<Dafny.Rune> content) : base() {
      this._content = content;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_RawExpr(_content);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_RawExpr;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.RawExpr";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_Match : Expr {
    public readonly RAST._IExpr _matchee;
    public readonly Dafny.ISequence<RAST._IMatchCase> _cases;
    public Expr_Match(RAST._IExpr matchee, Dafny.ISequence<RAST._IMatchCase> cases) : base() {
      this._matchee = matchee;
      this._cases = cases;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Match(_matchee, _cases);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Match;
      return oth != null && object.Equals(this._matchee, oth._matchee) && object.Equals(this._cases, oth._cases);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._matchee));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cases));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Match";
      s += "(";
      s += Dafny.Helpers.ToString(this._matchee);
      s += ", ";
      s += Dafny.Helpers.ToString(this._cases);
      s += ")";
      return s;
    }
  }
  public class Expr_StmtExpr : Expr {
    public readonly RAST._IExpr _stmt;
    public readonly RAST._IExpr _rhs;
    public Expr_StmtExpr(RAST._IExpr stmt, RAST._IExpr rhs) : base() {
      this._stmt = stmt;
      this._rhs = rhs;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_StmtExpr(_stmt, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_StmtExpr;
      return oth != null && object.Equals(this._stmt, oth._stmt) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._stmt));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.StmtExpr";
      s += "(";
      s += Dafny.Helpers.ToString(this._stmt);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Expr_Block : Expr {
    public readonly RAST._IExpr _underlying;
    public Expr_Block(RAST._IExpr underlying) : base() {
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Block(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Block;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Block";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_StructBuild : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._IAssignIdentifier> _assignments;
    public Expr_StructBuild(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IAssignIdentifier> assignments) : base() {
      this._name = name;
      this._assignments = assignments;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_StructBuild(_name, _assignments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_StructBuild;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._assignments, oth._assignments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._assignments));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.StructBuild";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._assignments);
      s += ")";
      return s;
    }
  }
  public class Expr_Tuple : Expr {
    public readonly Dafny.ISequence<RAST._IExpr> _arguments;
    public Expr_Tuple(Dafny.ISequence<RAST._IExpr> arguments) : base() {
      this._arguments = arguments;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Tuple(_arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Tuple;
      return oth != null && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Expr_UnaryOp : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _op1;
    public readonly RAST._IExpr _underlying;
    public readonly DAST.Format._IUnOpFormat _format;
    public Expr_UnaryOp(Dafny.ISequence<Dafny.Rune> op1, RAST._IExpr underlying, DAST.Format._IUnOpFormat format) : base() {
      this._op1 = op1;
      this._underlying = underlying;
      this._format = format;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_UnaryOp(_op1, _underlying, _format);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_UnaryOp;
      return oth != null && object.Equals(this._op1, oth._op1) && object.Equals(this._underlying, oth._underlying) && object.Equals(this._format, oth._format);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.UnaryOp";
      s += "(";
      s += this._op1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format);
      s += ")";
      return s;
    }
  }
  public class Expr_BinaryOp : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _op2;
    public readonly RAST._IExpr _left;
    public readonly RAST._IExpr _right;
    public readonly DAST.Format._IBinOpFormat _format2;
    public Expr_BinaryOp(Dafny.ISequence<Dafny.Rune> op2, RAST._IExpr left, RAST._IExpr right, DAST.Format._IBinOpFormat format2) : base() {
      this._op2 = op2;
      this._left = left;
      this._right = right;
      this._format2 = format2;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_BinaryOp(_op2, _left, _right, _format2);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_BinaryOp;
      return oth != null && object.Equals(this._op2, oth._op2) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right) && object.Equals(this._format2, oth._format2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op2));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format2));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.BinaryOp";
      s += "(";
      s += this._op2.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format2);
      s += ")";
      return s;
    }
  }
  public class Expr_LiteralInt : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _value;
    public Expr_LiteralInt(Dafny.ISequence<Dafny.Rune> @value) : base() {
      this._value = @value;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_LiteralInt(_value);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_LiteralInt;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.LiteralInt";
      s += "(";
      s += this._value.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_ConversionNum : Expr {
    public readonly RAST._IType _tpe;
    public readonly RAST._IExpr _underlying;
    public Expr_ConversionNum(RAST._IType tpe, RAST._IExpr underlying) : base() {
      this._tpe = tpe;
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_ConversionNum(_tpe, _underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_ConversionNum;
      return oth != null && object.Equals(this._tpe, oth._tpe) && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.ConversionNum";
      s += "(";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_DeclareVar : Expr {
    public readonly RAST._IDeclareType _declareType;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Std.Wrappers._IOption<RAST._IType> _optType;
    public readonly Std.Wrappers._IOption<RAST._IExpr> _optRhs;
    public Expr_DeclareVar(RAST._IDeclareType declareType, Dafny.ISequence<Dafny.Rune> name, Std.Wrappers._IOption<RAST._IType> optType, Std.Wrappers._IOption<RAST._IExpr> optRhs) : base() {
      this._declareType = declareType;
      this._name = name;
      this._optType = optType;
      this._optRhs = optRhs;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_DeclareVar(_declareType, _name, _optType, _optRhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_DeclareVar;
      return oth != null && object.Equals(this._declareType, oth._declareType) && object.Equals(this._name, oth._name) && object.Equals(this._optType, oth._optType) && object.Equals(this._optRhs, oth._optRhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._declareType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optRhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.DeclareVar";
      s += "(";
      s += Dafny.Helpers.ToString(this._declareType);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._optType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._optRhs);
      s += ")";
      return s;
    }
  }
  public class Expr_AssignVar : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IExpr _rhs;
    public Expr_AssignVar(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr rhs) : base() {
      this._name = name;
      this._rhs = rhs;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_AssignVar(_name, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_AssignVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.AssignVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Expr_IfExpr : Expr {
    public readonly RAST._IExpr _cond;
    public readonly RAST._IExpr _thn;
    public readonly RAST._IExpr _els;
    public Expr_IfExpr(RAST._IExpr cond, RAST._IExpr thn, RAST._IExpr els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_IfExpr(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_IfExpr;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.IfExpr";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expr_Loop : Expr {
    public readonly Std.Wrappers._IOption<RAST._IExpr> _optCond;
    public readonly RAST._IExpr _underlying;
    public Expr_Loop(Std.Wrappers._IOption<RAST._IExpr> optCond, RAST._IExpr underlying) : base() {
      this._optCond = optCond;
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Loop(_optCond, _underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Loop;
      return oth != null && object.Equals(this._optCond, oth._optCond) && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optCond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Loop";
      s += "(";
      s += Dafny.Helpers.ToString(this._optCond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_For : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IExpr _range;
    public readonly RAST._IExpr _body;
    public Expr_For(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr range, RAST._IExpr body) : base() {
      this._name = name;
      this._range = range;
      this._body = body;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_For(_name, _range, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_For;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._range, oth._range) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._range));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.For";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._range);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expr_Labelled : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly RAST._IExpr _underlying;
    public Expr_Labelled(Dafny.ISequence<Dafny.Rune> lbl, RAST._IExpr underlying) : base() {
      this._lbl = lbl;
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Labelled(_lbl, _underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Labelled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Labelled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_Break : Expr {
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _optLbl;
    public Expr_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) : base() {
      this._optLbl = optLbl;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Break(_optLbl);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Break;
      return oth != null && object.Equals(this._optLbl, oth._optLbl);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optLbl));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._optLbl);
      s += ")";
      return s;
    }
  }
  public class Expr_Continue : Expr {
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _optLbl;
    public Expr_Continue(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) : base() {
      this._optLbl = optLbl;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Continue(_optLbl);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Continue;
      return oth != null && object.Equals(this._optLbl, oth._optLbl);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optLbl));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Continue";
      s += "(";
      s += Dafny.Helpers.ToString(this._optLbl);
      s += ")";
      return s;
    }
  }
  public class Expr_Return : Expr {
    public readonly Std.Wrappers._IOption<RAST._IExpr> _optExpr;
    public Expr_Return(Std.Wrappers._IOption<RAST._IExpr> optExpr) : base() {
      this._optExpr = optExpr;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Return(_optExpr);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Return;
      return oth != null && object.Equals(this._optExpr, oth._optExpr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optExpr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._optExpr);
      s += ")";
      return s;
    }
  }
  public class Expr_Call : Expr {
    public readonly RAST._IExpr _obj;
    public readonly Dafny.ISequence<RAST._IType> _typeParameters;
    public readonly Dafny.ISequence<RAST._IExpr> _arguments;
    public Expr_Call(RAST._IExpr obj, Dafny.ISequence<RAST._IType> typeParameters, Dafny.ISequence<RAST._IExpr> arguments) : base() {
      this._obj = obj;
      this._typeParameters = typeParameters;
      this._arguments = arguments;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Call(_obj, _typeParameters, _arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Call;
      return oth != null && object.Equals(this._obj, oth._obj) && object.Equals(this._typeParameters, oth._typeParameters) && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._obj));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParameters));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._obj);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParameters);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Expr_Borrow : Expr {
    public readonly RAST._IExpr _underlying;
    public Expr_Borrow(RAST._IExpr underlying) : base() {
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Borrow(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Borrow;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Borrow";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }

  public interface _IFn {
    bool is_Fn { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    Dafny.ISequence<RAST._IFormal> dtor_formals { get; }
    Std.Wrappers._IOption<RAST._IType> dtor_returnType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_body { get; }
    _IFn DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Fn : _IFn {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly Dafny.ISequence<RAST._IFormal> _formals;
    public readonly Std.Wrappers._IOption<RAST._IType> _returnType;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Std.Wrappers._IOption<RAST._IExpr> _body;
    public Fn(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._formals = formals;
      this._returnType = returnType;
      this._where = @where;
      this._body = body;
    }
    public _IFn DowncastClone() {
      if (this is _IFn dt) { return dt; }
      return new Fn(_name, _typeParams, _formals, _returnType, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Fn;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._formals, oth._formals) && object.Equals(this._returnType, oth._returnType) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formals));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._returnType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Fn.Fn";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._formals);
      s += ", ";
      s += Dafny.Helpers.ToString(this._returnType);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly RAST._IFn theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._ITypeParam>.Empty, Dafny.Sequence<RAST._IFormal>.Empty, Std.Wrappers.Option<RAST._IType>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Std.Wrappers.Option<RAST._IExpr>.Default());
    public static RAST._IFn Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFn> _TYPE = new Dafny.TypeDescriptor<RAST._IFn>(RAST.Fn.Default());
    public static Dafny.TypeDescriptor<RAST._IFn> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFn create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      return new Fn(name, typeParams, formals, returnType, @where, body);
    }
    public static _IFn create_Fn(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      return create(name, typeParams, formals, returnType, @where, body);
    }
    public bool is_Fn { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<RAST._IFormal> dtor_formals {
      get {
        return this._formals;
      }
    }
    public Std.Wrappers._IOption<RAST._IType> dtor_returnType {
      get {
        return this._returnType;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        return this._where;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      var _pat_let_tv5 = ind;
      var _pat_let_tv6 = ind;
      var _pat_let_tv7 = ind;
      var _pat_let_tv8 = ind;
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn "), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), RAST.__default.SeqToString<RAST._IFormal>((this).dtor_formals, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>>>((_1575_ind) => ((System.Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>)((_1576_formal) => {
        return (_1576_formal)._ToString(_1575_ind);
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), ((System.Func<Std.Wrappers._IOption<RAST._IType>, Dafny.ISequence<Dafny.Rune>>)((_source51) => {
        if (_source51.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
        } else {
          RAST._IType _1577___mcc_h0 = _source51.dtor_value;
          RAST._IType _1578_t = _1577___mcc_h0;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" -> "), (_1578_t)._ToString(_pat_let_tv5));
        }
      }))((this).dtor_returnType)), ((((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)))), ((System.Func<Std.Wrappers._IOption<RAST._IExpr>, Dafny.ISequence<Dafny.Rune>>)((_source52) => {
        if (_source52.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";");
        } else {
          RAST._IExpr _1579___mcc_h2 = _source52.dtor_value;
          RAST._IExpr _1580_body = _1579___mcc_h2;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"), _pat_let_tv6), RAST.__default.IND), (_1580_body)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_pat_let_tv7, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _pat_let_tv8), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        }
      }))((this).dtor_body));
    }
  }
} // end of namespace RAST
namespace DCOMP {

  public partial class __default {
    public static bool is__tuple__numeric(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(2))) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(BigInteger.One)))) && (((new BigInteger((i).Count)) == (new BigInteger(2))) || (((new BigInteger((i).Count)) == (new BigInteger(3))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(2))))));
    }
    public static bool has__special(Dafny.ISequence<Dafny.Rune> i) {
    TAIL_CALL_START:;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return false;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('#'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        if ((new BigInteger(2)) <= (new BigInteger((i).Count))) {
          if (((i).Select(BigInteger.One)) != (new Dafny.Rune('_'))) {
            return true;
          } else {
            Dafny.ISequence<Dafny.Rune> _in113 = (i).Drop(new BigInteger(2));
            i = _in113;
            goto TAIL_CALL_START;
          }
        } else {
          return true;
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _in114 = (i).Drop(BigInteger.One);
        i = _in114;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> idiomatic__rust(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _1581___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_1581___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        _1581___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_1581___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
        Dafny.ISequence<Dafny.Rune> _in115 = (i).Drop(new BigInteger(2));
        i = _in115;
        goto TAIL_CALL_START;
      } else {
        _1581___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_1581___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in116 = (i).Drop(BigInteger.One);
        i = _in116;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _1582___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_1582___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        _1582___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_1582___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_d"));
        Dafny.ISequence<Dafny.Rune> _in117 = (i).Drop(BigInteger.One);
        i = _in117;
        goto TAIL_CALL_START;
      } else {
        _1582___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_1582___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in118 = (i).Drop(BigInteger.One);
        i = _in118;
        goto TAIL_CALL_START;
      }
    }
    public static bool is__tuple__builder(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(9))) && (((i).Take(new BigInteger(8))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("___hMake")))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(8))))) && (((new BigInteger((i).Count)) == (new BigInteger(9))) || (((new BigInteger((i).Count)) == (new BigInteger(10))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(9))))));
    }
    public static Dafny.ISequence<Dafny.Rune> better__tuple__builder__name(Dafny.ISequence<Dafny.Rune> i) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_T"), (i).Drop(new BigInteger(8)));
    }
    public static bool is__dafny__generated__id(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)).Sign == 1) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && (!(DCOMP.__default.has__special((i).Drop(BigInteger.One))))) && (!((new BigInteger((i).Count)) >= (new BigInteger(2))) || (((i).Select(BigInteger.One)) != (new Dafny.Rune('T'))));
    }
    public static bool is__idiomatic__rust(Dafny.ISequence<Dafny.Rune> i) {
      return (((new BigInteger((i).Count)).Sign == 1) && (!(DCOMP.__default.has__special(i)))) && (!(DCOMP.__default.reserved__rust).Contains(i));
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      if (DCOMP.__default.is__tuple__numeric(i)) {
        return i;
      } else if (DCOMP.__default.is__tuple__builder(i)) {
        return DCOMP.__default.better__tuple__builder__name(i);
      } else if ((DCOMP.__default.reserved__rust).Contains(i)) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), i);
      } else if (DCOMP.__default.is__idiomatic__rust(i)) {
        return DCOMP.__default.idiomatic__rust(i);
      } else if (DCOMP.__default.is__dafny__generated__id(i)) {
        return i;
      } else {
        Dafny.ISequence<Dafny.Rune> _1583_r = DCOMP.__default.replaceDots(i);
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#_"), _1583_r);
      }
    }
    public static Dafny.ISet<Dafny.ISequence<Dafny.Rune>> reserved__rust {
      get {
        return Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("async"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("await"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("const"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("crate"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("else"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("enum"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("loop"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mut"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ref"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("static"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("struct"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("trait"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("union"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsafe"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("use"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("where"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Keywords"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("The"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("abstract"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("become"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("box"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("do"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("final"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("macro"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("override"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("priv"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("try"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("typeof"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsized"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("virtual"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("yield"));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> IND {
      get {
        return RAST.__default.IND;
      }
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static RAST._IMod GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      RAST._IMod s = RAST.Mod.Default();
      Dafny.ISequence<RAST._IModDecl> _1584_body;
      Dafny.ISequence<RAST._IModDecl> _out15;
      _out15 = DCOMP.COMP.GenModuleBody((mod).dtor_body, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
      _1584_body = _out15;
      s = (((mod).dtor_isExtern) ? (RAST.Mod.create_ExternMod(DCOMP.__default.escapeIdent((mod).dtor_name))) : (RAST.Mod.create_Mod(DCOMP.__default.escapeIdent((mod).dtor_name), _1584_body)));
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      s = Dafny.Sequence<RAST._IModDecl>.FromElements();
      BigInteger _1585_i;
      _1585_i = BigInteger.Zero;
      while ((_1585_i) < (new BigInteger((body).Count))) {
        Dafny.ISequence<RAST._IModDecl> _1586_generated = Dafny.Sequence<RAST._IModDecl>.Empty;
        DAST._IModuleItem _source53 = (body).Select(_1585_i);
        if (_source53.is_Module) {
          DAST._IModule _1587___mcc_h0 = _source53.dtor_Module_a0;
          DAST._IModule _1588_m = _1587___mcc_h0;
          RAST._IMod _1589_mm;
          RAST._IMod _out16;
          _out16 = DCOMP.COMP.GenModule(_1588_m, containingPath);
          _1589_mm = _out16;
          _1586_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ModDecl(_1589_mm));
        } else if (_source53.is_Class) {
          DAST._IClass _1590___mcc_h1 = _source53.dtor_Class_a0;
          DAST._IClass _1591_c = _1590___mcc_h1;
          Dafny.ISequence<RAST._IModDecl> _out17;
          _out17 = DCOMP.COMP.GenClass(_1591_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_1591_c).dtor_name)));
          _1586_generated = _out17;
        } else if (_source53.is_Trait) {
          DAST._ITrait _1592___mcc_h2 = _source53.dtor_Trait_a0;
          DAST._ITrait _1593_t = _1592___mcc_h2;
          Dafny.ISequence<Dafny.Rune> _1594_tt;
          Dafny.ISequence<Dafny.Rune> _out18;
          _out18 = DCOMP.COMP.GenTrait(_1593_t, containingPath);
          _1594_tt = _out18;
          _1586_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_RawDecl(_1594_tt));
        } else if (_source53.is_Newtype) {
          DAST._INewtype _1595___mcc_h3 = _source53.dtor_Newtype_a0;
          DAST._INewtype _1596_n = _1595___mcc_h3;
          Dafny.ISequence<RAST._IModDecl> _out19;
          _out19 = DCOMP.COMP.GenNewtype(_1596_n);
          _1586_generated = _out19;
        } else {
          DAST._IDatatype _1597___mcc_h4 = _source53.dtor_Datatype_a0;
          DAST._IDatatype _1598_d = _1597___mcc_h4;
          Dafny.ISequence<RAST._IModDecl> _out20;
          _out20 = DCOMP.COMP.GenDatatype(_1598_d);
          _1586_generated = _out20;
        }
        s = Dafny.Sequence<RAST._IModDecl>.Concat(s, _1586_generated);
        _1585_i = (_1585_i) + (BigInteger.One);
      }
      return s;
    }
    public static void GenTypeParameters(Dafny.ISequence<DAST._IType> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<RAST._ITypeParam> typeParams, out Dafny.ISequence<RAST._ITypeParam> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints) {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<RAST._ITypeParam>.Empty;
      constrainedTypeParams = Dafny.Sequence<RAST._ITypeParam>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      constrainedTypeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _1599_tpI;
      _1599_tpI = BigInteger.Zero;
      if ((new BigInteger((@params).Count)).Sign == 1) {
        while ((_1599_tpI) < (new BigInteger((@params).Count))) {
          DAST._IType _1600_tp;
          _1600_tp = (@params).Select(_1599_tpI);
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_1600_tp));
          RAST._IType _1601_genTp;
          RAST._IType _out21;
          _out21 = DCOMP.COMP.GenType(_1600_tp, false, false);
          _1601_genTp = _out21;
          typeParams = Dafny.Sequence<RAST._ITypeParam>.Concat(typeParams, Dafny.Sequence<RAST._ITypeParam>.FromElements(RAST.TypeParam.create((_1601_genTp)._ToString(DCOMP.__default.IND), Dafny.Sequence<RAST._IType>.FromElements())));
          _1599_tpI = (_1599_tpI) + (BigInteger.One);
        }
      }
      Dafny.ISequence<RAST._IType> _1602_baseConstraints;
      _1602_baseConstraints = Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.CloneTrait, RAST.__default.DafnyPrintTrait, RAST.__default.StaticTrait);
      constrainedTypeParams = RAST.TypeParam.AddConstraintsMultiple(typeParams, _1602_baseConstraints);
    }
    public static Dafny.ISequence<RAST._IModDecl> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _1603_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _1604_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _1605_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _1606_whereConstraints;
      Dafny.ISet<DAST._IType> _out22;
      Dafny.ISequence<RAST._ITypeParam> _out23;
      Dafny.ISequence<RAST._ITypeParam> _out24;
      Dafny.ISequence<Dafny.Rune> _out25;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out22, out _out23, out _out24, out _out25);
      _1603_typeParamsSet = _out22;
      _1604_sTypeParams = _out23;
      _1605_sConstrainedTypeParams = _out24;
      _1606_whereConstraints = _out25;
      Dafny.ISequence<Dafny.Rune> _1607_constrainedTypeParams;
      _1607_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_1605_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      Dafny.ISequence<RAST._IFormal> _1608_fields;
      _1608_fields = Dafny.Sequence<RAST._IFormal>.FromElements();
      Dafny.ISequence<RAST._IAssignIdentifier> _1609_fieldInits;
      _1609_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
      BigInteger _1610_fieldI;
      _1610_fieldI = BigInteger.Zero;
      while ((_1610_fieldI) < (new BigInteger(((c).dtor_fields).Count))) {
        DAST._IField _1611_field;
        _1611_field = ((c).dtor_fields).Select(_1610_fieldI);
        RAST._IType _1612_fieldType;
        RAST._IType _out26;
        _out26 = DCOMP.COMP.GenType(((_1611_field).dtor_formal).dtor_typ, false, false);
        _1612_fieldType = _out26;
        _1608_fields = Dafny.Sequence<RAST._IFormal>.Concat(_1608_fields, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub "), DCOMP.__default.escapeIdent(((_1611_field).dtor_formal).dtor_name)), RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cell::RefCell"), Dafny.Sequence<RAST._IType>.FromElements(_1612_fieldType)))));
        Std.Wrappers._IOption<DAST._IExpression> _source54 = (_1611_field).dtor_defaultValue;
        if (_source54.is_None) {
          {
            _1609_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_1609_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent(((_1611_field).dtor_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cell::RefCell::new(::std::default::Default::default())")))));
          }
        } else {
          DAST._IExpression _1613___mcc_h0 = _source54.dtor_value;
          DAST._IExpression _1614_e = _1613___mcc_h0;
          {
            RAST._IExpr _1615_eStr;
            bool _1616___v11;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1617___v12;
            RAST._IExpr _out27;
            bool _out28;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out29;
            DCOMP.COMP.GenExpr(_1614_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out27, out _out28, out _out29);
            _1615_eStr = _out27;
            _1616___v11 = _out28;
            _1617___v12 = _out29;
            _1609_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_1609_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent(((_1611_field).dtor_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cell::RefCell::new("), (_1615_eStr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))))));
          }
        }
        _1610_fieldI = (_1610_fieldI) + (BigInteger.One);
      }
      BigInteger _1618_typeParamI;
      _1618_typeParamI = BigInteger.Zero;
      while ((_1618_typeParamI) < (new BigInteger(((c).dtor_typeParams).Count))) {
        RAST._IType _1619_tpeGen;
        RAST._IType _out30;
        _out30 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_1618_typeParamI), false, false);
        _1619_tpeGen = _out30;
        _1608_fields = Dafny.Sequence<RAST._IFormal>.Concat(_1608_fields, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_1618_typeParamI)), RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData"), Dafny.Sequence<RAST._IType>.FromElements(_1619_tpeGen)))));
        _1609_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_1609_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_1618_typeParamI)), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData")))));
        _1618_typeParamI = (_1618_typeParamI) + (BigInteger.One);
      }
      RAST._IStruct _1620_struct;
      _1620_struct = RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), DCOMP.__default.escapeIdent((c).dtor_name), _1604_sTypeParams, RAST.Formals.create_NamedFormals(_1608_fields));
      Dafny.ISequence<RAST._IType> _1621_typeParamsAsTypes;
      _1621_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_1622_typeParam) => {
        return RAST.__default.RawType((_1622_typeParam).dtor_content);
      })), _1604_sTypeParams);
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(_1620_struct));
      Dafny.ISequence<RAST._IImplMember> _1623_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> _1624_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out31;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> _out32;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(path)), _1603_typeParamsSet, out _out31, out _out32);
      _1623_implBodyRaw = _out31;
      _1624_traitBodies = _out32;
      Dafny.ISequence<RAST._IImplMember> _1625_implBody;
      _1625_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PUB, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(DCOMP.__default.escapeIdent((c).dtor_name), _1609_fieldInits))))), _1623_implBodyRaw);
      RAST._IImpl _1626_i;
      _1626_i = RAST.Impl.create_Impl(_1605_sConstrainedTypeParams, RAST.Type.create_TypeApp(DCOMP.__default.escapeIdent((c).dtor_name), _1621_typeParamsAsTypes), _1606_whereConstraints, _1625_implBody);
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_1626_i)));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _1627_i;
        _1627_i = BigInteger.Zero;
        while ((_1627_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _1628_superClass;
          _1628_superClass = ((c).dtor_superClasses).Select(_1627_i);
          DAST._IType _source55 = _1628_superClass;
          if (_source55.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1629___mcc_h1 = _source55.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _1630___mcc_h2 = _source55.dtor_typeArgs;
            DAST._IResolvedType _1631___mcc_h3 = _source55.dtor_resolved;
            DAST._IResolvedType _source56 = _1631___mcc_h3;
            if (_source56.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1632___mcc_h7 = _source56.dtor_path;
            } else if (_source56.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1633___mcc_h9 = _source56.dtor_path;
              Dafny.ISequence<DAST._IType> _1634_typeArgs = _1630___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1635_traitPath = _1629___mcc_h1;
              {
                Dafny.ISequence<Dafny.Rune> _1636_pathStr;
                Dafny.ISequence<Dafny.Rune> _out33;
                _out33 = DCOMP.COMP.GenPath(_1635_traitPath);
                _1636_pathStr = _out33;
                Dafny.ISequence<RAST._IType> _1637_typeArgs;
                Dafny.ISequence<RAST._IType> _out34;
                _out34 = DCOMP.COMP.GenTypeArgs(_1634_typeArgs, false, false);
                _1637_typeArgs = _out34;
                Dafny.ISequence<RAST._IImplMember> _1638_body;
                _1638_body = Dafny.Sequence<RAST._IImplMember>.FromElements();
                if ((_1624_traitBodies).Contains(_1635_traitPath)) {
                  _1638_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(_1624_traitBodies, _1635_traitPath);
                }
                Dafny.ISequence<Dafny.Rune> _1639_genSelfPath;
                Dafny.ISequence<Dafny.Rune> _out35;
                _out35 = DCOMP.COMP.GenPath(path);
                _1639_genSelfPath = _out35;
                RAST._IModDecl _1640_x;
                _1640_x = RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_1605_sConstrainedTypeParams, RAST.Type.create_TypeApp(_1636_pathStr, _1637_typeArgs), RAST.__default.Rc(RAST.Type.create_TypeApp(_1639_genSelfPath, _1621_typeParamsAsTypes)), _1606_whereConstraints, _1638_body));
                s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(_1640_x));
              }
            } else {
              DAST._IType _1641___mcc_h11 = _source56.dtor_baseType;
              DAST._INewtypeRange _1642___mcc_h12 = _source56.dtor_range;
              bool _1643___mcc_h13 = _source56.dtor_erase;
            }
          } else if (_source55.is_Nullable) {
            DAST._IType _1644___mcc_h17 = _source55.dtor_Nullable_a0;
          } else if (_source55.is_Tuple) {
            Dafny.ISequence<DAST._IType> _1645___mcc_h19 = _source55.dtor_Tuple_a0;
          } else if (_source55.is_Array) {
            DAST._IType _1646___mcc_h21 = _source55.dtor_element;
            BigInteger _1647___mcc_h22 = _source55.dtor_dims;
          } else if (_source55.is_Seq) {
            DAST._IType _1648___mcc_h25 = _source55.dtor_element;
          } else if (_source55.is_Set) {
            DAST._IType _1649___mcc_h27 = _source55.dtor_element;
          } else if (_source55.is_Multiset) {
            DAST._IType _1650___mcc_h29 = _source55.dtor_element;
          } else if (_source55.is_Map) {
            DAST._IType _1651___mcc_h31 = _source55.dtor_key;
            DAST._IType _1652___mcc_h32 = _source55.dtor_value;
          } else if (_source55.is_Arrow) {
            Dafny.ISequence<DAST._IType> _1653___mcc_h35 = _source55.dtor_args;
            DAST._IType _1654___mcc_h36 = _source55.dtor_result;
          } else if (_source55.is_Primitive) {
            DAST._IPrimitive _1655___mcc_h39 = _source55.dtor_Primitive_a0;
          } else if (_source55.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _1656___mcc_h41 = _source55.dtor_Passthrough_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _1657___mcc_h43 = _source55.dtor_TypeArg_a0;
          }
          _1627_i = (_1627_i) + (BigInteger.One);
        }
      }
      RAST._IImpl _1658_d;
      _1658_d = RAST.Impl.create_ImplFor(_1605_sConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(DCOMP.__default.escapeIdent((c).dtor_name), _1621_typeParamsAsTypes), _1606_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new()"))))))));
      Dafny.ISequence<RAST._IModDecl> _1659_defaultImpl;
      _1659_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_1658_d));
      RAST._IImpl _1660_p;
      _1660_p = RAST.Impl.create_ImplFor(_1605_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(DCOMP.__default.escapeIdent((c).dtor_name), _1621_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), ((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")"))))))));
      Dafny.ISequence<RAST._IModDecl> _1661_printImpl;
      _1661_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_1660_p));
      RAST._IImpl _1662_pp;
      _1662_pp = RAST.Impl.create_ImplFor(_1604_sTypeParams, RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cmp::PartialEq")), RAST.Type.create_TypeApp(DCOMP.__default.escapeIdent((c).dtor_name), _1621_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("eq"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("other"), RAST.__default.Self)), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ptr::eq(self, other)")))))));
      Dafny.ISequence<RAST._IModDecl> _1663_ptrPartialEqImpl;
      _1663_ptrPartialEqImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_1662_pp));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(s, _1659_defaultImpl), _1661_printImpl), _1663_ptrPartialEqImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _1664_typeParamsSet;
      _1664_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<RAST._IType> _1665_typeParams;
      _1665_typeParams = Dafny.Sequence<RAST._IType>.FromElements();
      BigInteger _1666_tpI;
      _1666_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        while ((_1666_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._IType _1667_tp;
          _1667_tp = ((t).dtor_typeParams).Select(_1666_tpI);
          _1664_typeParamsSet = Dafny.Set<DAST._IType>.Union(_1664_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_1667_tp));
          RAST._IType _1668_genTp;
          RAST._IType _out36;
          _out36 = DCOMP.COMP.GenType(_1667_tp, false, false);
          _1668_genTp = _out36;
          _1665_typeParams = Dafny.Sequence<RAST._IType>.Concat(_1665_typeParams, Dafny.Sequence<RAST._IType>.FromElements(_1668_genTp));
          _1666_tpI = (_1666_tpI) + (BigInteger.One);
        }
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1669_fullPath;
      _1669_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<RAST._IImplMember> _1670_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> _1671___v15;
      Dafny.ISequence<RAST._IImplMember> _out37;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> _out38;
      DCOMP.COMP.GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_1669_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_1669_fullPath)), _1664_typeParamsSet, out _out37, out _out38);
      _1670_implBody = _out37;
      _1671___v15 = _out38;
      s = (RAST.ModDecl.create_TraitDecl(RAST.Trait.create(Dafny.Sequence<RAST._ITypeParam>.FromElements(), RAST.Type.create_TypeApp(DCOMP.__default.escapeIdent((t).dtor_name), _1665_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), _1670_implBody)))._ToString(DCOMP.__default.IND);
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenNewtype(DAST._INewtype c) {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _1672_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _1673_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _1674_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _1675_whereConstraints;
      Dafny.ISet<DAST._IType> _out39;
      Dafny.ISequence<RAST._ITypeParam> _out40;
      Dafny.ISequence<RAST._ITypeParam> _out41;
      Dafny.ISequence<Dafny.Rune> _out42;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out39, out _out40, out _out41, out _out42);
      _1672_typeParamsSet = _out39;
      _1673_sTypeParams = _out40;
      _1674_sConstrainedTypeParams = _out41;
      _1675_whereConstraints = _out42;
      Dafny.ISequence<RAST._IType> _1676_typeParamsAsTypes;
      _1676_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_1677_t) => {
        return RAST.__default.RawType((_1677_t).dtor_content);
      })), _1673_sTypeParams);
      Dafny.ISequence<Dafny.Rune> _1678_constrainedTypeParams;
      _1678_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_1674_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      RAST._IType _1679_underlyingType = RAST.Type.Default();
      Std.Wrappers._IOption<RAST._IType> _source57 = DCOMP.COMP.NewtypeToRustType((c).dtor_base, (c).dtor_range);
      if (_source57.is_None) {
        RAST._IType _out43;
        _out43 = DCOMP.COMP.GenType((c).dtor_base, false, false);
        _1679_underlyingType = _out43;
      } else {
        RAST._IType _1680___mcc_h0 = _source57.dtor_value;
        RAST._IType _1681_v = _1680___mcc_h0;
        _1679_underlyingType = _1681_v;
      }
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[repr(transparent)]")), DCOMP.__default.escapeIdent((c).dtor_name), _1673_sTypeParams, RAST.Formals.create_NamelessFormals(Dafny.Sequence<RAST._INamelessFormal>.FromElements(RAST.NamelessFormal.create(RAST.__default.PUB, _1679_underlyingType))))));
      Dafny.ISequence<Dafny.Rune> _1682_fnBody;
      _1682_fnBody = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Std.Wrappers._IOption<DAST._IExpression> _source58 = (c).dtor_witnessExpr;
      if (_source58.is_None) {
        {
          _1682_fnBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1682_fnBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(::std::default::Default::default())"));
        }
      } else {
        DAST._IExpression _1683___mcc_h1 = _source58.dtor_value;
        DAST._IExpression _1684_e = _1683___mcc_h1;
        {
          RAST._IExpr _1685_eStr;
          bool _1686___v16;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1687___v17;
          RAST._IExpr _out44;
          bool _out45;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out46;
          DCOMP.COMP.GenExpr(_1684_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out44, out _out45, out _out46);
          _1685_eStr = _out44;
          _1686___v16 = _out45;
          _1687___v17 = _out46;
          _1682_fnBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1682_fnBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1685_eStr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
        }
      }
      RAST._IImplMember _1688_body;
      _1688_body = RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(_1682_fnBody))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_1674_sConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(DCOMP.__default.escapeIdent((c).dtor_name), _1676_typeParamsAsTypes), _1675_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(_1688_body)))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_1674_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(DCOMP.__default.escapeIdent((c).dtor_name), _1676_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)"))))))))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_1674_sConstrainedTypeParams, RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref")), RAST.Type.create_TypeApp(DCOMP.__default.escapeIdent((c).dtor_name), _1676_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = "), (_1679_underlyingType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"))), RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("deref"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&Self::Target"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0"))))))))));
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenDatatype(DAST._IDatatype c) {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _1689_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _1690_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _1691_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _1692_whereConstraints;
      Dafny.ISet<DAST._IType> _out47;
      Dafny.ISequence<RAST._ITypeParam> _out48;
      Dafny.ISequence<RAST._ITypeParam> _out49;
      Dafny.ISequence<Dafny.Rune> _out50;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out47, out _out48, out _out49, out _out50);
      _1689_typeParamsSet = _out47;
      _1690_sTypeParams = _out48;
      _1691_sConstrainedTypeParams = _out49;
      _1692_whereConstraints = _out50;
      Dafny.ISequence<RAST._IType> _1693_typeParamsAsTypes;
      _1693_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_1694_t) => {
        return RAST.__default.RawType((_1694_t).dtor_content);
      })), _1690_sTypeParams);
      Dafny.ISequence<Dafny.Rune> _1695_constrainedTypeParams;
      _1695_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_1691_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.IND, DCOMP.__default.IND));
      Dafny.ISequence<RAST._IEnumCase> _1696_ctors;
      _1696_ctors = Dafny.Sequence<RAST._IEnumCase>.FromElements();
      BigInteger _1697_i;
      _1697_i = BigInteger.Zero;
      while ((_1697_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _1698_ctor;
        _1698_ctor = ((c).dtor_ctors).Select(_1697_i);
        Dafny.ISequence<RAST._IFormal> _1699_ctorArgs;
        _1699_ctorArgs = Dafny.Sequence<RAST._IFormal>.FromElements();
        BigInteger _1700_j;
        _1700_j = BigInteger.Zero;
        while ((_1700_j) < (new BigInteger(((_1698_ctor).dtor_args).Count))) {
          DAST._IFormal _1701_formal;
          _1701_formal = ((_1698_ctor).dtor_args).Select(_1700_j);
          RAST._IType _1702_formalType;
          RAST._IType _out51;
          _out51 = DCOMP.COMP.GenType((_1701_formal).dtor_typ, false, false);
          _1702_formalType = _out51;
          if ((c).dtor_isCo) {
            _1699_ctorArgs = Dafny.Sequence<RAST._IFormal>.Concat(_1699_ctorArgs, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_1701_formal).dtor_name), RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::LazyFieldWrapper"), Dafny.Sequence<RAST._IType>.FromElements(_1702_formalType)))));
          } else {
            _1699_ctorArgs = Dafny.Sequence<RAST._IFormal>.Concat(_1699_ctorArgs, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_1701_formal).dtor_name), _1702_formalType)));
          }
          _1700_j = (_1700_j) + (BigInteger.One);
        }
        _1696_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_1696_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(DCOMP.__default.escapeIdent((_1698_ctor).dtor_name), RAST.Formals.create_NamedFormals(_1699_ctorArgs))));
        _1697_i = (_1697_i) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1703_selfPath;
      _1703_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<RAST._IImplMember> _1704_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> _1705_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out52;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> _out53;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(_1703_selfPath)), _1689_typeParamsSet, out _out52, out _out53);
      _1704_implBodyRaw = _out52;
      _1705_traitBodies = _out53;
      Dafny.ISequence<RAST._IImplMember> _1706_implBody;
      _1706_implBody = _1704_implBodyRaw;
      _1697_i = BigInteger.Zero;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1707_emittedFields;
      _1707_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      while ((_1697_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _1708_ctor;
        _1708_ctor = ((c).dtor_ctors).Select(_1697_i);
        BigInteger _1709_j;
        _1709_j = BigInteger.Zero;
        while ((_1709_j) < (new BigInteger(((_1708_ctor).dtor_args).Count))) {
          DAST._IFormal _1710_formal;
          _1710_formal = ((_1708_ctor).dtor_args).Select(_1709_j);
          if (!((_1707_emittedFields).Contains((_1710_formal).dtor_name))) {
            _1707_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_1707_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_1710_formal).dtor_name));
            RAST._IType _1711_formalType;
            RAST._IType _out54;
            _out54 = DCOMP.COMP.GenType((_1710_formal).dtor_typ, false, false);
            _1711_formalType = _out54;
            Dafny.ISequence<RAST._IMatchCase> _1712_cases;
            _1712_cases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
            BigInteger _1713_k;
            _1713_k = BigInteger.Zero;
            while ((_1713_k) < (new BigInteger(((c).dtor_ctors).Count))) {
              DAST._IDatatypeCtor _1714_ctor2;
              _1714_ctor2 = ((c).dtor_ctors).Select(_1713_k);
              Dafny.ISequence<Dafny.Rune> _1715_pattern;
              _1715_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_1714_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              Dafny.ISequence<Dafny.Rune> _1716_rhs = Dafny.Sequence<Dafny.Rune>.Empty;
              BigInteger _1717_l;
              _1717_l = BigInteger.Zero;
              bool _1718_hasMatchingField;
              _1718_hasMatchingField = false;
              while ((_1717_l) < (new BigInteger(((_1714_ctor2).dtor_args).Count))) {
                DAST._IFormal _1719_formal2;
                _1719_formal2 = ((_1714_ctor2).dtor_args).Select(_1717_l);
                if (((_1710_formal).dtor_name).Equals((_1719_formal2).dtor_name)) {
                  _1718_hasMatchingField = true;
                }
                _1715_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1715_pattern, DCOMP.__default.escapeIdent((_1719_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                _1717_l = (_1717_l) + (BigInteger.One);
              }
              _1715_pattern = Dafny.Sequence<Dafny.Rune>.Concat(_1715_pattern, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
              if (_1718_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _1716_rhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&"), DCOMP.__default.escapeIdent((_1710_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0)"));
                } else {
                  _1716_rhs = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_1710_formal).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              } else {
                _1716_rhs = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"field does not exist on this variant\")");
              }
              RAST._IMatchCase _1720_ctorMatch;
              _1720_ctorMatch = RAST.MatchCase.create(_1715_pattern, RAST.Expr.create_RawExpr(_1716_rhs));
              _1712_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_1712_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(_1720_ctorMatch));
              _1713_k = (_1713_k) + (BigInteger.One);
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _1712_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_1712_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!()")))));
            }
            RAST._IExpr _1721_methodBody;
            _1721_methodBody = RAST.Expr.create_Match(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")), _1712_cases);
            _1706_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(_1706_implBody, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PUB, RAST.Fn.create(DCOMP.__default.escapeIdent((_1710_formal).dtor_name), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_Borrowed(_1711_formalType)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_1721_methodBody)))));
          }
          _1709_j = (_1709_j) + (BigInteger.One);
        }
        _1697_i = (_1697_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        BigInteger _1722_typeI;
        _1722_typeI = BigInteger.Zero;
        Dafny.ISequence<RAST._IType> _1723_types;
        _1723_types = Dafny.Sequence<RAST._IType>.FromElements();
        while ((_1722_typeI) < (new BigInteger(((c).dtor_typeParams).Count))) {
          RAST._IType _1724_genTp;
          RAST._IType _out55;
          _out55 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_1722_typeI), false, false);
          _1724_genTp = _out55;
          _1723_types = Dafny.Sequence<RAST._IType>.Concat(_1723_types, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData::"), Dafny.Sequence<RAST._IType>.FromElements(_1724_genTp))));
          _1722_typeI = (_1722_typeI) + (BigInteger.One);
        }
        _1696_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_1696_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant"), RAST.Formals.create_NamelessFormals(Std.Collections.Seq.__default.Map<RAST._IType, RAST._INamelessFormal>(((System.Func<RAST._IType, RAST._INamelessFormal>)((_1725_tpe) => {
          return RAST.NamelessFormal.create(RAST.__default.PRIV, _1725_tpe);
        })), _1723_types)))));
      }
      Dafny.ISequence<RAST._IModDecl> _1726_enumBody;
      _1726_enumBody = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_EnumDecl(RAST.Enum.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq)]")), DCOMP.__default.escapeIdent((c).dtor_name), _1690_sTypeParams, _1696_ctors)), RAST.ModDecl.create_ImplDecl(RAST.Impl.create_Impl(_1691_sConstrainedTypeParams, RAST.Type.create_TypeApp(DCOMP.__default.escapeIdent((c).dtor_name), _1693_typeParamsAsTypes), _1692_whereConstraints, _1706_implBody)));
      _1697_i = BigInteger.Zero;
      Dafny.ISequence<RAST._IMatchCase> _1727_printImplBodyCases;
      _1727_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
      while ((_1697_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _1728_ctor;
        _1728_ctor = ((c).dtor_ctors).Select(_1697_i);
        Dafny.ISequence<Dafny.Rune> _1729_ctorMatch;
        _1729_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_1728_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _1730_modulePrefix;
        _1730_modulePrefix = (((((c).dtor_enclosingModule)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(((c).dtor_enclosingModule), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        RAST._IExpr _1731_printRhs;
        _1731_printRhs = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), _1730_modulePrefix), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent((_1728_ctor).dtor_name)), (((_1728_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?")))));
        BigInteger _1732_j;
        _1732_j = BigInteger.Zero;
        while ((_1732_j) < (new BigInteger(((_1728_ctor).dtor_args).Count))) {
          DAST._IFormal _1733_formal;
          _1733_formal = ((_1728_ctor).dtor_args).Select(_1732_j);
          _1729_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1729_ctorMatch, DCOMP.__default.escapeIdent((_1733_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          if ((_1732_j).Sign == 1) {
            _1731_printRhs = (_1731_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \", \")?")));
          }
          _1731_printRhs = (_1731_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print("), DCOMP.__default.escapeIdent((_1733_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", _formatter, false)?"))));
          _1732_j = (_1732_j) + (BigInteger.One);
        }
        _1729_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_1729_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_1728_ctor).dtor_hasAnyArgs) {
          _1731_printRhs = (_1731_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \")\")?")));
        }
        _1731_printRhs = (_1731_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Ok(())")));
        _1727_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_1727_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _1729_ctorMatch), RAST.Expr.create_Block(_1731_printRhs))));
        _1697_i = (_1697_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _1727_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_1727_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{panic!()}")))));
      }
      RAST._IExpr _1734_printImplBody;
      _1734_printImplBody = RAST.Expr.create_Match(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")), _1727_printImplBodyCases);
      Dafny.ISequence<RAST._IModDecl> _1735_printImpl;
      _1735_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_1691_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(DCOMP.__default.escapeIdent((c).dtor_name), _1693_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_1734_printImplBody)))))));
      Dafny.ISequence<RAST._IModDecl> _1736_defaultImpl;
      _1736_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements();
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        _1697_i = BigInteger.Zero;
        Dafny.ISequence<Dafny.Rune> _1737_structName;
        _1737_structName = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name));
        Dafny.ISequence<RAST._IAssignIdentifier> _1738_structAssignments;
        _1738_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
        while ((_1697_i) < (new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count))) {
          DAST._IFormal _1739_formal;
          _1739_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_1697_i);
          _1738_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_1738_structAssignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent((_1739_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default::default()")))));
          _1697_i = (_1697_i) + (BigInteger.One);
        }
        Dafny.ISequence<RAST._ITypeParam> _1740_defaultConstrainedTypeParams;
        _1740_defaultConstrainedTypeParams = RAST.TypeParam.AddConstraintsMultiple(_1690_sTypeParams, Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.DefaultTrait));
        _1736_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_1740_defaultConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(DCOMP.__default.escapeIdent((c).dtor_name), _1693_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(_1737_structName, _1738_structAssignments))))))));
      }
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(_1726_enumBody, _1735_printImpl), _1736_defaultImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      if ((new BigInteger((p).Count)).Sign == 0) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
        return s;
      } else {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super::");
        BigInteger _1741_i;
        _1741_i = BigInteger.Zero;
        while ((_1741_i) < (new BigInteger((p).Count))) {
          if ((_1741_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(((p).Select(_1741_i))));
          _1741_i = (_1741_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static Dafny.ISequence<RAST._IType> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn) {
      Dafny.ISequence<RAST._IType> s = Dafny.Sequence<RAST._IType>.Empty;
      s = Dafny.Sequence<RAST._IType>.FromElements();
      if ((new BigInteger((args).Count)).Sign == 1) {
        BigInteger _1742_i;
        _1742_i = BigInteger.Zero;
        while ((_1742_i) < (new BigInteger((args).Count))) {
          RAST._IType _1743_genTp;
          RAST._IType _out56;
          _out56 = DCOMP.COMP.GenType((args).Select(_1742_i), inBinding, inFn);
          _1743_genTp = _out56;
          s = Dafny.Sequence<RAST._IType>.Concat(s, Dafny.Sequence<RAST._IType>.FromElements(_1743_genTp));
          _1742_i = (_1742_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static RAST._IType GenType(DAST._IType c, bool inBinding, bool inFn) {
      RAST._IType s = RAST.Type.Default();
      DAST._IType _source59 = c;
      if (_source59.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1744___mcc_h0 = _source59.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _1745___mcc_h1 = _source59.dtor_typeArgs;
        DAST._IResolvedType _1746___mcc_h2 = _source59.dtor_resolved;
        DAST._IResolvedType _1747_resolved = _1746___mcc_h2;
        Dafny.ISequence<DAST._IType> _1748_args = _1745___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1749_p = _1744___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _1750_t;
          Dafny.ISequence<Dafny.Rune> _out57;
          _out57 = DCOMP.COMP.GenPath(_1749_p);
          _1750_t = _out57;
          s = RAST.Type.create_TypeApp(_1750_t, Dafny.Sequence<RAST._IType>.FromElements());
          Dafny.ISequence<RAST._IType> _1751_typeArgs;
          Dafny.ISequence<RAST._IType> _out58;
          _out58 = DCOMP.COMP.GenTypeArgs(_1748_args, inBinding, inFn);
          _1751_typeArgs = _out58;
          var _pat_let_tv9 = _1751_typeArgs;
          s = Dafny.Helpers.Let<RAST._IType, RAST._IType>(s, _pat_let6_0 => Dafny.Helpers.Let<RAST._IType, RAST._IType>(_pat_let6_0, _1752_dt__update__tmp_h0 => Dafny.Helpers.Let<Dafny.ISequence<RAST._IType>, RAST._IType>(_pat_let_tv9, _pat_let7_0 => Dafny.Helpers.Let<Dafny.ISequence<RAST._IType>, RAST._IType>(_pat_let7_0, _1753_dt__update_harguments_h0 => (((_1752_dt__update__tmp_h0).is_TypeApp) ? (RAST.Type.create_TypeApp((_1752_dt__update__tmp_h0).dtor_baseName, _1753_dt__update_harguments_h0)) : ((((_1752_dt__update__tmp_h0).is_TupleType) ? (RAST.Type.create_TupleType(_1753_dt__update_harguments_h0)) : (RAST.Type.create_FnType(_1753_dt__update_harguments_h0, (_1752_dt__update__tmp_h0).dtor_returnType)))))))));
          DAST._IResolvedType _source60 = _1747_resolved;
          if (_source60.is_Datatype) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1754___mcc_h18 = _source60.dtor_path;
            {
              s = RAST.__default.Rc(s);
            }
          } else if (_source60.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1755___mcc_h19 = _source60.dtor_path;
            {
              if ((_1749_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
                s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<dyn ::std::any::Any>"));
              } else {
                if (inBinding) {
                  s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
                } else {
                  s = RAST.Type.create_ImplType(s);
                }
              }
            }
          } else {
            DAST._IType _1756___mcc_h20 = _source60.dtor_baseType;
            DAST._INewtypeRange _1757___mcc_h21 = _source60.dtor_range;
            bool _1758___mcc_h22 = _source60.dtor_erase;
            bool _1759_erased = _1758___mcc_h22;
            DAST._INewtypeRange _1760_range = _1757___mcc_h21;
            DAST._IType _1761_t = _1756___mcc_h20;
            {
              if (_1759_erased) {
                Std.Wrappers._IOption<RAST._IType> _source61 = DCOMP.COMP.NewtypeToRustType(_1761_t, _1760_range);
                if (_source61.is_None) {
                } else {
                  RAST._IType _1762___mcc_h23 = _source61.dtor_value;
                  RAST._IType _1763_v = _1762___mcc_h23;
                  s = _1763_v;
                }
              }
            }
          }
        }
      } else if (_source59.is_Nullable) {
        DAST._IType _1764___mcc_h3 = _source59.dtor_Nullable_a0;
        DAST._IType _1765_inner = _1764___mcc_h3;
        {
          RAST._IType _1766_innerExpr;
          RAST._IType _out59;
          _out59 = DCOMP.COMP.GenType(_1765_inner, inBinding, inFn);
          _1766_innerExpr = _out59;
          s = RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option"), Dafny.Sequence<RAST._IType>.FromElements(_1766_innerExpr));
        }
      } else if (_source59.is_Tuple) {
        Dafny.ISequence<DAST._IType> _1767___mcc_h4 = _source59.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IType> _1768_types = _1767___mcc_h4;
        {
          Dafny.ISequence<RAST._IType> _1769_args;
          _1769_args = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _1770_i;
          _1770_i = BigInteger.Zero;
          while ((_1770_i) < (new BigInteger((_1768_types).Count))) {
            RAST._IType _1771_generated;
            RAST._IType _out60;
            _out60 = DCOMP.COMP.GenType((_1768_types).Select(_1770_i), inBinding, inFn);
            _1771_generated = _out60;
            _1769_args = Dafny.Sequence<RAST._IType>.Concat(_1769_args, Dafny.Sequence<RAST._IType>.FromElements(_1771_generated));
            _1770_i = (_1770_i) + (BigInteger.One);
          }
          s = RAST.Type.create_TupleType(_1769_args);
        }
      } else if (_source59.is_Array) {
        DAST._IType _1772___mcc_h5 = _source59.dtor_element;
        BigInteger _1773___mcc_h6 = _source59.dtor_dims;
        BigInteger _1774_dims = _1773___mcc_h6;
        DAST._IType _1775_element = _1772___mcc_h5;
        {
          RAST._IType _1776_elem;
          RAST._IType _out61;
          _out61 = DCOMP.COMP.GenType(_1775_element, inBinding, inFn);
          _1776_elem = _out61;
          s = _1776_elem;
          BigInteger _1777_i;
          _1777_i = BigInteger.Zero;
          while ((_1777_i) < (_1774_dims)) {
            s = RAST.__default.Rc(RAST.__default.RefCell(RAST.__default.Vec(s)));
            _1777_i = (_1777_i) + (BigInteger.One);
          }
        }
      } else if (_source59.is_Seq) {
        DAST._IType _1778___mcc_h7 = _source59.dtor_element;
        DAST._IType _1779_element = _1778___mcc_h7;
        {
          RAST._IType _1780_elem;
          RAST._IType _out62;
          _out62 = DCOMP.COMP.GenType(_1779_element, inBinding, inFn);
          _1780_elem = _out62;
          s = RAST.__default.Vec(_1780_elem);
        }
      } else if (_source59.is_Set) {
        DAST._IType _1781___mcc_h8 = _source59.dtor_element;
        DAST._IType _1782_element = _1781___mcc_h8;
        {
          RAST._IType _1783_elem;
          RAST._IType _out63;
          _out63 = DCOMP.COMP.GenType(_1782_element, inBinding, inFn);
          _1783_elem = _out63;
          s = RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashSet"), Dafny.Sequence<RAST._IType>.FromElements(_1783_elem));
        }
      } else if (_source59.is_Multiset) {
        DAST._IType _1784___mcc_h9 = _source59.dtor_element;
        DAST._IType _1785_element = _1784___mcc_h9;
        {
          RAST._IType _1786_elem;
          RAST._IType _out64;
          _out64 = DCOMP.COMP.GenType(_1785_element, inBinding, inFn);
          _1786_elem = _out64;
          s = RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap"), Dafny.Sequence<RAST._IType>.FromElements(_1786_elem, RAST.Type.create_U64()));
        }
      } else if (_source59.is_Map) {
        DAST._IType _1787___mcc_h10 = _source59.dtor_key;
        DAST._IType _1788___mcc_h11 = _source59.dtor_value;
        DAST._IType _1789_value = _1788___mcc_h11;
        DAST._IType _1790_key = _1787___mcc_h10;
        {
          RAST._IType _1791_keyType;
          RAST._IType _out65;
          _out65 = DCOMP.COMP.GenType(_1790_key, inBinding, inFn);
          _1791_keyType = _out65;
          RAST._IType _1792_valueType;
          RAST._IType _out66;
          _out66 = DCOMP.COMP.GenType(_1789_value, inBinding, inFn);
          _1792_valueType = _out66;
          s = RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap"), Dafny.Sequence<RAST._IType>.FromElements(_1791_keyType, _1792_valueType));
        }
      } else if (_source59.is_Arrow) {
        Dafny.ISequence<DAST._IType> _1793___mcc_h12 = _source59.dtor_args;
        DAST._IType _1794___mcc_h13 = _source59.dtor_result;
        DAST._IType _1795_result = _1794___mcc_h13;
        Dafny.ISequence<DAST._IType> _1796_args = _1793___mcc_h12;
        {
          Dafny.ISequence<RAST._IType> _1797_argTypes;
          _1797_argTypes = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _1798_i;
          _1798_i = BigInteger.Zero;
          while ((_1798_i) < (new BigInteger((_1796_args).Count))) {
            RAST._IType _1799_generated;
            RAST._IType _out67;
            _out67 = DCOMP.COMP.GenType((_1796_args).Select(_1798_i), inBinding, true);
            _1799_generated = _out67;
            _1797_argTypes = Dafny.Sequence<RAST._IType>.Concat(_1797_argTypes, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_Borrowed(_1799_generated)));
            _1798_i = (_1798_i) + (BigInteger.One);
          }
          RAST._IType _1800_resultType;
          RAST._IType _out68;
          _out68 = DCOMP.COMP.GenType(_1795_result, inBinding, (inFn) || (inBinding));
          _1800_resultType = _out68;
          s = RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper"), Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_FnType(_1797_argTypes, RAST.Type.create_IntersectionType(_1800_resultType, RAST.__default.StaticTrait))));
        }
      } else if (_source59.is_Primitive) {
        DAST._IPrimitive _1801___mcc_h14 = _source59.dtor_Primitive_a0;
        DAST._IPrimitive _1802_p = _1801___mcc_h14;
        {
          DAST._IPrimitive _source62 = _1802_p;
          if (_source62.is_Int) {
            s = RAST.__default.Rc(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt")));
          } else if (_source62.is_Real) {
            s = RAST.__default.Rc(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational")));
          } else if (_source62.is_String) {
            s = RAST.__default.Vec(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char")));
          } else if (_source62.is_Bool) {
            s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool"));
          } else {
            s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char"));
          }
        }
      } else if (_source59.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _1803___mcc_h15 = _source59.dtor_Passthrough_a0;
        Dafny.ISequence<Dafny.Rune> _1804_v = _1803___mcc_h15;
        s = RAST.__default.RawType(_1804_v);
      } else {
        Dafny.ISequence<Dafny.Rune> _1805___mcc_h16 = _source59.dtor_TypeArg_a0;
        Dafny.ISequence<Dafny.Rune> _source63 = _1805___mcc_h16;
        Dafny.ISequence<Dafny.Rune> _1806___mcc_h17 = _source63;
        Dafny.ISequence<Dafny.Rune> _1807_name = _1806___mcc_h17;
        s = RAST.__default.RawType(DCOMP.__default.escapeIdent(_1807_name));
      }
      return s;
    }
    public static void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<RAST._IImplMember> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> traitBodies) {
      s = Dafny.Sequence<RAST._IImplMember>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Empty;
      s = Dafny.Sequence<RAST._IImplMember>.FromElements();
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements();
      BigInteger _1808_i;
      _1808_i = BigInteger.Zero;
      while ((_1808_i) < (new BigInteger((body).Count))) {
        DAST._IMethod _source64 = (body).Select(_1808_i);
        DAST._IMethod _1809___mcc_h0 = _source64;
        DAST._IMethod _1810_m = _1809___mcc_h0;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source65 = (_1810_m).dtor_overridingPath;
          if (_source65.is_None) {
            {
              RAST._IImplMember _1811_generated;
              RAST._IImplMember _out69;
              _out69 = DCOMP.COMP.GenMethod(_1810_m, forTrait, enclosingType, enclosingTypeParams);
              _1811_generated = _out69;
              s = Dafny.Sequence<RAST._IImplMember>.Concat(s, Dafny.Sequence<RAST._IImplMember>.FromElements(_1811_generated));
            }
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1812___mcc_h1 = _source65.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1813_p = _1812___mcc_h1;
            {
              Dafny.ISequence<RAST._IImplMember> _1814_existing;
              _1814_existing = Dafny.Sequence<RAST._IImplMember>.FromElements();
              if ((traitBodies).Contains(_1813_p)) {
                _1814_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(traitBodies, _1813_p);
              }
              RAST._IImplMember _1815_genMethod;
              RAST._IImplMember _out70;
              _out70 = DCOMP.COMP.GenMethod(_1810_m, true, enclosingType, enclosingTypeParams);
              _1815_genMethod = _out70;
              _1814_existing = Dafny.Sequence<RAST._IImplMember>.Concat(_1814_existing, Dafny.Sequence<RAST._IImplMember>.FromElements(_1815_genMethod));
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>(_1813_p, _1814_existing)));
            }
          }
        }
        _1808_i = (_1808_i) + (BigInteger.One);
      }
    }
    public static Dafny.ISequence<RAST._IFormal> GenParams(Dafny.ISequence<DAST._IFormal> @params) {
      Dafny.ISequence<RAST._IFormal> s = Dafny.Sequence<RAST._IFormal>.Empty;
      s = Dafny.Sequence<RAST._IFormal>.FromElements();
      BigInteger _1816_i;
      _1816_i = BigInteger.Zero;
      while ((_1816_i) < (new BigInteger((@params).Count))) {
        DAST._IFormal _1817_param;
        _1817_param = (@params).Select(_1816_i);
        RAST._IType _1818_paramType;
        RAST._IType _out71;
        _out71 = DCOMP.COMP.GenType((_1817_param).dtor_typ, false, false);
        _1818_paramType = _out71;
        s = Dafny.Sequence<RAST._IFormal>.Concat(s, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_1817_param).dtor_name), RAST.Type.create_Borrowed(_1818_paramType))));
        _1816_i = (_1816_i) + (BigInteger.One);
      }
      return s;
    }
    public static RAST._IImplMember GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams) {
      RAST._IImplMember s = RAST.ImplMember.Default();
      Dafny.ISequence<RAST._IFormal> _1819_params;
      Dafny.ISequence<RAST._IFormal> _out72;
      _out72 = DCOMP.COMP.GenParams((m).dtor_params);
      _1819_params = _out72;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1820_paramNames;
      _1820_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _1821_paramI;
      _1821_paramI = BigInteger.Zero;
      while ((_1821_paramI) < (new BigInteger(((m).dtor_params).Count))) {
        _1820_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_1820_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((m).dtor_params).Select(_1821_paramI)).dtor_name));
        _1821_paramI = (_1821_paramI) + (BigInteger.One);
      }
      if (!((m).dtor_isStatic)) {
        if (forTrait) {
          _1819_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self), _1819_params);
        } else {
          RAST._IType _1822_tpe;
          RAST._IType _out73;
          _out73 = DCOMP.COMP.GenType(enclosingType, false, false);
          _1822_tpe = _out73;
          _1819_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), RAST.Type.create_Borrowed(_1822_tpe))), _1819_params);
        }
      }
      Dafny.ISequence<RAST._IType> _1823_retTypeArgs;
      _1823_retTypeArgs = Dafny.Sequence<RAST._IType>.FromElements();
      BigInteger _1824_typeI;
      _1824_typeI = BigInteger.Zero;
      while ((_1824_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        RAST._IType _1825_typeExpr;
        RAST._IType _out74;
        _out74 = DCOMP.COMP.GenType(((m).dtor_outTypes).Select(_1824_typeI), false, false);
        _1825_typeExpr = _out74;
        _1823_retTypeArgs = Dafny.Sequence<RAST._IType>.Concat(_1823_retTypeArgs, Dafny.Sequence<RAST._IType>.FromElements(_1825_typeExpr));
        _1824_typeI = (_1824_typeI) + (BigInteger.One);
      }
      byte _1826_visibility;
      _1826_visibility = RAST.__default.PUB;
      Dafny.ISequence<Dafny.Rune> _1827_fnName;
      _1827_fnName = DCOMP.__default.escapeIdent((m).dtor_name);
      Dafny.ISequence<DAST._IType> _1828_typeParamsFiltered;
      _1828_typeParamsFiltered = Dafny.Sequence<DAST._IType>.FromElements();
      BigInteger _1829_typeParamI;
      _1829_typeParamI = BigInteger.Zero;
      while ((_1829_typeParamI) < (new BigInteger(((m).dtor_typeParams).Count))) {
        DAST._IType _1830_typeParam;
        _1830_typeParam = ((m).dtor_typeParams).Select(_1829_typeParamI);
        if (!((enclosingTypeParams).Contains(_1830_typeParam))) {
          _1828_typeParamsFiltered = Dafny.Sequence<DAST._IType>.Concat(_1828_typeParamsFiltered, Dafny.Sequence<DAST._IType>.FromElements(_1830_typeParam));
        }
        _1829_typeParamI = (_1829_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _1831_whereClauses;
      _1831_whereClauses = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<RAST._ITypeParam> _1832_typeParams;
      _1832_typeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      if ((new BigInteger((_1828_typeParamsFiltered).Count)).Sign == 1) {
        _1831_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_1831_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where "));
        BigInteger _1833_i;
        _1833_i = BigInteger.Zero;
        while ((_1833_i) < (new BigInteger((_1828_typeParamsFiltered).Count))) {
          RAST._IType _1834_typeExpr;
          RAST._IType _out75;
          _out75 = DCOMP.COMP.GenType((_1828_typeParamsFiltered).Select(_1833_i), false, false);
          _1834_typeExpr = _out75;
          _1832_typeParams = Dafny.Sequence<RAST._ITypeParam>.Concat(_1832_typeParams, Dafny.Sequence<RAST._ITypeParam>.FromElements(RAST.TypeParam.create((_1834_typeExpr)._ToString(DCOMP.__default.IND), Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.CloneTrait, RAST.__default.DafnyPrintTrait, RAST.__default.DefaultTrait, RAST.__default.StaticTrait))));
          _1833_i = (_1833_i) + (BigInteger.One);
        }
      }
      Std.Wrappers._IOption<RAST._IExpr> _1835_fBody = Std.Wrappers.Option<RAST._IExpr>.Default();
      if ((m).dtor_hasBody) {
        RAST._IExpr _1836_earlyReturn;
        _1836_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_None());
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source66 = (m).dtor_outVars;
        if (_source66.is_None) {
        } else {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1837___mcc_h0 = _source66.dtor_value;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1838_outVars = _1837___mcc_h0;
          {
            Dafny.ISequence<RAST._IExpr> _1839_tupleArgs;
            _1839_tupleArgs = Dafny.Sequence<RAST._IExpr>.FromElements();
            BigInteger _1840_outI;
            _1840_outI = BigInteger.Zero;
            while ((_1840_outI) < (new BigInteger((_1838_outVars).Count))) {
              Dafny.ISequence<Dafny.Rune> _1841_outVar;
              _1841_outVar = (_1838_outVars).Select(_1840_outI);
              _1839_tupleArgs = Dafny.Sequence<RAST._IExpr>.Concat(_1839_tupleArgs, Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_RawExpr(DCOMP.__default.escapeIdent((_1841_outVar)))));
              _1840_outI = (_1840_outI) + (BigInteger.One);
            }
            _1836_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_Tuple(_1839_tupleArgs)));
          }
        }
        RAST._IExpr _1842_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1843___v20;
        RAST._IExpr _out76;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out77;
        DCOMP.COMP.GenStmts((m).dtor_body, (((m).dtor_isStatic) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None()) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))), _1820_paramNames, true, _1836_earlyReturn, out _out76, out _out77);
        _1842_body = _out76;
        _1843___v20 = _out77;
        _1835_fBody = Std.Wrappers.Option<RAST._IExpr>.create_Some(_1842_body);
      } else {
        _1835_fBody = Std.Wrappers.Option<RAST._IExpr>.create_None();
      }
      s = RAST.ImplMember.create_FnDecl(_1826_visibility, RAST.Fn.create(_1827_fnName, _1832_typeParams, _1819_params, Std.Wrappers.Option<RAST._IType>.create_Some((((new BigInteger((_1823_retTypeArgs).Count)) == (BigInteger.One)) ? ((_1823_retTypeArgs).Select(BigInteger.Zero)) : (RAST.Type.create_TupleType(_1823_retTypeArgs)))), _1831_whereClauses, _1835_fBody));
      return s;
    }
    public static void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, RAST._IExpr earlyReturn, out RAST._IExpr generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = RAST.Expr.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1844_declarations;
      _1844_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _1845_i;
      _1845_i = BigInteger.Zero;
      while ((_1845_i) < (new BigInteger((stmts).Count))) {
        DAST._IStatement _1846_stmt;
        _1846_stmt = (stmts).Select(_1845_i);
        RAST._IExpr _1847_stmtExpr;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1848_recIdents;
        RAST._IExpr _out78;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out79;
        DCOMP.COMP.GenStmt(_1846_stmt, selfIdent, @params, (isLast) && ((_1845_i) == ((new BigInteger((stmts).Count)) - (BigInteger.One))), earlyReturn, out _out78, out _out79);
        _1847_stmtExpr = _out78;
        _1848_recIdents = _out79;
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_1848_recIdents, _1844_declarations));
        DAST._IStatement _source67 = _1846_stmt;
        if (_source67.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _1849___mcc_h0 = _source67.dtor_name;
          DAST._IType _1850___mcc_h1 = _source67.dtor_typ;
          Std.Wrappers._IOption<DAST._IExpression> _1851___mcc_h2 = _source67.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _1852_name = _1849___mcc_h0;
          {
            _1844_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_1844_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1852_name));
          }
        } else if (_source67.is_Assign) {
          DAST._IAssignLhs _1853___mcc_h6 = _source67.dtor_lhs;
          DAST._IExpression _1854___mcc_h7 = _source67.dtor_value;
        } else if (_source67.is_If) {
          DAST._IExpression _1855___mcc_h10 = _source67.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _1856___mcc_h11 = _source67.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _1857___mcc_h12 = _source67.dtor_els;
        } else if (_source67.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _1858___mcc_h16 = _source67.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _1859___mcc_h17 = _source67.dtor_body;
        } else if (_source67.is_While) {
          DAST._IExpression _1860___mcc_h20 = _source67.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _1861___mcc_h21 = _source67.dtor_body;
        } else if (_source67.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _1862___mcc_h24 = _source67.dtor_boundName;
          DAST._IType _1863___mcc_h25 = _source67.dtor_boundType;
          DAST._IExpression _1864___mcc_h26 = _source67.dtor_over;
          Dafny.ISequence<DAST._IStatement> _1865___mcc_h27 = _source67.dtor_body;
        } else if (_source67.is_Call) {
          DAST._IExpression _1866___mcc_h32 = _source67.dtor_on;
          Dafny.ISequence<Dafny.Rune> _1867___mcc_h33 = _source67.dtor_name;
          Dafny.ISequence<DAST._IType> _1868___mcc_h34 = _source67.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _1869___mcc_h35 = _source67.dtor_args;
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1870___mcc_h36 = _source67.dtor_outs;
        } else if (_source67.is_Return) {
          DAST._IExpression _1871___mcc_h42 = _source67.dtor_expr;
        } else if (_source67.is_EarlyReturn) {
        } else if (_source67.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1872___mcc_h44 = _source67.dtor_toLabel;
        } else if (_source67.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _1873___mcc_h46 = _source67.dtor_body;
        } else if (_source67.is_JumpTailCallStart) {
        } else if (_source67.is_Halt) {
        } else {
          DAST._IExpression _1874___mcc_h48 = _source67.dtor_Print_a0;
        }
        generated = (generated).Then(_1847_stmtExpr);
        _1845_i = (_1845_i) + (BigInteger.One);
      }
    }
    public static void GenAssignLhs(DAST._IAssignLhs lhs, Dafny.ISequence<Dafny.Rune> rhs, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, out Dafny.ISequence<Dafny.Rune> generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IAssignLhs _source68 = lhs;
      if (_source68.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _1875___mcc_h0 = _source68.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source69 = _1875___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _1876___mcc_h1 = _source69;
        Dafny.ISequence<Dafny.Rune> _1877_id = _1876___mcc_h1;
        {
          if ((@params).Contains(_1877_id)) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), DCOMP.__default.escapeIdent(_1877_id));
          } else {
            generated = DCOMP.__default.escapeIdent(_1877_id);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1877_id);
          needsIIFE = false;
        }
      } else if (_source68.is_Select) {
        DAST._IExpression _1878___mcc_h2 = _source68.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _1879___mcc_h3 = _source68.dtor_field;
        Dafny.ISequence<Dafny.Rune> _1880_field = _1879___mcc_h3;
        DAST._IExpression _1881_on = _1878___mcc_h2;
        {
          RAST._IExpr _1882_onExpr;
          bool _1883_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1884_recIdents;
          RAST._IExpr _out80;
          bool _out81;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out82;
          DCOMP.COMP.GenExpr(_1881_on, selfIdent, @params, false, out _out80, out _out81, out _out82);
          _1882_onExpr = _out80;
          _1883_onOwned = _out81;
          _1884_recIdents = _out82;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*("), (_1882_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _1880_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()) = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          readIdents = _1884_recIdents;
          needsIIFE = true;
        }
      } else {
        DAST._IExpression _1885___mcc_h4 = _source68.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _1886___mcc_h5 = _source68.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _1887_indices = _1886___mcc_h5;
        DAST._IExpression _1888_on = _1885___mcc_h4;
        {
          RAST._IExpr _1889_onExpr;
          bool _1890_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1891_recIdents;
          RAST._IExpr _out83;
          bool _out84;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out85;
          DCOMP.COMP.GenExpr(_1888_on, selfIdent, @params, false, out _out83, out _out84, out _out85);
          _1889_onExpr = _out83;
          _1890_onOwned = _out84;
          _1891_recIdents = _out85;
          readIdents = _1891_recIdents;
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          BigInteger _1892_i;
          _1892_i = BigInteger.Zero;
          while ((_1892_i) < (new BigInteger((_1887_indices).Count))) {
            RAST._IExpr _1893_idx;
            bool _1894___v24;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1895_recIdentsIdx;
            RAST._IExpr _out86;
            bool _out87;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out88;
            DCOMP.COMP.GenExpr((_1887_indices).Select(_1892_i), selfIdent, @params, true, out _out86, out _out87, out _out88);
            _1893_idx = _out86;
            _1894___v24 = _out87;
            _1895_recIdentsIdx = _out88;
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let __idx")), Std.Strings.__default.OfNat(_1892_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = <usize as ::dafny_runtime::NumCast>::from(")), (_1893_idx)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap();\n"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1895_recIdentsIdx);
            _1892_i = (_1892_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, (_1889_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()"));
          _1892_i = BigInteger.Zero;
          while ((_1892_i) < (new BigInteger((_1887_indices).Count))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[__idx")), Std.Strings.__default.OfNat(_1892_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            _1892_i = (_1892_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}"));
          needsIIFE = true;
        }
      }
    }
    public static void GenStmt(DAST._IStatement stmt, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, RAST._IExpr earlyReturn, out RAST._IExpr generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = RAST.Expr.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IStatement _source70 = stmt;
      if (_source70.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _1896___mcc_h0 = _source70.dtor_name;
        DAST._IType _1897___mcc_h1 = _source70.dtor_typ;
        Std.Wrappers._IOption<DAST._IExpression> _1898___mcc_h2 = _source70.dtor_maybeValue;
        Std.Wrappers._IOption<DAST._IExpression> _source71 = _1898___mcc_h2;
        if (_source71.is_None) {
          DAST._IType _1899_typ = _1897___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _1900_name = _1896___mcc_h0;
          {
            RAST._IType _1901_typeString;
            RAST._IType _out89;
            _out89 = DCOMP.COMP.GenType(_1899_typ, true, false);
            _1901_typeString = _out89;
            generated = RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMP.__default.escapeIdent(_1900_name), Std.Wrappers.Option<RAST._IType>.create_Some(_1901_typeString), Std.Wrappers.Option<RAST._IExpr>.create_None());
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IExpression _1902___mcc_h3 = _source71.dtor_value;
          DAST._IExpression _1903_expression = _1902___mcc_h3;
          DAST._IType _1904_typ = _1897___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _1905_name = _1896___mcc_h0;
          {
            RAST._IType _1906_typeString;
            RAST._IType _out90;
            _out90 = DCOMP.COMP.GenType(_1904_typ, true, false);
            _1906_typeString = _out90;
            RAST._IExpr _1907_expr;
            bool _1908___v25;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1909_recIdents;
            RAST._IExpr _out91;
            bool _out92;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out93;
            DCOMP.COMP.GenExpr(_1903_expression, selfIdent, @params, true, out _out91, out _out92, out _out93);
            _1907_expr = _out91;
            _1908___v25 = _out92;
            _1909_recIdents = _out93;
            generated = RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMP.__default.escapeIdent(_1905_name), Std.Wrappers.Option<RAST._IType>.create_Some(_1906_typeString), Std.Wrappers.Option<RAST._IExpr>.create_Some(_1907_expr));
            readIdents = _1909_recIdents;
          }
        }
      } else if (_source70.is_Assign) {
        DAST._IAssignLhs _1910___mcc_h4 = _source70.dtor_lhs;
        DAST._IExpression _1911___mcc_h5 = _source70.dtor_value;
        DAST._IExpression _1912_expression = _1911___mcc_h5;
        DAST._IAssignLhs _1913_lhs = _1910___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _1914_lhsGen;
          bool _1915_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1916_recIdents;
          Dafny.ISequence<Dafny.Rune> _out94;
          bool _out95;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out96;
          DCOMP.COMP.GenAssignLhs(_1913_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), selfIdent, @params, out _out94, out _out95, out _out96);
          _1914_lhsGen = _out94;
          _1915_needsIIFE = _out95;
          _1916_recIdents = _out96;
          RAST._IExpr _1917_exprGen;
          bool _1918___v26;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1919_exprIdents;
          RAST._IExpr _out97;
          bool _out98;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out99;
          DCOMP.COMP.GenExpr(_1912_expression, selfIdent, @params, true, out _out97, out _out98, out _out99);
          _1917_exprGen = _out97;
          _1918___v26 = _out98;
          _1919_exprIdents = _out99;
          if (_1915_needsIIFE) {
            generated = RAST.Expr.create_Block(RAST.Expr.create_StmtExpr(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_CONST(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(_1917_exprGen)), RAST.Expr.create_RawExpr(_1914_lhsGen)));
          } else {
            generated = RAST.Expr.create_AssignVar(_1914_lhsGen, _1917_exprGen);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_1916_recIdents, _1919_exprIdents);
        }
      } else if (_source70.is_If) {
        DAST._IExpression _1920___mcc_h6 = _source70.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _1921___mcc_h7 = _source70.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _1922___mcc_h8 = _source70.dtor_els;
        Dafny.ISequence<DAST._IStatement> _1923_els = _1922___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _1924_thn = _1921___mcc_h7;
        DAST._IExpression _1925_cond = _1920___mcc_h6;
        {
          RAST._IExpr _1926_cond;
          bool _1927___v27;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1928_recIdents;
          RAST._IExpr _out100;
          bool _out101;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out102;
          DCOMP.COMP.GenExpr(_1925_cond, selfIdent, @params, true, out _out100, out _out101, out _out102);
          _1926_cond = _out100;
          _1927___v27 = _out101;
          _1928_recIdents = _out102;
          Dafny.ISequence<Dafny.Rune> _1929_condString;
          _1929_condString = (_1926_cond)._ToString(DCOMP.__default.IND);
          readIdents = _1928_recIdents;
          RAST._IExpr _1930_thn;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1931_thnIdents;
          RAST._IExpr _out103;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out104;
          DCOMP.COMP.GenStmts(_1924_thn, selfIdent, @params, isLast, earlyReturn, out _out103, out _out104);
          _1930_thn = _out103;
          _1931_thnIdents = _out104;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1931_thnIdents);
          RAST._IExpr _1932_els;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1933_elsIdents;
          RAST._IExpr _out105;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out106;
          DCOMP.COMP.GenStmts(_1923_els, selfIdent, @params, isLast, earlyReturn, out _out105, out _out106);
          _1932_els = _out105;
          _1933_elsIdents = _out106;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1933_elsIdents);
          generated = RAST.Expr.create_IfExpr(_1926_cond, _1930_thn, _1932_els);
        }
      } else if (_source70.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _1934___mcc_h9 = _source70.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _1935___mcc_h10 = _source70.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1936_body = _1935___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _1937_lbl = _1934___mcc_h9;
        {
          RAST._IExpr _1938_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1939_bodyIdents;
          RAST._IExpr _out107;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out108;
          DCOMP.COMP.GenStmts(_1936_body, selfIdent, @params, isLast, earlyReturn, out _out107, out _out108);
          _1938_body = _out107;
          _1939_bodyIdents = _out108;
          readIdents = _1939_bodyIdents;
          generated = RAST.Expr.create_Labelled(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("label_"), _1937_lbl), RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_None(), RAST.Expr.create_StmtExpr(_1938_body, RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None()))));
        }
      } else if (_source70.is_While) {
        DAST._IExpression _1940___mcc_h11 = _source70.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _1941___mcc_h12 = _source70.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1942_body = _1941___mcc_h12;
        DAST._IExpression _1943_cond = _1940___mcc_h11;
        {
          RAST._IExpr _1944_cond;
          bool _1945___v28;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1946_recIdents;
          RAST._IExpr _out109;
          bool _out110;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out111;
          DCOMP.COMP.GenExpr(_1943_cond, selfIdent, @params, true, out _out109, out _out110, out _out111);
          _1944_cond = _out109;
          _1945___v28 = _out110;
          _1946_recIdents = _out111;
          readIdents = _1946_recIdents;
          RAST._IExpr _1947_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1948_bodyIdents;
          RAST._IExpr _out112;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out113;
          DCOMP.COMP.GenStmts(_1942_body, selfIdent, @params, false, earlyReturn, out _out112, out _out113);
          _1947_body = _out112;
          _1948_bodyIdents = _out113;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1948_bodyIdents);
          generated = RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_Some(_1944_cond), _1947_body);
        }
      } else if (_source70.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _1949___mcc_h13 = _source70.dtor_boundName;
        DAST._IType _1950___mcc_h14 = _source70.dtor_boundType;
        DAST._IExpression _1951___mcc_h15 = _source70.dtor_over;
        Dafny.ISequence<DAST._IStatement> _1952___mcc_h16 = _source70.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1953_body = _1952___mcc_h16;
        DAST._IExpression _1954_over = _1951___mcc_h15;
        DAST._IType _1955_boundType = _1950___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _1956_boundName = _1949___mcc_h13;
        {
          RAST._IExpr _1957_over;
          bool _1958___v29;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1959_recIdents;
          RAST._IExpr _out114;
          bool _out115;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out116;
          DCOMP.COMP.GenExpr(_1954_over, selfIdent, @params, true, out _out114, out _out115, out _out116);
          _1957_over = _out114;
          _1958___v29 = _out115;
          _1959_recIdents = _out116;
          RAST._IType _1960_boundTypeStr;
          RAST._IType _out117;
          _out117 = DCOMP.COMP.GenType(_1955_boundType, false, false);
          _1960_boundTypeStr = _out117;
          readIdents = _1959_recIdents;
          RAST._IExpr _1961_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1962_bodyIdents;
          RAST._IExpr _out118;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out119;
          DCOMP.COMP.GenStmts(_1953_body, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(@params, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_1956_boundName)), false, earlyReturn, out _out118, out _out119);
          _1961_body = _out118;
          _1962_bodyIdents = _out119;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1962_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1956_boundName));
          generated = RAST.Expr.create_For(DCOMP.__default.escapeIdent(_1956_boundName), _1957_over, _1961_body);
        }
      } else if (_source70.is_Call) {
        DAST._IExpression _1963___mcc_h17 = _source70.dtor_on;
        Dafny.ISequence<Dafny.Rune> _1964___mcc_h18 = _source70.dtor_name;
        Dafny.ISequence<DAST._IType> _1965___mcc_h19 = _source70.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _1966___mcc_h20 = _source70.dtor_args;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1967___mcc_h21 = _source70.dtor_outs;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1968_maybeOutVars = _1967___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _1969_args = _1966___mcc_h20;
        Dafny.ISequence<DAST._IType> _1970_typeArgs = _1965___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _1971_name = _1964___mcc_h18;
        DAST._IExpression _1972_on = _1963___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _1973_typeArgString;
          _1973_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_1970_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _1974_typeI;
            _1974_typeI = BigInteger.Zero;
            Dafny.ISequence<RAST._IType> _1975_typeArgsR;
            _1975_typeArgsR = Dafny.Sequence<RAST._IType>.FromElements();
            while ((_1974_typeI) < (new BigInteger((_1970_typeArgs).Count))) {
              RAST._IType _1976_tpe;
              RAST._IType _out120;
              _out120 = DCOMP.COMP.GenType((_1970_typeArgs).Select(_1974_typeI), false, false);
              _1976_tpe = _out120;
              _1975_typeArgsR = Dafny.Sequence<RAST._IType>.Concat(_1975_typeArgsR, Dafny.Sequence<RAST._IType>.FromElements(_1976_tpe));
              _1974_typeI = (_1974_typeI) + (BigInteger.One);
            }
            _1973_typeArgString = (RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"), _1975_typeArgsR))._ToString(DCOMP.__default.IND);
          }
          Dafny.ISequence<Dafny.Rune> _1977_argString;
          _1977_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _1978_i;
          _1978_i = BigInteger.Zero;
          while ((_1978_i) < (new BigInteger((_1969_args).Count))) {
            if ((_1978_i).Sign == 1) {
              _1977_argString = Dafny.Sequence<Dafny.Rune>.Concat(_1977_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _1979_argExpr;
            bool _1980_isOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1981_argIdents;
            RAST._IExpr _out121;
            bool _out122;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out123;
            DCOMP.COMP.GenExpr((_1969_args).Select(_1978_i), selfIdent, @params, false, out _out121, out _out122, out _out123);
            _1979_argExpr = _out121;
            _1980_isOwned = _out122;
            _1981_argIdents = _out123;
            Dafny.ISequence<Dafny.Rune> _1982_argExprString;
            _1982_argExprString = (_1979_argExpr)._ToString(DCOMP.__default.IND);
            if (_1980_isOwned) {
              _1982_argExprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _1982_argExprString);
            }
            _1977_argString = Dafny.Sequence<Dafny.Rune>.Concat(_1977_argString, _1982_argExprString);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1981_argIdents);
            _1978_i = (_1978_i) + (BigInteger.One);
          }
          RAST._IExpr _1983_enclosingExpr;
          bool _1984___v30;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1985_enclosingIdents;
          RAST._IExpr _out124;
          bool _out125;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out126;
          DCOMP.COMP.GenExpr(_1972_on, selfIdent, @params, false, out _out124, out _out125, out _out126);
          _1983_enclosingExpr = _out124;
          _1984___v30 = _out125;
          _1985_enclosingIdents = _out126;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1985_enclosingIdents);
          Dafny.ISequence<Dafny.Rune> _1986_enclosingString;
          _1986_enclosingString = (_1983_enclosingExpr)._ToString(DCOMP.__default.IND);
          DAST._IExpression _source72 = _1972_on;
          if (_source72.is_Literal) {
            DAST._ILiteral _1987___mcc_h26 = _source72.dtor_Literal_a0;
            {
              _1986_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1986_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source72.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _1988___mcc_h28 = _source72.dtor_Ident_a0;
            {
              _1986_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1986_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source72.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1989___mcc_h30 = _source72.dtor_Companion_a0;
            {
              _1986_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(_1986_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
            }
          } else if (_source72.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _1990___mcc_h32 = _source72.dtor_Tuple_a0;
            {
              _1986_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1986_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source72.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1991___mcc_h34 = _source72.dtor_path;
            Dafny.ISequence<DAST._IType> _1992___mcc_h35 = _source72.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _1993___mcc_h36 = _source72.dtor_args;
            {
              _1986_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1986_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source72.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _1994___mcc_h40 = _source72.dtor_dims;
            DAST._IType _1995___mcc_h41 = _source72.dtor_typ;
            {
              _1986_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1986_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source72.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1996___mcc_h44 = _source72.dtor_path;
            Dafny.ISequence<DAST._IType> _1997___mcc_h45 = _source72.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _1998___mcc_h46 = _source72.dtor_variant;
            bool _1999___mcc_h47 = _source72.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _2000___mcc_h48 = _source72.dtor_contents;
            {
              _1986_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1986_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source72.is_Convert) {
            DAST._IExpression _2001___mcc_h54 = _source72.dtor_value;
            DAST._IType _2002___mcc_h55 = _source72.dtor_from;
            DAST._IType _2003___mcc_h56 = _source72.dtor_typ;
            {
              _1986_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1986_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source72.is_SeqConstruct) {
            DAST._IExpression _2004___mcc_h60 = _source72.dtor_length;
            DAST._IExpression _2005___mcc_h61 = _source72.dtor_elem;
            {
              _1986_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1986_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source72.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _2006___mcc_h64 = _source72.dtor_elements;
            DAST._IType _2007___mcc_h65 = _source72.dtor_typ;
            {
              _1986_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1986_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source72.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _2008___mcc_h68 = _source72.dtor_elements;
            {
              _1986_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1986_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source72.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2009___mcc_h70 = _source72.dtor_mapElems;
            {
              _1986_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1986_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source72.is_This) {
            {
              _1986_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1986_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source72.is_Ite) {
            DAST._IExpression _2010___mcc_h72 = _source72.dtor_cond;
            DAST._IExpression _2011___mcc_h73 = _source72.dtor_thn;
            DAST._IExpression _2012___mcc_h74 = _source72.dtor_els;
            {
              _1986_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1986_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source72.is_UnOp) {
            DAST._IUnaryOp _2013___mcc_h78 = _source72.dtor_unOp;
            DAST._IExpression _2014___mcc_h79 = _source72.dtor_expr;
            DAST.Format._IUnOpFormat _2015___mcc_h80 = _source72.dtor_format1;
            {
              _1986_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1986_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source72.is_BinOp) {
            DAST._IBinOp _2016___mcc_h84 = _source72.dtor_op;
            DAST._IExpression _2017___mcc_h85 = _source72.dtor_left;
            DAST._IExpression _2018___mcc_h86 = _source72.dtor_right;
            DAST.Format._IBinOpFormat _2019___mcc_h87 = _source72.dtor_format2;
            {
              _1986_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1986_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source72.is_ArrayLen) {
            DAST._IExpression _2020___mcc_h92 = _source72.dtor_expr;
            BigInteger _2021___mcc_h93 = _source72.dtor_dim;
            {
              _1986_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1986_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source72.is_Select) {
            DAST._IExpression _2022___mcc_h96 = _source72.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _2023___mcc_h97 = _source72.dtor_field;
            bool _2024___mcc_h98 = _source72.dtor_isConstant;
            bool _2025___mcc_h99 = _source72.dtor_onDatatype;
            {
              _1986_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1986_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source72.is_SelectFn) {
            DAST._IExpression _2026___mcc_h104 = _source72.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _2027___mcc_h105 = _source72.dtor_field;
            bool _2028___mcc_h106 = _source72.dtor_onDatatype;
            bool _2029___mcc_h107 = _source72.dtor_isStatic;
            BigInteger _2030___mcc_h108 = _source72.dtor_arity;
            {
              _1986_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1986_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source72.is_Index) {
            DAST._IExpression _2031___mcc_h114 = _source72.dtor_expr;
            DAST._ICollKind _2032___mcc_h115 = _source72.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _2033___mcc_h116 = _source72.dtor_indices;
            {
              _1986_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1986_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source72.is_IndexRange) {
            DAST._IExpression _2034___mcc_h120 = _source72.dtor_expr;
            bool _2035___mcc_h121 = _source72.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _2036___mcc_h122 = _source72.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _2037___mcc_h123 = _source72.dtor_high;
            {
              _1986_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1986_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source72.is_TupleSelect) {
            DAST._IExpression _2038___mcc_h128 = _source72.dtor_expr;
            BigInteger _2039___mcc_h129 = _source72.dtor_index;
            {
              _1986_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1986_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source72.is_Call) {
            DAST._IExpression _2040___mcc_h132 = _source72.dtor_on;
            Dafny.ISequence<Dafny.Rune> _2041___mcc_h133 = _source72.dtor_name;
            Dafny.ISequence<DAST._IType> _2042___mcc_h134 = _source72.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _2043___mcc_h135 = _source72.dtor_args;
            {
              _1986_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1986_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source72.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _2044___mcc_h140 = _source72.dtor_params;
            DAST._IType _2045___mcc_h141 = _source72.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _2046___mcc_h142 = _source72.dtor_body;
            {
              _1986_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1986_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source72.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _2047___mcc_h146 = _source72.dtor_values;
            DAST._IType _2048___mcc_h147 = _source72.dtor_retType;
            DAST._IExpression _2049___mcc_h148 = _source72.dtor_expr;
            {
              _1986_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1986_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source72.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _2050___mcc_h152 = _source72.dtor_name;
            DAST._IType _2051___mcc_h153 = _source72.dtor_typ;
            DAST._IExpression _2052___mcc_h154 = _source72.dtor_value;
            DAST._IExpression _2053___mcc_h155 = _source72.dtor_iifeBody;
            {
              _1986_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1986_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source72.is_Apply) {
            DAST._IExpression _2054___mcc_h160 = _source72.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _2055___mcc_h161 = _source72.dtor_args;
            {
              _1986_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1986_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source72.is_TypeTest) {
            DAST._IExpression _2056___mcc_h164 = _source72.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2057___mcc_h165 = _source72.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _2058___mcc_h166 = _source72.dtor_variant;
            {
              _1986_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1986_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source72.is_InitializationValue) {
            DAST._IType _2059___mcc_h170 = _source72.dtor_typ;
            {
              _1986_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1986_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source72.is_BoolBoundedPool) {
            {
              _1986_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1986_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source72.is_SetBoundedPool) {
            DAST._IExpression _2060___mcc_h172 = _source72.dtor_of;
            {
              _1986_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1986_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source72.is_SeqBoundedPool) {
            DAST._IExpression _2061___mcc_h174 = _source72.dtor_of;
            bool _2062___mcc_h175 = _source72.dtor_includeDuplicates;
            {
              _1986_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1986_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else {
            DAST._IExpression _2063___mcc_h178 = _source72.dtor_lo;
            DAST._IExpression _2064___mcc_h179 = _source72.dtor_hi;
            {
              _1986_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1986_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          }
          Dafny.ISequence<Dafny.Rune> _2065_receiver;
          _2065_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source73 = _1968_maybeOutVars;
          if (_source73.is_None) {
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2066___mcc_h182 = _source73.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2067_outVars = _2066___mcc_h182;
            {
              if ((new BigInteger((_2067_outVars).Count)) > (BigInteger.One)) {
                _2065_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
              }
              BigInteger _2068_outI;
              _2068_outI = BigInteger.Zero;
              while ((_2068_outI) < (new BigInteger((_2067_outVars).Count))) {
                if ((_2068_outI).Sign == 1) {
                  _2065_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_2065_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                }
                Dafny.ISequence<Dafny.Rune> _2069_outVar;
                _2069_outVar = (_2067_outVars).Select(_2068_outI);
                _2065_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_2065_receiver, (_2069_outVar));
                _2068_outI = (_2068_outI) + (BigInteger.One);
              }
              if ((new BigInteger((_2067_outVars).Count)) > (BigInteger.One)) {
                _2065_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_2065_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
          }
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((!(_2065_receiver).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_2065_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), _1986_enclosingString), DCOMP.__default.escapeIdent(_1971_name)), _1973_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1977_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");")));
        }
      } else if (_source70.is_Return) {
        DAST._IExpression _2070___mcc_h22 = _source70.dtor_expr;
        DAST._IExpression _2071_expr = _2070___mcc_h22;
        {
          RAST._IExpr _2072_expr;
          bool _2073___v33;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2074_recIdents;
          RAST._IExpr _out127;
          bool _out128;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out129;
          DCOMP.COMP.GenExpr(_2071_expr, selfIdent, @params, true, out _out127, out _out128, out _out129);
          _2072_expr = _out127;
          _2073___v33 = _out128;
          _2074_recIdents = _out129;
          readIdents = _2074_recIdents;
          if (isLast) {
            generated = _2072_expr;
          } else {
            generated = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some(_2072_expr));
          }
        }
      } else if (_source70.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source70.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2075___mcc_h23 = _source70.dtor_toLabel;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2076_toLabel = _2075___mcc_h23;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source74 = _2076_toLabel;
          if (_source74.is_None) {
            {
              generated = RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None());
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _2077___mcc_h183 = _source74.dtor_value;
            Dafny.ISequence<Dafny.Rune> _2078_lbl = _2077___mcc_h183;
            {
              generated = RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("label_"), _2078_lbl)));
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source70.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _2079___mcc_h24 = _source70.dtor_body;
        Dafny.ISequence<DAST._IStatement> _2080_body = _2079___mcc_h24;
        {
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
          if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = (generated).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self.clone()")))));
          }
          BigInteger _2081_paramI;
          _2081_paramI = BigInteger.Zero;
          while ((_2081_paramI) < (new BigInteger((@params).Count))) {
            Dafny.ISequence<Dafny.Rune> _2082_param;
            _2082_param = (@params).Select(_2081_paramI);
            generated = (generated).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMP.__default.escapeIdent(_2082_param), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent(_2082_param), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"))))));
            _2081_paramI = (_2081_paramI) + (BigInteger.One);
          }
          RAST._IExpr _2083_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2084_bodyIdents;
          RAST._IExpr _out130;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out131;
          DCOMP.COMP.GenStmts(_2080_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), false, earlyReturn, out _out130, out _out131);
          _2083_body = _out130;
          _2084_bodyIdents = _out131;
          readIdents = _2084_bodyIdents;
          generated = (generated).Then(RAST.Expr.create_Labelled(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("TAIL_CALL_START"), RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_None(), _2083_body)));
        }
      } else if (_source70.is_JumpTailCallStart) {
        {
          generated = RAST.Expr.create_Continue(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("TAIL_CALL_START")));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source70.is_Halt) {
        {
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else {
        DAST._IExpression _2085___mcc_h25 = _source70.dtor_Print_a0;
        DAST._IExpression _2086_e = _2085___mcc_h25;
        {
          RAST._IExpr _2087_printedExpr;
          bool _2088_isOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2089_recIdents;
          RAST._IExpr _out132;
          bool _out133;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out134;
          DCOMP.COMP.GenExpr(_2086_e, selfIdent, @params, false, out _out132, out _out133, out _out134);
          _2087_printedExpr = _out132;
          _2088_isOwned = _out133;
          _2089_recIdents = _out134;
          Dafny.ISequence<Dafny.Rune> _2090_printedExprString;
          _2090_printedExprString = (_2087_printedExpr)._ToString(DCOMP.__default.IND);
          if (_2088_isOwned) {
            _2090_printedExprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _2090_printedExprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!(\"{}\", ::dafny_runtime::DafnyPrintWrapper("), _2090_printedExprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("));")));
          readIdents = _2089_recIdents;
        }
      }
    }
    public static Std.Wrappers._IOption<RAST._IType> NewtypeToRustType(DAST._IType @base, DAST._INewtypeRange range) {
      DAST._INewtypeRange _source75 = range;
      if (_source75.is_U8) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U8());
      } else if (_source75.is_I8) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I8());
      } else if (_source75.is_U16) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U16());
      } else if (_source75.is_I16) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I16());
      } else if (_source75.is_U32) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U32());
      } else if (_source75.is_I32) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I32());
      } else if (_source75.is_U64) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U64());
      } else if (_source75.is_I64) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I64());
      } else if (_source75.is_U128) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U128());
      } else if (_source75.is_I128) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I128());
      } else if (_source75.is_BigInt) {
        return Std.Wrappers.Option<RAST._IType>.create_None();
      } else {
        return Std.Wrappers.Option<RAST._IType>.create_None();
      }
    }
    public static void GenExpr(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool mustOwn, out RAST._IExpr r, out bool isOwned, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      r = RAST.Expr.Default();
      isOwned = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source76 = e;
      if (_source76.is_Literal) {
        DAST._ILiteral _2091___mcc_h0 = _source76.dtor_Literal_a0;
        DAST._ILiteral _source77 = _2091___mcc_h0;
        if (_source77.is_BoolLiteral) {
          bool _2092___mcc_h1 = _source77.dtor_BoolLiteral_a0;
          if ((_2092___mcc_h1) == (false)) {
            {
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false"));
              isOwned = true;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            {
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true"));
              isOwned = true;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          }
        } else if (_source77.is_IntLiteral) {
          Dafny.ISequence<Dafny.Rune> _2093___mcc_h2 = _source77.dtor_IntLiteral_a0;
          DAST._IType _2094___mcc_h3 = _source77.dtor_IntLiteral_a1;
          DAST._IType _2095_t = _2094___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _2096_i = _2093___mcc_h2;
          {
            DAST._IType _source78 = _2095_t;
            if (_source78.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2097___mcc_h243 = _source78.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _2098___mcc_h244 = _source78.dtor_typeArgs;
              DAST._IResolvedType _2099___mcc_h245 = _source78.dtor_resolved;
              DAST._IType _2100_o = _2095_t;
              {
                RAST._IType _2101_genType;
                RAST._IType _out135;
                _out135 = DCOMP.COMP.GenType(_2100_o, false, false);
                _2101_genType = _out135;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2096_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2101_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source78.is_Nullable) {
              DAST._IType _2102___mcc_h249 = _source78.dtor_Nullable_a0;
              DAST._IType _2103_o = _2095_t;
              {
                RAST._IType _2104_genType;
                RAST._IType _out136;
                _out136 = DCOMP.COMP.GenType(_2103_o, false, false);
                _2104_genType = _out136;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2096_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2104_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source78.is_Tuple) {
              Dafny.ISequence<DAST._IType> _2105___mcc_h251 = _source78.dtor_Tuple_a0;
              DAST._IType _2106_o = _2095_t;
              {
                RAST._IType _2107_genType;
                RAST._IType _out137;
                _out137 = DCOMP.COMP.GenType(_2106_o, false, false);
                _2107_genType = _out137;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2096_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2107_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source78.is_Array) {
              DAST._IType _2108___mcc_h253 = _source78.dtor_element;
              BigInteger _2109___mcc_h254 = _source78.dtor_dims;
              DAST._IType _2110_o = _2095_t;
              {
                RAST._IType _2111_genType;
                RAST._IType _out138;
                _out138 = DCOMP.COMP.GenType(_2110_o, false, false);
                _2111_genType = _out138;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2096_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2111_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source78.is_Seq) {
              DAST._IType _2112___mcc_h257 = _source78.dtor_element;
              DAST._IType _2113_o = _2095_t;
              {
                RAST._IType _2114_genType;
                RAST._IType _out139;
                _out139 = DCOMP.COMP.GenType(_2113_o, false, false);
                _2114_genType = _out139;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2096_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2114_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source78.is_Set) {
              DAST._IType _2115___mcc_h259 = _source78.dtor_element;
              DAST._IType _2116_o = _2095_t;
              {
                RAST._IType _2117_genType;
                RAST._IType _out140;
                _out140 = DCOMP.COMP.GenType(_2116_o, false, false);
                _2117_genType = _out140;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2096_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2117_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source78.is_Multiset) {
              DAST._IType _2118___mcc_h261 = _source78.dtor_element;
              DAST._IType _2119_o = _2095_t;
              {
                RAST._IType _2120_genType;
                RAST._IType _out141;
                _out141 = DCOMP.COMP.GenType(_2119_o, false, false);
                _2120_genType = _out141;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2096_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2120_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source78.is_Map) {
              DAST._IType _2121___mcc_h263 = _source78.dtor_key;
              DAST._IType _2122___mcc_h264 = _source78.dtor_value;
              DAST._IType _2123_o = _2095_t;
              {
                RAST._IType _2124_genType;
                RAST._IType _out142;
                _out142 = DCOMP.COMP.GenType(_2123_o, false, false);
                _2124_genType = _out142;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2096_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2124_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source78.is_Arrow) {
              Dafny.ISequence<DAST._IType> _2125___mcc_h267 = _source78.dtor_args;
              DAST._IType _2126___mcc_h268 = _source78.dtor_result;
              DAST._IType _2127_o = _2095_t;
              {
                RAST._IType _2128_genType;
                RAST._IType _out143;
                _out143 = DCOMP.COMP.GenType(_2127_o, false, false);
                _2128_genType = _out143;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2096_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2128_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source78.is_Primitive) {
              DAST._IPrimitive _2129___mcc_h271 = _source78.dtor_Primitive_a0;
              DAST._IPrimitive _source79 = _2129___mcc_h271;
              if (_source79.is_Int) {
                {
                  r = RAST.Expr.create_LiteralInt(_2096_i);
                }
              } else if (_source79.is_Real) {
                DAST._IType _2130_o = _2095_t;
                {
                  RAST._IType _2131_genType;
                  RAST._IType _out144;
                  _out144 = DCOMP.COMP.GenType(_2130_o, false, false);
                  _2131_genType = _out144;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2096_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2131_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                }
              } else if (_source79.is_String) {
                DAST._IType _2132_o = _2095_t;
                {
                  RAST._IType _2133_genType;
                  RAST._IType _out145;
                  _out145 = DCOMP.COMP.GenType(_2132_o, false, false);
                  _2133_genType = _out145;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2096_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2133_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                }
              } else if (_source79.is_Bool) {
                DAST._IType _2134_o = _2095_t;
                {
                  RAST._IType _2135_genType;
                  RAST._IType _out146;
                  _out146 = DCOMP.COMP.GenType(_2134_o, false, false);
                  _2135_genType = _out146;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2096_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2135_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                }
              } else {
                DAST._IType _2136_o = _2095_t;
                {
                  RAST._IType _2137_genType;
                  RAST._IType _out147;
                  _out147 = DCOMP.COMP.GenType(_2136_o, false, false);
                  _2137_genType = _out147;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2096_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2137_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                }
              }
            } else if (_source78.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _2138___mcc_h273 = _source78.dtor_Passthrough_a0;
              DAST._IType _2139_o = _2095_t;
              {
                RAST._IType _2140_genType;
                RAST._IType _out148;
                _out148 = DCOMP.COMP.GenType(_2139_o, false, false);
                _2140_genType = _out148;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2096_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2140_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2141___mcc_h275 = _source78.dtor_TypeArg_a0;
              DAST._IType _2142_o = _2095_t;
              {
                RAST._IType _2143_genType;
                RAST._IType _out149;
                _out149 = DCOMP.COMP.GenType(_2142_o, false, false);
                _2143_genType = _out149;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2096_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2143_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            }
            isOwned = true;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source77.is_DecLiteral) {
          Dafny.ISequence<Dafny.Rune> _2144___mcc_h4 = _source77.dtor_DecLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _2145___mcc_h5 = _source77.dtor_DecLiteral_a1;
          DAST._IType _2146___mcc_h6 = _source77.dtor_DecLiteral_a2;
          DAST._IType _2147_t = _2146___mcc_h6;
          Dafny.ISequence<Dafny.Rune> _2148_d = _2145___mcc_h5;
          Dafny.ISequence<Dafny.Rune> _2149_n = _2144___mcc_h4;
          {
            DAST._IType _source80 = _2147_t;
            if (_source80.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2150___mcc_h277 = _source80.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _2151___mcc_h278 = _source80.dtor_typeArgs;
              DAST._IResolvedType _2152___mcc_h279 = _source80.dtor_resolved;
              DAST._IType _2153_o = _2147_t;
              {
                RAST._IType _2154_genType;
                RAST._IType _out150;
                _out150 = DCOMP.COMP.GenType(_2153_o, false, false);
                _2154_genType = _out150;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2149_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2148_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2154_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source80.is_Nullable) {
              DAST._IType _2155___mcc_h283 = _source80.dtor_Nullable_a0;
              DAST._IType _2156_o = _2147_t;
              {
                RAST._IType _2157_genType;
                RAST._IType _out151;
                _out151 = DCOMP.COMP.GenType(_2156_o, false, false);
                _2157_genType = _out151;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2149_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2148_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2157_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source80.is_Tuple) {
              Dafny.ISequence<DAST._IType> _2158___mcc_h285 = _source80.dtor_Tuple_a0;
              DAST._IType _2159_o = _2147_t;
              {
                RAST._IType _2160_genType;
                RAST._IType _out152;
                _out152 = DCOMP.COMP.GenType(_2159_o, false, false);
                _2160_genType = _out152;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2149_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2148_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2160_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source80.is_Array) {
              DAST._IType _2161___mcc_h287 = _source80.dtor_element;
              BigInteger _2162___mcc_h288 = _source80.dtor_dims;
              DAST._IType _2163_o = _2147_t;
              {
                RAST._IType _2164_genType;
                RAST._IType _out153;
                _out153 = DCOMP.COMP.GenType(_2163_o, false, false);
                _2164_genType = _out153;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2149_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2148_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2164_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source80.is_Seq) {
              DAST._IType _2165___mcc_h291 = _source80.dtor_element;
              DAST._IType _2166_o = _2147_t;
              {
                RAST._IType _2167_genType;
                RAST._IType _out154;
                _out154 = DCOMP.COMP.GenType(_2166_o, false, false);
                _2167_genType = _out154;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2149_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2148_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2167_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source80.is_Set) {
              DAST._IType _2168___mcc_h293 = _source80.dtor_element;
              DAST._IType _2169_o = _2147_t;
              {
                RAST._IType _2170_genType;
                RAST._IType _out155;
                _out155 = DCOMP.COMP.GenType(_2169_o, false, false);
                _2170_genType = _out155;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2149_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2148_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2170_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source80.is_Multiset) {
              DAST._IType _2171___mcc_h295 = _source80.dtor_element;
              DAST._IType _2172_o = _2147_t;
              {
                RAST._IType _2173_genType;
                RAST._IType _out156;
                _out156 = DCOMP.COMP.GenType(_2172_o, false, false);
                _2173_genType = _out156;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2149_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2148_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2173_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source80.is_Map) {
              DAST._IType _2174___mcc_h297 = _source80.dtor_key;
              DAST._IType _2175___mcc_h298 = _source80.dtor_value;
              DAST._IType _2176_o = _2147_t;
              {
                RAST._IType _2177_genType;
                RAST._IType _out157;
                _out157 = DCOMP.COMP.GenType(_2176_o, false, false);
                _2177_genType = _out157;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2149_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2148_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2177_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source80.is_Arrow) {
              Dafny.ISequence<DAST._IType> _2178___mcc_h301 = _source80.dtor_args;
              DAST._IType _2179___mcc_h302 = _source80.dtor_result;
              DAST._IType _2180_o = _2147_t;
              {
                RAST._IType _2181_genType;
                RAST._IType _out158;
                _out158 = DCOMP.COMP.GenType(_2180_o, false, false);
                _2181_genType = _out158;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2149_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2148_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2181_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source80.is_Primitive) {
              DAST._IPrimitive _2182___mcc_h305 = _source80.dtor_Primitive_a0;
              DAST._IPrimitive _source81 = _2182___mcc_h305;
              if (_source81.is_Int) {
                DAST._IType _2183_o = _2147_t;
                {
                  RAST._IType _2184_genType;
                  RAST._IType _out159;
                  _out159 = DCOMP.COMP.GenType(_2183_o, false, false);
                  _2184_genType = _out159;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2149_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2148_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2184_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                }
              } else if (_source81.is_Real) {
                {
                  r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _2149_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _2148_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"))));
                }
              } else if (_source81.is_String) {
                DAST._IType _2185_o = _2147_t;
                {
                  RAST._IType _2186_genType;
                  RAST._IType _out160;
                  _out160 = DCOMP.COMP.GenType(_2185_o, false, false);
                  _2186_genType = _out160;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2149_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2148_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2186_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                }
              } else if (_source81.is_Bool) {
                DAST._IType _2187_o = _2147_t;
                {
                  RAST._IType _2188_genType;
                  RAST._IType _out161;
                  _out161 = DCOMP.COMP.GenType(_2187_o, false, false);
                  _2188_genType = _out161;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2149_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2148_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2188_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                }
              } else {
                DAST._IType _2189_o = _2147_t;
                {
                  RAST._IType _2190_genType;
                  RAST._IType _out162;
                  _out162 = DCOMP.COMP.GenType(_2189_o, false, false);
                  _2190_genType = _out162;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2149_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2148_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2190_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                }
              }
            } else if (_source80.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _2191___mcc_h307 = _source80.dtor_Passthrough_a0;
              DAST._IType _2192_o = _2147_t;
              {
                RAST._IType _2193_genType;
                RAST._IType _out163;
                _out163 = DCOMP.COMP.GenType(_2192_o, false, false);
                _2193_genType = _out163;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2149_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2148_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2193_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2194___mcc_h309 = _source80.dtor_TypeArg_a0;
              DAST._IType _2195_o = _2147_t;
              {
                RAST._IType _2196_genType;
                RAST._IType _out164;
                _out164 = DCOMP.COMP.GenType(_2195_o, false, false);
                _2196_genType = _out164;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2149_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2148_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2196_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            }
            isOwned = true;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source77.is_StringLiteral) {
          Dafny.ISequence<Dafny.Rune> _2197___mcc_h7 = _source77.dtor_StringLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _2198_l = _2197___mcc_h7;
          {
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""), _2198_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\".chars().collect::<Vec<char>>()")));
            isOwned = true;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source77.is_CharLiteral) {
          Dafny.Rune _2199___mcc_h8 = _source77.dtor_CharLiteral_a0;
          Dafny.Rune _2200_c = _2199___mcc_h8;
          {
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::primitive::char::from_u32("), Std.Strings.__default.OfNat(new BigInteger((_2200_c).Value))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()")));
            isOwned = true;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IType _2201___mcc_h9 = _source77.dtor_Null_a0;
          DAST._IType _2202_tpe = _2201___mcc_h9;
          {
            RAST._IType _2203_tpeGen;
            RAST._IType _out165;
            _out165 = DCOMP.COMP.GenType(_2202_tpe, false, false);
            _2203_tpeGen = _out165;
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(None as "), (_2203_tpeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
            isOwned = true;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source76.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _2204___mcc_h10 = _source76.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _2205_name = _2204___mcc_h10;
        {
          Dafny.ISequence<Dafny.Rune> _2206_s;
          _2206_s = DCOMP.__default.escapeIdent(_2205_name);
          if (!((@params).Contains(_2205_name))) {
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), _2206_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
          }
          if (mustOwn) {
            _2206_s = Dafny.Sequence<Dafny.Rune>.Concat(_2206_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            isOwned = false;
          }
          r = RAST.Expr.create_RawExpr(_2206_s);
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2205_name);
        }
      } else if (_source76.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2207___mcc_h11 = _source76.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2208_path = _2207___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _2209_p;
          Dafny.ISequence<Dafny.Rune> _out166;
          _out166 = DCOMP.COMP.GenPath(_2208_path);
          _2209_p = _out166;
          r = RAST.Expr.create_RawExpr(_2209_p);
          isOwned = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source76.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _2210___mcc_h12 = _source76.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IExpression> _2211_values = _2210___mcc_h12;
        {
          Dafny.ISequence<Dafny.Rune> _2212_s;
          _2212_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2213_i;
          _2213_i = BigInteger.Zero;
          while ((_2213_i) < (new BigInteger((_2211_values).Count))) {
            if ((_2213_i).Sign == 1) {
              _2212_s = Dafny.Sequence<Dafny.Rune>.Concat(_2212_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            RAST._IExpr _2214_recursiveGen;
            bool _2215___v35;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2216_recIdents;
            RAST._IExpr _out167;
            bool _out168;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out169;
            DCOMP.COMP.GenExpr((_2211_values).Select(_2213_i), selfIdent, @params, true, out _out167, out _out168, out _out169);
            _2214_recursiveGen = _out167;
            _2215___v35 = _out168;
            _2216_recIdents = _out169;
            _2212_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2212_s, (_2214_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2216_recIdents);
            _2213_i = (_2213_i) + (BigInteger.One);
          }
          _2212_s = Dafny.Sequence<Dafny.Rune>.Concat(_2212_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          r = RAST.Expr.create_RawExpr(_2212_s);
          isOwned = true;
        }
      } else if (_source76.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2217___mcc_h13 = _source76.dtor_path;
        Dafny.ISequence<DAST._IType> _2218___mcc_h14 = _source76.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _2219___mcc_h15 = _source76.dtor_args;
        Dafny.ISequence<DAST._IExpression> _2220_args = _2219___mcc_h15;
        Dafny.ISequence<DAST._IType> _2221_typeArgs = _2218___mcc_h14;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2222_path = _2217___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _2223_path;
          Dafny.ISequence<Dafny.Rune> _out170;
          _out170 = DCOMP.COMP.GenPath(_2222_path);
          _2223_path = _out170;
          Dafny.ISequence<Dafny.Rune> _2224_s;
          _2224_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _2223_path);
          if ((new BigInteger((_2221_typeArgs).Count)).Sign == 1) {
            BigInteger _2225_i;
            _2225_i = BigInteger.Zero;
            Dafny.ISequence<RAST._IType> _2226_typeExprs;
            _2226_typeExprs = Dafny.Sequence<RAST._IType>.FromElements();
            while ((_2225_i) < (new BigInteger((_2221_typeArgs).Count))) {
              RAST._IType _2227_typeExpr;
              RAST._IType _out171;
              _out171 = DCOMP.COMP.GenType((_2221_typeArgs).Select(_2225_i), false, false);
              _2227_typeExpr = _out171;
              _2226_typeExprs = Dafny.Sequence<RAST._IType>.Concat(_2226_typeExprs, Dafny.Sequence<RAST._IType>.FromElements(_2227_typeExpr));
              _2225_i = (_2225_i) + (BigInteger.One);
            }
            _2224_s = Dafny.Sequence<Dafny.Rune>.Concat(_2224_s, (RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"), _2226_typeExprs))._ToString(DCOMP.__default.IND));
          }
          _2224_s = Dafny.Sequence<Dafny.Rune>.Concat(_2224_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new("));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2228_i;
          _2228_i = BigInteger.Zero;
          while ((_2228_i) < (new BigInteger((_2220_args).Count))) {
            if ((_2228_i).Sign == 1) {
              _2224_s = Dafny.Sequence<Dafny.Rune>.Concat(_2224_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _2229_recursiveGen;
            bool _2230___v36;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2231_recIdents;
            RAST._IExpr _out172;
            bool _out173;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out174;
            DCOMP.COMP.GenExpr((_2220_args).Select(_2228_i), selfIdent, @params, true, out _out172, out _out173, out _out174);
            _2229_recursiveGen = _out172;
            _2230___v36 = _out173;
            _2231_recIdents = _out174;
            _2224_s = Dafny.Sequence<Dafny.Rune>.Concat(_2224_s, (_2229_recursiveGen)._ToString(DCOMP.__default.IND));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2231_recIdents);
            _2228_i = (_2228_i) + (BigInteger.One);
          }
          _2224_s = Dafny.Sequence<Dafny.Rune>.Concat(_2224_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          r = RAST.Expr.create_RawExpr(_2224_s);
          isOwned = true;
        }
      } else if (_source76.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _2232___mcc_h16 = _source76.dtor_dims;
        DAST._IType _2233___mcc_h17 = _source76.dtor_typ;
        DAST._IType _2234_typ = _2233___mcc_h17;
        Dafny.ISequence<DAST._IExpression> _2235_dims = _2232___mcc_h16;
        {
          BigInteger _2236_i;
          _2236_i = (new BigInteger((_2235_dims).Count)) - (BigInteger.One);
          RAST._IType _2237_genTyp;
          RAST._IType _out175;
          _out175 = DCOMP.COMP.GenType(_2234_typ, false, false);
          _2237_genTyp = _out175;
          Dafny.ISequence<Dafny.Rune> _2238_s;
          _2238_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_2237_genTyp)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::std::default::Default>::default()"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          while ((_2236_i).Sign != -1) {
            RAST._IExpr _2239_recursiveGen;
            bool _2240___v37;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2241_recIdents;
            RAST._IExpr _out176;
            bool _out177;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out178;
            DCOMP.COMP.GenExpr((_2235_dims).Select(_2236_i), selfIdent, @params, true, out _out176, out _out177, out _out178);
            _2239_recursiveGen = _out176;
            _2240___v37 = _out177;
            _2241_recIdents = _out178;
            _2238_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::std::cell::RefCell::new(vec!["), _2238_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("; <usize as ::dafny_runtime::NumCast>::from(")), (_2239_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]))"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2241_recIdents);
            _2236_i = (_2236_i) - (BigInteger.One);
          }
          r = RAST.Expr.create_RawExpr(_2238_s);
          isOwned = true;
        }
      } else if (_source76.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2242___mcc_h18 = _source76.dtor_path;
        Dafny.ISequence<DAST._IType> _2243___mcc_h19 = _source76.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _2244___mcc_h20 = _source76.dtor_variant;
        bool _2245___mcc_h21 = _source76.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _2246___mcc_h22 = _source76.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _2247_values = _2246___mcc_h22;
        bool _2248_isCo = _2245___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _2249_variant = _2244___mcc_h20;
        Dafny.ISequence<DAST._IType> _2250_typeArgs = _2243___mcc_h19;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2251_path = _2242___mcc_h18;
        {
          Dafny.ISequence<Dafny.Rune> _2252_path;
          Dafny.ISequence<Dafny.Rune> _out179;
          _out179 = DCOMP.COMP.GenPath(_2251_path);
          _2252_path = _out179;
          Dafny.ISequence<Dafny.Rune> _2253_s;
          _2253_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _2252_path), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          if ((new BigInteger((_2250_typeArgs).Count)).Sign == 1) {
            _2253_s = Dafny.Sequence<Dafny.Rune>.Concat(_2253_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
            BigInteger _2254_i;
            _2254_i = BigInteger.Zero;
            while ((_2254_i) < (new BigInteger((_2250_typeArgs).Count))) {
              if ((_2254_i).Sign == 1) {
                _2253_s = Dafny.Sequence<Dafny.Rune>.Concat(_2253_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              RAST._IType _2255_typeExpr;
              RAST._IType _out180;
              _out180 = DCOMP.COMP.GenType((_2250_typeArgs).Select(_2254_i), false, false);
              _2255_typeExpr = _out180;
              _2253_s = Dafny.Sequence<Dafny.Rune>.Concat(_2253_s, (_2255_typeExpr)._ToString(DCOMP.__default.IND));
              _2254_i = (_2254_i) + (BigInteger.One);
            }
            _2253_s = Dafny.Sequence<Dafny.Rune>.Concat(_2253_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::"));
          }
          _2253_s = Dafny.Sequence<Dafny.Rune>.Concat(_2253_s, DCOMP.__default.escapeIdent(_2249_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2256_i;
          _2256_i = BigInteger.Zero;
          _2253_s = Dafny.Sequence<Dafny.Rune>.Concat(_2253_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"));
          while ((_2256_i) < (new BigInteger((_2247_values).Count))) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs41 = (_2247_values).Select(_2256_i);
            Dafny.ISequence<Dafny.Rune> _2257_name = _let_tmp_rhs41.dtor__0;
            DAST._IExpression _2258_value = _let_tmp_rhs41.dtor__1;
            if ((_2256_i).Sign == 1) {
              _2253_s = Dafny.Sequence<Dafny.Rune>.Concat(_2253_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            if (_2248_isCo) {
              RAST._IExpr _2259_recursiveGen;
              bool _2260___v38;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2261_recIdents;
              RAST._IExpr _out181;
              bool _out182;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out183;
              DCOMP.COMP.GenExpr(_2258_value, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out181, out _out182, out _out183);
              _2259_recursiveGen = _out181;
              _2260___v38 = _out182;
              _2261_recIdents = _out183;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2261_recIdents);
              Dafny.ISequence<Dafny.Rune> _2262_allReadCloned;
              _2262_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_2261_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _2263_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_2 in (_2261_recIdents).Elements) {
                  _2263_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_2;
                  if ((_2261_recIdents).Contains(_2263_next)) {
                    goto after__ASSIGN_SUCH_THAT_2;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 2104)");
              after__ASSIGN_SUCH_THAT_2:;
                _2262_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2262_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_2263_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_2263_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _2261_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_2261_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2263_next));
              }
              _2253_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2253_s, DCOMP.__default.escapeIdent(_2257_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n")), _2262_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), (_2259_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
            } else {
              RAST._IExpr _2264_recursiveGen;
              bool _2265___v39;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2266_recIdents;
              RAST._IExpr _out184;
              bool _out185;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out186;
              DCOMP.COMP.GenExpr(_2258_value, selfIdent, @params, true, out _out184, out _out185, out _out186);
              _2264_recursiveGen = _out184;
              _2265___v39 = _out185;
              _2266_recIdents = _out186;
              _2253_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2253_s, DCOMP.__default.escapeIdent(_2257_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_2264_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2266_recIdents);
            }
            _2256_i = (_2256_i) + (BigInteger.One);
          }
          _2253_s = Dafny.Sequence<Dafny.Rune>.Concat(_2253_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" })"));
          r = RAST.Expr.create_RawExpr(_2253_s);
          isOwned = true;
        }
      } else if (_source76.is_Convert) {
        DAST._IExpression _2267___mcc_h23 = _source76.dtor_value;
        DAST._IType _2268___mcc_h24 = _source76.dtor_from;
        DAST._IType _2269___mcc_h25 = _source76.dtor_typ;
        DAST._IType _2270_toTpe = _2269___mcc_h25;
        DAST._IType _2271_fromTpe = _2268___mcc_h24;
        DAST._IExpression _2272_expr = _2267___mcc_h23;
        {
          if (object.Equals(_2271_fromTpe, _2270_toTpe)) {
            RAST._IExpr _2273_recursiveGen;
            bool _2274_recOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2275_recIdents;
            RAST._IExpr _out187;
            bool _out188;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out189;
            DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out187, out _out188, out _out189);
            _2273_recursiveGen = _out187;
            _2274_recOwned = _out188;
            _2275_recIdents = _out189;
            r = _2273_recursiveGen;
            isOwned = _2274_recOwned;
            readIdents = _2275_recIdents;
          } else {
            _System._ITuple2<DAST._IType, DAST._IType> _source82 = _System.Tuple2<DAST._IType, DAST._IType>.create(_2271_fromTpe, _2270_toTpe);
            DAST._IType _2276___mcc_h311 = _source82.dtor__0;
            DAST._IType _2277___mcc_h312 = _source82.dtor__1;
            DAST._IType _source83 = _2276___mcc_h311;
            if (_source83.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2278___mcc_h315 = _source83.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _2279___mcc_h316 = _source83.dtor_typeArgs;
              DAST._IResolvedType _2280___mcc_h317 = _source83.dtor_resolved;
              DAST._IResolvedType _source84 = _2280___mcc_h317;
              if (_source84.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2281___mcc_h327 = _source84.dtor_path;
                DAST._IType _source85 = _2277___mcc_h312;
                if (_source85.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2282___mcc_h331 = _source85.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2283___mcc_h332 = _source85.dtor_typeArgs;
                  DAST._IResolvedType _2284___mcc_h333 = _source85.dtor_resolved;
                  DAST._IResolvedType _source86 = _2284___mcc_h333;
                  if (_source86.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2285___mcc_h337 = _source86.dtor_path;
                    {
                      RAST._IExpr _2286_recursiveGen;
                      bool _2287_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2288_recIdents;
                      RAST._IExpr _out190;
                      bool _out191;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out192;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out190, out _out191, out _out192);
                      _2286_recursiveGen = _out190;
                      _2287_recOwned = _out191;
                      _2288_recIdents = _out192;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2286_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _2287_recOwned;
                      readIdents = _2288_recIdents;
                    }
                  } else if (_source86.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2289___mcc_h339 = _source86.dtor_path;
                    {
                      RAST._IExpr _2290_recursiveGen;
                      bool _2291_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2292_recIdents;
                      RAST._IExpr _out193;
                      bool _out194;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out195;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out193, out _out194, out _out195);
                      _2290_recursiveGen = _out193;
                      _2291_recOwned = _out194;
                      _2292_recIdents = _out195;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2290_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _2291_recOwned;
                      readIdents = _2292_recIdents;
                    }
                  } else {
                    DAST._IType _2293___mcc_h341 = _source86.dtor_baseType;
                    DAST._INewtypeRange _2294___mcc_h342 = _source86.dtor_range;
                    bool _2295___mcc_h343 = _source86.dtor_erase;
                    bool _2296_erase = _2295___mcc_h343;
                    DAST._INewtypeRange _2297_range = _2294___mcc_h342;
                    DAST._IType _2298_b = _2293___mcc_h341;
                    {
                      if (object.Equals(_2271_fromTpe, _2298_b)) {
                        RAST._IExpr _2299_recursiveGen;
                        bool _2300_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2301_recIdents;
                        RAST._IExpr _out196;
                        bool _out197;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out198;
                        DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out196, out _out197, out _out198);
                        _2299_recursiveGen = _out196;
                        _2300_recOwned = _out197;
                        _2301_recIdents = _out198;
                        Std.Wrappers._IOption<RAST._IType> _2302_potentialRhsType;
                        _2302_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_2298_b, _2297_range);
                        Std.Wrappers._IOption<RAST._IType> _source87 = _2302_potentialRhsType;
                        if (_source87.is_None) {
                          if (_2296_erase) {
                            r = _2299_recursiveGen;
                          } else {
                            RAST._IType _2303_rhsType;
                            RAST._IType _out199;
                            _out199 = DCOMP.COMP.GenType(_2270_toTpe, true, false);
                            _2303_rhsType = _out199;
                            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_2303_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_2299_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                          }
                          isOwned = _2300_recOwned;
                        } else {
                          RAST._IType _2304___mcc_h1239 = _source87.dtor_value;
                          RAST._IType _2305_v = _2304___mcc_h1239;
                          r = RAST.Expr.create_ConversionNum(_2305_v, _2299_recursiveGen);
                          isOwned = true;
                        }
                        readIdents = _2301_recIdents;
                      } else {
                        RAST._IExpr _out200;
                        bool _out201;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out202;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2272_expr, _2271_fromTpe, _2298_b), _2298_b, _2270_toTpe), selfIdent, @params, mustOwn, out _out200, out _out201, out _out202);
                        r = _out200;
                        isOwned = _out201;
                        readIdents = _out202;
                      }
                    }
                  }
                } else if (_source85.is_Nullable) {
                  DAST._IType _2306___mcc_h347 = _source85.dtor_Nullable_a0;
                  {
                    RAST._IExpr _2307_recursiveGen;
                    bool _2308_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2309_recIdents;
                    RAST._IExpr _out203;
                    bool _out204;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out205;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out203, out _out204, out _out205);
                    _2307_recursiveGen = _out203;
                    _2308_recOwned = _out204;
                    _2309_recIdents = _out205;
                    Dafny.ISequence<Dafny.Rune> _2310_s;
                    _2310_s = (_2307_recursiveGen)._ToString(DCOMP.__default.IND);
                    if (!(_2308_recOwned)) {
                      _2310_s = Dafny.Sequence<Dafny.Rune>.Concat(_2310_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    _2310_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2310_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    r = RAST.Expr.create_RawExpr(_2310_s);
                    isOwned = true;
                    readIdents = _2309_recIdents;
                  }
                } else if (_source85.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2311___mcc_h349 = _source85.dtor_Tuple_a0;
                  {
                    RAST._IExpr _2312_recursiveGen;
                    bool _2313_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2314_recIdents;
                    RAST._IExpr _out206;
                    bool _out207;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out208;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out206, out _out207, out _out208);
                    _2312_recursiveGen = _out206;
                    _2313_recOwned = _out207;
                    _2314_recIdents = _out208;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2312_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2313_recOwned;
                    readIdents = _2314_recIdents;
                  }
                } else if (_source85.is_Array) {
                  DAST._IType _2315___mcc_h351 = _source85.dtor_element;
                  BigInteger _2316___mcc_h352 = _source85.dtor_dims;
                  {
                    RAST._IExpr _2317_recursiveGen;
                    bool _2318_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2319_recIdents;
                    RAST._IExpr _out209;
                    bool _out210;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out211;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out209, out _out210, out _out211);
                    _2317_recursiveGen = _out209;
                    _2318_recOwned = _out210;
                    _2319_recIdents = _out211;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2317_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2318_recOwned;
                    readIdents = _2319_recIdents;
                  }
                } else if (_source85.is_Seq) {
                  DAST._IType _2320___mcc_h355 = _source85.dtor_element;
                  {
                    RAST._IExpr _2321_recursiveGen;
                    bool _2322_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2323_recIdents;
                    RAST._IExpr _out212;
                    bool _out213;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out214;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out212, out _out213, out _out214);
                    _2321_recursiveGen = _out212;
                    _2322_recOwned = _out213;
                    _2323_recIdents = _out214;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2321_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2322_recOwned;
                    readIdents = _2323_recIdents;
                  }
                } else if (_source85.is_Set) {
                  DAST._IType _2324___mcc_h357 = _source85.dtor_element;
                  {
                    RAST._IExpr _2325_recursiveGen;
                    bool _2326_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2327_recIdents;
                    RAST._IExpr _out215;
                    bool _out216;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out217;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out215, out _out216, out _out217);
                    _2325_recursiveGen = _out215;
                    _2326_recOwned = _out216;
                    _2327_recIdents = _out217;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2325_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2326_recOwned;
                    readIdents = _2327_recIdents;
                  }
                } else if (_source85.is_Multiset) {
                  DAST._IType _2328___mcc_h359 = _source85.dtor_element;
                  {
                    RAST._IExpr _2329_recursiveGen;
                    bool _2330_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2331_recIdents;
                    RAST._IExpr _out218;
                    bool _out219;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out220;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out218, out _out219, out _out220);
                    _2329_recursiveGen = _out218;
                    _2330_recOwned = _out219;
                    _2331_recIdents = _out220;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2329_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2330_recOwned;
                    readIdents = _2331_recIdents;
                  }
                } else if (_source85.is_Map) {
                  DAST._IType _2332___mcc_h361 = _source85.dtor_key;
                  DAST._IType _2333___mcc_h362 = _source85.dtor_value;
                  {
                    RAST._IExpr _2334_recursiveGen;
                    bool _2335_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2336_recIdents;
                    RAST._IExpr _out221;
                    bool _out222;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out223;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out221, out _out222, out _out223);
                    _2334_recursiveGen = _out221;
                    _2335_recOwned = _out222;
                    _2336_recIdents = _out223;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2334_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2335_recOwned;
                    readIdents = _2336_recIdents;
                  }
                } else if (_source85.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2337___mcc_h365 = _source85.dtor_args;
                  DAST._IType _2338___mcc_h366 = _source85.dtor_result;
                  {
                    RAST._IExpr _2339_recursiveGen;
                    bool _2340_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2341_recIdents;
                    RAST._IExpr _out224;
                    bool _out225;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out226;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out224, out _out225, out _out226);
                    _2339_recursiveGen = _out224;
                    _2340_recOwned = _out225;
                    _2341_recIdents = _out226;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2339_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2340_recOwned;
                    readIdents = _2341_recIdents;
                  }
                } else if (_source85.is_Primitive) {
                  DAST._IPrimitive _2342___mcc_h369 = _source85.dtor_Primitive_a0;
                  {
                    RAST._IExpr _2343_recursiveGen;
                    bool _2344_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2345_recIdents;
                    RAST._IExpr _out227;
                    bool _out228;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out229;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out227, out _out228, out _out229);
                    _2343_recursiveGen = _out227;
                    _2344_recOwned = _out228;
                    _2345_recIdents = _out229;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2343_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2344_recOwned;
                    readIdents = _2345_recIdents;
                  }
                } else if (_source85.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2346___mcc_h371 = _source85.dtor_Passthrough_a0;
                  {
                    RAST._IExpr _2347_recursiveGen;
                    bool _2348_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2349_recIdents;
                    RAST._IExpr _out230;
                    bool _out231;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out232;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out230, out _out231, out _out232);
                    _2347_recursiveGen = _out230;
                    _2348_recOwned = _out231;
                    _2349_recIdents = _out232;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2347_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2348_recOwned;
                    readIdents = _2349_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2350___mcc_h373 = _source85.dtor_TypeArg_a0;
                  {
                    RAST._IExpr _2351_recursiveGen;
                    bool _2352_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2353_recIdents;
                    RAST._IExpr _out233;
                    bool _out234;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out235;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out233, out _out234, out _out235);
                    _2351_recursiveGen = _out233;
                    _2352_recOwned = _out234;
                    _2353_recIdents = _out235;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2351_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2352_recOwned;
                    readIdents = _2353_recIdents;
                  }
                }
              } else if (_source84.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2354___mcc_h375 = _source84.dtor_path;
                DAST._IType _source88 = _2277___mcc_h312;
                if (_source88.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2355___mcc_h379 = _source88.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2356___mcc_h380 = _source88.dtor_typeArgs;
                  DAST._IResolvedType _2357___mcc_h381 = _source88.dtor_resolved;
                  DAST._IResolvedType _source89 = _2357___mcc_h381;
                  if (_source89.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2358___mcc_h385 = _source89.dtor_path;
                    {
                      RAST._IExpr _2359_recursiveGen;
                      bool _2360_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2361_recIdents;
                      RAST._IExpr _out236;
                      bool _out237;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out238;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out236, out _out237, out _out238);
                      _2359_recursiveGen = _out236;
                      _2360_recOwned = _out237;
                      _2361_recIdents = _out238;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2359_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _2360_recOwned;
                      readIdents = _2361_recIdents;
                    }
                  } else if (_source89.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2362___mcc_h387 = _source89.dtor_path;
                    {
                      RAST._IExpr _2363_recursiveGen;
                      bool _2364_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2365_recIdents;
                      RAST._IExpr _out239;
                      bool _out240;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out241;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out239, out _out240, out _out241);
                      _2363_recursiveGen = _out239;
                      _2364_recOwned = _out240;
                      _2365_recIdents = _out241;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2363_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _2364_recOwned;
                      readIdents = _2365_recIdents;
                    }
                  } else {
                    DAST._IType _2366___mcc_h389 = _source89.dtor_baseType;
                    DAST._INewtypeRange _2367___mcc_h390 = _source89.dtor_range;
                    bool _2368___mcc_h391 = _source89.dtor_erase;
                    bool _2369_erase = _2368___mcc_h391;
                    DAST._INewtypeRange _2370_range = _2367___mcc_h390;
                    DAST._IType _2371_b = _2366___mcc_h389;
                    {
                      if (object.Equals(_2271_fromTpe, _2371_b)) {
                        RAST._IExpr _2372_recursiveGen;
                        bool _2373_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2374_recIdents;
                        RAST._IExpr _out242;
                        bool _out243;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out244;
                        DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out242, out _out243, out _out244);
                        _2372_recursiveGen = _out242;
                        _2373_recOwned = _out243;
                        _2374_recIdents = _out244;
                        Std.Wrappers._IOption<RAST._IType> _2375_potentialRhsType;
                        _2375_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_2371_b, _2370_range);
                        Std.Wrappers._IOption<RAST._IType> _source90 = _2375_potentialRhsType;
                        if (_source90.is_None) {
                          if (_2369_erase) {
                            r = _2372_recursiveGen;
                          } else {
                            RAST._IType _2376_rhsType;
                            RAST._IType _out245;
                            _out245 = DCOMP.COMP.GenType(_2270_toTpe, true, false);
                            _2376_rhsType = _out245;
                            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_2376_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_2372_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                          }
                          isOwned = _2373_recOwned;
                        } else {
                          RAST._IType _2377___mcc_h1240 = _source90.dtor_value;
                          RAST._IType _2378_v = _2377___mcc_h1240;
                          r = RAST.Expr.create_ConversionNum(_2378_v, _2372_recursiveGen);
                          isOwned = true;
                        }
                        readIdents = _2374_recIdents;
                      } else {
                        RAST._IExpr _out246;
                        bool _out247;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out248;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2272_expr, _2271_fromTpe, _2371_b), _2371_b, _2270_toTpe), selfIdent, @params, mustOwn, out _out246, out _out247, out _out248);
                        r = _out246;
                        isOwned = _out247;
                        readIdents = _out248;
                      }
                    }
                  }
                } else if (_source88.is_Nullable) {
                  DAST._IType _2379___mcc_h395 = _source88.dtor_Nullable_a0;
                  {
                    RAST._IExpr _2380_recursiveGen;
                    bool _2381_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2382_recIdents;
                    RAST._IExpr _out249;
                    bool _out250;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out251;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out249, out _out250, out _out251);
                    _2380_recursiveGen = _out249;
                    _2381_recOwned = _out250;
                    _2382_recIdents = _out251;
                    Dafny.ISequence<Dafny.Rune> _2383_s;
                    _2383_s = (_2380_recursiveGen)._ToString(DCOMP.__default.IND);
                    if (!(_2381_recOwned)) {
                      _2383_s = Dafny.Sequence<Dafny.Rune>.Concat(_2383_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    _2383_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2383_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    r = RAST.Expr.create_RawExpr(_2383_s);
                    isOwned = true;
                    readIdents = _2382_recIdents;
                  }
                } else if (_source88.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2384___mcc_h397 = _source88.dtor_Tuple_a0;
                  {
                    RAST._IExpr _2385_recursiveGen;
                    bool _2386_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2387_recIdents;
                    RAST._IExpr _out252;
                    bool _out253;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out254;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out252, out _out253, out _out254);
                    _2385_recursiveGen = _out252;
                    _2386_recOwned = _out253;
                    _2387_recIdents = _out254;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2385_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2386_recOwned;
                    readIdents = _2387_recIdents;
                  }
                } else if (_source88.is_Array) {
                  DAST._IType _2388___mcc_h399 = _source88.dtor_element;
                  BigInteger _2389___mcc_h400 = _source88.dtor_dims;
                  {
                    RAST._IExpr _2390_recursiveGen;
                    bool _2391_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2392_recIdents;
                    RAST._IExpr _out255;
                    bool _out256;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out257;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out255, out _out256, out _out257);
                    _2390_recursiveGen = _out255;
                    _2391_recOwned = _out256;
                    _2392_recIdents = _out257;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2390_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2391_recOwned;
                    readIdents = _2392_recIdents;
                  }
                } else if (_source88.is_Seq) {
                  DAST._IType _2393___mcc_h403 = _source88.dtor_element;
                  {
                    RAST._IExpr _2394_recursiveGen;
                    bool _2395_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2396_recIdents;
                    RAST._IExpr _out258;
                    bool _out259;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out260;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out258, out _out259, out _out260);
                    _2394_recursiveGen = _out258;
                    _2395_recOwned = _out259;
                    _2396_recIdents = _out260;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2394_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2395_recOwned;
                    readIdents = _2396_recIdents;
                  }
                } else if (_source88.is_Set) {
                  DAST._IType _2397___mcc_h405 = _source88.dtor_element;
                  {
                    RAST._IExpr _2398_recursiveGen;
                    bool _2399_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2400_recIdents;
                    RAST._IExpr _out261;
                    bool _out262;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out263;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out261, out _out262, out _out263);
                    _2398_recursiveGen = _out261;
                    _2399_recOwned = _out262;
                    _2400_recIdents = _out263;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2398_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2399_recOwned;
                    readIdents = _2400_recIdents;
                  }
                } else if (_source88.is_Multiset) {
                  DAST._IType _2401___mcc_h407 = _source88.dtor_element;
                  {
                    RAST._IExpr _2402_recursiveGen;
                    bool _2403_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2404_recIdents;
                    RAST._IExpr _out264;
                    bool _out265;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out266;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out264, out _out265, out _out266);
                    _2402_recursiveGen = _out264;
                    _2403_recOwned = _out265;
                    _2404_recIdents = _out266;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2402_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2403_recOwned;
                    readIdents = _2404_recIdents;
                  }
                } else if (_source88.is_Map) {
                  DAST._IType _2405___mcc_h409 = _source88.dtor_key;
                  DAST._IType _2406___mcc_h410 = _source88.dtor_value;
                  {
                    RAST._IExpr _2407_recursiveGen;
                    bool _2408_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2409_recIdents;
                    RAST._IExpr _out267;
                    bool _out268;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out269;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out267, out _out268, out _out269);
                    _2407_recursiveGen = _out267;
                    _2408_recOwned = _out268;
                    _2409_recIdents = _out269;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2407_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2408_recOwned;
                    readIdents = _2409_recIdents;
                  }
                } else if (_source88.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2410___mcc_h413 = _source88.dtor_args;
                  DAST._IType _2411___mcc_h414 = _source88.dtor_result;
                  {
                    RAST._IExpr _2412_recursiveGen;
                    bool _2413_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2414_recIdents;
                    RAST._IExpr _out270;
                    bool _out271;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out272;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out270, out _out271, out _out272);
                    _2412_recursiveGen = _out270;
                    _2413_recOwned = _out271;
                    _2414_recIdents = _out272;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2412_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2413_recOwned;
                    readIdents = _2414_recIdents;
                  }
                } else if (_source88.is_Primitive) {
                  DAST._IPrimitive _2415___mcc_h417 = _source88.dtor_Primitive_a0;
                  {
                    RAST._IExpr _2416_recursiveGen;
                    bool _2417_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2418_recIdents;
                    RAST._IExpr _out273;
                    bool _out274;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out275;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out273, out _out274, out _out275);
                    _2416_recursiveGen = _out273;
                    _2417_recOwned = _out274;
                    _2418_recIdents = _out275;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2416_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2417_recOwned;
                    readIdents = _2418_recIdents;
                  }
                } else if (_source88.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2419___mcc_h419 = _source88.dtor_Passthrough_a0;
                  {
                    RAST._IExpr _2420_recursiveGen;
                    bool _2421_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2422_recIdents;
                    RAST._IExpr _out276;
                    bool _out277;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out278;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out276, out _out277, out _out278);
                    _2420_recursiveGen = _out276;
                    _2421_recOwned = _out277;
                    _2422_recIdents = _out278;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2420_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2421_recOwned;
                    readIdents = _2422_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2423___mcc_h421 = _source88.dtor_TypeArg_a0;
                  {
                    RAST._IExpr _2424_recursiveGen;
                    bool _2425_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2426_recIdents;
                    RAST._IExpr _out279;
                    bool _out280;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out281;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out279, out _out280, out _out281);
                    _2424_recursiveGen = _out279;
                    _2425_recOwned = _out280;
                    _2426_recIdents = _out281;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2424_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2425_recOwned;
                    readIdents = _2426_recIdents;
                  }
                }
              } else {
                DAST._IType _2427___mcc_h423 = _source84.dtor_baseType;
                DAST._INewtypeRange _2428___mcc_h424 = _source84.dtor_range;
                bool _2429___mcc_h425 = _source84.dtor_erase;
                DAST._IType _source91 = _2277___mcc_h312;
                if (_source91.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2430___mcc_h435 = _source91.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2431___mcc_h436 = _source91.dtor_typeArgs;
                  DAST._IResolvedType _2432___mcc_h437 = _source91.dtor_resolved;
                  DAST._IResolvedType _source92 = _2432___mcc_h437;
                  if (_source92.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2433___mcc_h444 = _source92.dtor_path;
                    bool _2434_erase = _2429___mcc_h425;
                    DAST._INewtypeRange _2435_range = _2428___mcc_h424;
                    DAST._IType _2436_b = _2427___mcc_h423;
                    {
                      if (object.Equals(_2436_b, _2270_toTpe)) {
                        RAST._IExpr _2437_recursiveGen;
                        bool _2438_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2439_recIdents;
                        RAST._IExpr _out282;
                        bool _out283;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out284;
                        DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out282, out _out283, out _out284);
                        _2437_recursiveGen = _out282;
                        _2438_recOwned = _out283;
                        _2439_recIdents = _out284;
                        if (_2434_erase) {
                          r = _2437_recursiveGen;
                        } else {
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2437_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                        }
                        isOwned = _2438_recOwned;
                        readIdents = _2439_recIdents;
                      } else {
                        RAST._IExpr _out285;
                        bool _out286;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out287;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2272_expr, _2271_fromTpe, _2436_b), _2436_b, _2270_toTpe), selfIdent, @params, mustOwn, out _out285, out _out286, out _out287);
                        r = _out285;
                        isOwned = _out286;
                        readIdents = _out287;
                      }
                    }
                  } else if (_source92.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2440___mcc_h447 = _source92.dtor_path;
                    bool _2441_erase = _2429___mcc_h425;
                    DAST._INewtypeRange _2442_range = _2428___mcc_h424;
                    DAST._IType _2443_b = _2427___mcc_h423;
                    {
                      if (object.Equals(_2443_b, _2270_toTpe)) {
                        RAST._IExpr _2444_recursiveGen;
                        bool _2445_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2446_recIdents;
                        RAST._IExpr _out288;
                        bool _out289;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out290;
                        DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out288, out _out289, out _out290);
                        _2444_recursiveGen = _out288;
                        _2445_recOwned = _out289;
                        _2446_recIdents = _out290;
                        if (_2441_erase) {
                          r = _2444_recursiveGen;
                        } else {
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2444_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                        }
                        isOwned = _2445_recOwned;
                        readIdents = _2446_recIdents;
                      } else {
                        RAST._IExpr _out291;
                        bool _out292;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out293;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2272_expr, _2271_fromTpe, _2443_b), _2443_b, _2270_toTpe), selfIdent, @params, mustOwn, out _out291, out _out292, out _out293);
                        r = _out291;
                        isOwned = _out292;
                        readIdents = _out293;
                      }
                    }
                  } else {
                    DAST._IType _2447___mcc_h450 = _source92.dtor_baseType;
                    DAST._INewtypeRange _2448___mcc_h451 = _source92.dtor_range;
                    bool _2449___mcc_h452 = _source92.dtor_erase;
                    bool _2450_erase = _2449___mcc_h452;
                    DAST._INewtypeRange _2451_range = _2448___mcc_h451;
                    DAST._IType _2452_b = _2447___mcc_h450;
                    {
                      if (object.Equals(_2271_fromTpe, _2452_b)) {
                        RAST._IExpr _2453_recursiveGen;
                        bool _2454_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2455_recIdents;
                        RAST._IExpr _out294;
                        bool _out295;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out296;
                        DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out294, out _out295, out _out296);
                        _2453_recursiveGen = _out294;
                        _2454_recOwned = _out295;
                        _2455_recIdents = _out296;
                        Std.Wrappers._IOption<RAST._IType> _2456_potentialRhsType;
                        _2456_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_2452_b, _2451_range);
                        Std.Wrappers._IOption<RAST._IType> _source93 = _2456_potentialRhsType;
                        if (_source93.is_None) {
                          if (_2450_erase) {
                            r = _2453_recursiveGen;
                          } else {
                            RAST._IType _2457_rhsType;
                            RAST._IType _out297;
                            _out297 = DCOMP.COMP.GenType(_2270_toTpe, true, false);
                            _2457_rhsType = _out297;
                            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_2457_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_2453_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                          }
                          isOwned = _2454_recOwned;
                        } else {
                          RAST._IType _2458___mcc_h1241 = _source93.dtor_value;
                          RAST._IType _2459_v = _2458___mcc_h1241;
                          r = RAST.Expr.create_ConversionNum(_2459_v, _2453_recursiveGen);
                          isOwned = true;
                        }
                        readIdents = _2455_recIdents;
                      } else {
                        RAST._IExpr _out298;
                        bool _out299;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out300;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2272_expr, _2271_fromTpe, _2452_b), _2452_b, _2270_toTpe), selfIdent, @params, mustOwn, out _out298, out _out299, out _out300);
                        r = _out298;
                        isOwned = _out299;
                        readIdents = _out300;
                      }
                    }
                  }
                } else if (_source91.is_Nullable) {
                  DAST._IType _2460___mcc_h459 = _source91.dtor_Nullable_a0;
                  {
                    RAST._IExpr _2461_recursiveGen;
                    bool _2462_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2463_recIdents;
                    RAST._IExpr _out301;
                    bool _out302;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out303;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out301, out _out302, out _out303);
                    _2461_recursiveGen = _out301;
                    _2462_recOwned = _out302;
                    _2463_recIdents = _out303;
                    Dafny.ISequence<Dafny.Rune> _2464_s;
                    _2464_s = (_2461_recursiveGen)._ToString(DCOMP.__default.IND);
                    if (!(_2462_recOwned)) {
                      _2464_s = Dafny.Sequence<Dafny.Rune>.Concat(_2464_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    _2464_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2464_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    r = RAST.Expr.create_RawExpr(_2464_s);
                    isOwned = true;
                    readIdents = _2463_recIdents;
                  }
                } else if (_source91.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2465___mcc_h462 = _source91.dtor_Tuple_a0;
                  bool _2466_erase = _2429___mcc_h425;
                  DAST._INewtypeRange _2467_range = _2428___mcc_h424;
                  DAST._IType _2468_b = _2427___mcc_h423;
                  {
                    if (object.Equals(_2468_b, _2270_toTpe)) {
                      RAST._IExpr _2469_recursiveGen;
                      bool _2470_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2471_recIdents;
                      RAST._IExpr _out304;
                      bool _out305;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out306;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out304, out _out305, out _out306);
                      _2469_recursiveGen = _out304;
                      _2470_recOwned = _out305;
                      _2471_recIdents = _out306;
                      if (_2466_erase) {
                        r = _2469_recursiveGen;
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2469_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                      }
                      isOwned = _2470_recOwned;
                      readIdents = _2471_recIdents;
                    } else {
                      RAST._IExpr _out307;
                      bool _out308;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out309;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2272_expr, _2271_fromTpe, _2468_b), _2468_b, _2270_toTpe), selfIdent, @params, mustOwn, out _out307, out _out308, out _out309);
                      r = _out307;
                      isOwned = _out308;
                      readIdents = _out309;
                    }
                  }
                } else if (_source91.is_Array) {
                  DAST._IType _2472___mcc_h465 = _source91.dtor_element;
                  BigInteger _2473___mcc_h466 = _source91.dtor_dims;
                  bool _2474_erase = _2429___mcc_h425;
                  DAST._INewtypeRange _2475_range = _2428___mcc_h424;
                  DAST._IType _2476_b = _2427___mcc_h423;
                  {
                    if (object.Equals(_2476_b, _2270_toTpe)) {
                      RAST._IExpr _2477_recursiveGen;
                      bool _2478_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2479_recIdents;
                      RAST._IExpr _out310;
                      bool _out311;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out312;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out310, out _out311, out _out312);
                      _2477_recursiveGen = _out310;
                      _2478_recOwned = _out311;
                      _2479_recIdents = _out312;
                      if (_2474_erase) {
                        r = _2477_recursiveGen;
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2477_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                      }
                      isOwned = _2478_recOwned;
                      readIdents = _2479_recIdents;
                    } else {
                      RAST._IExpr _out313;
                      bool _out314;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out315;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2272_expr, _2271_fromTpe, _2476_b), _2476_b, _2270_toTpe), selfIdent, @params, mustOwn, out _out313, out _out314, out _out315);
                      r = _out313;
                      isOwned = _out314;
                      readIdents = _out315;
                    }
                  }
                } else if (_source91.is_Seq) {
                  DAST._IType _2480___mcc_h471 = _source91.dtor_element;
                  bool _2481_erase = _2429___mcc_h425;
                  DAST._INewtypeRange _2482_range = _2428___mcc_h424;
                  DAST._IType _2483_b = _2427___mcc_h423;
                  {
                    if (object.Equals(_2483_b, _2270_toTpe)) {
                      RAST._IExpr _2484_recursiveGen;
                      bool _2485_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2486_recIdents;
                      RAST._IExpr _out316;
                      bool _out317;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out318;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out316, out _out317, out _out318);
                      _2484_recursiveGen = _out316;
                      _2485_recOwned = _out317;
                      _2486_recIdents = _out318;
                      if (_2481_erase) {
                        r = _2484_recursiveGen;
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2484_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                      }
                      isOwned = _2485_recOwned;
                      readIdents = _2486_recIdents;
                    } else {
                      RAST._IExpr _out319;
                      bool _out320;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out321;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2272_expr, _2271_fromTpe, _2483_b), _2483_b, _2270_toTpe), selfIdent, @params, mustOwn, out _out319, out _out320, out _out321);
                      r = _out319;
                      isOwned = _out320;
                      readIdents = _out321;
                    }
                  }
                } else if (_source91.is_Set) {
                  DAST._IType _2487___mcc_h474 = _source91.dtor_element;
                  bool _2488_erase = _2429___mcc_h425;
                  DAST._INewtypeRange _2489_range = _2428___mcc_h424;
                  DAST._IType _2490_b = _2427___mcc_h423;
                  {
                    if (object.Equals(_2490_b, _2270_toTpe)) {
                      RAST._IExpr _2491_recursiveGen;
                      bool _2492_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2493_recIdents;
                      RAST._IExpr _out322;
                      bool _out323;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out324;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out322, out _out323, out _out324);
                      _2491_recursiveGen = _out322;
                      _2492_recOwned = _out323;
                      _2493_recIdents = _out324;
                      if (_2488_erase) {
                        r = _2491_recursiveGen;
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2491_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                      }
                      isOwned = _2492_recOwned;
                      readIdents = _2493_recIdents;
                    } else {
                      RAST._IExpr _out325;
                      bool _out326;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out327;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2272_expr, _2271_fromTpe, _2490_b), _2490_b, _2270_toTpe), selfIdent, @params, mustOwn, out _out325, out _out326, out _out327);
                      r = _out325;
                      isOwned = _out326;
                      readIdents = _out327;
                    }
                  }
                } else if (_source91.is_Multiset) {
                  DAST._IType _2494___mcc_h477 = _source91.dtor_element;
                  bool _2495_erase = _2429___mcc_h425;
                  DAST._INewtypeRange _2496_range = _2428___mcc_h424;
                  DAST._IType _2497_b = _2427___mcc_h423;
                  {
                    if (object.Equals(_2497_b, _2270_toTpe)) {
                      RAST._IExpr _2498_recursiveGen;
                      bool _2499_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2500_recIdents;
                      RAST._IExpr _out328;
                      bool _out329;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out330;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out328, out _out329, out _out330);
                      _2498_recursiveGen = _out328;
                      _2499_recOwned = _out329;
                      _2500_recIdents = _out330;
                      if (_2495_erase) {
                        r = _2498_recursiveGen;
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2498_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                      }
                      isOwned = _2499_recOwned;
                      readIdents = _2500_recIdents;
                    } else {
                      RAST._IExpr _out331;
                      bool _out332;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out333;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2272_expr, _2271_fromTpe, _2497_b), _2497_b, _2270_toTpe), selfIdent, @params, mustOwn, out _out331, out _out332, out _out333);
                      r = _out331;
                      isOwned = _out332;
                      readIdents = _out333;
                    }
                  }
                } else if (_source91.is_Map) {
                  DAST._IType _2501___mcc_h480 = _source91.dtor_key;
                  DAST._IType _2502___mcc_h481 = _source91.dtor_value;
                  bool _2503_erase = _2429___mcc_h425;
                  DAST._INewtypeRange _2504_range = _2428___mcc_h424;
                  DAST._IType _2505_b = _2427___mcc_h423;
                  {
                    if (object.Equals(_2505_b, _2270_toTpe)) {
                      RAST._IExpr _2506_recursiveGen;
                      bool _2507_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2508_recIdents;
                      RAST._IExpr _out334;
                      bool _out335;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out336;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out334, out _out335, out _out336);
                      _2506_recursiveGen = _out334;
                      _2507_recOwned = _out335;
                      _2508_recIdents = _out336;
                      if (_2503_erase) {
                        r = _2506_recursiveGen;
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2506_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                      }
                      isOwned = _2507_recOwned;
                      readIdents = _2508_recIdents;
                    } else {
                      RAST._IExpr _out337;
                      bool _out338;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out339;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2272_expr, _2271_fromTpe, _2505_b), _2505_b, _2270_toTpe), selfIdent, @params, mustOwn, out _out337, out _out338, out _out339);
                      r = _out337;
                      isOwned = _out338;
                      readIdents = _out339;
                    }
                  }
                } else if (_source91.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2509___mcc_h486 = _source91.dtor_args;
                  DAST._IType _2510___mcc_h487 = _source91.dtor_result;
                  bool _2511_erase = _2429___mcc_h425;
                  DAST._INewtypeRange _2512_range = _2428___mcc_h424;
                  DAST._IType _2513_b = _2427___mcc_h423;
                  {
                    if (object.Equals(_2513_b, _2270_toTpe)) {
                      RAST._IExpr _2514_recursiveGen;
                      bool _2515_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2516_recIdents;
                      RAST._IExpr _out340;
                      bool _out341;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out342;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out340, out _out341, out _out342);
                      _2514_recursiveGen = _out340;
                      _2515_recOwned = _out341;
                      _2516_recIdents = _out342;
                      if (_2511_erase) {
                        r = _2514_recursiveGen;
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2514_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                      }
                      isOwned = _2515_recOwned;
                      readIdents = _2516_recIdents;
                    } else {
                      RAST._IExpr _out343;
                      bool _out344;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out345;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2272_expr, _2271_fromTpe, _2513_b), _2513_b, _2270_toTpe), selfIdent, @params, mustOwn, out _out343, out _out344, out _out345);
                      r = _out343;
                      isOwned = _out344;
                      readIdents = _out345;
                    }
                  }
                } else if (_source91.is_Primitive) {
                  DAST._IPrimitive _2517___mcc_h492 = _source91.dtor_Primitive_a0;
                  bool _2518_erase = _2429___mcc_h425;
                  DAST._INewtypeRange _2519_range = _2428___mcc_h424;
                  DAST._IType _2520_b = _2427___mcc_h423;
                  {
                    if (object.Equals(_2520_b, _2270_toTpe)) {
                      RAST._IExpr _2521_recursiveGen;
                      bool _2522_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2523_recIdents;
                      RAST._IExpr _out346;
                      bool _out347;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out348;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out346, out _out347, out _out348);
                      _2521_recursiveGen = _out346;
                      _2522_recOwned = _out347;
                      _2523_recIdents = _out348;
                      if (_2518_erase) {
                        r = _2521_recursiveGen;
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2521_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                      }
                      isOwned = _2522_recOwned;
                      readIdents = _2523_recIdents;
                    } else {
                      RAST._IExpr _out349;
                      bool _out350;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out351;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2272_expr, _2271_fromTpe, _2520_b), _2520_b, _2270_toTpe), selfIdent, @params, mustOwn, out _out349, out _out350, out _out351);
                      r = _out349;
                      isOwned = _out350;
                      readIdents = _out351;
                    }
                  }
                } else if (_source91.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2524___mcc_h495 = _source91.dtor_Passthrough_a0;
                  bool _2525_erase = _2429___mcc_h425;
                  DAST._INewtypeRange _2526_range = _2428___mcc_h424;
                  DAST._IType _2527_b = _2427___mcc_h423;
                  {
                    if (object.Equals(_2527_b, _2270_toTpe)) {
                      RAST._IExpr _2528_recursiveGen;
                      bool _2529_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2530_recIdents;
                      RAST._IExpr _out352;
                      bool _out353;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out354;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out352, out _out353, out _out354);
                      _2528_recursiveGen = _out352;
                      _2529_recOwned = _out353;
                      _2530_recIdents = _out354;
                      if (_2525_erase) {
                        r = _2528_recursiveGen;
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2528_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                      }
                      isOwned = _2529_recOwned;
                      readIdents = _2530_recIdents;
                    } else {
                      RAST._IExpr _out355;
                      bool _out356;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out357;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2272_expr, _2271_fromTpe, _2527_b), _2527_b, _2270_toTpe), selfIdent, @params, mustOwn, out _out355, out _out356, out _out357);
                      r = _out355;
                      isOwned = _out356;
                      readIdents = _out357;
                    }
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2531___mcc_h498 = _source91.dtor_TypeArg_a0;
                  bool _2532_erase = _2429___mcc_h425;
                  DAST._INewtypeRange _2533_range = _2428___mcc_h424;
                  DAST._IType _2534_b = _2427___mcc_h423;
                  {
                    if (object.Equals(_2534_b, _2270_toTpe)) {
                      RAST._IExpr _2535_recursiveGen;
                      bool _2536_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2537_recIdents;
                      RAST._IExpr _out358;
                      bool _out359;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out360;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out358, out _out359, out _out360);
                      _2535_recursiveGen = _out358;
                      _2536_recOwned = _out359;
                      _2537_recIdents = _out360;
                      if (_2532_erase) {
                        r = _2535_recursiveGen;
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2535_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                      }
                      isOwned = _2536_recOwned;
                      readIdents = _2537_recIdents;
                    } else {
                      RAST._IExpr _out361;
                      bool _out362;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out363;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2272_expr, _2271_fromTpe, _2534_b), _2534_b, _2270_toTpe), selfIdent, @params, mustOwn, out _out361, out _out362, out _out363);
                      r = _out361;
                      isOwned = _out362;
                      readIdents = _out363;
                    }
                  }
                }
              }
            } else if (_source83.is_Nullable) {
              DAST._IType _2538___mcc_h501 = _source83.dtor_Nullable_a0;
              DAST._IType _source94 = _2277___mcc_h312;
              if (_source94.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2539___mcc_h505 = _source94.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2540___mcc_h506 = _source94.dtor_typeArgs;
                DAST._IResolvedType _2541___mcc_h507 = _source94.dtor_resolved;
                DAST._IResolvedType _source95 = _2541___mcc_h507;
                if (_source95.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2542___mcc_h514 = _source95.dtor_path;
                  {
                    RAST._IExpr _2543_recursiveGen;
                    bool _2544_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2545_recIdents;
                    RAST._IExpr _out364;
                    bool _out365;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out366;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out364, out _out365, out _out366);
                    _2543_recursiveGen = _out364;
                    _2544_recOwned = _out365;
                    _2545_recIdents = _out366;
                    Dafny.ISequence<Dafny.Rune> _2546_s;
                    _2546_s = (_2543_recursiveGen)._ToString(DCOMP.__default.IND);
                    if (!(_2544_recOwned)) {
                      _2546_s = Dafny.Sequence<Dafny.Rune>.Concat(_2546_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    _2546_s = Dafny.Sequence<Dafny.Rune>.Concat(_2546_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    r = RAST.Expr.create_RawExpr(_2546_s);
                    isOwned = _2544_recOwned;
                    readIdents = _2545_recIdents;
                  }
                } else if (_source95.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2547___mcc_h517 = _source95.dtor_path;
                  {
                    RAST._IExpr _2548_recursiveGen;
                    bool _2549_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2550_recIdents;
                    RAST._IExpr _out367;
                    bool _out368;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out369;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out367, out _out368, out _out369);
                    _2548_recursiveGen = _out367;
                    _2549_recOwned = _out368;
                    _2550_recIdents = _out369;
                    Dafny.ISequence<Dafny.Rune> _2551_s;
                    _2551_s = (_2548_recursiveGen)._ToString(DCOMP.__default.IND);
                    if (!(_2549_recOwned)) {
                      _2551_s = Dafny.Sequence<Dafny.Rune>.Concat(_2551_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    _2551_s = Dafny.Sequence<Dafny.Rune>.Concat(_2551_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    r = RAST.Expr.create_RawExpr(_2551_s);
                    isOwned = _2549_recOwned;
                    readIdents = _2550_recIdents;
                  }
                } else {
                  DAST._IType _2552___mcc_h520 = _source95.dtor_baseType;
                  DAST._INewtypeRange _2553___mcc_h521 = _source95.dtor_range;
                  bool _2554___mcc_h522 = _source95.dtor_erase;
                  {
                    RAST._IExpr _2555_recursiveGen;
                    bool _2556_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2557_recIdents;
                    RAST._IExpr _out370;
                    bool _out371;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out372;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out370, out _out371, out _out372);
                    _2555_recursiveGen = _out370;
                    _2556_recOwned = _out371;
                    _2557_recIdents = _out372;
                    Dafny.ISequence<Dafny.Rune> _2558_s;
                    _2558_s = (_2555_recursiveGen)._ToString(DCOMP.__default.IND);
                    if (!(_2556_recOwned)) {
                      _2558_s = Dafny.Sequence<Dafny.Rune>.Concat(_2558_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    _2558_s = Dafny.Sequence<Dafny.Rune>.Concat(_2558_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    r = RAST.Expr.create_RawExpr(_2558_s);
                    isOwned = _2556_recOwned;
                    readIdents = _2557_recIdents;
                  }
                }
              } else if (_source94.is_Nullable) {
                DAST._IType _2559___mcc_h529 = _source94.dtor_Nullable_a0;
                {
                  RAST._IExpr _2560_recursiveGen;
                  bool _2561_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2562_recIdents;
                  RAST._IExpr _out373;
                  bool _out374;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out375;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out373, out _out374, out _out375);
                  _2560_recursiveGen = _out373;
                  _2561_recOwned = _out374;
                  _2562_recIdents = _out375;
                  Dafny.ISequence<Dafny.Rune> _2563_s;
                  _2563_s = (_2560_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_2561_recOwned)) {
                    _2563_s = Dafny.Sequence<Dafny.Rune>.Concat(_2563_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2563_s = Dafny.Sequence<Dafny.Rune>.Concat(_2563_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2563_s);
                  isOwned = _2561_recOwned;
                  readIdents = _2562_recIdents;
                }
              } else if (_source94.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2564___mcc_h532 = _source94.dtor_Tuple_a0;
                {
                  RAST._IExpr _2565_recursiveGen;
                  bool _2566_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2567_recIdents;
                  RAST._IExpr _out376;
                  bool _out377;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out378;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out376, out _out377, out _out378);
                  _2565_recursiveGen = _out376;
                  _2566_recOwned = _out377;
                  _2567_recIdents = _out378;
                  Dafny.ISequence<Dafny.Rune> _2568_s;
                  _2568_s = (_2565_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_2566_recOwned)) {
                    _2568_s = Dafny.Sequence<Dafny.Rune>.Concat(_2568_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2568_s = Dafny.Sequence<Dafny.Rune>.Concat(_2568_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2568_s);
                  isOwned = _2566_recOwned;
                  readIdents = _2567_recIdents;
                }
              } else if (_source94.is_Array) {
                DAST._IType _2569___mcc_h535 = _source94.dtor_element;
                BigInteger _2570___mcc_h536 = _source94.dtor_dims;
                {
                  RAST._IExpr _2571_recursiveGen;
                  bool _2572_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2573_recIdents;
                  RAST._IExpr _out379;
                  bool _out380;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out381;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out379, out _out380, out _out381);
                  _2571_recursiveGen = _out379;
                  _2572_recOwned = _out380;
                  _2573_recIdents = _out381;
                  Dafny.ISequence<Dafny.Rune> _2574_s;
                  _2574_s = (_2571_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_2572_recOwned)) {
                    _2574_s = Dafny.Sequence<Dafny.Rune>.Concat(_2574_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2574_s = Dafny.Sequence<Dafny.Rune>.Concat(_2574_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2574_s);
                  isOwned = _2572_recOwned;
                  readIdents = _2573_recIdents;
                }
              } else if (_source94.is_Seq) {
                DAST._IType _2575___mcc_h541 = _source94.dtor_element;
                {
                  RAST._IExpr _2576_recursiveGen;
                  bool _2577_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2578_recIdents;
                  RAST._IExpr _out382;
                  bool _out383;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out384;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out382, out _out383, out _out384);
                  _2576_recursiveGen = _out382;
                  _2577_recOwned = _out383;
                  _2578_recIdents = _out384;
                  Dafny.ISequence<Dafny.Rune> _2579_s;
                  _2579_s = (_2576_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_2577_recOwned)) {
                    _2579_s = Dafny.Sequence<Dafny.Rune>.Concat(_2579_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2579_s = Dafny.Sequence<Dafny.Rune>.Concat(_2579_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2579_s);
                  isOwned = _2577_recOwned;
                  readIdents = _2578_recIdents;
                }
              } else if (_source94.is_Set) {
                DAST._IType _2580___mcc_h544 = _source94.dtor_element;
                {
                  RAST._IExpr _2581_recursiveGen;
                  bool _2582_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2583_recIdents;
                  RAST._IExpr _out385;
                  bool _out386;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out387;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out385, out _out386, out _out387);
                  _2581_recursiveGen = _out385;
                  _2582_recOwned = _out386;
                  _2583_recIdents = _out387;
                  Dafny.ISequence<Dafny.Rune> _2584_s;
                  _2584_s = (_2581_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_2582_recOwned)) {
                    _2584_s = Dafny.Sequence<Dafny.Rune>.Concat(_2584_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2584_s = Dafny.Sequence<Dafny.Rune>.Concat(_2584_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2584_s);
                  isOwned = _2582_recOwned;
                  readIdents = _2583_recIdents;
                }
              } else if (_source94.is_Multiset) {
                DAST._IType _2585___mcc_h547 = _source94.dtor_element;
                {
                  RAST._IExpr _2586_recursiveGen;
                  bool _2587_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2588_recIdents;
                  RAST._IExpr _out388;
                  bool _out389;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out390;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out388, out _out389, out _out390);
                  _2586_recursiveGen = _out388;
                  _2587_recOwned = _out389;
                  _2588_recIdents = _out390;
                  Dafny.ISequence<Dafny.Rune> _2589_s;
                  _2589_s = (_2586_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_2587_recOwned)) {
                    _2589_s = Dafny.Sequence<Dafny.Rune>.Concat(_2589_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2589_s = Dafny.Sequence<Dafny.Rune>.Concat(_2589_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2589_s);
                  isOwned = _2587_recOwned;
                  readIdents = _2588_recIdents;
                }
              } else if (_source94.is_Map) {
                DAST._IType _2590___mcc_h550 = _source94.dtor_key;
                DAST._IType _2591___mcc_h551 = _source94.dtor_value;
                {
                  RAST._IExpr _2592_recursiveGen;
                  bool _2593_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2594_recIdents;
                  RAST._IExpr _out391;
                  bool _out392;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out393;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out391, out _out392, out _out393);
                  _2592_recursiveGen = _out391;
                  _2593_recOwned = _out392;
                  _2594_recIdents = _out393;
                  Dafny.ISequence<Dafny.Rune> _2595_s;
                  _2595_s = (_2592_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_2593_recOwned)) {
                    _2595_s = Dafny.Sequence<Dafny.Rune>.Concat(_2595_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2595_s = Dafny.Sequence<Dafny.Rune>.Concat(_2595_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2595_s);
                  isOwned = _2593_recOwned;
                  readIdents = _2594_recIdents;
                }
              } else if (_source94.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2596___mcc_h556 = _source94.dtor_args;
                DAST._IType _2597___mcc_h557 = _source94.dtor_result;
                {
                  RAST._IExpr _2598_recursiveGen;
                  bool _2599_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2600_recIdents;
                  RAST._IExpr _out394;
                  bool _out395;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out396;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out394, out _out395, out _out396);
                  _2598_recursiveGen = _out394;
                  _2599_recOwned = _out395;
                  _2600_recIdents = _out396;
                  Dafny.ISequence<Dafny.Rune> _2601_s;
                  _2601_s = (_2598_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_2599_recOwned)) {
                    _2601_s = Dafny.Sequence<Dafny.Rune>.Concat(_2601_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2601_s = Dafny.Sequence<Dafny.Rune>.Concat(_2601_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2601_s);
                  isOwned = _2599_recOwned;
                  readIdents = _2600_recIdents;
                }
              } else if (_source94.is_Primitive) {
                DAST._IPrimitive _2602___mcc_h562 = _source94.dtor_Primitive_a0;
                {
                  RAST._IExpr _2603_recursiveGen;
                  bool _2604_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2605_recIdents;
                  RAST._IExpr _out397;
                  bool _out398;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out399;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out397, out _out398, out _out399);
                  _2603_recursiveGen = _out397;
                  _2604_recOwned = _out398;
                  _2605_recIdents = _out399;
                  Dafny.ISequence<Dafny.Rune> _2606_s;
                  _2606_s = (_2603_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_2604_recOwned)) {
                    _2606_s = Dafny.Sequence<Dafny.Rune>.Concat(_2606_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2606_s = Dafny.Sequence<Dafny.Rune>.Concat(_2606_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2606_s);
                  isOwned = _2604_recOwned;
                  readIdents = _2605_recIdents;
                }
              } else if (_source94.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2607___mcc_h565 = _source94.dtor_Passthrough_a0;
                {
                  RAST._IExpr _2608_recursiveGen;
                  bool _2609_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2610_recIdents;
                  RAST._IExpr _out400;
                  bool _out401;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out402;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out400, out _out401, out _out402);
                  _2608_recursiveGen = _out400;
                  _2609_recOwned = _out401;
                  _2610_recIdents = _out402;
                  Dafny.ISequence<Dafny.Rune> _2611_s;
                  _2611_s = (_2608_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_2609_recOwned)) {
                    _2611_s = Dafny.Sequence<Dafny.Rune>.Concat(_2611_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2611_s = Dafny.Sequence<Dafny.Rune>.Concat(_2611_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2611_s);
                  isOwned = _2609_recOwned;
                  readIdents = _2610_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2612___mcc_h568 = _source94.dtor_TypeArg_a0;
                {
                  RAST._IExpr _2613_recursiveGen;
                  bool _2614_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2615_recIdents;
                  RAST._IExpr _out403;
                  bool _out404;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out405;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out403, out _out404, out _out405);
                  _2613_recursiveGen = _out403;
                  _2614_recOwned = _out404;
                  _2615_recIdents = _out405;
                  Dafny.ISequence<Dafny.Rune> _2616_s;
                  _2616_s = (_2613_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_2614_recOwned)) {
                    _2616_s = Dafny.Sequence<Dafny.Rune>.Concat(_2616_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2616_s = Dafny.Sequence<Dafny.Rune>.Concat(_2616_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2616_s);
                  isOwned = _2614_recOwned;
                  readIdents = _2615_recIdents;
                }
              }
            } else if (_source83.is_Tuple) {
              Dafny.ISequence<DAST._IType> _2617___mcc_h571 = _source83.dtor_Tuple_a0;
              DAST._IType _source96 = _2277___mcc_h312;
              if (_source96.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2618___mcc_h575 = _source96.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2619___mcc_h576 = _source96.dtor_typeArgs;
                DAST._IResolvedType _2620___mcc_h577 = _source96.dtor_resolved;
                DAST._IResolvedType _source97 = _2620___mcc_h577;
                if (_source97.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2621___mcc_h581 = _source97.dtor_path;
                  {
                    RAST._IExpr _2622_recursiveGen;
                    bool _2623_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2624_recIdents;
                    RAST._IExpr _out406;
                    bool _out407;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out408;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out406, out _out407, out _out408);
                    _2622_recursiveGen = _out406;
                    _2623_recOwned = _out407;
                    _2624_recIdents = _out408;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2622_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2623_recOwned;
                    readIdents = _2624_recIdents;
                  }
                } else if (_source97.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2625___mcc_h583 = _source97.dtor_path;
                  {
                    RAST._IExpr _2626_recursiveGen;
                    bool _2627_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2628_recIdents;
                    RAST._IExpr _out409;
                    bool _out410;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out411;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out409, out _out410, out _out411);
                    _2626_recursiveGen = _out409;
                    _2627_recOwned = _out410;
                    _2628_recIdents = _out411;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2626_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2627_recOwned;
                    readIdents = _2628_recIdents;
                  }
                } else {
                  DAST._IType _2629___mcc_h585 = _source97.dtor_baseType;
                  DAST._INewtypeRange _2630___mcc_h586 = _source97.dtor_range;
                  bool _2631___mcc_h587 = _source97.dtor_erase;
                  bool _2632_erase = _2631___mcc_h587;
                  DAST._INewtypeRange _2633_range = _2630___mcc_h586;
                  DAST._IType _2634_b = _2629___mcc_h585;
                  {
                    if (object.Equals(_2271_fromTpe, _2634_b)) {
                      RAST._IExpr _2635_recursiveGen;
                      bool _2636_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2637_recIdents;
                      RAST._IExpr _out412;
                      bool _out413;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out414;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out412, out _out413, out _out414);
                      _2635_recursiveGen = _out412;
                      _2636_recOwned = _out413;
                      _2637_recIdents = _out414;
                      Std.Wrappers._IOption<RAST._IType> _2638_potentialRhsType;
                      _2638_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_2634_b, _2633_range);
                      Std.Wrappers._IOption<RAST._IType> _source98 = _2638_potentialRhsType;
                      if (_source98.is_None) {
                        if (_2632_erase) {
                          r = _2635_recursiveGen;
                        } else {
                          RAST._IType _2639_rhsType;
                          RAST._IType _out415;
                          _out415 = DCOMP.COMP.GenType(_2270_toTpe, true, false);
                          _2639_rhsType = _out415;
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_2639_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_2635_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                        }
                        isOwned = _2636_recOwned;
                      } else {
                        RAST._IType _2640___mcc_h1242 = _source98.dtor_value;
                        RAST._IType _2641_v = _2640___mcc_h1242;
                        r = RAST.Expr.create_ConversionNum(_2641_v, _2635_recursiveGen);
                        isOwned = true;
                      }
                      readIdents = _2637_recIdents;
                    } else {
                      RAST._IExpr _out416;
                      bool _out417;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out418;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2272_expr, _2271_fromTpe, _2634_b), _2634_b, _2270_toTpe), selfIdent, @params, mustOwn, out _out416, out _out417, out _out418);
                      r = _out416;
                      isOwned = _out417;
                      readIdents = _out418;
                    }
                  }
                }
              } else if (_source96.is_Nullable) {
                DAST._IType _2642___mcc_h591 = _source96.dtor_Nullable_a0;
                {
                  RAST._IExpr _2643_recursiveGen;
                  bool _2644_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2645_recIdents;
                  RAST._IExpr _out419;
                  bool _out420;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out421;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out419, out _out420, out _out421);
                  _2643_recursiveGen = _out419;
                  _2644_recOwned = _out420;
                  _2645_recIdents = _out421;
                  Dafny.ISequence<Dafny.Rune> _2646_s;
                  _2646_s = (_2643_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_2644_recOwned)) {
                    _2646_s = Dafny.Sequence<Dafny.Rune>.Concat(_2646_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  _2646_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2646_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  r = RAST.Expr.create_RawExpr(_2646_s);
                  isOwned = true;
                  readIdents = _2645_recIdents;
                }
              } else if (_source96.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2647___mcc_h593 = _source96.dtor_Tuple_a0;
                {
                  RAST._IExpr _2648_recursiveGen;
                  bool _2649_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2650_recIdents;
                  RAST._IExpr _out422;
                  bool _out423;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out424;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out422, out _out423, out _out424);
                  _2648_recursiveGen = _out422;
                  _2649_recOwned = _out423;
                  _2650_recIdents = _out424;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2648_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2649_recOwned;
                  readIdents = _2650_recIdents;
                }
              } else if (_source96.is_Array) {
                DAST._IType _2651___mcc_h595 = _source96.dtor_element;
                BigInteger _2652___mcc_h596 = _source96.dtor_dims;
                {
                  RAST._IExpr _2653_recursiveGen;
                  bool _2654_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2655_recIdents;
                  RAST._IExpr _out425;
                  bool _out426;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out427;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out425, out _out426, out _out427);
                  _2653_recursiveGen = _out425;
                  _2654_recOwned = _out426;
                  _2655_recIdents = _out427;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2653_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2654_recOwned;
                  readIdents = _2655_recIdents;
                }
              } else if (_source96.is_Seq) {
                DAST._IType _2656___mcc_h599 = _source96.dtor_element;
                {
                  RAST._IExpr _2657_recursiveGen;
                  bool _2658_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2659_recIdents;
                  RAST._IExpr _out428;
                  bool _out429;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out430;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out428, out _out429, out _out430);
                  _2657_recursiveGen = _out428;
                  _2658_recOwned = _out429;
                  _2659_recIdents = _out430;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2657_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2658_recOwned;
                  readIdents = _2659_recIdents;
                }
              } else if (_source96.is_Set) {
                DAST._IType _2660___mcc_h601 = _source96.dtor_element;
                {
                  RAST._IExpr _2661_recursiveGen;
                  bool _2662_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2663_recIdents;
                  RAST._IExpr _out431;
                  bool _out432;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out433;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out431, out _out432, out _out433);
                  _2661_recursiveGen = _out431;
                  _2662_recOwned = _out432;
                  _2663_recIdents = _out433;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2661_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2662_recOwned;
                  readIdents = _2663_recIdents;
                }
              } else if (_source96.is_Multiset) {
                DAST._IType _2664___mcc_h603 = _source96.dtor_element;
                {
                  RAST._IExpr _2665_recursiveGen;
                  bool _2666_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2667_recIdents;
                  RAST._IExpr _out434;
                  bool _out435;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out436;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out434, out _out435, out _out436);
                  _2665_recursiveGen = _out434;
                  _2666_recOwned = _out435;
                  _2667_recIdents = _out436;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2665_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2666_recOwned;
                  readIdents = _2667_recIdents;
                }
              } else if (_source96.is_Map) {
                DAST._IType _2668___mcc_h605 = _source96.dtor_key;
                DAST._IType _2669___mcc_h606 = _source96.dtor_value;
                {
                  RAST._IExpr _2670_recursiveGen;
                  bool _2671_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2672_recIdents;
                  RAST._IExpr _out437;
                  bool _out438;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out439;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out437, out _out438, out _out439);
                  _2670_recursiveGen = _out437;
                  _2671_recOwned = _out438;
                  _2672_recIdents = _out439;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2670_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2671_recOwned;
                  readIdents = _2672_recIdents;
                }
              } else if (_source96.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2673___mcc_h609 = _source96.dtor_args;
                DAST._IType _2674___mcc_h610 = _source96.dtor_result;
                {
                  RAST._IExpr _2675_recursiveGen;
                  bool _2676_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2677_recIdents;
                  RAST._IExpr _out440;
                  bool _out441;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out442;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out440, out _out441, out _out442);
                  _2675_recursiveGen = _out440;
                  _2676_recOwned = _out441;
                  _2677_recIdents = _out442;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2675_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2676_recOwned;
                  readIdents = _2677_recIdents;
                }
              } else if (_source96.is_Primitive) {
                DAST._IPrimitive _2678___mcc_h613 = _source96.dtor_Primitive_a0;
                {
                  RAST._IExpr _2679_recursiveGen;
                  bool _2680_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2681_recIdents;
                  RAST._IExpr _out443;
                  bool _out444;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out445;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out443, out _out444, out _out445);
                  _2679_recursiveGen = _out443;
                  _2680_recOwned = _out444;
                  _2681_recIdents = _out445;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2679_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2680_recOwned;
                  readIdents = _2681_recIdents;
                }
              } else if (_source96.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2682___mcc_h615 = _source96.dtor_Passthrough_a0;
                {
                  RAST._IExpr _2683_recursiveGen;
                  bool _2684_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2685_recIdents;
                  RAST._IExpr _out446;
                  bool _out447;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out448;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out446, out _out447, out _out448);
                  _2683_recursiveGen = _out446;
                  _2684_recOwned = _out447;
                  _2685_recIdents = _out448;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2683_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2684_recOwned;
                  readIdents = _2685_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2686___mcc_h617 = _source96.dtor_TypeArg_a0;
                {
                  RAST._IExpr _2687_recursiveGen;
                  bool _2688_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2689_recIdents;
                  RAST._IExpr _out449;
                  bool _out450;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out451;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out449, out _out450, out _out451);
                  _2687_recursiveGen = _out449;
                  _2688_recOwned = _out450;
                  _2689_recIdents = _out451;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2687_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2688_recOwned;
                  readIdents = _2689_recIdents;
                }
              }
            } else if (_source83.is_Array) {
              DAST._IType _2690___mcc_h619 = _source83.dtor_element;
              BigInteger _2691___mcc_h620 = _source83.dtor_dims;
              DAST._IType _source99 = _2277___mcc_h312;
              if (_source99.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2692___mcc_h627 = _source99.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2693___mcc_h628 = _source99.dtor_typeArgs;
                DAST._IResolvedType _2694___mcc_h629 = _source99.dtor_resolved;
                DAST._IResolvedType _source100 = _2694___mcc_h629;
                if (_source100.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2695___mcc_h633 = _source100.dtor_path;
                  {
                    RAST._IExpr _2696_recursiveGen;
                    bool _2697_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2698_recIdents;
                    RAST._IExpr _out452;
                    bool _out453;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out454;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out452, out _out453, out _out454);
                    _2696_recursiveGen = _out452;
                    _2697_recOwned = _out453;
                    _2698_recIdents = _out454;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2696_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2697_recOwned;
                    readIdents = _2698_recIdents;
                  }
                } else if (_source100.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2699___mcc_h635 = _source100.dtor_path;
                  {
                    RAST._IExpr _2700_recursiveGen;
                    bool _2701_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2702_recIdents;
                    RAST._IExpr _out455;
                    bool _out456;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out457;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out455, out _out456, out _out457);
                    _2700_recursiveGen = _out455;
                    _2701_recOwned = _out456;
                    _2702_recIdents = _out457;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2700_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2701_recOwned;
                    readIdents = _2702_recIdents;
                  }
                } else {
                  DAST._IType _2703___mcc_h637 = _source100.dtor_baseType;
                  DAST._INewtypeRange _2704___mcc_h638 = _source100.dtor_range;
                  bool _2705___mcc_h639 = _source100.dtor_erase;
                  bool _2706_erase = _2705___mcc_h639;
                  DAST._INewtypeRange _2707_range = _2704___mcc_h638;
                  DAST._IType _2708_b = _2703___mcc_h637;
                  {
                    if (object.Equals(_2271_fromTpe, _2708_b)) {
                      RAST._IExpr _2709_recursiveGen;
                      bool _2710_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2711_recIdents;
                      RAST._IExpr _out458;
                      bool _out459;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out460;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out458, out _out459, out _out460);
                      _2709_recursiveGen = _out458;
                      _2710_recOwned = _out459;
                      _2711_recIdents = _out460;
                      Std.Wrappers._IOption<RAST._IType> _2712_potentialRhsType;
                      _2712_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_2708_b, _2707_range);
                      Std.Wrappers._IOption<RAST._IType> _source101 = _2712_potentialRhsType;
                      if (_source101.is_None) {
                        if (_2706_erase) {
                          r = _2709_recursiveGen;
                        } else {
                          RAST._IType _2713_rhsType;
                          RAST._IType _out461;
                          _out461 = DCOMP.COMP.GenType(_2270_toTpe, true, false);
                          _2713_rhsType = _out461;
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_2713_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_2709_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                        }
                        isOwned = _2710_recOwned;
                      } else {
                        RAST._IType _2714___mcc_h1243 = _source101.dtor_value;
                        RAST._IType _2715_v = _2714___mcc_h1243;
                        r = RAST.Expr.create_ConversionNum(_2715_v, _2709_recursiveGen);
                        isOwned = true;
                      }
                      readIdents = _2711_recIdents;
                    } else {
                      RAST._IExpr _out462;
                      bool _out463;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out464;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2272_expr, _2271_fromTpe, _2708_b), _2708_b, _2270_toTpe), selfIdent, @params, mustOwn, out _out462, out _out463, out _out464);
                      r = _out462;
                      isOwned = _out463;
                      readIdents = _out464;
                    }
                  }
                }
              } else if (_source99.is_Nullable) {
                DAST._IType _2716___mcc_h643 = _source99.dtor_Nullable_a0;
                {
                  RAST._IExpr _2717_recursiveGen;
                  bool _2718_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2719_recIdents;
                  RAST._IExpr _out465;
                  bool _out466;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out467;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out465, out _out466, out _out467);
                  _2717_recursiveGen = _out465;
                  _2718_recOwned = _out466;
                  _2719_recIdents = _out467;
                  Dafny.ISequence<Dafny.Rune> _2720_s;
                  _2720_s = (_2717_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_2718_recOwned)) {
                    _2720_s = Dafny.Sequence<Dafny.Rune>.Concat(_2720_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  _2720_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2720_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  r = RAST.Expr.create_RawExpr(_2720_s);
                  isOwned = true;
                  readIdents = _2719_recIdents;
                }
              } else if (_source99.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2721___mcc_h645 = _source99.dtor_Tuple_a0;
                {
                  RAST._IExpr _2722_recursiveGen;
                  bool _2723_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2724_recIdents;
                  RAST._IExpr _out468;
                  bool _out469;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out470;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out468, out _out469, out _out470);
                  _2722_recursiveGen = _out468;
                  _2723_recOwned = _out469;
                  _2724_recIdents = _out470;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2722_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2723_recOwned;
                  readIdents = _2724_recIdents;
                }
              } else if (_source99.is_Array) {
                DAST._IType _2725___mcc_h647 = _source99.dtor_element;
                BigInteger _2726___mcc_h648 = _source99.dtor_dims;
                {
                  RAST._IExpr _2727_recursiveGen;
                  bool _2728_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2729_recIdents;
                  RAST._IExpr _out471;
                  bool _out472;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out473;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out471, out _out472, out _out473);
                  _2727_recursiveGen = _out471;
                  _2728_recOwned = _out472;
                  _2729_recIdents = _out473;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2727_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2728_recOwned;
                  readIdents = _2729_recIdents;
                }
              } else if (_source99.is_Seq) {
                DAST._IType _2730___mcc_h651 = _source99.dtor_element;
                {
                  RAST._IExpr _2731_recursiveGen;
                  bool _2732_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2733_recIdents;
                  RAST._IExpr _out474;
                  bool _out475;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out476;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out474, out _out475, out _out476);
                  _2731_recursiveGen = _out474;
                  _2732_recOwned = _out475;
                  _2733_recIdents = _out476;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2731_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2732_recOwned;
                  readIdents = _2733_recIdents;
                }
              } else if (_source99.is_Set) {
                DAST._IType _2734___mcc_h653 = _source99.dtor_element;
                {
                  RAST._IExpr _2735_recursiveGen;
                  bool _2736_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2737_recIdents;
                  RAST._IExpr _out477;
                  bool _out478;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out479;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out477, out _out478, out _out479);
                  _2735_recursiveGen = _out477;
                  _2736_recOwned = _out478;
                  _2737_recIdents = _out479;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2735_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2736_recOwned;
                  readIdents = _2737_recIdents;
                }
              } else if (_source99.is_Multiset) {
                DAST._IType _2738___mcc_h655 = _source99.dtor_element;
                {
                  RAST._IExpr _2739_recursiveGen;
                  bool _2740_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2741_recIdents;
                  RAST._IExpr _out480;
                  bool _out481;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out482;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out480, out _out481, out _out482);
                  _2739_recursiveGen = _out480;
                  _2740_recOwned = _out481;
                  _2741_recIdents = _out482;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2739_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2740_recOwned;
                  readIdents = _2741_recIdents;
                }
              } else if (_source99.is_Map) {
                DAST._IType _2742___mcc_h657 = _source99.dtor_key;
                DAST._IType _2743___mcc_h658 = _source99.dtor_value;
                {
                  RAST._IExpr _2744_recursiveGen;
                  bool _2745_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2746_recIdents;
                  RAST._IExpr _out483;
                  bool _out484;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out485;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out483, out _out484, out _out485);
                  _2744_recursiveGen = _out483;
                  _2745_recOwned = _out484;
                  _2746_recIdents = _out485;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2744_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2745_recOwned;
                  readIdents = _2746_recIdents;
                }
              } else if (_source99.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2747___mcc_h661 = _source99.dtor_args;
                DAST._IType _2748___mcc_h662 = _source99.dtor_result;
                {
                  RAST._IExpr _2749_recursiveGen;
                  bool _2750_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2751_recIdents;
                  RAST._IExpr _out486;
                  bool _out487;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out488;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out486, out _out487, out _out488);
                  _2749_recursiveGen = _out486;
                  _2750_recOwned = _out487;
                  _2751_recIdents = _out488;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2749_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2750_recOwned;
                  readIdents = _2751_recIdents;
                }
              } else if (_source99.is_Primitive) {
                DAST._IPrimitive _2752___mcc_h665 = _source99.dtor_Primitive_a0;
                {
                  RAST._IExpr _2753_recursiveGen;
                  bool _2754_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2755_recIdents;
                  RAST._IExpr _out489;
                  bool _out490;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out491;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out489, out _out490, out _out491);
                  _2753_recursiveGen = _out489;
                  _2754_recOwned = _out490;
                  _2755_recIdents = _out491;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2753_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2754_recOwned;
                  readIdents = _2755_recIdents;
                }
              } else if (_source99.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2756___mcc_h667 = _source99.dtor_Passthrough_a0;
                {
                  RAST._IExpr _2757_recursiveGen;
                  bool _2758_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2759_recIdents;
                  RAST._IExpr _out492;
                  bool _out493;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out494;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out492, out _out493, out _out494);
                  _2757_recursiveGen = _out492;
                  _2758_recOwned = _out493;
                  _2759_recIdents = _out494;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2757_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2758_recOwned;
                  readIdents = _2759_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2760___mcc_h669 = _source99.dtor_TypeArg_a0;
                {
                  RAST._IExpr _2761_recursiveGen;
                  bool _2762_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2763_recIdents;
                  RAST._IExpr _out495;
                  bool _out496;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out497;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out495, out _out496, out _out497);
                  _2761_recursiveGen = _out495;
                  _2762_recOwned = _out496;
                  _2763_recIdents = _out497;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2761_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2762_recOwned;
                  readIdents = _2763_recIdents;
                }
              }
            } else if (_source83.is_Seq) {
              DAST._IType _2764___mcc_h671 = _source83.dtor_element;
              DAST._IType _source102 = _2277___mcc_h312;
              if (_source102.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2765___mcc_h675 = _source102.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2766___mcc_h676 = _source102.dtor_typeArgs;
                DAST._IResolvedType _2767___mcc_h677 = _source102.dtor_resolved;
                DAST._IResolvedType _source103 = _2767___mcc_h677;
                if (_source103.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2768___mcc_h681 = _source103.dtor_path;
                  {
                    RAST._IExpr _2769_recursiveGen;
                    bool _2770_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2771_recIdents;
                    RAST._IExpr _out498;
                    bool _out499;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out500;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out498, out _out499, out _out500);
                    _2769_recursiveGen = _out498;
                    _2770_recOwned = _out499;
                    _2771_recIdents = _out500;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2769_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2770_recOwned;
                    readIdents = _2771_recIdents;
                  }
                } else if (_source103.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2772___mcc_h683 = _source103.dtor_path;
                  {
                    RAST._IExpr _2773_recursiveGen;
                    bool _2774_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2775_recIdents;
                    RAST._IExpr _out501;
                    bool _out502;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out503;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out501, out _out502, out _out503);
                    _2773_recursiveGen = _out501;
                    _2774_recOwned = _out502;
                    _2775_recIdents = _out503;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2773_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2774_recOwned;
                    readIdents = _2775_recIdents;
                  }
                } else {
                  DAST._IType _2776___mcc_h685 = _source103.dtor_baseType;
                  DAST._INewtypeRange _2777___mcc_h686 = _source103.dtor_range;
                  bool _2778___mcc_h687 = _source103.dtor_erase;
                  bool _2779_erase = _2778___mcc_h687;
                  DAST._INewtypeRange _2780_range = _2777___mcc_h686;
                  DAST._IType _2781_b = _2776___mcc_h685;
                  {
                    if (object.Equals(_2271_fromTpe, _2781_b)) {
                      RAST._IExpr _2782_recursiveGen;
                      bool _2783_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2784_recIdents;
                      RAST._IExpr _out504;
                      bool _out505;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out506;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out504, out _out505, out _out506);
                      _2782_recursiveGen = _out504;
                      _2783_recOwned = _out505;
                      _2784_recIdents = _out506;
                      Std.Wrappers._IOption<RAST._IType> _2785_potentialRhsType;
                      _2785_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_2781_b, _2780_range);
                      Std.Wrappers._IOption<RAST._IType> _source104 = _2785_potentialRhsType;
                      if (_source104.is_None) {
                        if (_2779_erase) {
                          r = _2782_recursiveGen;
                        } else {
                          RAST._IType _2786_rhsType;
                          RAST._IType _out507;
                          _out507 = DCOMP.COMP.GenType(_2270_toTpe, true, false);
                          _2786_rhsType = _out507;
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_2786_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_2782_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                        }
                        isOwned = _2783_recOwned;
                      } else {
                        RAST._IType _2787___mcc_h1244 = _source104.dtor_value;
                        RAST._IType _2788_v = _2787___mcc_h1244;
                        r = RAST.Expr.create_ConversionNum(_2788_v, _2782_recursiveGen);
                        isOwned = true;
                      }
                      readIdents = _2784_recIdents;
                    } else {
                      RAST._IExpr _out508;
                      bool _out509;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out510;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2272_expr, _2271_fromTpe, _2781_b), _2781_b, _2270_toTpe), selfIdent, @params, mustOwn, out _out508, out _out509, out _out510);
                      r = _out508;
                      isOwned = _out509;
                      readIdents = _out510;
                    }
                  }
                }
              } else if (_source102.is_Nullable) {
                DAST._IType _2789___mcc_h691 = _source102.dtor_Nullable_a0;
                {
                  RAST._IExpr _2790_recursiveGen;
                  bool _2791_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2792_recIdents;
                  RAST._IExpr _out511;
                  bool _out512;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out513;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out511, out _out512, out _out513);
                  _2790_recursiveGen = _out511;
                  _2791_recOwned = _out512;
                  _2792_recIdents = _out513;
                  Dafny.ISequence<Dafny.Rune> _2793_s;
                  _2793_s = (_2790_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_2791_recOwned)) {
                    _2793_s = Dafny.Sequence<Dafny.Rune>.Concat(_2793_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  _2793_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2793_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  r = RAST.Expr.create_RawExpr(_2793_s);
                  isOwned = true;
                  readIdents = _2792_recIdents;
                }
              } else if (_source102.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2794___mcc_h693 = _source102.dtor_Tuple_a0;
                {
                  RAST._IExpr _2795_recursiveGen;
                  bool _2796_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2797_recIdents;
                  RAST._IExpr _out514;
                  bool _out515;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out516;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out514, out _out515, out _out516);
                  _2795_recursiveGen = _out514;
                  _2796_recOwned = _out515;
                  _2797_recIdents = _out516;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2795_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2796_recOwned;
                  readIdents = _2797_recIdents;
                }
              } else if (_source102.is_Array) {
                DAST._IType _2798___mcc_h695 = _source102.dtor_element;
                BigInteger _2799___mcc_h696 = _source102.dtor_dims;
                {
                  RAST._IExpr _2800_recursiveGen;
                  bool _2801_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2802_recIdents;
                  RAST._IExpr _out517;
                  bool _out518;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out519;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out517, out _out518, out _out519);
                  _2800_recursiveGen = _out517;
                  _2801_recOwned = _out518;
                  _2802_recIdents = _out519;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2800_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2801_recOwned;
                  readIdents = _2802_recIdents;
                }
              } else if (_source102.is_Seq) {
                DAST._IType _2803___mcc_h699 = _source102.dtor_element;
                {
                  RAST._IExpr _2804_recursiveGen;
                  bool _2805_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2806_recIdents;
                  RAST._IExpr _out520;
                  bool _out521;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out522;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out520, out _out521, out _out522);
                  _2804_recursiveGen = _out520;
                  _2805_recOwned = _out521;
                  _2806_recIdents = _out522;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2804_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2805_recOwned;
                  readIdents = _2806_recIdents;
                }
              } else if (_source102.is_Set) {
                DAST._IType _2807___mcc_h701 = _source102.dtor_element;
                {
                  RAST._IExpr _2808_recursiveGen;
                  bool _2809_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2810_recIdents;
                  RAST._IExpr _out523;
                  bool _out524;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out525;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out523, out _out524, out _out525);
                  _2808_recursiveGen = _out523;
                  _2809_recOwned = _out524;
                  _2810_recIdents = _out525;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2808_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2809_recOwned;
                  readIdents = _2810_recIdents;
                }
              } else if (_source102.is_Multiset) {
                DAST._IType _2811___mcc_h703 = _source102.dtor_element;
                {
                  RAST._IExpr _2812_recursiveGen;
                  bool _2813_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2814_recIdents;
                  RAST._IExpr _out526;
                  bool _out527;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out528;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out526, out _out527, out _out528);
                  _2812_recursiveGen = _out526;
                  _2813_recOwned = _out527;
                  _2814_recIdents = _out528;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2812_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2813_recOwned;
                  readIdents = _2814_recIdents;
                }
              } else if (_source102.is_Map) {
                DAST._IType _2815___mcc_h705 = _source102.dtor_key;
                DAST._IType _2816___mcc_h706 = _source102.dtor_value;
                {
                  RAST._IExpr _2817_recursiveGen;
                  bool _2818_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2819_recIdents;
                  RAST._IExpr _out529;
                  bool _out530;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out531;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out529, out _out530, out _out531);
                  _2817_recursiveGen = _out529;
                  _2818_recOwned = _out530;
                  _2819_recIdents = _out531;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2817_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2818_recOwned;
                  readIdents = _2819_recIdents;
                }
              } else if (_source102.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2820___mcc_h709 = _source102.dtor_args;
                DAST._IType _2821___mcc_h710 = _source102.dtor_result;
                {
                  RAST._IExpr _2822_recursiveGen;
                  bool _2823_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2824_recIdents;
                  RAST._IExpr _out532;
                  bool _out533;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out534;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out532, out _out533, out _out534);
                  _2822_recursiveGen = _out532;
                  _2823_recOwned = _out533;
                  _2824_recIdents = _out534;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2822_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2823_recOwned;
                  readIdents = _2824_recIdents;
                }
              } else if (_source102.is_Primitive) {
                DAST._IPrimitive _2825___mcc_h713 = _source102.dtor_Primitive_a0;
                {
                  RAST._IExpr _2826_recursiveGen;
                  bool _2827_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2828_recIdents;
                  RAST._IExpr _out535;
                  bool _out536;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out537;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out535, out _out536, out _out537);
                  _2826_recursiveGen = _out535;
                  _2827_recOwned = _out536;
                  _2828_recIdents = _out537;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2826_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2827_recOwned;
                  readIdents = _2828_recIdents;
                }
              } else if (_source102.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2829___mcc_h715 = _source102.dtor_Passthrough_a0;
                {
                  RAST._IExpr _2830_recursiveGen;
                  bool _2831_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2832_recIdents;
                  RAST._IExpr _out538;
                  bool _out539;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out540;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out538, out _out539, out _out540);
                  _2830_recursiveGen = _out538;
                  _2831_recOwned = _out539;
                  _2832_recIdents = _out540;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2830_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2831_recOwned;
                  readIdents = _2832_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2833___mcc_h717 = _source102.dtor_TypeArg_a0;
                {
                  RAST._IExpr _2834_recursiveGen;
                  bool _2835_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2836_recIdents;
                  RAST._IExpr _out541;
                  bool _out542;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out543;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out541, out _out542, out _out543);
                  _2834_recursiveGen = _out541;
                  _2835_recOwned = _out542;
                  _2836_recIdents = _out543;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2834_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2835_recOwned;
                  readIdents = _2836_recIdents;
                }
              }
            } else if (_source83.is_Set) {
              DAST._IType _2837___mcc_h719 = _source83.dtor_element;
              DAST._IType _source105 = _2277___mcc_h312;
              if (_source105.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2838___mcc_h723 = _source105.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2839___mcc_h724 = _source105.dtor_typeArgs;
                DAST._IResolvedType _2840___mcc_h725 = _source105.dtor_resolved;
                DAST._IResolvedType _source106 = _2840___mcc_h725;
                if (_source106.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2841___mcc_h729 = _source106.dtor_path;
                  {
                    RAST._IExpr _2842_recursiveGen;
                    bool _2843_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2844_recIdents;
                    RAST._IExpr _out544;
                    bool _out545;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out546;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out544, out _out545, out _out546);
                    _2842_recursiveGen = _out544;
                    _2843_recOwned = _out545;
                    _2844_recIdents = _out546;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2842_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2843_recOwned;
                    readIdents = _2844_recIdents;
                  }
                } else if (_source106.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2845___mcc_h731 = _source106.dtor_path;
                  {
                    RAST._IExpr _2846_recursiveGen;
                    bool _2847_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2848_recIdents;
                    RAST._IExpr _out547;
                    bool _out548;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out549;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out547, out _out548, out _out549);
                    _2846_recursiveGen = _out547;
                    _2847_recOwned = _out548;
                    _2848_recIdents = _out549;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2846_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2847_recOwned;
                    readIdents = _2848_recIdents;
                  }
                } else {
                  DAST._IType _2849___mcc_h733 = _source106.dtor_baseType;
                  DAST._INewtypeRange _2850___mcc_h734 = _source106.dtor_range;
                  bool _2851___mcc_h735 = _source106.dtor_erase;
                  bool _2852_erase = _2851___mcc_h735;
                  DAST._INewtypeRange _2853_range = _2850___mcc_h734;
                  DAST._IType _2854_b = _2849___mcc_h733;
                  {
                    if (object.Equals(_2271_fromTpe, _2854_b)) {
                      RAST._IExpr _2855_recursiveGen;
                      bool _2856_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2857_recIdents;
                      RAST._IExpr _out550;
                      bool _out551;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out552;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out550, out _out551, out _out552);
                      _2855_recursiveGen = _out550;
                      _2856_recOwned = _out551;
                      _2857_recIdents = _out552;
                      Std.Wrappers._IOption<RAST._IType> _2858_potentialRhsType;
                      _2858_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_2854_b, _2853_range);
                      Std.Wrappers._IOption<RAST._IType> _source107 = _2858_potentialRhsType;
                      if (_source107.is_None) {
                        if (_2852_erase) {
                          r = _2855_recursiveGen;
                        } else {
                          RAST._IType _2859_rhsType;
                          RAST._IType _out553;
                          _out553 = DCOMP.COMP.GenType(_2270_toTpe, true, false);
                          _2859_rhsType = _out553;
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_2859_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_2855_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                        }
                        isOwned = _2856_recOwned;
                      } else {
                        RAST._IType _2860___mcc_h1245 = _source107.dtor_value;
                        RAST._IType _2861_v = _2860___mcc_h1245;
                        r = RAST.Expr.create_ConversionNum(_2861_v, _2855_recursiveGen);
                        isOwned = true;
                      }
                      readIdents = _2857_recIdents;
                    } else {
                      RAST._IExpr _out554;
                      bool _out555;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out556;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2272_expr, _2271_fromTpe, _2854_b), _2854_b, _2270_toTpe), selfIdent, @params, mustOwn, out _out554, out _out555, out _out556);
                      r = _out554;
                      isOwned = _out555;
                      readIdents = _out556;
                    }
                  }
                }
              } else if (_source105.is_Nullable) {
                DAST._IType _2862___mcc_h739 = _source105.dtor_Nullable_a0;
                {
                  RAST._IExpr _2863_recursiveGen;
                  bool _2864_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2865_recIdents;
                  RAST._IExpr _out557;
                  bool _out558;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out559;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out557, out _out558, out _out559);
                  _2863_recursiveGen = _out557;
                  _2864_recOwned = _out558;
                  _2865_recIdents = _out559;
                  Dafny.ISequence<Dafny.Rune> _2866_s;
                  _2866_s = (_2863_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_2864_recOwned)) {
                    _2866_s = Dafny.Sequence<Dafny.Rune>.Concat(_2866_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  _2866_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2866_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  r = RAST.Expr.create_RawExpr(_2866_s);
                  isOwned = true;
                  readIdents = _2865_recIdents;
                }
              } else if (_source105.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2867___mcc_h741 = _source105.dtor_Tuple_a0;
                {
                  RAST._IExpr _2868_recursiveGen;
                  bool _2869_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2870_recIdents;
                  RAST._IExpr _out560;
                  bool _out561;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out562;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out560, out _out561, out _out562);
                  _2868_recursiveGen = _out560;
                  _2869_recOwned = _out561;
                  _2870_recIdents = _out562;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2868_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2869_recOwned;
                  readIdents = _2870_recIdents;
                }
              } else if (_source105.is_Array) {
                DAST._IType _2871___mcc_h743 = _source105.dtor_element;
                BigInteger _2872___mcc_h744 = _source105.dtor_dims;
                {
                  RAST._IExpr _2873_recursiveGen;
                  bool _2874_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2875_recIdents;
                  RAST._IExpr _out563;
                  bool _out564;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out565;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out563, out _out564, out _out565);
                  _2873_recursiveGen = _out563;
                  _2874_recOwned = _out564;
                  _2875_recIdents = _out565;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2873_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2874_recOwned;
                  readIdents = _2875_recIdents;
                }
              } else if (_source105.is_Seq) {
                DAST._IType _2876___mcc_h747 = _source105.dtor_element;
                {
                  RAST._IExpr _2877_recursiveGen;
                  bool _2878_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2879_recIdents;
                  RAST._IExpr _out566;
                  bool _out567;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out568;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out566, out _out567, out _out568);
                  _2877_recursiveGen = _out566;
                  _2878_recOwned = _out567;
                  _2879_recIdents = _out568;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2877_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2878_recOwned;
                  readIdents = _2879_recIdents;
                }
              } else if (_source105.is_Set) {
                DAST._IType _2880___mcc_h749 = _source105.dtor_element;
                {
                  RAST._IExpr _2881_recursiveGen;
                  bool _2882_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2883_recIdents;
                  RAST._IExpr _out569;
                  bool _out570;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out571;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out569, out _out570, out _out571);
                  _2881_recursiveGen = _out569;
                  _2882_recOwned = _out570;
                  _2883_recIdents = _out571;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2881_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2882_recOwned;
                  readIdents = _2883_recIdents;
                }
              } else if (_source105.is_Multiset) {
                DAST._IType _2884___mcc_h751 = _source105.dtor_element;
                {
                  RAST._IExpr _2885_recursiveGen;
                  bool _2886_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2887_recIdents;
                  RAST._IExpr _out572;
                  bool _out573;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out574;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out572, out _out573, out _out574);
                  _2885_recursiveGen = _out572;
                  _2886_recOwned = _out573;
                  _2887_recIdents = _out574;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2885_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2886_recOwned;
                  readIdents = _2887_recIdents;
                }
              } else if (_source105.is_Map) {
                DAST._IType _2888___mcc_h753 = _source105.dtor_key;
                DAST._IType _2889___mcc_h754 = _source105.dtor_value;
                {
                  RAST._IExpr _2890_recursiveGen;
                  bool _2891_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2892_recIdents;
                  RAST._IExpr _out575;
                  bool _out576;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out577;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out575, out _out576, out _out577);
                  _2890_recursiveGen = _out575;
                  _2891_recOwned = _out576;
                  _2892_recIdents = _out577;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2890_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2891_recOwned;
                  readIdents = _2892_recIdents;
                }
              } else if (_source105.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2893___mcc_h757 = _source105.dtor_args;
                DAST._IType _2894___mcc_h758 = _source105.dtor_result;
                {
                  RAST._IExpr _2895_recursiveGen;
                  bool _2896_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2897_recIdents;
                  RAST._IExpr _out578;
                  bool _out579;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out580;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out578, out _out579, out _out580);
                  _2895_recursiveGen = _out578;
                  _2896_recOwned = _out579;
                  _2897_recIdents = _out580;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2895_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2896_recOwned;
                  readIdents = _2897_recIdents;
                }
              } else if (_source105.is_Primitive) {
                DAST._IPrimitive _2898___mcc_h761 = _source105.dtor_Primitive_a0;
                {
                  RAST._IExpr _2899_recursiveGen;
                  bool _2900_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2901_recIdents;
                  RAST._IExpr _out581;
                  bool _out582;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out583;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out581, out _out582, out _out583);
                  _2899_recursiveGen = _out581;
                  _2900_recOwned = _out582;
                  _2901_recIdents = _out583;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2899_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2900_recOwned;
                  readIdents = _2901_recIdents;
                }
              } else if (_source105.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2902___mcc_h763 = _source105.dtor_Passthrough_a0;
                {
                  RAST._IExpr _2903_recursiveGen;
                  bool _2904_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2905_recIdents;
                  RAST._IExpr _out584;
                  bool _out585;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out586;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out584, out _out585, out _out586);
                  _2903_recursiveGen = _out584;
                  _2904_recOwned = _out585;
                  _2905_recIdents = _out586;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2903_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2904_recOwned;
                  readIdents = _2905_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2906___mcc_h765 = _source105.dtor_TypeArg_a0;
                {
                  RAST._IExpr _2907_recursiveGen;
                  bool _2908_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2909_recIdents;
                  RAST._IExpr _out587;
                  bool _out588;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out589;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out587, out _out588, out _out589);
                  _2907_recursiveGen = _out587;
                  _2908_recOwned = _out588;
                  _2909_recIdents = _out589;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2907_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2908_recOwned;
                  readIdents = _2909_recIdents;
                }
              }
            } else if (_source83.is_Multiset) {
              DAST._IType _2910___mcc_h767 = _source83.dtor_element;
              DAST._IType _source108 = _2277___mcc_h312;
              if (_source108.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2911___mcc_h771 = _source108.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2912___mcc_h772 = _source108.dtor_typeArgs;
                DAST._IResolvedType _2913___mcc_h773 = _source108.dtor_resolved;
                DAST._IResolvedType _source109 = _2913___mcc_h773;
                if (_source109.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2914___mcc_h777 = _source109.dtor_path;
                  {
                    RAST._IExpr _2915_recursiveGen;
                    bool _2916_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2917_recIdents;
                    RAST._IExpr _out590;
                    bool _out591;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out592;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out590, out _out591, out _out592);
                    _2915_recursiveGen = _out590;
                    _2916_recOwned = _out591;
                    _2917_recIdents = _out592;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2915_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2916_recOwned;
                    readIdents = _2917_recIdents;
                  }
                } else if (_source109.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2918___mcc_h779 = _source109.dtor_path;
                  {
                    RAST._IExpr _2919_recursiveGen;
                    bool _2920_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2921_recIdents;
                    RAST._IExpr _out593;
                    bool _out594;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out595;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out593, out _out594, out _out595);
                    _2919_recursiveGen = _out593;
                    _2920_recOwned = _out594;
                    _2921_recIdents = _out595;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2919_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2920_recOwned;
                    readIdents = _2921_recIdents;
                  }
                } else {
                  DAST._IType _2922___mcc_h781 = _source109.dtor_baseType;
                  DAST._INewtypeRange _2923___mcc_h782 = _source109.dtor_range;
                  bool _2924___mcc_h783 = _source109.dtor_erase;
                  bool _2925_erase = _2924___mcc_h783;
                  DAST._INewtypeRange _2926_range = _2923___mcc_h782;
                  DAST._IType _2927_b = _2922___mcc_h781;
                  {
                    if (object.Equals(_2271_fromTpe, _2927_b)) {
                      RAST._IExpr _2928_recursiveGen;
                      bool _2929_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2930_recIdents;
                      RAST._IExpr _out596;
                      bool _out597;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out598;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out596, out _out597, out _out598);
                      _2928_recursiveGen = _out596;
                      _2929_recOwned = _out597;
                      _2930_recIdents = _out598;
                      Std.Wrappers._IOption<RAST._IType> _2931_potentialRhsType;
                      _2931_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_2927_b, _2926_range);
                      Std.Wrappers._IOption<RAST._IType> _source110 = _2931_potentialRhsType;
                      if (_source110.is_None) {
                        if (_2925_erase) {
                          r = _2928_recursiveGen;
                        } else {
                          RAST._IType _2932_rhsType;
                          RAST._IType _out599;
                          _out599 = DCOMP.COMP.GenType(_2270_toTpe, true, false);
                          _2932_rhsType = _out599;
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_2932_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_2928_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                        }
                        isOwned = _2929_recOwned;
                      } else {
                        RAST._IType _2933___mcc_h1246 = _source110.dtor_value;
                        RAST._IType _2934_v = _2933___mcc_h1246;
                        r = RAST.Expr.create_ConversionNum(_2934_v, _2928_recursiveGen);
                        isOwned = true;
                      }
                      readIdents = _2930_recIdents;
                    } else {
                      RAST._IExpr _out600;
                      bool _out601;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out602;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2272_expr, _2271_fromTpe, _2927_b), _2927_b, _2270_toTpe), selfIdent, @params, mustOwn, out _out600, out _out601, out _out602);
                      r = _out600;
                      isOwned = _out601;
                      readIdents = _out602;
                    }
                  }
                }
              } else if (_source108.is_Nullable) {
                DAST._IType _2935___mcc_h787 = _source108.dtor_Nullable_a0;
                {
                  RAST._IExpr _2936_recursiveGen;
                  bool _2937_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2938_recIdents;
                  RAST._IExpr _out603;
                  bool _out604;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out605;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out603, out _out604, out _out605);
                  _2936_recursiveGen = _out603;
                  _2937_recOwned = _out604;
                  _2938_recIdents = _out605;
                  Dafny.ISequence<Dafny.Rune> _2939_s;
                  _2939_s = (_2936_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_2937_recOwned)) {
                    _2939_s = Dafny.Sequence<Dafny.Rune>.Concat(_2939_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  _2939_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2939_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  r = RAST.Expr.create_RawExpr(_2939_s);
                  isOwned = true;
                  readIdents = _2938_recIdents;
                }
              } else if (_source108.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2940___mcc_h789 = _source108.dtor_Tuple_a0;
                {
                  RAST._IExpr _2941_recursiveGen;
                  bool _2942_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2943_recIdents;
                  RAST._IExpr _out606;
                  bool _out607;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out608;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out606, out _out607, out _out608);
                  _2941_recursiveGen = _out606;
                  _2942_recOwned = _out607;
                  _2943_recIdents = _out608;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2941_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2942_recOwned;
                  readIdents = _2943_recIdents;
                }
              } else if (_source108.is_Array) {
                DAST._IType _2944___mcc_h791 = _source108.dtor_element;
                BigInteger _2945___mcc_h792 = _source108.dtor_dims;
                {
                  RAST._IExpr _2946_recursiveGen;
                  bool _2947_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2948_recIdents;
                  RAST._IExpr _out609;
                  bool _out610;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out611;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out609, out _out610, out _out611);
                  _2946_recursiveGen = _out609;
                  _2947_recOwned = _out610;
                  _2948_recIdents = _out611;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2946_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2947_recOwned;
                  readIdents = _2948_recIdents;
                }
              } else if (_source108.is_Seq) {
                DAST._IType _2949___mcc_h795 = _source108.dtor_element;
                {
                  RAST._IExpr _2950_recursiveGen;
                  bool _2951_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2952_recIdents;
                  RAST._IExpr _out612;
                  bool _out613;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out614;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out612, out _out613, out _out614);
                  _2950_recursiveGen = _out612;
                  _2951_recOwned = _out613;
                  _2952_recIdents = _out614;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2950_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2951_recOwned;
                  readIdents = _2952_recIdents;
                }
              } else if (_source108.is_Set) {
                DAST._IType _2953___mcc_h797 = _source108.dtor_element;
                {
                  RAST._IExpr _2954_recursiveGen;
                  bool _2955_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2956_recIdents;
                  RAST._IExpr _out615;
                  bool _out616;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out617;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out615, out _out616, out _out617);
                  _2954_recursiveGen = _out615;
                  _2955_recOwned = _out616;
                  _2956_recIdents = _out617;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2954_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2955_recOwned;
                  readIdents = _2956_recIdents;
                }
              } else if (_source108.is_Multiset) {
                DAST._IType _2957___mcc_h799 = _source108.dtor_element;
                {
                  RAST._IExpr _2958_recursiveGen;
                  bool _2959_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2960_recIdents;
                  RAST._IExpr _out618;
                  bool _out619;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out620;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out618, out _out619, out _out620);
                  _2958_recursiveGen = _out618;
                  _2959_recOwned = _out619;
                  _2960_recIdents = _out620;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2958_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2959_recOwned;
                  readIdents = _2960_recIdents;
                }
              } else if (_source108.is_Map) {
                DAST._IType _2961___mcc_h801 = _source108.dtor_key;
                DAST._IType _2962___mcc_h802 = _source108.dtor_value;
                {
                  RAST._IExpr _2963_recursiveGen;
                  bool _2964_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2965_recIdents;
                  RAST._IExpr _out621;
                  bool _out622;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out623;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out621, out _out622, out _out623);
                  _2963_recursiveGen = _out621;
                  _2964_recOwned = _out622;
                  _2965_recIdents = _out623;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2963_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2964_recOwned;
                  readIdents = _2965_recIdents;
                }
              } else if (_source108.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2966___mcc_h805 = _source108.dtor_args;
                DAST._IType _2967___mcc_h806 = _source108.dtor_result;
                {
                  RAST._IExpr _2968_recursiveGen;
                  bool _2969_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2970_recIdents;
                  RAST._IExpr _out624;
                  bool _out625;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out626;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out624, out _out625, out _out626);
                  _2968_recursiveGen = _out624;
                  _2969_recOwned = _out625;
                  _2970_recIdents = _out626;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2968_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2969_recOwned;
                  readIdents = _2970_recIdents;
                }
              } else if (_source108.is_Primitive) {
                DAST._IPrimitive _2971___mcc_h809 = _source108.dtor_Primitive_a0;
                {
                  RAST._IExpr _2972_recursiveGen;
                  bool _2973_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2974_recIdents;
                  RAST._IExpr _out627;
                  bool _out628;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out629;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out627, out _out628, out _out629);
                  _2972_recursiveGen = _out627;
                  _2973_recOwned = _out628;
                  _2974_recIdents = _out629;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2972_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2973_recOwned;
                  readIdents = _2974_recIdents;
                }
              } else if (_source108.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2975___mcc_h811 = _source108.dtor_Passthrough_a0;
                {
                  RAST._IExpr _2976_recursiveGen;
                  bool _2977_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2978_recIdents;
                  RAST._IExpr _out630;
                  bool _out631;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out632;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out630, out _out631, out _out632);
                  _2976_recursiveGen = _out630;
                  _2977_recOwned = _out631;
                  _2978_recIdents = _out632;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2976_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2977_recOwned;
                  readIdents = _2978_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2979___mcc_h813 = _source108.dtor_TypeArg_a0;
                {
                  RAST._IExpr _2980_recursiveGen;
                  bool _2981_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2982_recIdents;
                  RAST._IExpr _out633;
                  bool _out634;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out635;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out633, out _out634, out _out635);
                  _2980_recursiveGen = _out633;
                  _2981_recOwned = _out634;
                  _2982_recIdents = _out635;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2980_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2981_recOwned;
                  readIdents = _2982_recIdents;
                }
              }
            } else if (_source83.is_Map) {
              DAST._IType _2983___mcc_h815 = _source83.dtor_key;
              DAST._IType _2984___mcc_h816 = _source83.dtor_value;
              DAST._IType _source111 = _2277___mcc_h312;
              if (_source111.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2985___mcc_h823 = _source111.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2986___mcc_h824 = _source111.dtor_typeArgs;
                DAST._IResolvedType _2987___mcc_h825 = _source111.dtor_resolved;
                DAST._IResolvedType _source112 = _2987___mcc_h825;
                if (_source112.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2988___mcc_h829 = _source112.dtor_path;
                  {
                    RAST._IExpr _2989_recursiveGen;
                    bool _2990_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2991_recIdents;
                    RAST._IExpr _out636;
                    bool _out637;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out638;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out636, out _out637, out _out638);
                    _2989_recursiveGen = _out636;
                    _2990_recOwned = _out637;
                    _2991_recIdents = _out638;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2989_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2990_recOwned;
                    readIdents = _2991_recIdents;
                  }
                } else if (_source112.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2992___mcc_h831 = _source112.dtor_path;
                  {
                    RAST._IExpr _2993_recursiveGen;
                    bool _2994_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2995_recIdents;
                    RAST._IExpr _out639;
                    bool _out640;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out641;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out639, out _out640, out _out641);
                    _2993_recursiveGen = _out639;
                    _2994_recOwned = _out640;
                    _2995_recIdents = _out641;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2993_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2994_recOwned;
                    readIdents = _2995_recIdents;
                  }
                } else {
                  DAST._IType _2996___mcc_h833 = _source112.dtor_baseType;
                  DAST._INewtypeRange _2997___mcc_h834 = _source112.dtor_range;
                  bool _2998___mcc_h835 = _source112.dtor_erase;
                  bool _2999_erase = _2998___mcc_h835;
                  DAST._INewtypeRange _3000_range = _2997___mcc_h834;
                  DAST._IType _3001_b = _2996___mcc_h833;
                  {
                    if (object.Equals(_2271_fromTpe, _3001_b)) {
                      RAST._IExpr _3002_recursiveGen;
                      bool _3003_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3004_recIdents;
                      RAST._IExpr _out642;
                      bool _out643;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out644;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out642, out _out643, out _out644);
                      _3002_recursiveGen = _out642;
                      _3003_recOwned = _out643;
                      _3004_recIdents = _out644;
                      Std.Wrappers._IOption<RAST._IType> _3005_potentialRhsType;
                      _3005_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3001_b, _3000_range);
                      Std.Wrappers._IOption<RAST._IType> _source113 = _3005_potentialRhsType;
                      if (_source113.is_None) {
                        if (_2999_erase) {
                          r = _3002_recursiveGen;
                        } else {
                          RAST._IType _3006_rhsType;
                          RAST._IType _out645;
                          _out645 = DCOMP.COMP.GenType(_2270_toTpe, true, false);
                          _3006_rhsType = _out645;
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3006_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3002_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                        }
                        isOwned = _3003_recOwned;
                      } else {
                        RAST._IType _3007___mcc_h1247 = _source113.dtor_value;
                        RAST._IType _3008_v = _3007___mcc_h1247;
                        r = RAST.Expr.create_ConversionNum(_3008_v, _3002_recursiveGen);
                        isOwned = true;
                      }
                      readIdents = _3004_recIdents;
                    } else {
                      RAST._IExpr _out646;
                      bool _out647;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out648;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2272_expr, _2271_fromTpe, _3001_b), _3001_b, _2270_toTpe), selfIdent, @params, mustOwn, out _out646, out _out647, out _out648);
                      r = _out646;
                      isOwned = _out647;
                      readIdents = _out648;
                    }
                  }
                }
              } else if (_source111.is_Nullable) {
                DAST._IType _3009___mcc_h839 = _source111.dtor_Nullable_a0;
                {
                  RAST._IExpr _3010_recursiveGen;
                  bool _3011_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3012_recIdents;
                  RAST._IExpr _out649;
                  bool _out650;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out651;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out649, out _out650, out _out651);
                  _3010_recursiveGen = _out649;
                  _3011_recOwned = _out650;
                  _3012_recIdents = _out651;
                  Dafny.ISequence<Dafny.Rune> _3013_s;
                  _3013_s = (_3010_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_3011_recOwned)) {
                    _3013_s = Dafny.Sequence<Dafny.Rune>.Concat(_3013_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  _3013_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3013_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  r = RAST.Expr.create_RawExpr(_3013_s);
                  isOwned = true;
                  readIdents = _3012_recIdents;
                }
              } else if (_source111.is_Tuple) {
                Dafny.ISequence<DAST._IType> _3014___mcc_h841 = _source111.dtor_Tuple_a0;
                {
                  RAST._IExpr _3015_recursiveGen;
                  bool _3016_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3017_recIdents;
                  RAST._IExpr _out652;
                  bool _out653;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out654;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out652, out _out653, out _out654);
                  _3015_recursiveGen = _out652;
                  _3016_recOwned = _out653;
                  _3017_recIdents = _out654;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3015_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3016_recOwned;
                  readIdents = _3017_recIdents;
                }
              } else if (_source111.is_Array) {
                DAST._IType _3018___mcc_h843 = _source111.dtor_element;
                BigInteger _3019___mcc_h844 = _source111.dtor_dims;
                {
                  RAST._IExpr _3020_recursiveGen;
                  bool _3021_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3022_recIdents;
                  RAST._IExpr _out655;
                  bool _out656;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out657;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out655, out _out656, out _out657);
                  _3020_recursiveGen = _out655;
                  _3021_recOwned = _out656;
                  _3022_recIdents = _out657;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3020_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3021_recOwned;
                  readIdents = _3022_recIdents;
                }
              } else if (_source111.is_Seq) {
                DAST._IType _3023___mcc_h847 = _source111.dtor_element;
                {
                  RAST._IExpr _3024_recursiveGen;
                  bool _3025_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3026_recIdents;
                  RAST._IExpr _out658;
                  bool _out659;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out660;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out658, out _out659, out _out660);
                  _3024_recursiveGen = _out658;
                  _3025_recOwned = _out659;
                  _3026_recIdents = _out660;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3024_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3025_recOwned;
                  readIdents = _3026_recIdents;
                }
              } else if (_source111.is_Set) {
                DAST._IType _3027___mcc_h849 = _source111.dtor_element;
                {
                  RAST._IExpr _3028_recursiveGen;
                  bool _3029_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3030_recIdents;
                  RAST._IExpr _out661;
                  bool _out662;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out663;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out661, out _out662, out _out663);
                  _3028_recursiveGen = _out661;
                  _3029_recOwned = _out662;
                  _3030_recIdents = _out663;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3028_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3029_recOwned;
                  readIdents = _3030_recIdents;
                }
              } else if (_source111.is_Multiset) {
                DAST._IType _3031___mcc_h851 = _source111.dtor_element;
                {
                  RAST._IExpr _3032_recursiveGen;
                  bool _3033_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3034_recIdents;
                  RAST._IExpr _out664;
                  bool _out665;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out666;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out664, out _out665, out _out666);
                  _3032_recursiveGen = _out664;
                  _3033_recOwned = _out665;
                  _3034_recIdents = _out666;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3032_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3033_recOwned;
                  readIdents = _3034_recIdents;
                }
              } else if (_source111.is_Map) {
                DAST._IType _3035___mcc_h853 = _source111.dtor_key;
                DAST._IType _3036___mcc_h854 = _source111.dtor_value;
                {
                  RAST._IExpr _3037_recursiveGen;
                  bool _3038_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3039_recIdents;
                  RAST._IExpr _out667;
                  bool _out668;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out669;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out667, out _out668, out _out669);
                  _3037_recursiveGen = _out667;
                  _3038_recOwned = _out668;
                  _3039_recIdents = _out669;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3037_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3038_recOwned;
                  readIdents = _3039_recIdents;
                }
              } else if (_source111.is_Arrow) {
                Dafny.ISequence<DAST._IType> _3040___mcc_h857 = _source111.dtor_args;
                DAST._IType _3041___mcc_h858 = _source111.dtor_result;
                {
                  RAST._IExpr _3042_recursiveGen;
                  bool _3043_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3044_recIdents;
                  RAST._IExpr _out670;
                  bool _out671;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out672;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out670, out _out671, out _out672);
                  _3042_recursiveGen = _out670;
                  _3043_recOwned = _out671;
                  _3044_recIdents = _out672;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3042_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3043_recOwned;
                  readIdents = _3044_recIdents;
                }
              } else if (_source111.is_Primitive) {
                DAST._IPrimitive _3045___mcc_h861 = _source111.dtor_Primitive_a0;
                {
                  RAST._IExpr _3046_recursiveGen;
                  bool _3047_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3048_recIdents;
                  RAST._IExpr _out673;
                  bool _out674;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out675;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out673, out _out674, out _out675);
                  _3046_recursiveGen = _out673;
                  _3047_recOwned = _out674;
                  _3048_recIdents = _out675;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3046_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3047_recOwned;
                  readIdents = _3048_recIdents;
                }
              } else if (_source111.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _3049___mcc_h863 = _source111.dtor_Passthrough_a0;
                {
                  RAST._IExpr _3050_recursiveGen;
                  bool _3051_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3052_recIdents;
                  RAST._IExpr _out676;
                  bool _out677;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out678;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out676, out _out677, out _out678);
                  _3050_recursiveGen = _out676;
                  _3051_recOwned = _out677;
                  _3052_recIdents = _out678;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3050_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3051_recOwned;
                  readIdents = _3052_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3053___mcc_h865 = _source111.dtor_TypeArg_a0;
                {
                  RAST._IExpr _3054_recursiveGen;
                  bool _3055_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3056_recIdents;
                  RAST._IExpr _out679;
                  bool _out680;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out681;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out679, out _out680, out _out681);
                  _3054_recursiveGen = _out679;
                  _3055_recOwned = _out680;
                  _3056_recIdents = _out681;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3054_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3055_recOwned;
                  readIdents = _3056_recIdents;
                }
              }
            } else if (_source83.is_Arrow) {
              Dafny.ISequence<DAST._IType> _3057___mcc_h867 = _source83.dtor_args;
              DAST._IType _3058___mcc_h868 = _source83.dtor_result;
              DAST._IType _source114 = _2277___mcc_h312;
              if (_source114.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3059___mcc_h875 = _source114.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _3060___mcc_h876 = _source114.dtor_typeArgs;
                DAST._IResolvedType _3061___mcc_h877 = _source114.dtor_resolved;
                DAST._IResolvedType _source115 = _3061___mcc_h877;
                if (_source115.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3062___mcc_h881 = _source115.dtor_path;
                  {
                    RAST._IExpr _3063_recursiveGen;
                    bool _3064_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3065_recIdents;
                    RAST._IExpr _out682;
                    bool _out683;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out684;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out682, out _out683, out _out684);
                    _3063_recursiveGen = _out682;
                    _3064_recOwned = _out683;
                    _3065_recIdents = _out684;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3063_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3064_recOwned;
                    readIdents = _3065_recIdents;
                  }
                } else if (_source115.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3066___mcc_h883 = _source115.dtor_path;
                  {
                    RAST._IExpr _3067_recursiveGen;
                    bool _3068_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3069_recIdents;
                    RAST._IExpr _out685;
                    bool _out686;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out687;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out685, out _out686, out _out687);
                    _3067_recursiveGen = _out685;
                    _3068_recOwned = _out686;
                    _3069_recIdents = _out687;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3067_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3068_recOwned;
                    readIdents = _3069_recIdents;
                  }
                } else {
                  DAST._IType _3070___mcc_h885 = _source115.dtor_baseType;
                  DAST._INewtypeRange _3071___mcc_h886 = _source115.dtor_range;
                  bool _3072___mcc_h887 = _source115.dtor_erase;
                  bool _3073_erase = _3072___mcc_h887;
                  DAST._INewtypeRange _3074_range = _3071___mcc_h886;
                  DAST._IType _3075_b = _3070___mcc_h885;
                  {
                    if (object.Equals(_2271_fromTpe, _3075_b)) {
                      RAST._IExpr _3076_recursiveGen;
                      bool _3077_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3078_recIdents;
                      RAST._IExpr _out688;
                      bool _out689;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out690;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out688, out _out689, out _out690);
                      _3076_recursiveGen = _out688;
                      _3077_recOwned = _out689;
                      _3078_recIdents = _out690;
                      Std.Wrappers._IOption<RAST._IType> _3079_potentialRhsType;
                      _3079_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3075_b, _3074_range);
                      Std.Wrappers._IOption<RAST._IType> _source116 = _3079_potentialRhsType;
                      if (_source116.is_None) {
                        if (_3073_erase) {
                          r = _3076_recursiveGen;
                        } else {
                          RAST._IType _3080_rhsType;
                          RAST._IType _out691;
                          _out691 = DCOMP.COMP.GenType(_2270_toTpe, true, false);
                          _3080_rhsType = _out691;
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3080_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3076_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                        }
                        isOwned = _3077_recOwned;
                      } else {
                        RAST._IType _3081___mcc_h1248 = _source116.dtor_value;
                        RAST._IType _3082_v = _3081___mcc_h1248;
                        r = RAST.Expr.create_ConversionNum(_3082_v, _3076_recursiveGen);
                        isOwned = true;
                      }
                      readIdents = _3078_recIdents;
                    } else {
                      RAST._IExpr _out692;
                      bool _out693;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out694;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2272_expr, _2271_fromTpe, _3075_b), _3075_b, _2270_toTpe), selfIdent, @params, mustOwn, out _out692, out _out693, out _out694);
                      r = _out692;
                      isOwned = _out693;
                      readIdents = _out694;
                    }
                  }
                }
              } else if (_source114.is_Nullable) {
                DAST._IType _3083___mcc_h891 = _source114.dtor_Nullable_a0;
                {
                  RAST._IExpr _3084_recursiveGen;
                  bool _3085_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3086_recIdents;
                  RAST._IExpr _out695;
                  bool _out696;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out697;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out695, out _out696, out _out697);
                  _3084_recursiveGen = _out695;
                  _3085_recOwned = _out696;
                  _3086_recIdents = _out697;
                  Dafny.ISequence<Dafny.Rune> _3087_s;
                  _3087_s = (_3084_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_3085_recOwned)) {
                    _3087_s = Dafny.Sequence<Dafny.Rune>.Concat(_3087_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  _3087_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3087_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  r = RAST.Expr.create_RawExpr(_3087_s);
                  isOwned = true;
                  readIdents = _3086_recIdents;
                }
              } else if (_source114.is_Tuple) {
                Dafny.ISequence<DAST._IType> _3088___mcc_h893 = _source114.dtor_Tuple_a0;
                {
                  RAST._IExpr _3089_recursiveGen;
                  bool _3090_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3091_recIdents;
                  RAST._IExpr _out698;
                  bool _out699;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out700;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out698, out _out699, out _out700);
                  _3089_recursiveGen = _out698;
                  _3090_recOwned = _out699;
                  _3091_recIdents = _out700;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3089_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3090_recOwned;
                  readIdents = _3091_recIdents;
                }
              } else if (_source114.is_Array) {
                DAST._IType _3092___mcc_h895 = _source114.dtor_element;
                BigInteger _3093___mcc_h896 = _source114.dtor_dims;
                {
                  RAST._IExpr _3094_recursiveGen;
                  bool _3095_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3096_recIdents;
                  RAST._IExpr _out701;
                  bool _out702;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out703;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out701, out _out702, out _out703);
                  _3094_recursiveGen = _out701;
                  _3095_recOwned = _out702;
                  _3096_recIdents = _out703;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3094_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3095_recOwned;
                  readIdents = _3096_recIdents;
                }
              } else if (_source114.is_Seq) {
                DAST._IType _3097___mcc_h899 = _source114.dtor_element;
                {
                  RAST._IExpr _3098_recursiveGen;
                  bool _3099_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3100_recIdents;
                  RAST._IExpr _out704;
                  bool _out705;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out706;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out704, out _out705, out _out706);
                  _3098_recursiveGen = _out704;
                  _3099_recOwned = _out705;
                  _3100_recIdents = _out706;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3098_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3099_recOwned;
                  readIdents = _3100_recIdents;
                }
              } else if (_source114.is_Set) {
                DAST._IType _3101___mcc_h901 = _source114.dtor_element;
                {
                  RAST._IExpr _3102_recursiveGen;
                  bool _3103_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3104_recIdents;
                  RAST._IExpr _out707;
                  bool _out708;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out709;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out707, out _out708, out _out709);
                  _3102_recursiveGen = _out707;
                  _3103_recOwned = _out708;
                  _3104_recIdents = _out709;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3102_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3103_recOwned;
                  readIdents = _3104_recIdents;
                }
              } else if (_source114.is_Multiset) {
                DAST._IType _3105___mcc_h903 = _source114.dtor_element;
                {
                  RAST._IExpr _3106_recursiveGen;
                  bool _3107_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3108_recIdents;
                  RAST._IExpr _out710;
                  bool _out711;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out712;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out710, out _out711, out _out712);
                  _3106_recursiveGen = _out710;
                  _3107_recOwned = _out711;
                  _3108_recIdents = _out712;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3106_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3107_recOwned;
                  readIdents = _3108_recIdents;
                }
              } else if (_source114.is_Map) {
                DAST._IType _3109___mcc_h905 = _source114.dtor_key;
                DAST._IType _3110___mcc_h906 = _source114.dtor_value;
                {
                  RAST._IExpr _3111_recursiveGen;
                  bool _3112_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3113_recIdents;
                  RAST._IExpr _out713;
                  bool _out714;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out715;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out713, out _out714, out _out715);
                  _3111_recursiveGen = _out713;
                  _3112_recOwned = _out714;
                  _3113_recIdents = _out715;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3111_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3112_recOwned;
                  readIdents = _3113_recIdents;
                }
              } else if (_source114.is_Arrow) {
                Dafny.ISequence<DAST._IType> _3114___mcc_h909 = _source114.dtor_args;
                DAST._IType _3115___mcc_h910 = _source114.dtor_result;
                {
                  RAST._IExpr _3116_recursiveGen;
                  bool _3117_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3118_recIdents;
                  RAST._IExpr _out716;
                  bool _out717;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out718;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out716, out _out717, out _out718);
                  _3116_recursiveGen = _out716;
                  _3117_recOwned = _out717;
                  _3118_recIdents = _out718;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3116_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3117_recOwned;
                  readIdents = _3118_recIdents;
                }
              } else if (_source114.is_Primitive) {
                DAST._IPrimitive _3119___mcc_h913 = _source114.dtor_Primitive_a0;
                {
                  RAST._IExpr _3120_recursiveGen;
                  bool _3121_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3122_recIdents;
                  RAST._IExpr _out719;
                  bool _out720;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out721;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out719, out _out720, out _out721);
                  _3120_recursiveGen = _out719;
                  _3121_recOwned = _out720;
                  _3122_recIdents = _out721;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3120_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3121_recOwned;
                  readIdents = _3122_recIdents;
                }
              } else if (_source114.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _3123___mcc_h915 = _source114.dtor_Passthrough_a0;
                {
                  RAST._IExpr _3124_recursiveGen;
                  bool _3125_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3126_recIdents;
                  RAST._IExpr _out722;
                  bool _out723;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out724;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out722, out _out723, out _out724);
                  _3124_recursiveGen = _out722;
                  _3125_recOwned = _out723;
                  _3126_recIdents = _out724;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3124_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3125_recOwned;
                  readIdents = _3126_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3127___mcc_h917 = _source114.dtor_TypeArg_a0;
                {
                  RAST._IExpr _3128_recursiveGen;
                  bool _3129_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3130_recIdents;
                  RAST._IExpr _out725;
                  bool _out726;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out727;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out725, out _out726, out _out727);
                  _3128_recursiveGen = _out725;
                  _3129_recOwned = _out726;
                  _3130_recIdents = _out727;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3128_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3129_recOwned;
                  readIdents = _3130_recIdents;
                }
              }
            } else if (_source83.is_Primitive) {
              DAST._IPrimitive _3131___mcc_h919 = _source83.dtor_Primitive_a0;
              DAST._IPrimitive _source117 = _3131___mcc_h919;
              if (_source117.is_Int) {
                DAST._IType _source118 = _2277___mcc_h312;
                if (_source118.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3132___mcc_h923 = _source118.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _3133___mcc_h924 = _source118.dtor_typeArgs;
                  DAST._IResolvedType _3134___mcc_h925 = _source118.dtor_resolved;
                  DAST._IResolvedType _source119 = _3134___mcc_h925;
                  if (_source119.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3135___mcc_h929 = _source119.dtor_path;
                    {
                      RAST._IExpr _3136_recursiveGen;
                      bool _3137_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3138_recIdents;
                      RAST._IExpr _out728;
                      bool _out729;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out730;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out728, out _out729, out _out730);
                      _3136_recursiveGen = _out728;
                      _3137_recOwned = _out729;
                      _3138_recIdents = _out730;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3136_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3137_recOwned;
                      readIdents = _3138_recIdents;
                    }
                  } else if (_source119.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3139___mcc_h931 = _source119.dtor_path;
                    {
                      RAST._IExpr _3140_recursiveGen;
                      bool _3141_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3142_recIdents;
                      RAST._IExpr _out731;
                      bool _out732;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out733;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out731, out _out732, out _out733);
                      _3140_recursiveGen = _out731;
                      _3141_recOwned = _out732;
                      _3142_recIdents = _out733;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3140_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3141_recOwned;
                      readIdents = _3142_recIdents;
                    }
                  } else {
                    DAST._IType _3143___mcc_h933 = _source119.dtor_baseType;
                    DAST._INewtypeRange _3144___mcc_h934 = _source119.dtor_range;
                    bool _3145___mcc_h935 = _source119.dtor_erase;
                    bool _3146_erase = _3145___mcc_h935;
                    DAST._INewtypeRange _3147_range = _3144___mcc_h934;
                    DAST._IType _3148_b = _3143___mcc_h933;
                    {
                      if (object.Equals(_2271_fromTpe, _3148_b)) {
                        RAST._IExpr _3149_recursiveGen;
                        bool _3150_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3151_recIdents;
                        RAST._IExpr _out734;
                        bool _out735;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out736;
                        DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out734, out _out735, out _out736);
                        _3149_recursiveGen = _out734;
                        _3150_recOwned = _out735;
                        _3151_recIdents = _out736;
                        Std.Wrappers._IOption<RAST._IType> _3152_potentialRhsType;
                        _3152_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3148_b, _3147_range);
                        Std.Wrappers._IOption<RAST._IType> _source120 = _3152_potentialRhsType;
                        if (_source120.is_None) {
                          if (_3146_erase) {
                            r = _3149_recursiveGen;
                          } else {
                            RAST._IType _3153_rhsType;
                            RAST._IType _out737;
                            _out737 = DCOMP.COMP.GenType(_2270_toTpe, true, false);
                            _3153_rhsType = _out737;
                            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3153_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3149_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                          }
                          isOwned = _3150_recOwned;
                        } else {
                          RAST._IType _3154___mcc_h1249 = _source120.dtor_value;
                          RAST._IType _3155_v = _3154___mcc_h1249;
                          r = RAST.Expr.create_ConversionNum(_3155_v, _3149_recursiveGen);
                          isOwned = true;
                        }
                        readIdents = _3151_recIdents;
                      } else {
                        RAST._IExpr _out738;
                        bool _out739;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out740;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2272_expr, _2271_fromTpe, _3148_b), _3148_b, _2270_toTpe), selfIdent, @params, mustOwn, out _out738, out _out739, out _out740);
                        r = _out738;
                        isOwned = _out739;
                        readIdents = _out740;
                      }
                    }
                  }
                } else if (_source118.is_Nullable) {
                  DAST._IType _3156___mcc_h939 = _source118.dtor_Nullable_a0;
                  {
                    RAST._IExpr _3157_recursiveGen;
                    bool _3158_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3159_recIdents;
                    RAST._IExpr _out741;
                    bool _out742;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out743;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out741, out _out742, out _out743);
                    _3157_recursiveGen = _out741;
                    _3158_recOwned = _out742;
                    _3159_recIdents = _out743;
                    Dafny.ISequence<Dafny.Rune> _3160_s;
                    _3160_s = (_3157_recursiveGen)._ToString(DCOMP.__default.IND);
                    if (!(_3158_recOwned)) {
                      _3160_s = Dafny.Sequence<Dafny.Rune>.Concat(_3160_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    _3160_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3160_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    r = RAST.Expr.create_RawExpr(_3160_s);
                    isOwned = true;
                    readIdents = _3159_recIdents;
                  }
                } else if (_source118.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _3161___mcc_h941 = _source118.dtor_Tuple_a0;
                  {
                    RAST._IExpr _3162_recursiveGen;
                    bool _3163_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3164_recIdents;
                    RAST._IExpr _out744;
                    bool _out745;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out746;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out744, out _out745, out _out746);
                    _3162_recursiveGen = _out744;
                    _3163_recOwned = _out745;
                    _3164_recIdents = _out746;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3162_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3163_recOwned;
                    readIdents = _3164_recIdents;
                  }
                } else if (_source118.is_Array) {
                  DAST._IType _3165___mcc_h943 = _source118.dtor_element;
                  BigInteger _3166___mcc_h944 = _source118.dtor_dims;
                  {
                    RAST._IExpr _3167_recursiveGen;
                    bool _3168_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3169_recIdents;
                    RAST._IExpr _out747;
                    bool _out748;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out749;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out747, out _out748, out _out749);
                    _3167_recursiveGen = _out747;
                    _3168_recOwned = _out748;
                    _3169_recIdents = _out749;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3167_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3168_recOwned;
                    readIdents = _3169_recIdents;
                  }
                } else if (_source118.is_Seq) {
                  DAST._IType _3170___mcc_h947 = _source118.dtor_element;
                  {
                    RAST._IExpr _3171_recursiveGen;
                    bool _3172_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3173_recIdents;
                    RAST._IExpr _out750;
                    bool _out751;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out752;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out750, out _out751, out _out752);
                    _3171_recursiveGen = _out750;
                    _3172_recOwned = _out751;
                    _3173_recIdents = _out752;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3171_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3172_recOwned;
                    readIdents = _3173_recIdents;
                  }
                } else if (_source118.is_Set) {
                  DAST._IType _3174___mcc_h949 = _source118.dtor_element;
                  {
                    RAST._IExpr _3175_recursiveGen;
                    bool _3176_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3177_recIdents;
                    RAST._IExpr _out753;
                    bool _out754;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out755;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out753, out _out754, out _out755);
                    _3175_recursiveGen = _out753;
                    _3176_recOwned = _out754;
                    _3177_recIdents = _out755;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3175_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3176_recOwned;
                    readIdents = _3177_recIdents;
                  }
                } else if (_source118.is_Multiset) {
                  DAST._IType _3178___mcc_h951 = _source118.dtor_element;
                  {
                    RAST._IExpr _3179_recursiveGen;
                    bool _3180_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3181_recIdents;
                    RAST._IExpr _out756;
                    bool _out757;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out758;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out756, out _out757, out _out758);
                    _3179_recursiveGen = _out756;
                    _3180_recOwned = _out757;
                    _3181_recIdents = _out758;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3179_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3180_recOwned;
                    readIdents = _3181_recIdents;
                  }
                } else if (_source118.is_Map) {
                  DAST._IType _3182___mcc_h953 = _source118.dtor_key;
                  DAST._IType _3183___mcc_h954 = _source118.dtor_value;
                  {
                    RAST._IExpr _3184_recursiveGen;
                    bool _3185_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3186_recIdents;
                    RAST._IExpr _out759;
                    bool _out760;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out761;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out759, out _out760, out _out761);
                    _3184_recursiveGen = _out759;
                    _3185_recOwned = _out760;
                    _3186_recIdents = _out761;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3184_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3185_recOwned;
                    readIdents = _3186_recIdents;
                  }
                } else if (_source118.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _3187___mcc_h957 = _source118.dtor_args;
                  DAST._IType _3188___mcc_h958 = _source118.dtor_result;
                  {
                    RAST._IExpr _3189_recursiveGen;
                    bool _3190_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3191_recIdents;
                    RAST._IExpr _out762;
                    bool _out763;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out764;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out762, out _out763, out _out764);
                    _3189_recursiveGen = _out762;
                    _3190_recOwned = _out763;
                    _3191_recIdents = _out764;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3189_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3190_recOwned;
                    readIdents = _3191_recIdents;
                  }
                } else if (_source118.is_Primitive) {
                  DAST._IPrimitive _3192___mcc_h961 = _source118.dtor_Primitive_a0;
                  DAST._IPrimitive _source121 = _3192___mcc_h961;
                  if (_source121.is_Int) {
                    {
                      RAST._IExpr _3193_recursiveGen;
                      bool _3194_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3195_recIdents;
                      RAST._IExpr _out765;
                      bool _out766;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out767;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out765, out _out766, out _out767);
                      _3193_recursiveGen = _out765;
                      _3194_recOwned = _out766;
                      _3195_recIdents = _out767;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3193_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3194_recOwned;
                      readIdents = _3195_recIdents;
                    }
                  } else if (_source121.is_Real) {
                    {
                      RAST._IExpr _3196_recursiveGen;
                      bool _3197___v50;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3198_recIdents;
                      RAST._IExpr _out768;
                      bool _out769;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out770;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, true, out _out768, out _out769, out _out770);
                      _3196_recursiveGen = _out768;
                      _3197___v50 = _out769;
                      _3198_recIdents = _out770;
                      r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), (_3196_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))));
                      isOwned = true;
                      readIdents = _3198_recIdents;
                    }
                  } else if (_source121.is_String) {
                    {
                      RAST._IExpr _3199_recursiveGen;
                      bool _3200_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3201_recIdents;
                      RAST._IExpr _out771;
                      bool _out772;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out773;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out771, out _out772, out _out773);
                      _3199_recursiveGen = _out771;
                      _3200_recOwned = _out772;
                      _3201_recIdents = _out773;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3199_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3200_recOwned;
                      readIdents = _3201_recIdents;
                    }
                  } else if (_source121.is_Bool) {
                    {
                      RAST._IExpr _3202_recursiveGen;
                      bool _3203_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3204_recIdents;
                      RAST._IExpr _out774;
                      bool _out775;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out776;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out774, out _out775, out _out776);
                      _3202_recursiveGen = _out774;
                      _3203_recOwned = _out775;
                      _3204_recIdents = _out776;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3202_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3203_recOwned;
                      readIdents = _3204_recIdents;
                    }
                  } else {
                    {
                      RAST._IType _3205_rhsType;
                      RAST._IType _out777;
                      _out777 = DCOMP.COMP.GenType(_2270_toTpe, true, false);
                      _3205_rhsType = _out777;
                      RAST._IExpr _3206_recursiveGen;
                      bool _3207___v56;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3208_recIdents;
                      RAST._IExpr _out778;
                      bool _out779;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out780;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, true, out _out778, out _out779, out _out780);
                      _3206_recursiveGen = _out778;
                      _3207___v56 = _out779;
                      _3208_recIdents = _out780;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), (_3206_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()")));
                      isOwned = true;
                      readIdents = _3208_recIdents;
                    }
                  }
                } else if (_source118.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _3209___mcc_h963 = _source118.dtor_Passthrough_a0;
                  {
                    RAST._IType _3210_rhsType;
                    RAST._IType _out781;
                    _out781 = DCOMP.COMP.GenType(_2270_toTpe, true, false);
                    _3210_rhsType = _out781;
                    RAST._IExpr _3211_recursiveGen;
                    bool _3212___v53;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3213_recIdents;
                    RAST._IExpr _out782;
                    bool _out783;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out784;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, true, out _out782, out _out783, out _out784);
                    _3211_recursiveGen = _out782;
                    _3212___v53 = _out783;
                    _3213_recIdents = _out784;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_3210_rhsType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), (_3211_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()")));
                    isOwned = true;
                    readIdents = _3213_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3214___mcc_h965 = _source118.dtor_TypeArg_a0;
                  {
                    RAST._IExpr _3215_recursiveGen;
                    bool _3216_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3217_recIdents;
                    RAST._IExpr _out785;
                    bool _out786;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out787;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out785, out _out786, out _out787);
                    _3215_recursiveGen = _out785;
                    _3216_recOwned = _out786;
                    _3217_recIdents = _out787;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3215_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3216_recOwned;
                    readIdents = _3217_recIdents;
                  }
                }
              } else if (_source117.is_Real) {
                DAST._IType _source122 = _2277___mcc_h312;
                if (_source122.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3218___mcc_h967 = _source122.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _3219___mcc_h968 = _source122.dtor_typeArgs;
                  DAST._IResolvedType _3220___mcc_h969 = _source122.dtor_resolved;
                  DAST._IResolvedType _source123 = _3220___mcc_h969;
                  if (_source123.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3221___mcc_h973 = _source123.dtor_path;
                    {
                      RAST._IExpr _3222_recursiveGen;
                      bool _3223_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3224_recIdents;
                      RAST._IExpr _out788;
                      bool _out789;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out790;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out788, out _out789, out _out790);
                      _3222_recursiveGen = _out788;
                      _3223_recOwned = _out789;
                      _3224_recIdents = _out790;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3222_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3223_recOwned;
                      readIdents = _3224_recIdents;
                    }
                  } else if (_source123.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3225___mcc_h975 = _source123.dtor_path;
                    {
                      RAST._IExpr _3226_recursiveGen;
                      bool _3227_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3228_recIdents;
                      RAST._IExpr _out791;
                      bool _out792;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out793;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out791, out _out792, out _out793);
                      _3226_recursiveGen = _out791;
                      _3227_recOwned = _out792;
                      _3228_recIdents = _out793;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3226_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3227_recOwned;
                      readIdents = _3228_recIdents;
                    }
                  } else {
                    DAST._IType _3229___mcc_h977 = _source123.dtor_baseType;
                    DAST._INewtypeRange _3230___mcc_h978 = _source123.dtor_range;
                    bool _3231___mcc_h979 = _source123.dtor_erase;
                    bool _3232_erase = _3231___mcc_h979;
                    DAST._INewtypeRange _3233_range = _3230___mcc_h978;
                    DAST._IType _3234_b = _3229___mcc_h977;
                    {
                      if (object.Equals(_2271_fromTpe, _3234_b)) {
                        RAST._IExpr _3235_recursiveGen;
                        bool _3236_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3237_recIdents;
                        RAST._IExpr _out794;
                        bool _out795;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out796;
                        DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out794, out _out795, out _out796);
                        _3235_recursiveGen = _out794;
                        _3236_recOwned = _out795;
                        _3237_recIdents = _out796;
                        Std.Wrappers._IOption<RAST._IType> _3238_potentialRhsType;
                        _3238_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3234_b, _3233_range);
                        Std.Wrappers._IOption<RAST._IType> _source124 = _3238_potentialRhsType;
                        if (_source124.is_None) {
                          if (_3232_erase) {
                            r = _3235_recursiveGen;
                          } else {
                            RAST._IType _3239_rhsType;
                            RAST._IType _out797;
                            _out797 = DCOMP.COMP.GenType(_2270_toTpe, true, false);
                            _3239_rhsType = _out797;
                            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3239_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3235_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                          }
                          isOwned = _3236_recOwned;
                        } else {
                          RAST._IType _3240___mcc_h1250 = _source124.dtor_value;
                          RAST._IType _3241_v = _3240___mcc_h1250;
                          r = RAST.Expr.create_ConversionNum(_3241_v, _3235_recursiveGen);
                          isOwned = true;
                        }
                        readIdents = _3237_recIdents;
                      } else {
                        RAST._IExpr _out798;
                        bool _out799;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out800;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2272_expr, _2271_fromTpe, _3234_b), _3234_b, _2270_toTpe), selfIdent, @params, mustOwn, out _out798, out _out799, out _out800);
                        r = _out798;
                        isOwned = _out799;
                        readIdents = _out800;
                      }
                    }
                  }
                } else if (_source122.is_Nullable) {
                  DAST._IType _3242___mcc_h983 = _source122.dtor_Nullable_a0;
                  {
                    RAST._IExpr _3243_recursiveGen;
                    bool _3244_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3245_recIdents;
                    RAST._IExpr _out801;
                    bool _out802;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out803;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out801, out _out802, out _out803);
                    _3243_recursiveGen = _out801;
                    _3244_recOwned = _out802;
                    _3245_recIdents = _out803;
                    Dafny.ISequence<Dafny.Rune> _3246_s;
                    _3246_s = (_3243_recursiveGen)._ToString(DCOMP.__default.IND);
                    if (!(_3244_recOwned)) {
                      _3246_s = Dafny.Sequence<Dafny.Rune>.Concat(_3246_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    _3246_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3246_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    r = RAST.Expr.create_RawExpr(_3246_s);
                    isOwned = true;
                    readIdents = _3245_recIdents;
                  }
                } else if (_source122.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _3247___mcc_h985 = _source122.dtor_Tuple_a0;
                  {
                    RAST._IExpr _3248_recursiveGen;
                    bool _3249_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3250_recIdents;
                    RAST._IExpr _out804;
                    bool _out805;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out806;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out804, out _out805, out _out806);
                    _3248_recursiveGen = _out804;
                    _3249_recOwned = _out805;
                    _3250_recIdents = _out806;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3248_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3249_recOwned;
                    readIdents = _3250_recIdents;
                  }
                } else if (_source122.is_Array) {
                  DAST._IType _3251___mcc_h987 = _source122.dtor_element;
                  BigInteger _3252___mcc_h988 = _source122.dtor_dims;
                  {
                    RAST._IExpr _3253_recursiveGen;
                    bool _3254_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3255_recIdents;
                    RAST._IExpr _out807;
                    bool _out808;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out809;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out807, out _out808, out _out809);
                    _3253_recursiveGen = _out807;
                    _3254_recOwned = _out808;
                    _3255_recIdents = _out809;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3253_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3254_recOwned;
                    readIdents = _3255_recIdents;
                  }
                } else if (_source122.is_Seq) {
                  DAST._IType _3256___mcc_h991 = _source122.dtor_element;
                  {
                    RAST._IExpr _3257_recursiveGen;
                    bool _3258_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3259_recIdents;
                    RAST._IExpr _out810;
                    bool _out811;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out812;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out810, out _out811, out _out812);
                    _3257_recursiveGen = _out810;
                    _3258_recOwned = _out811;
                    _3259_recIdents = _out812;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3257_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3258_recOwned;
                    readIdents = _3259_recIdents;
                  }
                } else if (_source122.is_Set) {
                  DAST._IType _3260___mcc_h993 = _source122.dtor_element;
                  {
                    RAST._IExpr _3261_recursiveGen;
                    bool _3262_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3263_recIdents;
                    RAST._IExpr _out813;
                    bool _out814;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out815;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out813, out _out814, out _out815);
                    _3261_recursiveGen = _out813;
                    _3262_recOwned = _out814;
                    _3263_recIdents = _out815;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3261_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3262_recOwned;
                    readIdents = _3263_recIdents;
                  }
                } else if (_source122.is_Multiset) {
                  DAST._IType _3264___mcc_h995 = _source122.dtor_element;
                  {
                    RAST._IExpr _3265_recursiveGen;
                    bool _3266_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3267_recIdents;
                    RAST._IExpr _out816;
                    bool _out817;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out818;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out816, out _out817, out _out818);
                    _3265_recursiveGen = _out816;
                    _3266_recOwned = _out817;
                    _3267_recIdents = _out818;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3265_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3266_recOwned;
                    readIdents = _3267_recIdents;
                  }
                } else if (_source122.is_Map) {
                  DAST._IType _3268___mcc_h997 = _source122.dtor_key;
                  DAST._IType _3269___mcc_h998 = _source122.dtor_value;
                  {
                    RAST._IExpr _3270_recursiveGen;
                    bool _3271_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3272_recIdents;
                    RAST._IExpr _out819;
                    bool _out820;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out821;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out819, out _out820, out _out821);
                    _3270_recursiveGen = _out819;
                    _3271_recOwned = _out820;
                    _3272_recIdents = _out821;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3270_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3271_recOwned;
                    readIdents = _3272_recIdents;
                  }
                } else if (_source122.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _3273___mcc_h1001 = _source122.dtor_args;
                  DAST._IType _3274___mcc_h1002 = _source122.dtor_result;
                  {
                    RAST._IExpr _3275_recursiveGen;
                    bool _3276_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3277_recIdents;
                    RAST._IExpr _out822;
                    bool _out823;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out824;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out822, out _out823, out _out824);
                    _3275_recursiveGen = _out822;
                    _3276_recOwned = _out823;
                    _3277_recIdents = _out824;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3275_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3276_recOwned;
                    readIdents = _3277_recIdents;
                  }
                } else if (_source122.is_Primitive) {
                  DAST._IPrimitive _3278___mcc_h1005 = _source122.dtor_Primitive_a0;
                  DAST._IPrimitive _source125 = _3278___mcc_h1005;
                  if (_source125.is_Int) {
                    {
                      RAST._IExpr _3279_recursiveGen;
                      bool _3280___v51;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3281_recIdents;
                      RAST._IExpr _out825;
                      bool _out826;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out827;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, false, out _out825, out _out826, out _out827);
                      _3279_recursiveGen = _out825;
                      _3280___v51 = _out826;
                      _3281_recIdents = _out827;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), (_3279_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      isOwned = true;
                      readIdents = _3281_recIdents;
                    }
                  } else if (_source125.is_Real) {
                    {
                      RAST._IExpr _3282_recursiveGen;
                      bool _3283_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3284_recIdents;
                      RAST._IExpr _out828;
                      bool _out829;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out830;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out828, out _out829, out _out830);
                      _3282_recursiveGen = _out828;
                      _3283_recOwned = _out829;
                      _3284_recIdents = _out830;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3282_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3283_recOwned;
                      readIdents = _3284_recIdents;
                    }
                  } else if (_source125.is_String) {
                    {
                      RAST._IExpr _3285_recursiveGen;
                      bool _3286_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3287_recIdents;
                      RAST._IExpr _out831;
                      bool _out832;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out833;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out831, out _out832, out _out833);
                      _3285_recursiveGen = _out831;
                      _3286_recOwned = _out832;
                      _3287_recIdents = _out833;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3285_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3286_recOwned;
                      readIdents = _3287_recIdents;
                    }
                  } else if (_source125.is_Bool) {
                    {
                      RAST._IExpr _3288_recursiveGen;
                      bool _3289_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3290_recIdents;
                      RAST._IExpr _out834;
                      bool _out835;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out836;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out834, out _out835, out _out836);
                      _3288_recursiveGen = _out834;
                      _3289_recOwned = _out835;
                      _3290_recIdents = _out836;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3288_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3289_recOwned;
                      readIdents = _3290_recIdents;
                    }
                  } else {
                    {
                      RAST._IExpr _3291_recursiveGen;
                      bool _3292_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3293_recIdents;
                      RAST._IExpr _out837;
                      bool _out838;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out839;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out837, out _out838, out _out839);
                      _3291_recursiveGen = _out837;
                      _3292_recOwned = _out838;
                      _3293_recIdents = _out839;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3291_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3292_recOwned;
                      readIdents = _3293_recIdents;
                    }
                  }
                } else if (_source122.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _3294___mcc_h1007 = _source122.dtor_Passthrough_a0;
                  {
                    RAST._IExpr _3295_recursiveGen;
                    bool _3296_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3297_recIdents;
                    RAST._IExpr _out840;
                    bool _out841;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out842;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out840, out _out841, out _out842);
                    _3295_recursiveGen = _out840;
                    _3296_recOwned = _out841;
                    _3297_recIdents = _out842;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3295_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3296_recOwned;
                    readIdents = _3297_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3298___mcc_h1009 = _source122.dtor_TypeArg_a0;
                  {
                    RAST._IExpr _3299_recursiveGen;
                    bool _3300_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3301_recIdents;
                    RAST._IExpr _out843;
                    bool _out844;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out845;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out843, out _out844, out _out845);
                    _3299_recursiveGen = _out843;
                    _3300_recOwned = _out844;
                    _3301_recIdents = _out845;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3299_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3300_recOwned;
                    readIdents = _3301_recIdents;
                  }
                }
              } else if (_source117.is_String) {
                DAST._IType _source126 = _2277___mcc_h312;
                if (_source126.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3302___mcc_h1011 = _source126.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _3303___mcc_h1012 = _source126.dtor_typeArgs;
                  DAST._IResolvedType _3304___mcc_h1013 = _source126.dtor_resolved;
                  DAST._IResolvedType _source127 = _3304___mcc_h1013;
                  if (_source127.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3305___mcc_h1017 = _source127.dtor_path;
                    {
                      RAST._IExpr _3306_recursiveGen;
                      bool _3307_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3308_recIdents;
                      RAST._IExpr _out846;
                      bool _out847;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out848;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out846, out _out847, out _out848);
                      _3306_recursiveGen = _out846;
                      _3307_recOwned = _out847;
                      _3308_recIdents = _out848;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3306_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3307_recOwned;
                      readIdents = _3308_recIdents;
                    }
                  } else if (_source127.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3309___mcc_h1019 = _source127.dtor_path;
                    {
                      RAST._IExpr _3310_recursiveGen;
                      bool _3311_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3312_recIdents;
                      RAST._IExpr _out849;
                      bool _out850;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out851;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out849, out _out850, out _out851);
                      _3310_recursiveGen = _out849;
                      _3311_recOwned = _out850;
                      _3312_recIdents = _out851;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3310_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3311_recOwned;
                      readIdents = _3312_recIdents;
                    }
                  } else {
                    DAST._IType _3313___mcc_h1021 = _source127.dtor_baseType;
                    DAST._INewtypeRange _3314___mcc_h1022 = _source127.dtor_range;
                    bool _3315___mcc_h1023 = _source127.dtor_erase;
                    bool _3316_erase = _3315___mcc_h1023;
                    DAST._INewtypeRange _3317_range = _3314___mcc_h1022;
                    DAST._IType _3318_b = _3313___mcc_h1021;
                    {
                      if (object.Equals(_2271_fromTpe, _3318_b)) {
                        RAST._IExpr _3319_recursiveGen;
                        bool _3320_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3321_recIdents;
                        RAST._IExpr _out852;
                        bool _out853;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out854;
                        DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out852, out _out853, out _out854);
                        _3319_recursiveGen = _out852;
                        _3320_recOwned = _out853;
                        _3321_recIdents = _out854;
                        Std.Wrappers._IOption<RAST._IType> _3322_potentialRhsType;
                        _3322_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3318_b, _3317_range);
                        Std.Wrappers._IOption<RAST._IType> _source128 = _3322_potentialRhsType;
                        if (_source128.is_None) {
                          if (_3316_erase) {
                            r = _3319_recursiveGen;
                          } else {
                            RAST._IType _3323_rhsType;
                            RAST._IType _out855;
                            _out855 = DCOMP.COMP.GenType(_2270_toTpe, true, false);
                            _3323_rhsType = _out855;
                            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3323_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3319_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                          }
                          isOwned = _3320_recOwned;
                        } else {
                          RAST._IType _3324___mcc_h1251 = _source128.dtor_value;
                          RAST._IType _3325_v = _3324___mcc_h1251;
                          r = RAST.Expr.create_ConversionNum(_3325_v, _3319_recursiveGen);
                          isOwned = true;
                        }
                        readIdents = _3321_recIdents;
                      } else {
                        RAST._IExpr _out856;
                        bool _out857;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out858;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2272_expr, _2271_fromTpe, _3318_b), _3318_b, _2270_toTpe), selfIdent, @params, mustOwn, out _out856, out _out857, out _out858);
                        r = _out856;
                        isOwned = _out857;
                        readIdents = _out858;
                      }
                    }
                  }
                } else if (_source126.is_Nullable) {
                  DAST._IType _3326___mcc_h1027 = _source126.dtor_Nullable_a0;
                  {
                    RAST._IExpr _3327_recursiveGen;
                    bool _3328_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3329_recIdents;
                    RAST._IExpr _out859;
                    bool _out860;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out861;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out859, out _out860, out _out861);
                    _3327_recursiveGen = _out859;
                    _3328_recOwned = _out860;
                    _3329_recIdents = _out861;
                    Dafny.ISequence<Dafny.Rune> _3330_s;
                    _3330_s = (_3327_recursiveGen)._ToString(DCOMP.__default.IND);
                    if (!(_3328_recOwned)) {
                      _3330_s = Dafny.Sequence<Dafny.Rune>.Concat(_3330_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    _3330_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3330_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    r = RAST.Expr.create_RawExpr(_3330_s);
                    isOwned = true;
                    readIdents = _3329_recIdents;
                  }
                } else if (_source126.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _3331___mcc_h1029 = _source126.dtor_Tuple_a0;
                  {
                    RAST._IExpr _3332_recursiveGen;
                    bool _3333_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3334_recIdents;
                    RAST._IExpr _out862;
                    bool _out863;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out864;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out862, out _out863, out _out864);
                    _3332_recursiveGen = _out862;
                    _3333_recOwned = _out863;
                    _3334_recIdents = _out864;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3332_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3333_recOwned;
                    readIdents = _3334_recIdents;
                  }
                } else if (_source126.is_Array) {
                  DAST._IType _3335___mcc_h1031 = _source126.dtor_element;
                  BigInteger _3336___mcc_h1032 = _source126.dtor_dims;
                  {
                    RAST._IExpr _3337_recursiveGen;
                    bool _3338_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3339_recIdents;
                    RAST._IExpr _out865;
                    bool _out866;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out867;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out865, out _out866, out _out867);
                    _3337_recursiveGen = _out865;
                    _3338_recOwned = _out866;
                    _3339_recIdents = _out867;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3337_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3338_recOwned;
                    readIdents = _3339_recIdents;
                  }
                } else if (_source126.is_Seq) {
                  DAST._IType _3340___mcc_h1035 = _source126.dtor_element;
                  {
                    RAST._IExpr _3341_recursiveGen;
                    bool _3342_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3343_recIdents;
                    RAST._IExpr _out868;
                    bool _out869;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out870;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out868, out _out869, out _out870);
                    _3341_recursiveGen = _out868;
                    _3342_recOwned = _out869;
                    _3343_recIdents = _out870;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3341_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3342_recOwned;
                    readIdents = _3343_recIdents;
                  }
                } else if (_source126.is_Set) {
                  DAST._IType _3344___mcc_h1037 = _source126.dtor_element;
                  {
                    RAST._IExpr _3345_recursiveGen;
                    bool _3346_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3347_recIdents;
                    RAST._IExpr _out871;
                    bool _out872;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out873;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out871, out _out872, out _out873);
                    _3345_recursiveGen = _out871;
                    _3346_recOwned = _out872;
                    _3347_recIdents = _out873;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3345_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3346_recOwned;
                    readIdents = _3347_recIdents;
                  }
                } else if (_source126.is_Multiset) {
                  DAST._IType _3348___mcc_h1039 = _source126.dtor_element;
                  {
                    RAST._IExpr _3349_recursiveGen;
                    bool _3350_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3351_recIdents;
                    RAST._IExpr _out874;
                    bool _out875;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out876;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out874, out _out875, out _out876);
                    _3349_recursiveGen = _out874;
                    _3350_recOwned = _out875;
                    _3351_recIdents = _out876;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3349_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3350_recOwned;
                    readIdents = _3351_recIdents;
                  }
                } else if (_source126.is_Map) {
                  DAST._IType _3352___mcc_h1041 = _source126.dtor_key;
                  DAST._IType _3353___mcc_h1042 = _source126.dtor_value;
                  {
                    RAST._IExpr _3354_recursiveGen;
                    bool _3355_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3356_recIdents;
                    RAST._IExpr _out877;
                    bool _out878;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out879;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out877, out _out878, out _out879);
                    _3354_recursiveGen = _out877;
                    _3355_recOwned = _out878;
                    _3356_recIdents = _out879;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3354_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3355_recOwned;
                    readIdents = _3356_recIdents;
                  }
                } else if (_source126.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _3357___mcc_h1045 = _source126.dtor_args;
                  DAST._IType _3358___mcc_h1046 = _source126.dtor_result;
                  {
                    RAST._IExpr _3359_recursiveGen;
                    bool _3360_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3361_recIdents;
                    RAST._IExpr _out880;
                    bool _out881;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out882;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out880, out _out881, out _out882);
                    _3359_recursiveGen = _out880;
                    _3360_recOwned = _out881;
                    _3361_recIdents = _out882;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3359_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3360_recOwned;
                    readIdents = _3361_recIdents;
                  }
                } else if (_source126.is_Primitive) {
                  DAST._IPrimitive _3362___mcc_h1049 = _source126.dtor_Primitive_a0;
                  {
                    RAST._IExpr _3363_recursiveGen;
                    bool _3364_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3365_recIdents;
                    RAST._IExpr _out883;
                    bool _out884;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out885;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out883, out _out884, out _out885);
                    _3363_recursiveGen = _out883;
                    _3364_recOwned = _out884;
                    _3365_recIdents = _out885;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3363_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3364_recOwned;
                    readIdents = _3365_recIdents;
                  }
                } else if (_source126.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _3366___mcc_h1051 = _source126.dtor_Passthrough_a0;
                  {
                    RAST._IExpr _3367_recursiveGen;
                    bool _3368_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3369_recIdents;
                    RAST._IExpr _out886;
                    bool _out887;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out888;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out886, out _out887, out _out888);
                    _3367_recursiveGen = _out886;
                    _3368_recOwned = _out887;
                    _3369_recIdents = _out888;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3367_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3368_recOwned;
                    readIdents = _3369_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3370___mcc_h1053 = _source126.dtor_TypeArg_a0;
                  {
                    RAST._IExpr _3371_recursiveGen;
                    bool _3372_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3373_recIdents;
                    RAST._IExpr _out889;
                    bool _out890;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out891;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out889, out _out890, out _out891);
                    _3371_recursiveGen = _out889;
                    _3372_recOwned = _out890;
                    _3373_recIdents = _out891;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3371_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3372_recOwned;
                    readIdents = _3373_recIdents;
                  }
                }
              } else if (_source117.is_Bool) {
                DAST._IType _source129 = _2277___mcc_h312;
                if (_source129.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3374___mcc_h1055 = _source129.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _3375___mcc_h1056 = _source129.dtor_typeArgs;
                  DAST._IResolvedType _3376___mcc_h1057 = _source129.dtor_resolved;
                  DAST._IResolvedType _source130 = _3376___mcc_h1057;
                  if (_source130.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3377___mcc_h1061 = _source130.dtor_path;
                    {
                      RAST._IExpr _3378_recursiveGen;
                      bool _3379_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3380_recIdents;
                      RAST._IExpr _out892;
                      bool _out893;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out894;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out892, out _out893, out _out894);
                      _3378_recursiveGen = _out892;
                      _3379_recOwned = _out893;
                      _3380_recIdents = _out894;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3378_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3379_recOwned;
                      readIdents = _3380_recIdents;
                    }
                  } else if (_source130.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3381___mcc_h1063 = _source130.dtor_path;
                    {
                      RAST._IExpr _3382_recursiveGen;
                      bool _3383_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3384_recIdents;
                      RAST._IExpr _out895;
                      bool _out896;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out897;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out895, out _out896, out _out897);
                      _3382_recursiveGen = _out895;
                      _3383_recOwned = _out896;
                      _3384_recIdents = _out897;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3382_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3383_recOwned;
                      readIdents = _3384_recIdents;
                    }
                  } else {
                    DAST._IType _3385___mcc_h1065 = _source130.dtor_baseType;
                    DAST._INewtypeRange _3386___mcc_h1066 = _source130.dtor_range;
                    bool _3387___mcc_h1067 = _source130.dtor_erase;
                    bool _3388_erase = _3387___mcc_h1067;
                    DAST._INewtypeRange _3389_range = _3386___mcc_h1066;
                    DAST._IType _3390_b = _3385___mcc_h1065;
                    {
                      if (object.Equals(_2271_fromTpe, _3390_b)) {
                        RAST._IExpr _3391_recursiveGen;
                        bool _3392_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3393_recIdents;
                        RAST._IExpr _out898;
                        bool _out899;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out900;
                        DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out898, out _out899, out _out900);
                        _3391_recursiveGen = _out898;
                        _3392_recOwned = _out899;
                        _3393_recIdents = _out900;
                        Std.Wrappers._IOption<RAST._IType> _3394_potentialRhsType;
                        _3394_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3390_b, _3389_range);
                        Std.Wrappers._IOption<RAST._IType> _source131 = _3394_potentialRhsType;
                        if (_source131.is_None) {
                          if (_3388_erase) {
                            r = _3391_recursiveGen;
                          } else {
                            RAST._IType _3395_rhsType;
                            RAST._IType _out901;
                            _out901 = DCOMP.COMP.GenType(_2270_toTpe, true, false);
                            _3395_rhsType = _out901;
                            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3395_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3391_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                          }
                          isOwned = _3392_recOwned;
                        } else {
                          RAST._IType _3396___mcc_h1252 = _source131.dtor_value;
                          RAST._IType _3397_v = _3396___mcc_h1252;
                          r = RAST.Expr.create_ConversionNum(_3397_v, _3391_recursiveGen);
                          isOwned = true;
                        }
                        readIdents = _3393_recIdents;
                      } else {
                        RAST._IExpr _out902;
                        bool _out903;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out904;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2272_expr, _2271_fromTpe, _3390_b), _3390_b, _2270_toTpe), selfIdent, @params, mustOwn, out _out902, out _out903, out _out904);
                        r = _out902;
                        isOwned = _out903;
                        readIdents = _out904;
                      }
                    }
                  }
                } else if (_source129.is_Nullable) {
                  DAST._IType _3398___mcc_h1071 = _source129.dtor_Nullable_a0;
                  {
                    RAST._IExpr _3399_recursiveGen;
                    bool _3400_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3401_recIdents;
                    RAST._IExpr _out905;
                    bool _out906;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out907;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out905, out _out906, out _out907);
                    _3399_recursiveGen = _out905;
                    _3400_recOwned = _out906;
                    _3401_recIdents = _out907;
                    Dafny.ISequence<Dafny.Rune> _3402_s;
                    _3402_s = (_3399_recursiveGen)._ToString(DCOMP.__default.IND);
                    if (!(_3400_recOwned)) {
                      _3402_s = Dafny.Sequence<Dafny.Rune>.Concat(_3402_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    _3402_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3402_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    r = RAST.Expr.create_RawExpr(_3402_s);
                    isOwned = true;
                    readIdents = _3401_recIdents;
                  }
                } else if (_source129.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _3403___mcc_h1073 = _source129.dtor_Tuple_a0;
                  {
                    RAST._IExpr _3404_recursiveGen;
                    bool _3405_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3406_recIdents;
                    RAST._IExpr _out908;
                    bool _out909;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out910;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out908, out _out909, out _out910);
                    _3404_recursiveGen = _out908;
                    _3405_recOwned = _out909;
                    _3406_recIdents = _out910;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3404_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3405_recOwned;
                    readIdents = _3406_recIdents;
                  }
                } else if (_source129.is_Array) {
                  DAST._IType _3407___mcc_h1075 = _source129.dtor_element;
                  BigInteger _3408___mcc_h1076 = _source129.dtor_dims;
                  {
                    RAST._IExpr _3409_recursiveGen;
                    bool _3410_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3411_recIdents;
                    RAST._IExpr _out911;
                    bool _out912;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out913;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out911, out _out912, out _out913);
                    _3409_recursiveGen = _out911;
                    _3410_recOwned = _out912;
                    _3411_recIdents = _out913;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3409_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3410_recOwned;
                    readIdents = _3411_recIdents;
                  }
                } else if (_source129.is_Seq) {
                  DAST._IType _3412___mcc_h1079 = _source129.dtor_element;
                  {
                    RAST._IExpr _3413_recursiveGen;
                    bool _3414_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3415_recIdents;
                    RAST._IExpr _out914;
                    bool _out915;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out916;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out914, out _out915, out _out916);
                    _3413_recursiveGen = _out914;
                    _3414_recOwned = _out915;
                    _3415_recIdents = _out916;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3413_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3414_recOwned;
                    readIdents = _3415_recIdents;
                  }
                } else if (_source129.is_Set) {
                  DAST._IType _3416___mcc_h1081 = _source129.dtor_element;
                  {
                    RAST._IExpr _3417_recursiveGen;
                    bool _3418_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3419_recIdents;
                    RAST._IExpr _out917;
                    bool _out918;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out919;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out917, out _out918, out _out919);
                    _3417_recursiveGen = _out917;
                    _3418_recOwned = _out918;
                    _3419_recIdents = _out919;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3417_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3418_recOwned;
                    readIdents = _3419_recIdents;
                  }
                } else if (_source129.is_Multiset) {
                  DAST._IType _3420___mcc_h1083 = _source129.dtor_element;
                  {
                    RAST._IExpr _3421_recursiveGen;
                    bool _3422_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3423_recIdents;
                    RAST._IExpr _out920;
                    bool _out921;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out922;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out920, out _out921, out _out922);
                    _3421_recursiveGen = _out920;
                    _3422_recOwned = _out921;
                    _3423_recIdents = _out922;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3421_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3422_recOwned;
                    readIdents = _3423_recIdents;
                  }
                } else if (_source129.is_Map) {
                  DAST._IType _3424___mcc_h1085 = _source129.dtor_key;
                  DAST._IType _3425___mcc_h1086 = _source129.dtor_value;
                  {
                    RAST._IExpr _3426_recursiveGen;
                    bool _3427_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3428_recIdents;
                    RAST._IExpr _out923;
                    bool _out924;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out925;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out923, out _out924, out _out925);
                    _3426_recursiveGen = _out923;
                    _3427_recOwned = _out924;
                    _3428_recIdents = _out925;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3426_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3427_recOwned;
                    readIdents = _3428_recIdents;
                  }
                } else if (_source129.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _3429___mcc_h1089 = _source129.dtor_args;
                  DAST._IType _3430___mcc_h1090 = _source129.dtor_result;
                  {
                    RAST._IExpr _3431_recursiveGen;
                    bool _3432_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3433_recIdents;
                    RAST._IExpr _out926;
                    bool _out927;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out928;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out926, out _out927, out _out928);
                    _3431_recursiveGen = _out926;
                    _3432_recOwned = _out927;
                    _3433_recIdents = _out928;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3431_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3432_recOwned;
                    readIdents = _3433_recIdents;
                  }
                } else if (_source129.is_Primitive) {
                  DAST._IPrimitive _3434___mcc_h1093 = _source129.dtor_Primitive_a0;
                  {
                    RAST._IExpr _3435_recursiveGen;
                    bool _3436_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3437_recIdents;
                    RAST._IExpr _out929;
                    bool _out930;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out931;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out929, out _out930, out _out931);
                    _3435_recursiveGen = _out929;
                    _3436_recOwned = _out930;
                    _3437_recIdents = _out931;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3435_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3436_recOwned;
                    readIdents = _3437_recIdents;
                  }
                } else if (_source129.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _3438___mcc_h1095 = _source129.dtor_Passthrough_a0;
                  {
                    RAST._IExpr _3439_recursiveGen;
                    bool _3440_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3441_recIdents;
                    RAST._IExpr _out932;
                    bool _out933;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out934;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out932, out _out933, out _out934);
                    _3439_recursiveGen = _out932;
                    _3440_recOwned = _out933;
                    _3441_recIdents = _out934;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3439_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3440_recOwned;
                    readIdents = _3441_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3442___mcc_h1097 = _source129.dtor_TypeArg_a0;
                  {
                    RAST._IExpr _3443_recursiveGen;
                    bool _3444_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3445_recIdents;
                    RAST._IExpr _out935;
                    bool _out936;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out937;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out935, out _out936, out _out937);
                    _3443_recursiveGen = _out935;
                    _3444_recOwned = _out936;
                    _3445_recIdents = _out937;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3443_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3444_recOwned;
                    readIdents = _3445_recIdents;
                  }
                }
              } else {
                DAST._IType _source132 = _2277___mcc_h312;
                if (_source132.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3446___mcc_h1099 = _source132.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _3447___mcc_h1100 = _source132.dtor_typeArgs;
                  DAST._IResolvedType _3448___mcc_h1101 = _source132.dtor_resolved;
                  DAST._IResolvedType _source133 = _3448___mcc_h1101;
                  if (_source133.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3449___mcc_h1105 = _source133.dtor_path;
                    {
                      RAST._IExpr _3450_recursiveGen;
                      bool _3451_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3452_recIdents;
                      RAST._IExpr _out938;
                      bool _out939;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out940;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out938, out _out939, out _out940);
                      _3450_recursiveGen = _out938;
                      _3451_recOwned = _out939;
                      _3452_recIdents = _out940;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3450_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3451_recOwned;
                      readIdents = _3452_recIdents;
                    }
                  } else if (_source133.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3453___mcc_h1107 = _source133.dtor_path;
                    {
                      RAST._IExpr _3454_recursiveGen;
                      bool _3455_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3456_recIdents;
                      RAST._IExpr _out941;
                      bool _out942;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out943;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out941, out _out942, out _out943);
                      _3454_recursiveGen = _out941;
                      _3455_recOwned = _out942;
                      _3456_recIdents = _out943;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3454_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3455_recOwned;
                      readIdents = _3456_recIdents;
                    }
                  } else {
                    DAST._IType _3457___mcc_h1109 = _source133.dtor_baseType;
                    DAST._INewtypeRange _3458___mcc_h1110 = _source133.dtor_range;
                    bool _3459___mcc_h1111 = _source133.dtor_erase;
                    bool _3460_erase = _3459___mcc_h1111;
                    DAST._INewtypeRange _3461_range = _3458___mcc_h1110;
                    DAST._IType _3462_b = _3457___mcc_h1109;
                    {
                      if (object.Equals(_2271_fromTpe, _3462_b)) {
                        RAST._IExpr _3463_recursiveGen;
                        bool _3464_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3465_recIdents;
                        RAST._IExpr _out944;
                        bool _out945;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out946;
                        DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out944, out _out945, out _out946);
                        _3463_recursiveGen = _out944;
                        _3464_recOwned = _out945;
                        _3465_recIdents = _out946;
                        Std.Wrappers._IOption<RAST._IType> _3466_potentialRhsType;
                        _3466_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3462_b, _3461_range);
                        Std.Wrappers._IOption<RAST._IType> _source134 = _3466_potentialRhsType;
                        if (_source134.is_None) {
                          if (_3460_erase) {
                            r = _3463_recursiveGen;
                          } else {
                            RAST._IType _3467_rhsType;
                            RAST._IType _out947;
                            _out947 = DCOMP.COMP.GenType(_2270_toTpe, true, false);
                            _3467_rhsType = _out947;
                            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3467_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3463_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                          }
                          isOwned = _3464_recOwned;
                        } else {
                          RAST._IType _3468___mcc_h1253 = _source134.dtor_value;
                          RAST._IType _3469_v = _3468___mcc_h1253;
                          r = RAST.Expr.create_ConversionNum(_3469_v, _3463_recursiveGen);
                          isOwned = true;
                        }
                        readIdents = _3465_recIdents;
                      } else {
                        RAST._IExpr _out948;
                        bool _out949;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out950;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2272_expr, _2271_fromTpe, _3462_b), _3462_b, _2270_toTpe), selfIdent, @params, mustOwn, out _out948, out _out949, out _out950);
                        r = _out948;
                        isOwned = _out949;
                        readIdents = _out950;
                      }
                    }
                  }
                } else if (_source132.is_Nullable) {
                  DAST._IType _3470___mcc_h1115 = _source132.dtor_Nullable_a0;
                  {
                    RAST._IExpr _3471_recursiveGen;
                    bool _3472_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3473_recIdents;
                    RAST._IExpr _out951;
                    bool _out952;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out953;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out951, out _out952, out _out953);
                    _3471_recursiveGen = _out951;
                    _3472_recOwned = _out952;
                    _3473_recIdents = _out953;
                    Dafny.ISequence<Dafny.Rune> _3474_s;
                    _3474_s = (_3471_recursiveGen)._ToString(DCOMP.__default.IND);
                    if (!(_3472_recOwned)) {
                      _3474_s = Dafny.Sequence<Dafny.Rune>.Concat(_3474_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    _3474_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3474_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    r = RAST.Expr.create_RawExpr(_3474_s);
                    isOwned = true;
                    readIdents = _3473_recIdents;
                  }
                } else if (_source132.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _3475___mcc_h1117 = _source132.dtor_Tuple_a0;
                  {
                    RAST._IExpr _3476_recursiveGen;
                    bool _3477_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3478_recIdents;
                    RAST._IExpr _out954;
                    bool _out955;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out956;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out954, out _out955, out _out956);
                    _3476_recursiveGen = _out954;
                    _3477_recOwned = _out955;
                    _3478_recIdents = _out956;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3476_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3477_recOwned;
                    readIdents = _3478_recIdents;
                  }
                } else if (_source132.is_Array) {
                  DAST._IType _3479___mcc_h1119 = _source132.dtor_element;
                  BigInteger _3480___mcc_h1120 = _source132.dtor_dims;
                  {
                    RAST._IExpr _3481_recursiveGen;
                    bool _3482_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3483_recIdents;
                    RAST._IExpr _out957;
                    bool _out958;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out959;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out957, out _out958, out _out959);
                    _3481_recursiveGen = _out957;
                    _3482_recOwned = _out958;
                    _3483_recIdents = _out959;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3481_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3482_recOwned;
                    readIdents = _3483_recIdents;
                  }
                } else if (_source132.is_Seq) {
                  DAST._IType _3484___mcc_h1123 = _source132.dtor_element;
                  {
                    RAST._IExpr _3485_recursiveGen;
                    bool _3486_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3487_recIdents;
                    RAST._IExpr _out960;
                    bool _out961;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out962;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out960, out _out961, out _out962);
                    _3485_recursiveGen = _out960;
                    _3486_recOwned = _out961;
                    _3487_recIdents = _out962;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3485_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3486_recOwned;
                    readIdents = _3487_recIdents;
                  }
                } else if (_source132.is_Set) {
                  DAST._IType _3488___mcc_h1125 = _source132.dtor_element;
                  {
                    RAST._IExpr _3489_recursiveGen;
                    bool _3490_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3491_recIdents;
                    RAST._IExpr _out963;
                    bool _out964;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out965;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out963, out _out964, out _out965);
                    _3489_recursiveGen = _out963;
                    _3490_recOwned = _out964;
                    _3491_recIdents = _out965;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3489_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3490_recOwned;
                    readIdents = _3491_recIdents;
                  }
                } else if (_source132.is_Multiset) {
                  DAST._IType _3492___mcc_h1127 = _source132.dtor_element;
                  {
                    RAST._IExpr _3493_recursiveGen;
                    bool _3494_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3495_recIdents;
                    RAST._IExpr _out966;
                    bool _out967;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out968;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out966, out _out967, out _out968);
                    _3493_recursiveGen = _out966;
                    _3494_recOwned = _out967;
                    _3495_recIdents = _out968;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3493_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3494_recOwned;
                    readIdents = _3495_recIdents;
                  }
                } else if (_source132.is_Map) {
                  DAST._IType _3496___mcc_h1129 = _source132.dtor_key;
                  DAST._IType _3497___mcc_h1130 = _source132.dtor_value;
                  {
                    RAST._IExpr _3498_recursiveGen;
                    bool _3499_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3500_recIdents;
                    RAST._IExpr _out969;
                    bool _out970;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out971;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out969, out _out970, out _out971);
                    _3498_recursiveGen = _out969;
                    _3499_recOwned = _out970;
                    _3500_recIdents = _out971;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3498_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3499_recOwned;
                    readIdents = _3500_recIdents;
                  }
                } else if (_source132.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _3501___mcc_h1133 = _source132.dtor_args;
                  DAST._IType _3502___mcc_h1134 = _source132.dtor_result;
                  {
                    RAST._IExpr _3503_recursiveGen;
                    bool _3504_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3505_recIdents;
                    RAST._IExpr _out972;
                    bool _out973;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out974;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out972, out _out973, out _out974);
                    _3503_recursiveGen = _out972;
                    _3504_recOwned = _out973;
                    _3505_recIdents = _out974;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3503_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3504_recOwned;
                    readIdents = _3505_recIdents;
                  }
                } else if (_source132.is_Primitive) {
                  DAST._IPrimitive _3506___mcc_h1137 = _source132.dtor_Primitive_a0;
                  DAST._IPrimitive _source135 = _3506___mcc_h1137;
                  if (_source135.is_Int) {
                    {
                      RAST._IType _3507_rhsType;
                      RAST._IType _out975;
                      _out975 = DCOMP.COMP.GenType(_2271_fromTpe, true, false);
                      _3507_rhsType = _out975;
                      RAST._IExpr _3508_recursiveGen;
                      bool _3509___v57;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3510_recIdents;
                      RAST._IExpr _out976;
                      bool _out977;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out978;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, true, out _out976, out _out977, out _out978);
                      _3508_recursiveGen = _out976;
                      _3509___v57 = _out977;
                      _3510_recIdents = _out978;
                      r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), (_3508_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u32)"))));
                      isOwned = true;
                      readIdents = _3510_recIdents;
                    }
                  } else if (_source135.is_Real) {
                    {
                      RAST._IExpr _3511_recursiveGen;
                      bool _3512_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3513_recIdents;
                      RAST._IExpr _out979;
                      bool _out980;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out981;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out979, out _out980, out _out981);
                      _3511_recursiveGen = _out979;
                      _3512_recOwned = _out980;
                      _3513_recIdents = _out981;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3511_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3512_recOwned;
                      readIdents = _3513_recIdents;
                    }
                  } else if (_source135.is_String) {
                    {
                      RAST._IExpr _3514_recursiveGen;
                      bool _3515_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3516_recIdents;
                      RAST._IExpr _out982;
                      bool _out983;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out984;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out982, out _out983, out _out984);
                      _3514_recursiveGen = _out982;
                      _3515_recOwned = _out983;
                      _3516_recIdents = _out984;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3514_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3515_recOwned;
                      readIdents = _3516_recIdents;
                    }
                  } else if (_source135.is_Bool) {
                    {
                      RAST._IExpr _3517_recursiveGen;
                      bool _3518_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3519_recIdents;
                      RAST._IExpr _out985;
                      bool _out986;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out987;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out985, out _out986, out _out987);
                      _3517_recursiveGen = _out985;
                      _3518_recOwned = _out986;
                      _3519_recIdents = _out987;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3517_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3518_recOwned;
                      readIdents = _3519_recIdents;
                    }
                  } else {
                    {
                      RAST._IExpr _3520_recursiveGen;
                      bool _3521_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3522_recIdents;
                      RAST._IExpr _out988;
                      bool _out989;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out990;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out988, out _out989, out _out990);
                      _3520_recursiveGen = _out988;
                      _3521_recOwned = _out989;
                      _3522_recIdents = _out990;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3520_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3521_recOwned;
                      readIdents = _3522_recIdents;
                    }
                  }
                } else if (_source132.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _3523___mcc_h1139 = _source132.dtor_Passthrough_a0;
                  {
                    RAST._IExpr _3524_recursiveGen;
                    bool _3525_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3526_recIdents;
                    RAST._IExpr _out991;
                    bool _out992;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out993;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out991, out _out992, out _out993);
                    _3524_recursiveGen = _out991;
                    _3525_recOwned = _out992;
                    _3526_recIdents = _out993;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3524_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3525_recOwned;
                    readIdents = _3526_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3527___mcc_h1141 = _source132.dtor_TypeArg_a0;
                  {
                    RAST._IExpr _3528_recursiveGen;
                    bool _3529_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3530_recIdents;
                    RAST._IExpr _out994;
                    bool _out995;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out996;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out994, out _out995, out _out996);
                    _3528_recursiveGen = _out994;
                    _3529_recOwned = _out995;
                    _3530_recIdents = _out996;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3528_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3529_recOwned;
                    readIdents = _3530_recIdents;
                  }
                }
              }
            } else if (_source83.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _3531___mcc_h1143 = _source83.dtor_Passthrough_a0;
              DAST._IType _source136 = _2277___mcc_h312;
              if (_source136.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3532___mcc_h1147 = _source136.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _3533___mcc_h1148 = _source136.dtor_typeArgs;
                DAST._IResolvedType _3534___mcc_h1149 = _source136.dtor_resolved;
                DAST._IResolvedType _source137 = _3534___mcc_h1149;
                if (_source137.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3535___mcc_h1153 = _source137.dtor_path;
                  {
                    RAST._IExpr _3536_recursiveGen;
                    bool _3537_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3538_recIdents;
                    RAST._IExpr _out997;
                    bool _out998;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out999;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out997, out _out998, out _out999);
                    _3536_recursiveGen = _out997;
                    _3537_recOwned = _out998;
                    _3538_recIdents = _out999;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3536_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3537_recOwned;
                    readIdents = _3538_recIdents;
                  }
                } else if (_source137.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3539___mcc_h1155 = _source137.dtor_path;
                  {
                    RAST._IExpr _3540_recursiveGen;
                    bool _3541_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3542_recIdents;
                    RAST._IExpr _out1000;
                    bool _out1001;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1002;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out1000, out _out1001, out _out1002);
                    _3540_recursiveGen = _out1000;
                    _3541_recOwned = _out1001;
                    _3542_recIdents = _out1002;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3540_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3541_recOwned;
                    readIdents = _3542_recIdents;
                  }
                } else {
                  DAST._IType _3543___mcc_h1157 = _source137.dtor_baseType;
                  DAST._INewtypeRange _3544___mcc_h1158 = _source137.dtor_range;
                  bool _3545___mcc_h1159 = _source137.dtor_erase;
                  bool _3546_erase = _3545___mcc_h1159;
                  DAST._INewtypeRange _3547_range = _3544___mcc_h1158;
                  DAST._IType _3548_b = _3543___mcc_h1157;
                  {
                    if (object.Equals(_2271_fromTpe, _3548_b)) {
                      RAST._IExpr _3549_recursiveGen;
                      bool _3550_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3551_recIdents;
                      RAST._IExpr _out1003;
                      bool _out1004;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1005;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out1003, out _out1004, out _out1005);
                      _3549_recursiveGen = _out1003;
                      _3550_recOwned = _out1004;
                      _3551_recIdents = _out1005;
                      Std.Wrappers._IOption<RAST._IType> _3552_potentialRhsType;
                      _3552_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3548_b, _3547_range);
                      Std.Wrappers._IOption<RAST._IType> _source138 = _3552_potentialRhsType;
                      if (_source138.is_None) {
                        if (_3546_erase) {
                          r = _3549_recursiveGen;
                        } else {
                          RAST._IType _3553_rhsType;
                          RAST._IType _out1006;
                          _out1006 = DCOMP.COMP.GenType(_2270_toTpe, true, false);
                          _3553_rhsType = _out1006;
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3553_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3549_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                        }
                        isOwned = _3550_recOwned;
                      } else {
                        RAST._IType _3554___mcc_h1254 = _source138.dtor_value;
                        RAST._IType _3555_v = _3554___mcc_h1254;
                        r = RAST.Expr.create_ConversionNum(_3555_v, _3549_recursiveGen);
                        isOwned = true;
                      }
                      readIdents = _3551_recIdents;
                    } else {
                      RAST._IExpr _out1007;
                      bool _out1008;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1009;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2272_expr, _2271_fromTpe, _3548_b), _3548_b, _2270_toTpe), selfIdent, @params, mustOwn, out _out1007, out _out1008, out _out1009);
                      r = _out1007;
                      isOwned = _out1008;
                      readIdents = _out1009;
                    }
                  }
                }
              } else if (_source136.is_Nullable) {
                DAST._IType _3556___mcc_h1163 = _source136.dtor_Nullable_a0;
                {
                  RAST._IExpr _3557_recursiveGen;
                  bool _3558_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3559_recIdents;
                  RAST._IExpr _out1010;
                  bool _out1011;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1012;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out1010, out _out1011, out _out1012);
                  _3557_recursiveGen = _out1010;
                  _3558_recOwned = _out1011;
                  _3559_recIdents = _out1012;
                  Dafny.ISequence<Dafny.Rune> _3560_s;
                  _3560_s = (_3557_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_3558_recOwned)) {
                    _3560_s = Dafny.Sequence<Dafny.Rune>.Concat(_3560_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  _3560_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3560_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  r = RAST.Expr.create_RawExpr(_3560_s);
                  isOwned = true;
                  readIdents = _3559_recIdents;
                }
              } else if (_source136.is_Tuple) {
                Dafny.ISequence<DAST._IType> _3561___mcc_h1165 = _source136.dtor_Tuple_a0;
                {
                  RAST._IExpr _3562_recursiveGen;
                  bool _3563_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3564_recIdents;
                  RAST._IExpr _out1013;
                  bool _out1014;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1015;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out1013, out _out1014, out _out1015);
                  _3562_recursiveGen = _out1013;
                  _3563_recOwned = _out1014;
                  _3564_recIdents = _out1015;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3562_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3563_recOwned;
                  readIdents = _3564_recIdents;
                }
              } else if (_source136.is_Array) {
                DAST._IType _3565___mcc_h1167 = _source136.dtor_element;
                BigInteger _3566___mcc_h1168 = _source136.dtor_dims;
                {
                  RAST._IExpr _3567_recursiveGen;
                  bool _3568_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3569_recIdents;
                  RAST._IExpr _out1016;
                  bool _out1017;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1018;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out1016, out _out1017, out _out1018);
                  _3567_recursiveGen = _out1016;
                  _3568_recOwned = _out1017;
                  _3569_recIdents = _out1018;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3567_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3568_recOwned;
                  readIdents = _3569_recIdents;
                }
              } else if (_source136.is_Seq) {
                DAST._IType _3570___mcc_h1171 = _source136.dtor_element;
                {
                  RAST._IExpr _3571_recursiveGen;
                  bool _3572_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3573_recIdents;
                  RAST._IExpr _out1019;
                  bool _out1020;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1021;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out1019, out _out1020, out _out1021);
                  _3571_recursiveGen = _out1019;
                  _3572_recOwned = _out1020;
                  _3573_recIdents = _out1021;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3571_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3572_recOwned;
                  readIdents = _3573_recIdents;
                }
              } else if (_source136.is_Set) {
                DAST._IType _3574___mcc_h1173 = _source136.dtor_element;
                {
                  RAST._IExpr _3575_recursiveGen;
                  bool _3576_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3577_recIdents;
                  RAST._IExpr _out1022;
                  bool _out1023;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1024;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out1022, out _out1023, out _out1024);
                  _3575_recursiveGen = _out1022;
                  _3576_recOwned = _out1023;
                  _3577_recIdents = _out1024;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3575_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3576_recOwned;
                  readIdents = _3577_recIdents;
                }
              } else if (_source136.is_Multiset) {
                DAST._IType _3578___mcc_h1175 = _source136.dtor_element;
                {
                  RAST._IExpr _3579_recursiveGen;
                  bool _3580_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3581_recIdents;
                  RAST._IExpr _out1025;
                  bool _out1026;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1027;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out1025, out _out1026, out _out1027);
                  _3579_recursiveGen = _out1025;
                  _3580_recOwned = _out1026;
                  _3581_recIdents = _out1027;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3579_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3580_recOwned;
                  readIdents = _3581_recIdents;
                }
              } else if (_source136.is_Map) {
                DAST._IType _3582___mcc_h1177 = _source136.dtor_key;
                DAST._IType _3583___mcc_h1178 = _source136.dtor_value;
                {
                  RAST._IExpr _3584_recursiveGen;
                  bool _3585_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3586_recIdents;
                  RAST._IExpr _out1028;
                  bool _out1029;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1030;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out1028, out _out1029, out _out1030);
                  _3584_recursiveGen = _out1028;
                  _3585_recOwned = _out1029;
                  _3586_recIdents = _out1030;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3584_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3585_recOwned;
                  readIdents = _3586_recIdents;
                }
              } else if (_source136.is_Arrow) {
                Dafny.ISequence<DAST._IType> _3587___mcc_h1181 = _source136.dtor_args;
                DAST._IType _3588___mcc_h1182 = _source136.dtor_result;
                {
                  RAST._IExpr _3589_recursiveGen;
                  bool _3590_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3591_recIdents;
                  RAST._IExpr _out1031;
                  bool _out1032;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1033;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out1031, out _out1032, out _out1033);
                  _3589_recursiveGen = _out1031;
                  _3590_recOwned = _out1032;
                  _3591_recIdents = _out1033;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3589_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3590_recOwned;
                  readIdents = _3591_recIdents;
                }
              } else if (_source136.is_Primitive) {
                DAST._IPrimitive _3592___mcc_h1185 = _source136.dtor_Primitive_a0;
                DAST._IPrimitive _source139 = _3592___mcc_h1185;
                if (_source139.is_Int) {
                  {
                    RAST._IType _3593_rhsType;
                    RAST._IType _out1034;
                    _out1034 = DCOMP.COMP.GenType(_2271_fromTpe, true, false);
                    _3593_rhsType = _out1034;
                    RAST._IExpr _3594_recursiveGen;
                    bool _3595___v55;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3596_recIdents;
                    RAST._IExpr _out1035;
                    bool _out1036;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1037;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, true, out _out1035, out _out1036, out _out1037);
                    _3594_recursiveGen = _out1035;
                    _3595___v55 = _out1036;
                    _3596_recIdents = _out1037;
                    r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), (_3594_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))));
                    isOwned = true;
                    readIdents = _3596_recIdents;
                  }
                } else if (_source139.is_Real) {
                  {
                    RAST._IExpr _3597_recursiveGen;
                    bool _3598_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3599_recIdents;
                    RAST._IExpr _out1038;
                    bool _out1039;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1040;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out1038, out _out1039, out _out1040);
                    _3597_recursiveGen = _out1038;
                    _3598_recOwned = _out1039;
                    _3599_recIdents = _out1040;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3597_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3598_recOwned;
                    readIdents = _3599_recIdents;
                  }
                } else if (_source139.is_String) {
                  {
                    RAST._IExpr _3600_recursiveGen;
                    bool _3601_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3602_recIdents;
                    RAST._IExpr _out1041;
                    bool _out1042;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1043;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out1041, out _out1042, out _out1043);
                    _3600_recursiveGen = _out1041;
                    _3601_recOwned = _out1042;
                    _3602_recIdents = _out1043;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3600_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3601_recOwned;
                    readIdents = _3602_recIdents;
                  }
                } else if (_source139.is_Bool) {
                  {
                    RAST._IExpr _3603_recursiveGen;
                    bool _3604_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3605_recIdents;
                    RAST._IExpr _out1044;
                    bool _out1045;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1046;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out1044, out _out1045, out _out1046);
                    _3603_recursiveGen = _out1044;
                    _3604_recOwned = _out1045;
                    _3605_recIdents = _out1046;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3603_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3604_recOwned;
                    readIdents = _3605_recIdents;
                  }
                } else {
                  {
                    RAST._IExpr _3606_recursiveGen;
                    bool _3607_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3608_recIdents;
                    RAST._IExpr _out1047;
                    bool _out1048;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1049;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out1047, out _out1048, out _out1049);
                    _3606_recursiveGen = _out1047;
                    _3607_recOwned = _out1048;
                    _3608_recIdents = _out1049;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3606_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3607_recOwned;
                    readIdents = _3608_recIdents;
                  }
                }
              } else if (_source136.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _3609___mcc_h1187 = _source136.dtor_Passthrough_a0;
                {
                  RAST._IExpr _3610_recursiveGen;
                  bool _3611___v60;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3612_recIdents;
                  RAST._IExpr _out1050;
                  bool _out1051;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1052;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, true, out _out1050, out _out1051, out _out1052);
                  _3610_recursiveGen = _out1050;
                  _3611___v60 = _out1051;
                  _3612_recIdents = _out1052;
                  RAST._IType _3613_toTpeGen;
                  RAST._IType _out1053;
                  _out1053 = DCOMP.COMP.GenType(_2270_toTpe, true, false);
                  _3613_toTpeGen = _out1053;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), (_3610_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_3613_toTpeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  isOwned = true;
                  readIdents = _3612_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3614___mcc_h1189 = _source136.dtor_TypeArg_a0;
                {
                  RAST._IExpr _3615_recursiveGen;
                  bool _3616_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3617_recIdents;
                  RAST._IExpr _out1054;
                  bool _out1055;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1056;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out1054, out _out1055, out _out1056);
                  _3615_recursiveGen = _out1054;
                  _3616_recOwned = _out1055;
                  _3617_recIdents = _out1056;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3615_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3616_recOwned;
                  readIdents = _3617_recIdents;
                }
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3618___mcc_h1191 = _source83.dtor_TypeArg_a0;
              DAST._IType _source140 = _2277___mcc_h312;
              if (_source140.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3619___mcc_h1195 = _source140.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _3620___mcc_h1196 = _source140.dtor_typeArgs;
                DAST._IResolvedType _3621___mcc_h1197 = _source140.dtor_resolved;
                DAST._IResolvedType _source141 = _3621___mcc_h1197;
                if (_source141.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3622___mcc_h1201 = _source141.dtor_path;
                  {
                    RAST._IExpr _3623_recursiveGen;
                    bool _3624_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3625_recIdents;
                    RAST._IExpr _out1057;
                    bool _out1058;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1059;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out1057, out _out1058, out _out1059);
                    _3623_recursiveGen = _out1057;
                    _3624_recOwned = _out1058;
                    _3625_recIdents = _out1059;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3623_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3624_recOwned;
                    readIdents = _3625_recIdents;
                  }
                } else if (_source141.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3626___mcc_h1203 = _source141.dtor_path;
                  {
                    RAST._IExpr _3627_recursiveGen;
                    bool _3628_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3629_recIdents;
                    RAST._IExpr _out1060;
                    bool _out1061;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1062;
                    DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out1060, out _out1061, out _out1062);
                    _3627_recursiveGen = _out1060;
                    _3628_recOwned = _out1061;
                    _3629_recIdents = _out1062;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3627_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3628_recOwned;
                    readIdents = _3629_recIdents;
                  }
                } else {
                  DAST._IType _3630___mcc_h1205 = _source141.dtor_baseType;
                  DAST._INewtypeRange _3631___mcc_h1206 = _source141.dtor_range;
                  bool _3632___mcc_h1207 = _source141.dtor_erase;
                  bool _3633_erase = _3632___mcc_h1207;
                  DAST._INewtypeRange _3634_range = _3631___mcc_h1206;
                  DAST._IType _3635_b = _3630___mcc_h1205;
                  {
                    if (object.Equals(_2271_fromTpe, _3635_b)) {
                      RAST._IExpr _3636_recursiveGen;
                      bool _3637_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3638_recIdents;
                      RAST._IExpr _out1063;
                      bool _out1064;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1065;
                      DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out1063, out _out1064, out _out1065);
                      _3636_recursiveGen = _out1063;
                      _3637_recOwned = _out1064;
                      _3638_recIdents = _out1065;
                      Std.Wrappers._IOption<RAST._IType> _3639_potentialRhsType;
                      _3639_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3635_b, _3634_range);
                      Std.Wrappers._IOption<RAST._IType> _source142 = _3639_potentialRhsType;
                      if (_source142.is_None) {
                        if (_3633_erase) {
                          r = _3636_recursiveGen;
                        } else {
                          RAST._IType _3640_rhsType;
                          RAST._IType _out1066;
                          _out1066 = DCOMP.COMP.GenType(_2270_toTpe, true, false);
                          _3640_rhsType = _out1066;
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3640_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3636_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                        }
                        isOwned = _3637_recOwned;
                      } else {
                        RAST._IType _3641___mcc_h1255 = _source142.dtor_value;
                        RAST._IType _3642_v = _3641___mcc_h1255;
                        r = RAST.Expr.create_ConversionNum(_3642_v, _3636_recursiveGen);
                        isOwned = true;
                      }
                      readIdents = _3638_recIdents;
                    } else {
                      RAST._IExpr _out1067;
                      bool _out1068;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1069;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2272_expr, _2271_fromTpe, _3635_b), _3635_b, _2270_toTpe), selfIdent, @params, mustOwn, out _out1067, out _out1068, out _out1069);
                      r = _out1067;
                      isOwned = _out1068;
                      readIdents = _out1069;
                    }
                  }
                }
              } else if (_source140.is_Nullable) {
                DAST._IType _3643___mcc_h1211 = _source140.dtor_Nullable_a0;
                {
                  RAST._IExpr _3644_recursiveGen;
                  bool _3645_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3646_recIdents;
                  RAST._IExpr _out1070;
                  bool _out1071;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1072;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out1070, out _out1071, out _out1072);
                  _3644_recursiveGen = _out1070;
                  _3645_recOwned = _out1071;
                  _3646_recIdents = _out1072;
                  Dafny.ISequence<Dafny.Rune> _3647_s;
                  _3647_s = (_3644_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_3645_recOwned)) {
                    _3647_s = Dafny.Sequence<Dafny.Rune>.Concat(_3647_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  _3647_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3647_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  r = RAST.Expr.create_RawExpr(_3647_s);
                  isOwned = true;
                  readIdents = _3646_recIdents;
                }
              } else if (_source140.is_Tuple) {
                Dafny.ISequence<DAST._IType> _3648___mcc_h1213 = _source140.dtor_Tuple_a0;
                {
                  RAST._IExpr _3649_recursiveGen;
                  bool _3650_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3651_recIdents;
                  RAST._IExpr _out1073;
                  bool _out1074;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1075;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out1073, out _out1074, out _out1075);
                  _3649_recursiveGen = _out1073;
                  _3650_recOwned = _out1074;
                  _3651_recIdents = _out1075;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3649_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3650_recOwned;
                  readIdents = _3651_recIdents;
                }
              } else if (_source140.is_Array) {
                DAST._IType _3652___mcc_h1215 = _source140.dtor_element;
                BigInteger _3653___mcc_h1216 = _source140.dtor_dims;
                {
                  RAST._IExpr _3654_recursiveGen;
                  bool _3655_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3656_recIdents;
                  RAST._IExpr _out1076;
                  bool _out1077;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1078;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out1076, out _out1077, out _out1078);
                  _3654_recursiveGen = _out1076;
                  _3655_recOwned = _out1077;
                  _3656_recIdents = _out1078;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3654_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3655_recOwned;
                  readIdents = _3656_recIdents;
                }
              } else if (_source140.is_Seq) {
                DAST._IType _3657___mcc_h1219 = _source140.dtor_element;
                {
                  RAST._IExpr _3658_recursiveGen;
                  bool _3659_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3660_recIdents;
                  RAST._IExpr _out1079;
                  bool _out1080;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1081;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out1079, out _out1080, out _out1081);
                  _3658_recursiveGen = _out1079;
                  _3659_recOwned = _out1080;
                  _3660_recIdents = _out1081;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3658_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3659_recOwned;
                  readIdents = _3660_recIdents;
                }
              } else if (_source140.is_Set) {
                DAST._IType _3661___mcc_h1221 = _source140.dtor_element;
                {
                  RAST._IExpr _3662_recursiveGen;
                  bool _3663_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3664_recIdents;
                  RAST._IExpr _out1082;
                  bool _out1083;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1084;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out1082, out _out1083, out _out1084);
                  _3662_recursiveGen = _out1082;
                  _3663_recOwned = _out1083;
                  _3664_recIdents = _out1084;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3662_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3663_recOwned;
                  readIdents = _3664_recIdents;
                }
              } else if (_source140.is_Multiset) {
                DAST._IType _3665___mcc_h1223 = _source140.dtor_element;
                {
                  RAST._IExpr _3666_recursiveGen;
                  bool _3667_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3668_recIdents;
                  RAST._IExpr _out1085;
                  bool _out1086;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1087;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out1085, out _out1086, out _out1087);
                  _3666_recursiveGen = _out1085;
                  _3667_recOwned = _out1086;
                  _3668_recIdents = _out1087;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3666_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3667_recOwned;
                  readIdents = _3668_recIdents;
                }
              } else if (_source140.is_Map) {
                DAST._IType _3669___mcc_h1225 = _source140.dtor_key;
                DAST._IType _3670___mcc_h1226 = _source140.dtor_value;
                {
                  RAST._IExpr _3671_recursiveGen;
                  bool _3672_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3673_recIdents;
                  RAST._IExpr _out1088;
                  bool _out1089;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1090;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out1088, out _out1089, out _out1090);
                  _3671_recursiveGen = _out1088;
                  _3672_recOwned = _out1089;
                  _3673_recIdents = _out1090;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3671_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3672_recOwned;
                  readIdents = _3673_recIdents;
                }
              } else if (_source140.is_Arrow) {
                Dafny.ISequence<DAST._IType> _3674___mcc_h1229 = _source140.dtor_args;
                DAST._IType _3675___mcc_h1230 = _source140.dtor_result;
                {
                  RAST._IExpr _3676_recursiveGen;
                  bool _3677_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3678_recIdents;
                  RAST._IExpr _out1091;
                  bool _out1092;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1093;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out1091, out _out1092, out _out1093);
                  _3676_recursiveGen = _out1091;
                  _3677_recOwned = _out1092;
                  _3678_recIdents = _out1093;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3676_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3677_recOwned;
                  readIdents = _3678_recIdents;
                }
              } else if (_source140.is_Primitive) {
                DAST._IPrimitive _3679___mcc_h1233 = _source140.dtor_Primitive_a0;
                {
                  RAST._IExpr _3680_recursiveGen;
                  bool _3681_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3682_recIdents;
                  RAST._IExpr _out1094;
                  bool _out1095;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1096;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out1094, out _out1095, out _out1096);
                  _3680_recursiveGen = _out1094;
                  _3681_recOwned = _out1095;
                  _3682_recIdents = _out1096;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3680_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3681_recOwned;
                  readIdents = _3682_recIdents;
                }
              } else if (_source140.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _3683___mcc_h1235 = _source140.dtor_Passthrough_a0;
                {
                  RAST._IExpr _3684_recursiveGen;
                  bool _3685_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3686_recIdents;
                  RAST._IExpr _out1097;
                  bool _out1098;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1099;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out1097, out _out1098, out _out1099);
                  _3684_recursiveGen = _out1097;
                  _3685_recOwned = _out1098;
                  _3686_recIdents = _out1099;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3684_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3685_recOwned;
                  readIdents = _3686_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3687___mcc_h1237 = _source140.dtor_TypeArg_a0;
                {
                  RAST._IExpr _3688_recursiveGen;
                  bool _3689_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3690_recIdents;
                  RAST._IExpr _out1100;
                  bool _out1101;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1102;
                  DCOMP.COMP.GenExpr(_2272_expr, selfIdent, @params, mustOwn, out _out1100, out _out1101, out _out1102);
                  _3688_recursiveGen = _out1100;
                  _3689_recOwned = _out1101;
                  _3690_recIdents = _out1102;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3688_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3689_recOwned;
                  readIdents = _3690_recIdents;
                }
              }
            }
          }
        }
      } else if (_source76.is_SeqConstruct) {
        DAST._IExpression _3691___mcc_h26 = _source76.dtor_length;
        DAST._IExpression _3692___mcc_h27 = _source76.dtor_elem;
        DAST._IExpression _3693_expr = _3692___mcc_h27;
        DAST._IExpression _3694_length = _3691___mcc_h26;
        {
          RAST._IExpr _3695_recursiveGen;
          bool _3696___v62;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3697_recIdents;
          RAST._IExpr _out1103;
          bool _out1104;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1105;
          DCOMP.COMP.GenExpr(_3693_expr, selfIdent, @params, true, out _out1103, out _out1104, out _out1105);
          _3695_recursiveGen = _out1103;
          _3696___v62 = _out1104;
          _3697_recIdents = _out1105;
          RAST._IExpr _3698_lengthGen;
          bool _3699___v63;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3700_lengthIdents;
          RAST._IExpr _out1106;
          bool _out1107;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1108;
          DCOMP.COMP.GenExpr(_3694_length, selfIdent, @params, true, out _out1106, out _out1107, out _out1108);
          _3698_lengthGen = _out1106;
          _3699___v63 = _out1107;
          _3700_lengthIdents = _out1108;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), (_3695_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), (_3698_lengthGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer.0(&i)).collect::<Vec<_>>()\n}")));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3697_recIdents, _3700_lengthIdents);
          isOwned = true;
        }
      } else if (_source76.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _3701___mcc_h28 = _source76.dtor_elements;
        DAST._IType _3702___mcc_h29 = _source76.dtor_typ;
        DAST._IType _3703_typ = _3702___mcc_h29;
        Dafny.ISequence<DAST._IExpression> _3704_exprs = _3701___mcc_h28;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          RAST._IType _3705_genTpe;
          RAST._IType _out1109;
          _out1109 = DCOMP.COMP.GenType(_3703_typ, false, false);
          _3705_genTpe = _out1109;
          BigInteger _3706_i;
          _3706_i = BigInteger.Zero;
          Dafny.ISequence<Dafny.Rune> _3707_s;
          _3707_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(vec![");
          _3706_i = BigInteger.Zero;
          while ((_3706_i) < (new BigInteger((_3704_exprs).Count))) {
            if ((_3706_i).Sign == 1) {
              _3707_s = Dafny.Sequence<Dafny.Rune>.Concat(_3707_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _3708_recursiveGen;
            bool _3709___v64;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3710_recIdents;
            RAST._IExpr _out1110;
            bool _out1111;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1112;
            DCOMP.COMP.GenExpr((_3704_exprs).Select(_3706_i), selfIdent, @params, true, out _out1110, out _out1111, out _out1112);
            _3708_recursiveGen = _out1110;
            _3709___v64 = _out1111;
            _3710_recIdents = _out1112;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3710_recIdents);
            _3707_s = Dafny.Sequence<Dafny.Rune>.Concat(_3707_s, (_3708_recursiveGen)._ToString(DCOMP.__default.IND));
            _3706_i = (_3706_i) + (BigInteger.One);
          }
          _3707_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3707_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("] as Vec<")), (_3705_genTpe)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          r = RAST.Expr.create_RawExpr(_3707_s);
          isOwned = true;
        }
      } else if (_source76.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _3711___mcc_h30 = _source76.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _3712_exprs = _3711___mcc_h30;
        {
          Dafny.ISequence<RAST._IExpr> _3713_generatedValues;
          _3713_generatedValues = Dafny.Sequence<RAST._IExpr>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3714_i;
          _3714_i = BigInteger.Zero;
          while ((_3714_i) < (new BigInteger((_3712_exprs).Count))) {
            RAST._IExpr _3715_recursiveGen;
            bool _3716___v65;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3717_recIdents;
            RAST._IExpr _out1113;
            bool _out1114;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1115;
            DCOMP.COMP.GenExpr((_3712_exprs).Select(_3714_i), selfIdent, @params, true, out _out1113, out _out1114, out _out1115);
            _3715_recursiveGen = _out1113;
            _3716___v65 = _out1114;
            _3717_recIdents = _out1115;
            _3713_generatedValues = Dafny.Sequence<RAST._IExpr>.Concat(_3713_generatedValues, Dafny.Sequence<RAST._IExpr>.FromElements(_3715_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3717_recIdents);
            _3714_i = (_3714_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3718_s;
          _3718_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _3714_i = BigInteger.Zero;
          while ((_3714_i) < (new BigInteger((_3713_generatedValues).Count))) {
            if ((_3714_i).Sign == 1) {
              _3718_s = Dafny.Sequence<Dafny.Rune>.Concat(_3718_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _3719_gen;
            _3719_gen = (_3713_generatedValues).Select(_3714_i);
            _3718_s = Dafny.Sequence<Dafny.Rune>.Concat(_3718_s, (_3719_gen)._ToString(DCOMP.__default.IND));
            _3714_i = (_3714_i) + (BigInteger.One);
          }
          _3718_s = Dafny.Sequence<Dafny.Rune>.Concat(_3718_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashSet<_>>()"));
          r = RAST.Expr.create_RawExpr(_3718_s);
          isOwned = true;
        }
      } else if (_source76.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3720___mcc_h31 = _source76.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3721_mapElems = _3720___mcc_h31;
        {
          Dafny.ISequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>> _3722_generatedValues;
          _3722_generatedValues = Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3723_i;
          _3723_i = BigInteger.Zero;
          while ((_3723_i) < (new BigInteger((_3721_mapElems).Count))) {
            RAST._IExpr _3724_recursiveGenKey;
            bool _3725___v66;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3726_recIdentsKey;
            RAST._IExpr _out1116;
            bool _out1117;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1118;
            DCOMP.COMP.GenExpr(((_3721_mapElems).Select(_3723_i)).dtor__0, selfIdent, @params, true, out _out1116, out _out1117, out _out1118);
            _3724_recursiveGenKey = _out1116;
            _3725___v66 = _out1117;
            _3726_recIdentsKey = _out1118;
            RAST._IExpr _3727_recursiveGenValue;
            bool _3728___v67;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3729_recIdentsValue;
            RAST._IExpr _out1119;
            bool _out1120;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1121;
            DCOMP.COMP.GenExpr(((_3721_mapElems).Select(_3723_i)).dtor__1, selfIdent, @params, true, out _out1119, out _out1120, out _out1121);
            _3727_recursiveGenValue = _out1119;
            _3728___v67 = _out1120;
            _3729_recIdentsValue = _out1121;
            _3722_generatedValues = Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.Concat(_3722_generatedValues, Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.FromElements(_System.Tuple2<RAST._IExpr, RAST._IExpr>.create(_3724_recursiveGenKey, _3727_recursiveGenValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3726_recIdentsKey), _3729_recIdentsValue);
            _3723_i = (_3723_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3730_s;
          _3730_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _3723_i = BigInteger.Zero;
          while ((_3723_i) < (new BigInteger((_3722_generatedValues).Count))) {
            if ((_3723_i).Sign == 1) {
              _3730_s = Dafny.Sequence<Dafny.Rune>.Concat(_3730_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _3731_genKey;
            _3731_genKey = ((_3722_generatedValues).Select(_3723_i)).dtor__0;
            RAST._IExpr _3732_genValue;
            _3732_genValue = ((_3722_generatedValues).Select(_3723_i)).dtor__1;
            _3730_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3730_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3731_genKey)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3732_genValue)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _3723_i = (_3723_i) + (BigInteger.One);
          }
          _3730_s = Dafny.Sequence<Dafny.Rune>.Concat(_3730_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashMap<_, _>>()"));
          r = RAST.Expr.create_RawExpr(_3730_s);
          isOwned = true;
        }
      } else if (_source76.is_This) {
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source143 = selfIdent;
          if (_source143.is_None) {
            {
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")"));
              isOwned = true;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3733___mcc_h1256 = _source143.dtor_value;
            Dafny.ISequence<Dafny.Rune> _3734_id = _3733___mcc_h1256;
            {
              if (mustOwn) {
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(_3734_id, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()")));
                isOwned = true;
              } else {
                if ((_3734_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"));
                } else {
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3734_id));
                }
                isOwned = false;
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3734_id);
            }
          }
        }
      } else if (_source76.is_Ite) {
        DAST._IExpression _3735___mcc_h32 = _source76.dtor_cond;
        DAST._IExpression _3736___mcc_h33 = _source76.dtor_thn;
        DAST._IExpression _3737___mcc_h34 = _source76.dtor_els;
        DAST._IExpression _3738_f = _3737___mcc_h34;
        DAST._IExpression _3739_t = _3736___mcc_h33;
        DAST._IExpression _3740_cond = _3735___mcc_h32;
        {
          RAST._IExpr _3741_cond;
          bool _3742___v68;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3743_recIdentsCond;
          RAST._IExpr _out1122;
          bool _out1123;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1124;
          DCOMP.COMP.GenExpr(_3740_cond, selfIdent, @params, true, out _out1122, out _out1123, out _out1124);
          _3741_cond = _out1122;
          _3742___v68 = _out1123;
          _3743_recIdentsCond = _out1124;
          Dafny.ISequence<Dafny.Rune> _3744_condString;
          _3744_condString = (_3741_cond)._ToString(DCOMP.__default.IND);
          RAST._IExpr _3745___v69;
          bool _3746_tHasToBeOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3747___v70;
          RAST._IExpr _out1125;
          bool _out1126;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1127;
          DCOMP.COMP.GenExpr(_3739_t, selfIdent, @params, mustOwn, out _out1125, out _out1126, out _out1127);
          _3745___v69 = _out1125;
          _3746_tHasToBeOwned = _out1126;
          _3747___v70 = _out1127;
          RAST._IExpr _3748_fExpr;
          bool _3749_fOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3750_recIdentsF;
          RAST._IExpr _out1128;
          bool _out1129;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1130;
          DCOMP.COMP.GenExpr(_3738_f, selfIdent, @params, _3746_tHasToBeOwned, out _out1128, out _out1129, out _out1130);
          _3748_fExpr = _out1128;
          _3749_fOwned = _out1129;
          _3750_recIdentsF = _out1130;
          Dafny.ISequence<Dafny.Rune> _3751_fString;
          _3751_fString = (_3748_fExpr)._ToString(DCOMP.__default.IND);
          RAST._IExpr _3752_tExpr;
          bool _3753___v71;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3754_recIdentsT;
          RAST._IExpr _out1131;
          bool _out1132;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1133;
          DCOMP.COMP.GenExpr(_3739_t, selfIdent, @params, _3749_fOwned, out _out1131, out _out1132, out _out1133);
          _3752_tExpr = _out1131;
          _3753___v71 = _out1132;
          _3754_recIdentsT = _out1133;
          Dafny.ISequence<Dafny.Rune> _3755_tString;
          _3755_tString = (_3752_tExpr)._ToString(DCOMP.__default.IND);
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _3744_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _3755_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _3751_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})")));
          isOwned = _3749_fOwned;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3743_recIdentsCond, _3754_recIdentsT), _3750_recIdentsF);
        }
      } else if (_source76.is_UnOp) {
        DAST._IUnaryOp _3756___mcc_h35 = _source76.dtor_unOp;
        DAST._IExpression _3757___mcc_h36 = _source76.dtor_expr;
        DAST.Format._IUnOpFormat _3758___mcc_h37 = _source76.dtor_format1;
        DAST._IUnaryOp _source144 = _3756___mcc_h35;
        if (_source144.is_Not) {
          DAST.Format._IUnOpFormat _3759_format = _3758___mcc_h37;
          DAST._IExpression _3760_e = _3757___mcc_h36;
          {
            RAST._IExpr _3761_recursiveGen;
            bool _3762___v72;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3763_recIdents;
            RAST._IExpr _out1134;
            bool _out1135;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1136;
            DCOMP.COMP.GenExpr(_3760_e, selfIdent, @params, true, out _out1134, out _out1135, out _out1136);
            _3761_recursiveGen = _out1134;
            _3762___v72 = _out1135;
            _3763_recIdents = _out1136;
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), (_3761_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
            isOwned = true;
            readIdents = _3763_recIdents;
          }
        } else if (_source144.is_BitwiseNot) {
          DAST.Format._IUnOpFormat _3764_format = _3758___mcc_h37;
          DAST._IExpression _3765_e = _3757___mcc_h36;
          {
            RAST._IExpr _3766_recursiveGen;
            bool _3767___v73;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3768_recIdents;
            RAST._IExpr _out1137;
            bool _out1138;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1139;
            DCOMP.COMP.GenExpr(_3765_e, selfIdent, @params, true, out _out1137, out _out1138, out _out1139);
            _3766_recursiveGen = _out1137;
            _3767___v73 = _out1138;
            _3768_recIdents = _out1139;
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~("), (_3766_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
            isOwned = true;
            readIdents = _3768_recIdents;
          }
        } else {
          DAST.Format._IUnOpFormat _3769_format = _3758___mcc_h37;
          DAST._IExpression _3770_e = _3757___mcc_h36;
          {
            RAST._IExpr _3771_recursiveGen;
            bool _3772_recOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3773_recIdents;
            RAST._IExpr _out1140;
            bool _out1141;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1142;
            DCOMP.COMP.GenExpr(_3770_e, selfIdent, @params, false, out _out1140, out _out1141, out _out1142);
            _3771_recursiveGen = _out1140;
            _3772_recOwned = _out1141;
            _3773_recIdents = _out1142;
            r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), (_3771_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").len())"))));
            isOwned = true;
            readIdents = _3773_recIdents;
          }
        }
      } else if (_source76.is_BinOp) {
        DAST._IBinOp _3774___mcc_h38 = _source76.dtor_op;
        DAST._IExpression _3775___mcc_h39 = _source76.dtor_left;
        DAST._IExpression _3776___mcc_h40 = _source76.dtor_right;
        DAST.Format._IBinOpFormat _3777___mcc_h41 = _source76.dtor_format2;
        DAST.Format._IBinOpFormat _3778_format = _3777___mcc_h41;
        DAST._IExpression _3779_rExpr = _3776___mcc_h40;
        DAST._IExpression _3780_lExpr = _3775___mcc_h39;
        DAST._IBinOp _3781_op = _3774___mcc_h38;
        {
          RAST._IExpr _3782_left;
          bool _3783___v74;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3784_recIdentsL;
          RAST._IExpr _out1143;
          bool _out1144;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1145;
          DCOMP.COMP.GenExpr(_3780_lExpr, selfIdent, @params, true, out _out1143, out _out1144, out _out1145);
          _3782_left = _out1143;
          _3783___v74 = _out1144;
          _3784_recIdentsL = _out1145;
          RAST._IExpr _3785_right;
          bool _3786___v75;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3787_recIdentsR;
          RAST._IExpr _out1146;
          bool _out1147;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1148;
          DCOMP.COMP.GenExpr(_3779_rExpr, selfIdent, @params, true, out _out1146, out _out1147, out _out1148);
          _3785_right = _out1146;
          _3786___v75 = _out1147;
          _3787_recIdentsR = _out1148;
          DAST._IBinOp _source145 = _3781_op;
          if (_source145.is_Eq) {
            bool _3788___mcc_h1257 = _source145.dtor_referential;
            bool _3789___mcc_h1258 = _source145.dtor_nullable;
            {
              if ((DCOMP.COMP.OpTable).Contains(_3781_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3781_op), _3782_left, _3785_right, _3778_format);
              } else {
                DAST._IBinOp _source146 = _3781_op;
                if (_source146.is_Eq) {
                  bool _3790___mcc_h1263 = _source146.dtor_referential;
                  bool _3791___mcc_h1264 = _source146.dtor_nullable;
                  bool _3792_nullable = _3791___mcc_h1264;
                  bool _3793_referential = _3790___mcc_h1263;
                  {
                    if (_3793_referential) {
                      if (_3792_nullable) {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))")));
                      }
                    } else {
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3782_left)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), (_3785_right)._ToString(DCOMP.__default.IND)));
                    }
                  }
                } else if (_source146.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  }
                } else if (_source146.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3794___mcc_h1265 = _source146.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3795_op = _3794___mcc_h1265;
                  {
                    r = RAST.Expr.create_BinaryOp(_3795_op, _3782_left, _3785_right, _3778_format);
                  }
                }
              }
            }
          } else if (_source145.is_Div) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_3781_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3781_op), _3782_left, _3785_right, _3778_format);
              } else {
                DAST._IBinOp _source147 = _3781_op;
                if (_source147.is_Eq) {
                  bool _3796___mcc_h1266 = _source147.dtor_referential;
                  bool _3797___mcc_h1267 = _source147.dtor_nullable;
                  bool _3798_nullable = _3797___mcc_h1267;
                  bool _3799_referential = _3796___mcc_h1266;
                  {
                    if (_3799_referential) {
                      if (_3798_nullable) {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))")));
                      }
                    } else {
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3782_left)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), (_3785_right)._ToString(DCOMP.__default.IND)));
                    }
                  }
                } else if (_source147.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  }
                } else if (_source147.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3800___mcc_h1268 = _source147.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3801_op = _3800___mcc_h1268;
                  {
                    r = RAST.Expr.create_BinaryOp(_3801_op, _3782_left, _3785_right, _3778_format);
                  }
                }
              }
            }
          } else if (_source145.is_EuclidianDiv) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_3781_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3781_op), _3782_left, _3785_right, _3778_format);
              } else {
                DAST._IBinOp _source148 = _3781_op;
                if (_source148.is_Eq) {
                  bool _3802___mcc_h1269 = _source148.dtor_referential;
                  bool _3803___mcc_h1270 = _source148.dtor_nullable;
                  bool _3804_nullable = _3803___mcc_h1270;
                  bool _3805_referential = _3802___mcc_h1269;
                  {
                    if (_3805_referential) {
                      if (_3804_nullable) {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))")));
                      }
                    } else {
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3782_left)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), (_3785_right)._ToString(DCOMP.__default.IND)));
                    }
                  }
                } else if (_source148.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  }
                } else if (_source148.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3806___mcc_h1271 = _source148.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3807_op = _3806___mcc_h1271;
                  {
                    r = RAST.Expr.create_BinaryOp(_3807_op, _3782_left, _3785_right, _3778_format);
                  }
                }
              }
            }
          } else if (_source145.is_Mod) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_3781_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3781_op), _3782_left, _3785_right, _3778_format);
              } else {
                DAST._IBinOp _source149 = _3781_op;
                if (_source149.is_Eq) {
                  bool _3808___mcc_h1272 = _source149.dtor_referential;
                  bool _3809___mcc_h1273 = _source149.dtor_nullable;
                  bool _3810_nullable = _3809___mcc_h1273;
                  bool _3811_referential = _3808___mcc_h1272;
                  {
                    if (_3811_referential) {
                      if (_3810_nullable) {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))")));
                      }
                    } else {
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3782_left)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), (_3785_right)._ToString(DCOMP.__default.IND)));
                    }
                  }
                } else if (_source149.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  }
                } else if (_source149.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3812___mcc_h1274 = _source149.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3813_op = _3812___mcc_h1274;
                  {
                    r = RAST.Expr.create_BinaryOp(_3813_op, _3782_left, _3785_right, _3778_format);
                  }
                }
              }
            }
          } else if (_source145.is_EuclidianMod) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_3781_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3781_op), _3782_left, _3785_right, _3778_format);
              } else {
                DAST._IBinOp _source150 = _3781_op;
                if (_source150.is_Eq) {
                  bool _3814___mcc_h1275 = _source150.dtor_referential;
                  bool _3815___mcc_h1276 = _source150.dtor_nullable;
                  bool _3816_nullable = _3815___mcc_h1276;
                  bool _3817_referential = _3814___mcc_h1275;
                  {
                    if (_3817_referential) {
                      if (_3816_nullable) {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))")));
                      }
                    } else {
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3782_left)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), (_3785_right)._ToString(DCOMP.__default.IND)));
                    }
                  }
                } else if (_source150.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  }
                } else if (_source150.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3818___mcc_h1277 = _source150.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3819_op = _3818___mcc_h1277;
                  {
                    r = RAST.Expr.create_BinaryOp(_3819_op, _3782_left, _3785_right, _3778_format);
                  }
                }
              }
            }
          } else if (_source145.is_Lt) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_3781_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3781_op), _3782_left, _3785_right, _3778_format);
              } else {
                DAST._IBinOp _source151 = _3781_op;
                if (_source151.is_Eq) {
                  bool _3820___mcc_h1278 = _source151.dtor_referential;
                  bool _3821___mcc_h1279 = _source151.dtor_nullable;
                  bool _3822_nullable = _3821___mcc_h1279;
                  bool _3823_referential = _3820___mcc_h1278;
                  {
                    if (_3823_referential) {
                      if (_3822_nullable) {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))")));
                      }
                    } else {
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3782_left)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), (_3785_right)._ToString(DCOMP.__default.IND)));
                    }
                  }
                } else if (_source151.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  }
                } else if (_source151.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3824___mcc_h1280 = _source151.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3825_op = _3824___mcc_h1280;
                  {
                    r = RAST.Expr.create_BinaryOp(_3825_op, _3782_left, _3785_right, _3778_format);
                  }
                }
              }
            }
          } else if (_source145.is_Plus) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_3781_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3781_op), _3782_left, _3785_right, _3778_format);
              } else {
                DAST._IBinOp _source152 = _3781_op;
                if (_source152.is_Eq) {
                  bool _3826___mcc_h1281 = _source152.dtor_referential;
                  bool _3827___mcc_h1282 = _source152.dtor_nullable;
                  bool _3828_nullable = _3827___mcc_h1282;
                  bool _3829_referential = _3826___mcc_h1281;
                  {
                    if (_3829_referential) {
                      if (_3828_nullable) {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))")));
                      }
                    } else {
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3782_left)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), (_3785_right)._ToString(DCOMP.__default.IND)));
                    }
                  }
                } else if (_source152.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  }
                } else if (_source152.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3830___mcc_h1283 = _source152.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3831_op = _3830___mcc_h1283;
                  {
                    r = RAST.Expr.create_BinaryOp(_3831_op, _3782_left, _3785_right, _3778_format);
                  }
                }
              }
            }
          } else if (_source145.is_Minus) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_3781_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3781_op), _3782_left, _3785_right, _3778_format);
              } else {
                DAST._IBinOp _source153 = _3781_op;
                if (_source153.is_Eq) {
                  bool _3832___mcc_h1284 = _source153.dtor_referential;
                  bool _3833___mcc_h1285 = _source153.dtor_nullable;
                  bool _3834_nullable = _3833___mcc_h1285;
                  bool _3835_referential = _3832___mcc_h1284;
                  {
                    if (_3835_referential) {
                      if (_3834_nullable) {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))")));
                      }
                    } else {
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3782_left)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), (_3785_right)._ToString(DCOMP.__default.IND)));
                    }
                  }
                } else if (_source153.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  }
                } else if (_source153.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3836___mcc_h1286 = _source153.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3837_op = _3836___mcc_h1286;
                  {
                    r = RAST.Expr.create_BinaryOp(_3837_op, _3782_left, _3785_right, _3778_format);
                  }
                }
              }
            }
          } else if (_source145.is_Times) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_3781_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3781_op), _3782_left, _3785_right, _3778_format);
              } else {
                DAST._IBinOp _source154 = _3781_op;
                if (_source154.is_Eq) {
                  bool _3838___mcc_h1287 = _source154.dtor_referential;
                  bool _3839___mcc_h1288 = _source154.dtor_nullable;
                  bool _3840_nullable = _3839___mcc_h1288;
                  bool _3841_referential = _3838___mcc_h1287;
                  {
                    if (_3841_referential) {
                      if (_3840_nullable) {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))")));
                      }
                    } else {
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3782_left)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), (_3785_right)._ToString(DCOMP.__default.IND)));
                    }
                  }
                } else if (_source154.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  }
                } else if (_source154.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3842___mcc_h1289 = _source154.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3843_op = _3842___mcc_h1289;
                  {
                    r = RAST.Expr.create_BinaryOp(_3843_op, _3782_left, _3785_right, _3778_format);
                  }
                }
              }
            }
          } else if (_source145.is_BitwiseAnd) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_3781_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3781_op), _3782_left, _3785_right, _3778_format);
              } else {
                DAST._IBinOp _source155 = _3781_op;
                if (_source155.is_Eq) {
                  bool _3844___mcc_h1290 = _source155.dtor_referential;
                  bool _3845___mcc_h1291 = _source155.dtor_nullable;
                  bool _3846_nullable = _3845___mcc_h1291;
                  bool _3847_referential = _3844___mcc_h1290;
                  {
                    if (_3847_referential) {
                      if (_3846_nullable) {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))")));
                      }
                    } else {
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3782_left)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), (_3785_right)._ToString(DCOMP.__default.IND)));
                    }
                  }
                } else if (_source155.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  }
                } else if (_source155.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3848___mcc_h1292 = _source155.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3849_op = _3848___mcc_h1292;
                  {
                    r = RAST.Expr.create_BinaryOp(_3849_op, _3782_left, _3785_right, _3778_format);
                  }
                }
              }
            }
          } else if (_source145.is_BitwiseOr) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_3781_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3781_op), _3782_left, _3785_right, _3778_format);
              } else {
                DAST._IBinOp _source156 = _3781_op;
                if (_source156.is_Eq) {
                  bool _3850___mcc_h1293 = _source156.dtor_referential;
                  bool _3851___mcc_h1294 = _source156.dtor_nullable;
                  bool _3852_nullable = _3851___mcc_h1294;
                  bool _3853_referential = _3850___mcc_h1293;
                  {
                    if (_3853_referential) {
                      if (_3852_nullable) {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))")));
                      }
                    } else {
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3782_left)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), (_3785_right)._ToString(DCOMP.__default.IND)));
                    }
                  }
                } else if (_source156.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  }
                } else if (_source156.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3854___mcc_h1295 = _source156.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3855_op = _3854___mcc_h1295;
                  {
                    r = RAST.Expr.create_BinaryOp(_3855_op, _3782_left, _3785_right, _3778_format);
                  }
                }
              }
            }
          } else if (_source145.is_BitwiseXor) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_3781_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3781_op), _3782_left, _3785_right, _3778_format);
              } else {
                DAST._IBinOp _source157 = _3781_op;
                if (_source157.is_Eq) {
                  bool _3856___mcc_h1296 = _source157.dtor_referential;
                  bool _3857___mcc_h1297 = _source157.dtor_nullable;
                  bool _3858_nullable = _3857___mcc_h1297;
                  bool _3859_referential = _3856___mcc_h1296;
                  {
                    if (_3859_referential) {
                      if (_3858_nullable) {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))")));
                      }
                    } else {
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3782_left)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), (_3785_right)._ToString(DCOMP.__default.IND)));
                    }
                  }
                } else if (_source157.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  }
                } else if (_source157.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3860___mcc_h1298 = _source157.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3861_op = _3860___mcc_h1298;
                  {
                    r = RAST.Expr.create_BinaryOp(_3861_op, _3782_left, _3785_right, _3778_format);
                  }
                }
              }
            }
          } else if (_source145.is_BitwiseShiftRight) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_3781_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3781_op), _3782_left, _3785_right, _3778_format);
              } else {
                DAST._IBinOp _source158 = _3781_op;
                if (_source158.is_Eq) {
                  bool _3862___mcc_h1299 = _source158.dtor_referential;
                  bool _3863___mcc_h1300 = _source158.dtor_nullable;
                  bool _3864_nullable = _3863___mcc_h1300;
                  bool _3865_referential = _3862___mcc_h1299;
                  {
                    if (_3865_referential) {
                      if (_3864_nullable) {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))")));
                      }
                    } else {
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3782_left)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), (_3785_right)._ToString(DCOMP.__default.IND)));
                    }
                  }
                } else if (_source158.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  }
                } else if (_source158.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3866___mcc_h1301 = _source158.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3867_op = _3866___mcc_h1301;
                  {
                    r = RAST.Expr.create_BinaryOp(_3867_op, _3782_left, _3785_right, _3778_format);
                  }
                }
              }
            }
          } else if (_source145.is_BitwiseShiftLeft) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_3781_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3781_op), _3782_left, _3785_right, _3778_format);
              } else {
                DAST._IBinOp _source159 = _3781_op;
                if (_source159.is_Eq) {
                  bool _3868___mcc_h1302 = _source159.dtor_referential;
                  bool _3869___mcc_h1303 = _source159.dtor_nullable;
                  bool _3870_nullable = _3869___mcc_h1303;
                  bool _3871_referential = _3868___mcc_h1302;
                  {
                    if (_3871_referential) {
                      if (_3870_nullable) {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))")));
                      }
                    } else {
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3782_left)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), (_3785_right)._ToString(DCOMP.__default.IND)));
                    }
                  }
                } else if (_source159.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  }
                } else if (_source159.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3872___mcc_h1304 = _source159.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3873_op = _3872___mcc_h1304;
                  {
                    r = RAST.Expr.create_BinaryOp(_3873_op, _3782_left, _3785_right, _3778_format);
                  }
                }
              }
            }
          } else if (_source145.is_And) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_3781_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3781_op), _3782_left, _3785_right, _3778_format);
              } else {
                DAST._IBinOp _source160 = _3781_op;
                if (_source160.is_Eq) {
                  bool _3874___mcc_h1305 = _source160.dtor_referential;
                  bool _3875___mcc_h1306 = _source160.dtor_nullable;
                  bool _3876_nullable = _3875___mcc_h1306;
                  bool _3877_referential = _3874___mcc_h1305;
                  {
                    if (_3877_referential) {
                      if (_3876_nullable) {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))")));
                      }
                    } else {
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3782_left)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), (_3785_right)._ToString(DCOMP.__default.IND)));
                    }
                  }
                } else if (_source160.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  }
                } else if (_source160.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3878___mcc_h1307 = _source160.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3879_op = _3878___mcc_h1307;
                  {
                    r = RAST.Expr.create_BinaryOp(_3879_op, _3782_left, _3785_right, _3778_format);
                  }
                }
              }
            }
          } else if (_source145.is_Or) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_3781_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3781_op), _3782_left, _3785_right, _3778_format);
              } else {
                DAST._IBinOp _source161 = _3781_op;
                if (_source161.is_Eq) {
                  bool _3880___mcc_h1308 = _source161.dtor_referential;
                  bool _3881___mcc_h1309 = _source161.dtor_nullable;
                  bool _3882_nullable = _3881___mcc_h1309;
                  bool _3883_referential = _3880___mcc_h1308;
                  {
                    if (_3883_referential) {
                      if (_3882_nullable) {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))")));
                      }
                    } else {
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3782_left)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), (_3785_right)._ToString(DCOMP.__default.IND)));
                    }
                  }
                } else if (_source161.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  }
                } else if (_source161.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3884___mcc_h1310 = _source161.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3885_op = _3884___mcc_h1310;
                  {
                    r = RAST.Expr.create_BinaryOp(_3885_op, _3782_left, _3785_right, _3778_format);
                  }
                }
              }
            }
          } else if (_source145.is_In) {
            {
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3785_right)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
            }
          } else if (_source145.is_SetDifference) {
            {
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3782_left)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".difference(&")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").cloned().collect::<::std::collections::HashSet<_>>()")));
            }
          } else if (_source145.is_Concat) {
            {
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].concat()")));
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3886___mcc_h1261 = _source145.dtor_Passthrough_a0;
            {
              if ((DCOMP.COMP.OpTable).Contains(_3781_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3781_op), _3782_left, _3785_right, _3778_format);
              } else {
                DAST._IBinOp _source162 = _3781_op;
                if (_source162.is_Eq) {
                  bool _3887___mcc_h1311 = _source162.dtor_referential;
                  bool _3888___mcc_h1312 = _source162.dtor_nullable;
                  bool _3889_nullable = _3888___mcc_h1312;
                  bool _3890_referential = _3887___mcc_h1311;
                  {
                    if (_3890_referential) {
                      if (_3889_nullable) {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))")));
                      }
                    } else {
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3782_left)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), (_3785_right)._ToString(DCOMP.__default.IND)));
                    }
                  }
                } else if (_source162.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  }
                } else if (_source162.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), (_3782_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3785_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3891___mcc_h1313 = _source162.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3892_op = _3891___mcc_h1313;
                  {
                    r = RAST.Expr.create_BinaryOp(_3892_op, _3782_left, _3785_right, _3778_format);
                  }
                }
              }
            }
          }
          isOwned = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3784_recIdentsL, _3787_recIdentsR);
        }
      } else if (_source76.is_ArrayLen) {
        DAST._IExpression _3893___mcc_h42 = _source76.dtor_expr;
        BigInteger _3894___mcc_h43 = _source76.dtor_dim;
        BigInteger _3895_dim = _3894___mcc_h43;
        DAST._IExpression _3896_expr = _3893___mcc_h42;
        {
          RAST._IExpr _3897_recursiveGen;
          bool _3898___v77;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3899_recIdents;
          RAST._IExpr _out1149;
          bool _out1150;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1151;
          DCOMP.COMP.GenExpr(_3896_expr, selfIdent, @params, true, out _out1149, out _out1150, out _out1151);
          _3897_recursiveGen = _out1149;
          _3898___v77 = _out1150;
          _3899_recIdents = _out1151;
          if ((_3895_dim).Sign == 0) {
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), (_3897_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow().len())")));
          } else {
            Dafny.ISequence<Dafny.Rune> _3900_s;
            _3900_s = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(m.borrow().len())")))._ToString(DCOMP.__default.IND);
            BigInteger _3901_i;
            _3901_i = BigInteger.One;
            while ((_3901_i) < (_3895_dim)) {
              _3900_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("m.borrow().get(0).map(|m| "), _3900_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
              _3901_i = (_3901_i) + (BigInteger.One);
            }
            r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3897_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow().get(0).map(|m| ")), _3900_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"))));
          }
          isOwned = true;
          readIdents = _3899_recIdents;
        }
      } else if (_source76.is_Select) {
        DAST._IExpression _3902___mcc_h44 = _source76.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _3903___mcc_h45 = _source76.dtor_field;
        bool _3904___mcc_h46 = _source76.dtor_isConstant;
        bool _3905___mcc_h47 = _source76.dtor_onDatatype;
        DAST._IExpression _source163 = _3902___mcc_h44;
        if (_source163.is_Literal) {
          DAST._ILiteral _3906___mcc_h48 = _source163.dtor_Literal_a0;
          bool _3907_isDatatype = _3905___mcc_h47;
          bool _3908_isConstant = _3904___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3909_field = _3903___mcc_h45;
          DAST._IExpression _3910_on = _3902___mcc_h44;
          {
            RAST._IExpr _3911_onExpr;
            bool _3912_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3913_recIdents;
            RAST._IExpr _out1152;
            bool _out1153;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1154;
            DCOMP.COMP.GenExpr(_3910_on, selfIdent, @params, false, out _out1152, out _out1153, out _out1154);
            _3911_onExpr = _out1152;
            _3912_onOwned = _out1153;
            _3913_recIdents = _out1154;
            Dafny.ISequence<Dafny.Rune> _3914_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_3907_isDatatype) || (_3908_isConstant)) {
              _3914_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3911_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3909_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3908_isConstant) {
                _3914_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3914_s);
              }
              if (mustOwn) {
                _3914_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3914_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _3914_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_3911_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3909_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _3914_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3914_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_3914_s);
            readIdents = _3913_recIdents;
          }
        } else if (_source163.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _3915___mcc_h50 = _source163.dtor_Ident_a0;
          bool _3916_isDatatype = _3905___mcc_h47;
          bool _3917_isConstant = _3904___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3918_field = _3903___mcc_h45;
          DAST._IExpression _3919_on = _3902___mcc_h44;
          {
            RAST._IExpr _3920_onExpr;
            bool _3921_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3922_recIdents;
            RAST._IExpr _out1155;
            bool _out1156;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1157;
            DCOMP.COMP.GenExpr(_3919_on, selfIdent, @params, false, out _out1155, out _out1156, out _out1157);
            _3920_onExpr = _out1155;
            _3921_onOwned = _out1156;
            _3922_recIdents = _out1157;
            Dafny.ISequence<Dafny.Rune> _3923_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_3916_isDatatype) || (_3917_isConstant)) {
              _3923_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3920_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3918_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3917_isConstant) {
                _3923_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3923_s);
              }
              if (mustOwn) {
                _3923_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3923_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _3923_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_3920_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3918_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _3923_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3923_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_3923_s);
            readIdents = _3922_recIdents;
          }
        } else if (_source163.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3924___mcc_h52 = _source163.dtor_Companion_a0;
          bool _3925_isDatatype = _3905___mcc_h47;
          bool _3926_isConstant = _3904___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3927_field = _3903___mcc_h45;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3928_c = _3924___mcc_h52;
          {
            RAST._IExpr _3929_onExpr;
            bool _3930_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3931_recIdents;
            RAST._IExpr _out1158;
            bool _out1159;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1160;
            DCOMP.COMP.GenExpr(DAST.Expression.create_Companion(_3928_c), selfIdent, @params, false, out _out1158, out _out1159, out _out1160);
            _3929_onExpr = _out1158;
            _3930_onOwned = _out1159;
            _3931_recIdents = _out1160;
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3929_onExpr)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_3927_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()")));
            isOwned = true;
            readIdents = _3931_recIdents;
          }
        } else if (_source163.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _3932___mcc_h54 = _source163.dtor_Tuple_a0;
          bool _3933_isDatatype = _3905___mcc_h47;
          bool _3934_isConstant = _3904___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3935_field = _3903___mcc_h45;
          DAST._IExpression _3936_on = _3902___mcc_h44;
          {
            RAST._IExpr _3937_onExpr;
            bool _3938_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3939_recIdents;
            RAST._IExpr _out1161;
            bool _out1162;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1163;
            DCOMP.COMP.GenExpr(_3936_on, selfIdent, @params, false, out _out1161, out _out1162, out _out1163);
            _3937_onExpr = _out1161;
            _3938_onOwned = _out1162;
            _3939_recIdents = _out1163;
            Dafny.ISequence<Dafny.Rune> _3940_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_3933_isDatatype) || (_3934_isConstant)) {
              _3940_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3937_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3935_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3934_isConstant) {
                _3940_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3940_s);
              }
              if (mustOwn) {
                _3940_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3940_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _3940_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_3937_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3935_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _3940_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3940_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_3940_s);
            readIdents = _3939_recIdents;
          }
        } else if (_source163.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3941___mcc_h56 = _source163.dtor_path;
          Dafny.ISequence<DAST._IType> _3942___mcc_h57 = _source163.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _3943___mcc_h58 = _source163.dtor_args;
          bool _3944_isDatatype = _3905___mcc_h47;
          bool _3945_isConstant = _3904___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3946_field = _3903___mcc_h45;
          DAST._IExpression _3947_on = _3902___mcc_h44;
          {
            RAST._IExpr _3948_onExpr;
            bool _3949_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3950_recIdents;
            RAST._IExpr _out1164;
            bool _out1165;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1166;
            DCOMP.COMP.GenExpr(_3947_on, selfIdent, @params, false, out _out1164, out _out1165, out _out1166);
            _3948_onExpr = _out1164;
            _3949_onOwned = _out1165;
            _3950_recIdents = _out1166;
            Dafny.ISequence<Dafny.Rune> _3951_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_3944_isDatatype) || (_3945_isConstant)) {
              _3951_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3948_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3946_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3945_isConstant) {
                _3951_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3951_s);
              }
              if (mustOwn) {
                _3951_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3951_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _3951_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_3948_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3946_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _3951_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3951_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_3951_s);
            readIdents = _3950_recIdents;
          }
        } else if (_source163.is_NewArray) {
          Dafny.ISequence<DAST._IExpression> _3952___mcc_h62 = _source163.dtor_dims;
          DAST._IType _3953___mcc_h63 = _source163.dtor_typ;
          bool _3954_isDatatype = _3905___mcc_h47;
          bool _3955_isConstant = _3904___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3956_field = _3903___mcc_h45;
          DAST._IExpression _3957_on = _3902___mcc_h44;
          {
            RAST._IExpr _3958_onExpr;
            bool _3959_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3960_recIdents;
            RAST._IExpr _out1167;
            bool _out1168;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1169;
            DCOMP.COMP.GenExpr(_3957_on, selfIdent, @params, false, out _out1167, out _out1168, out _out1169);
            _3958_onExpr = _out1167;
            _3959_onOwned = _out1168;
            _3960_recIdents = _out1169;
            Dafny.ISequence<Dafny.Rune> _3961_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_3954_isDatatype) || (_3955_isConstant)) {
              _3961_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3958_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3956_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3955_isConstant) {
                _3961_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3961_s);
              }
              if (mustOwn) {
                _3961_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3961_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _3961_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_3958_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3956_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _3961_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3961_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_3961_s);
            readIdents = _3960_recIdents;
          }
        } else if (_source163.is_DatatypeValue) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3962___mcc_h66 = _source163.dtor_path;
          Dafny.ISequence<DAST._IType> _3963___mcc_h67 = _source163.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _3964___mcc_h68 = _source163.dtor_variant;
          bool _3965___mcc_h69 = _source163.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _3966___mcc_h70 = _source163.dtor_contents;
          bool _3967_isDatatype = _3905___mcc_h47;
          bool _3968_isConstant = _3904___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3969_field = _3903___mcc_h45;
          DAST._IExpression _3970_on = _3902___mcc_h44;
          {
            RAST._IExpr _3971_onExpr;
            bool _3972_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3973_recIdents;
            RAST._IExpr _out1170;
            bool _out1171;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1172;
            DCOMP.COMP.GenExpr(_3970_on, selfIdent, @params, false, out _out1170, out _out1171, out _out1172);
            _3971_onExpr = _out1170;
            _3972_onOwned = _out1171;
            _3973_recIdents = _out1172;
            Dafny.ISequence<Dafny.Rune> _3974_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_3967_isDatatype) || (_3968_isConstant)) {
              _3974_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3971_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3969_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3968_isConstant) {
                _3974_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3974_s);
              }
              if (mustOwn) {
                _3974_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3974_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _3974_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_3971_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3969_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _3974_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3974_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_3974_s);
            readIdents = _3973_recIdents;
          }
        } else if (_source163.is_Convert) {
          DAST._IExpression _3975___mcc_h76 = _source163.dtor_value;
          DAST._IType _3976___mcc_h77 = _source163.dtor_from;
          DAST._IType _3977___mcc_h78 = _source163.dtor_typ;
          bool _3978_isDatatype = _3905___mcc_h47;
          bool _3979_isConstant = _3904___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3980_field = _3903___mcc_h45;
          DAST._IExpression _3981_on = _3902___mcc_h44;
          {
            RAST._IExpr _3982_onExpr;
            bool _3983_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3984_recIdents;
            RAST._IExpr _out1173;
            bool _out1174;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1175;
            DCOMP.COMP.GenExpr(_3981_on, selfIdent, @params, false, out _out1173, out _out1174, out _out1175);
            _3982_onExpr = _out1173;
            _3983_onOwned = _out1174;
            _3984_recIdents = _out1175;
            Dafny.ISequence<Dafny.Rune> _3985_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_3978_isDatatype) || (_3979_isConstant)) {
              _3985_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3982_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3980_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3979_isConstant) {
                _3985_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3985_s);
              }
              if (mustOwn) {
                _3985_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3985_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _3985_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_3982_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3980_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _3985_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3985_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_3985_s);
            readIdents = _3984_recIdents;
          }
        } else if (_source163.is_SeqConstruct) {
          DAST._IExpression _3986___mcc_h82 = _source163.dtor_length;
          DAST._IExpression _3987___mcc_h83 = _source163.dtor_elem;
          bool _3988_isDatatype = _3905___mcc_h47;
          bool _3989_isConstant = _3904___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3990_field = _3903___mcc_h45;
          DAST._IExpression _3991_on = _3902___mcc_h44;
          {
            RAST._IExpr _3992_onExpr;
            bool _3993_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3994_recIdents;
            RAST._IExpr _out1176;
            bool _out1177;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1178;
            DCOMP.COMP.GenExpr(_3991_on, selfIdent, @params, false, out _out1176, out _out1177, out _out1178);
            _3992_onExpr = _out1176;
            _3993_onOwned = _out1177;
            _3994_recIdents = _out1178;
            Dafny.ISequence<Dafny.Rune> _3995_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_3988_isDatatype) || (_3989_isConstant)) {
              _3995_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3992_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3990_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3989_isConstant) {
                _3995_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3995_s);
              }
              if (mustOwn) {
                _3995_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3995_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _3995_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_3992_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3990_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _3995_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3995_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_3995_s);
            readIdents = _3994_recIdents;
          }
        } else if (_source163.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _3996___mcc_h86 = _source163.dtor_elements;
          DAST._IType _3997___mcc_h87 = _source163.dtor_typ;
          bool _3998_isDatatype = _3905___mcc_h47;
          bool _3999_isConstant = _3904___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _4000_field = _3903___mcc_h45;
          DAST._IExpression _4001_on = _3902___mcc_h44;
          {
            RAST._IExpr _4002_onExpr;
            bool _4003_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4004_recIdents;
            RAST._IExpr _out1179;
            bool _out1180;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1181;
            DCOMP.COMP.GenExpr(_4001_on, selfIdent, @params, false, out _out1179, out _out1180, out _out1181);
            _4002_onExpr = _out1179;
            _4003_onOwned = _out1180;
            _4004_recIdents = _out1181;
            Dafny.ISequence<Dafny.Rune> _4005_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_3998_isDatatype) || (_3999_isConstant)) {
              _4005_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4002_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4000_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3999_isConstant) {
                _4005_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4005_s);
              }
              if (mustOwn) {
                _4005_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4005_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4005_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4002_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4000_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4005_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4005_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4005_s);
            readIdents = _4004_recIdents;
          }
        } else if (_source163.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _4006___mcc_h90 = _source163.dtor_elements;
          bool _4007_isDatatype = _3905___mcc_h47;
          bool _4008_isConstant = _3904___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _4009_field = _3903___mcc_h45;
          DAST._IExpression _4010_on = _3902___mcc_h44;
          {
            RAST._IExpr _4011_onExpr;
            bool _4012_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4013_recIdents;
            RAST._IExpr _out1182;
            bool _out1183;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1184;
            DCOMP.COMP.GenExpr(_4010_on, selfIdent, @params, false, out _out1182, out _out1183, out _out1184);
            _4011_onExpr = _out1182;
            _4012_onOwned = _out1183;
            _4013_recIdents = _out1184;
            Dafny.ISequence<Dafny.Rune> _4014_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4007_isDatatype) || (_4008_isConstant)) {
              _4014_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4011_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4009_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4008_isConstant) {
                _4014_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4014_s);
              }
              if (mustOwn) {
                _4014_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4014_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4014_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4011_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4009_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4014_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4014_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4014_s);
            readIdents = _4013_recIdents;
          }
        } else if (_source163.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _4015___mcc_h92 = _source163.dtor_mapElems;
          bool _4016_isDatatype = _3905___mcc_h47;
          bool _4017_isConstant = _3904___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _4018_field = _3903___mcc_h45;
          DAST._IExpression _4019_on = _3902___mcc_h44;
          {
            RAST._IExpr _4020_onExpr;
            bool _4021_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4022_recIdents;
            RAST._IExpr _out1185;
            bool _out1186;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1187;
            DCOMP.COMP.GenExpr(_4019_on, selfIdent, @params, false, out _out1185, out _out1186, out _out1187);
            _4020_onExpr = _out1185;
            _4021_onOwned = _out1186;
            _4022_recIdents = _out1187;
            Dafny.ISequence<Dafny.Rune> _4023_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4016_isDatatype) || (_4017_isConstant)) {
              _4023_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4020_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4018_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4017_isConstant) {
                _4023_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4023_s);
              }
              if (mustOwn) {
                _4023_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4023_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4023_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4020_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4018_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4023_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4023_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4023_s);
            readIdents = _4022_recIdents;
          }
        } else if (_source163.is_This) {
          bool _4024_isDatatype = _3905___mcc_h47;
          bool _4025_isConstant = _3904___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _4026_field = _3903___mcc_h45;
          DAST._IExpression _4027_on = _3902___mcc_h44;
          {
            RAST._IExpr _4028_onExpr;
            bool _4029_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4030_recIdents;
            RAST._IExpr _out1188;
            bool _out1189;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1190;
            DCOMP.COMP.GenExpr(_4027_on, selfIdent, @params, false, out _out1188, out _out1189, out _out1190);
            _4028_onExpr = _out1188;
            _4029_onOwned = _out1189;
            _4030_recIdents = _out1190;
            Dafny.ISequence<Dafny.Rune> _4031_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4024_isDatatype) || (_4025_isConstant)) {
              _4031_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4028_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4026_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4025_isConstant) {
                _4031_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4031_s);
              }
              if (mustOwn) {
                _4031_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4031_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4031_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4028_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4026_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4031_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4031_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4031_s);
            readIdents = _4030_recIdents;
          }
        } else if (_source163.is_Ite) {
          DAST._IExpression _4032___mcc_h94 = _source163.dtor_cond;
          DAST._IExpression _4033___mcc_h95 = _source163.dtor_thn;
          DAST._IExpression _4034___mcc_h96 = _source163.dtor_els;
          bool _4035_isDatatype = _3905___mcc_h47;
          bool _4036_isConstant = _3904___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _4037_field = _3903___mcc_h45;
          DAST._IExpression _4038_on = _3902___mcc_h44;
          {
            RAST._IExpr _4039_onExpr;
            bool _4040_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4041_recIdents;
            RAST._IExpr _out1191;
            bool _out1192;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1193;
            DCOMP.COMP.GenExpr(_4038_on, selfIdent, @params, false, out _out1191, out _out1192, out _out1193);
            _4039_onExpr = _out1191;
            _4040_onOwned = _out1192;
            _4041_recIdents = _out1193;
            Dafny.ISequence<Dafny.Rune> _4042_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4035_isDatatype) || (_4036_isConstant)) {
              _4042_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4039_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4037_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4036_isConstant) {
                _4042_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4042_s);
              }
              if (mustOwn) {
                _4042_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4042_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4042_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4039_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4037_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4042_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4042_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4042_s);
            readIdents = _4041_recIdents;
          }
        } else if (_source163.is_UnOp) {
          DAST._IUnaryOp _4043___mcc_h100 = _source163.dtor_unOp;
          DAST._IExpression _4044___mcc_h101 = _source163.dtor_expr;
          DAST.Format._IUnOpFormat _4045___mcc_h102 = _source163.dtor_format1;
          bool _4046_isDatatype = _3905___mcc_h47;
          bool _4047_isConstant = _3904___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _4048_field = _3903___mcc_h45;
          DAST._IExpression _4049_on = _3902___mcc_h44;
          {
            RAST._IExpr _4050_onExpr;
            bool _4051_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4052_recIdents;
            RAST._IExpr _out1194;
            bool _out1195;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1196;
            DCOMP.COMP.GenExpr(_4049_on, selfIdent, @params, false, out _out1194, out _out1195, out _out1196);
            _4050_onExpr = _out1194;
            _4051_onOwned = _out1195;
            _4052_recIdents = _out1196;
            Dafny.ISequence<Dafny.Rune> _4053_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4046_isDatatype) || (_4047_isConstant)) {
              _4053_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4050_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4048_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4047_isConstant) {
                _4053_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4053_s);
              }
              if (mustOwn) {
                _4053_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4053_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4053_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4050_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4048_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4053_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4053_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4053_s);
            readIdents = _4052_recIdents;
          }
        } else if (_source163.is_BinOp) {
          DAST._IBinOp _4054___mcc_h106 = _source163.dtor_op;
          DAST._IExpression _4055___mcc_h107 = _source163.dtor_left;
          DAST._IExpression _4056___mcc_h108 = _source163.dtor_right;
          DAST.Format._IBinOpFormat _4057___mcc_h109 = _source163.dtor_format2;
          bool _4058_isDatatype = _3905___mcc_h47;
          bool _4059_isConstant = _3904___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _4060_field = _3903___mcc_h45;
          DAST._IExpression _4061_on = _3902___mcc_h44;
          {
            RAST._IExpr _4062_onExpr;
            bool _4063_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4064_recIdents;
            RAST._IExpr _out1197;
            bool _out1198;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1199;
            DCOMP.COMP.GenExpr(_4061_on, selfIdent, @params, false, out _out1197, out _out1198, out _out1199);
            _4062_onExpr = _out1197;
            _4063_onOwned = _out1198;
            _4064_recIdents = _out1199;
            Dafny.ISequence<Dafny.Rune> _4065_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4058_isDatatype) || (_4059_isConstant)) {
              _4065_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4062_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4060_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4059_isConstant) {
                _4065_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4065_s);
              }
              if (mustOwn) {
                _4065_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4065_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4065_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4062_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4060_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4065_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4065_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4065_s);
            readIdents = _4064_recIdents;
          }
        } else if (_source163.is_ArrayLen) {
          DAST._IExpression _4066___mcc_h114 = _source163.dtor_expr;
          BigInteger _4067___mcc_h115 = _source163.dtor_dim;
          bool _4068_isDatatype = _3905___mcc_h47;
          bool _4069_isConstant = _3904___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _4070_field = _3903___mcc_h45;
          DAST._IExpression _4071_on = _3902___mcc_h44;
          {
            RAST._IExpr _4072_onExpr;
            bool _4073_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4074_recIdents;
            RAST._IExpr _out1200;
            bool _out1201;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1202;
            DCOMP.COMP.GenExpr(_4071_on, selfIdent, @params, false, out _out1200, out _out1201, out _out1202);
            _4072_onExpr = _out1200;
            _4073_onOwned = _out1201;
            _4074_recIdents = _out1202;
            Dafny.ISequence<Dafny.Rune> _4075_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4068_isDatatype) || (_4069_isConstant)) {
              _4075_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4072_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4070_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4069_isConstant) {
                _4075_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4075_s);
              }
              if (mustOwn) {
                _4075_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4075_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4075_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4072_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4070_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4075_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4075_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4075_s);
            readIdents = _4074_recIdents;
          }
        } else if (_source163.is_Select) {
          DAST._IExpression _4076___mcc_h118 = _source163.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _4077___mcc_h119 = _source163.dtor_field;
          bool _4078___mcc_h120 = _source163.dtor_isConstant;
          bool _4079___mcc_h121 = _source163.dtor_onDatatype;
          bool _4080_isDatatype = _3905___mcc_h47;
          bool _4081_isConstant = _3904___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _4082_field = _3903___mcc_h45;
          DAST._IExpression _4083_on = _3902___mcc_h44;
          {
            RAST._IExpr _4084_onExpr;
            bool _4085_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4086_recIdents;
            RAST._IExpr _out1203;
            bool _out1204;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1205;
            DCOMP.COMP.GenExpr(_4083_on, selfIdent, @params, false, out _out1203, out _out1204, out _out1205);
            _4084_onExpr = _out1203;
            _4085_onOwned = _out1204;
            _4086_recIdents = _out1205;
            Dafny.ISequence<Dafny.Rune> _4087_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4080_isDatatype) || (_4081_isConstant)) {
              _4087_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4084_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4082_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4081_isConstant) {
                _4087_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4087_s);
              }
              if (mustOwn) {
                _4087_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4087_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4087_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4084_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4082_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4087_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4087_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4087_s);
            readIdents = _4086_recIdents;
          }
        } else if (_source163.is_SelectFn) {
          DAST._IExpression _4088___mcc_h126 = _source163.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _4089___mcc_h127 = _source163.dtor_field;
          bool _4090___mcc_h128 = _source163.dtor_onDatatype;
          bool _4091___mcc_h129 = _source163.dtor_isStatic;
          BigInteger _4092___mcc_h130 = _source163.dtor_arity;
          bool _4093_isDatatype = _3905___mcc_h47;
          bool _4094_isConstant = _3904___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _4095_field = _3903___mcc_h45;
          DAST._IExpression _4096_on = _3902___mcc_h44;
          {
            RAST._IExpr _4097_onExpr;
            bool _4098_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4099_recIdents;
            RAST._IExpr _out1206;
            bool _out1207;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1208;
            DCOMP.COMP.GenExpr(_4096_on, selfIdent, @params, false, out _out1206, out _out1207, out _out1208);
            _4097_onExpr = _out1206;
            _4098_onOwned = _out1207;
            _4099_recIdents = _out1208;
            Dafny.ISequence<Dafny.Rune> _4100_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4093_isDatatype) || (_4094_isConstant)) {
              _4100_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4097_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4095_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4094_isConstant) {
                _4100_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4100_s);
              }
              if (mustOwn) {
                _4100_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4100_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4100_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4097_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4095_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4100_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4100_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4100_s);
            readIdents = _4099_recIdents;
          }
        } else if (_source163.is_Index) {
          DAST._IExpression _4101___mcc_h136 = _source163.dtor_expr;
          DAST._ICollKind _4102___mcc_h137 = _source163.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _4103___mcc_h138 = _source163.dtor_indices;
          bool _4104_isDatatype = _3905___mcc_h47;
          bool _4105_isConstant = _3904___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _4106_field = _3903___mcc_h45;
          DAST._IExpression _4107_on = _3902___mcc_h44;
          {
            RAST._IExpr _4108_onExpr;
            bool _4109_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4110_recIdents;
            RAST._IExpr _out1209;
            bool _out1210;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1211;
            DCOMP.COMP.GenExpr(_4107_on, selfIdent, @params, false, out _out1209, out _out1210, out _out1211);
            _4108_onExpr = _out1209;
            _4109_onOwned = _out1210;
            _4110_recIdents = _out1211;
            Dafny.ISequence<Dafny.Rune> _4111_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4104_isDatatype) || (_4105_isConstant)) {
              _4111_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4108_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4106_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4105_isConstant) {
                _4111_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4111_s);
              }
              if (mustOwn) {
                _4111_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4111_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4111_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4108_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4106_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4111_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4111_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4111_s);
            readIdents = _4110_recIdents;
          }
        } else if (_source163.is_IndexRange) {
          DAST._IExpression _4112___mcc_h142 = _source163.dtor_expr;
          bool _4113___mcc_h143 = _source163.dtor_isArray;
          Std.Wrappers._IOption<DAST._IExpression> _4114___mcc_h144 = _source163.dtor_low;
          Std.Wrappers._IOption<DAST._IExpression> _4115___mcc_h145 = _source163.dtor_high;
          bool _4116_isDatatype = _3905___mcc_h47;
          bool _4117_isConstant = _3904___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _4118_field = _3903___mcc_h45;
          DAST._IExpression _4119_on = _3902___mcc_h44;
          {
            RAST._IExpr _4120_onExpr;
            bool _4121_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4122_recIdents;
            RAST._IExpr _out1212;
            bool _out1213;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1214;
            DCOMP.COMP.GenExpr(_4119_on, selfIdent, @params, false, out _out1212, out _out1213, out _out1214);
            _4120_onExpr = _out1212;
            _4121_onOwned = _out1213;
            _4122_recIdents = _out1214;
            Dafny.ISequence<Dafny.Rune> _4123_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4116_isDatatype) || (_4117_isConstant)) {
              _4123_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4120_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4118_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4117_isConstant) {
                _4123_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4123_s);
              }
              if (mustOwn) {
                _4123_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4123_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4123_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4120_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4118_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4123_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4123_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4123_s);
            readIdents = _4122_recIdents;
          }
        } else if (_source163.is_TupleSelect) {
          DAST._IExpression _4124___mcc_h150 = _source163.dtor_expr;
          BigInteger _4125___mcc_h151 = _source163.dtor_index;
          bool _4126_isDatatype = _3905___mcc_h47;
          bool _4127_isConstant = _3904___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _4128_field = _3903___mcc_h45;
          DAST._IExpression _4129_on = _3902___mcc_h44;
          {
            RAST._IExpr _4130_onExpr;
            bool _4131_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4132_recIdents;
            RAST._IExpr _out1215;
            bool _out1216;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1217;
            DCOMP.COMP.GenExpr(_4129_on, selfIdent, @params, false, out _out1215, out _out1216, out _out1217);
            _4130_onExpr = _out1215;
            _4131_onOwned = _out1216;
            _4132_recIdents = _out1217;
            Dafny.ISequence<Dafny.Rune> _4133_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4126_isDatatype) || (_4127_isConstant)) {
              _4133_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4130_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4128_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4127_isConstant) {
                _4133_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4133_s);
              }
              if (mustOwn) {
                _4133_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4133_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4133_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4130_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4128_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4133_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4133_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4133_s);
            readIdents = _4132_recIdents;
          }
        } else if (_source163.is_Call) {
          DAST._IExpression _4134___mcc_h154 = _source163.dtor_on;
          Dafny.ISequence<Dafny.Rune> _4135___mcc_h155 = _source163.dtor_name;
          Dafny.ISequence<DAST._IType> _4136___mcc_h156 = _source163.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _4137___mcc_h157 = _source163.dtor_args;
          bool _4138_isDatatype = _3905___mcc_h47;
          bool _4139_isConstant = _3904___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _4140_field = _3903___mcc_h45;
          DAST._IExpression _4141_on = _3902___mcc_h44;
          {
            RAST._IExpr _4142_onExpr;
            bool _4143_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4144_recIdents;
            RAST._IExpr _out1218;
            bool _out1219;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1220;
            DCOMP.COMP.GenExpr(_4141_on, selfIdent, @params, false, out _out1218, out _out1219, out _out1220);
            _4142_onExpr = _out1218;
            _4143_onOwned = _out1219;
            _4144_recIdents = _out1220;
            Dafny.ISequence<Dafny.Rune> _4145_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4138_isDatatype) || (_4139_isConstant)) {
              _4145_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4142_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4140_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4139_isConstant) {
                _4145_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4145_s);
              }
              if (mustOwn) {
                _4145_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4145_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4145_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4142_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4140_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4145_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4145_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4145_s);
            readIdents = _4144_recIdents;
          }
        } else if (_source163.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _4146___mcc_h162 = _source163.dtor_params;
          DAST._IType _4147___mcc_h163 = _source163.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _4148___mcc_h164 = _source163.dtor_body;
          bool _4149_isDatatype = _3905___mcc_h47;
          bool _4150_isConstant = _3904___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _4151_field = _3903___mcc_h45;
          DAST._IExpression _4152_on = _3902___mcc_h44;
          {
            RAST._IExpr _4153_onExpr;
            bool _4154_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4155_recIdents;
            RAST._IExpr _out1221;
            bool _out1222;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1223;
            DCOMP.COMP.GenExpr(_4152_on, selfIdent, @params, false, out _out1221, out _out1222, out _out1223);
            _4153_onExpr = _out1221;
            _4154_onOwned = _out1222;
            _4155_recIdents = _out1223;
            Dafny.ISequence<Dafny.Rune> _4156_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4149_isDatatype) || (_4150_isConstant)) {
              _4156_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4153_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4151_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4150_isConstant) {
                _4156_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4156_s);
              }
              if (mustOwn) {
                _4156_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4156_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4156_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4153_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4151_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4156_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4156_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4156_s);
            readIdents = _4155_recIdents;
          }
        } else if (_source163.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _4157___mcc_h168 = _source163.dtor_values;
          DAST._IType _4158___mcc_h169 = _source163.dtor_retType;
          DAST._IExpression _4159___mcc_h170 = _source163.dtor_expr;
          bool _4160_isDatatype = _3905___mcc_h47;
          bool _4161_isConstant = _3904___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _4162_field = _3903___mcc_h45;
          DAST._IExpression _4163_on = _3902___mcc_h44;
          {
            RAST._IExpr _4164_onExpr;
            bool _4165_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4166_recIdents;
            RAST._IExpr _out1224;
            bool _out1225;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1226;
            DCOMP.COMP.GenExpr(_4163_on, selfIdent, @params, false, out _out1224, out _out1225, out _out1226);
            _4164_onExpr = _out1224;
            _4165_onOwned = _out1225;
            _4166_recIdents = _out1226;
            Dafny.ISequence<Dafny.Rune> _4167_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4160_isDatatype) || (_4161_isConstant)) {
              _4167_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4164_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4162_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4161_isConstant) {
                _4167_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4167_s);
              }
              if (mustOwn) {
                _4167_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4167_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4167_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4164_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4162_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4167_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4167_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4167_s);
            readIdents = _4166_recIdents;
          }
        } else if (_source163.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _4168___mcc_h174 = _source163.dtor_name;
          DAST._IType _4169___mcc_h175 = _source163.dtor_typ;
          DAST._IExpression _4170___mcc_h176 = _source163.dtor_value;
          DAST._IExpression _4171___mcc_h177 = _source163.dtor_iifeBody;
          bool _4172_isDatatype = _3905___mcc_h47;
          bool _4173_isConstant = _3904___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _4174_field = _3903___mcc_h45;
          DAST._IExpression _4175_on = _3902___mcc_h44;
          {
            RAST._IExpr _4176_onExpr;
            bool _4177_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4178_recIdents;
            RAST._IExpr _out1227;
            bool _out1228;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1229;
            DCOMP.COMP.GenExpr(_4175_on, selfIdent, @params, false, out _out1227, out _out1228, out _out1229);
            _4176_onExpr = _out1227;
            _4177_onOwned = _out1228;
            _4178_recIdents = _out1229;
            Dafny.ISequence<Dafny.Rune> _4179_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4172_isDatatype) || (_4173_isConstant)) {
              _4179_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4176_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4174_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4173_isConstant) {
                _4179_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4179_s);
              }
              if (mustOwn) {
                _4179_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4179_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4179_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4176_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4174_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4179_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4179_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4179_s);
            readIdents = _4178_recIdents;
          }
        } else if (_source163.is_Apply) {
          DAST._IExpression _4180___mcc_h182 = _source163.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _4181___mcc_h183 = _source163.dtor_args;
          bool _4182_isDatatype = _3905___mcc_h47;
          bool _4183_isConstant = _3904___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _4184_field = _3903___mcc_h45;
          DAST._IExpression _4185_on = _3902___mcc_h44;
          {
            RAST._IExpr _4186_onExpr;
            bool _4187_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4188_recIdents;
            RAST._IExpr _out1230;
            bool _out1231;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1232;
            DCOMP.COMP.GenExpr(_4185_on, selfIdent, @params, false, out _out1230, out _out1231, out _out1232);
            _4186_onExpr = _out1230;
            _4187_onOwned = _out1231;
            _4188_recIdents = _out1232;
            Dafny.ISequence<Dafny.Rune> _4189_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4182_isDatatype) || (_4183_isConstant)) {
              _4189_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4186_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4184_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4183_isConstant) {
                _4189_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4189_s);
              }
              if (mustOwn) {
                _4189_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4189_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4189_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4186_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4184_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4189_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4189_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4189_s);
            readIdents = _4188_recIdents;
          }
        } else if (_source163.is_TypeTest) {
          DAST._IExpression _4190___mcc_h186 = _source163.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4191___mcc_h187 = _source163.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _4192___mcc_h188 = _source163.dtor_variant;
          bool _4193_isDatatype = _3905___mcc_h47;
          bool _4194_isConstant = _3904___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _4195_field = _3903___mcc_h45;
          DAST._IExpression _4196_on = _3902___mcc_h44;
          {
            RAST._IExpr _4197_onExpr;
            bool _4198_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4199_recIdents;
            RAST._IExpr _out1233;
            bool _out1234;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1235;
            DCOMP.COMP.GenExpr(_4196_on, selfIdent, @params, false, out _out1233, out _out1234, out _out1235);
            _4197_onExpr = _out1233;
            _4198_onOwned = _out1234;
            _4199_recIdents = _out1235;
            Dafny.ISequence<Dafny.Rune> _4200_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4193_isDatatype) || (_4194_isConstant)) {
              _4200_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4197_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4195_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4194_isConstant) {
                _4200_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4200_s);
              }
              if (mustOwn) {
                _4200_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4200_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4200_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4197_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4195_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4200_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4200_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4200_s);
            readIdents = _4199_recIdents;
          }
        } else if (_source163.is_InitializationValue) {
          DAST._IType _4201___mcc_h192 = _source163.dtor_typ;
          bool _4202_isDatatype = _3905___mcc_h47;
          bool _4203_isConstant = _3904___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _4204_field = _3903___mcc_h45;
          DAST._IExpression _4205_on = _3902___mcc_h44;
          {
            RAST._IExpr _4206_onExpr;
            bool _4207_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4208_recIdents;
            RAST._IExpr _out1236;
            bool _out1237;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1238;
            DCOMP.COMP.GenExpr(_4205_on, selfIdent, @params, false, out _out1236, out _out1237, out _out1238);
            _4206_onExpr = _out1236;
            _4207_onOwned = _out1237;
            _4208_recIdents = _out1238;
            Dafny.ISequence<Dafny.Rune> _4209_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4202_isDatatype) || (_4203_isConstant)) {
              _4209_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4206_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4204_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4203_isConstant) {
                _4209_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4209_s);
              }
              if (mustOwn) {
                _4209_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4209_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4209_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4206_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4204_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4209_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4209_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4209_s);
            readIdents = _4208_recIdents;
          }
        } else if (_source163.is_BoolBoundedPool) {
          bool _4210_isDatatype = _3905___mcc_h47;
          bool _4211_isConstant = _3904___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _4212_field = _3903___mcc_h45;
          DAST._IExpression _4213_on = _3902___mcc_h44;
          {
            RAST._IExpr _4214_onExpr;
            bool _4215_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4216_recIdents;
            RAST._IExpr _out1239;
            bool _out1240;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1241;
            DCOMP.COMP.GenExpr(_4213_on, selfIdent, @params, false, out _out1239, out _out1240, out _out1241);
            _4214_onExpr = _out1239;
            _4215_onOwned = _out1240;
            _4216_recIdents = _out1241;
            Dafny.ISequence<Dafny.Rune> _4217_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4210_isDatatype) || (_4211_isConstant)) {
              _4217_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4214_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4212_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4211_isConstant) {
                _4217_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4217_s);
              }
              if (mustOwn) {
                _4217_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4217_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4217_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4214_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4212_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4217_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4217_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4217_s);
            readIdents = _4216_recIdents;
          }
        } else if (_source163.is_SetBoundedPool) {
          DAST._IExpression _4218___mcc_h194 = _source163.dtor_of;
          bool _4219_isDatatype = _3905___mcc_h47;
          bool _4220_isConstant = _3904___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _4221_field = _3903___mcc_h45;
          DAST._IExpression _4222_on = _3902___mcc_h44;
          {
            RAST._IExpr _4223_onExpr;
            bool _4224_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4225_recIdents;
            RAST._IExpr _out1242;
            bool _out1243;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1244;
            DCOMP.COMP.GenExpr(_4222_on, selfIdent, @params, false, out _out1242, out _out1243, out _out1244);
            _4223_onExpr = _out1242;
            _4224_onOwned = _out1243;
            _4225_recIdents = _out1244;
            Dafny.ISequence<Dafny.Rune> _4226_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4219_isDatatype) || (_4220_isConstant)) {
              _4226_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4223_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4221_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4220_isConstant) {
                _4226_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4226_s);
              }
              if (mustOwn) {
                _4226_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4226_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4226_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4223_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4221_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4226_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4226_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4226_s);
            readIdents = _4225_recIdents;
          }
        } else if (_source163.is_SeqBoundedPool) {
          DAST._IExpression _4227___mcc_h196 = _source163.dtor_of;
          bool _4228___mcc_h197 = _source163.dtor_includeDuplicates;
          bool _4229_isDatatype = _3905___mcc_h47;
          bool _4230_isConstant = _3904___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _4231_field = _3903___mcc_h45;
          DAST._IExpression _4232_on = _3902___mcc_h44;
          {
            RAST._IExpr _4233_onExpr;
            bool _4234_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4235_recIdents;
            RAST._IExpr _out1245;
            bool _out1246;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1247;
            DCOMP.COMP.GenExpr(_4232_on, selfIdent, @params, false, out _out1245, out _out1246, out _out1247);
            _4233_onExpr = _out1245;
            _4234_onOwned = _out1246;
            _4235_recIdents = _out1247;
            Dafny.ISequence<Dafny.Rune> _4236_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4229_isDatatype) || (_4230_isConstant)) {
              _4236_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4233_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4231_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4230_isConstant) {
                _4236_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4236_s);
              }
              if (mustOwn) {
                _4236_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4236_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4236_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4233_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4231_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4236_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4236_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4236_s);
            readIdents = _4235_recIdents;
          }
        } else {
          DAST._IExpression _4237___mcc_h200 = _source163.dtor_lo;
          DAST._IExpression _4238___mcc_h201 = _source163.dtor_hi;
          bool _4239_isDatatype = _3905___mcc_h47;
          bool _4240_isConstant = _3904___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _4241_field = _3903___mcc_h45;
          DAST._IExpression _4242_on = _3902___mcc_h44;
          {
            RAST._IExpr _4243_onExpr;
            bool _4244_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4245_recIdents;
            RAST._IExpr _out1248;
            bool _out1249;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1250;
            DCOMP.COMP.GenExpr(_4242_on, selfIdent, @params, false, out _out1248, out _out1249, out _out1250);
            _4243_onExpr = _out1248;
            _4244_onOwned = _out1249;
            _4245_recIdents = _out1250;
            Dafny.ISequence<Dafny.Rune> _4246_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4239_isDatatype) || (_4240_isConstant)) {
              _4246_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4243_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4241_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4240_isConstant) {
                _4246_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4246_s);
              }
              if (mustOwn) {
                _4246_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4246_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4246_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4243_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4241_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4246_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4246_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4246_s);
            readIdents = _4245_recIdents;
          }
        }
      } else if (_source76.is_SelectFn) {
        DAST._IExpression _4247___mcc_h204 = _source76.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _4248___mcc_h205 = _source76.dtor_field;
        bool _4249___mcc_h206 = _source76.dtor_onDatatype;
        bool _4250___mcc_h207 = _source76.dtor_isStatic;
        BigInteger _4251___mcc_h208 = _source76.dtor_arity;
        BigInteger _4252_arity = _4251___mcc_h208;
        bool _4253_isStatic = _4250___mcc_h207;
        bool _4254_isDatatype = _4249___mcc_h206;
        Dafny.ISequence<Dafny.Rune> _4255_field = _4248___mcc_h205;
        DAST._IExpression _4256_on = _4247___mcc_h204;
        {
          RAST._IExpr _4257_onExpr;
          bool _4258_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4259_recIdents;
          RAST._IExpr _out1251;
          bool _out1252;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1253;
          DCOMP.COMP.GenExpr(_4256_on, selfIdent, @params, false, out _out1251, out _out1252, out _out1253);
          _4257_onExpr = _out1251;
          _4258_onOwned = _out1252;
          _4259_recIdents = _out1253;
          Dafny.ISequence<Dafny.Rune> _4260_s = Dafny.Sequence<Dafny.Rune>.Empty;
          Dafny.ISequence<Dafny.Rune> _4261_onString;
          _4261_onString = (_4257_onExpr)._ToString(DCOMP.__default.IND);
          if (_4253_isStatic) {
            _4260_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4261_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_4255_field));
          } else {
            _4260_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            _4260_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4260_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _4261_onString), ((_4258_onOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _4262_args;
            _4262_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _4263_i;
            _4263_i = BigInteger.Zero;
            while ((_4263_i) < (_4252_arity)) {
              if ((_4263_i).Sign == 1) {
                _4262_args = Dafny.Sequence<Dafny.Rune>.Concat(_4262_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _4262_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4262_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), Std.Strings.__default.OfNat(_4263_i));
              _4263_i = (_4263_i) + (BigInteger.One);
            }
            _4260_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4260_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _4262_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            _4260_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4260_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), _4255_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _4262_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            _4260_s = Dafny.Sequence<Dafny.Rune>.Concat(_4260_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            _4260_s = Dafny.Sequence<Dafny.Rune>.Concat(_4260_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _4264_typeShape;
          _4264_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _4265_i;
          _4265_i = BigInteger.Zero;
          while ((_4265_i) < (_4252_arity)) {
            if ((_4265_i).Sign == 1) {
              _4264_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_4264_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _4264_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_4264_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _4265_i = (_4265_i) + (BigInteger.One);
          }
          _4264_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_4264_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          _4260_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper(::std::rc::Rc::new("), _4260_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _4264_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          r = RAST.Expr.create_RawExpr(_4260_s);
          isOwned = true;
          readIdents = _4259_recIdents;
        }
      } else if (_source76.is_Index) {
        DAST._IExpression _4266___mcc_h209 = _source76.dtor_expr;
        DAST._ICollKind _4267___mcc_h210 = _source76.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _4268___mcc_h211 = _source76.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _4269_indices = _4268___mcc_h211;
        DAST._ICollKind _4270_collKind = _4267___mcc_h210;
        DAST._IExpression _4271_on = _4266___mcc_h209;
        {
          RAST._IExpr _4272_onExpr;
          bool _4273_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4274_recIdents;
          RAST._IExpr _out1254;
          bool _out1255;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1256;
          DCOMP.COMP.GenExpr(_4271_on, selfIdent, @params, false, out _out1254, out _out1255, out _out1256);
          _4272_onExpr = _out1254;
          _4273_onOwned = _out1255;
          _4274_recIdents = _out1256;
          readIdents = _4274_recIdents;
          Dafny.ISequence<Dafny.Rune> _4275_s;
          _4275_s = (_4272_onExpr)._ToString(DCOMP.__default.IND);
          BigInteger _4276_i;
          _4276_i = BigInteger.Zero;
          while ((_4276_i) < (new BigInteger((_4269_indices).Count))) {
            if (object.Equals(_4270_collKind, DAST.CollKind.create_Array())) {
              _4275_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4275_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
            }
            if (object.Equals(_4270_collKind, DAST.CollKind.create_Map())) {
              RAST._IExpr _4277_idx;
              bool _4278_idxOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4279_recIdentsIdx;
              RAST._IExpr _out1257;
              bool _out1258;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1259;
              DCOMP.COMP.GenExpr((_4269_indices).Select(_4276_i), selfIdent, @params, false, out _out1257, out _out1258, out _out1259);
              _4277_idx = _out1257;
              _4278_idxOwned = _out1258;
              _4279_recIdentsIdx = _out1259;
              _4275_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4275_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[")), ((_4278_idxOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), (_4277_idx)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4279_recIdentsIdx);
            } else {
              RAST._IExpr _4280_idx;
              bool _4281___v78;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4282_recIdentsIdx;
              RAST._IExpr _out1260;
              bool _out1261;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1262;
              DCOMP.COMP.GenExpr((_4269_indices).Select(_4276_i), selfIdent, @params, true, out _out1260, out _out1261, out _out1262);
              _4280_idx = _out1260;
              _4281___v78 = _out1261;
              _4282_recIdentsIdx = _out1262;
              _4275_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4275_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[<usize as ::dafny_runtime::NumCast>::from(")), (_4280_idx)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4282_recIdentsIdx);
            }
            _4276_i = (_4276_i) + (BigInteger.One);
          }
          if (mustOwn) {
            _4275_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4275_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
            isOwned = true;
          } else {
            _4275_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), _4275_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = false;
          }
          r = RAST.Expr.create_RawExpr(_4275_s);
        }
      } else if (_source76.is_IndexRange) {
        DAST._IExpression _4283___mcc_h212 = _source76.dtor_expr;
        bool _4284___mcc_h213 = _source76.dtor_isArray;
        Std.Wrappers._IOption<DAST._IExpression> _4285___mcc_h214 = _source76.dtor_low;
        Std.Wrappers._IOption<DAST._IExpression> _4286___mcc_h215 = _source76.dtor_high;
        Std.Wrappers._IOption<DAST._IExpression> _4287_high = _4286___mcc_h215;
        Std.Wrappers._IOption<DAST._IExpression> _4288_low = _4285___mcc_h214;
        bool _4289_isArray = _4284___mcc_h213;
        DAST._IExpression _4290_on = _4283___mcc_h212;
        {
          RAST._IExpr _4291_onExpr;
          bool _4292_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4293_recIdents;
          RAST._IExpr _out1263;
          bool _out1264;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1265;
          DCOMP.COMP.GenExpr(_4290_on, selfIdent, @params, false, out _out1263, out _out1264, out _out1265);
          _4291_onExpr = _out1263;
          _4292_onOwned = _out1264;
          _4293_recIdents = _out1265;
          readIdents = _4293_recIdents;
          Dafny.ISequence<Dafny.Rune> _4294_s;
          _4294_s = (_4291_onExpr)._ToString(DCOMP.__default.IND);
          Std.Wrappers._IOption<RAST._IExpr> _4295_lowString;
          _4295_lowString = Std.Wrappers.Option<RAST._IExpr>.create_None();
          Std.Wrappers._IOption<DAST._IExpression> _source164 = _4288_low;
          if (_source164.is_None) {
          } else {
            DAST._IExpression _4296___mcc_h1314 = _source164.dtor_value;
            DAST._IExpression _4297_l = _4296___mcc_h1314;
            {
              RAST._IExpr _4298_lString;
              bool _4299___v79;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4300_recIdentsL;
              RAST._IExpr _out1266;
              bool _out1267;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1268;
              DCOMP.COMP.GenExpr(_4297_l, selfIdent, @params, true, out _out1266, out _out1267, out _out1268);
              _4298_lString = _out1266;
              _4299___v79 = _out1267;
              _4300_recIdentsL = _out1268;
              _4295_lowString = Std.Wrappers.Option<RAST._IExpr>.create_Some(_4298_lString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4300_recIdentsL);
            }
          }
          Std.Wrappers._IOption<RAST._IExpr> _4301_highString;
          _4301_highString = Std.Wrappers.Option<RAST._IExpr>.create_None();
          Std.Wrappers._IOption<DAST._IExpression> _source165 = _4287_high;
          if (_source165.is_None) {
          } else {
            DAST._IExpression _4302___mcc_h1315 = _source165.dtor_value;
            DAST._IExpression _4303_h = _4302___mcc_h1315;
            {
              RAST._IExpr _4304_hString;
              bool _4305___v80;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4306_recIdentsH;
              RAST._IExpr _out1269;
              bool _out1270;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1271;
              DCOMP.COMP.GenExpr(_4303_h, selfIdent, @params, true, out _out1269, out _out1270, out _out1271);
              _4304_hString = _out1269;
              _4305___v80 = _out1270;
              _4306_recIdentsH = _out1271;
              _4301_highString = Std.Wrappers.Option<RAST._IExpr>.create_Some(_4304_hString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4306_recIdentsH);
            }
          }
          if (_4289_isArray) {
            _4294_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4294_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
          }
          _4294_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4294_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[")), ((System.Func<Std.Wrappers._IOption<RAST._IExpr>, Dafny.ISequence<Dafny.Rune>>)((_source166) => {
            if (_source166.is_None) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            } else {
              RAST._IExpr _4307___mcc_h1316 = _source166.dtor_value;
              RAST._IExpr _4308_l = _4307___mcc_h1316;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), (_4308_l)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            }
          }))(_4295_lowString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("..")), ((System.Func<Std.Wrappers._IOption<RAST._IExpr>, Dafny.ISequence<Dafny.Rune>>)((_source167) => {
            if (_source167.is_None) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            } else {
              RAST._IExpr _4309___mcc_h1317 = _source167.dtor_value;
              RAST._IExpr _4310_h = _4309___mcc_h1317;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), (_4310_h)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            }
          }))(_4301_highString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
          _4294_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4294_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".to_vec())"));
          r = RAST.Expr.create_RawExpr(_4294_s);
          isOwned = true;
        }
      } else if (_source76.is_TupleSelect) {
        DAST._IExpression _4311___mcc_h216 = _source76.dtor_expr;
        BigInteger _4312___mcc_h217 = _source76.dtor_index;
        BigInteger _4313_idx = _4312___mcc_h217;
        DAST._IExpression _4314_on = _4311___mcc_h216;
        {
          RAST._IExpr _4315_onExpr;
          bool _4316___v81;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4317_recIdents;
          RAST._IExpr _out1272;
          bool _out1273;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1274;
          DCOMP.COMP.GenExpr(_4314_on, selfIdent, @params, false, out _out1272, out _out1273, out _out1274);
          _4315_onExpr = _out1272;
          _4316___v81 = _out1273;
          _4317_recIdents = _out1274;
          Dafny.ISequence<Dafny.Rune> _4318_s;
          _4318_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4315_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), Std.Strings.__default.OfNat(_4313_idx));
          if (mustOwn) {
            _4318_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4318_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            _4318_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4318_s);
            isOwned = false;
          }
          r = RAST.Expr.create_RawExpr(_4318_s);
          readIdents = _4317_recIdents;
        }
      } else if (_source76.is_Call) {
        DAST._IExpression _4319___mcc_h218 = _source76.dtor_on;
        Dafny.ISequence<Dafny.Rune> _4320___mcc_h219 = _source76.dtor_name;
        Dafny.ISequence<DAST._IType> _4321___mcc_h220 = _source76.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _4322___mcc_h221 = _source76.dtor_args;
        Dafny.ISequence<DAST._IExpression> _4323_args = _4322___mcc_h221;
        Dafny.ISequence<DAST._IType> _4324_typeArgs = _4321___mcc_h220;
        Dafny.ISequence<Dafny.Rune> _4325_name = _4320___mcc_h219;
        DAST._IExpression _4326_on = _4319___mcc_h218;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IType> _4327_typeExprs;
          _4327_typeExprs = Dafny.Sequence<RAST._IType>.FromElements();
          if ((new BigInteger((_4324_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _4328_typeI;
            _4328_typeI = BigInteger.Zero;
            while ((_4328_typeI) < (new BigInteger((_4324_typeArgs).Count))) {
              RAST._IType _4329_typeExpr;
              RAST._IType _out1275;
              _out1275 = DCOMP.COMP.GenType((_4324_typeArgs).Select(_4328_typeI), false, false);
              _4329_typeExpr = _out1275;
              _4327_typeExprs = Dafny.Sequence<RAST._IType>.Concat(_4327_typeExprs, Dafny.Sequence<RAST._IType>.FromElements(_4329_typeExpr));
              _4328_typeI = (_4328_typeI) + (BigInteger.One);
            }
          }
          Dafny.ISequence<RAST._IExpr> _4330_argExprs;
          _4330_argExprs = Dafny.Sequence<RAST._IExpr>.FromElements();
          BigInteger _4331_i;
          _4331_i = BigInteger.Zero;
          while ((_4331_i) < (new BigInteger((_4323_args).Count))) {
            RAST._IExpr _4332_argExpr;
            bool _4333_isOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4334_argIdents;
            RAST._IExpr _out1276;
            bool _out1277;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1278;
            DCOMP.COMP.GenExpr((_4323_args).Select(_4331_i), selfIdent, @params, false, out _out1276, out _out1277, out _out1278);
            _4332_argExpr = _out1276;
            _4333_isOwned = _out1277;
            _4334_argIdents = _out1278;
            if (_4333_isOwned) {
              _4332_argExpr = RAST.Expr.create_Borrow(_4332_argExpr);
            }
            _4330_argExprs = Dafny.Sequence<RAST._IExpr>.Concat(_4330_argExprs, Dafny.Sequence<RAST._IExpr>.FromElements(_4332_argExpr));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4334_argIdents);
            _4331_i = (_4331_i) + (BigInteger.One);
          }
          RAST._IExpr _4335_enclosingExpr;
          bool _4336___v82;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4337_recIdents;
          RAST._IExpr _out1279;
          bool _out1280;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1281;
          DCOMP.COMP.GenExpr(_4326_on, selfIdent, @params, false, out _out1279, out _out1280, out _out1281);
          _4335_enclosingExpr = _out1279;
          _4336___v82 = _out1280;
          _4337_recIdents = _out1281;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4337_recIdents);
          Dafny.ISequence<Dafny.Rune> _4338_enclosingString;
          _4338_enclosingString = (_4335_enclosingExpr)._ToString(DCOMP.__default.IND);
          DAST._IExpression _source168 = _4326_on;
          if (_source168.is_Literal) {
            DAST._ILiteral _4339___mcc_h1318 = _source168.dtor_Literal_a0;
            {
              _4338_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4338_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4325_name)));
            }
          } else if (_source168.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _4340___mcc_h1320 = _source168.dtor_Ident_a0;
            {
              _4338_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4338_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4325_name)));
            }
          } else if (_source168.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4341___mcc_h1322 = _source168.dtor_Companion_a0;
            {
              _4338_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4338_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_4325_name)));
            }
          } else if (_source168.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _4342___mcc_h1324 = _source168.dtor_Tuple_a0;
            {
              _4338_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4338_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4325_name)));
            }
          } else if (_source168.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4343___mcc_h1326 = _source168.dtor_path;
            Dafny.ISequence<DAST._IType> _4344___mcc_h1327 = _source168.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _4345___mcc_h1328 = _source168.dtor_args;
            {
              _4338_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4338_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4325_name)));
            }
          } else if (_source168.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _4346___mcc_h1332 = _source168.dtor_dims;
            DAST._IType _4347___mcc_h1333 = _source168.dtor_typ;
            {
              _4338_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4338_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4325_name)));
            }
          } else if (_source168.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4348___mcc_h1336 = _source168.dtor_path;
            Dafny.ISequence<DAST._IType> _4349___mcc_h1337 = _source168.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _4350___mcc_h1338 = _source168.dtor_variant;
            bool _4351___mcc_h1339 = _source168.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _4352___mcc_h1340 = _source168.dtor_contents;
            {
              _4338_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4338_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4325_name)));
            }
          } else if (_source168.is_Convert) {
            DAST._IExpression _4353___mcc_h1346 = _source168.dtor_value;
            DAST._IType _4354___mcc_h1347 = _source168.dtor_from;
            DAST._IType _4355___mcc_h1348 = _source168.dtor_typ;
            {
              _4338_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4338_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4325_name)));
            }
          } else if (_source168.is_SeqConstruct) {
            DAST._IExpression _4356___mcc_h1352 = _source168.dtor_length;
            DAST._IExpression _4357___mcc_h1353 = _source168.dtor_elem;
            {
              _4338_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4338_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4325_name)));
            }
          } else if (_source168.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _4358___mcc_h1356 = _source168.dtor_elements;
            DAST._IType _4359___mcc_h1357 = _source168.dtor_typ;
            {
              _4338_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4338_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4325_name)));
            }
          } else if (_source168.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _4360___mcc_h1360 = _source168.dtor_elements;
            {
              _4338_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4338_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4325_name)));
            }
          } else if (_source168.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _4361___mcc_h1362 = _source168.dtor_mapElems;
            {
              _4338_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4338_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4325_name)));
            }
          } else if (_source168.is_This) {
            {
              _4338_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4338_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4325_name)));
            }
          } else if (_source168.is_Ite) {
            DAST._IExpression _4362___mcc_h1364 = _source168.dtor_cond;
            DAST._IExpression _4363___mcc_h1365 = _source168.dtor_thn;
            DAST._IExpression _4364___mcc_h1366 = _source168.dtor_els;
            {
              _4338_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4338_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4325_name)));
            }
          } else if (_source168.is_UnOp) {
            DAST._IUnaryOp _4365___mcc_h1370 = _source168.dtor_unOp;
            DAST._IExpression _4366___mcc_h1371 = _source168.dtor_expr;
            DAST.Format._IUnOpFormat _4367___mcc_h1372 = _source168.dtor_format1;
            {
              _4338_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4338_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4325_name)));
            }
          } else if (_source168.is_BinOp) {
            DAST._IBinOp _4368___mcc_h1376 = _source168.dtor_op;
            DAST._IExpression _4369___mcc_h1377 = _source168.dtor_left;
            DAST._IExpression _4370___mcc_h1378 = _source168.dtor_right;
            DAST.Format._IBinOpFormat _4371___mcc_h1379 = _source168.dtor_format2;
            {
              _4338_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4338_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4325_name)));
            }
          } else if (_source168.is_ArrayLen) {
            DAST._IExpression _4372___mcc_h1384 = _source168.dtor_expr;
            BigInteger _4373___mcc_h1385 = _source168.dtor_dim;
            {
              _4338_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4338_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4325_name)));
            }
          } else if (_source168.is_Select) {
            DAST._IExpression _4374___mcc_h1388 = _source168.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _4375___mcc_h1389 = _source168.dtor_field;
            bool _4376___mcc_h1390 = _source168.dtor_isConstant;
            bool _4377___mcc_h1391 = _source168.dtor_onDatatype;
            {
              _4338_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4338_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4325_name)));
            }
          } else if (_source168.is_SelectFn) {
            DAST._IExpression _4378___mcc_h1396 = _source168.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _4379___mcc_h1397 = _source168.dtor_field;
            bool _4380___mcc_h1398 = _source168.dtor_onDatatype;
            bool _4381___mcc_h1399 = _source168.dtor_isStatic;
            BigInteger _4382___mcc_h1400 = _source168.dtor_arity;
            {
              _4338_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4338_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4325_name)));
            }
          } else if (_source168.is_Index) {
            DAST._IExpression _4383___mcc_h1406 = _source168.dtor_expr;
            DAST._ICollKind _4384___mcc_h1407 = _source168.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _4385___mcc_h1408 = _source168.dtor_indices;
            {
              _4338_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4338_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4325_name)));
            }
          } else if (_source168.is_IndexRange) {
            DAST._IExpression _4386___mcc_h1412 = _source168.dtor_expr;
            bool _4387___mcc_h1413 = _source168.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _4388___mcc_h1414 = _source168.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _4389___mcc_h1415 = _source168.dtor_high;
            {
              _4338_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4338_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4325_name)));
            }
          } else if (_source168.is_TupleSelect) {
            DAST._IExpression _4390___mcc_h1420 = _source168.dtor_expr;
            BigInteger _4391___mcc_h1421 = _source168.dtor_index;
            {
              _4338_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4338_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4325_name)));
            }
          } else if (_source168.is_Call) {
            DAST._IExpression _4392___mcc_h1424 = _source168.dtor_on;
            Dafny.ISequence<Dafny.Rune> _4393___mcc_h1425 = _source168.dtor_name;
            Dafny.ISequence<DAST._IType> _4394___mcc_h1426 = _source168.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _4395___mcc_h1427 = _source168.dtor_args;
            {
              _4338_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4338_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4325_name)));
            }
          } else if (_source168.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _4396___mcc_h1432 = _source168.dtor_params;
            DAST._IType _4397___mcc_h1433 = _source168.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _4398___mcc_h1434 = _source168.dtor_body;
            {
              _4338_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4338_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4325_name)));
            }
          } else if (_source168.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _4399___mcc_h1438 = _source168.dtor_values;
            DAST._IType _4400___mcc_h1439 = _source168.dtor_retType;
            DAST._IExpression _4401___mcc_h1440 = _source168.dtor_expr;
            {
              _4338_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4338_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4325_name)));
            }
          } else if (_source168.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _4402___mcc_h1444 = _source168.dtor_name;
            DAST._IType _4403___mcc_h1445 = _source168.dtor_typ;
            DAST._IExpression _4404___mcc_h1446 = _source168.dtor_value;
            DAST._IExpression _4405___mcc_h1447 = _source168.dtor_iifeBody;
            {
              _4338_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4338_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4325_name)));
            }
          } else if (_source168.is_Apply) {
            DAST._IExpression _4406___mcc_h1452 = _source168.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _4407___mcc_h1453 = _source168.dtor_args;
            {
              _4338_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4338_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4325_name)));
            }
          } else if (_source168.is_TypeTest) {
            DAST._IExpression _4408___mcc_h1456 = _source168.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4409___mcc_h1457 = _source168.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _4410___mcc_h1458 = _source168.dtor_variant;
            {
              _4338_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4338_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4325_name)));
            }
          } else if (_source168.is_InitializationValue) {
            DAST._IType _4411___mcc_h1462 = _source168.dtor_typ;
            {
              _4338_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4338_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4325_name)));
            }
          } else if (_source168.is_BoolBoundedPool) {
            {
              _4338_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4338_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4325_name)));
            }
          } else if (_source168.is_SetBoundedPool) {
            DAST._IExpression _4412___mcc_h1464 = _source168.dtor_of;
            {
              _4338_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4338_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4325_name)));
            }
          } else if (_source168.is_SeqBoundedPool) {
            DAST._IExpression _4413___mcc_h1466 = _source168.dtor_of;
            bool _4414___mcc_h1467 = _source168.dtor_includeDuplicates;
            {
              _4338_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4338_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4325_name)));
            }
          } else {
            DAST._IExpression _4415___mcc_h1470 = _source168.dtor_lo;
            DAST._IExpression _4416___mcc_h1471 = _source168.dtor_hi;
            {
              _4338_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4338_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4325_name)));
            }
          }
          r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(_4338_enclosingString), _4327_typeExprs, _4330_argExprs);
          isOwned = true;
        }
      } else if (_source76.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _4417___mcc_h222 = _source76.dtor_params;
        DAST._IType _4418___mcc_h223 = _source76.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _4419___mcc_h224 = _source76.dtor_body;
        Dafny.ISequence<DAST._IStatement> _4420_body = _4419___mcc_h224;
        DAST._IType _4421_retType = _4418___mcc_h223;
        Dafny.ISequence<DAST._IFormal> _4422_params = _4417___mcc_h222;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4423_paramNames;
          _4423_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _4424_i;
          _4424_i = BigInteger.Zero;
          while ((_4424_i) < (new BigInteger((_4422_params).Count))) {
            _4423_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_4423_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(((_4422_params).Select(_4424_i)).dtor_name));
            _4424_i = (_4424_i) + (BigInteger.One);
          }
          RAST._IExpr _4425_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4426_recIdents;
          RAST._IExpr _out1282;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1283;
          DCOMP.COMP.GenStmts(_4420_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), _4423_paramNames, true, RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")), out _out1282, out _out1283);
          _4425_recursiveGen = _out1282;
          _4426_recIdents = _out1283;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _4427_allReadCloned;
          _4427_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          while (!(_4426_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _4428_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_3 in (_4426_recIdents).Elements) {
              _4428_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_3;
              if ((_4426_recIdents).Contains(_4428_next)) {
                goto after__ASSIGN_SUCH_THAT_3;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 2704)");
          after__ASSIGN_SUCH_THAT_3:;
            if ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) && ((_4428_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
                _4427_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(_4427_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let _this = self.clone();\n"));
              }
            } else if (!((_4423_paramNames).Contains(_4428_next))) {
              _4427_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4427_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_4428_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_4428_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_4428_next));
            }
            _4426_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_4426_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_4428_next));
          }
          Dafny.ISequence<Dafny.Rune> _4429_paramsString;
          _4429_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Dafny.ISequence<Dafny.Rune> _4430_paramTypes;
          _4430_paramTypes = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _4424_i = BigInteger.Zero;
          while ((_4424_i) < (new BigInteger((_4422_params).Count))) {
            if ((_4424_i).Sign == 1) {
              _4429_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_4429_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              _4430_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_4430_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IType _4431_typStr;
            RAST._IType _out1284;
            _out1284 = DCOMP.COMP.GenType(((_4422_params).Select(_4424_i)).dtor_typ, false, true);
            _4431_typStr = _out1284;
            _4429_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4429_paramsString, DCOMP.__default.escapeIdent(((_4422_params).Select(_4424_i)).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (RAST.Type.create_Borrowed(_4431_typStr))._ToString(DCOMP.__default.IND));
            _4430_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_4430_paramTypes, (RAST.Type.create_Borrowed(_4431_typStr))._ToString(DCOMP.__default.IND));
            _4424_i = (_4424_i) + (BigInteger.One);
          }
          RAST._IType _4432_retTypeGen;
          RAST._IType _out1285;
          _out1285 = DCOMP.COMP.GenType(_4421_retType, false, true);
          _4432_retTypeGen = _out1285;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper::<::std::rc::Rc<dyn ::std::ops::Fn("), _4430_paramTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), (_4432_retTypeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>({\n")), _4427_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(move |")), _4429_paramsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| -> ")), (_4432_retTypeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), (_4425_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})})")));
          isOwned = true;
        }
      } else if (_source76.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _4433___mcc_h225 = _source76.dtor_values;
        DAST._IType _4434___mcc_h226 = _source76.dtor_retType;
        DAST._IExpression _4435___mcc_h227 = _source76.dtor_expr;
        DAST._IExpression _4436_expr = _4435___mcc_h227;
        DAST._IType _4437_retType = _4434___mcc_h226;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _4438_values = _4433___mcc_h225;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4439_paramNames;
          _4439_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4440_paramNamesSet;
          _4440_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _4441_i;
          _4441_i = BigInteger.Zero;
          while ((_4441_i) < (new BigInteger((_4438_values).Count))) {
            _4439_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_4439_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((_4438_values).Select(_4441_i)).dtor__0).dtor_name));
            _4440_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_4440_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((((_4438_values).Select(_4441_i)).dtor__0).dtor_name));
            _4441_i = (_4441_i) + (BigInteger.One);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _4442_s;
          _4442_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          Dafny.ISequence<Dafny.Rune> _4443_paramsString;
          _4443_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _4441_i = BigInteger.Zero;
          while ((_4441_i) < (new BigInteger((_4438_values).Count))) {
            if ((_4441_i).Sign == 1) {
              _4443_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_4443_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IType _4444_typStr;
            RAST._IType _out1286;
            _out1286 = DCOMP.COMP.GenType((((_4438_values).Select(_4441_i)).dtor__0).dtor_typ, false, true);
            _4444_typStr = _out1286;
            RAST._IExpr _4445_valueGen;
            bool _4446___v85;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4447_recIdents;
            RAST._IExpr _out1287;
            bool _out1288;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1289;
            DCOMP.COMP.GenExpr(((_4438_values).Select(_4441_i)).dtor__1, selfIdent, @params, true, out _out1287, out _out1288, out _out1289);
            _4445_valueGen = _out1287;
            _4446___v85 = _out1288;
            _4447_recIdents = _out1289;
            _4442_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4442_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent((((_4438_values).Select(_4441_i)).dtor__0).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_4444_typStr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4447_recIdents);
            _4442_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4442_s, (_4445_valueGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            _4441_i = (_4441_i) + (BigInteger.One);
          }
          RAST._IExpr _4448_recGen;
          bool _4449_recOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4450_recIdents;
          RAST._IExpr _out1290;
          bool _out1291;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1292;
          DCOMP.COMP.GenExpr(_4436_expr, selfIdent, _4439_paramNames, mustOwn, out _out1290, out _out1291, out _out1292);
          _4448_recGen = _out1290;
          _4449_recOwned = _out1291;
          _4450_recIdents = _out1292;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_4450_recIdents, _4440_paramNamesSet);
          _4442_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4442_s, (_4448_recGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          r = RAST.Expr.create_RawExpr(_4442_s);
          isOwned = _4449_recOwned;
        }
      } else if (_source76.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _4451___mcc_h228 = _source76.dtor_name;
        DAST._IType _4452___mcc_h229 = _source76.dtor_typ;
        DAST._IExpression _4453___mcc_h230 = _source76.dtor_value;
        DAST._IExpression _4454___mcc_h231 = _source76.dtor_iifeBody;
        DAST._IExpression _4455_iifeBody = _4454___mcc_h231;
        DAST._IExpression _4456_value = _4453___mcc_h230;
        DAST._IType _4457_tpe = _4452___mcc_h229;
        Dafny.ISequence<Dafny.Rune> _4458_name = _4451___mcc_h228;
        {
          RAST._IExpr _4459_valueGen;
          bool _4460___v86;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4461_recIdents;
          RAST._IExpr _out1293;
          bool _out1294;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1295;
          DCOMP.COMP.GenExpr(_4456_value, selfIdent, @params, true, out _out1293, out _out1294, out _out1295);
          _4459_valueGen = _out1293;
          _4460___v86 = _out1294;
          _4461_recIdents = _out1295;
          readIdents = _4461_recIdents;
          RAST._IType _4462_valueTypeGen;
          RAST._IType _out1296;
          _out1296 = DCOMP.COMP.GenType(_4457_tpe, false, true);
          _4462_valueTypeGen = _out1296;
          RAST._IExpr _4463_bodyGen;
          bool _4464___v87;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4465_bodyIdents;
          RAST._IExpr _out1297;
          bool _out1298;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1299;
          DCOMP.COMP.GenExpr(_4455_iifeBody, selfIdent, @params, true, out _out1297, out _out1298, out _out1299);
          _4463_bodyGen = _out1297;
          _4464___v87 = _out1298;
          _4465_bodyIdents = _out1299;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_4465_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_4458_name))));
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet "), DCOMP.__default.escapeIdent((_4458_name))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_4462_valueTypeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), (_4459_valueGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), (_4463_bodyGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}")));
          isOwned = true;
        }
      } else if (_source76.is_Apply) {
        DAST._IExpression _4466___mcc_h232 = _source76.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _4467___mcc_h233 = _source76.dtor_args;
        Dafny.ISequence<DAST._IExpression> _4468_args = _4467___mcc_h233;
        DAST._IExpression _4469_func = _4466___mcc_h232;
        {
          RAST._IExpr _4470_funcExpr;
          bool _4471___v88;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4472_recIdents;
          RAST._IExpr _out1300;
          bool _out1301;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1302;
          DCOMP.COMP.GenExpr(_4469_func, selfIdent, @params, false, out _out1300, out _out1301, out _out1302);
          _4470_funcExpr = _out1300;
          _4471___v88 = _out1301;
          _4472_recIdents = _out1302;
          readIdents = _4472_recIdents;
          Dafny.ISequence<Dafny.Rune> _4473_argString;
          _4473_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _4474_i;
          _4474_i = BigInteger.Zero;
          while ((_4474_i) < (new BigInteger((_4468_args).Count))) {
            if ((_4474_i).Sign == 1) {
              _4473_argString = Dafny.Sequence<Dafny.Rune>.Concat(_4473_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _4475_argExpr;
            bool _4476_isOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4477_argIdents;
            RAST._IExpr _out1303;
            bool _out1304;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1305;
            DCOMP.COMP.GenExpr((_4468_args).Select(_4474_i), selfIdent, @params, false, out _out1303, out _out1304, out _out1305);
            _4475_argExpr = _out1303;
            _4476_isOwned = _out1304;
            _4477_argIdents = _out1305;
            Dafny.ISequence<Dafny.Rune> _4478_argExprString;
            _4478_argExprString = (_4475_argExpr)._ToString(DCOMP.__default.IND);
            if (_4476_isOwned) {
              _4478_argExprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4478_argExprString);
            }
            _4473_argString = Dafny.Sequence<Dafny.Rune>.Concat(_4473_argString, _4478_argExprString);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4477_argIdents);
            _4474_i = (_4474_i) + (BigInteger.One);
          }
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), (_4470_funcExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _4473_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))")));
          isOwned = true;
        }
      } else if (_source76.is_TypeTest) {
        DAST._IExpression _4479___mcc_h234 = _source76.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4480___mcc_h235 = _source76.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _4481___mcc_h236 = _source76.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _4482_variant = _4481___mcc_h236;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4483_dType = _4480___mcc_h235;
        DAST._IExpression _4484_on = _4479___mcc_h234;
        {
          RAST._IExpr _4485_exprGen;
          bool _4486___v89;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4487_recIdents;
          RAST._IExpr _out1306;
          bool _out1307;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1308;
          DCOMP.COMP.GenExpr(_4484_on, selfIdent, @params, false, out _out1306, out _out1307, out _out1308);
          _4485_exprGen = _out1306;
          _4486___v89 = _out1307;
          _4487_recIdents = _out1308;
          Dafny.ISequence<Dafny.Rune> _4488_dTypePath;
          Dafny.ISequence<Dafny.Rune> _out1309;
          _out1309 = DCOMP.COMP.GenPath(_4483_dType);
          _4488_dTypePath = _out1309;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!("), (_4485_exprGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref(), ")), _4488_dTypePath), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_4482_variant)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. })")));
          isOwned = true;
          readIdents = _4487_recIdents;
        }
      } else if (_source76.is_InitializationValue) {
        DAST._IType _4489___mcc_h237 = _source76.dtor_typ;
        DAST._IType _4490_typ = _4489___mcc_h237;
        {
          RAST._IType _4491_typExpr;
          RAST._IType _out1310;
          _out1310 = DCOMP.COMP.GenType(_4490_typ, false, false);
          _4491_typExpr = _out1310;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_4491_typExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()")));
          isOwned = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source76.is_BoolBoundedPool) {
        {
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]"));
          isOwned = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source76.is_SetBoundedPool) {
        DAST._IExpression _4492___mcc_h238 = _source76.dtor_of;
        DAST._IExpression _4493_of = _4492___mcc_h238;
        {
          RAST._IExpr _4494_exprGen;
          bool _4495___v90;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4496_recIdents;
          RAST._IExpr _out1311;
          bool _out1312;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1313;
          DCOMP.COMP.GenExpr(_4493_of, selfIdent, @params, false, out _out1311, out _out1312, out _out1313);
          _4494_exprGen = _out1311;
          _4495___v90 = _out1312;
          _4496_recIdents = _out1313;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4494_exprGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()")));
          isOwned = true;
          readIdents = _4496_recIdents;
        }
      } else if (_source76.is_SeqBoundedPool) {
        DAST._IExpression _4497___mcc_h239 = _source76.dtor_of;
        bool _4498___mcc_h240 = _source76.dtor_includeDuplicates;
        bool _4499_includeDuplicates = _4498___mcc_h240;
        DAST._IExpression _4500_of = _4497___mcc_h239;
        {
          RAST._IExpr _4501_exprGen;
          bool _4502___v91;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4503_recIdents;
          RAST._IExpr _out1314;
          bool _out1315;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1316;
          DCOMP.COMP.GenExpr(_4500_of, selfIdent, @params, false, out _out1314, out _out1315, out _out1316);
          _4501_exprGen = _out1314;
          _4502___v91 = _out1315;
          _4503_recIdents = _out1316;
          Dafny.ISequence<Dafny.Rune> _4504_s;
          _4504_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4501_exprGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          if (!(_4499_includeDuplicates)) {
            _4504_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::itertools::Itertools::unique("), _4504_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          r = RAST.Expr.create_RawExpr(_4504_s);
          isOwned = true;
          readIdents = _4503_recIdents;
        }
      } else {
        DAST._IExpression _4505___mcc_h241 = _source76.dtor_lo;
        DAST._IExpression _4506___mcc_h242 = _source76.dtor_hi;
        DAST._IExpression _4507_hi = _4506___mcc_h242;
        DAST._IExpression _4508_lo = _4505___mcc_h241;
        {
          RAST._IExpr _4509_lo;
          bool _4510___v92;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4511_recIdentsLo;
          RAST._IExpr _out1317;
          bool _out1318;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1319;
          DCOMP.COMP.GenExpr(_4508_lo, selfIdent, @params, true, out _out1317, out _out1318, out _out1319);
          _4509_lo = _out1317;
          _4510___v92 = _out1318;
          _4511_recIdentsLo = _out1319;
          RAST._IExpr _4512_hi;
          bool _4513___v93;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4514_recIdentsHi;
          RAST._IExpr _out1320;
          bool _out1321;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1322;
          DCOMP.COMP.GenExpr(_4507_hi, selfIdent, @params, true, out _out1320, out _out1321, out _out1322);
          _4512_hi = _out1320;
          _4513___v93 = _out1321;
          _4514_recIdentsHi = _out1322;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::integer_range("), (_4509_lo)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_4512_hi)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
          isOwned = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_4511_recIdentsLo, _4514_recIdentsHi);
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(nonstandard_style)]\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern crate dafny_runtime;\n"));
      BigInteger _4515_i;
      _4515_i = BigInteger.Zero;
      while ((_4515_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _4516_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        RAST._IMod _4517_m;
        RAST._IMod _out1323;
        _out1323 = DCOMP.COMP.GenModule((p).Select(_4515_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _4517_m = _out1323;
        _4516_generated = (_4517_m)._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        if ((_4515_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _4516_generated);
        _4515_i = (_4515_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _4518_i;
      _4518_i = BigInteger.Zero;
      while ((_4518_i) < (new BigInteger((fullName).Count))) {
        if ((_4518_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((fullName).Select(_4518_i)));
        _4518_i = (_4518_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
    public static Dafny.IMap<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>> OpTable {
      get {
        return Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Mod(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("%")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_And(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&&")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Or(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("||")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Div(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Lt(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Plus(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Minus(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Times(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseAnd(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseOr(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseXor(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("^")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseShiftRight(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseShiftLeft(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<<")));
      }
    }
  }
} // end of namespace DCOMP

