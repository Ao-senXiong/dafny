// Dafny program the_program compiled into C#
// To recompile, you will need the libraries
//     System.Runtime.Numerics.dll System.Collections.Immutable.dll
// but the 'dotnet' tool in net6.0 should pick those up automatically.
// Optionally, you may want to include compiler switches like
//     /debug /nowarn:162,164,168,183,219,436,1717,1718

using System;
using System.Numerics;
using System.Collections;
namespace Formatting {

  public partial class __default {
    public static System.String ReindentProgramFromFirstToken(Microsoft.Dafny.IToken firstToken, Formatting.IIndentationFormatter reindent) {
      System.String s = default(System.String);
      Microsoft.Dafny.IToken token;
      token = firstToken;
      System.Text.StringBuilder sb;
      System.Text.StringBuilder _nw0 = new System.Text.StringBuilder();
      sb = _nw0;
      while ((token) != (object)((Microsoft.Dafny.IToken)null)) {
        System.String newLeadingTrivia;
        newLeadingTrivia = (reindent).GetNewLeadingTrivia(token);
        System.String newTrailingTrivia;
        newTrailingTrivia = (reindent).GetNewTrailingTrivia(token);
        (sb).Append(newLeadingTrivia);
        (sb).Append(token.val);
        (sb).Append(newTrailingTrivia);
        token = token.Next;
      }
      System.String _out0;
      _out0 = (sb).ToString().ToString();
      s = _out0;
      return s;
    }
  }

  public interface IIndentationFormatter {
    System.String GetNewLeadingTrivia(Microsoft.Dafny.IToken token);
    System.String GetNewTrailingTrivia(Microsoft.Dafny.IToken token);
  }
  public class _Companion_IIndentationFormatter {
  }
} // end of namespace Formatting


namespace DAST {


  public interface _IModule {
    bool is_Module { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    bool dtor_isExtern { get; }
    Dafny.ISequence<DAST._IModuleItem> dtor_body { get; }
    _IModule DowncastClone();
  }
  public class Module : _IModule {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly bool _isExtern;
    public readonly Dafny.ISequence<DAST._IModuleItem> _body;
    public Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      this._name = name;
      this._isExtern = isExtern;
      this._body = body;
    }
    public _IModule DowncastClone() {
      if (this is _IModule dt) { return dt; }
      return new Module(_name, _isExtern, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Module;
      return oth != null && object.Equals(this._name, oth._name) && this._isExtern == oth._isExtern && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isExtern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Module.Module";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isExtern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IModule theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, false, Dafny.Sequence<DAST._IModuleItem>.Empty);
    public static DAST._IModule Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModule> _TYPE = new Dafny.TypeDescriptor<DAST._IModule>(DAST.Module.Default());
    public static Dafny.TypeDescriptor<DAST._IModule> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModule create(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return new Module(name, isExtern, body);
    }
    public static _IModule create_Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return create(name, isExtern, body);
    }
    public bool is_Module { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public bool dtor_isExtern {
      get {
        return this._isExtern;
      }
    }
    public Dafny.ISequence<DAST._IModuleItem> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IModuleItem {
    bool is_Module { get; }
    bool is_Class { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    bool is_Datatype { get; }
    DAST._IModule dtor_Module_a0 { get; }
    DAST._IClass dtor_Class_a0 { get; }
    DAST._ITrait dtor_Trait_a0 { get; }
    DAST._INewtype dtor_Newtype_a0 { get; }
    DAST._IDatatype dtor_Datatype_a0 { get; }
    _IModuleItem DowncastClone();
  }
  public abstract class ModuleItem : _IModuleItem {
    public ModuleItem() {
    }
    private static readonly DAST._IModuleItem theDefault = create_Module(DAST.Module.Default());
    public static DAST._IModuleItem Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModuleItem> _TYPE = new Dafny.TypeDescriptor<DAST._IModuleItem>(DAST.ModuleItem.Default());
    public static Dafny.TypeDescriptor<DAST._IModuleItem> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModuleItem create_Module(DAST._IModule _a0) {
      return new ModuleItem_Module(_a0);
    }
    public static _IModuleItem create_Class(DAST._IClass _a0) {
      return new ModuleItem_Class(_a0);
    }
    public static _IModuleItem create_Trait(DAST._ITrait _a0) {
      return new ModuleItem_Trait(_a0);
    }
    public static _IModuleItem create_Newtype(DAST._INewtype _a0) {
      return new ModuleItem_Newtype(_a0);
    }
    public static _IModuleItem create_Datatype(DAST._IDatatype _a0) {
      return new ModuleItem_Datatype(_a0);
    }
    public bool is_Module { get { return this is ModuleItem_Module; } }
    public bool is_Class { get { return this is ModuleItem_Class; } }
    public bool is_Trait { get { return this is ModuleItem_Trait; } }
    public bool is_Newtype { get { return this is ModuleItem_Newtype; } }
    public bool is_Datatype { get { return this is ModuleItem_Datatype; } }
    public DAST._IModule dtor_Module_a0 {
      get {
        var d = this;
        return ((ModuleItem_Module)d)._a0;
      }
    }
    public DAST._IClass dtor_Class_a0 {
      get {
        var d = this;
        return ((ModuleItem_Class)d)._a0;
      }
    }
    public DAST._ITrait dtor_Trait_a0 {
      get {
        var d = this;
        return ((ModuleItem_Trait)d)._a0;
      }
    }
    public DAST._INewtype dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Newtype)d)._a0;
      }
    }
    public DAST._IDatatype dtor_Datatype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Datatype)d)._a0;
      }
    }
    public abstract _IModuleItem DowncastClone();
  }
  public class ModuleItem_Module : ModuleItem {
    public readonly DAST._IModule _a0;
    public ModuleItem_Module(DAST._IModule _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Module(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Module;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Module";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Class : ModuleItem {
    public readonly DAST._IClass _a0;
    public ModuleItem_Class(DAST._IClass _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Class(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Class;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Class";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Trait : ModuleItem {
    public readonly DAST._ITrait _a0;
    public ModuleItem_Trait(DAST._ITrait _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Trait(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Trait;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Newtype : ModuleItem {
    public readonly DAST._INewtype _a0;
    public ModuleItem_Newtype(DAST._INewtype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Datatype : ModuleItem {
    public readonly DAST._IDatatype _a0;
    public ModuleItem_Datatype(DAST._IDatatype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Datatype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Datatype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IType {
    bool is_Path { get; }
    bool is_Nullable { get; }
    bool is_Tuple { get; }
    bool is_Array { get; }
    bool is_Seq { get; }
    bool is_Set { get; }
    bool is_Multiset { get; }
    bool is_Map { get; }
    bool is_Arrow { get; }
    bool is_Primitive { get; }
    bool is_Passthrough { get; }
    bool is_TypeArg { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    DAST._IResolvedType dtor_resolved { get; }
    DAST._IType dtor_Nullable_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_Tuple_a0 { get; }
    DAST._IType dtor_element { get; }
    BigInteger dtor_dims { get; }
    DAST._IType dtor_key { get; }
    DAST._IType dtor_value { get; }
    Dafny.ISequence<DAST._IType> dtor_args { get; }
    DAST._IType dtor_result { get; }
    DAST._IPrimitive dtor_Primitive_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 { get; }
    _IType DowncastClone();
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly DAST._IType theDefault = create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.ResolvedType.Default());
    public static DAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IType> _TYPE = new Dafny.TypeDescriptor<DAST._IType>(DAST.Type.Default());
    public static Dafny.TypeDescriptor<DAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) {
      return new Type_Path(_a0, typeArgs, resolved);
    }
    public static _IType create_Nullable(DAST._IType _a0) {
      return new Type_Nullable(_a0);
    }
    public static _IType create_Tuple(Dafny.ISequence<DAST._IType> _a0) {
      return new Type_Tuple(_a0);
    }
    public static _IType create_Array(DAST._IType element, BigInteger dims) {
      return new Type_Array(element, dims);
    }
    public static _IType create_Seq(DAST._IType element) {
      return new Type_Seq(element);
    }
    public static _IType create_Set(DAST._IType element) {
      return new Type_Set(element);
    }
    public static _IType create_Multiset(DAST._IType element) {
      return new Type_Multiset(element);
    }
    public static _IType create_Map(DAST._IType key, DAST._IType @value) {
      return new Type_Map(key, @value);
    }
    public static _IType create_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) {
      return new Type_Arrow(args, result);
    }
    public static _IType create_Primitive(DAST._IPrimitive _a0) {
      return new Type_Primitive(_a0);
    }
    public static _IType create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_Passthrough(_a0);
    }
    public static _IType create_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_TypeArg(_a0);
    }
    public bool is_Path { get { return this is Type_Path; } }
    public bool is_Nullable { get { return this is Type_Nullable; } }
    public bool is_Tuple { get { return this is Type_Tuple; } }
    public bool is_Array { get { return this is Type_Array; } }
    public bool is_Seq { get { return this is Type_Seq; } }
    public bool is_Set { get { return this is Type_Set; } }
    public bool is_Multiset { get { return this is Type_Multiset; } }
    public bool is_Map { get { return this is Type_Map; } }
    public bool is_Arrow { get { return this is Type_Arrow; } }
    public bool is_Primitive { get { return this is Type_Primitive; } }
    public bool is_Passthrough { get { return this is Type_Passthrough; } }
    public bool is_TypeArg { get { return this is Type_TypeArg; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 {
      get {
        var d = this;
        return ((Type_Path)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Type_Path)d)._typeArgs;
      }
    }
    public DAST._IResolvedType dtor_resolved {
      get {
        var d = this;
        return ((Type_Path)d)._resolved;
      }
    }
    public DAST._IType dtor_Nullable_a0 {
      get {
        var d = this;
        return ((Type_Nullable)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Type_Tuple)d)._a0;
      }
    }
    public DAST._IType dtor_element {
      get {
        var d = this;
        if (d is Type_Array) { return ((Type_Array)d)._element; }
        if (d is Type_Seq) { return ((Type_Seq)d)._element; }
        if (d is Type_Set) { return ((Type_Set)d)._element; }
        return ((Type_Multiset)d)._element;
      }
    }
    public BigInteger dtor_dims {
      get {
        var d = this;
        return ((Type_Array)d)._dims;
      }
    }
    public DAST._IType dtor_key {
      get {
        var d = this;
        return ((Type_Map)d)._key;
      }
    }
    public DAST._IType dtor_value {
      get {
        var d = this;
        return ((Type_Map)d)._value;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_args {
      get {
        var d = this;
        return ((Type_Arrow)d)._args;
      }
    }
    public DAST._IType dtor_result {
      get {
        var d = this;
        return ((Type_Arrow)d)._result;
      }
    }
    public DAST._IPrimitive dtor_Primitive_a0 {
      get {
        var d = this;
        return ((Type_Primitive)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((Type_Passthrough)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 {
      get {
        var d = this;
        return ((Type_TypeArg)d)._a0;
      }
    }
    public abstract _IType DowncastClone();
  }
  public class Type_Path : Type {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly DAST._IResolvedType _resolved;
    public Type_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) : base() {
      this._a0 = _a0;
      this._typeArgs = typeArgs;
      this._resolved = resolved;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Path(_a0, _typeArgs, _resolved);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Path;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._resolved, oth._resolved);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._resolved));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Path";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._resolved);
      s += ")";
      return s;
    }
  }
  public class Type_Nullable : Type {
    public readonly DAST._IType _a0;
    public Type_Nullable(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Nullable(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Nullable;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Nullable";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Tuple : Type {
    public readonly Dafny.ISequence<DAST._IType> _a0;
    public Type_Tuple(Dafny.ISequence<DAST._IType> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Array : Type {
    public readonly DAST._IType _element;
    public readonly BigInteger _dims;
    public Type_Array(DAST._IType element, BigInteger dims) : base() {
      this._element = element;
      this._dims = dims;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Array(_element, _dims);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Array;
      return oth != null && object.Equals(this._element, oth._element) && this._dims == oth._dims;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Array";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dims);
      s += ")";
      return s;
    }
  }
  public class Type_Seq : Type {
    public readonly DAST._IType _element;
    public Type_Seq(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Seq(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Seq;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Seq";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Set : Type {
    public readonly DAST._IType _element;
    public Type_Set(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Set(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Set;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Set";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Multiset : Type {
    public readonly DAST._IType _element;
    public Type_Multiset(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Multiset(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Multiset;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Multiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Map : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_Map(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Map(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Map;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Map";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_Arrow : Type {
    public readonly Dafny.ISequence<DAST._IType> _args;
    public readonly DAST._IType _result;
    public Type_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) : base() {
      this._args = args;
      this._result = result;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Arrow(_args, _result);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Arrow;
      return oth != null && object.Equals(this._args, oth._args) && object.Equals(this._result, oth._result);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._result));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Arrow";
      s += "(";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._result);
      s += ")";
      return s;
    }
  }
  public class Type_Primitive : Type {
    public readonly DAST._IPrimitive _a0;
    public Type_Primitive(DAST._IPrimitive _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Primitive(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Primitive;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Primitive";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Passthrough : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeArg : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeArg(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_TypeArg;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.TypeArg";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IPrimitive {
    bool is_Int { get; }
    bool is_Real { get; }
    bool is_String { get; }
    bool is_Bool { get; }
    bool is_Char { get; }
    _IPrimitive DowncastClone();
  }
  public abstract class Primitive : _IPrimitive {
    public Primitive() {
    }
    private static readonly DAST._IPrimitive theDefault = create_Int();
    public static DAST._IPrimitive Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IPrimitive> _TYPE = new Dafny.TypeDescriptor<DAST._IPrimitive>(DAST.Primitive.Default());
    public static Dafny.TypeDescriptor<DAST._IPrimitive> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrimitive create_Int() {
      return new Primitive_Int();
    }
    public static _IPrimitive create_Real() {
      return new Primitive_Real();
    }
    public static _IPrimitive create_String() {
      return new Primitive_String();
    }
    public static _IPrimitive create_Bool() {
      return new Primitive_Bool();
    }
    public static _IPrimitive create_Char() {
      return new Primitive_Char();
    }
    public bool is_Int { get { return this is Primitive_Int; } }
    public bool is_Real { get { return this is Primitive_Real; } }
    public bool is_String { get { return this is Primitive_String; } }
    public bool is_Bool { get { return this is Primitive_Bool; } }
    public bool is_Char { get { return this is Primitive_Char; } }
    public static System.Collections.Generic.IEnumerable<_IPrimitive> AllSingletonConstructors {
      get {
        yield return Primitive.create_Int();
        yield return Primitive.create_Real();
        yield return Primitive.create_String();
        yield return Primitive.create_Bool();
        yield return Primitive.create_Char();
      }
    }
    public abstract _IPrimitive DowncastClone();
  }
  public class Primitive_Int : Primitive {
    public Primitive_Int() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Int";
      return s;
    }
  }
  public class Primitive_Real : Primitive {
    public Primitive_Real() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Real();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Real;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Real";
      return s;
    }
  }
  public class Primitive_String : Primitive {
    public Primitive_String() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_String();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_String;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.String";
      return s;
    }
  }
  public class Primitive_Bool : Primitive {
    public Primitive_Bool() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Bool";
      return s;
    }
  }
  public class Primitive_Char : Primitive {
    public Primitive_Char() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Char();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Char;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Char";
      return s;
    }
  }

  public interface _IResolvedType {
    bool is_Datatype { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    DAST._IType dtor_Newtype_a0 { get; }
    _IResolvedType DowncastClone();
  }
  public abstract class ResolvedType : _IResolvedType {
    public ResolvedType() {
    }
    private static readonly DAST._IResolvedType theDefault = create_Datatype(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty);
    public static DAST._IResolvedType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IResolvedType> _TYPE = new Dafny.TypeDescriptor<DAST._IResolvedType>(DAST.ResolvedType.Default());
    public static Dafny.TypeDescriptor<DAST._IResolvedType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IResolvedType create_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Datatype(path);
    }
    public static _IResolvedType create_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Trait(path);
    }
    public static _IResolvedType create_Newtype(DAST._IType _a0) {
      return new ResolvedType_Newtype(_a0);
    }
    public bool is_Datatype { get { return this is ResolvedType_Datatype; } }
    public bool is_Trait { get { return this is ResolvedType_Trait; } }
    public bool is_Newtype { get { return this is ResolvedType_Newtype; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is ResolvedType_Datatype) { return ((ResolvedType_Datatype)d)._path; }
        return ((ResolvedType_Trait)d)._path;
      }
    }
    public DAST._IType dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._a0;
      }
    }
    public abstract _IResolvedType DowncastClone();
  }
  public class ResolvedType_Datatype : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Datatype(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Datatype;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Trait : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Trait(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Trait;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Newtype : ResolvedType {
    public readonly DAST._IType _a0;
    public ResolvedType_Newtype(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IIdent {
    bool is_Ident { get; }
    Dafny.ISequence<Dafny.Rune> dtor_id { get; }
  }
  public class Ident : _IIdent {
    public readonly Dafny.ISequence<Dafny.Rune> _id;
    public Ident(Dafny.ISequence<Dafny.Rune> id) {
      this._id = id;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Ident;
      return oth != null && object.Equals(this._id, oth._id);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._id));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Ident.Ident";
      s += "(";
      s += this._id.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IIdent create(Dafny.ISequence<Dafny.Rune> id) {
      return new Ident(id);
    }
    public static _IIdent create_Ident(Dafny.ISequence<Dafny.Rune> id) {
      return create(id);
    }
    public bool is_Ident { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_id {
      get {
        return this._id;
      }
    }
  }

  public interface _IClass {
    bool is_Class { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IType> dtor_superClasses { get; }
    Dafny.ISequence<DAST._IField> dtor_fields { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _IClass DowncastClone();
  }
  public class Class : _IClass {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IType> _superClasses;
    public readonly Dafny.ISequence<DAST._IField> _fields;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._superClasses = superClasses;
      this._fields = fields;
      this._body = body;
    }
    public _IClass DowncastClone() {
      if (this is _IClass dt) { return dt; }
      return new Class(_name, _enclosingModule, _typeParams, _superClasses, _fields, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Class;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._superClasses, oth._superClasses) && object.Equals(this._fields, oth._fields) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._superClasses));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Class.Class";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._superClasses);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IClass theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IField>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._IClass Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IClass> _TYPE = new Dafny.TypeDescriptor<DAST._IClass>(DAST.Class.Default());
    public static Dafny.TypeDescriptor<DAST._IClass> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClass create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return new Class(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public static _IClass create_Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public bool is_Class { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_superClasses {
      get {
        return this._superClasses;
      }
    }
    public Dafny.ISequence<DAST._IField> dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _ITrait DowncastClone();
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_name, _typeParams, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Trait;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Trait.Trait";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._ITrait theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ITrait> _TYPE = new Dafny.TypeDescriptor<DAST._ITrait>(DAST.Trait.Default());
    public static Dafny.TypeDescriptor<DAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return new Trait(name, typeParams, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, typeParams, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IDatatype {
    bool is_Datatype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    bool dtor_isCo { get; }
    _IDatatype DowncastClone();
  }
  public class Datatype : _IDatatype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IDatatypeCtor> _ctors;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly bool _isCo;
    public Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._ctors = ctors;
      this._body = body;
      this._isCo = isCo;
    }
    public _IDatatype DowncastClone() {
      if (this is _IDatatype dt) { return dt; }
      return new Datatype(_name, _enclosingModule, _typeParams, _ctors, _body, _isCo);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Datatype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._ctors, oth._ctors) && object.Equals(this._body, oth._body) && this._isCo == oth._isCo;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ctors));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Datatype.Datatype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ctors);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IDatatypeCtor>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, false);
    public static DAST._IDatatype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatype> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatype>(DAST.Datatype.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return new Datatype(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public static _IDatatype create_Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return create(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public bool is_Datatype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors {
      get {
        return this._ctors;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public bool dtor_isCo {
      get {
        return this._isCo;
      }
    }
  }

  public interface _IDatatypeCtor {
    bool is_DatatypeCtor { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_args { get; }
    bool dtor_hasAnyArgs { get; }
    _IDatatypeCtor DowncastClone();
  }
  public class DatatypeCtor : _IDatatypeCtor {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IFormal> _args;
    public readonly bool _hasAnyArgs;
    public DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      this._name = name;
      this._args = args;
      this._hasAnyArgs = hasAnyArgs;
    }
    public _IDatatypeCtor DowncastClone() {
      if (this is _IDatatypeCtor dt) { return dt; }
      return new DatatypeCtor(_name, _args, _hasAnyArgs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.DatatypeCtor;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._args, oth._args) && this._hasAnyArgs == oth._hasAnyArgs;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasAnyArgs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.DatatypeCtor.DatatypeCtor";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasAnyArgs);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatypeCtor theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, false);
    public static DAST._IDatatypeCtor Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatypeCtor>(DAST.DatatypeCtor.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatypeCtor create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return new DatatypeCtor(name, args, hasAnyArgs);
    }
    public static _IDatatypeCtor create_DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return create(name, args, hasAnyArgs);
    }
    public bool is_DatatypeCtor { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_args {
      get {
        return this._args;
      }
    }
    public bool dtor_hasAnyArgs {
      get {
        return this._hasAnyArgs;
      }
    }
  }

  public interface _INewtype {
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    DAST._IType dtor_base { get; }
    Dafny.ISequence<DAST._IStatement> dtor_witnessStmts { get; }
    DAST._IOptional<DAST._IExpression> dtor_witnessExpr { get; }
    _INewtype DowncastClone();
  }
  public class Newtype : _INewtype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly DAST._IType _base;
    public readonly Dafny.ISequence<DAST._IStatement> _witnessStmts;
    public readonly DAST._IOptional<DAST._IExpression> _witnessExpr;
    public Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      this._name = name;
      this._typeParams = typeParams;
      this._base = @base;
      this._witnessStmts = witnessStmts;
      this._witnessExpr = witnessExpr;
    }
    public _INewtype DowncastClone() {
      if (this is _INewtype dt) { return dt; }
      return new Newtype(_name, _typeParams, _base, _witnessStmts, _witnessExpr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Newtype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._base, oth._base) && object.Equals(this._witnessStmts, oth._witnessStmts) && object.Equals(this._witnessExpr, oth._witnessExpr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessStmts));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessExpr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Newtype.Newtype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessStmts);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessExpr);
      s += ")";
      return s;
    }
    private static readonly DAST._INewtype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Type.Default(), Dafny.Sequence<DAST._IStatement>.Empty, DAST.Optional<DAST._IExpression>.Default());
    public static DAST._INewtype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtype> _TYPE = new Dafny.TypeDescriptor<DAST._INewtype>(DAST.Newtype.Default());
    public static Dafny.TypeDescriptor<DAST._INewtype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      return new Newtype(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public static _INewtype create_Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      return create(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public bool is_Newtype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public DAST._IType dtor_base {
      get {
        return this._base;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_witnessStmts {
      get {
        return this._witnessStmts;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_witnessExpr {
      get {
        return this._witnessExpr;
      }
    }
  }

  public interface _IClassItem {
    bool is_Method { get; }
    DAST._IMethod dtor_Method_a0 { get; }
  }
  public class ClassItem : _IClassItem {
    public readonly DAST._IMethod _a0;
    public ClassItem(DAST._IMethod _a0) {
      this._a0 = _a0;
    }
    public static DAST._IMethod DowncastClone(DAST._IMethod _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ClassItem;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ClassItem.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = DAST.Method.Default();
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClassItem create(DAST._IMethod _a0) {
      return new ClassItem(_a0);
    }
    public static _IClassItem create_Method(DAST._IMethod _a0) {
      return create(_a0);
    }
    public bool is_Method { get { return true; } }
    public DAST._IMethod dtor_Method_a0 {
      get {
        return this._a0;
      }
    }
  }

  public interface _IField {
    bool is_Field { get; }
    DAST._IFormal dtor_formal { get; }
    DAST._IOptional<DAST._IExpression> dtor_defaultValue { get; }
    _IField DowncastClone();
  }
  public class Field : _IField {
    public readonly DAST._IFormal _formal;
    public readonly DAST._IOptional<DAST._IExpression> _defaultValue;
    public Field(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      this._formal = formal;
      this._defaultValue = defaultValue;
    }
    public _IField DowncastClone() {
      if (this is _IField dt) { return dt; }
      return new Field(_formal, _defaultValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Field;
      return oth != null && object.Equals(this._formal, oth._formal) && object.Equals(this._defaultValue, oth._defaultValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formal));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._defaultValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Field.Field";
      s += "(";
      s += Dafny.Helpers.ToString(this._formal);
      s += ", ";
      s += Dafny.Helpers.ToString(this._defaultValue);
      s += ")";
      return s;
    }
    private static readonly DAST._IField theDefault = create(DAST.Formal.Default(), DAST.Optional<DAST._IExpression>.Default());
    public static DAST._IField Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IField> _TYPE = new Dafny.TypeDescriptor<DAST._IField>(DAST.Field.Default());
    public static Dafny.TypeDescriptor<DAST._IField> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IField create(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      return new Field(formal, defaultValue);
    }
    public static _IField create_Field(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      return create(formal, defaultValue);
    }
    public bool is_Field { get { return true; } }
    public DAST._IFormal dtor_formal {
      get {
        return this._formal;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_defaultValue {
      get {
        return this._defaultValue;
      }
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    _IFormal DowncastClone();
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      this._name = name;
      this._typ = typ;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
    private static readonly DAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default());
    public static DAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IFormal> _TYPE = new Dafny.TypeDescriptor<DAST._IFormal>(DAST.Formal.Default());
    public static Dafny.TypeDescriptor<DAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return new Formal(name, typ);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return create(name, typ);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        return this._typ;
      }
    }
  }

  public interface _IMethod {
    bool is_Method { get; }
    bool dtor_isStatic { get; }
    bool dtor_hasBody { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<DAST._IType> dtor_outTypes { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars { get; }
    _IMethod DowncastClone();
  }
  public class Method : _IMethod {
    public readonly bool _isStatic;
    public readonly bool _hasBody;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _overridingPath;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public readonly Dafny.ISequence<DAST._IType> _outTypes;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outVars;
    public Method(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      this._isStatic = isStatic;
      this._hasBody = hasBody;
      this._overridingPath = overridingPath;
      this._name = name;
      this._typeParams = typeParams;
      this._params = @params;
      this._body = body;
      this._outTypes = outTypes;
      this._outVars = outVars;
    }
    public _IMethod DowncastClone() {
      if (this is _IMethod dt) { return dt; }
      return new Method(_isStatic, _hasBody, _overridingPath, _name, _typeParams, _params, _body, _outTypes, _outVars);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Method;
      return oth != null && this._isStatic == oth._isStatic && this._hasBody == oth._hasBody && object.Equals(this._overridingPath, oth._overridingPath) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._params, oth._params) && object.Equals(this._body, oth._body) && object.Equals(this._outTypes, oth._outTypes) && object.Equals(this._outVars, oth._outVars);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasBody));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._overridingPath));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outTypes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outVars));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Method.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasBody);
      s += ", ";
      s += Dafny.Helpers.ToString(this._overridingPath);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outTypes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outVars);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = create(false, false, DAST.Optional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, Dafny.Sequence<DAST._IStatement>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Optional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default());
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMethod create(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return new Method(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public static _IMethod create_Method(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return create(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public bool is_Method { get { return true; } }
    public bool dtor_isStatic {
      get {
        return this._isStatic;
      }
    }
    public bool dtor_hasBody {
      get {
        return this._hasBody;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath {
      get {
        return this._overridingPath;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        return this._params;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_outTypes {
      get {
        return this._outTypes;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars {
      get {
        return this._outVars;
      }
    }
  }

  public interface _IOptional<T> {
    bool is_Some { get; }
    bool is_None { get; }
    T dtor_Some_a0 { get; }
    _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public abstract class Optional<T> : _IOptional<T> {
    public Optional() {
    }
    public static DAST._IOptional<T> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<DAST._IOptional<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<DAST._IOptional<T>>(DAST.Optional<T>.Default());
    }
    public static _IOptional<T> create_Some(T _a0) {
      return new Optional_Some<T>(_a0);
    }
    public static _IOptional<T> create_None() {
      return new Optional_None<T>();
    }
    public bool is_Some { get { return this is Optional_Some<T>; } }
    public bool is_None { get { return this is Optional_None<T>; } }
    public T dtor_Some_a0 {
      get {
        var d = this;
        return ((Optional_Some<T>)d)._a0;
      }
    }
    public abstract _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public class Optional_Some<T> : Optional<T> {
    public readonly T _a0;
    public Optional_Some(T _a0) : base() {
      this._a0 = _a0;
    }
    public override _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOptional<__T> dt) { return dt; }
      return new Optional_Some<__T>(converter0(_a0));
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Optional_Some<T>;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Optional.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Optional_None<T> : Optional<T> {
    public Optional_None() : base() {
    }
    public override _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOptional<__T> dt) { return dt; }
      return new Optional_None<__T>();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Optional_None<T>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Optional.None";
      return s;
    }
  }

  public interface _IStatement {
    bool is_DeclareVar { get; }
    bool is_Assign { get; }
    bool is_If { get; }
    bool is_Labeled { get; }
    bool is_While { get; }
    bool is_Foreach { get; }
    bool is_Call { get; }
    bool is_Return { get; }
    bool is_EarlyReturn { get; }
    bool is_Break { get; }
    bool is_TailRecursive { get; }
    bool is_JumpTailCallStart { get; }
    bool is_Halt { get; }
    bool is_Print { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    DAST._IOptional<DAST._IExpression> dtor_maybeValue { get; }
    DAST._IAssignLhs dtor_lhs { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IExpression dtor_cond { get; }
    Dafny.ISequence<DAST._IStatement> dtor_thn { get; }
    Dafny.ISequence<DAST._IStatement> dtor_els { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_boundName { get; }
    DAST._IType dtor_boundType { get; }
    DAST._IExpression dtor_over { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.Rune>> dtor_toLabel { get; }
    DAST._IExpression dtor_Print_a0 { get; }
    _IStatement DowncastClone();
  }
  public abstract class Statement : _IStatement {
    public Statement() {
    }
    private static readonly DAST._IStatement theDefault = create_DeclareVar(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default(), DAST.Optional<DAST._IExpression>.Default());
    public static DAST._IStatement Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IStatement> _TYPE = new Dafny.TypeDescriptor<DAST._IStatement>(DAST.Statement.Default());
    public static Dafny.TypeDescriptor<DAST._IStatement> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStatement create_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IOptional<DAST._IExpression> maybeValue) {
      return new Statement_DeclareVar(name, typ, maybeValue);
    }
    public static _IStatement create_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) {
      return new Statement_Assign(lhs, @value);
    }
    public static _IStatement create_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) {
      return new Statement_If(cond, thn, els);
    }
    public static _IStatement create_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Labeled(lbl, body);
    }
    public static _IStatement create_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_While(cond, body);
    }
    public static _IStatement create_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Foreach(boundName, boundType, over, body);
    }
    public static _IStatement create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) {
      return new Statement_Call(@on, name, typeArgs, args, outs);
    }
    public static _IStatement create_Return(DAST._IExpression expr) {
      return new Statement_Return(expr);
    }
    public static _IStatement create_EarlyReturn() {
      return new Statement_EarlyReturn();
    }
    public static _IStatement create_Break(DAST._IOptional<Dafny.ISequence<Dafny.Rune>> toLabel) {
      return new Statement_Break(toLabel);
    }
    public static _IStatement create_TailRecursive(Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_TailRecursive(body);
    }
    public static _IStatement create_JumpTailCallStart() {
      return new Statement_JumpTailCallStart();
    }
    public static _IStatement create_Halt() {
      return new Statement_Halt();
    }
    public static _IStatement create_Print(DAST._IExpression _a0) {
      return new Statement_Print(_a0);
    }
    public bool is_DeclareVar { get { return this is Statement_DeclareVar; } }
    public bool is_Assign { get { return this is Statement_Assign; } }
    public bool is_If { get { return this is Statement_If; } }
    public bool is_Labeled { get { return this is Statement_Labeled; } }
    public bool is_While { get { return this is Statement_While; } }
    public bool is_Foreach { get { return this is Statement_Foreach; } }
    public bool is_Call { get { return this is Statement_Call; } }
    public bool is_Return { get { return this is Statement_Return; } }
    public bool is_EarlyReturn { get { return this is Statement_EarlyReturn; } }
    public bool is_Break { get { return this is Statement_Break; } }
    public bool is_TailRecursive { get { return this is Statement_TailRecursive; } }
    public bool is_JumpTailCallStart { get { return this is Statement_JumpTailCallStart; } }
    public bool is_Halt { get { return this is Statement_Halt; } }
    public bool is_Print { get { return this is Statement_Print; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Statement_DeclareVar) { return ((Statement_DeclareVar)d)._name; }
        return ((Statement_Call)d)._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._typ;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_maybeValue {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._maybeValue;
      }
    }
    public DAST._IAssignLhs dtor_lhs {
      get {
        var d = this;
        return ((Statement_Assign)d)._lhs;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        return ((Statement_Assign)d)._value;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        if (d is Statement_If) { return ((Statement_If)d)._cond; }
        return ((Statement_While)d)._cond;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_thn {
      get {
        var d = this;
        return ((Statement_If)d)._thn;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_els {
      get {
        var d = this;
        return ((Statement_If)d)._els;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Statement_Labeled)d)._lbl;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        if (d is Statement_Labeled) { return ((Statement_Labeled)d)._body; }
        if (d is Statement_While) { return ((Statement_While)d)._body; }
        if (d is Statement_Foreach) { return ((Statement_Foreach)d)._body; }
        return ((Statement_TailRecursive)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_boundName {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundName;
      }
    }
    public DAST._IType dtor_boundType {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundType;
      }
    }
    public DAST._IExpression dtor_over {
      get {
        var d = this;
        return ((Statement_Foreach)d)._over;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        return ((Statement_Call)d)._on;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Statement_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        return ((Statement_Call)d)._args;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs {
      get {
        var d = this;
        return ((Statement_Call)d)._outs;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        return ((Statement_Return)d)._expr;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.Rune>> dtor_toLabel {
      get {
        var d = this;
        return ((Statement_Break)d)._toLabel;
      }
    }
    public DAST._IExpression dtor_Print_a0 {
      get {
        var d = this;
        return ((Statement_Print)d)._a0;
      }
    }
    public abstract _IStatement DowncastClone();
  }
  public class Statement_DeclareVar : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IOptional<DAST._IExpression> _maybeValue;
    public Statement_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IOptional<DAST._IExpression> maybeValue) : base() {
      this._name = name;
      this._typ = typ;
      this._maybeValue = maybeValue;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_DeclareVar(_name, _typ, _maybeValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_DeclareVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._maybeValue, oth._maybeValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._maybeValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.DeclareVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._maybeValue);
      s += ")";
      return s;
    }
  }
  public class Statement_Assign : Statement {
    public readonly DAST._IAssignLhs _lhs;
    public readonly DAST._IExpression _value;
    public Statement_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) : base() {
      this._lhs = lhs;
      this._value = @value;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Assign(_lhs, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Assign;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Assign";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Statement_If : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _thn;
    public readonly Dafny.ISequence<DAST._IStatement> _els;
    public Statement_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_If(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_If;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.If";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Statement_Labeled : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._lbl = lbl;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Labeled(_lbl, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Labeled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Labeled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_While : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._cond = cond;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_While(_cond, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_While;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.While";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Foreach : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _boundName;
    public readonly DAST._IType _boundType;
    public readonly DAST._IExpression _over;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._boundName = boundName;
      this._boundType = boundType;
      this._over = over;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Foreach(_boundName, _boundType, _over, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Foreach;
      return oth != null && object.Equals(this._boundName, oth._boundName) && object.Equals(this._boundType, oth._boundType) && object.Equals(this._over, oth._over) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._over));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Foreach";
      s += "(";
      s += this._boundName.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._boundType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._over);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Call : Statement {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outs;
    public Statement_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
      this._outs = outs;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Call(_on, _name, _typeArgs, _args, _outs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args) && object.Equals(this._outs, oth._outs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outs);
      s += ")";
      return s;
    }
  }
  public class Statement_Return : Statement {
    public readonly DAST._IExpression _expr;
    public Statement_Return(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Return(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Return;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Statement_EarlyReturn : Statement {
    public Statement_EarlyReturn() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_EarlyReturn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_EarlyReturn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.EarlyReturn";
      return s;
    }
  }
  public class Statement_Break : Statement {
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _toLabel;
    public Statement_Break(DAST._IOptional<Dafny.ISequence<Dafny.Rune>> toLabel) : base() {
      this._toLabel = toLabel;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Break(_toLabel);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Break;
      return oth != null && object.Equals(this._toLabel, oth._toLabel);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._toLabel));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._toLabel);
      s += ")";
      return s;
    }
  }
  public class Statement_TailRecursive : Statement {
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_TailRecursive(Dafny.ISequence<DAST._IStatement> body) : base() {
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_TailRecursive(_body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_TailRecursive;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.TailRecursive";
      s += "(";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_JumpTailCallStart : Statement {
    public Statement_JumpTailCallStart() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_JumpTailCallStart();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_JumpTailCallStart;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.JumpTailCallStart";
      return s;
    }
  }
  public class Statement_Halt : Statement {
    public Statement_Halt() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Halt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Halt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Halt";
      return s;
    }
  }
  public class Statement_Print : Statement {
    public readonly DAST._IExpression _a0;
    public Statement_Print(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IAssignLhs {
    bool is_Ident { get; }
    bool is_Select { get; }
    bool is_Index { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    DAST._IExpression dtor_expr { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    _IAssignLhs DowncastClone();
  }
  public abstract class AssignLhs : _IAssignLhs {
    public AssignLhs() {
    }
    private static readonly DAST._IAssignLhs theDefault = create_Ident(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._IAssignLhs Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IAssignLhs> _TYPE = new Dafny.TypeDescriptor<DAST._IAssignLhs>(DAST.AssignLhs.Default());
    public static Dafny.TypeDescriptor<DAST._IAssignLhs> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignLhs create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new AssignLhs_Ident(_a0);
    }
    public static _IAssignLhs create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) {
      return new AssignLhs_Select(expr, field);
    }
    public static _IAssignLhs create_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) {
      return new AssignLhs_Index(expr, indices);
    }
    public bool is_Ident { get { return this is AssignLhs_Ident; } }
    public bool is_Select { get { return this is AssignLhs_Select; } }
    public bool is_Index { get { return this is AssignLhs_Index; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((AssignLhs_Ident)d)._a0;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is AssignLhs_Select) { return ((AssignLhs_Select)d)._expr; }
        return ((AssignLhs_Index)d)._expr;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((AssignLhs_Select)d)._field;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((AssignLhs_Index)d)._indices;
      }
    }
    public abstract _IAssignLhs DowncastClone();
  }
  public class AssignLhs_Ident : AssignLhs {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public AssignLhs_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Ident";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Select : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public AssignLhs_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._expr = expr;
      this._field = field;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Select(_expr, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Index : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public AssignLhs_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._indices = indices;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Index(_expr, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }

  public interface _ICollKind {
    bool is_Seq { get; }
    bool is_Array { get; }
    bool is_Map { get; }
    _ICollKind DowncastClone();
  }
  public abstract class CollKind : _ICollKind {
    public CollKind() {
    }
    private static readonly DAST._ICollKind theDefault = create_Seq();
    public static DAST._ICollKind Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICollKind> _TYPE = new Dafny.TypeDescriptor<DAST._ICollKind>(DAST.CollKind.Default());
    public static Dafny.TypeDescriptor<DAST._ICollKind> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICollKind create_Seq() {
      return new CollKind_Seq();
    }
    public static _ICollKind create_Array() {
      return new CollKind_Array();
    }
    public static _ICollKind create_Map() {
      return new CollKind_Map();
    }
    public bool is_Seq { get { return this is CollKind_Seq; } }
    public bool is_Array { get { return this is CollKind_Array; } }
    public bool is_Map { get { return this is CollKind_Map; } }
    public static System.Collections.Generic.IEnumerable<_ICollKind> AllSingletonConstructors {
      get {
        yield return CollKind.create_Seq();
        yield return CollKind.create_Array();
        yield return CollKind.create_Map();
      }
    }
    public abstract _ICollKind DowncastClone();
  }
  public class CollKind_Seq : CollKind {
    public CollKind_Seq() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Seq();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Seq;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Seq";
      return s;
    }
  }
  public class CollKind_Array : CollKind {
    public CollKind_Array() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Array();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Array;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Array";
      return s;
    }
  }
  public class CollKind_Map : CollKind {
    public CollKind_Map() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Map();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Map;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Map";
      return s;
    }
  }

  public interface _IBinOp {
    bool is_Eq { get; }
    bool is_Neq { get; }
    bool is_Div { get; }
    bool is_EuclidianDiv { get; }
    bool is_Mod { get; }
    bool is_EuclidianMod { get; }
    bool is_Implies { get; }
    bool is_In { get; }
    bool is_NotIn { get; }
    bool is_SetDifference { get; }
    bool is_Concat { get; }
    bool is_Passthrough { get; }
    bool dtor_referential { get; }
    bool dtor_nullable { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    _IBinOp DowncastClone();
  }
  public abstract class BinOp : _IBinOp {
    public BinOp() {
    }
    private static readonly DAST._IBinOp theDefault = create_Eq(false, false);
    public static DAST._IBinOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IBinOp> _TYPE = new Dafny.TypeDescriptor<DAST._IBinOp>(DAST.BinOp.Default());
    public static Dafny.TypeDescriptor<DAST._IBinOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOp create_Eq(bool referential, bool nullable) {
      return new BinOp_Eq(referential, nullable);
    }
    public static _IBinOp create_Neq(bool referential, bool nullable) {
      return new BinOp_Neq(referential, nullable);
    }
    public static _IBinOp create_Div() {
      return new BinOp_Div();
    }
    public static _IBinOp create_EuclidianDiv() {
      return new BinOp_EuclidianDiv();
    }
    public static _IBinOp create_Mod() {
      return new BinOp_Mod();
    }
    public static _IBinOp create_EuclidianMod() {
      return new BinOp_EuclidianMod();
    }
    public static _IBinOp create_Implies() {
      return new BinOp_Implies();
    }
    public static _IBinOp create_In() {
      return new BinOp_In();
    }
    public static _IBinOp create_NotIn() {
      return new BinOp_NotIn();
    }
    public static _IBinOp create_SetDifference() {
      return new BinOp_SetDifference();
    }
    public static _IBinOp create_Concat() {
      return new BinOp_Concat();
    }
    public static _IBinOp create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new BinOp_Passthrough(_a0);
    }
    public bool is_Eq { get { return this is BinOp_Eq; } }
    public bool is_Neq { get { return this is BinOp_Neq; } }
    public bool is_Div { get { return this is BinOp_Div; } }
    public bool is_EuclidianDiv { get { return this is BinOp_EuclidianDiv; } }
    public bool is_Mod { get { return this is BinOp_Mod; } }
    public bool is_EuclidianMod { get { return this is BinOp_EuclidianMod; } }
    public bool is_Implies { get { return this is BinOp_Implies; } }
    public bool is_In { get { return this is BinOp_In; } }
    public bool is_NotIn { get { return this is BinOp_NotIn; } }
    public bool is_SetDifference { get { return this is BinOp_SetDifference; } }
    public bool is_Concat { get { return this is BinOp_Concat; } }
    public bool is_Passthrough { get { return this is BinOp_Passthrough; } }
    public bool dtor_referential {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._referential; }
        return ((BinOp_Neq)d)._referential;
      }
    }
    public bool dtor_nullable {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._nullable; }
        return ((BinOp_Neq)d)._nullable;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((BinOp_Passthrough)d)._a0;
      }
    }
    public abstract _IBinOp DowncastClone();
  }
  public class BinOp_Eq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Eq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Eq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Eq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Eq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Neq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Neq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Neq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Neq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Neq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Div : BinOp {
    public BinOp_Div() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Div();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Div;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Div";
      return s;
    }
  }
  public class BinOp_EuclidianDiv : BinOp {
    public BinOp_EuclidianDiv() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianDiv();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianDiv;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianDiv";
      return s;
    }
  }
  public class BinOp_Mod : BinOp {
    public BinOp_Mod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Mod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Mod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Mod";
      return s;
    }
  }
  public class BinOp_EuclidianMod : BinOp {
    public BinOp_EuclidianMod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianMod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianMod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianMod";
      return s;
    }
  }
  public class BinOp_Implies : BinOp {
    public BinOp_Implies() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Implies();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Implies;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Implies";
      return s;
    }
  }
  public class BinOp_In : BinOp {
    public BinOp_In() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_In();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_In;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.In";
      return s;
    }
  }
  public class BinOp_NotIn : BinOp {
    public BinOp_NotIn() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_NotIn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_NotIn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.NotIn";
      return s;
    }
  }
  public class BinOp_SetDifference : BinOp {
    public BinOp_SetDifference() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetDifference();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetDifference;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetDifference";
      return s;
    }
  }
  public class BinOp_Concat : BinOp {
    public BinOp_Concat() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Concat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Concat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Concat";
      return s;
    }
  }
  public class BinOp_Passthrough : BinOp {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public BinOp_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IExpression {
    bool is_Literal { get; }
    bool is_Ident { get; }
    bool is_Companion { get; }
    bool is_Tuple { get; }
    bool is_New { get; }
    bool is_NewArray { get; }
    bool is_DatatypeValue { get; }
    bool is_Convert { get; }
    bool is_SeqConstruct { get; }
    bool is_SeqValue { get; }
    bool is_SetValue { get; }
    bool is_MapValue { get; }
    bool is_This { get; }
    bool is_Ite { get; }
    bool is_UnOp { get; }
    bool is_BinOp { get; }
    bool is_ArrayLen { get; }
    bool is_Select { get; }
    bool is_SelectFn { get; }
    bool is_Index { get; }
    bool is_IndexRange { get; }
    bool is_TupleSelect { get; }
    bool is_Call { get; }
    bool is_Lambda { get; }
    bool is_BetaRedex { get; }
    bool is_IIFE { get; }
    bool is_Apply { get; }
    bool is_TypeTest { get; }
    bool is_InitializationValue { get; }
    bool is_BoolBoundedPool { get; }
    bool is_SetBoundedPool { get; }
    bool is_SeqBoundedPool { get; }
    bool is_IntRange { get; }
    DAST._ILiteral dtor_Literal_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 { get; }
    Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Dafny.ISequence<DAST._IExpression> dtor_dims { get; }
    DAST._IType dtor_typ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_variant { get; }
    bool dtor_isCo { get; }
    Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IType dtor_from { get; }
    DAST._IExpression dtor_length { get; }
    DAST._IExpression dtor_elem { get; }
    Dafny.ISequence<DAST._IExpression> dtor_elements { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems { get; }
    DAST._IExpression dtor_cond { get; }
    DAST._IExpression dtor_thn { get; }
    DAST._IExpression dtor_els { get; }
    DAST._IUnaryOp dtor_unOp { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IBinOp dtor_op { get; }
    DAST._IExpression dtor_left { get; }
    DAST._IExpression dtor_right { get; }
    BigInteger dtor_dim { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    bool dtor_isConstant { get; }
    bool dtor_onDatatype { get; }
    bool dtor_isStatic { get; }
    BigInteger dtor_arity { get; }
    DAST._ICollKind dtor_collKind { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    bool dtor_isArray { get; }
    DAST._IOptional<DAST._IExpression> dtor_low { get; }
    DAST._IOptional<DAST._IExpression> dtor_high { get; }
    BigInteger dtor_index { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    DAST._IType dtor_retType { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values { get; }
    DAST._IExpression dtor_iifeBody { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType { get; }
    DAST._IExpression dtor_of { get; }
    bool dtor_includeDuplicates { get; }
    DAST._IExpression dtor_lo { get; }
    DAST._IExpression dtor_hi { get; }
    _IExpression DowncastClone();
  }
  public abstract class Expression : _IExpression {
    public Expression() {
    }
    private static readonly DAST._IExpression theDefault = create_Literal(DAST.Literal.Default());
    public static DAST._IExpression Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IExpression> _TYPE = new Dafny.TypeDescriptor<DAST._IExpression>(DAST.Expression.Default());
    public static Dafny.TypeDescriptor<DAST._IExpression> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpression create_Literal(DAST._ILiteral _a0) {
      return new Expression_Literal(_a0);
    }
    public static _IExpression create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expression_Ident(_a0);
    }
    public static _IExpression create_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) {
      return new Expression_Companion(_a0);
    }
    public static _IExpression create_Tuple(Dafny.ISequence<DAST._IExpression> _a0) {
      return new Expression_Tuple(_a0);
    }
    public static _IExpression create_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_New(path, typeArgs, args);
    }
    public static _IExpression create_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) {
      return new Expression_NewArray(dims, typ);
    }
    public static _IExpression create_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) {
      return new Expression_DatatypeValue(path, typeArgs, variant, isCo, contents);
    }
    public static _IExpression create_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) {
      return new Expression_Convert(@value, @from, typ);
    }
    public static _IExpression create_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) {
      return new Expression_SeqConstruct(length, elem);
    }
    public static _IExpression create_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) {
      return new Expression_SeqValue(elements, typ);
    }
    public static _IExpression create_SetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_SetValue(elements);
    }
    public static _IExpression create_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) {
      return new Expression_MapValue(mapElems);
    }
    public static _IExpression create_This() {
      return new Expression_This();
    }
    public static _IExpression create_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) {
      return new Expression_Ite(cond, thn, els);
    }
    public static _IExpression create_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) {
      return new Expression_UnOp(unOp, expr);
    }
    public static _IExpression create_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) {
      return new Expression_BinOp(op, left, right);
    }
    public static _IExpression create_ArrayLen(DAST._IExpression expr, BigInteger dim) {
      return new Expression_ArrayLen(expr, dim);
    }
    public static _IExpression create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) {
      return new Expression_Select(expr, field, isConstant, onDatatype);
    }
    public static _IExpression create_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) {
      return new Expression_SelectFn(expr, field, onDatatype, isStatic, arity);
    }
    public static _IExpression create_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) {
      return new Expression_Index(expr, collKind, indices);
    }
    public static _IExpression create_IndexRange(DAST._IExpression expr, bool isArray, DAST._IOptional<DAST._IExpression> low, DAST._IOptional<DAST._IExpression> high) {
      return new Expression_IndexRange(expr, isArray, low, high);
    }
    public static _IExpression create_TupleSelect(DAST._IExpression expr, BigInteger index) {
      return new Expression_TupleSelect(expr, index);
    }
    public static _IExpression create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Call(@on, name, typeArgs, args);
    }
    public static _IExpression create_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) {
      return new Expression_Lambda(@params, retType, body);
    }
    public static _IExpression create_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) {
      return new Expression_BetaRedex(values, retType, expr);
    }
    public static _IExpression create_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) {
      return new Expression_IIFE(name, typ, @value, iifeBody);
    }
    public static _IExpression create_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Apply(expr, args);
    }
    public static _IExpression create_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) {
      return new Expression_TypeTest(@on, dType, variant);
    }
    public static _IExpression create_InitializationValue(DAST._IType typ) {
      return new Expression_InitializationValue(typ);
    }
    public static _IExpression create_BoolBoundedPool() {
      return new Expression_BoolBoundedPool();
    }
    public static _IExpression create_SetBoundedPool(DAST._IExpression of) {
      return new Expression_SetBoundedPool(of);
    }
    public static _IExpression create_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) {
      return new Expression_SeqBoundedPool(of, includeDuplicates);
    }
    public static _IExpression create_IntRange(DAST._IExpression lo, DAST._IExpression hi) {
      return new Expression_IntRange(lo, hi);
    }
    public bool is_Literal { get { return this is Expression_Literal; } }
    public bool is_Ident { get { return this is Expression_Ident; } }
    public bool is_Companion { get { return this is Expression_Companion; } }
    public bool is_Tuple { get { return this is Expression_Tuple; } }
    public bool is_New { get { return this is Expression_New; } }
    public bool is_NewArray { get { return this is Expression_NewArray; } }
    public bool is_DatatypeValue { get { return this is Expression_DatatypeValue; } }
    public bool is_Convert { get { return this is Expression_Convert; } }
    public bool is_SeqConstruct { get { return this is Expression_SeqConstruct; } }
    public bool is_SeqValue { get { return this is Expression_SeqValue; } }
    public bool is_SetValue { get { return this is Expression_SetValue; } }
    public bool is_MapValue { get { return this is Expression_MapValue; } }
    public bool is_This { get { return this is Expression_This; } }
    public bool is_Ite { get { return this is Expression_Ite; } }
    public bool is_UnOp { get { return this is Expression_UnOp; } }
    public bool is_BinOp { get { return this is Expression_BinOp; } }
    public bool is_ArrayLen { get { return this is Expression_ArrayLen; } }
    public bool is_Select { get { return this is Expression_Select; } }
    public bool is_SelectFn { get { return this is Expression_SelectFn; } }
    public bool is_Index { get { return this is Expression_Index; } }
    public bool is_IndexRange { get { return this is Expression_IndexRange; } }
    public bool is_TupleSelect { get { return this is Expression_TupleSelect; } }
    public bool is_Call { get { return this is Expression_Call; } }
    public bool is_Lambda { get { return this is Expression_Lambda; } }
    public bool is_BetaRedex { get { return this is Expression_BetaRedex; } }
    public bool is_IIFE { get { return this is Expression_IIFE; } }
    public bool is_Apply { get { return this is Expression_Apply; } }
    public bool is_TypeTest { get { return this is Expression_TypeTest; } }
    public bool is_InitializationValue { get { return this is Expression_InitializationValue; } }
    public bool is_BoolBoundedPool { get { return this is Expression_BoolBoundedPool; } }
    public bool is_SetBoundedPool { get { return this is Expression_SetBoundedPool; } }
    public bool is_SeqBoundedPool { get { return this is Expression_SeqBoundedPool; } }
    public bool is_IntRange { get { return this is Expression_IntRange; } }
    public DAST._ILiteral dtor_Literal_a0 {
      get {
        var d = this;
        return ((Expression_Literal)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((Expression_Ident)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 {
      get {
        var d = this;
        return ((Expression_Companion)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Expression_Tuple)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._path; }
        return ((Expression_DatatypeValue)d)._path;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._typeArgs; }
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._typeArgs; }
        return ((Expression_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._args; }
        if (d is Expression_Call) { return ((Expression_Call)d)._args; }
        return ((Expression_Apply)d)._args;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_dims {
      get {
        var d = this;
        return ((Expression_NewArray)d)._dims;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        if (d is Expression_NewArray) { return ((Expression_NewArray)d)._typ; }
        if (d is Expression_Convert) { return ((Expression_Convert)d)._typ; }
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._typ; }
        if (d is Expression_IIFE) { return ((Expression_IIFE)d)._typ; }
        return ((Expression_InitializationValue)d)._typ;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_variant {
      get {
        var d = this;
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._variant; }
        return ((Expression_TypeTest)d)._variant;
      }
    }
    public bool dtor_isCo {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._isCo;
      }
    }
    public Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._contents;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        if (d is Expression_Convert) { return ((Expression_Convert)d)._value; }
        return ((Expression_IIFE)d)._value;
      }
    }
    public DAST._IType dtor_from {
      get {
        var d = this;
        return ((Expression_Convert)d)._from;
      }
    }
    public DAST._IExpression dtor_length {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._length;
      }
    }
    public DAST._IExpression dtor_elem {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._elem;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_elements {
      get {
        var d = this;
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._elements; }
        return ((Expression_SetValue)d)._elements;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems {
      get {
        var d = this;
        return ((Expression_MapValue)d)._mapElems;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        return ((Expression_Ite)d)._cond;
      }
    }
    public DAST._IExpression dtor_thn {
      get {
        var d = this;
        return ((Expression_Ite)d)._thn;
      }
    }
    public DAST._IExpression dtor_els {
      get {
        var d = this;
        return ((Expression_Ite)d)._els;
      }
    }
    public DAST._IUnaryOp dtor_unOp {
      get {
        var d = this;
        return ((Expression_UnOp)d)._unOp;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is Expression_UnOp) { return ((Expression_UnOp)d)._expr; }
        if (d is Expression_ArrayLen) { return ((Expression_ArrayLen)d)._expr; }
        if (d is Expression_Select) { return ((Expression_Select)d)._expr; }
        if (d is Expression_SelectFn) { return ((Expression_SelectFn)d)._expr; }
        if (d is Expression_Index) { return ((Expression_Index)d)._expr; }
        if (d is Expression_IndexRange) { return ((Expression_IndexRange)d)._expr; }
        if (d is Expression_TupleSelect) { return ((Expression_TupleSelect)d)._expr; }
        if (d is Expression_BetaRedex) { return ((Expression_BetaRedex)d)._expr; }
        return ((Expression_Apply)d)._expr;
      }
    }
    public DAST._IBinOp dtor_op {
      get {
        var d = this;
        return ((Expression_BinOp)d)._op;
      }
    }
    public DAST._IExpression dtor_left {
      get {
        var d = this;
        return ((Expression_BinOp)d)._left;
      }
    }
    public DAST._IExpression dtor_right {
      get {
        var d = this;
        return ((Expression_BinOp)d)._right;
      }
    }
    public BigInteger dtor_dim {
      get {
        var d = this;
        return ((Expression_ArrayLen)d)._dim;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._field; }
        return ((Expression_SelectFn)d)._field;
      }
    }
    public bool dtor_isConstant {
      get {
        var d = this;
        return ((Expression_Select)d)._isConstant;
      }
    }
    public bool dtor_onDatatype {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._onDatatype; }
        return ((Expression_SelectFn)d)._onDatatype;
      }
    }
    public bool dtor_isStatic {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._isStatic;
      }
    }
    public BigInteger dtor_arity {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._arity;
      }
    }
    public DAST._ICollKind dtor_collKind {
      get {
        var d = this;
        return ((Expression_Index)d)._collKind;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((Expression_Index)d)._indices;
      }
    }
    public bool dtor_isArray {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._isArray;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_low {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._low;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_high {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._high;
      }
    }
    public BigInteger dtor_index {
      get {
        var d = this;
        return ((Expression_TupleSelect)d)._index;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._on; }
        return ((Expression_TypeTest)d)._on;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._name; }
        return ((Expression_IIFE)d)._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        var d = this;
        return ((Expression_Lambda)d)._params;
      }
    }
    public DAST._IType dtor_retType {
      get {
        var d = this;
        if (d is Expression_Lambda) { return ((Expression_Lambda)d)._retType; }
        return ((Expression_BetaRedex)d)._retType;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        return ((Expression_Lambda)d)._body;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values {
      get {
        var d = this;
        return ((Expression_BetaRedex)d)._values;
      }
    }
    public DAST._IExpression dtor_iifeBody {
      get {
        var d = this;
        return ((Expression_IIFE)d)._iifeBody;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType {
      get {
        var d = this;
        return ((Expression_TypeTest)d)._dType;
      }
    }
    public DAST._IExpression dtor_of {
      get {
        var d = this;
        if (d is Expression_SetBoundedPool) { return ((Expression_SetBoundedPool)d)._of; }
        return ((Expression_SeqBoundedPool)d)._of;
      }
    }
    public bool dtor_includeDuplicates {
      get {
        var d = this;
        return ((Expression_SeqBoundedPool)d)._includeDuplicates;
      }
    }
    public DAST._IExpression dtor_lo {
      get {
        var d = this;
        return ((Expression_IntRange)d)._lo;
      }
    }
    public DAST._IExpression dtor_hi {
      get {
        var d = this;
        return ((Expression_IntRange)d)._hi;
      }
    }
    public abstract _IExpression DowncastClone();
  }
  public class Expression_Literal : Expression {
    public readonly DAST._ILiteral _a0;
    public Expression_Literal(DAST._ILiteral _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Literal(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Literal;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Literal";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Ident : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expression_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ident";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_Companion : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public Expression_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Companion(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Companion;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Companion";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Tuple : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _a0;
    public Expression_Tuple(Dafny.ISequence<DAST._IExpression> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_New : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_New(_path, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_New;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_NewArray : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _dims;
    public readonly DAST._IType _typ;
    public Expression_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) : base() {
      this._dims = dims;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_NewArray(_dims, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_NewArray;
      return oth != null && object.Equals(this._dims, oth._dims) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.NewArray";
      s += "(";
      s += Dafny.Helpers.ToString(this._dims);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_DatatypeValue : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public readonly bool _isCo;
    public readonly Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _contents;
    public Expression_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._variant = variant;
      this._isCo = isCo;
      this._contents = contents;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_DatatypeValue(_path, _typeArgs, _variant, _isCo, _contents);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_DatatypeValue;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._variant, oth._variant) && this._isCo == oth._isCo && object.Equals(this._contents, oth._contents);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._contents));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.DatatypeValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._contents);
      s += ")";
      return s;
    }
  }
  public class Expression_Convert : Expression {
    public readonly DAST._IExpression _value;
    public readonly DAST._IType _from;
    public readonly DAST._IType _typ;
    public Expression_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) : base() {
      this._value = @value;
      this._from = @from;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Convert(_value, _from, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Convert;
      return oth != null && object.Equals(this._value, oth._value) && object.Equals(this._from, oth._from) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._from));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Convert";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._from);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqConstruct : Expression {
    public readonly DAST._IExpression _length;
    public readonly DAST._IExpression _elem;
    public Expression_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) : base() {
      this._length = length;
      this._elem = elem;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqConstruct(_length, _elem);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqConstruct;
      return oth != null && object.Equals(this._length, oth._length) && object.Equals(this._elem, oth._elem);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._length));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elem));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqConstruct";
      s += "(";
      s += Dafny.Helpers.ToString(this._length);
      s += ", ";
      s += Dafny.Helpers.ToString(this._elem);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public readonly DAST._IType _typ;
    public Expression_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) : base() {
      this._elements = elements;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqValue(_elements, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqValue;
      return oth != null && object.Equals(this._elements, oth._elements) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_SetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValue : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _mapElems;
    public Expression_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) : base() {
      this._mapElems = mapElems;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValue(_mapElems);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValue;
      return oth != null && object.Equals(this._mapElems, oth._mapElems);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mapElems));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._mapElems);
      s += ")";
      return s;
    }
  }
  public class Expression_This : Expression {
    public Expression_This() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_This();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_This;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.This";
      return s;
    }
  }
  public class Expression_Ite : Expression {
    public readonly DAST._IExpression _cond;
    public readonly DAST._IExpression _thn;
    public readonly DAST._IExpression _els;
    public Expression_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ite(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ite;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expression_UnOp : Expression {
    public readonly DAST._IUnaryOp _unOp;
    public readonly DAST._IExpression _expr;
    public Expression_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) : base() {
      this._unOp = unOp;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_UnOp(_unOp, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_UnOp;
      return oth != null && object.Equals(this._unOp, oth._unOp) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._unOp));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.UnOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._unOp);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_BinOp : Expression {
    public readonly DAST._IBinOp _op;
    public readonly DAST._IExpression _left;
    public readonly DAST._IExpression _right;
    public Expression_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) : base() {
      this._op = op;
      this._left = left;
      this._right = right;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BinOp(_op, _left, _right);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BinOp;
      return oth != null && object.Equals(this._op, oth._op) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BinOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._op);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ")";
      return s;
    }
  }
  public class Expression_ArrayLen : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _dim;
    public Expression_ArrayLen(DAST._IExpression expr, BigInteger dim) : base() {
      this._expr = expr;
      this._dim = dim;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ArrayLen(_expr, _dim);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ArrayLen;
      return oth != null && object.Equals(this._expr, oth._expr) && this._dim == oth._dim;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dim));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ArrayLen";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dim);
      s += ")";
      return s;
    }
  }
  public class Expression_Select : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _isConstant;
    public readonly bool _onDatatype;
    public Expression_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) : base() {
      this._expr = expr;
      this._field = field;
      this._isConstant = isConstant;
      this._onDatatype = onDatatype;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Select(_expr, _field, _isConstant, _onDatatype);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._isConstant == oth._isConstant && this._onDatatype == oth._onDatatype;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isConstant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isConstant);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ")";
      return s;
    }
  }
  public class Expression_SelectFn : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _onDatatype;
    public readonly bool _isStatic;
    public readonly BigInteger _arity;
    public Expression_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) : base() {
      this._expr = expr;
      this._field = field;
      this._onDatatype = onDatatype;
      this._isStatic = isStatic;
      this._arity = arity;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SelectFn(_expr, _field, _onDatatype, _isStatic, _arity);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SelectFn;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._onDatatype == oth._onDatatype && this._isStatic == oth._isStatic && this._arity == oth._arity;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arity));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SelectFn";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arity);
      s += ")";
      return s;
    }
  }
  public class Expression_Index : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._ICollKind _collKind;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public Expression_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._collKind = collKind;
      this._indices = indices;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Index(_expr, _collKind, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._collKind, oth._collKind) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._collKind));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._collKind);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }
  public class Expression_IndexRange : Expression {
    public readonly DAST._IExpression _expr;
    public readonly bool _isArray;
    public readonly DAST._IOptional<DAST._IExpression> _low;
    public readonly DAST._IOptional<DAST._IExpression> _high;
    public Expression_IndexRange(DAST._IExpression expr, bool isArray, DAST._IOptional<DAST._IExpression> low, DAST._IOptional<DAST._IExpression> high) : base() {
      this._expr = expr;
      this._isArray = isArray;
      this._low = low;
      this._high = high;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IndexRange(_expr, _isArray, _low, _high);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IndexRange;
      return oth != null && object.Equals(this._expr, oth._expr) && this._isArray == oth._isArray && object.Equals(this._low, oth._low) && object.Equals(this._high, oth._high);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isArray));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._low));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._high));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IndexRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isArray);
      s += ", ";
      s += Dafny.Helpers.ToString(this._low);
      s += ", ";
      s += Dafny.Helpers.ToString(this._high);
      s += ")";
      return s;
    }
  }
  public class Expression_TupleSelect : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _index;
    public Expression_TupleSelect(DAST._IExpression expr, BigInteger index) : base() {
      this._expr = expr;
      this._index = index;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TupleSelect(_expr, _index);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TupleSelect;
      return oth != null && object.Equals(this._expr, oth._expr) && this._index == oth._index;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._index));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TupleSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._index);
      s += ")";
      return s;
    }
  }
  public class Expression_Call : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Call(_on, _name, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_Lambda : Expression {
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly DAST._IType _retType;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Expression_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._params = @params;
      this._retType = retType;
      this._body = body;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Lambda(_params, _retType, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Lambda;
      return oth != null && object.Equals(this._params, oth._params) && object.Equals(this._retType, oth._retType) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Lambda";
      s += "(";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expression_BetaRedex : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _values;
    public readonly DAST._IType _retType;
    public readonly DAST._IExpression _expr;
    public Expression_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) : base() {
      this._values = values;
      this._retType = retType;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BetaRedex(_values, _retType, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BetaRedex;
      return oth != null && object.Equals(this._values, oth._values) && object.Equals(this._retType, oth._retType) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._values));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BetaRedex";
      s += "(";
      s += Dafny.Helpers.ToString(this._values);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_IIFE : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IExpression _value;
    public readonly DAST._IExpression _iifeBody;
    public Expression_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) : base() {
      this._name = name;
      this._typ = typ;
      this._value = @value;
      this._iifeBody = iifeBody;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IIFE(_name, _typ, _value, _iifeBody);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IIFE;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._value, oth._value) && object.Equals(this._iifeBody, oth._iifeBody);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._iifeBody));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IIFE";
      s += "(";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._iifeBody);
      s += ")";
      return s;
    }
  }
  public class Expression_Apply : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._expr = expr;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Apply(_expr, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Apply;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Apply";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_TypeTest : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _dType;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public Expression_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) : base() {
      this._on = @on;
      this._dType = dType;
      this._variant = variant;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TypeTest(_on, _dType, _variant);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TypeTest;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._dType, oth._dType) && object.Equals(this._variant, oth._variant);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TypeTest";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dType);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_InitializationValue : Expression {
    public readonly DAST._IType _typ;
    public Expression_InitializationValue(DAST._IType typ) : base() {
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_InitializationValue(_typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_InitializationValue;
      return oth != null && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.InitializationValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_BoolBoundedPool : Expression {
    public Expression_BoolBoundedPool() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BoolBoundedPool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BoolBoundedPool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BoolBoundedPool";
      return s;
    }
  }
  public class Expression_SetBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public Expression_SetBoundedPool(DAST._IExpression of) : base() {
      this._of = of;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBoundedPool(_of);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBoundedPool;
      return oth != null && object.Equals(this._of, oth._of);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public readonly bool _includeDuplicates;
    public Expression_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) : base() {
      this._of = of;
      this._includeDuplicates = includeDuplicates;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqBoundedPool(_of, _includeDuplicates);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqBoundedPool;
      return oth != null && object.Equals(this._of, oth._of) && this._includeDuplicates == oth._includeDuplicates;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._includeDuplicates));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ", ";
      s += Dafny.Helpers.ToString(this._includeDuplicates);
      s += ")";
      return s;
    }
  }
  public class Expression_IntRange : Expression {
    public readonly DAST._IExpression _lo;
    public readonly DAST._IExpression _hi;
    public Expression_IntRange(DAST._IExpression lo, DAST._IExpression hi) : base() {
      this._lo = lo;
      this._hi = hi;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IntRange(_lo, _hi);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IntRange;
      return oth != null && object.Equals(this._lo, oth._lo) && object.Equals(this._hi, oth._hi);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hi));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IntRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._lo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hi);
      s += ")";
      return s;
    }
  }

  public interface _IUnaryOp {
    bool is_Not { get; }
    bool is_BitwiseNot { get; }
    bool is_Cardinality { get; }
    _IUnaryOp DowncastClone();
  }
  public abstract class UnaryOp : _IUnaryOp {
    public UnaryOp() {
    }
    private static readonly DAST._IUnaryOp theDefault = create_Not();
    public static DAST._IUnaryOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IUnaryOp> _TYPE = new Dafny.TypeDescriptor<DAST._IUnaryOp>(DAST.UnaryOp.Default());
    public static Dafny.TypeDescriptor<DAST._IUnaryOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnaryOp create_Not() {
      return new UnaryOp_Not();
    }
    public static _IUnaryOp create_BitwiseNot() {
      return new UnaryOp_BitwiseNot();
    }
    public static _IUnaryOp create_Cardinality() {
      return new UnaryOp_Cardinality();
    }
    public bool is_Not { get { return this is UnaryOp_Not; } }
    public bool is_BitwiseNot { get { return this is UnaryOp_BitwiseNot; } }
    public bool is_Cardinality { get { return this is UnaryOp_Cardinality; } }
    public static System.Collections.Generic.IEnumerable<_IUnaryOp> AllSingletonConstructors {
      get {
        yield return UnaryOp.create_Not();
        yield return UnaryOp.create_BitwiseNot();
        yield return UnaryOp.create_Cardinality();
      }
    }
    public abstract _IUnaryOp DowncastClone();
  }
  public class UnaryOp_Not : UnaryOp {
    public UnaryOp_Not() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Not();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Not;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Not";
      return s;
    }
  }
  public class UnaryOp_BitwiseNot : UnaryOp {
    public UnaryOp_BitwiseNot() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_BitwiseNot();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_BitwiseNot;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.BitwiseNot";
      return s;
    }
  }
  public class UnaryOp_Cardinality : UnaryOp {
    public UnaryOp_Cardinality() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Cardinality();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Cardinality;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Cardinality";
      return s;
    }
  }

  public interface _ILiteral {
    bool is_BoolLiteral { get; }
    bool is_IntLiteral { get; }
    bool is_DecLiteral { get; }
    bool is_StringLiteral { get; }
    bool is_CharLiteral { get; }
    bool is_Null { get; }
    bool dtor_BoolLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 { get; }
    DAST._IType dtor_IntLiteral_a1 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 { get; }
    DAST._IType dtor_DecLiteral_a2 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 { get; }
    Dafny.Rune dtor_CharLiteral_a0 { get; }
    DAST._IType dtor_Null_a0 { get; }
    _ILiteral DowncastClone();
  }
  public abstract class Literal : _ILiteral {
    public Literal() {
    }
    private static readonly DAST._ILiteral theDefault = create_BoolLiteral(false);
    public static DAST._ILiteral Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ILiteral> _TYPE = new Dafny.TypeDescriptor<DAST._ILiteral>(DAST.Literal.Default());
    public static Dafny.TypeDescriptor<DAST._ILiteral> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ILiteral create_BoolLiteral(bool _a0) {
      return new Literal_BoolLiteral(_a0);
    }
    public static _ILiteral create_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) {
      return new Literal_IntLiteral(_a0, _a1);
    }
    public static _ILiteral create_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) {
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public static _ILiteral create_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Literal_StringLiteral(_a0);
    }
    public static _ILiteral create_CharLiteral(Dafny.Rune _a0) {
      return new Literal_CharLiteral(_a0);
    }
    public static _ILiteral create_Null(DAST._IType _a0) {
      return new Literal_Null(_a0);
    }
    public bool is_BoolLiteral { get { return this is Literal_BoolLiteral; } }
    public bool is_IntLiteral { get { return this is Literal_IntLiteral; } }
    public bool is_DecLiteral { get { return this is Literal_DecLiteral; } }
    public bool is_StringLiteral { get { return this is Literal_StringLiteral; } }
    public bool is_CharLiteral { get { return this is Literal_CharLiteral; } }
    public bool is_Null { get { return this is Literal_Null; } }
    public bool dtor_BoolLiteral_a0 {
      get {
        var d = this;
        return ((Literal_BoolLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_IntLiteral_a1 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a1;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a1;
      }
    }
    public DAST._IType dtor_DecLiteral_a2 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a2;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 {
      get {
        var d = this;
        return ((Literal_StringLiteral)d)._a0;
      }
    }
    public Dafny.Rune dtor_CharLiteral_a0 {
      get {
        var d = this;
        return ((Literal_CharLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_Null_a0 {
      get {
        var d = this;
        return ((Literal_Null)d)._a0;
      }
    }
    public abstract _ILiteral DowncastClone();
  }
  public class Literal_BoolLiteral : Literal {
    public readonly bool _a0;
    public Literal_BoolLiteral(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_BoolLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_BoolLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.BoolLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_IntLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly DAST._IType _a1;
    public Literal_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_IntLiteral(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_IntLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.IntLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Literal_DecLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly Dafny.ISequence<Dafny.Rune> _a1;
    public readonly DAST._IType _a2;
    public Literal_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
      this._a2 = _a2;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_DecLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1) && object.Equals(this._a2, oth._a2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a2));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.DecLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += this._a1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a2);
      s += ")";
      return s;
    }
  }
  public class Literal_StringLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Literal_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_StringLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_StringLiteral;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.StringLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Literal_CharLiteral : Literal {
    public readonly Dafny.Rune _a0;
    public Literal_CharLiteral(Dafny.Rune _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_CharLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_CharLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.CharLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_Null : Literal {
    public readonly DAST._IType _a0;
    public Literal_Null(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_Null(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_Null;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.Null";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
} // end of namespace DAST
namespace DAM {

  public partial class __default {
    public static DAM._IOption<DAM._IPos> SynthPos(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IPos> g, DAM._IExpr e) {
      DAM._IExpr _source0 = e;
      if (_source0.is_Var) {
        Dafny.ISequence<Dafny.Rune> __mcc_h0 = _source0.dtor_Var_a0;
        Dafny.ISequence<Dafny.Rune> x = __mcc_h0;
        return DAM.Option<DAM._IPos>.create_Some(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IPos>.Select(g, x));
      } else if (_source0.is_Unit) {
        return DAM.Option<DAM._IPos>.create_Some(DAM.Pos.create_Unit());
      } else if (_source0.is_Bool) {
        bool __mcc_h1 = _source0.dtor_Bool_a0;
        return DAM.Option<DAM._IPos>.create_Some(DAM.Pos.create_Bool());
      } else if (_source0.is_Int) {
        BigInteger __mcc_h2 = _source0.dtor_Int_a0;
        return DAM.Option<DAM._IPos>.create_Some(DAM.Pos.create_Int());
      } else if (_source0.is_Thunk) {
        DAM._IStmt __mcc_h3 = _source0.dtor_Thunk_a0;
        DAM._IStmt c = __mcc_h3;
        return DAM.Option<DAM._IPos>.create_Some(DAM.Pos.create_Int());
      } else {
        DAM.Ptr<DAM._IVal> _10___mcc_h4 = _source0.dtor_Ref_a0;
        DAM.Ptr<DAM._IVal> _11_p = _10___mcc_h4;
        return DAM.Option<DAM._IPos>.create_Some(DAM.Pos.create_Int());
      }
    }
    public static bool CheckPos(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IPos> g, DAM._IExpr e, DAM._IPos t) {
      return object.Equals(DAM.__default.SynthPos(g, e), DAM.Option<DAM._IPos>.create_Some(t));
    }
    public static bool CheckNeg(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IPos> g, DAM._IStmt s, DAM._INeg t) {
      return object.Equals(DAM.__default.SynthNeg(g, s), DAM.Option<DAM._INeg>.create_Some(t));
    }
    public static DAM._IOption<DAM._INeg> SynthNeg(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IPos> g, DAM._IStmt s) {
      DAM._IStmt _source1 = s;
      if (_source1.is_Pure) {
        DAM._IExpr _12___mcc_h0 = _source1.dtor_Pure_a0;
        DAM._IExpr _13_e = _12___mcc_h0;
        DAM._IOption<DAM._IPos> _source2 = DAM.__default.SynthPos(g, _13_e);
        if (_source2.is_None) {
          return DAM.Option<DAM._INeg>.create_None();
        } else {
          DAM._IPos _14___mcc_h60 = _source2.dtor_value;
          DAM._IPos _15_t = _14___mcc_h60;
          return DAM.Option<DAM._INeg>.create_Some(DAM.Neg.create_Value(_15_t));
        }
      } else if (_source1.is_Bind) {
        DAM._IStmt _16___mcc_h2 = _source1.dtor_lhs;
        Dafny.ISequence<Dafny.Rune> _17___mcc_h3 = _source1.dtor_var__;
        DAM._IStmt _18___mcc_h4 = _source1.dtor_rhs;
        DAM._IStmt _19_rhs = _18___mcc_h4;
        Dafny.ISequence<Dafny.Rune> _20_var__ = _17___mcc_h3;
        DAM._IStmt _21_lhs = _16___mcc_h2;
        DAM._IOption<DAM._INeg> _source3 = DAM.__default.SynthNeg(g, _21_lhs);
        if (_source3.is_None) {
          return DAM.Option<DAM._INeg>.create_None();
        } else {
          DAM._INeg _22___mcc_h62 = _source3.dtor_value;
          DAM._INeg _source4 = _22___mcc_h62;
          if (_source4.is_Value) {
            DAM._IPos _23___mcc_h64 = _source4.dtor_Value_a0;
            DAM._IPos _24_t = _23___mcc_h64;
            return DAM.__default.SynthNeg(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IPos>.Update(g, _20_var__, _24_t), _19_rhs);
          } else if (_source4.is_Function) {
            DAM._IPos _25___mcc_h66 = _source4.dtor_dom;
            DAM._INeg _26___mcc_h67 = _source4.dtor_cod;
            return DAM.Option<DAM._INeg>.create_None();
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._INeg> _27___mcc_h70 = _source4.dtor_fields;
            return DAM.Option<DAM._INeg>.create_None();
          }
        }
      } else if (_source1.is_Ite) {
        DAM._IExpr _28___mcc_h8 = _source1.dtor_guard;
        DAM._IStmt _29___mcc_h9 = _source1.dtor_then__;
        DAM._IStmt _30___mcc_h10 = _source1.dtor_else__;
        return DAM.Option<DAM._INeg>.create_None();
      } else if (_source1.is_Func) {
        Dafny.ISequence<Dafny.Rune> _31___mcc_h14 = _source1.dtor_bound;
        DAM._IPos _32___mcc_h15 = _source1.dtor_dom;
        DAM._IStmt _33___mcc_h16 = _source1.dtor_body;
        DAM._IStmt _34_body = _33___mcc_h16;
        DAM._IPos _35_dom = _32___mcc_h15;
        Dafny.ISequence<Dafny.Rune> _36_bound = _31___mcc_h14;
        DAM._IOption<DAM._INeg> _37_valueOrError0 = DAM.__default.SynthNeg(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IPos>.Update(g, _36_bound, _35_dom), _34_body);
        if ((_37_valueOrError0).IsFailure()) {
          return (_37_valueOrError0).PropagateFailure();
        } else {
          DAM._INeg _38_cod = (_37_valueOrError0).Extract();
          return DAM.Option<DAM._INeg>.create_Some(DAM.Neg.create_Function(_35_dom, _38_cod));
        }
      } else if (_source1.is_Call) {
        DAM._IStmt _39___mcc_h20 = _source1.dtor_func;
        DAM._IExpr _40___mcc_h21 = _source1.dtor_arg;
        DAM._IExpr _41_arg = _40___mcc_h21;
        DAM._IStmt _42_func = _39___mcc_h20;
        DAM._IOption<DAM._INeg> _source5 = DAM.__default.SynthNeg(g, _42_func);
        if (_source5.is_None) {
          return DAM.Option<DAM._INeg>.create_None();
        } else {
          DAM._INeg _43___mcc_h72 = _source5.dtor_value;
          DAM._INeg _source6 = _43___mcc_h72;
          if (_source6.is_Value) {
            DAM._IPos _44___mcc_h74 = _source6.dtor_Value_a0;
            return DAM.Option<DAM._INeg>.create_None();
          } else if (_source6.is_Function) {
            DAM._IPos _45___mcc_h76 = _source6.dtor_dom;
            DAM._INeg _46___mcc_h77 = _source6.dtor_cod;
            DAM._INeg _47_cod = _46___mcc_h77;
            DAM._IPos _48_dom = _45___mcc_h76;
            if (DAM.__default.CheckPos(g, _41_arg, _48_dom)) {
              return DAM.Option<DAM._INeg>.create_Some(_47_cod);
            } else {
              return DAM.Option<DAM._INeg>.create_None();
            }
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._INeg> _49___mcc_h80 = _source6.dtor_fields;
            return DAM.Option<DAM._INeg>.create_None();
          }
        }
      } else if (_source1.is_Record) {
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IStmt> _50___mcc_h24 = _source1.dtor_fields;
        return DAM.Option<DAM._INeg>.create_None();
      } else if (_source1.is_Select) {
        DAM._IStmt _51___mcc_h26 = _source1.dtor_record;
        Dafny.ISequence<Dafny.Rune> _52___mcc_h27 = _source1.dtor_field;
        Dafny.ISequence<Dafny.Rune> _53_field = _52___mcc_h27;
        DAM._IStmt _54_record = _51___mcc_h26;
        DAM._IOption<DAM._INeg> _source7 = DAM.__default.SynthNeg(g, _54_record);
        if (_source7.is_None) {
          return DAM.Option<DAM._INeg>.create_None();
        } else {
          DAM._INeg _55___mcc_h82 = _source7.dtor_value;
          DAM._INeg _source8 = _55___mcc_h82;
          if (_source8.is_Value) {
            DAM._IPos _56___mcc_h84 = _source8.dtor_Value_a0;
            return DAM.Option<DAM._INeg>.create_None();
          } else if (_source8.is_Function) {
            DAM._IPos _57___mcc_h86 = _source8.dtor_dom;
            DAM._INeg _58___mcc_h87 = _source8.dtor_cod;
            return DAM.Option<DAM._INeg>.create_None();
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._INeg> _59___mcc_h90 = _source8.dtor_fields;
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._INeg> _60_fields = _59___mcc_h90;
            if ((_60_fields).Contains(_53_field)) {
              return DAM.Option<DAM._INeg>.create_Some(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._INeg>.Select(_60_fields, _53_field));
            } else {
              return DAM.Option<DAM._INeg>.create_None();
            }
          }
        }
      } else if (_source1.is_Force) {
        DAM._IExpr _61___mcc_h30 = _source1.dtor_Force_a0;
        DAM._IExpr _62_expr = _61___mcc_h30;
        DAM._IOption<DAM._IPos> _source9 = DAM.__default.SynthPos(g, _62_expr);
        if (_source9.is_None) {
          return DAM.Option<DAM._INeg>.create_None();
        } else {
          DAM._IPos _63___mcc_h92 = _source9.dtor_value;
          DAM._IPos _source10 = _63___mcc_h92;
          if (_source10.is_Unit) {
            return DAM.Option<DAM._INeg>.create_None();
          } else if (_source10.is_Bool) {
            return DAM.Option<DAM._INeg>.create_None();
          } else if (_source10.is_Int) {
            return DAM.Option<DAM._INeg>.create_None();
          } else if (_source10.is_Thunk) {
            DAM._INeg _64___mcc_h94 = _source10.dtor_Thunk_a0;
            DAM._INeg _65_t = _64___mcc_h94;
            return DAM.Option<DAM._INeg>.create_Some(_65_t);
          } else if (_source10.is_Ref) {
            DAM._IPos _66___mcc_h96 = _source10.dtor_Ref_a0;
            return DAM.Option<DAM._INeg>.create_None();
          } else {
            DAM._INeg _67___mcc_h98 = _source10.dtor_Stack_a0;
            return DAM.Option<DAM._INeg>.create_None();
          }
        }
      } else if (_source1.is_Read) {
        DAM._IExpr _68___mcc_h32 = _source1.dtor_ref;
        Dafny.ISequence<Dafny.Rune> _69___mcc_h33 = _source1.dtor_var__;
        DAM._IStmt _70___mcc_h34 = _source1.dtor_cont;
        return DAM.Option<DAM._INeg>.create_None();
      } else if (_source1.is_Write) {
        DAM._IExpr _71___mcc_h38 = _source1.dtor_lvalue;
        DAM._IExpr _72___mcc_h39 = _source1.dtor_rvalue;
        DAM._IStmt _73___mcc_h40 = _source1.dtor_next;
        return DAM.Option<DAM._INeg>.create_None();
      } else if (_source1.is_Print) {
        DAM._IExpr _74___mcc_h44 = _source1.dtor_Print_a0;
        DAM._IStmt _75___mcc_h45 = _source1.dtor_next;
        DAM._IStmt _76_next = _75___mcc_h45;
        DAM._IExpr _77_expr = _74___mcc_h44;
        DAM._IOption<DAM._IPos> _source11 = DAM.__default.SynthPos(g, _77_expr);
        if (_source11.is_None) {
          return DAM.Option<DAM._INeg>.create_None();
        } else {
          DAM._IPos _78___mcc_h100 = _source11.dtor_value;
          return DAM.__default.SynthNeg(g, _76_next);
        }
      } else if (_source1.is_Rec) {
        Dafny.ISequence<Dafny.Rune> _79___mcc_h48 = _source1.dtor_bound;
        DAM._IStmt _80___mcc_h49 = _source1.dtor_body;
        return DAM.Option<DAM._INeg>.create_None();
      } else if (_source1.is_LetCS) {
        Dafny.ISequence<Dafny.Rune> _81___mcc_h52 = _source1.dtor_bound;
        DAM._IStmt _82___mcc_h53 = _source1.dtor_body;
        return DAM.Option<DAM._INeg>.create_None();
      } else {
        DAM._IExpr _83___mcc_h56 = _source1.dtor_stack;
        DAM._IStmt _84___mcc_h57 = _source1.dtor_init;
        return DAM.Option<DAM._INeg>.create_None();
      }
    }
    public static DAM._IStmt Let(DAM._IExpr lhs, Dafny.ISequence<Dafny.Rune> var__, DAM._IPos ty, DAM._IStmt rhs) {
      return DAM.Stmt.create_Call(DAM.Stmt.create_Func(var__, ty, rhs), lhs);
    }
    public static DAM._IStmt Then(DAM._IStmt lhs, DAM._IStmt rhs) {
      return DAM.Stmt.create_Bind(lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"), rhs);
    }
    public static DAM._IStmt Skip() {
      return DAM.Stmt.create_Pure(DAM.Expr.create_Unit());
    }
    public static DAM._IStmt While(DAM._IStmt guard, DAM._IStmt body, DAM._IStmt next) {
      return DAM.Stmt.create_Rec(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while"), DAM.Stmt.create_Bind(guard, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), DAM.Stmt.create_Ite(DAM.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if")), DAM.__default.Then(body, DAM.Stmt.create_Force(DAM.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while")))), next)));
    }
    public static DAM._IVal Eval(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> env, DAM._IExpr expr) {
      DAM._IExpr _source12 = expr;
      if (_source12.is_Var) {
        Dafny.ISequence<Dafny.Rune> _85___mcc_h0 = _source12.dtor_Var_a0;
        Dafny.ISequence<Dafny.Rune> _86_x = _85___mcc_h0;
        return Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IVal>.Select(env, _86_x);
      } else if (_source12.is_Unit) {
        return DAM.Val.create_Unit();
      } else if (_source12.is_Bool) {
        bool _87___mcc_h1 = _source12.dtor_Bool_a0;
        bool _88_b = _87___mcc_h1;
        return DAM.Val.create_Bool(_88_b);
      } else if (_source12.is_Int) {
        BigInteger _89___mcc_h2 = _source12.dtor_Int_a0;
        BigInteger _90_i = _89___mcc_h2;
        return DAM.Val.create_Int(_90_i);
      } else if (_source12.is_Thunk) {
        DAM._IStmt _91___mcc_h3 = _source12.dtor_Thunk_a0;
        DAM._IStmt _92_c = _91___mcc_h3;
        return DAM.Val.create_Thunk(env, _92_c);
      } else {
        DAM.Ptr<DAM._IVal> _93___mcc_h4 = _source12.dtor_Ref_a0;
        DAM.Ptr<DAM._IVal> _94_ptr = _93___mcc_h4;
        return DAM.Val.create_Ref(_94_ptr);
      }
    }
    public static DAM._IOut Step(_System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> state) {
      _System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> _let_tmp_rhs0 = state;
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _95_env = _let_tmp_rhs0.dtor__0;
      DAM._IStmt _96_comp = _let_tmp_rhs0.dtor__1;
      DAM._IStack _97_stack = _let_tmp_rhs0.dtor__2;
      DAM._IStmt _source13 = _96_comp;
      if (_source13.is_Pure) {
        DAM._IExpr _98___mcc_h0 = _source13.dtor_Pure_a0;
        DAM._IExpr _99_expr = _98___mcc_h0;
        DAM._IOption<_System._ITuple2<DAM._IFrame, DAM._IStack>> _source14 = (_97_stack).Pop();
        if (_source14.is_None) {
          return DAM.Out.create_Terminal(DAM.__default.Eval(_95_env, _99_expr));
        } else {
          _System._ITuple2<DAM._IFrame, DAM._IStack> _100___mcc_h30 = _source14.dtor_value;
          _System._ITuple2<DAM._IFrame, DAM._IStack> _source15 = _100___mcc_h30;
          DAM._IFrame _101___mcc_h31 = _source15.dtor__0;
          DAM._IStack _102___mcc_h32 = _source15.dtor__1;
          DAM._IFrame _source16 = _101___mcc_h31;
          if (_source16.is_Bind) {
            Dafny.ISequence<Dafny.Rune> _103___mcc_h35 = _source16.dtor_var__;
            DAM._IStmt _104___mcc_h36 = _source16.dtor_rhs;
            DAM._IStack _105_stack = _102___mcc_h32;
            DAM._IStmt _106_rhs = _104___mcc_h36;
            Dafny.ISequence<Dafny.Rune> _107_var__ = _103___mcc_h35;
            return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IVal>.Update(_95_env, _107_var__, DAM.__default.Eval(_95_env, _99_expr)), _106_rhs, _105_stack));
          } else if (_source16.is_Call) {
            DAM._IExpr _108___mcc_h39 = _source16.dtor_arg;
            return DAM.Out.create_Stuck();
          } else {
            Dafny.ISequence<Dafny.Rune> _109___mcc_h41 = _source16.dtor_field;
            return DAM.Out.create_Stuck();
          }
        }
      } else if (_source13.is_Bind) {
        DAM._IStmt _110___mcc_h1 = _source13.dtor_lhs;
        Dafny.ISequence<Dafny.Rune> _111___mcc_h2 = _source13.dtor_var__;
        DAM._IStmt _112___mcc_h3 = _source13.dtor_rhs;
        DAM._IStmt _113_rhs = _112___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _114_var__ = _111___mcc_h2;
        DAM._IStmt _115_lhs = _110___mcc_h1;
        return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(_95_env, _115_lhs, DAM.Stack.create_Push(DAM.Frame.create_Bind(_114_var__, _113_rhs), _97_stack)));
      } else if (_source13.is_Ite) {
        DAM._IExpr _116___mcc_h4 = _source13.dtor_guard;
        DAM._IStmt _117___mcc_h5 = _source13.dtor_then__;
        DAM._IStmt _118___mcc_h6 = _source13.dtor_else__;
        DAM._IStmt _119_else__ = _118___mcc_h6;
        DAM._IStmt _120_then__ = _117___mcc_h5;
        DAM._IExpr _121_guard = _116___mcc_h4;
        DAM._IVal _source17 = DAM.__default.Eval(_95_env, _121_guard);
        if (_source17.is_Unit) {
          return DAM.Out.create_Stuck();
        } else if (_source17.is_Bool) {
          bool _122___mcc_h43 = _source17.dtor_Bool_a0;
          bool _123_guard = _122___mcc_h43;
          return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(_95_env, ((_123_guard) ? (_120_then__) : (_119_else__)), _97_stack));
        } else if (_source17.is_Int) {
          BigInteger _124___mcc_h45 = _source17.dtor_Int_a0;
          return DAM.Out.create_Stuck();
        } else if (_source17.is_Thunk) {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _125___mcc_h47 = _source17.dtor_Thunk_a0;
          DAM._IStmt _126___mcc_h48 = _source17.dtor_Thunk_a1;
          return DAM.Out.create_Stuck();
        } else if (_source17.is_Ref) {
          DAM.Ptr<DAM._IVal> _127___mcc_h51 = _source17.dtor_Ref_a0;
          return DAM.Out.create_Stuck();
        } else {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _128___mcc_h53 = _source17.dtor_Stack_a0;
          DAM._IStack _129___mcc_h54 = _source17.dtor_Stack_a1;
          return DAM.Out.create_Stuck();
        }
      } else if (_source13.is_Func) {
        Dafny.ISequence<Dafny.Rune> _130___mcc_h7 = _source13.dtor_bound;
        DAM._IPos _131___mcc_h8 = _source13.dtor_dom;
        DAM._IStmt _132___mcc_h9 = _source13.dtor_body;
        DAM._IStmt _133_body = _132___mcc_h9;
        Dafny.ISequence<Dafny.Rune> _134_bound = _130___mcc_h7;
        DAM._IOption<_System._ITuple2<DAM._IFrame, DAM._IStack>> _source18 = (_97_stack).Pop();
        if (_source18.is_None) {
          return DAM.Out.create_Terminal(DAM.Val.create_Thunk(_95_env, _96_comp));
        } else {
          _System._ITuple2<DAM._IFrame, DAM._IStack> _135___mcc_h57 = _source18.dtor_value;
          _System._ITuple2<DAM._IFrame, DAM._IStack> _source19 = _135___mcc_h57;
          DAM._IFrame _136___mcc_h58 = _source19.dtor__0;
          DAM._IStack _137___mcc_h59 = _source19.dtor__1;
          DAM._IFrame _source20 = _136___mcc_h58;
          if (_source20.is_Bind) {
            Dafny.ISequence<Dafny.Rune> _138___mcc_h62 = _source20.dtor_var__;
            DAM._IStmt _139___mcc_h63 = _source20.dtor_rhs;
            return DAM.Out.create_Stuck();
          } else if (_source20.is_Call) {
            DAM._IExpr _140___mcc_h66 = _source20.dtor_arg;
            DAM._IStack _141_stack = _137___mcc_h59;
            DAM._IExpr _142_arg = _140___mcc_h66;
            return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IVal>.Update(_95_env, _134_bound, DAM.__default.Eval(_95_env, _142_arg)), _133_body, _141_stack));
          } else {
            Dafny.ISequence<Dafny.Rune> _143___mcc_h68 = _source20.dtor_field;
            return DAM.Out.create_Stuck();
          }
        }
      } else if (_source13.is_Call) {
        DAM._IStmt _144___mcc_h10 = _source13.dtor_func;
        DAM._IExpr _145___mcc_h11 = _source13.dtor_arg;
        DAM._IExpr _146_arg = _145___mcc_h11;
        DAM._IStmt _147_func = _144___mcc_h10;
        return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(_95_env, _147_func, DAM.Stack.create_Push(DAM.Frame.create_Call(_146_arg), _97_stack)));
      } else if (_source13.is_Record) {
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IStmt> _148___mcc_h12 = _source13.dtor_fields;
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IStmt> _149_fields = _148___mcc_h12;
        DAM._IOption<_System._ITuple2<DAM._IFrame, DAM._IStack>> _source21 = (_97_stack).Pop();
        if (_source21.is_None) {
          return DAM.Out.create_Terminal(DAM.Val.create_Thunk(_95_env, _96_comp));
        } else {
          _System._ITuple2<DAM._IFrame, DAM._IStack> _150___mcc_h70 = _source21.dtor_value;
          _System._ITuple2<DAM._IFrame, DAM._IStack> _source22 = _150___mcc_h70;
          DAM._IFrame _151___mcc_h71 = _source22.dtor__0;
          DAM._IStack _152___mcc_h72 = _source22.dtor__1;
          DAM._IFrame _source23 = _151___mcc_h71;
          if (_source23.is_Bind) {
            Dafny.ISequence<Dafny.Rune> _153___mcc_h75 = _source23.dtor_var__;
            DAM._IStmt _154___mcc_h76 = _source23.dtor_rhs;
            return DAM.Out.create_Stuck();
          } else if (_source23.is_Call) {
            DAM._IExpr _155___mcc_h79 = _source23.dtor_arg;
            return DAM.Out.create_Stuck();
          } else {
            Dafny.ISequence<Dafny.Rune> _156___mcc_h81 = _source23.dtor_field;
            DAM._IStack _157_stack = _152___mcc_h72;
            Dafny.ISequence<Dafny.Rune> _158_field = _156___mcc_h81;
            return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(_95_env, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IStmt>.Select(_149_fields, _158_field), _157_stack));
          }
        }
      } else if (_source13.is_Select) {
        DAM._IStmt _159___mcc_h13 = _source13.dtor_record;
        Dafny.ISequence<Dafny.Rune> _160___mcc_h14 = _source13.dtor_field;
        Dafny.ISequence<Dafny.Rune> _161_field = _160___mcc_h14;
        DAM._IStmt _162_obj = _159___mcc_h13;
        return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(_95_env, _162_obj, DAM.Stack.create_Push(DAM.Frame.create_Select(_161_field), _97_stack)));
      } else if (_source13.is_Force) {
        DAM._IExpr _163___mcc_h15 = _source13.dtor_Force_a0;
        DAM._IExpr _164_thunk = _163___mcc_h15;
        DAM._IVal _source24 = DAM.__default.Eval(_95_env, _164_thunk);
        if (_source24.is_Unit) {
          return DAM.Out.create_Stuck();
        } else if (_source24.is_Bool) {
          bool _165___mcc_h83 = _source24.dtor_Bool_a0;
          return DAM.Out.create_Stuck();
        } else if (_source24.is_Int) {
          BigInteger _166___mcc_h85 = _source24.dtor_Int_a0;
          return DAM.Out.create_Stuck();
        } else if (_source24.is_Thunk) {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _167___mcc_h87 = _source24.dtor_Thunk_a0;
          DAM._IStmt _168___mcc_h88 = _source24.dtor_Thunk_a1;
          DAM._IStmt _169_comp = _168___mcc_h88;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _170_env = _167___mcc_h87;
          return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(_170_env, _169_comp, _97_stack));
        } else if (_source24.is_Ref) {
          DAM.Ptr<DAM._IVal> _171___mcc_h91 = _source24.dtor_Ref_a0;
          return DAM.Out.create_Stuck();
        } else {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _172___mcc_h93 = _source24.dtor_Stack_a0;
          DAM._IStack _173___mcc_h94 = _source24.dtor_Stack_a1;
          return DAM.Out.create_Stuck();
        }
      } else if (_source13.is_Read) {
        DAM._IExpr _174___mcc_h16 = _source13.dtor_ref;
        Dafny.ISequence<Dafny.Rune> _175___mcc_h17 = _source13.dtor_var__;
        DAM._IStmt _176___mcc_h18 = _source13.dtor_cont;
        DAM._IStmt _177_cont = _176___mcc_h18;
        Dafny.ISequence<Dafny.Rune> _178_var__ = _175___mcc_h17;
        DAM._IExpr _179_ref = _174___mcc_h16;
        DAM._IVal _source25 = DAM.__default.Eval(_95_env, _179_ref);
        if (_source25.is_Unit) {
          return DAM.Out.create_Stuck();
        } else if (_source25.is_Bool) {
          bool _180___mcc_h97 = _source25.dtor_Bool_a0;
          return DAM.Out.create_Stuck();
        } else if (_source25.is_Int) {
          BigInteger _181___mcc_h99 = _source25.dtor_Int_a0;
          return DAM.Out.create_Stuck();
        } else if (_source25.is_Thunk) {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _182___mcc_h101 = _source25.dtor_Thunk_a0;
          DAM._IStmt _183___mcc_h102 = _source25.dtor_Thunk_a1;
          return DAM.Out.create_Stuck();
        } else if (_source25.is_Ref) {
          DAM.Ptr<DAM._IVal> _184___mcc_h105 = _source25.dtor_Ref_a0;
          DAM.Ptr<DAM._IVal> _185_ptr = _184___mcc_h105;
          return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IVal>.Update(_95_env, _178_var__, _185_ptr.deref), _177_cont, _97_stack));
        } else {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _186___mcc_h107 = _source25.dtor_Stack_a0;
          DAM._IStack _187___mcc_h108 = _source25.dtor_Stack_a1;
          return DAM.Out.create_Stuck();
        }
      } else if (_source13.is_Write) {
        DAM._IExpr _188___mcc_h19 = _source13.dtor_lvalue;
        DAM._IExpr _189___mcc_h20 = _source13.dtor_rvalue;
        DAM._IStmt _190___mcc_h21 = _source13.dtor_next;
        DAM._IStmt _191_next = _190___mcc_h21;
        DAM._IExpr _192_rval = _189___mcc_h20;
        DAM._IExpr _193_lval = _188___mcc_h19;
        DAM._IVal _source26 = DAM.__default.Eval(_95_env, _193_lval);
        if (_source26.is_Unit) {
          return DAM.Out.create_Stuck();
        } else if (_source26.is_Bool) {
          bool _194___mcc_h111 = _source26.dtor_Bool_a0;
          return DAM.Out.create_Stuck();
        } else if (_source26.is_Int) {
          BigInteger _195___mcc_h113 = _source26.dtor_Int_a0;
          return DAM.Out.create_Stuck();
        } else if (_source26.is_Thunk) {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _196___mcc_h115 = _source26.dtor_Thunk_a0;
          DAM._IStmt _197___mcc_h116 = _source26.dtor_Thunk_a1;
          return DAM.Out.create_Stuck();
        } else if (_source26.is_Ref) {
          DAM.Ptr<DAM._IVal> _198___mcc_h119 = _source26.dtor_Ref_a0;
          DAM.Ptr<DAM._IVal> _199_ptr = _198___mcc_h119;
          return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(_95_env, _191_next, _97_stack));
        } else {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _200___mcc_h121 = _source26.dtor_Stack_a0;
          DAM._IStack _201___mcc_h122 = _source26.dtor_Stack_a1;
          return DAM.Out.create_Stuck();
        }
      } else if (_source13.is_Print) {
        DAM._IExpr _202___mcc_h22 = _source13.dtor_Print_a0;
        DAM._IStmt _203___mcc_h23 = _source13.dtor_next;
        DAM._IStmt _204_next = _203___mcc_h23;
        DAM._IExpr _205_expr = _202___mcc_h22;
        return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(_95_env, _204_next, _97_stack));
      } else if (_source13.is_Rec) {
        Dafny.ISequence<Dafny.Rune> _206___mcc_h24 = _source13.dtor_bound;
        DAM._IStmt _207___mcc_h25 = _source13.dtor_body;
        DAM._IStmt _208_body = _207___mcc_h25;
        Dafny.ISequence<Dafny.Rune> _209_self = _206___mcc_h24;
        return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IVal>.Update(_95_env, _209_self, DAM.Val.create_Thunk(_95_env, _96_comp)), _208_body, _97_stack));
      } else if (_source13.is_LetCS) {
        Dafny.ISequence<Dafny.Rune> _210___mcc_h26 = _source13.dtor_bound;
        DAM._IStmt _211___mcc_h27 = _source13.dtor_body;
        DAM._IStmt _212_body = _211___mcc_h27;
        Dafny.ISequence<Dafny.Rune> _213_bound = _210___mcc_h26;
        return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IVal>.Update(_95_env, _213_bound, DAM.Val.create_Stack(_95_env, _97_stack)), _212_body, _97_stack));
      } else {
        DAM._IExpr _214___mcc_h28 = _source13.dtor_stack;
        DAM._IStmt _215___mcc_h29 = _source13.dtor_init;
        DAM._IStmt _216_init = _215___mcc_h29;
        DAM._IExpr _217_stack = _214___mcc_h28;
        DAM._IVal _source27 = DAM.__default.Eval(_95_env, _217_stack);
        if (_source27.is_Unit) {
          return DAM.Out.create_Stuck();
        } else if (_source27.is_Bool) {
          bool _218___mcc_h125 = _source27.dtor_Bool_a0;
          return DAM.Out.create_Stuck();
        } else if (_source27.is_Int) {
          BigInteger _219___mcc_h127 = _source27.dtor_Int_a0;
          return DAM.Out.create_Stuck();
        } else if (_source27.is_Thunk) {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _220___mcc_h129 = _source27.dtor_Thunk_a0;
          DAM._IStmt _221___mcc_h130 = _source27.dtor_Thunk_a1;
          return DAM.Out.create_Stuck();
        } else if (_source27.is_Ref) {
          DAM.Ptr<DAM._IVal> _222___mcc_h133 = _source27.dtor_Ref_a0;
          return DAM.Out.create_Stuck();
        } else {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _223___mcc_h135 = _source27.dtor_Stack_a0;
          DAM._IStack _224___mcc_h136 = _source27.dtor_Stack_a1;
          DAM._IStack _225_stack = _224___mcc_h136;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _226_env = _223___mcc_h135;
          return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(_226_env, _216_init, _225_stack));
        }
      }
    }
    public static void Run(_System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> s) {
    TAIL_CALL_START:;
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      DAM._IOut _source28 = DAM.__default.Step(s);
      if (_source28.is_Next) {
        _System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> _227___mcc_h0 = _source28.dtor_Next_a0;
        _System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> _228_s = _227___mcc_h0;
        Dafny.Helpers.Print((_System.Tuple2<_System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>, Dafny.ISequence<Dafny.Rune>>.create(_228_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"))));
        _System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> _in0 = _228_s;
        s = _in0;
        goto TAIL_CALL_START;
      } else if (_source28.is_Stuck) {
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("done/stuck\n")).ToVerbatimString(false));
        return;
      } else {
        DAM._IVal _229___mcc_h2 = _source28.dtor_Terminal_a0;
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("done/stuck\n")).ToVerbatimString(false));
        return;
      }
    }
    public static _System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> Initial(DAM._IStmt comp) {
      return _System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IVal>.FromElements(), comp, DAM.Stack.create_Empty());
    }
    public static void _Main(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> __noArgsParameter) {
      DAM.__default.Run(DAM.__default.Initial(DAM.Stmt.create_Bind(DAM.Stmt.create_Pure(DAM.Expr.create_Bool(true)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("x"), DAM.Stmt.create_Ite(DAM.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("x")), DAM.Stmt.create_Pure(DAM.Expr.create_Bool(false)), DAM.Stmt.create_Pure(DAM.Expr.create_Bool(true))))));
      DAM._IExpr _230_fc;
      _230_fc = DAM.Expr.create_Thunk(DAM.Stmt.create_Func(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("y"), DAM.Pos.create_Int(), DAM.Stmt.create_Pure(DAM.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("x")))));
      DAM._IStmt _231_fv;
      _231_fv = DAM.Stmt.create_Force(DAM.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("f")));
      DAM._IExpr _232_x1;
      _232_x1 = DAM.Expr.create_Int(BigInteger.One);
      DAM._IExpr _233_x2;
      _233_x2 = DAM.Expr.create_Int(new BigInteger(2));
      DAM._IExpr _234_z;
      _234_z = DAM.Expr.create_Int(BigInteger.Zero);
      DAM.__default.Run(DAM.__default.Initial(DAM.__default.Let(_232_x1, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("x"), DAM.Pos.create_Int(), DAM.__default.Let(_230_fc, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("f"), DAM.Pos.create_Int(), DAM.__default.Let(_233_x2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("x"), DAM.Pos.create_Int(), DAM.Stmt.create_Call(_231_fv, _234_z))))));
    }
  }

  public interface _IOption<A> {
    bool is_None { get; }
    bool is_Some { get; }
    A dtor_value { get; }
    _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0);
    bool IsFailure();
    DAM._IOption<A> PropagateFailure();
    A Extract();
  }
  public abstract class Option<A> : _IOption<A> {
    public Option() {
    }
    public static DAM._IOption<A> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<DAM._IOption<A>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<DAM._IOption<A>>(DAM.Option<A>.Default());
    }
    public static _IOption<A> create_None() {
      return new Option_None<A>();
    }
    public static _IOption<A> create_Some(A @value) {
      return new Option_Some<A>(@value);
    }
    public bool is_None { get { return this is Option_None<A>; } }
    public bool is_Some { get { return this is Option_Some<A>; } }
    public A dtor_value {
      get {
        var d = this;
        return ((Option_Some<A>)d)._value;
      }
    }
    public abstract _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0);
    public bool IsFailure() {
      return (this).is_None;
    }
    public DAM._IOption<A> PropagateFailure() {
      return DAM.Option<A>.create_None();
    }
    public A Extract() {
      return (this).dtor_value;
    }
  }
  public class Option_None<A> : Option<A> {
    public Option_None() : base() {
    }
    public override _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0) {
      if (this is _IOption<__A> dt) { return dt; }
      return new Option_None<__A>();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Option_None<A>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Option.None";
      return s;
    }
  }
  public class Option_Some<A> : Option<A> {
    public readonly A _value;
    public Option_Some(A @value) : base() {
      this._value = @value;
    }
    public override _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0) {
      if (this is _IOption<__A> dt) { return dt; }
      return new Option_Some<__A>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Option_Some<A>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Option.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }

  public partial class Ptr<A> {
    public Ptr() {
      this.deref = default(A);
    }
    public A deref { get; set; }
    public void __ctor(A expr) {
      (this).deref = expr;
    }
  }

  public interface _IPos {
    bool is_Unit { get; }
    bool is_Bool { get; }
    bool is_Int { get; }
    bool is_Thunk { get; }
    bool is_Ref { get; }
    bool is_Stack { get; }
    DAM._INeg dtor_Thunk_a0 { get; }
    DAM._IPos dtor_Ref_a0 { get; }
    DAM._INeg dtor_Stack_a0 { get; }
    _IPos DowncastClone();
  }
  public abstract class Pos : _IPos {
    public Pos() {
    }
    private static readonly DAM._IPos theDefault = create_Unit();
    public static DAM._IPos Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM._IPos> _TYPE = new Dafny.TypeDescriptor<DAM._IPos>(DAM.Pos.Default());
    public static Dafny.TypeDescriptor<DAM._IPos> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPos create_Unit() {
      return new Pos_Unit();
    }
    public static _IPos create_Bool() {
      return new Pos_Bool();
    }
    public static _IPos create_Int() {
      return new Pos_Int();
    }
    public static _IPos create_Thunk(DAM._INeg _a0) {
      return new Pos_Thunk(_a0);
    }
    public static _IPos create_Ref(DAM._IPos _a0) {
      return new Pos_Ref(_a0);
    }
    public static _IPos create_Stack(DAM._INeg _a0) {
      return new Pos_Stack(_a0);
    }
    public bool is_Unit { get { return this is Pos_Unit; } }
    public bool is_Bool { get { return this is Pos_Bool; } }
    public bool is_Int { get { return this is Pos_Int; } }
    public bool is_Thunk { get { return this is Pos_Thunk; } }
    public bool is_Ref { get { return this is Pos_Ref; } }
    public bool is_Stack { get { return this is Pos_Stack; } }
    public DAM._INeg dtor_Thunk_a0 {
      get {
        var d = this;
        return ((Pos_Thunk)d)._a0;
      }
    }
    public DAM._IPos dtor_Ref_a0 {
      get {
        var d = this;
        return ((Pos_Ref)d)._a0;
      }
    }
    public DAM._INeg dtor_Stack_a0 {
      get {
        var d = this;
        return ((Pos_Stack)d)._a0;
      }
    }
    public abstract _IPos DowncastClone();
  }
  public class Pos_Unit : Pos {
    public Pos_Unit() : base() {
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Unit();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Pos_Unit;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Pos.Unit";
      return s;
    }
  }
  public class Pos_Bool : Pos {
    public Pos_Bool() : base() {
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Pos_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Pos.Bool";
      return s;
    }
  }
  public class Pos_Int : Pos {
    public Pos_Int() : base() {
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Pos_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Pos.Int";
      return s;
    }
  }
  public class Pos_Thunk : Pos {
    public readonly DAM._INeg _a0;
    public Pos_Thunk(DAM._INeg _a0) : base() {
      this._a0 = _a0;
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Thunk(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Pos_Thunk;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Pos.Thunk";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Pos_Ref : Pos {
    public readonly DAM._IPos _a0;
    public Pos_Ref(DAM._IPos _a0) : base() {
      this._a0 = _a0;
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Ref(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Pos_Ref;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Pos.Ref";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Pos_Stack : Pos {
    public readonly DAM._INeg _a0;
    public Pos_Stack(DAM._INeg _a0) : base() {
      this._a0 = _a0;
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Stack(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Pos_Stack;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Pos.Stack";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _INeg {
    bool is_Value { get; }
    bool is_Function { get; }
    bool is_Record { get; }
    DAM._IPos dtor_Value_a0 { get; }
    DAM._IPos dtor_dom { get; }
    DAM._INeg dtor_cod { get; }
    Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._INeg> dtor_fields { get; }
    _INeg DowncastClone();
  }
  public abstract class Neg : _INeg {
    public Neg() {
    }
    private static readonly DAM._INeg theDefault = create_Record(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._INeg>.Empty);
    public static DAM._INeg Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM._INeg> _TYPE = new Dafny.TypeDescriptor<DAM._INeg>(DAM.Neg.Default());
    public static Dafny.TypeDescriptor<DAM._INeg> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INeg create_Value(DAM._IPos _a0) {
      return new Neg_Value(_a0);
    }
    public static _INeg create_Function(DAM._IPos dom, DAM._INeg cod) {
      return new Neg_Function(dom, cod);
    }
    public static _INeg create_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._INeg> fields) {
      return new Neg_Record(fields);
    }
    public bool is_Value { get { return this is Neg_Value; } }
    public bool is_Function { get { return this is Neg_Function; } }
    public bool is_Record { get { return this is Neg_Record; } }
    public DAM._IPos dtor_Value_a0 {
      get {
        var d = this;
        return ((Neg_Value)d)._a0;
      }
    }
    public DAM._IPos dtor_dom {
      get {
        var d = this;
        return ((Neg_Function)d)._dom;
      }
    }
    public DAM._INeg dtor_cod {
      get {
        var d = this;
        return ((Neg_Function)d)._cod;
      }
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._INeg> dtor_fields {
      get {
        var d = this;
        return ((Neg_Record)d)._fields;
      }
    }
    public abstract _INeg DowncastClone();
  }
  public class Neg_Value : Neg {
    public readonly DAM._IPos _a0;
    public Neg_Value(DAM._IPos _a0) : base() {
      this._a0 = _a0;
    }
    public override _INeg DowncastClone() {
      if (this is _INeg dt) { return dt; }
      return new Neg_Value(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Neg_Value;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Neg.Value";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Neg_Function : Neg {
    public readonly DAM._IPos _dom;
    public readonly DAM._INeg _cod;
    public Neg_Function(DAM._IPos dom, DAM._INeg cod) : base() {
      this._dom = dom;
      this._cod = cod;
    }
    public override _INeg DowncastClone() {
      if (this is _INeg dt) { return dt; }
      return new Neg_Function(_dom, _cod);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Neg_Function;
      return oth != null && object.Equals(this._dom, oth._dom) && object.Equals(this._cod, oth._cod);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dom));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cod));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Neg.Function";
      s += "(";
      s += Dafny.Helpers.ToString(this._dom);
      s += ", ";
      s += Dafny.Helpers.ToString(this._cod);
      s += ")";
      return s;
    }
  }
  public class Neg_Record : Neg {
    public readonly Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._INeg> _fields;
    public Neg_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._INeg> fields) : base() {
      this._fields = fields;
    }
    public override _INeg DowncastClone() {
      if (this is _INeg dt) { return dt; }
      return new Neg_Record(_fields);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Neg_Record;
      return oth != null && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Neg.Record";
      s += "(";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
  }

  public interface _IExpr {
    bool is_Var { get; }
    bool is_Unit { get; }
    bool is_Bool { get; }
    bool is_Int { get; }
    bool is_Thunk { get; }
    bool is_Ref { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Var_a0 { get; }
    bool dtor_Bool_a0 { get; }
    BigInteger dtor_Int_a0 { get; }
    DAM._IStmt dtor_Thunk_a0 { get; }
    DAM.Ptr<DAM._IVal> dtor_Ref_a0 { get; }
    _IExpr DowncastClone();
  }
  public abstract class Expr : _IExpr {
    public Expr() {
    }
    private static readonly DAM._IExpr theDefault = create_Var(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAM._IExpr Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM._IExpr> _TYPE = new Dafny.TypeDescriptor<DAM._IExpr>(DAM.Expr.Default());
    public static Dafny.TypeDescriptor<DAM._IExpr> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpr create_Var(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expr_Var(_a0);
    }
    public static _IExpr create_Unit() {
      return new Expr_Unit();
    }
    public static _IExpr create_Bool(bool _a0) {
      return new Expr_Bool(_a0);
    }
    public static _IExpr create_Int(BigInteger _a0) {
      return new Expr_Int(_a0);
    }
    public static _IExpr create_Thunk(DAM._IStmt _a0) {
      return new Expr_Thunk(_a0);
    }
    public static _IExpr create_Ref(DAM.Ptr<DAM._IVal> _a0) {
      return new Expr_Ref(_a0);
    }
    public bool is_Var { get { return this is Expr_Var; } }
    public bool is_Unit { get { return this is Expr_Unit; } }
    public bool is_Bool { get { return this is Expr_Bool; } }
    public bool is_Int { get { return this is Expr_Int; } }
    public bool is_Thunk { get { return this is Expr_Thunk; } }
    public bool is_Ref { get { return this is Expr_Ref; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Var_a0 {
      get {
        var d = this;
        return ((Expr_Var)d)._a0;
      }
    }
    public bool dtor_Bool_a0 {
      get {
        var d = this;
        return ((Expr_Bool)d)._a0;
      }
    }
    public BigInteger dtor_Int_a0 {
      get {
        var d = this;
        return ((Expr_Int)d)._a0;
      }
    }
    public DAM._IStmt dtor_Thunk_a0 {
      get {
        var d = this;
        return ((Expr_Thunk)d)._a0;
      }
    }
    public DAM.Ptr<DAM._IVal> dtor_Ref_a0 {
      get {
        var d = this;
        return ((Expr_Ref)d)._a0;
      }
    }
    public abstract _IExpr DowncastClone();
  }
  public class Expr_Var : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expr_Var(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Var(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Expr_Var;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Expr.Var";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_Unit : Expr {
    public Expr_Unit() : base() {
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Unit();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Expr_Unit;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Expr.Unit";
      return s;
    }
  }
  public class Expr_Bool : Expr {
    public readonly bool _a0;
    public Expr_Bool(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Bool(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Expr_Bool;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Expr.Bool";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expr_Int : Expr {
    public readonly BigInteger _a0;
    public Expr_Int(BigInteger _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Int(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Expr_Int;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Expr.Int";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expr_Thunk : Expr {
    public readonly DAM._IStmt _a0;
    public Expr_Thunk(DAM._IStmt _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Thunk(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Expr_Thunk;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Expr.Thunk";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expr_Ref : Expr {
    public readonly DAM.Ptr<DAM._IVal> _a0;
    public Expr_Ref(DAM.Ptr<DAM._IVal> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Ref(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Expr_Ref;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Expr.Ref";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IStmt {
    bool is_Pure { get; }
    bool is_Bind { get; }
    bool is_Ite { get; }
    bool is_Func { get; }
    bool is_Call { get; }
    bool is_Record { get; }
    bool is_Select { get; }
    bool is_Force { get; }
    bool is_Read { get; }
    bool is_Write { get; }
    bool is_Print { get; }
    bool is_Rec { get; }
    bool is_LetCS { get; }
    bool is_Throw { get; }
    DAM._IExpr dtor_Pure_a0 { get; }
    DAM._IStmt dtor_lhs { get; }
    Dafny.ISequence<Dafny.Rune> dtor_var__ { get; }
    DAM._IStmt dtor_rhs { get; }
    DAM._IExpr dtor_guard { get; }
    DAM._IStmt dtor_then__ { get; }
    DAM._IStmt dtor_else__ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_bound { get; }
    DAM._IPos dtor_dom { get; }
    DAM._IStmt dtor_body { get; }
    DAM._IStmt dtor_func { get; }
    DAM._IExpr dtor_arg { get; }
    Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IStmt> dtor_fields { get; }
    DAM._IStmt dtor_record { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    DAM._IExpr dtor_Force_a0 { get; }
    DAM._IExpr dtor_ref { get; }
    DAM._IStmt dtor_cont { get; }
    DAM._IExpr dtor_lvalue { get; }
    DAM._IExpr dtor_rvalue { get; }
    DAM._IStmt dtor_next { get; }
    DAM._IExpr dtor_Print_a0 { get; }
    DAM._IExpr dtor_stack { get; }
    DAM._IStmt dtor_init { get; }
    _IStmt DowncastClone();
  }
  public abstract class Stmt : _IStmt {
    public Stmt() {
    }
    private static readonly DAM._IStmt theDefault = create_Record(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IStmt>.Empty);
    public static DAM._IStmt Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM._IStmt> _TYPE = new Dafny.TypeDescriptor<DAM._IStmt>(DAM.Stmt.Default());
    public static Dafny.TypeDescriptor<DAM._IStmt> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStmt create_Pure(DAM._IExpr _a0) {
      return new Stmt_Pure(_a0);
    }
    public static _IStmt create_Bind(DAM._IStmt lhs, Dafny.ISequence<Dafny.Rune> var__, DAM._IStmt rhs) {
      return new Stmt_Bind(lhs, var__, rhs);
    }
    public static _IStmt create_Ite(DAM._IExpr guard, DAM._IStmt then__, DAM._IStmt else__) {
      return new Stmt_Ite(guard, then__, else__);
    }
    public static _IStmt create_Func(Dafny.ISequence<Dafny.Rune> bound, DAM._IPos dom, DAM._IStmt body) {
      return new Stmt_Func(bound, dom, body);
    }
    public static _IStmt create_Call(DAM._IStmt func, DAM._IExpr arg) {
      return new Stmt_Call(func, arg);
    }
    public static _IStmt create_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IStmt> fields) {
      return new Stmt_Record(fields);
    }
    public static _IStmt create_Select(DAM._IStmt record, Dafny.ISequence<Dafny.Rune> field) {
      return new Stmt_Select(record, field);
    }
    public static _IStmt create_Force(DAM._IExpr _a0) {
      return new Stmt_Force(_a0);
    }
    public static _IStmt create_Read(DAM._IExpr @ref, Dafny.ISequence<Dafny.Rune> var__, DAM._IStmt cont) {
      return new Stmt_Read(@ref, var__, cont);
    }
    public static _IStmt create_Write(DAM._IExpr lvalue, DAM._IExpr rvalue, DAM._IStmt next) {
      return new Stmt_Write(lvalue, rvalue, next);
    }
    public static _IStmt create_Print(DAM._IExpr _a0, DAM._IStmt next) {
      return new Stmt_Print(_a0, next);
    }
    public static _IStmt create_Rec(Dafny.ISequence<Dafny.Rune> bound, DAM._IStmt body) {
      return new Stmt_Rec(bound, body);
    }
    public static _IStmt create_LetCS(Dafny.ISequence<Dafny.Rune> bound, DAM._IStmt body) {
      return new Stmt_LetCS(bound, body);
    }
    public static _IStmt create_Throw(DAM._IExpr stack, DAM._IStmt init) {
      return new Stmt_Throw(stack, init);
    }
    public bool is_Pure { get { return this is Stmt_Pure; } }
    public bool is_Bind { get { return this is Stmt_Bind; } }
    public bool is_Ite { get { return this is Stmt_Ite; } }
    public bool is_Func { get { return this is Stmt_Func; } }
    public bool is_Call { get { return this is Stmt_Call; } }
    public bool is_Record { get { return this is Stmt_Record; } }
    public bool is_Select { get { return this is Stmt_Select; } }
    public bool is_Force { get { return this is Stmt_Force; } }
    public bool is_Read { get { return this is Stmt_Read; } }
    public bool is_Write { get { return this is Stmt_Write; } }
    public bool is_Print { get { return this is Stmt_Print; } }
    public bool is_Rec { get { return this is Stmt_Rec; } }
    public bool is_LetCS { get { return this is Stmt_LetCS; } }
    public bool is_Throw { get { return this is Stmt_Throw; } }
    public DAM._IExpr dtor_Pure_a0 {
      get {
        var d = this;
        return ((Stmt_Pure)d)._a0;
      }
    }
    public DAM._IStmt dtor_lhs {
      get {
        var d = this;
        return ((Stmt_Bind)d)._lhs;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_var__ {
      get {
        var d = this;
        if (d is Stmt_Bind) { return ((Stmt_Bind)d)._var__; }
        return ((Stmt_Read)d)._var__;
      }
    }
    public DAM._IStmt dtor_rhs {
      get {
        var d = this;
        return ((Stmt_Bind)d)._rhs;
      }
    }
    public DAM._IExpr dtor_guard {
      get {
        var d = this;
        return ((Stmt_Ite)d)._guard;
      }
    }
    public DAM._IStmt dtor_then__ {
      get {
        var d = this;
        return ((Stmt_Ite)d)._then__;
      }
    }
    public DAM._IStmt dtor_else__ {
      get {
        var d = this;
        return ((Stmt_Ite)d)._else__;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_bound {
      get {
        var d = this;
        if (d is Stmt_Func) { return ((Stmt_Func)d)._bound; }
        if (d is Stmt_Rec) { return ((Stmt_Rec)d)._bound; }
        return ((Stmt_LetCS)d)._bound;
      }
    }
    public DAM._IPos dtor_dom {
      get {
        var d = this;
        return ((Stmt_Func)d)._dom;
      }
    }
    public DAM._IStmt dtor_body {
      get {
        var d = this;
        if (d is Stmt_Func) { return ((Stmt_Func)d)._body; }
        if (d is Stmt_Rec) { return ((Stmt_Rec)d)._body; }
        return ((Stmt_LetCS)d)._body;
      }
    }
    public DAM._IStmt dtor_func {
      get {
        var d = this;
        return ((Stmt_Call)d)._func;
      }
    }
    public DAM._IExpr dtor_arg {
      get {
        var d = this;
        return ((Stmt_Call)d)._arg;
      }
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IStmt> dtor_fields {
      get {
        var d = this;
        return ((Stmt_Record)d)._fields;
      }
    }
    public DAM._IStmt dtor_record {
      get {
        var d = this;
        return ((Stmt_Select)d)._record;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((Stmt_Select)d)._field;
      }
    }
    public DAM._IExpr dtor_Force_a0 {
      get {
        var d = this;
        return ((Stmt_Force)d)._a0;
      }
    }
    public DAM._IExpr dtor_ref {
      get {
        var d = this;
        return ((Stmt_Read)d)._ref;
      }
    }
    public DAM._IStmt dtor_cont {
      get {
        var d = this;
        return ((Stmt_Read)d)._cont;
      }
    }
    public DAM._IExpr dtor_lvalue {
      get {
        var d = this;
        return ((Stmt_Write)d)._lvalue;
      }
    }
    public DAM._IExpr dtor_rvalue {
      get {
        var d = this;
        return ((Stmt_Write)d)._rvalue;
      }
    }
    public DAM._IStmt dtor_next {
      get {
        var d = this;
        if (d is Stmt_Write) { return ((Stmt_Write)d)._next; }
        return ((Stmt_Print)d)._next;
      }
    }
    public DAM._IExpr dtor_Print_a0 {
      get {
        var d = this;
        return ((Stmt_Print)d)._a0;
      }
    }
    public DAM._IExpr dtor_stack {
      get {
        var d = this;
        return ((Stmt_Throw)d)._stack;
      }
    }
    public DAM._IStmt dtor_init {
      get {
        var d = this;
        return ((Stmt_Throw)d)._init;
      }
    }
    public abstract _IStmt DowncastClone();
  }
  public class Stmt_Pure : Stmt {
    public readonly DAM._IExpr _a0;
    public Stmt_Pure(DAM._IExpr _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Pure(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_Pure;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.Pure";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Stmt_Bind : Stmt {
    public readonly DAM._IStmt _lhs;
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly DAM._IStmt _rhs;
    public Stmt_Bind(DAM._IStmt lhs, Dafny.ISequence<Dafny.Rune> var__, DAM._IStmt rhs) : base() {
      this._lhs = lhs;
      this._var__ = var__;
      this._rhs = rhs;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Bind(_lhs, _var__, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_Bind;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._var__, oth._var__) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.Bind";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Stmt_Ite : Stmt {
    public readonly DAM._IExpr _guard;
    public readonly DAM._IStmt _then__;
    public readonly DAM._IStmt _else__;
    public Stmt_Ite(DAM._IExpr guard, DAM._IStmt then__, DAM._IStmt else__) : base() {
      this._guard = guard;
      this._then__ = then__;
      this._else__ = else__;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Ite(_guard, _then__, _else__);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_Ite;
      return oth != null && object.Equals(this._guard, oth._guard) && object.Equals(this._then__, oth._then__) && object.Equals(this._else__, oth._else__);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._guard));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._then__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._else__));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._guard);
      s += ", ";
      s += Dafny.Helpers.ToString(this._then__);
      s += ", ";
      s += Dafny.Helpers.ToString(this._else__);
      s += ")";
      return s;
    }
  }
  public class Stmt_Func : Stmt {
    public readonly Dafny.ISequence<Dafny.Rune> _bound;
    public readonly DAM._IPos _dom;
    public readonly DAM._IStmt _body;
    public Stmt_Func(Dafny.ISequence<Dafny.Rune> bound, DAM._IPos dom, DAM._IStmt body) : base() {
      this._bound = bound;
      this._dom = dom;
      this._body = body;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Func(_bound, _dom, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_Func;
      return oth != null && object.Equals(this._bound, oth._bound) && object.Equals(this._dom, oth._dom) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._bound));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dom));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.Func";
      s += "(";
      s += this._bound.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dom);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Stmt_Call : Stmt {
    public readonly DAM._IStmt _func;
    public readonly DAM._IExpr _arg;
    public Stmt_Call(DAM._IStmt func, DAM._IExpr arg) : base() {
      this._func = func;
      this._arg = arg;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Call(_func, _arg);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_Call;
      return oth != null && object.Equals(this._func, oth._func) && object.Equals(this._arg, oth._arg);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._func));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arg));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._func);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arg);
      s += ")";
      return s;
    }
  }
  public class Stmt_Record : Stmt {
    public readonly Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IStmt> _fields;
    public Stmt_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IStmt> fields) : base() {
      this._fields = fields;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Record(_fields);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_Record;
      return oth != null && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.Record";
      s += "(";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
  }
  public class Stmt_Select : Stmt {
    public readonly DAM._IStmt _record;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public Stmt_Select(DAM._IStmt record, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._record = record;
      this._field = field;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Select(_record, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_Select;
      return oth != null && object.Equals(this._record, oth._record) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._record));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._record);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Stmt_Force : Stmt {
    public readonly DAM._IExpr _a0;
    public Stmt_Force(DAM._IExpr _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Force(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_Force;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.Force";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Stmt_Read : Stmt {
    public readonly DAM._IExpr _ref;
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly DAM._IStmt _cont;
    public Stmt_Read(DAM._IExpr @ref, Dafny.ISequence<Dafny.Rune> var__, DAM._IStmt cont) : base() {
      this._ref = @ref;
      this._var__ = var__;
      this._cont = cont;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Read(_ref, _var__, _cont);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_Read;
      return oth != null && object.Equals(this._ref, oth._ref) && object.Equals(this._var__, oth._var__) && object.Equals(this._cont, oth._cont);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ref));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cont));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.Read";
      s += "(";
      s += Dafny.Helpers.ToString(this._ref);
      s += ", ";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._cont);
      s += ")";
      return s;
    }
  }
  public class Stmt_Write : Stmt {
    public readonly DAM._IExpr _lvalue;
    public readonly DAM._IExpr _rvalue;
    public readonly DAM._IStmt _next;
    public Stmt_Write(DAM._IExpr lvalue, DAM._IExpr rvalue, DAM._IStmt next) : base() {
      this._lvalue = lvalue;
      this._rvalue = rvalue;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Write(_lvalue, _rvalue, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_Write;
      return oth != null && object.Equals(this._lvalue, oth._lvalue) && object.Equals(this._rvalue, oth._rvalue) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lvalue));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rvalue));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.Write";
      s += "(";
      s += Dafny.Helpers.ToString(this._lvalue);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rvalue);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Stmt_Print : Stmt {
    public readonly DAM._IExpr _a0;
    public readonly DAM._IStmt _next;
    public Stmt_Print(DAM._IExpr _a0, DAM._IStmt next) : base() {
      this._a0 = _a0;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Print(_a0, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_Print;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Stmt_Rec : Stmt {
    public readonly Dafny.ISequence<Dafny.Rune> _bound;
    public readonly DAM._IStmt _body;
    public Stmt_Rec(Dafny.ISequence<Dafny.Rune> bound, DAM._IStmt body) : base() {
      this._bound = bound;
      this._body = body;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Rec(_bound, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_Rec;
      return oth != null && object.Equals(this._bound, oth._bound) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._bound));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.Rec";
      s += "(";
      s += this._bound.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Stmt_LetCS : Stmt {
    public readonly Dafny.ISequence<Dafny.Rune> _bound;
    public readonly DAM._IStmt _body;
    public Stmt_LetCS(Dafny.ISequence<Dafny.Rune> bound, DAM._IStmt body) : base() {
      this._bound = bound;
      this._body = body;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_LetCS(_bound, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_LetCS;
      return oth != null && object.Equals(this._bound, oth._bound) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._bound));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.LetCS";
      s += "(";
      s += this._bound.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Stmt_Throw : Stmt {
    public readonly DAM._IExpr _stack;
    public readonly DAM._IStmt _init;
    public Stmt_Throw(DAM._IExpr stack, DAM._IStmt init) : base() {
      this._stack = stack;
      this._init = init;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Throw(_stack, _init);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_Throw;
      return oth != null && object.Equals(this._stack, oth._stack) && object.Equals(this._init, oth._init);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._stack));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._init));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.Throw";
      s += "(";
      s += Dafny.Helpers.ToString(this._stack);
      s += ", ";
      s += Dafny.Helpers.ToString(this._init);
      s += ")";
      return s;
    }
  }

  public interface _IVal {
    bool is_Unit { get; }
    bool is_Bool { get; }
    bool is_Int { get; }
    bool is_Thunk { get; }
    bool is_Ref { get; }
    bool is_Stack { get; }
    bool dtor_Bool_a0 { get; }
    BigInteger dtor_Int_a0 { get; }
    Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> dtor_Thunk_a0 { get; }
    DAM._IStmt dtor_Thunk_a1 { get; }
    DAM.Ptr<DAM._IVal> dtor_Ref_a0 { get; }
    Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> dtor_Stack_a0 { get; }
    DAM._IStack dtor_Stack_a1 { get; }
    _IVal DowncastClone();
  }
  public abstract class Val : _IVal {
    public Val() {
    }
    private static readonly DAM._IVal theDefault = create_Unit();
    public static DAM._IVal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM._IVal> _TYPE = new Dafny.TypeDescriptor<DAM._IVal>(DAM.Val.Default());
    public static Dafny.TypeDescriptor<DAM._IVal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IVal create_Unit() {
      return new Val_Unit();
    }
    public static _IVal create_Bool(bool _a0) {
      return new Val_Bool(_a0);
    }
    public static _IVal create_Int(BigInteger _a0) {
      return new Val_Int(_a0);
    }
    public static _IVal create_Thunk(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _a0, DAM._IStmt _a1) {
      return new Val_Thunk(_a0, _a1);
    }
    public static _IVal create_Ref(DAM.Ptr<DAM._IVal> _a0) {
      return new Val_Ref(_a0);
    }
    public static _IVal create_Stack(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _a0, DAM._IStack _a1) {
      return new Val_Stack(_a0, _a1);
    }
    public bool is_Unit { get { return this is Val_Unit; } }
    public bool is_Bool { get { return this is Val_Bool; } }
    public bool is_Int { get { return this is Val_Int; } }
    public bool is_Thunk { get { return this is Val_Thunk; } }
    public bool is_Ref { get { return this is Val_Ref; } }
    public bool is_Stack { get { return this is Val_Stack; } }
    public bool dtor_Bool_a0 {
      get {
        var d = this;
        return ((Val_Bool)d)._a0;
      }
    }
    public BigInteger dtor_Int_a0 {
      get {
        var d = this;
        return ((Val_Int)d)._a0;
      }
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> dtor_Thunk_a0 {
      get {
        var d = this;
        return ((Val_Thunk)d)._a0;
      }
    }
    public DAM._IStmt dtor_Thunk_a1 {
      get {
        var d = this;
        return ((Val_Thunk)d)._a1;
      }
    }
    public DAM.Ptr<DAM._IVal> dtor_Ref_a0 {
      get {
        var d = this;
        return ((Val_Ref)d)._a0;
      }
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> dtor_Stack_a0 {
      get {
        var d = this;
        return ((Val_Stack)d)._a0;
      }
    }
    public DAM._IStack dtor_Stack_a1 {
      get {
        var d = this;
        return ((Val_Stack)d)._a1;
      }
    }
    public abstract _IVal DowncastClone();
  }
  public class Val_Unit : Val {
    public Val_Unit() : base() {
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Unit();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Val_Unit;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Val.Unit";
      return s;
    }
  }
  public class Val_Bool : Val {
    public readonly bool _a0;
    public Val_Bool(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Bool(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Val_Bool;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Val.Bool";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Val_Int : Val {
    public readonly BigInteger _a0;
    public Val_Int(BigInteger _a0) : base() {
      this._a0 = _a0;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Int(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Val_Int;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Val.Int";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Val_Thunk : Val {
    public readonly Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _a0;
    public readonly DAM._IStmt _a1;
    public Val_Thunk(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _a0, DAM._IStmt _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Thunk(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Val_Thunk;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Val.Thunk";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Val_Ref : Val {
    public readonly DAM.Ptr<DAM._IVal> _a0;
    public Val_Ref(DAM.Ptr<DAM._IVal> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Ref(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Val_Ref;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Val.Ref";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Val_Stack : Val {
    public readonly Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _a0;
    public readonly DAM._IStack _a1;
    public Val_Stack(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _a0, DAM._IStack _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Stack(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Val_Stack;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Val.Stack";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }

  public interface _IFrame {
    bool is_Bind { get; }
    bool is_Call { get; }
    bool is_Select { get; }
    Dafny.ISequence<Dafny.Rune> dtor_var__ { get; }
    DAM._IStmt dtor_rhs { get; }
    DAM._IExpr dtor_arg { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    _IFrame DowncastClone();
  }
  public abstract class Frame : _IFrame {
    public Frame() {
    }
    private static readonly DAM._IFrame theDefault = create_Bind(Dafny.Sequence<Dafny.Rune>.Empty, DAM.Stmt.Default());
    public static DAM._IFrame Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM._IFrame> _TYPE = new Dafny.TypeDescriptor<DAM._IFrame>(DAM.Frame.Default());
    public static Dafny.TypeDescriptor<DAM._IFrame> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFrame create_Bind(Dafny.ISequence<Dafny.Rune> var__, DAM._IStmt rhs) {
      return new Frame_Bind(var__, rhs);
    }
    public static _IFrame create_Call(DAM._IExpr arg) {
      return new Frame_Call(arg);
    }
    public static _IFrame create_Select(Dafny.ISequence<Dafny.Rune> field) {
      return new Frame_Select(field);
    }
    public bool is_Bind { get { return this is Frame_Bind; } }
    public bool is_Call { get { return this is Frame_Call; } }
    public bool is_Select { get { return this is Frame_Select; } }
    public Dafny.ISequence<Dafny.Rune> dtor_var__ {
      get {
        var d = this;
        return ((Frame_Bind)d)._var__;
      }
    }
    public DAM._IStmt dtor_rhs {
      get {
        var d = this;
        return ((Frame_Bind)d)._rhs;
      }
    }
    public DAM._IExpr dtor_arg {
      get {
        var d = this;
        return ((Frame_Call)d)._arg;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((Frame_Select)d)._field;
      }
    }
    public abstract _IFrame DowncastClone();
  }
  public class Frame_Bind : Frame {
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly DAM._IStmt _rhs;
    public Frame_Bind(Dafny.ISequence<Dafny.Rune> var__, DAM._IStmt rhs) : base() {
      this._var__ = var__;
      this._rhs = rhs;
    }
    public override _IFrame DowncastClone() {
      if (this is _IFrame dt) { return dt; }
      return new Frame_Bind(_var__, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Frame_Bind;
      return oth != null && object.Equals(this._var__, oth._var__) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Frame.Bind";
      s += "(";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Frame_Call : Frame {
    public readonly DAM._IExpr _arg;
    public Frame_Call(DAM._IExpr arg) : base() {
      this._arg = arg;
    }
    public override _IFrame DowncastClone() {
      if (this is _IFrame dt) { return dt; }
      return new Frame_Call(_arg);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Frame_Call;
      return oth != null && object.Equals(this._arg, oth._arg);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arg));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Frame.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._arg);
      s += ")";
      return s;
    }
  }
  public class Frame_Select : Frame {
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public Frame_Select(Dafny.ISequence<Dafny.Rune> field) : base() {
      this._field = field;
    }
    public override _IFrame DowncastClone() {
      if (this is _IFrame dt) { return dt; }
      return new Frame_Select(_field);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Frame_Select;
      return oth != null && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Frame.Select";
      s += "(";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IStack {
    bool is_Empty { get; }
    bool is_Push { get; }
    DAM._IFrame dtor_top { get; }
    DAM._IStack dtor_rest { get; }
    _IStack DowncastClone();
    DAM._IOption<_System._ITuple2<DAM._IFrame, DAM._IStack>> Pop();
  }
  public abstract class Stack : _IStack {
    public Stack() {
    }
    private static readonly DAM._IStack theDefault = create_Empty();
    public static DAM._IStack Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM._IStack> _TYPE = new Dafny.TypeDescriptor<DAM._IStack>(DAM.Stack.Default());
    public static Dafny.TypeDescriptor<DAM._IStack> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStack create_Empty() {
      return new Stack_Empty();
    }
    public static _IStack create_Push(DAM._IFrame top, DAM._IStack rest) {
      return new Stack_Push(top, rest);
    }
    public bool is_Empty { get { return this is Stack_Empty; } }
    public bool is_Push { get { return this is Stack_Push; } }
    public DAM._IFrame dtor_top {
      get {
        var d = this;
        return ((Stack_Push)d)._top;
      }
    }
    public DAM._IStack dtor_rest {
      get {
        var d = this;
        return ((Stack_Push)d)._rest;
      }
    }
    public abstract _IStack DowncastClone();
    public DAM._IOption<_System._ITuple2<DAM._IFrame, DAM._IStack>> Pop() {
      DAM._IStack _source29 = this;
      if (_source29.is_Empty) {
        return DAM.Option<_System._ITuple2<DAM._IFrame, DAM._IStack>>.create_None();
      } else {
        DAM._IFrame _235___mcc_h0 = _source29.dtor_top;
        DAM._IStack _236___mcc_h1 = _source29.dtor_rest;
        DAM._IStack _237_r = _236___mcc_h1;
        DAM._IFrame _238_t = _235___mcc_h0;
        return DAM.Option<_System._ITuple2<DAM._IFrame, DAM._IStack>>.create_Some(_System.Tuple2<DAM._IFrame, DAM._IStack>.create(_238_t, _237_r));
      }
    }
  }
  public class Stack_Empty : Stack {
    public Stack_Empty() : base() {
    }
    public override _IStack DowncastClone() {
      if (this is _IStack dt) { return dt; }
      return new Stack_Empty();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stack_Empty;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stack.Empty";
      return s;
    }
  }
  public class Stack_Push : Stack {
    public readonly DAM._IFrame _top;
    public readonly DAM._IStack _rest;
    public Stack_Push(DAM._IFrame top, DAM._IStack rest) : base() {
      this._top = top;
      this._rest = rest;
    }
    public override _IStack DowncastClone() {
      if (this is _IStack dt) { return dt; }
      return new Stack_Push(_top, _rest);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stack_Push;
      return oth != null && object.Equals(this._top, oth._top) && object.Equals(this._rest, oth._rest);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._top));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rest));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stack.Push";
      s += "(";
      s += Dafny.Helpers.ToString(this._top);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rest);
      s += ")";
      return s;
    }
  }

  public interface _IOut {
    bool is_Next { get; }
    bool is_Stuck { get; }
    bool is_Terminal { get; }
    _System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> dtor_Next_a0 { get; }
    DAM._IVal dtor_Terminal_a0 { get; }
    _IOut DowncastClone();
  }
  public abstract class Out : _IOut {
    public Out() {
    }
    private static readonly DAM._IOut theDefault = create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.Default(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IVal>.Empty, DAM.Stmt.Default(), DAM.Stack.Default()));
    public static DAM._IOut Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM._IOut> _TYPE = new Dafny.TypeDescriptor<DAM._IOut>(DAM.Out.Default());
    public static Dafny.TypeDescriptor<DAM._IOut> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IOut create_Next(_System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> _a0) {
      return new Out_Next(_a0);
    }
    public static _IOut create_Stuck() {
      return new Out_Stuck();
    }
    public static _IOut create_Terminal(DAM._IVal _a0) {
      return new Out_Terminal(_a0);
    }
    public bool is_Next { get { return this is Out_Next; } }
    public bool is_Stuck { get { return this is Out_Stuck; } }
    public bool is_Terminal { get { return this is Out_Terminal; } }
    public _System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> dtor_Next_a0 {
      get {
        var d = this;
        return ((Out_Next)d)._a0;
      }
    }
    public DAM._IVal dtor_Terminal_a0 {
      get {
        var d = this;
        return ((Out_Terminal)d)._a0;
      }
    }
    public abstract _IOut DowncastClone();
  }
  public class Out_Next : Out {
    public readonly _System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> _a0;
    public Out_Next(_System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IOut DowncastClone() {
      if (this is _IOut dt) { return dt; }
      return new Out_Next(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Out_Next;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Out.Next";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Out_Stuck : Out {
    public Out_Stuck() : base() {
    }
    public override _IOut DowncastClone() {
      if (this is _IOut dt) { return dt; }
      return new Out_Stuck();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Out_Stuck;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Out.Stuck";
      return s;
    }
  }
  public class Out_Terminal : Out {
    public readonly DAM._IVal _a0;
    public Out_Terminal(DAM._IVal _a0) : base() {
      this._a0 = _a0;
    }
    public override _IOut DowncastClone() {
      if (this is _IOut dt) { return dt; }
      return new Out_Terminal(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Out_Terminal;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Out.Terminal";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
} // end of namespace DAM

namespace D2DPrettyPrinter {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> PrettyPrint(Dafny.ISequence<DAST._IModule> d) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _hi0 = new BigInteger((d).Count);
      for (BigInteger _239_i = BigInteger.Zero; _239_i < _hi0; _239_i++) {
        Dafny.ISequence<Dafny.Rune> _240_s_k;
        Dafny.ISequence<Dafny.Rune> _out1;
        _out1 = D2DPrettyPrinter.__default.PModule((d).Select(_239_i));
        _240_s_k = _out1;
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _240_s_k);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PModule(DAST._IModule mod) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("module "), (mod).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      BigInteger _hi1 = new BigInteger(((mod).dtor_body).Count);
      for (BigInteger _241_i = BigInteger.Zero; _241_i < _hi1; _241_i++) {
        DAST._IModuleItem _source30 = ((mod).dtor_body).Select(_241_i);
        if (_source30.is_Module) {
          DAST._IModule _242___mcc_h0 = _source30.dtor_Module_a0;
          DAST._IModule _243_m = _242___mcc_h0;
          Dafny.ISequence<Dafny.Rune> _244_s_k;
          Dafny.ISequence<Dafny.Rune> _out2;
          _out2 = D2DPrettyPrinter.__default.PModule(_243_m);
          _244_s_k = _out2;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _244_s_k);
        } else if (_source30.is_Class) {
          DAST._IClass _245___mcc_h1 = _source30.dtor_Class_a0;
          DAST._IClass _246_c = _245___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _247_s_k;
          Dafny.ISequence<Dafny.Rune> _out3;
          _out3 = D2DPrettyPrinter.__default.PClass(_246_c);
          _247_s_k = _out3;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _247_s_k);
        } else if (_source30.is_Trait) {
          DAST._ITrait _248___mcc_h2 = _source30.dtor_Trait_a0;
          DAST._ITrait _249_c = _248___mcc_h2;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        } else if (_source30.is_Newtype) {
          DAST._INewtype _250___mcc_h3 = _source30.dtor_Newtype_a0;
          DAST._INewtype _251_n = _250___mcc_h3;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        } else {
          DAST._IDatatype _252___mcc_h4 = _source30.dtor_Datatype_a0;
          DAST._IDatatype _253_d = _252___mcc_h4;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        }
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PClass(DAST._IClass c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("class "), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      BigInteger _hi2 = new BigInteger(((c).dtor_body).Count);
      for (BigInteger _254_i = BigInteger.Zero; _254_i < _hi2; _254_i++) {
        DAST._IMethod _source31 = ((c).dtor_body).Select(_254_i);
        DAST._IMethod _255___mcc_h0 = _source31;
        DAST._IMethod _256_m = _255___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _257_s_k;
        Dafny.ISequence<Dafny.Rune> _out4;
        _out4 = D2DPrettyPrinter.__default.PMethod(_256_m);
        _257_s_k = _out4;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _257_s_k), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PMethod(DAST._IMethod meth) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("method "), (meth).dtor_name);
      Dafny.ISequence<Dafny.Rune> _258_s_k;
      Dafny.ISequence<Dafny.Rune> _out5;
      _out5 = D2DPrettyPrinter.__default.PFormals((meth).dtor_params, (meth).dtor_typeParams);
      _258_s_k = _out5;
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, _258_s_k);
      Dafny.ISequence<Dafny.Rune> _out6;
      _out6 = D2DPrettyPrinter.__default.PBlock((meth).dtor_body);
      _258_s_k = _out6;
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, _258_s_k);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PFormals(Dafny.ISequence<DAST._IFormal> names, Dafny.ISequence<DAST._IType> types) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
      BigInteger _hi3 = new BigInteger((names).Count);
      for (BigInteger _259_i = BigInteger.Zero; _259_i < _hi3; _259_i++) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, ((names).Select(_259_i)).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": _,"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PBlock(Dafny.ISequence<DAST._IStatement> stmt) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((stmt).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
      }
      BigInteger _hi4 = new BigInteger((stmt).Count);
      for (BigInteger _260_i = BigInteger.Zero; _260_i < _hi4; _260_i++) {
        Dafny.ISequence<Dafny.Rune> _261_s_k;
        Dafny.ISequence<Dafny.Rune> _out7;
        _out7 = D2DPrettyPrinter.__default.PStatement((stmt).Select(_260_i));
        _261_s_k = _out7;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _261_s_k), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      }
      if ((new BigInteger((stmt).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PStatement(DAST._IStatement st) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IStatement _source32 = st;
      if (_source32.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _262___mcc_h0 = _source32.dtor_name;
        DAST._IType _263___mcc_h1 = _source32.dtor_typ;
        DAST._IOptional<DAST._IExpression> _264___mcc_h2 = _source32.dtor_maybeValue;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source32.is_Assign) {
        DAST._IAssignLhs _265___mcc_h6 = _source32.dtor_lhs;
        DAST._IExpression _266___mcc_h7 = _source32.dtor_value;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source32.is_If) {
        DAST._IExpression _267___mcc_h10 = _source32.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _268___mcc_h11 = _source32.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _269___mcc_h12 = _source32.dtor_els;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source32.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _270___mcc_h16 = _source32.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _271___mcc_h17 = _source32.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source32.is_While) {
        DAST._IExpression _272___mcc_h20 = _source32.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _273___mcc_h21 = _source32.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source32.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _274___mcc_h24 = _source32.dtor_boundName;
        DAST._IType _275___mcc_h25 = _source32.dtor_boundType;
        DAST._IExpression _276___mcc_h26 = _source32.dtor_over;
        Dafny.ISequence<DAST._IStatement> _277___mcc_h27 = _source32.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source32.is_Call) {
        DAST._IExpression _278___mcc_h32 = _source32.dtor_on;
        Dafny.ISequence<Dafny.Rune> _279___mcc_h33 = _source32.dtor_name;
        Dafny.ISequence<DAST._IType> _280___mcc_h34 = _source32.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _281___mcc_h35 = _source32.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _282___mcc_h36 = _source32.dtor_outs;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source32.is_Return) {
        DAST._IExpression _283___mcc_h42 = _source32.dtor_expr;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source32.is_EarlyReturn) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return");
      } else if (_source32.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _284___mcc_h44 = _source32.dtor_toLabel;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source32.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _285___mcc_h46 = _source32.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source32.is_JumpTailCallStart) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source32.is_Halt) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else {
        DAST._IExpression _286___mcc_h48 = _source32.dtor_Print_a0;
        DAST._IExpression _287_e = _286___mcc_h48;
        Dafny.ISequence<Dafny.Rune> _288_s_k;
        Dafny.ISequence<Dafny.Rune> _out8;
        _out8 = D2DPrettyPrinter.__default.PExpression(_287_e);
        _288_s_k = _out8;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print "), _288_s_k);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PExpression(DAST._IExpression e) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IExpression _source33 = e;
      if (_source33.is_Literal) {
        DAST._ILiteral _289___mcc_h0 = _source33.dtor_Literal_a0;
        DAST._ILiteral _290_l = _289___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _out9;
        _out9 = D2DPrettyPrinter.__default.PLiteral(_290_l);
        s = _out9;
      } else if (_source33.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _291___mcc_h2 = _source33.dtor_Ident_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source33.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _292___mcc_h4 = _source33.dtor_Companion_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source33.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _293___mcc_h6 = _source33.dtor_Tuple_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source33.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _294___mcc_h8 = _source33.dtor_path;
        Dafny.ISequence<DAST._IType> _295___mcc_h9 = _source33.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _296___mcc_h10 = _source33.dtor_args;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source33.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _297___mcc_h14 = _source33.dtor_dims;
        DAST._IType _298___mcc_h15 = _source33.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source33.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _299___mcc_h18 = _source33.dtor_path;
        Dafny.ISequence<DAST._IType> _300___mcc_h19 = _source33.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _301___mcc_h20 = _source33.dtor_variant;
        bool _302___mcc_h21 = _source33.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _303___mcc_h22 = _source33.dtor_contents;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source33.is_Convert) {
        DAST._IExpression _304___mcc_h28 = _source33.dtor_value;
        DAST._IType _305___mcc_h29 = _source33.dtor_from;
        DAST._IType _306___mcc_h30 = _source33.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source33.is_SeqConstruct) {
        DAST._IExpression _307___mcc_h34 = _source33.dtor_length;
        DAST._IExpression _308___mcc_h35 = _source33.dtor_elem;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source33.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _309___mcc_h38 = _source33.dtor_elements;
        DAST._IType _310___mcc_h39 = _source33.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source33.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _311___mcc_h42 = _source33.dtor_elements;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source33.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _312___mcc_h44 = _source33.dtor_mapElems;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source33.is_This) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source33.is_Ite) {
        DAST._IExpression _313___mcc_h46 = _source33.dtor_cond;
        DAST._IExpression _314___mcc_h47 = _source33.dtor_thn;
        DAST._IExpression _315___mcc_h48 = _source33.dtor_els;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source33.is_UnOp) {
        DAST._IUnaryOp _316___mcc_h52 = _source33.dtor_unOp;
        DAST._IExpression _317___mcc_h53 = _source33.dtor_expr;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source33.is_BinOp) {
        DAST._IBinOp _318___mcc_h56 = _source33.dtor_op;
        DAST._IExpression _319___mcc_h57 = _source33.dtor_left;
        DAST._IExpression _320___mcc_h58 = _source33.dtor_right;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source33.is_ArrayLen) {
        DAST._IExpression _321___mcc_h62 = _source33.dtor_expr;
        BigInteger _322___mcc_h63 = _source33.dtor_dim;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source33.is_Select) {
        DAST._IExpression _323___mcc_h66 = _source33.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _324___mcc_h67 = _source33.dtor_field;
        bool _325___mcc_h68 = _source33.dtor_isConstant;
        bool _326___mcc_h69 = _source33.dtor_onDatatype;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source33.is_SelectFn) {
        DAST._IExpression _327___mcc_h74 = _source33.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _328___mcc_h75 = _source33.dtor_field;
        bool _329___mcc_h76 = _source33.dtor_onDatatype;
        bool _330___mcc_h77 = _source33.dtor_isStatic;
        BigInteger _331___mcc_h78 = _source33.dtor_arity;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source33.is_Index) {
        DAST._IExpression _332___mcc_h84 = _source33.dtor_expr;
        DAST._ICollKind _333___mcc_h85 = _source33.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _334___mcc_h86 = _source33.dtor_indices;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source33.is_IndexRange) {
        DAST._IExpression _335___mcc_h90 = _source33.dtor_expr;
        bool _336___mcc_h91 = _source33.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _337___mcc_h92 = _source33.dtor_low;
        DAST._IOptional<DAST._IExpression> _338___mcc_h93 = _source33.dtor_high;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source33.is_TupleSelect) {
        DAST._IExpression _339___mcc_h98 = _source33.dtor_expr;
        BigInteger _340___mcc_h99 = _source33.dtor_index;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source33.is_Call) {
        DAST._IExpression _341___mcc_h102 = _source33.dtor_on;
        Dafny.ISequence<Dafny.Rune> _342___mcc_h103 = _source33.dtor_name;
        Dafny.ISequence<DAST._IType> _343___mcc_h104 = _source33.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _344___mcc_h105 = _source33.dtor_args;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source33.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _345___mcc_h110 = _source33.dtor_params;
        DAST._IType _346___mcc_h111 = _source33.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _347___mcc_h112 = _source33.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source33.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _348___mcc_h116 = _source33.dtor_values;
        DAST._IType _349___mcc_h117 = _source33.dtor_retType;
        DAST._IExpression _350___mcc_h118 = _source33.dtor_expr;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source33.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _351___mcc_h122 = _source33.dtor_name;
        DAST._IType _352___mcc_h123 = _source33.dtor_typ;
        DAST._IExpression _353___mcc_h124 = _source33.dtor_value;
        DAST._IExpression _354___mcc_h125 = _source33.dtor_iifeBody;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source33.is_Apply) {
        DAST._IExpression _355___mcc_h130 = _source33.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _356___mcc_h131 = _source33.dtor_args;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source33.is_TypeTest) {
        DAST._IExpression _357___mcc_h134 = _source33.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _358___mcc_h135 = _source33.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _359___mcc_h136 = _source33.dtor_variant;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source33.is_InitializationValue) {
        DAST._IType _360___mcc_h140 = _source33.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source33.is_BoolBoundedPool) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source33.is_SetBoundedPool) {
        DAST._IExpression _361___mcc_h142 = _source33.dtor_of;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source33.is_SeqBoundedPool) {
        DAST._IExpression _362___mcc_h144 = _source33.dtor_of;
        bool _363___mcc_h145 = _source33.dtor_includeDuplicates;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else {
        DAST._IExpression _364___mcc_h148 = _source33.dtor_lo;
        DAST._IExpression _365___mcc_h149 = _source33.dtor_hi;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PLiteral(DAST._ILiteral l) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._ILiteral _source34 = l;
      if (_source34.is_BoolLiteral) {
        bool _366___mcc_h0 = _source34.dtor_BoolLiteral_a0;
        bool _367_b = _366___mcc_h0;
        s = ((_367_b) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")));
      } else if (_source34.is_IntLiteral) {
        Dafny.ISequence<Dafny.Rune> _368___mcc_h1 = _source34.dtor_IntLiteral_a0;
        DAST._IType _369___mcc_h2 = _source34.dtor_IntLiteral_a1;
        Dafny.ISequence<Dafny.Rune> _370_i = _368___mcc_h1;
        s = _370_i;
      } else if (_source34.is_DecLiteral) {
        Dafny.ISequence<Dafny.Rune> _371___mcc_h3 = _source34.dtor_DecLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _372___mcc_h4 = _source34.dtor_DecLiteral_a1;
        DAST._IType _373___mcc_h5 = _source34.dtor_DecLiteral_a2;
        Dafny.ISequence<Dafny.Rune> _374_r = _372___mcc_h4;
        Dafny.ISequence<Dafny.Rune> _375_l = _371___mcc_h3;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_375_l, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _374_r);
      } else if (_source34.is_StringLiteral) {
        Dafny.ISequence<Dafny.Rune> _376___mcc_h6 = _source34.dtor_StringLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _377_s_k = _376___mcc_h6;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""), _377_s_k), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""));
      } else if (_source34.is_CharLiteral) {
        Dafny.Rune _378___mcc_h7 = _source34.dtor_CharLiteral_a0;
        Dafny.Rune _379_c = _378___mcc_h7;
        s = Dafny.Sequence<Dafny.Rune>.FromElements(_379_c);
      } else {
        DAST._IType _380___mcc_h8 = _source34.dtor_Null_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("null");
      }
      return s;
    }
  }
} // end of namespace D2DPrettyPrinter
namespace ResolvedDesugaredExecutableDafnyPlugin {


  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      BigInteger _hi5 = new BigInteger((p).Count);
      for (BigInteger _381_i = BigInteger.Zero; _381_i < _hi5; _381_i++) {
        DAM._IStmt _382_m;
        DAM._IStmt _out10;
        _out10 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitModule((p).Select(_381_i));
        _382_m = _out10;
        DAM._INeg _383_t;
        DAM._INeg _out11;
        _out11 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitModuleType((p).Select(_381_i));
        _383_t = _out11;
        Dafny.Helpers.Print((_382_m));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((_383_t));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n\n")).ToVerbatimString(false));
      }
      Dafny.ISequence<Dafny.Rune> _out12;
      _out12 = D2DPrettyPrinter.__default.PrettyPrint(p);
      s = _out12;
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      return s;
    }
    public static DAM._IPos PolarizePos(DAST._IType t) {
      DAM._IPos p = DAM.Pos.Default();
      DAST._IType _source35 = t;
      if (_source35.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _384___mcc_h0 = _source35.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _385___mcc_h1 = _source35.dtor_typeArgs;
        DAST._IResolvedType _386___mcc_h2 = _source35.dtor_resolved;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Pos.create_Unit();
      } else if (_source35.is_Nullable) {
        DAST._IType _387___mcc_h6 = _source35.dtor_Nullable_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Pos.create_Unit();
      } else if (_source35.is_Tuple) {
        Dafny.ISequence<DAST._IType> _388___mcc_h8 = _source35.dtor_Tuple_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Pos.create_Unit();
      } else if (_source35.is_Array) {
        DAST._IType _389___mcc_h10 = _source35.dtor_element;
        BigInteger _390___mcc_h11 = _source35.dtor_dims;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Pos.create_Unit();
      } else if (_source35.is_Seq) {
        DAST._IType _391___mcc_h14 = _source35.dtor_element;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Pos.create_Unit();
      } else if (_source35.is_Set) {
        DAST._IType _392___mcc_h16 = _source35.dtor_element;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Pos.create_Unit();
      } else if (_source35.is_Multiset) {
        DAST._IType _393___mcc_h18 = _source35.dtor_element;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Pos.create_Unit();
      } else if (_source35.is_Map) {
        DAST._IType _394___mcc_h20 = _source35.dtor_key;
        DAST._IType _395___mcc_h21 = _source35.dtor_value;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Pos.create_Unit();
      } else if (_source35.is_Arrow) {
        Dafny.ISequence<DAST._IType> _396___mcc_h24 = _source35.dtor_args;
        DAST._IType _397___mcc_h25 = _source35.dtor_result;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Pos.create_Unit();
      } else if (_source35.is_Primitive) {
        DAST._IPrimitive _398___mcc_h28 = _source35.dtor_Primitive_a0;
        DAST._IPrimitive _source36 = _398___mcc_h28;
        if (_source36.is_Int) {
          p = DAM.Pos.create_Int();
        } else if (_source36.is_Real) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          p = DAM.Pos.create_Unit();
        } else if (_source36.is_String) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          p = DAM.Pos.create_Unit();
        } else if (_source36.is_Bool) {
          p = DAM.Pos.create_Bool();
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          p = DAM.Pos.create_Unit();
        }
      } else if (_source35.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _399___mcc_h30 = _source35.dtor_Passthrough_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Pos.create_Unit();
      } else {
        Dafny.ISequence<Dafny.Rune> _400___mcc_h32 = _source35.dtor_TypeArg_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Pos.create_Unit();
      }
      return p;
    }
    public static DAM._INeg EmitModuleType(DAST._IModule m) {
      DAM._INeg t = DAM.Neg.Default();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._INeg> _401_members;
      _401_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._INeg>.FromElements();
      BigInteger _hi6 = new BigInteger(((m).dtor_body).Count);
      for (BigInteger _402_i = BigInteger.Zero; _402_i < _hi6; _402_i++) {
        DAST._IModuleItem _source37 = ((m).dtor_body).Select(_402_i);
        if (_source37.is_Module) {
          DAST._IModule _403___mcc_h0 = _source37.dtor_Module_a0;
          DAST._IModule _404_m = _403___mcc_h0;
          DAM._INeg _405_tm;
          DAM._INeg _out13;
          _out13 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitModuleType(_404_m);
          _405_tm = _out13;
          _401_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._INeg>.Update(_401_members, (_404_m).dtor_name, _405_tm);
        } else if (_source37.is_Class) {
          DAST._IClass _406___mcc_h2 = _source37.dtor_Class_a0;
          DAST._IClass _407_c = _406___mcc_h2;
          DAM._INeg _408_tc;
          DAM._INeg _out14;
          _out14 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitClassType(_407_c);
          _408_tc = _out14;
          _401_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._INeg>.Update(_401_members, (_407_c).dtor_name, _408_tc);
        } else if (_source37.is_Trait) {
          DAST._ITrait _409___mcc_h4 = _source37.dtor_Trait_a0;
          goto continue_0;
        } else if (_source37.is_Newtype) {
          DAST._INewtype _410___mcc_h6 = _source37.dtor_Newtype_a0;
          goto continue_0;
        } else {
          DAST._IDatatype _411___mcc_h8 = _source37.dtor_Datatype_a0;
          goto continue_0;
        }
      continue_0:;
      }
    after_0:;
      t = DAM.Neg.create_Record(_401_members);
      return t;
    }
    public static DAM._INeg EmitClassType(DAST._IClass c) {
      DAM._INeg t = DAM.Neg.Default();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._INeg> _412_members;
      _412_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._INeg>.FromElements();
      BigInteger _hi7 = new BigInteger(((c).dtor_body).Count);
      for (BigInteger _413_i = BigInteger.Zero; _413_i < _hi7; _413_i++) {
        DAST._IMethod _source38 = ((c).dtor_body).Select(_413_i);
        DAST._IMethod _414___mcc_h0 = _source38;
        DAST._IMethod _415_m = _414___mcc_h0;
        DAM._INeg _416_tm;
        DAM._INeg _out15;
        _out15 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitMethodType(_415_m);
        _416_tm = _out15;
        _412_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._INeg>.Update(_412_members, (_415_m).dtor_name, _416_tm);
      }
      t = DAM.Neg.create_Record(_412_members);
      return t;
    }
    public static DAM._INeg EmitMethodType(DAST._IMethod m) {
      DAM._INeg t = DAM.Neg.Default();
      t = DAM.Neg.create_Value(DAM.Pos.create_Unit());
      BigInteger _hi8 = new BigInteger(((m).dtor_params).Count);
      for (BigInteger _417_i = BigInteger.Zero; _417_i < _hi8; _417_i++) {
        DAST._IFormal _source39 = ((m).dtor_params).Select(((new BigInteger(((m).dtor_params).Count)) - (_417_i)) - (BigInteger.One));
        Dafny.ISequence<Dafny.Rune> _418___mcc_h0 = _source39.dtor_name;
        DAST._IType _419___mcc_h1 = _source39.dtor_typ;
        DAST._IType _420_dom = _419___mcc_h1;
        DAM._IPos _421_dom;
        DAM._IPos _out16;
        _out16 = ResolvedDesugaredExecutableDafnyPlugin.COMP.PolarizePos(_420_dom);
        _421_dom = _out16;
        t = DAM.Neg.create_Function(_421_dom, t);
      }
      return t;
    }
    public static DAM._IStmt EmitModule(DAST._IModule m) {
      DAM._IStmt s = DAM.Stmt.Default();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IStmt> _422_members;
      _422_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IStmt>.FromElements();
      BigInteger _hi9 = new BigInteger(((m).dtor_body).Count);
      for (BigInteger _423_i = BigInteger.Zero; _423_i < _hi9; _423_i++) {
        DAST._IModuleItem _source40 = ((m).dtor_body).Select(_423_i);
        if (_source40.is_Module) {
          DAST._IModule _424___mcc_h0 = _source40.dtor_Module_a0;
          DAST._IModule _425_m = _424___mcc_h0;
          DAM._IStmt _426_mod;
          DAM._IStmt _out17;
          _out17 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitModule(_425_m);
          _426_mod = _out17;
          _422_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IStmt>.Update(_422_members, (_425_m).dtor_name, _426_mod);
        } else if (_source40.is_Class) {
          DAST._IClass _427___mcc_h2 = _source40.dtor_Class_a0;
          DAST._IClass _428_c = _427___mcc_h2;
          DAM._IStmt _429_cls;
          DAM._IStmt _out18;
          _out18 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitClass(_428_c);
          _429_cls = _out18;
          _422_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IStmt>.Update(_422_members, (_428_c).dtor_name, _429_cls);
        } else if (_source40.is_Trait) {
          DAST._ITrait _430___mcc_h4 = _source40.dtor_Trait_a0;
          goto continue_0;
        } else if (_source40.is_Newtype) {
          DAST._INewtype _431___mcc_h6 = _source40.dtor_Newtype_a0;
          goto continue_0;
        } else {
          DAST._IDatatype _432___mcc_h8 = _source40.dtor_Datatype_a0;
          goto continue_0;
        }
      continue_0:;
      }
    after_0:;
      s = DAM.Stmt.create_Record(_422_members);
      return s;
    }
    public static DAM._IStmt EmitClass(DAST._IClass c) {
      DAM._IStmt s = DAM.Stmt.Default();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IStmt> _433_fields;
      _433_fields = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IStmt>.FromElements();
      BigInteger _hi10 = new BigInteger(((c).dtor_body).Count);
      for (BigInteger _434_i = BigInteger.Zero; _434_i < _hi10; _434_i++) {
        DAST._IMethod _source41 = ((c).dtor_body).Select(_434_i);
        DAST._IMethod _435___mcc_h0 = _source41;
        DAST._IMethod _436_m = _435___mcc_h0;
        DAM._IStmt _437_meth;
        DAM._IStmt _out19;
        _out19 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitMethod(_436_m);
        _437_meth = _out19;
        _433_fields = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IStmt>.Update(_433_fields, (_436_m).dtor_name, _437_meth);
      }
      s = DAM.Stmt.create_Record(_433_fields);
      return s;
    }
    public static DAM._IStmt EmitMethod(DAST._IMethod m) {
      DAM._IStmt s = DAM.Stmt.Default();
      DAM._IStmt _438_body;
      DAM._IStmt _out20;
      _out20 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock((m).dtor_body);
      _438_body = _out20;
      s = DAM.Stmt.create_LetCS(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), _438_body);
      BigInteger _hi11 = new BigInteger(((m).dtor_params).Count);
      for (BigInteger _439_i = BigInteger.Zero; _439_i < _hi11; _439_i++) {
        DAST._IFormal _source42 = ((m).dtor_params).Select(((new BigInteger(((m).dtor_params).Count)) - (_439_i)) - (BigInteger.One));
        Dafny.ISequence<Dafny.Rune> _440___mcc_h0 = _source42.dtor_name;
        DAST._IType _441___mcc_h1 = _source42.dtor_typ;
        DAST._IType _442_dom = _441___mcc_h1;
        Dafny.ISequence<Dafny.Rune> _443_arg = _440___mcc_h0;
        DAM._IPos _444_dom;
        DAM._IPos _out21;
        _out21 = ResolvedDesugaredExecutableDafnyPlugin.COMP.PolarizePos(_442_dom);
        _444_dom = _out21;
        s = DAM.Stmt.create_Func(_443_arg, _444_dom, s);
      }
      return s;
    }
    public static DAM._IStmt EmitExpr(DAST._IExpression e) {
      DAM._IStmt s = DAM.Stmt.Default();
      DAST._IExpression _source43 = e;
      if (_source43.is_Literal) {
        DAST._ILiteral _445___mcc_h0 = _source43.dtor_Literal_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source43.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _446___mcc_h2 = _source43.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _447_v = _446___mcc_h2;
        s = DAM.Stmt.create_Pure(DAM.Expr.create_Var(_447_v));
      } else if (_source43.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _448___mcc_h4 = _source43.dtor_Companion_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source43.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _449___mcc_h6 = _source43.dtor_Tuple_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source43.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _450___mcc_h8 = _source43.dtor_path;
        Dafny.ISequence<DAST._IType> _451___mcc_h9 = _source43.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _452___mcc_h10 = _source43.dtor_args;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source43.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _453___mcc_h14 = _source43.dtor_dims;
        DAST._IType _454___mcc_h15 = _source43.dtor_typ;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source43.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _455___mcc_h18 = _source43.dtor_path;
        Dafny.ISequence<DAST._IType> _456___mcc_h19 = _source43.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _457___mcc_h20 = _source43.dtor_variant;
        bool _458___mcc_h21 = _source43.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _459___mcc_h22 = _source43.dtor_contents;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source43.is_Convert) {
        DAST._IExpression _460___mcc_h28 = _source43.dtor_value;
        DAST._IType _461___mcc_h29 = _source43.dtor_from;
        DAST._IType _462___mcc_h30 = _source43.dtor_typ;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source43.is_SeqConstruct) {
        DAST._IExpression _463___mcc_h34 = _source43.dtor_length;
        DAST._IExpression _464___mcc_h35 = _source43.dtor_elem;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source43.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _465___mcc_h38 = _source43.dtor_elements;
        DAST._IType _466___mcc_h39 = _source43.dtor_typ;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source43.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _467___mcc_h42 = _source43.dtor_elements;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source43.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _468___mcc_h44 = _source43.dtor_mapElems;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source43.is_This) {
        s = DAM.Stmt.create_Pure(DAM.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this")));
      } else if (_source43.is_Ite) {
        DAST._IExpression _469___mcc_h46 = _source43.dtor_cond;
        DAST._IExpression _470___mcc_h47 = _source43.dtor_thn;
        DAST._IExpression _471___mcc_h48 = _source43.dtor_els;
        DAST._IExpression _472_els = _471___mcc_h48;
        DAST._IExpression _473_thn = _470___mcc_h47;
        DAST._IExpression _474_cond = _469___mcc_h46;
        DAM._IStmt _475_cond;
        DAM._IStmt _out22;
        _out22 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_474_cond);
        _475_cond = _out22;
        DAM._IStmt _476_thn;
        DAM._IStmt _out23;
        _out23 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_473_thn);
        _476_thn = _out23;
        DAM._IStmt _477_els;
        DAM._IStmt _out24;
        _out24 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_472_els);
        _477_els = _out24;
        s = DAM.Stmt.create_Bind(_475_cond, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), DAM.Stmt.create_Ite(DAM.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if")), _476_thn, _477_els));
      } else if (_source43.is_UnOp) {
        DAST._IUnaryOp _478___mcc_h52 = _source43.dtor_unOp;
        DAST._IExpression _479___mcc_h53 = _source43.dtor_expr;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source43.is_BinOp) {
        DAST._IBinOp _480___mcc_h56 = _source43.dtor_op;
        DAST._IExpression _481___mcc_h57 = _source43.dtor_left;
        DAST._IExpression _482___mcc_h58 = _source43.dtor_right;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source43.is_ArrayLen) {
        DAST._IExpression _483___mcc_h62 = _source43.dtor_expr;
        BigInteger _484___mcc_h63 = _source43.dtor_dim;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source43.is_Select) {
        DAST._IExpression _485___mcc_h66 = _source43.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _486___mcc_h67 = _source43.dtor_field;
        bool _487___mcc_h68 = _source43.dtor_isConstant;
        bool _488___mcc_h69 = _source43.dtor_onDatatype;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source43.is_SelectFn) {
        DAST._IExpression _489___mcc_h74 = _source43.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _490___mcc_h75 = _source43.dtor_field;
        bool _491___mcc_h76 = _source43.dtor_onDatatype;
        bool _492___mcc_h77 = _source43.dtor_isStatic;
        BigInteger _493___mcc_h78 = _source43.dtor_arity;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source43.is_Index) {
        DAST._IExpression _494___mcc_h84 = _source43.dtor_expr;
        DAST._ICollKind _495___mcc_h85 = _source43.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _496___mcc_h86 = _source43.dtor_indices;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source43.is_IndexRange) {
        DAST._IExpression _497___mcc_h90 = _source43.dtor_expr;
        bool _498___mcc_h91 = _source43.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _499___mcc_h92 = _source43.dtor_low;
        DAST._IOptional<DAST._IExpression> _500___mcc_h93 = _source43.dtor_high;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source43.is_TupleSelect) {
        DAST._IExpression _501___mcc_h98 = _source43.dtor_expr;
        BigInteger _502___mcc_h99 = _source43.dtor_index;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source43.is_Call) {
        DAST._IExpression _503___mcc_h102 = _source43.dtor_on;
        Dafny.ISequence<Dafny.Rune> _504___mcc_h103 = _source43.dtor_name;
        Dafny.ISequence<DAST._IType> _505___mcc_h104 = _source43.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _506___mcc_h105 = _source43.dtor_args;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source43.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _507___mcc_h110 = _source43.dtor_params;
        DAST._IType _508___mcc_h111 = _source43.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _509___mcc_h112 = _source43.dtor_body;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source43.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _510___mcc_h116 = _source43.dtor_values;
        DAST._IType _511___mcc_h117 = _source43.dtor_retType;
        DAST._IExpression _512___mcc_h118 = _source43.dtor_expr;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source43.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _513___mcc_h122 = _source43.dtor_name;
        DAST._IType _514___mcc_h123 = _source43.dtor_typ;
        DAST._IExpression _515___mcc_h124 = _source43.dtor_value;
        DAST._IExpression _516___mcc_h125 = _source43.dtor_iifeBody;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source43.is_Apply) {
        DAST._IExpression _517___mcc_h130 = _source43.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _518___mcc_h131 = _source43.dtor_args;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source43.is_TypeTest) {
        DAST._IExpression _519___mcc_h134 = _source43.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _520___mcc_h135 = _source43.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _521___mcc_h136 = _source43.dtor_variant;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source43.is_InitializationValue) {
        DAST._IType _522___mcc_h140 = _source43.dtor_typ;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source43.is_BoolBoundedPool) {
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source43.is_SetBoundedPool) {
        DAST._IExpression _523___mcc_h142 = _source43.dtor_of;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source43.is_SeqBoundedPool) {
        DAST._IExpression _524___mcc_h144 = _source43.dtor_of;
        bool _525___mcc_h145 = _source43.dtor_includeDuplicates;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else {
        DAST._IExpression _526___mcc_h148 = _source43.dtor_lo;
        DAST._IExpression _527___mcc_h149 = _source43.dtor_hi;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      }
      return s;
    }
    public static DAM._IStmt EmitBlock(Dafny.ISequence<DAST._IStatement> block) {
      DAM._IStmt st = DAM.Stmt.Default();
      if ((new BigInteger((block).Count)).Sign != 1) {
        st = DAM.__default.Skip();
        return st;
      }
      Dafny.ISequence<DAST._IStatement> _528_next;
      _528_next = (block).Drop(BigInteger.One);
      DAST._IStatement _source44 = (block).Select(BigInteger.Zero);
      if (_source44.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _529___mcc_h0 = _source44.dtor_name;
        DAST._IType _530___mcc_h1 = _source44.dtor_typ;
        DAST._IOptional<DAST._IExpression> _531___mcc_h2 = _source44.dtor_maybeValue;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.__default.Skip();
      } else if (_source44.is_Assign) {
        DAST._IAssignLhs _532___mcc_h6 = _source44.dtor_lhs;
        DAST._IExpression _533___mcc_h7 = _source44.dtor_value;
        DAST._IExpression _534_rhs = _533___mcc_h7;
        DAST._IAssignLhs _535_lhs = _532___mcc_h6;
        DAM._IStmt _536_lhs;
        DAM._IStmt _out25;
        _out25 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitLval(_535_lhs);
        _536_lhs = _out25;
        DAM._IStmt _537_rhs;
        DAM._IStmt _out26;
        _out26 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_534_rhs);
        _537_rhs = _out26;
        DAM._IStmt _538_next;
        DAM._IStmt _out27;
        _out27 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_528_next);
        _538_next = _out27;
        st = DAM.Stmt.create_Bind(_536_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Stmt.create_Bind(_537_rhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rhs"), DAM.Stmt.create_Write(DAM.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rhs")), DAM.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), _538_next)));
      } else if (_source44.is_If) {
        DAST._IExpression _539___mcc_h10 = _source44.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _540___mcc_h11 = _source44.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _541___mcc_h12 = _source44.dtor_els;
        Dafny.ISequence<DAST._IStatement> _542_els = _541___mcc_h12;
        Dafny.ISequence<DAST._IStatement> _543_thn = _540___mcc_h11;
        DAST._IExpression _544_cond = _539___mcc_h10;
        DAM._IStmt _545_cond;
        DAM._IStmt _out28;
        _out28 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_544_cond);
        _545_cond = _out28;
        DAM._IStmt _546_thn;
        DAM._IStmt _out29;
        _out29 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_543_thn);
        _546_thn = _out29;
        DAM._IStmt _547_els;
        DAM._IStmt _out30;
        _out30 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_542_els);
        _547_els = _out30;
        DAM._IStmt _548_next;
        DAM._IStmt _out31;
        _out31 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_528_next);
        _548_next = _out31;
        st = DAM.__default.Then(DAM.Stmt.create_Bind(_545_cond, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), DAM.Stmt.create_Ite(DAM.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if")), _546_thn, _547_els)), _548_next);
      } else if (_source44.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _549___mcc_h16 = _source44.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _550___mcc_h17 = _source44.dtor_body;
        Dafny.ISequence<DAST._IStatement> _551_stmt = _550___mcc_h17;
        Dafny.ISequence<Dafny.Rune> _552_lab = _549___mcc_h16;
        DAM._IStmt _553_block;
        DAM._IStmt _out32;
        _out32 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(Dafny.Sequence<DAST._IStatement>.Concat(_551_stmt, _528_next));
        _553_block = _out32;
        st = DAM.Stmt.create_LetCS(_552_lab, _553_block);
      } else if (_source44.is_While) {
        DAST._IExpression _554___mcc_h20 = _source44.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _555___mcc_h21 = _source44.dtor_body;
        Dafny.ISequence<DAST._IStatement> _556_body = _555___mcc_h21;
        DAST._IExpression _557_guard = _554___mcc_h20;
        DAM._IStmt _558_guard;
        DAM._IStmt _out33;
        _out33 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_557_guard);
        _558_guard = _out33;
        DAM._IStmt _559_body;
        DAM._IStmt _out34;
        _out34 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_556_body);
        _559_body = _out34;
        DAM._IStmt _560_next;
        DAM._IStmt _out35;
        _out35 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_528_next);
        _560_next = _out35;
        st = DAM.__default.While(_558_guard, _559_body, _560_next);
      } else if (_source44.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _561___mcc_h24 = _source44.dtor_boundName;
        DAST._IType _562___mcc_h25 = _source44.dtor_boundType;
        DAST._IExpression _563___mcc_h26 = _source44.dtor_over;
        Dafny.ISequence<DAST._IStatement> _564___mcc_h27 = _source44.dtor_body;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.__default.Skip();
      } else if (_source44.is_Call) {
        DAST._IExpression _565___mcc_h32 = _source44.dtor_on;
        Dafny.ISequence<Dafny.Rune> _566___mcc_h33 = _source44.dtor_name;
        Dafny.ISequence<DAST._IType> _567___mcc_h34 = _source44.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _568___mcc_h35 = _source44.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _569___mcc_h36 = _source44.dtor_outs;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.__default.Skip();
      } else if (_source44.is_Return) {
        DAST._IExpression _570___mcc_h42 = _source44.dtor_expr;
        DAST._IExpression _571_expr = _570___mcc_h42;
        DAM._IStmt _572_ret;
        DAM._IStmt _out36;
        _out36 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_571_expr);
        _572_ret = _out36;
        st = DAM.Stmt.create_Throw(DAM.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return")), _572_ret);
      } else if (_source44.is_EarlyReturn) {
        st = DAM.Stmt.create_Throw(DAM.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return")), DAM.__default.Skip());
      } else if (_source44.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _573___mcc_h44 = _source44.dtor_toLabel;
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _574_lab = _573___mcc_h44;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source45 = _574_lab;
          if (_source45.is_Some) {
            Dafny.ISequence<Dafny.Rune> _575___mcc_h50 = _source45.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _576_lab = _575___mcc_h50;
            st = DAM.Stmt.create_Throw(DAM.Expr.create_Var(_576_lab), DAM.__default.Skip());
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            st = DAM.__default.Skip();
          }
        }
      } else if (_source44.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _577___mcc_h46 = _source44.dtor_body;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.__default.Skip();
      } else if (_source44.is_JumpTailCallStart) {
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.__default.Skip();
      } else if (_source44.is_Halt) {
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.__default.Skip();
      } else {
        DAST._IExpression _578___mcc_h48 = _source44.dtor_Print_a0;
        DAST._IExpression _579_expr = _578___mcc_h48;
        DAM._IStmt _580_arg;
        DAM._IStmt _out37;
        _out37 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_579_expr);
        _580_arg = _out37;
        DAM._IStmt _581_next;
        DAM._IStmt _out38;
        _out38 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_528_next);
        _581_next = _out38;
        st = DAM.Stmt.create_Bind(_580_arg, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Stmt.create_Print(DAM.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), _581_next));
      }
      return st;
    }
    public static DAM._IStmt EmitLval(DAST._IAssignLhs lv) {
      DAM._IStmt s = DAM.Stmt.Default();
      DAST._IAssignLhs _source46 = lv;
      if (_source46.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _582___mcc_h0 = _source46.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source47 = _582___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _583___mcc_h2 = _source47;
        Dafny.ISequence<Dafny.Rune> _584_v = _583___mcc_h2;
        s = DAM.Stmt.create_Pure(DAM.Expr.create_Var(_584_v));
      } else if (_source46.is_Select) {
        DAST._IExpression _585___mcc_h4 = _source46.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _586___mcc_h5 = _source46.dtor_field;
        s = DAM.__default.Skip();
      } else {
        DAST._IExpression _587___mcc_h8 = _source46.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _588___mcc_h9 = _source46.dtor_indices;
        s = DAM.__default.Skip();
      }
      return s;
    }
  }
} // end of namespace ResolvedDesugaredExecutableDafnyPlugin
namespace DCOMP {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> natToString(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0");
      } else if ((n) == (BigInteger.One)) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1");
      } else if ((n) == (new BigInteger(2))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("2");
      } else if ((n) == (new BigInteger(3))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("3");
      } else if ((n) == (new BigInteger(4))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("4");
      } else if ((n) == (new BigInteger(5))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("5");
      } else if ((n) == (new BigInteger(6))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("6");
      } else if ((n) == (new BigInteger(7))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("7");
      } else if ((n) == (new BigInteger(8))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("8");
      } else if ((n) == (new BigInteger(9))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("9");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.natToString(Dafny.Helpers.EuclideanDivision(n, new BigInteger(10))), DCOMP.__default.natToString(Dafny.Helpers.EuclideanModulus(n, new BigInteger(10))));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _589___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_589___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else {
        if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
          _589___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_589___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
          Dafny.ISequence<Dafny.Rune> _in1 = (i).Drop(BigInteger.One);
          i = _in1;
          goto TAIL_CALL_START;
        } else {
          _589___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_589___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
          Dafny.ISequence<Dafny.Rune> _in2 = (i).Drop(BigInteger.One);
          i = _in2;
          goto TAIL_CALL_START;
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), DCOMP.__default.replaceDots(i));
    }
  }

  public partial class stringNat {
    private static readonly Dafny.ISequence<Dafny.Rune> Witness = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1");
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(DCOMP.stringNat.Default());
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _590_body;
      Dafny.ISequence<Dafny.Rune> _out39;
      _out39 = DCOMP.COMP.GenModuleBody((mod).dtor_body, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
      _590_body = _out39;
      if ((mod).dtor_isExtern) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), DCOMP.__default.escapeIdent((mod).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), DCOMP.__default.escapeIdent((mod).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _590_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _591_i;
      _591_i = BigInteger.Zero;
      while ((_591_i) < (new BigInteger((body).Count))) {
        Dafny.ISequence<Dafny.Rune> _592_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        DAST._IModuleItem _source48 = (body).Select(_591_i);
        if (_source48.is_Module) {
          DAST._IModule _593___mcc_h0 = _source48.dtor_Module_a0;
          DAST._IModule _594_m = _593___mcc_h0;
          Dafny.ISequence<Dafny.Rune> _out40;
          _out40 = DCOMP.COMP.GenModule(_594_m, containingPath);
          _592_generated = _out40;
        } else if (_source48.is_Class) {
          DAST._IClass _595___mcc_h1 = _source48.dtor_Class_a0;
          DAST._IClass _596_c = _595___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _out41;
          _out41 = DCOMP.COMP.GenClass(_596_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_596_c).dtor_name)));
          _592_generated = _out41;
        } else if (_source48.is_Trait) {
          DAST._ITrait _597___mcc_h2 = _source48.dtor_Trait_a0;
          DAST._ITrait _598_t = _597___mcc_h2;
          Dafny.ISequence<Dafny.Rune> _out42;
          _out42 = DCOMP.COMP.GenTrait(_598_t, containingPath);
          _592_generated = _out42;
        } else if (_source48.is_Newtype) {
          DAST._INewtype _599___mcc_h3 = _source48.dtor_Newtype_a0;
          DAST._INewtype _600_n = _599___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _out43;
          _out43 = DCOMP.COMP.GenNewtype(_600_n);
          _592_generated = _out43;
        } else {
          DAST._IDatatype _601___mcc_h4 = _source48.dtor_Datatype_a0;
          DAST._IDatatype _602_d = _601___mcc_h4;
          Dafny.ISequence<Dafny.Rune> _out44;
          _out44 = DCOMP.COMP.GenDatatype(_602_d);
          _592_generated = _out44;
        }
        if ((_591_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _592_generated);
        _591_i = (_591_i) + (BigInteger.One);
      }
      return s;
    }
    public static void GenTypeParameters(Dafny.ISequence<DAST._IType> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<Dafny.Rune> typeParams, out Dafny.ISequence<Dafny.Rune> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints, out Dafny.ISequence<Dafny.Rune> constrainedEraseParams, out Dafny.ISequence<Dafny.Rune> unerasedParams, out Dafny.ISequence<Dafny.Rune> erasedParams) {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Empty;
      unerasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      erasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _603_tpI;
      _603_tpI = BigInteger.Zero;
      if ((new BigInteger((@params).Count)).Sign == 1) {
        typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where ");
        constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_603_tpI) < (new BigInteger((@params).Count))) {
          DAST._IType _604_tp;
          _604_tp = (@params).Select(_603_tpI);
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_604_tp));
          Dafny.ISequence<Dafny.Rune> _605_genTp;
          Dafny.ISequence<Dafny.Rune> _out45;
          _out45 = DCOMP.COMP.GenType(_604_tp, false, false);
          _605_genTp = _out45;
          typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(typeParams, _605_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          Dafny.ISequence<Dafny.Rune> _606_baseConstraints;
          _606_baseConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<"), _605_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default"));
          constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(constrainedTypeParams, _605_genTp), _606_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static, "));
          whereConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(whereConstraints, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _605_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(constrainedEraseParams, _605_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _605_genTp), _606_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + ::dafny_runtime::DafnyUnerasable<")), _605_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased> + 'static, "));
          unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, _605_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, _605_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _603_tpI = (_603_tpI) + (BigInteger.One);
        }
        typeParams = Dafny.Sequence<Dafny.Rune>.Concat(typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Concat(constrainedTypeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Concat(constrainedEraseParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _607_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _608_typeParams;
      Dafny.ISequence<Dafny.Rune> _609_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _610_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _611_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _612_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _613_erasedParams;
      Dafny.ISet<DAST._IType> _out46;
      Dafny.ISequence<Dafny.Rune> _out47;
      Dafny.ISequence<Dafny.Rune> _out48;
      Dafny.ISequence<Dafny.Rune> _out49;
      Dafny.ISequence<Dafny.Rune> _out50;
      Dafny.ISequence<Dafny.Rune> _out51;
      Dafny.ISequence<Dafny.Rune> _out52;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out46, out _out47, out _out48, out _out49, out _out50, out _out51, out _out52);
      _607_typeParamsSet = _out46;
      _608_typeParams = _out47;
      _609_constrainedTypeParams = _out48;
      _610_whereConstraints = _out49;
      _611_constrainedEraseParams = _out50;
      _612_unerasedParams = _out51;
      _613_erasedParams = _out52;
      Dafny.ISequence<Dafny.Rune> _614_fields;
      _614_fields = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<Dafny.Rune> _615_fieldInits;
      _615_fieldInits = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _616_fieldI;
      _616_fieldI = BigInteger.Zero;
      while ((_616_fieldI) < (new BigInteger(((c).dtor_fields).Count))) {
        DAST._IField _617_field;
        _617_field = ((c).dtor_fields).Select(_616_fieldI);
        Dafny.ISequence<Dafny.Rune> _618_fieldType;
        Dafny.ISequence<Dafny.Rune> _out53;
        _out53 = DCOMP.COMP.GenType(((_617_field).dtor_formal).dtor_typ, false, false);
        _618_fieldType = _out53;
        _614_fields = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_614_fields, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")), DCOMP.__default.escapeIdent(((_617_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell<")), _618_fieldType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">,\n"));
        DAST._IOptional<DAST._IExpression> _source49 = (_617_field).dtor_defaultValue;
        if (_source49.is_Some) {
          DAST._IExpression _619___mcc_h0 = _source49.dtor_Some_a0;
          DAST._IExpression _620_e = _619___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _621_eStr;
            bool _622___v1;
            bool _623___v2;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _624___v3;
            Dafny.ISequence<Dafny.Rune> _out54;
            bool _out55;
            bool _out56;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out57;
            DCOMP.COMP.GenExpr(_620_e, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out54, out _out55, out _out56, out _out57);
            _621_eStr = _out54;
            _622___v1 = _out55;
            _623___v2 = _out56;
            _624___v3 = _out57;
            _615_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_615_fieldInits, DCOMP.__default.escapeIdent(((_617_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell::new(")), _621_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("),\n"));
          }
        } else {
          {
            _615_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_615_fieldInits, DCOMP.__default.escapeIdent(((_617_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell::new(::std::default::Default::default()),\n"));
          }
        }
        _616_fieldI = (_616_fieldI) + (BigInteger.One);
      }
      BigInteger _625_typeParamI;
      _625_typeParamI = BigInteger.Zero;
      while ((_625_typeParamI) < (new BigInteger(((c).dtor_typeParams).Count))) {
        Dafny.ISequence<Dafny.Rune> _626_tpeGen;
        Dafny.ISequence<Dafny.Rune> _out58;
        _out58 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_625_typeParamI), false, false);
        _626_tpeGen = _out58;
        _614_fields = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_614_fields, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_")), DCOMP.__default.natToString(_625_typeParamI)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::marker::PhantomData<")), _626_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">,\n"));
        _615_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_615_fieldInits, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_")), DCOMP.__default.natToString(_625_typeParamI)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::marker::PhantomData,\n"));
        _625_typeParamI = (_625_typeParamI) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub struct "), DCOMP.__default.escapeIdent((c).dtor_name)), _608_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _614_fields), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      Dafny.ISequence<Dafny.Rune> _627_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _628_traitBodies;
      Dafny.ISequence<Dafny.Rune> _out59;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out60;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(path)), _607_typeParamsSet, out _out59, out _out60);
      _627_implBody = _out59;
      _628_traitBodies = _out60;
      _627_implBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn new() -> Self {\n"), DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _615_fieldInits), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n}\n")), _627_implBody);
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _609_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), DCOMP.__default.escapeIdent((c).dtor_name)), _608_typeParams), _610_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _627_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _629_i;
        _629_i = BigInteger.Zero;
        while ((_629_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _630_superClass;
          _630_superClass = ((c).dtor_superClasses).Select(_629_i);
          DAST._IType _source50 = _630_superClass;
          if (_source50.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _631___mcc_h1 = _source50.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _632___mcc_h2 = _source50.dtor_typeArgs;
            DAST._IResolvedType _633___mcc_h3 = _source50.dtor_resolved;
            DAST._IResolvedType _source51 = _633___mcc_h3;
            if (_source51.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _634___mcc_h7 = _source51.dtor_path;
            } else if (_source51.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _635___mcc_h9 = _source51.dtor_path;
              Dafny.ISequence<DAST._IType> _636_typeArgs = _632___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _637_traitPath = _631___mcc_h1;
              {
                Dafny.ISequence<Dafny.Rune> _638_pathStr;
                Dafny.ISequence<Dafny.Rune> _out61;
                _out61 = DCOMP.COMP.GenPath(_637_traitPath);
                _638_pathStr = _out61;
                Dafny.ISequence<Dafny.Rune> _639_typeArgs;
                Dafny.ISequence<Dafny.Rune> _out62;
                _out62 = DCOMP.COMP.GenTypeArgs(_636_typeArgs, false, false);
                _639_typeArgs = _out62;
                Dafny.ISequence<Dafny.Rune> _640_body;
                _640_body = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
                if ((_628_traitBodies).Contains(_637_traitPath)) {
                  _640_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Select(_628_traitBodies, _637_traitPath);
                }
                Dafny.ISequence<Dafny.Rune> _641_genSelfPath;
                Dafny.ISequence<Dafny.Rune> _out63;
                _out63 = DCOMP.COMP.GenPath(path);
                _641_genSelfPath = _out63;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nimpl ")), _609_constrainedTypeParams), _638_pathStr), _639_typeArgs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" for ::std::rc::Rc<")), _641_genSelfPath), _608_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")), _610_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _640_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
              }
            } else {
              DAST._IType _642___mcc_h11 = _source51.dtor_Newtype_a0;
            }
          } else if (_source50.is_Nullable) {
            DAST._IType _643___mcc_h13 = _source50.dtor_Nullable_a0;
          } else if (_source50.is_Tuple) {
            Dafny.ISequence<DAST._IType> _644___mcc_h15 = _source50.dtor_Tuple_a0;
          } else if (_source50.is_Array) {
            DAST._IType _645___mcc_h17 = _source50.dtor_element;
            BigInteger _646___mcc_h18 = _source50.dtor_dims;
          } else if (_source50.is_Seq) {
            DAST._IType _647___mcc_h21 = _source50.dtor_element;
          } else if (_source50.is_Set) {
            DAST._IType _648___mcc_h23 = _source50.dtor_element;
          } else if (_source50.is_Multiset) {
            DAST._IType _649___mcc_h25 = _source50.dtor_element;
          } else if (_source50.is_Map) {
            DAST._IType _650___mcc_h27 = _source50.dtor_key;
            DAST._IType _651___mcc_h28 = _source50.dtor_value;
          } else if (_source50.is_Arrow) {
            Dafny.ISequence<DAST._IType> _652___mcc_h31 = _source50.dtor_args;
            DAST._IType _653___mcc_h32 = _source50.dtor_result;
          } else if (_source50.is_Primitive) {
            DAST._IPrimitive _654___mcc_h35 = _source50.dtor_Primitive_a0;
          } else if (_source50.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _655___mcc_h37 = _source50.dtor_Passthrough_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _656___mcc_h39 = _source50.dtor_TypeArg_a0;
          }
          _629_i = (_629_i) + (BigInteger.One);
        }
      }
      Dafny.ISequence<Dafny.Rune> _657_defaultImpl;
      _657_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _609_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _608_typeParams), _610_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      _657_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_657_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n"));
      _657_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_657_defaultImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new()\n"));
      _657_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_657_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      _657_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_657_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      Dafny.ISequence<Dafny.Rune> _658_printImpl;
      _658_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _609_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _608_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {\n"));
      _658_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_658_printImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(__fmt_print_formatter, \"")), ((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _659_ptrPartialEqImpl;
      _659_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _608_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::cmp::PartialEq for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _608_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      _659_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_659_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn eq(&self, other: &Self) -> bool {\n"));
      _659_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_659_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ptr::eq(self, other)"));
      _659_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_659_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _660_identEraseImpls;
      _660_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _609_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _608_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), DCOMP.__default.escapeIdent((c).dtor_name)), _613_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}\n"));
      _660_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_660_identEraseImpls, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _611_constrainedEraseParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _612_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _608_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _657_defaultImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _658_printImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _659_ptrPartialEqImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _660_identEraseImpls);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _661_typeParamsSet;
      _661_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<Dafny.Rune> _662_typeParams;
      _662_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _663_tpI;
      _663_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        _662_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_663_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._IType _664_tp;
          _664_tp = ((t).dtor_typeParams).Select(_663_tpI);
          _661_typeParamsSet = Dafny.Set<DAST._IType>.Union(_661_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_664_tp));
          Dafny.ISequence<Dafny.Rune> _665_genTp;
          Dafny.ISequence<Dafny.Rune> _out64;
          _out64 = DCOMP.COMP.GenType(_664_tp, false, false);
          _665_genTp = _out64;
          _662_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_662_typeParams, _665_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _663_tpI = (_663_tpI) + (BigInteger.One);
        }
        _662_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(_662_typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _666_fullPath;
      _666_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<Dafny.Rune> _667_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _668___v6;
      Dafny.ISequence<Dafny.Rune> _out65;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out66;
      DCOMP.COMP.GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_666_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_666_fullPath)), _661_typeParamsSet, out _out65, out _out66);
      _667_implBody = _out65;
      _668___v6 = _out66;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub trait "), DCOMP.__default.escapeIdent((t).dtor_name)), _662_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _667_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenNewtype(DAST._INewtype c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _669_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _670_typeParams;
      Dafny.ISequence<Dafny.Rune> _671_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _672_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _673___v7;
      Dafny.ISequence<Dafny.Rune> _674___v8;
      Dafny.ISequence<Dafny.Rune> _675___v9;
      Dafny.ISet<DAST._IType> _out67;
      Dafny.ISequence<Dafny.Rune> _out68;
      Dafny.ISequence<Dafny.Rune> _out69;
      Dafny.ISequence<Dafny.Rune> _out70;
      Dafny.ISequence<Dafny.Rune> _out71;
      Dafny.ISequence<Dafny.Rune> _out72;
      Dafny.ISequence<Dafny.Rune> _out73;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out67, out _out68, out _out69, out _out70, out _out71, out _out72, out _out73);
      _669_typeParamsSet = _out67;
      _670_typeParams = _out68;
      _671_constrainedTypeParams = _out69;
      _672_whereConstraints = _out70;
      _673___v7 = _out71;
      _674___v8 = _out72;
      _675___v9 = _out73;
      Dafny.ISequence<Dafny.Rune> _676_underlyingType;
      Dafny.ISequence<Dafny.Rune> _out74;
      _out74 = DCOMP.COMP.GenType((c).dtor_base, false, false);
      _676_underlyingType = _out74;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]\n#[repr(transparent)]\npub struct "), DCOMP.__default.escapeIdent((c).dtor_name)), _670_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(pub ")), _676_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _671_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _670_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), _676_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _671_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), _676_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _670_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _671_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _670_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _670_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _671_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _670_typeParams), _672_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n"));
      DAST._IOptional<DAST._IExpression> _source52 = (c).dtor_witnessExpr;
      if (_source52.is_Some) {
        DAST._IExpression _677___mcc_h0 = _source52.dtor_Some_a0;
        DAST._IExpression _678_e = _677___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _679_eStr;
          bool _680___v10;
          bool _681___v11;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _682___v12;
          Dafny.ISequence<Dafny.Rune> _out75;
          bool _out76;
          bool _out77;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out78;
          DCOMP.COMP.GenExpr(_678_e, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out75, out _out76, out _out77, out _out78);
          _679_eStr = _out75;
          _680___v10 = _out76;
          _681___v11 = _out77;
          _682___v12 = _out78;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _679_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
        }
      } else {
        {
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(::std::default::Default::default())\n"));
        }
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _671_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _670_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, in_seq: bool) -> ::std::fmt::Result {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, __fmt_print_formatter, in_seq)\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _671_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::ops::Deref for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _670_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = ")), _676_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn deref(&self) -> &Self::Target {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenDatatype(DAST._IDatatype c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _683_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _684_typeParams;
      Dafny.ISequence<Dafny.Rune> _685_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _686_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _687_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _688_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _689_erasedParams;
      Dafny.ISet<DAST._IType> _out79;
      Dafny.ISequence<Dafny.Rune> _out80;
      Dafny.ISequence<Dafny.Rune> _out81;
      Dafny.ISequence<Dafny.Rune> _out82;
      Dafny.ISequence<Dafny.Rune> _out83;
      Dafny.ISequence<Dafny.Rune> _out84;
      Dafny.ISequence<Dafny.Rune> _out85;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out79, out _out80, out _out81, out _out82, out _out83, out _out84, out _out85);
      _683_typeParamsSet = _out79;
      _684_typeParams = _out80;
      _685_constrainedTypeParams = _out81;
      _686_whereConstraints = _out82;
      _687_constrainedEraseParams = _out83;
      _688_unerasedParams = _out84;
      _689_erasedParams = _out85;
      Dafny.ISequence<Dafny.Rune> _690_ctors;
      _690_ctors = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _691_i;
      _691_i = BigInteger.Zero;
      while ((_691_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _692_ctor;
        _692_ctor = ((c).dtor_ctors).Select(_691_i);
        Dafny.ISequence<Dafny.Rune> _693_ctorBody;
        _693_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_692_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        BigInteger _694_j;
        _694_j = BigInteger.Zero;
        while ((_694_j) < (new BigInteger(((_692_ctor).dtor_args).Count))) {
          DAST._IFormal _695_formal;
          _695_formal = ((_692_ctor).dtor_args).Select(_694_j);
          Dafny.ISequence<Dafny.Rune> _696_formalType;
          Dafny.ISequence<Dafny.Rune> _out86;
          _out86 = DCOMP.COMP.GenType((_695_formal).dtor_typ, false, false);
          _696_formalType = _out86;
          if ((c).dtor_isCo) {
            _693_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_693_ctorBody, DCOMP.__default.escapeIdent((_695_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper<")), _696_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">, "));
          } else {
            _693_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_693_ctorBody, DCOMP.__default.escapeIdent((_695_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _696_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          _694_j = (_694_j) + (BigInteger.One);
        }
        _693_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(_693_ctorBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        _690_ctors = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_690_ctors, _693_ctorBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"));
        _691_i = (_691_i) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _697_selfPath;
      _697_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<Dafny.Rune> _698_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _699_traitBodies;
      Dafny.ISequence<Dafny.Rune> _out87;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out88;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(_697_selfPath)), _683_typeParamsSet, out _out87, out _out88);
      _698_implBody = _out87;
      _699_traitBodies = _out88;
      _691_i = BigInteger.Zero;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _700_emittedFields;
      _700_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      while ((_691_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _701_ctor;
        _701_ctor = ((c).dtor_ctors).Select(_691_i);
        BigInteger _702_j;
        _702_j = BigInteger.Zero;
        while ((_702_j) < (new BigInteger(((_701_ctor).dtor_args).Count))) {
          DAST._IFormal _703_formal;
          _703_formal = ((_701_ctor).dtor_args).Select(_702_j);
          if (!((_700_emittedFields).Contains((_703_formal).dtor_name))) {
            _700_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_700_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_703_formal).dtor_name));
            Dafny.ISequence<Dafny.Rune> _704_formalType;
            Dafny.ISequence<Dafny.Rune> _out89;
            _out89 = DCOMP.COMP.GenType((_703_formal).dtor_typ, false, false);
            _704_formalType = _out89;
            Dafny.ISequence<Dafny.Rune> _705_methodBody;
            _705_methodBody = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match self {\n");
            BigInteger _706_k;
            _706_k = BigInteger.Zero;
            while ((_706_k) < (new BigInteger(((c).dtor_ctors).Count))) {
              DAST._IDatatypeCtor _707_ctor2;
              _707_ctor2 = ((c).dtor_ctors).Select(_706_k);
              Dafny.ISequence<Dafny.Rune> _708_ctorMatch;
              _708_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_707_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              BigInteger _709_l;
              _709_l = BigInteger.Zero;
              bool _710_hasMatchingField;
              _710_hasMatchingField = false;
              while ((_709_l) < (new BigInteger(((_707_ctor2).dtor_args).Count))) {
                DAST._IFormal _711_formal2;
                _711_formal2 = ((_707_ctor2).dtor_args).Select(_709_l);
                if (((_703_formal).dtor_name).Equals((_711_formal2).dtor_name)) {
                  _710_hasMatchingField = true;
                }
                _708_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_708_ctorMatch, DCOMP.__default.escapeIdent((_711_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                _709_l = (_709_l) + (BigInteger.One);
              }
              if (_710_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _708_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_708_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => ::std::ops::Deref::deref(&")), DCOMP.__default.escapeIdent((_703_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0),\n"));
                } else {
                  _708_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_708_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => ")), DCOMP.__default.escapeIdent((_703_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"));
                }
              } else {
                _708_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_708_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => panic!(\"field does not exist on this variant\"),\n"));
              }
              _705_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(_705_methodBody, _708_ctorMatch);
              _706_k = (_706_k) + (BigInteger.One);
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _705_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_705_methodBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..) => panic!(),\n"));
            }
            _705_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(_705_methodBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            _698_implBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_698_implBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn ")), DCOMP.__default.escapeIdent((_703_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&self) -> &")), _704_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _705_methodBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
          }
          _702_j = (_702_j) + (BigInteger.One);
        }
        _691_i = (_691_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _690_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_690_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant("));
        BigInteger _712_typeI;
        _712_typeI = BigInteger.Zero;
        while ((_712_typeI) < (new BigInteger(((c).dtor_typeParams).Count))) {
          if ((_712_typeI).Sign == 1) {
            _690_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_690_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _713_genTp;
          Dafny.ISequence<Dafny.Rune> _out90;
          _out90 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_712_typeI), false, false);
          _713_genTp = _out90;
          _690_ctors = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_690_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData::<")), _713_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          _712_typeI = (_712_typeI) + (BigInteger.One);
        }
        _690_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_690_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      Dafny.ISequence<Dafny.Rune> _714_enumBody;
      _714_enumBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq)]\npub enum "), DCOMP.__default.escapeIdent((c).dtor_name)), _684_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _690_ctors), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _685_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), DCOMP.__default.escapeIdent((c).dtor_name)), _684_typeParams), _686_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _698_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      Dafny.ISequence<Dafny.Rune> _715_identEraseImpls;
      _715_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _685_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _684_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), DCOMP.__default.escapeIdent((c).dtor_name)), _689_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}\n"));
      _715_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_715_identEraseImpls, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _687_constrainedEraseParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _688_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _684_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      Dafny.ISequence<Dafny.Rune> _716_printImpl;
      _716_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _685_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _684_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match self {\n"));
      _691_i = BigInteger.Zero;
      while ((_691_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _717_ctor;
        _717_ctor = ((c).dtor_ctors).Select(_691_i);
        Dafny.ISequence<Dafny.Rune> _718_ctorMatch;
        _718_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_717_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _719_modulePrefix;
        _719_modulePrefix = (((((c).dtor_enclosingModule)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(((c).dtor_enclosingModule), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        Dafny.ISequence<Dafny.Rune> _720_printRhs;
        _720_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(__fmt_print_formatter, \""), _719_modulePrefix), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (_717_ctor).dtor_name), (((_717_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?;")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?;"))));
        BigInteger _721_j;
        _721_j = BigInteger.Zero;
        while ((_721_j) < (new BigInteger(((_717_ctor).dtor_args).Count))) {
          DAST._IFormal _722_formal;
          _722_formal = ((_717_ctor).dtor_args).Select(_721_j);
          _718_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_718_ctorMatch, DCOMP.__default.escapeIdent((_722_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          if ((_721_j).Sign == 1) {
            _720_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_720_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nwrite!(__fmt_print_formatter, \", \")?;"));
          }
          _720_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_720_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n::dafny_runtime::DafnyPrint::fmt_print(")), DCOMP.__default.escapeIdent((_722_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", __fmt_print_formatter, false)?;"));
          _721_j = (_721_j) + (BigInteger.One);
        }
        _718_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_718_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_717_ctor).dtor_hasAnyArgs) {
          _720_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_720_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nwrite!(__fmt_print_formatter, \")\")?;"));
        }
        _720_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_720_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nOk(())"));
        _716_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_716_printImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _718_ctorMatch), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" => {\n")), _720_printRhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n"));
        _691_i = (_691_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _716_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_716_printImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..) => {panic!()\n}\n"));
      }
      _716_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(_716_printImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _723_defaultImpl;
      _723_defaultImpl = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        _723_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _685_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _684_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n")), DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
        _691_i = BigInteger.Zero;
        while ((_691_i) < (new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count))) {
          DAST._IFormal _724_formal;
          _724_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_691_i);
          _723_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_723_defaultImpl, DCOMP.__default.escapeIdent((_724_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::default::Default::default(),\n"));
          _691_i = (_691_i) + (BigInteger.One);
        }
        _723_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_723_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n}\n}\n"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_714_enumBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _715_identEraseImpls), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _716_printImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _723_defaultImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      if ((new BigInteger((p).Count)).Sign == 0) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
        return s;
      } else {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super::");
        BigInteger _725_i;
        _725_i = BigInteger.Zero;
        while ((_725_i) < (new BigInteger((p).Count))) {
          if ((_725_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(((p).Select(_725_i))));
          _725_i = (_725_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((args).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        BigInteger _726_i;
        _726_i = BigInteger.Zero;
        while ((_726_i) < (new BigInteger((args).Count))) {
          if ((_726_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _727_genTp;
          Dafny.ISequence<Dafny.Rune> _out91;
          _out91 = DCOMP.COMP.GenType((args).Select(_726_i), inBinding, inFn);
          _727_genTp = _out91;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _727_genTp);
          _726_i = (_726_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenType(DAST._IType c, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IType _source53 = c;
      if (_source53.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _728___mcc_h0 = _source53.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _729___mcc_h1 = _source53.dtor_typeArgs;
        DAST._IResolvedType _730___mcc_h2 = _source53.dtor_resolved;
        DAST._IResolvedType _731_resolved = _730___mcc_h2;
        Dafny.ISequence<DAST._IType> _732_args = _729___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _733_p = _728___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _out92;
          _out92 = DCOMP.COMP.GenPath(_733_p);
          s = _out92;
          Dafny.ISequence<Dafny.Rune> _734_typeArgs;
          Dafny.ISequence<Dafny.Rune> _out93;
          _out93 = DCOMP.COMP.GenTypeArgs(_732_args, inBinding, inFn);
          _734_typeArgs = _out93;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _734_typeArgs);
          DAST._IResolvedType _source54 = _731_resolved;
          if (_source54.is_Datatype) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _735___mcc_h18 = _source54.dtor_path;
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
            }
          } else if (_source54.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _736___mcc_h20 = _source54.dtor_path;
            {
              if ((_733_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
                s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<dyn ::std::any::Any>");
              } else {
                if (inBinding) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              }
            }
          } else {
            DAST._IType _737___mcc_h22 = _source54.dtor_Newtype_a0;
            DAST._IResolvedType _738_Primitive = _731_resolved;
          }
        }
      } else if (_source53.is_Nullable) {
        DAST._IType _739___mcc_h3 = _source53.dtor_Nullable_a0;
        DAST._IType _740_inner = _739___mcc_h3;
        {
          Dafny.ISequence<Dafny.Rune> _741_innerStr;
          Dafny.ISequence<Dafny.Rune> _out94;
          _out94 = DCOMP.COMP.GenType(_740_inner, inBinding, inFn);
          _741_innerStr = _out94;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option<"), _741_innerStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source53.is_Tuple) {
        Dafny.ISequence<DAST._IType> _742___mcc_h4 = _source53.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IType> _743_types = _742___mcc_h4;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          BigInteger _744_i;
          _744_i = BigInteger.Zero;
          while ((_744_i) < (new BigInteger((_743_types).Count))) {
            if ((_744_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _745_generated;
            Dafny.ISequence<Dafny.Rune> _out95;
            _out95 = DCOMP.COMP.GenType((_743_types).Select(_744_i), inBinding, inFn);
            _745_generated = _out95;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _745_generated), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            _744_i = (_744_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
        }
      } else if (_source53.is_Array) {
        DAST._IType _746___mcc_h5 = _source53.dtor_element;
        BigInteger _747___mcc_h6 = _source53.dtor_dims;
        BigInteger _748_dims = _747___mcc_h6;
        DAST._IType _749_element = _746___mcc_h5;
        {
          Dafny.ISequence<Dafny.Rune> _750_elemStr;
          Dafny.ISequence<Dafny.Rune> _out96;
          _out96 = DCOMP.COMP.GenType(_749_element, inBinding, inFn);
          _750_elemStr = _out96;
          s = _750_elemStr;
          BigInteger _751_i;
          _751_i = BigInteger.Zero;
          while ((_751_i) < (_748_dims)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<::std::cell::RefCell<::std::vec::Vec<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>>"));
            _751_i = (_751_i) + (BigInteger.One);
          }
        }
      } else if (_source53.is_Seq) {
        DAST._IType _752___mcc_h7 = _source53.dtor_element;
        DAST._IType _753_element = _752___mcc_h7;
        {
          Dafny.ISequence<Dafny.Rune> _754_elemStr;
          Dafny.ISequence<Dafny.Rune> _out97;
          _out97 = DCOMP.COMP.GenType(_753_element, inBinding, inFn);
          _754_elemStr = _out97;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::vec::Vec<"), _754_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source53.is_Set) {
        DAST._IType _755___mcc_h8 = _source53.dtor_element;
        DAST._IType _756_element = _755___mcc_h8;
        {
          Dafny.ISequence<Dafny.Rune> _757_elemStr;
          Dafny.ISequence<Dafny.Rune> _out98;
          _out98 = DCOMP.COMP.GenType(_756_element, inBinding, inFn);
          _757_elemStr = _out98;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashSet<"), _757_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source53.is_Multiset) {
        DAST._IType _758___mcc_h9 = _source53.dtor_element;
        DAST._IType _759_element = _758___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _760_elemStr;
          Dafny.ISequence<Dafny.Rune> _out99;
          _out99 = DCOMP.COMP.GenType(_759_element, inBinding, inFn);
          _760_elemStr = _out99;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _760_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", u64>"));
        }
      } else if (_source53.is_Map) {
        DAST._IType _761___mcc_h10 = _source53.dtor_key;
        DAST._IType _762___mcc_h11 = _source53.dtor_value;
        DAST._IType _763_value = _762___mcc_h11;
        DAST._IType _764_key = _761___mcc_h10;
        {
          Dafny.ISequence<Dafny.Rune> _765_keyStr;
          Dafny.ISequence<Dafny.Rune> _out100;
          _out100 = DCOMP.COMP.GenType(_764_key, inBinding, inFn);
          _765_keyStr = _out100;
          Dafny.ISequence<Dafny.Rune> _766_valueStr;
          Dafny.ISequence<Dafny.Rune> _out101;
          _out101 = DCOMP.COMP.GenType(_763_value, inBinding, inFn);
          _766_valueStr = _out101;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _765_keyStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _766_valueStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source53.is_Arrow) {
        Dafny.ISequence<DAST._IType> _767___mcc_h12 = _source53.dtor_args;
        DAST._IType _768___mcc_h13 = _source53.dtor_result;
        DAST._IType _769_result = _768___mcc_h13;
        Dafny.ISequence<DAST._IType> _770_args = _767___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper<::std::rc::Rc<dyn ::std::ops::Fn(");
          BigInteger _771_i;
          _771_i = BigInteger.Zero;
          while ((_771_i) < (new BigInteger((_770_args).Count))) {
            if ((_771_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _772_generated;
            Dafny.ISequence<Dafny.Rune> _out102;
            _out102 = DCOMP.COMP.GenType((_770_args).Select(_771_i), inBinding, true);
            _772_generated = _out102;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _772_generated);
            _771_i = (_771_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _773_resultType;
          Dafny.ISequence<Dafny.Rune> _out103;
          _out103 = DCOMP.COMP.GenType(_769_result, inBinding, (inFn) || (inBinding));
          _773_resultType = _out103;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _773_resultType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static>>"));
        }
      } else if (_source53.is_Primitive) {
        DAST._IPrimitive _774___mcc_h14 = _source53.dtor_Primitive_a0;
        DAST._IPrimitive _775_p = _774___mcc_h14;
        {
          DAST._IPrimitive _source55 = _775_p;
          if (_source55.is_Int) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt");
          } else if (_source55.is_Real) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational");
          } else if (_source55.is_String) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Vec<char>");
          } else if (_source55.is_Bool) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool");
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char");
          }
        }
      } else if (_source53.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _776___mcc_h15 = _source53.dtor_Passthrough_a0;
        Dafny.ISequence<Dafny.Rune> _777_v = _776___mcc_h15;
        s = _777_v;
      } else {
        Dafny.ISequence<Dafny.Rune> _778___mcc_h16 = _source53.dtor_TypeArg_a0;
        Dafny.ISequence<Dafny.Rune> _source56 = _778___mcc_h16;
        Dafny.ISequence<Dafny.Rune> _779___mcc_h17 = _source56;
        Dafny.ISequence<Dafny.Rune> _780_name = _779___mcc_h17;
        s = DCOMP.__default.escapeIdent(_780_name);
      }
      return s;
    }
    public static void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<Dafny.Rune> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> traitBodies) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _781_i;
      _781_i = BigInteger.Zero;
      while ((_781_i) < (new BigInteger((body).Count))) {
        DAST._IMethod _source57 = (body).Select(_781_i);
        DAST._IMethod _782___mcc_h0 = _source57;
        DAST._IMethod _783_m = _782___mcc_h0;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source58 = (_783_m).dtor_overridingPath;
          if (_source58.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _784___mcc_h1 = _source58.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _785_p = _784___mcc_h1;
            {
              Dafny.ISequence<Dafny.Rune> _786_existing;
              _786_existing = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              if ((traitBodies).Contains(_785_p)) {
                _786_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Select(traitBodies, _785_p);
              }
              if ((new BigInteger((_786_existing).Count)).Sign == 1) {
                _786_existing = Dafny.Sequence<Dafny.Rune>.Concat(_786_existing, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
              }
              Dafny.ISequence<Dafny.Rune> _787_genMethod;
              Dafny.ISequence<Dafny.Rune> _out104;
              _out104 = DCOMP.COMP.GenMethod(_783_m, true, enclosingType, enclosingTypeParams);
              _787_genMethod = _out104;
              _786_existing = Dafny.Sequence<Dafny.Rune>.Concat(_786_existing, _787_genMethod);
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>(_785_p, _786_existing)));
            }
          } else {
            {
              Dafny.ISequence<Dafny.Rune> _788_generated;
              Dafny.ISequence<Dafny.Rune> _out105;
              _out105 = DCOMP.COMP.GenMethod(_783_m, forTrait, enclosingType, enclosingTypeParams);
              _788_generated = _out105;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _788_generated);
            }
          }
        }
        if ((new BigInteger((s).Count)).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        _781_i = (_781_i) + (BigInteger.One);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> GenParams(Dafny.ISequence<DAST._IFormal> @params) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _789_i;
      _789_i = BigInteger.Zero;
      while ((_789_i) < (new BigInteger((@params).Count))) {
        DAST._IFormal _790_param;
        _790_param = (@params).Select(_789_i);
        Dafny.ISequence<Dafny.Rune> _791_paramType;
        Dafny.ISequence<Dafny.Rune> _out106;
        _out106 = DCOMP.COMP.GenType((_790_param).dtor_typ, false, false);
        _791_paramType = _out106;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((_790_param).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _791_paramType);
        if ((_789_i) < ((new BigInteger((@params).Count)) - (BigInteger.One))) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        _789_i = (_789_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _792_params;
      Dafny.ISequence<Dafny.Rune> _out107;
      _out107 = DCOMP.COMP.GenParams((m).dtor_params);
      _792_params = _out107;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _793_paramNames;
      _793_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _794_paramI;
      _794_paramI = BigInteger.Zero;
      while ((_794_paramI) < (new BigInteger(((m).dtor_params).Count))) {
        _793_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_793_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((m).dtor_params).Select(_794_paramI)).dtor_name));
        _794_paramI = (_794_paramI) + (BigInteger.One);
      }
      if (!((m).dtor_isStatic)) {
        if (forTrait) {
          _792_params = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _792_params);
        } else {
          Dafny.ISequence<Dafny.Rune> _795_enclosingTypeString;
          Dafny.ISequence<Dafny.Rune> _out108;
          _out108 = DCOMP.COMP.GenType(enclosingType, false, false);
          _795_enclosingTypeString = _out108;
          _792_params = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self: &"), _795_enclosingTypeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _792_params);
        }
      }
      Dafny.ISequence<Dafny.Rune> _796_retType;
      _796_retType = (((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")));
      BigInteger _797_typeI;
      _797_typeI = BigInteger.Zero;
      while ((_797_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        if ((_797_typeI).Sign == 1) {
          _796_retType = Dafny.Sequence<Dafny.Rune>.Concat(_796_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        Dafny.ISequence<Dafny.Rune> _798_typeString;
        Dafny.ISequence<Dafny.Rune> _out109;
        _out109 = DCOMP.COMP.GenType(((m).dtor_outTypes).Select(_797_typeI), false, false);
        _798_typeString = _out109;
        _796_retType = Dafny.Sequence<Dafny.Rune>.Concat(_796_retType, _798_typeString);
        _797_typeI = (_797_typeI) + (BigInteger.One);
      }
      if ((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) {
        _796_retType = Dafny.Sequence<Dafny.Rune>.Concat(_796_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      if (forTrait) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn "), DCOMP.__default.escapeIdent((m).dtor_name));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn "), DCOMP.__default.escapeIdent((m).dtor_name));
      }
      Dafny.ISequence<DAST._IType> _799_typeParamsFiltered;
      _799_typeParamsFiltered = Dafny.Sequence<DAST._IType>.FromElements();
      BigInteger _800_typeParamI;
      _800_typeParamI = BigInteger.Zero;
      while ((_800_typeParamI) < (new BigInteger(((m).dtor_typeParams).Count))) {
        DAST._IType _801_typeParam;
        _801_typeParam = ((m).dtor_typeParams).Select(_800_typeParamI);
        if (!((enclosingTypeParams).Contains(_801_typeParam))) {
          _799_typeParamsFiltered = Dafny.Sequence<DAST._IType>.Concat(_799_typeParamsFiltered, Dafny.Sequence<DAST._IType>.FromElements(_801_typeParam));
        }
        _800_typeParamI = (_800_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _802_whereClauses;
      _802_whereClauses = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((_799_typeParamsFiltered).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        _802_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_802_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where "));
        BigInteger _803_i;
        _803_i = BigInteger.Zero;
        while ((_803_i) < (new BigInteger((_799_typeParamsFiltered).Count))) {
          if ((_803_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            _802_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_802_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _804_typeString;
          Dafny.ISequence<Dafny.Rune> _out110;
          _out110 = DCOMP.COMP.GenType((_799_typeParamsFiltered).Select(_803_i), false, false);
          _804_typeString = _out110;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _804_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<")), _804_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default + 'static"));
          _802_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_802_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _804_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq"));
          _803_i = (_803_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _792_params), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _796_retType), _802_whereClauses);
      if ((m).dtor_hasBody) {
        Dafny.ISequence<Dafny.Rune> _805_earlyReturn;
        _805_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return;");
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source59 = (m).dtor_outVars;
        if (_source59.is_Some) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _806___mcc_h0 = _source59.dtor_Some_a0;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _807_outVars = _806___mcc_h0;
          {
            _805_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return (");
            BigInteger _808_outI;
            _808_outI = BigInteger.Zero;
            while ((_808_outI) < (new BigInteger((_807_outVars).Count))) {
              if ((_808_outI).Sign == 1) {
                _805_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_805_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _809_outVar;
              _809_outVar = (_807_outVars).Select(_808_outI);
              _805_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_805_earlyReturn, DCOMP.__default.escapeIdent((_809_outVar)));
              _808_outI = (_808_outI) + (BigInteger.One);
            }
            _805_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_805_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
          }
        } else {
        }
        Dafny.ISequence<Dafny.Rune> _810_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _811___v15;
        Dafny.ISequence<Dafny.Rune> _out111;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out112;
        DCOMP.COMP.GenStmts((m).dtor_body, (((m).dtor_isStatic) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None()) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))), _793_paramNames, true, _805_earlyReturn, out _out111, out _out112);
        _810_body = _out111;
        _811___v15 = _out112;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _810_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n"));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      }
      return s;
    }
    public static void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _812_declarations;
      _812_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _813_i;
      _813_i = BigInteger.Zero;
      while ((_813_i) < (new BigInteger((stmts).Count))) {
        DAST._IStatement _814_stmt;
        _814_stmt = (stmts).Select(_813_i);
        Dafny.ISequence<Dafny.Rune> _815_stmtString;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _816_recIdents;
        Dafny.ISequence<Dafny.Rune> _out113;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out114;
        DCOMP.COMP.GenStmt(_814_stmt, selfIdent, @params, (isLast) && ((_813_i) == ((new BigInteger((stmts).Count)) - (BigInteger.One))), earlyReturn, out _out113, out _out114);
        _815_stmtString = _out113;
        _816_recIdents = _out114;
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_816_recIdents, _812_declarations));
        DAST._IStatement _source60 = _814_stmt;
        if (_source60.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _817___mcc_h0 = _source60.dtor_name;
          DAST._IType _818___mcc_h1 = _source60.dtor_typ;
          DAST._IOptional<DAST._IExpression> _819___mcc_h2 = _source60.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _820_name = _817___mcc_h0;
          {
            _812_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_812_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_820_name));
          }
        } else if (_source60.is_Assign) {
          DAST._IAssignLhs _821___mcc_h6 = _source60.dtor_lhs;
          DAST._IExpression _822___mcc_h7 = _source60.dtor_value;
        } else if (_source60.is_If) {
          DAST._IExpression _823___mcc_h10 = _source60.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _824___mcc_h11 = _source60.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _825___mcc_h12 = _source60.dtor_els;
        } else if (_source60.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _826___mcc_h16 = _source60.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _827___mcc_h17 = _source60.dtor_body;
        } else if (_source60.is_While) {
          DAST._IExpression _828___mcc_h20 = _source60.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _829___mcc_h21 = _source60.dtor_body;
        } else if (_source60.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _830___mcc_h24 = _source60.dtor_boundName;
          DAST._IType _831___mcc_h25 = _source60.dtor_boundType;
          DAST._IExpression _832___mcc_h26 = _source60.dtor_over;
          Dafny.ISequence<DAST._IStatement> _833___mcc_h27 = _source60.dtor_body;
        } else if (_source60.is_Call) {
          DAST._IExpression _834___mcc_h32 = _source60.dtor_on;
          Dafny.ISequence<Dafny.Rune> _835___mcc_h33 = _source60.dtor_name;
          Dafny.ISequence<DAST._IType> _836___mcc_h34 = _source60.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _837___mcc_h35 = _source60.dtor_args;
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _838___mcc_h36 = _source60.dtor_outs;
        } else if (_source60.is_Return) {
          DAST._IExpression _839___mcc_h42 = _source60.dtor_expr;
        } else if (_source60.is_EarlyReturn) {
        } else if (_source60.is_Break) {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _840___mcc_h44 = _source60.dtor_toLabel;
        } else if (_source60.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _841___mcc_h46 = _source60.dtor_body;
        } else if (_source60.is_JumpTailCallStart) {
        } else if (_source60.is_Halt) {
        } else {
          DAST._IExpression _842___mcc_h48 = _source60.dtor_Print_a0;
        }
        if ((_813_i).Sign == 1) {
          generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, _815_stmtString);
        _813_i = (_813_i) + (BigInteger.One);
      }
    }
    public static void GenAssignLhs(DAST._IAssignLhs lhs, Dafny.ISequence<Dafny.Rune> rhs, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, out Dafny.ISequence<Dafny.Rune> generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IAssignLhs _source61 = lhs;
      if (_source61.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _843___mcc_h0 = _source61.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source62 = _843___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _844___mcc_h1 = _source62;
        Dafny.ISequence<Dafny.Rune> _845_id = _844___mcc_h1;
        {
          if ((@params).Contains(_845_id)) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), DCOMP.__default.escapeIdent(_845_id));
          } else {
            generated = DCOMP.__default.escapeIdent(_845_id);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_845_id);
          needsIIFE = false;
        }
      } else if (_source61.is_Select) {
        DAST._IExpression _846___mcc_h2 = _source61.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _847___mcc_h3 = _source61.dtor_field;
        Dafny.ISequence<Dafny.Rune> _848_field = _847___mcc_h3;
        DAST._IExpression _849_on = _846___mcc_h2;
        {
          Dafny.ISequence<Dafny.Rune> _850_onExpr;
          bool _851_onOwned;
          bool _852_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _853_recIdents;
          Dafny.ISequence<Dafny.Rune> _out115;
          bool _out116;
          bool _out117;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out118;
          DCOMP.COMP.GenExpr(_849_on, selfIdent, @params, false, out _out115, out _out116, out _out117, out _out118);
          _850_onExpr = _out115;
          _851_onOwned = _out116;
          _852_onErased = _out117;
          _853_recIdents = _out118;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*("), _850_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _848_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()) = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          readIdents = _853_recIdents;
          needsIIFE = true;
        }
      } else {
        DAST._IExpression _854___mcc_h4 = _source61.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _855___mcc_h5 = _source61.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _856_indices = _855___mcc_h5;
        DAST._IExpression _857_on = _854___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _858_onExpr;
          bool _859_onOwned;
          bool _860_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _861_recIdents;
          Dafny.ISequence<Dafny.Rune> _out119;
          bool _out120;
          bool _out121;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out122;
          DCOMP.COMP.GenExpr(_857_on, selfIdent, @params, false, out _out119, out _out120, out _out121, out _out122);
          _858_onExpr = _out119;
          _859_onOwned = _out120;
          _860_onErased = _out121;
          _861_recIdents = _out122;
          readIdents = _861_recIdents;
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          BigInteger _862_i;
          _862_i = BigInteger.Zero;
          while ((_862_i) < (new BigInteger((_856_indices).Count))) {
            Dafny.ISequence<Dafny.Rune> _863_idx;
            bool _864___v19;
            bool _865_idxErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _866_recIdentsIdx;
            Dafny.ISequence<Dafny.Rune> _out123;
            bool _out124;
            bool _out125;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out126;
            DCOMP.COMP.GenExpr((_856_indices).Select(_862_i), selfIdent, @params, true, out _out123, out _out124, out _out125, out _out126);
            _863_idx = _out123;
            _864___v19 = _out124;
            _865_idxErased = _out125;
            _866_recIdentsIdx = _out126;
            if (!(_865_idxErased)) {
              _863_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _863_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let __idx")), DCOMP.__default.natToString(_862_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = <usize as ::dafny_runtime::NumCast>::from(")), _863_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap();\n"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _866_recIdentsIdx);
            _862_i = (_862_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, _858_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()"));
          _862_i = BigInteger.Zero;
          while ((_862_i) < (new BigInteger((_856_indices).Count))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[__idx")), DCOMP.__default.natToString(_862_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            _862_i = (_862_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}"));
          needsIIFE = true;
        }
      }
    }
    public static void GenStmt(DAST._IStatement stmt, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IStatement _source63 = stmt;
      if (_source63.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _867___mcc_h0 = _source63.dtor_name;
        DAST._IType _868___mcc_h1 = _source63.dtor_typ;
        DAST._IOptional<DAST._IExpression> _869___mcc_h2 = _source63.dtor_maybeValue;
        DAST._IOptional<DAST._IExpression> _source64 = _869___mcc_h2;
        if (_source64.is_Some) {
          DAST._IExpression _870___mcc_h3 = _source64.dtor_Some_a0;
          DAST._IExpression _871_expression = _870___mcc_h3;
          DAST._IType _872_typ = _868___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _873_name = _867___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _874_typeString;
            Dafny.ISequence<Dafny.Rune> _out127;
            _out127 = DCOMP.COMP.GenType(_872_typ, true, false);
            _874_typeString = _out127;
            Dafny.ISequence<Dafny.Rune> _875_expr;
            bool _876___v20;
            bool _877_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _878_recIdents;
            Dafny.ISequence<Dafny.Rune> _out128;
            bool _out129;
            bool _out130;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out131;
            DCOMP.COMP.GenExpr(_871_expression, selfIdent, @params, true, out _out128, out _out129, out _out130, out _out131);
            _875_expr = _out128;
            _876___v20 = _out129;
            _877_recErased = _out130;
            _878_recIdents = _out131;
            if (!(_877_recErased)) {
              _875_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _875_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _875_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _874_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _875_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_873_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _874_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _875_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = _878_recIdents;
          }
        } else {
          DAST._IType _879_typ = _868___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _880_name = _867___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _881_typeString;
            Dafny.ISequence<Dafny.Rune> _out132;
            _out132 = DCOMP.COMP.GenType(_879_typ, true, false);
            _881_typeString = _out132;
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_880_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _881_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source63.is_Assign) {
        DAST._IAssignLhs _882___mcc_h4 = _source63.dtor_lhs;
        DAST._IExpression _883___mcc_h5 = _source63.dtor_value;
        DAST._IExpression _884_expression = _883___mcc_h5;
        DAST._IAssignLhs _885_lhs = _882___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _886_lhsGen;
          bool _887_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _888_recIdents;
          Dafny.ISequence<Dafny.Rune> _out133;
          bool _out134;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out135;
          DCOMP.COMP.GenAssignLhs(_885_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), selfIdent, @params, out _out133, out _out134, out _out135);
          _886_lhsGen = _out133;
          _887_needsIIFE = _out134;
          _888_recIdents = _out135;
          Dafny.ISequence<Dafny.Rune> _889_exprGen;
          bool _890___v21;
          bool _891_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _892_exprIdents;
          Dafny.ISequence<Dafny.Rune> _out136;
          bool _out137;
          bool _out138;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out139;
          DCOMP.COMP.GenExpr(_884_expression, selfIdent, @params, true, out _out136, out _out137, out _out138, out _out139);
          _889_exprGen = _out136;
          _890___v21 = _out137;
          _891_exprErased = _out138;
          _892_exprIdents = _out139;
          if (!(_891_exprErased)) {
            _889_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _889_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          _889_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _889_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          if (_887_needsIIFE) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet __rhs = "), _889_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _886_lhsGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_886_lhsGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _889_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_888_recIdents, _892_exprIdents);
        }
      } else if (_source63.is_If) {
        DAST._IExpression _893___mcc_h6 = _source63.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _894___mcc_h7 = _source63.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _895___mcc_h8 = _source63.dtor_els;
        Dafny.ISequence<DAST._IStatement> _896_els = _895___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _897_thn = _894___mcc_h7;
        DAST._IExpression _898_cond = _893___mcc_h6;
        {
          Dafny.ISequence<Dafny.Rune> _899_condString;
          bool _900___v22;
          bool _901_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _902_recIdents;
          Dafny.ISequence<Dafny.Rune> _out140;
          bool _out141;
          bool _out142;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out143;
          DCOMP.COMP.GenExpr(_898_cond, selfIdent, @params, true, out _out140, out _out141, out _out142, out _out143);
          _899_condString = _out140;
          _900___v22 = _out141;
          _901_condErased = _out142;
          _902_recIdents = _out143;
          if (!(_901_condErased)) {
            _899_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _899_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _902_recIdents;
          Dafny.ISequence<Dafny.Rune> _903_thnString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _904_thnIdents;
          Dafny.ISequence<Dafny.Rune> _out144;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out145;
          DCOMP.COMP.GenStmts(_897_thn, selfIdent, @params, isLast, earlyReturn, out _out144, out _out145);
          _903_thnString = _out144;
          _904_thnIdents = _out145;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _904_thnIdents);
          Dafny.ISequence<Dafny.Rune> _905_elsString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _906_elsIdents;
          Dafny.ISequence<Dafny.Rune> _out146;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out147;
          DCOMP.COMP.GenStmts(_896_els, selfIdent, @params, isLast, earlyReturn, out _out146, out _out147);
          _905_elsString = _out146;
          _906_elsIdents = _out147;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _906_elsIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if "), _899_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _903_thnString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _905_elsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source63.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _907___mcc_h9 = _source63.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _908___mcc_h10 = _source63.dtor_body;
        Dafny.ISequence<DAST._IStatement> _909_body = _908___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _910_lbl = _907___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _911_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _912_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out148;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out149;
          DCOMP.COMP.GenStmts(_909_body, selfIdent, @params, isLast, earlyReturn, out _out148, out _out149);
          _911_bodyString = _out148;
          _912_bodyIdents = _out149;
          readIdents = _912_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'label_"), _910_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": loop {\n")), _911_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source63.is_While) {
        DAST._IExpression _913___mcc_h11 = _source63.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _914___mcc_h12 = _source63.dtor_body;
        Dafny.ISequence<DAST._IStatement> _915_body = _914___mcc_h12;
        DAST._IExpression _916_cond = _913___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _917_condString;
          bool _918___v23;
          bool _919_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _920_recIdents;
          Dafny.ISequence<Dafny.Rune> _out150;
          bool _out151;
          bool _out152;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out153;
          DCOMP.COMP.GenExpr(_916_cond, selfIdent, @params, true, out _out150, out _out151, out _out152, out _out153);
          _917_condString = _out150;
          _918___v23 = _out151;
          _919_condErased = _out152;
          _920_recIdents = _out153;
          if (!(_919_condErased)) {
            _917_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _917_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _920_recIdents;
          Dafny.ISequence<Dafny.Rune> _921_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _922_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out154;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out155;
          DCOMP.COMP.GenStmts(_915_body, selfIdent, @params, false, earlyReturn, out _out154, out _out155);
          _921_bodyString = _out154;
          _922_bodyIdents = _out155;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _922_bodyIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while "), _917_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _921_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source63.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _923___mcc_h13 = _source63.dtor_boundName;
        DAST._IType _924___mcc_h14 = _source63.dtor_boundType;
        DAST._IExpression _925___mcc_h15 = _source63.dtor_over;
        Dafny.ISequence<DAST._IStatement> _926___mcc_h16 = _source63.dtor_body;
        Dafny.ISequence<DAST._IStatement> _927_body = _926___mcc_h16;
        DAST._IExpression _928_over = _925___mcc_h15;
        DAST._IType _929_boundType = _924___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _930_boundName = _923___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _931_overString;
          bool _932___v24;
          bool _933_overErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _934_recIdents;
          Dafny.ISequence<Dafny.Rune> _out156;
          bool _out157;
          bool _out158;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out159;
          DCOMP.COMP.GenExpr(_928_over, selfIdent, @params, true, out _out156, out _out157, out _out158, out _out159);
          _931_overString = _out156;
          _932___v24 = _out157;
          _933_overErased = _out158;
          _934_recIdents = _out159;
          Dafny.ISequence<Dafny.Rune> _935_boundTypeStr;
          Dafny.ISequence<Dafny.Rune> _out160;
          _out160 = DCOMP.COMP.GenType(_929_boundType, false, false);
          _935_boundTypeStr = _out160;
          readIdents = _934_recIdents;
          Dafny.ISequence<Dafny.Rune> _936_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _937_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out161;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out162;
          DCOMP.COMP.GenStmts(_927_body, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(@params, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_930_boundName)), false, earlyReturn, out _out161, out _out162);
          _936_bodyString = _out161;
          _937_bodyIdents = _out162;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _937_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_930_boundName));
          Dafny.ISequence<Dafny.Rune> _938_unerasedIter;
          _938_unerasedIter = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_iter_erased");
          if (_933_overErased) {
            _938_unerasedIter = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _935_boundTypeStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _938_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for _iter_erased in "), _931_overString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_930_boundName)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _938_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _936_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source63.is_Call) {
        DAST._IExpression _939___mcc_h17 = _source63.dtor_on;
        Dafny.ISequence<Dafny.Rune> _940___mcc_h18 = _source63.dtor_name;
        Dafny.ISequence<DAST._IType> _941___mcc_h19 = _source63.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _942___mcc_h20 = _source63.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _943___mcc_h21 = _source63.dtor_outs;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _944_maybeOutVars = _943___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _945_args = _942___mcc_h20;
        Dafny.ISequence<DAST._IType> _946_typeArgs = _941___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _947_name = _940___mcc_h18;
        DAST._IExpression _948_on = _939___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _949_typeArgString;
          _949_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_946_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _950_typeI;
            _950_typeI = BigInteger.Zero;
            _949_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_950_typeI) < (new BigInteger((_946_typeArgs).Count))) {
              if ((_950_typeI).Sign == 1) {
                _949_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_949_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _951_typeString;
              Dafny.ISequence<Dafny.Rune> _out163;
              _out163 = DCOMP.COMP.GenType((_946_typeArgs).Select(_950_typeI), false, false);
              _951_typeString = _out163;
              _949_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_949_typeArgString, _951_typeString);
              _950_typeI = (_950_typeI) + (BigInteger.One);
            }
            _949_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_949_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _952_argString;
          _952_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _953_i;
          _953_i = BigInteger.Zero;
          while ((_953_i) < (new BigInteger((_945_args).Count))) {
            if ((_953_i).Sign == 1) {
              _952_argString = Dafny.Sequence<Dafny.Rune>.Concat(_952_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _954_argExpr;
            bool _955_isOwned;
            bool _956_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _957_argIdents;
            Dafny.ISequence<Dafny.Rune> _out164;
            bool _out165;
            bool _out166;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out167;
            DCOMP.COMP.GenExpr((_945_args).Select(_953_i), selfIdent, @params, false, out _out164, out _out165, out _out166, out _out167);
            _954_argExpr = _out164;
            _955_isOwned = _out165;
            _956_argErased = _out166;
            _957_argIdents = _out167;
            if (_955_isOwned) {
              _954_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _954_argExpr);
            }
            _952_argString = Dafny.Sequence<Dafny.Rune>.Concat(_952_argString, _954_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _957_argIdents);
            _953_i = (_953_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _958_enclosingString;
          bool _959___v25;
          bool _960___v26;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _961_enclosingIdents;
          Dafny.ISequence<Dafny.Rune> _out168;
          bool _out169;
          bool _out170;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out171;
          DCOMP.COMP.GenExpr(_948_on, selfIdent, @params, false, out _out168, out _out169, out _out170, out _out171);
          _958_enclosingString = _out168;
          _959___v25 = _out169;
          _960___v26 = _out170;
          _961_enclosingIdents = _out171;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _961_enclosingIdents);
          DAST._IExpression _source65 = _948_on;
          if (_source65.is_Literal) {
            DAST._ILiteral _962___mcc_h26 = _source65.dtor_Literal_a0;
            {
              _958_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _958_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source65.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _963___mcc_h28 = _source65.dtor_Ident_a0;
            {
              _958_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _958_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source65.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _964___mcc_h30 = _source65.dtor_Companion_a0;
            {
              _958_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(_958_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
            }
          } else if (_source65.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _965___mcc_h32 = _source65.dtor_Tuple_a0;
            {
              _958_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _958_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source65.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _966___mcc_h34 = _source65.dtor_path;
            Dafny.ISequence<DAST._IType> _967___mcc_h35 = _source65.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _968___mcc_h36 = _source65.dtor_args;
            {
              _958_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _958_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source65.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _969___mcc_h40 = _source65.dtor_dims;
            DAST._IType _970___mcc_h41 = _source65.dtor_typ;
            {
              _958_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _958_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source65.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _971___mcc_h44 = _source65.dtor_path;
            Dafny.ISequence<DAST._IType> _972___mcc_h45 = _source65.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _973___mcc_h46 = _source65.dtor_variant;
            bool _974___mcc_h47 = _source65.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _975___mcc_h48 = _source65.dtor_contents;
            {
              _958_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _958_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source65.is_Convert) {
            DAST._IExpression _976___mcc_h54 = _source65.dtor_value;
            DAST._IType _977___mcc_h55 = _source65.dtor_from;
            DAST._IType _978___mcc_h56 = _source65.dtor_typ;
            {
              _958_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _958_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source65.is_SeqConstruct) {
            DAST._IExpression _979___mcc_h60 = _source65.dtor_length;
            DAST._IExpression _980___mcc_h61 = _source65.dtor_elem;
            {
              _958_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _958_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source65.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _981___mcc_h64 = _source65.dtor_elements;
            DAST._IType _982___mcc_h65 = _source65.dtor_typ;
            {
              _958_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _958_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source65.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _983___mcc_h68 = _source65.dtor_elements;
            {
              _958_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _958_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source65.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _984___mcc_h70 = _source65.dtor_mapElems;
            {
              _958_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _958_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source65.is_This) {
            {
              _958_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _958_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source65.is_Ite) {
            DAST._IExpression _985___mcc_h72 = _source65.dtor_cond;
            DAST._IExpression _986___mcc_h73 = _source65.dtor_thn;
            DAST._IExpression _987___mcc_h74 = _source65.dtor_els;
            {
              _958_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _958_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source65.is_UnOp) {
            DAST._IUnaryOp _988___mcc_h78 = _source65.dtor_unOp;
            DAST._IExpression _989___mcc_h79 = _source65.dtor_expr;
            {
              _958_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _958_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source65.is_BinOp) {
            DAST._IBinOp _990___mcc_h82 = _source65.dtor_op;
            DAST._IExpression _991___mcc_h83 = _source65.dtor_left;
            DAST._IExpression _992___mcc_h84 = _source65.dtor_right;
            {
              _958_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _958_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source65.is_ArrayLen) {
            DAST._IExpression _993___mcc_h88 = _source65.dtor_expr;
            BigInteger _994___mcc_h89 = _source65.dtor_dim;
            {
              _958_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _958_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source65.is_Select) {
            DAST._IExpression _995___mcc_h92 = _source65.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _996___mcc_h93 = _source65.dtor_field;
            bool _997___mcc_h94 = _source65.dtor_isConstant;
            bool _998___mcc_h95 = _source65.dtor_onDatatype;
            {
              _958_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _958_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source65.is_SelectFn) {
            DAST._IExpression _999___mcc_h100 = _source65.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _1000___mcc_h101 = _source65.dtor_field;
            bool _1001___mcc_h102 = _source65.dtor_onDatatype;
            bool _1002___mcc_h103 = _source65.dtor_isStatic;
            BigInteger _1003___mcc_h104 = _source65.dtor_arity;
            {
              _958_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _958_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source65.is_Index) {
            DAST._IExpression _1004___mcc_h110 = _source65.dtor_expr;
            DAST._ICollKind _1005___mcc_h111 = _source65.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _1006___mcc_h112 = _source65.dtor_indices;
            {
              _958_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _958_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source65.is_IndexRange) {
            DAST._IExpression _1007___mcc_h116 = _source65.dtor_expr;
            bool _1008___mcc_h117 = _source65.dtor_isArray;
            DAST._IOptional<DAST._IExpression> _1009___mcc_h118 = _source65.dtor_low;
            DAST._IOptional<DAST._IExpression> _1010___mcc_h119 = _source65.dtor_high;
            {
              _958_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _958_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source65.is_TupleSelect) {
            DAST._IExpression _1011___mcc_h124 = _source65.dtor_expr;
            BigInteger _1012___mcc_h125 = _source65.dtor_index;
            {
              _958_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _958_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source65.is_Call) {
            DAST._IExpression _1013___mcc_h128 = _source65.dtor_on;
            Dafny.ISequence<Dafny.Rune> _1014___mcc_h129 = _source65.dtor_name;
            Dafny.ISequence<DAST._IType> _1015___mcc_h130 = _source65.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _1016___mcc_h131 = _source65.dtor_args;
            {
              _958_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _958_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source65.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _1017___mcc_h136 = _source65.dtor_params;
            DAST._IType _1018___mcc_h137 = _source65.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _1019___mcc_h138 = _source65.dtor_body;
            {
              _958_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _958_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source65.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _1020___mcc_h142 = _source65.dtor_values;
            DAST._IType _1021___mcc_h143 = _source65.dtor_retType;
            DAST._IExpression _1022___mcc_h144 = _source65.dtor_expr;
            {
              _958_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _958_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source65.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _1023___mcc_h148 = _source65.dtor_name;
            DAST._IType _1024___mcc_h149 = _source65.dtor_typ;
            DAST._IExpression _1025___mcc_h150 = _source65.dtor_value;
            DAST._IExpression _1026___mcc_h151 = _source65.dtor_iifeBody;
            {
              _958_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _958_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source65.is_Apply) {
            DAST._IExpression _1027___mcc_h156 = _source65.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _1028___mcc_h157 = _source65.dtor_args;
            {
              _958_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _958_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source65.is_TypeTest) {
            DAST._IExpression _1029___mcc_h160 = _source65.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1030___mcc_h161 = _source65.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _1031___mcc_h162 = _source65.dtor_variant;
            {
              _958_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _958_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source65.is_InitializationValue) {
            DAST._IType _1032___mcc_h166 = _source65.dtor_typ;
            {
              _958_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _958_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source65.is_BoolBoundedPool) {
            {
              _958_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _958_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source65.is_SetBoundedPool) {
            DAST._IExpression _1033___mcc_h168 = _source65.dtor_of;
            {
              _958_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _958_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source65.is_SeqBoundedPool) {
            DAST._IExpression _1034___mcc_h170 = _source65.dtor_of;
            bool _1035___mcc_h171 = _source65.dtor_includeDuplicates;
            {
              _958_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _958_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else {
            DAST._IExpression _1036___mcc_h174 = _source65.dtor_lo;
            DAST._IExpression _1037___mcc_h175 = _source65.dtor_hi;
            {
              _958_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _958_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          }
          Dafny.ISequence<Dafny.Rune> _1038_receiver;
          _1038_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source66 = _944_maybeOutVars;
          if (_source66.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1039___mcc_h178 = _source66.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1040_outVars = _1039___mcc_h178;
            {
              if ((new BigInteger((_1040_outVars).Count)) > (BigInteger.One)) {
                _1038_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
              }
              BigInteger _1041_outI;
              _1041_outI = BigInteger.Zero;
              while ((_1041_outI) < (new BigInteger((_1040_outVars).Count))) {
                if ((_1041_outI).Sign == 1) {
                  _1038_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_1038_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                }
                Dafny.ISequence<Dafny.Rune> _1042_outVar;
                _1042_outVar = (_1040_outVars).Select(_1041_outI);
                _1038_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_1038_receiver, (_1042_outVar));
                _1041_outI = (_1041_outI) + (BigInteger.One);
              }
              if ((new BigInteger((_1040_outVars).Count)) > (BigInteger.One)) {
                _1038_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_1038_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
          } else {
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((!(_1038_receiver).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_1038_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), _958_enclosingString), DCOMP.__default.escapeIdent(_947_name)), _949_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _952_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      } else if (_source63.is_Return) {
        DAST._IExpression _1043___mcc_h22 = _source63.dtor_expr;
        DAST._IExpression _1044_expr = _1043___mcc_h22;
        {
          Dafny.ISequence<Dafny.Rune> _1045_exprString;
          bool _1046___v29;
          bool _1047_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1048_recIdents;
          Dafny.ISequence<Dafny.Rune> _out172;
          bool _out173;
          bool _out174;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out175;
          DCOMP.COMP.GenExpr(_1044_expr, selfIdent, @params, true, out _out172, out _out173, out _out174, out _out175);
          _1045_exprString = _out172;
          _1046___v29 = _out173;
          _1047_recErased = _out174;
          _1048_recIdents = _out175;
          _1045_exprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned(::dafny_runtime::DafnyErasable::erase_owned("), _1045_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          readIdents = _1048_recIdents;
          if (isLast) {
            generated = _1045_exprString;
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return "), _1045_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
        }
      } else if (_source63.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source63.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _1049___mcc_h23 = _source63.dtor_toLabel;
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _1050_toLabel = _1049___mcc_h23;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source67 = _1050_toLabel;
          if (_source67.is_Some) {
            Dafny.ISequence<Dafny.Rune> _1051___mcc_h179 = _source67.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _1052_lbl = _1051___mcc_h179;
            {
              generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break 'label_"), _1052_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            }
          } else {
            {
              generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;");
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source63.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _1053___mcc_h24 = _source63.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1054_body = _1053___mcc_h24;
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if (!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut _this = self.clone();\n"));
          }
          BigInteger _1055_paramI;
          _1055_paramI = BigInteger.Zero;
          while ((_1055_paramI) < (new BigInteger((@params).Count))) {
            Dafny.ISequence<Dafny.Rune> _1056_param;
            _1056_param = (@params).Select(_1055_paramI);
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut ")), DCOMP.__default.escapeIdent(_1056_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_1056_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
            _1055_paramI = (_1055_paramI) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _1057_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1058_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out176;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out177;
          DCOMP.COMP.GenStmts(_1054_body, ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), false, earlyReturn, out _out176, out _out177);
          _1057_bodyString = _out176;
          _1058_bodyIdents = _out177;
          readIdents = _1058_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'TAIL_CALL_START: loop {\n")), _1057_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source63.is_JumpTailCallStart) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue 'TAIL_CALL_START;");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source63.is_Halt) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else {
        DAST._IExpression _1059___mcc_h25 = _source63.dtor_Print_a0;
        DAST._IExpression _1060_e = _1059___mcc_h25;
        {
          Dafny.ISequence<Dafny.Rune> _1061_printedExpr;
          bool _1062_isOwned;
          bool _1063___v30;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1064_recIdents;
          Dafny.ISequence<Dafny.Rune> _out178;
          bool _out179;
          bool _out180;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out181;
          DCOMP.COMP.GenExpr(_1060_e, selfIdent, @params, false, out _out178, out _out179, out _out180, out _out181);
          _1061_printedExpr = _out178;
          _1062_isOwned = _out179;
          _1063___v30 = _out180;
          _1064_recIdents = _out181;
          if (_1062_isOwned) {
            _1061_printedExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _1061_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!(\"{}\", ::dafny_runtime::DafnyPrintWrapper("), _1061_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("));"));
          readIdents = _1064_recIdents;
        }
      }
    }
    public static void GenExpr(DAST._IExpression e, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool mustOwn, out Dafny.ISequence<Dafny.Rune> s, out bool isOwned, out bool isErased, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      isOwned = false;
      isErased = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source68 = e;
      if (_source68.is_Literal) {
        DAST._ILiteral _1065___mcc_h0 = _source68.dtor_Literal_a0;
        DAST._ILiteral _source69 = _1065___mcc_h0;
        if (_source69.is_BoolLiteral) {
          bool _1066___mcc_h1 = _source69.dtor_BoolLiteral_a0;
          if ((_1066___mcc_h1) == (false)) {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          }
        } else if (_source69.is_IntLiteral) {
          Dafny.ISequence<Dafny.Rune> _1067___mcc_h2 = _source69.dtor_IntLiteral_a0;
          DAST._IType _1068___mcc_h3 = _source69.dtor_IntLiteral_a1;
          DAST._IType _1069_t = _1068___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _1070_i = _1067___mcc_h2;
          {
            DAST._IType _source70 = _1069_t;
            if (_source70.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1071___mcc_h237 = _source70.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _1072___mcc_h238 = _source70.dtor_typeArgs;
              DAST._IResolvedType _1073___mcc_h239 = _source70.dtor_resolved;
              DAST._IType _1074_o = _1069_t;
              {
                Dafny.ISequence<Dafny.Rune> _1075_genType;
                Dafny.ISequence<Dafny.Rune> _out182;
                _out182 = DCOMP.COMP.GenType(_1074_o, false, false);
                _1075_genType = _out182;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1070_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1075_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source70.is_Nullable) {
              DAST._IType _1076___mcc_h243 = _source70.dtor_Nullable_a0;
              DAST._IType _1077_o = _1069_t;
              {
                Dafny.ISequence<Dafny.Rune> _1078_genType;
                Dafny.ISequence<Dafny.Rune> _out183;
                _out183 = DCOMP.COMP.GenType(_1077_o, false, false);
                _1078_genType = _out183;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1070_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1078_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source70.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1079___mcc_h245 = _source70.dtor_Tuple_a0;
              DAST._IType _1080_o = _1069_t;
              {
                Dafny.ISequence<Dafny.Rune> _1081_genType;
                Dafny.ISequence<Dafny.Rune> _out184;
                _out184 = DCOMP.COMP.GenType(_1080_o, false, false);
                _1081_genType = _out184;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1070_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1081_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source70.is_Array) {
              DAST._IType _1082___mcc_h247 = _source70.dtor_element;
              BigInteger _1083___mcc_h248 = _source70.dtor_dims;
              DAST._IType _1084_o = _1069_t;
              {
                Dafny.ISequence<Dafny.Rune> _1085_genType;
                Dafny.ISequence<Dafny.Rune> _out185;
                _out185 = DCOMP.COMP.GenType(_1084_o, false, false);
                _1085_genType = _out185;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1070_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1085_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source70.is_Seq) {
              DAST._IType _1086___mcc_h251 = _source70.dtor_element;
              DAST._IType _1087_o = _1069_t;
              {
                Dafny.ISequence<Dafny.Rune> _1088_genType;
                Dafny.ISequence<Dafny.Rune> _out186;
                _out186 = DCOMP.COMP.GenType(_1087_o, false, false);
                _1088_genType = _out186;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1070_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1088_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source70.is_Set) {
              DAST._IType _1089___mcc_h253 = _source70.dtor_element;
              DAST._IType _1090_o = _1069_t;
              {
                Dafny.ISequence<Dafny.Rune> _1091_genType;
                Dafny.ISequence<Dafny.Rune> _out187;
                _out187 = DCOMP.COMP.GenType(_1090_o, false, false);
                _1091_genType = _out187;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1070_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1091_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source70.is_Multiset) {
              DAST._IType _1092___mcc_h255 = _source70.dtor_element;
              DAST._IType _1093_o = _1069_t;
              {
                Dafny.ISequence<Dafny.Rune> _1094_genType;
                Dafny.ISequence<Dafny.Rune> _out188;
                _out188 = DCOMP.COMP.GenType(_1093_o, false, false);
                _1094_genType = _out188;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1070_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1094_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source70.is_Map) {
              DAST._IType _1095___mcc_h257 = _source70.dtor_key;
              DAST._IType _1096___mcc_h258 = _source70.dtor_value;
              DAST._IType _1097_o = _1069_t;
              {
                Dafny.ISequence<Dafny.Rune> _1098_genType;
                Dafny.ISequence<Dafny.Rune> _out189;
                _out189 = DCOMP.COMP.GenType(_1097_o, false, false);
                _1098_genType = _out189;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1070_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1098_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source70.is_Arrow) {
              Dafny.ISequence<DAST._IType> _1099___mcc_h261 = _source70.dtor_args;
              DAST._IType _1100___mcc_h262 = _source70.dtor_result;
              DAST._IType _1101_o = _1069_t;
              {
                Dafny.ISequence<Dafny.Rune> _1102_genType;
                Dafny.ISequence<Dafny.Rune> _out190;
                _out190 = DCOMP.COMP.GenType(_1101_o, false, false);
                _1102_genType = _out190;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1070_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1102_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source70.is_Primitive) {
              DAST._IPrimitive _1103___mcc_h265 = _source70.dtor_Primitive_a0;
              DAST._IPrimitive _source71 = _1103___mcc_h265;
              if (_source71.is_Int) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::parse_bytes(b\""), _1070_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap()"));
                }
              } else if (_source71.is_Real) {
                DAST._IType _1104_o = _1069_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1105_genType;
                  Dafny.ISequence<Dafny.Rune> _out191;
                  _out191 = DCOMP.COMP.GenType(_1104_o, false, false);
                  _1105_genType = _out191;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1070_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1105_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source71.is_String) {
                DAST._IType _1106_o = _1069_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1107_genType;
                  Dafny.ISequence<Dafny.Rune> _out192;
                  _out192 = DCOMP.COMP.GenType(_1106_o, false, false);
                  _1107_genType = _out192;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1070_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1107_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source71.is_Bool) {
                DAST._IType _1108_o = _1069_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1109_genType;
                  Dafny.ISequence<Dafny.Rune> _out193;
                  _out193 = DCOMP.COMP.GenType(_1108_o, false, false);
                  _1109_genType = _out193;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1070_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1109_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _1110_o = _1069_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1111_genType;
                  Dafny.ISequence<Dafny.Rune> _out194;
                  _out194 = DCOMP.COMP.GenType(_1110_o, false, false);
                  _1111_genType = _out194;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1070_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1111_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source70.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _1112___mcc_h267 = _source70.dtor_Passthrough_a0;
              DAST._IType _1113_o = _1069_t;
              {
                Dafny.ISequence<Dafny.Rune> _1114_genType;
                Dafny.ISequence<Dafny.Rune> _out195;
                _out195 = DCOMP.COMP.GenType(_1113_o, false, false);
                _1114_genType = _out195;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1070_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1114_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _1115___mcc_h269 = _source70.dtor_TypeArg_a0;
              DAST._IType _1116_o = _1069_t;
              {
                Dafny.ISequence<Dafny.Rune> _1117_genType;
                Dafny.ISequence<Dafny.Rune> _out196;
                _out196 = DCOMP.COMP.GenType(_1116_o, false, false);
                _1117_genType = _out196;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1070_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1117_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source69.is_DecLiteral) {
          Dafny.ISequence<Dafny.Rune> _1118___mcc_h4 = _source69.dtor_DecLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _1119___mcc_h5 = _source69.dtor_DecLiteral_a1;
          DAST._IType _1120___mcc_h6 = _source69.dtor_DecLiteral_a2;
          DAST._IType _1121_t = _1120___mcc_h6;
          Dafny.ISequence<Dafny.Rune> _1122_d = _1119___mcc_h5;
          Dafny.ISequence<Dafny.Rune> _1123_n = _1118___mcc_h4;
          {
            DAST._IType _source72 = _1121_t;
            if (_source72.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1124___mcc_h271 = _source72.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _1125___mcc_h272 = _source72.dtor_typeArgs;
              DAST._IResolvedType _1126___mcc_h273 = _source72.dtor_resolved;
              DAST._IType _1127_o = _1121_t;
              {
                Dafny.ISequence<Dafny.Rune> _1128_genType;
                Dafny.ISequence<Dafny.Rune> _out197;
                _out197 = DCOMP.COMP.GenType(_1127_o, false, false);
                _1128_genType = _out197;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1123_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1122_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1128_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source72.is_Nullable) {
              DAST._IType _1129___mcc_h277 = _source72.dtor_Nullable_a0;
              DAST._IType _1130_o = _1121_t;
              {
                Dafny.ISequence<Dafny.Rune> _1131_genType;
                Dafny.ISequence<Dafny.Rune> _out198;
                _out198 = DCOMP.COMP.GenType(_1130_o, false, false);
                _1131_genType = _out198;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1123_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1122_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1131_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source72.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1132___mcc_h279 = _source72.dtor_Tuple_a0;
              DAST._IType _1133_o = _1121_t;
              {
                Dafny.ISequence<Dafny.Rune> _1134_genType;
                Dafny.ISequence<Dafny.Rune> _out199;
                _out199 = DCOMP.COMP.GenType(_1133_o, false, false);
                _1134_genType = _out199;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1123_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1122_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1134_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source72.is_Array) {
              DAST._IType _1135___mcc_h281 = _source72.dtor_element;
              BigInteger _1136___mcc_h282 = _source72.dtor_dims;
              DAST._IType _1137_o = _1121_t;
              {
                Dafny.ISequence<Dafny.Rune> _1138_genType;
                Dafny.ISequence<Dafny.Rune> _out200;
                _out200 = DCOMP.COMP.GenType(_1137_o, false, false);
                _1138_genType = _out200;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1123_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1122_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1138_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source72.is_Seq) {
              DAST._IType _1139___mcc_h285 = _source72.dtor_element;
              DAST._IType _1140_o = _1121_t;
              {
                Dafny.ISequence<Dafny.Rune> _1141_genType;
                Dafny.ISequence<Dafny.Rune> _out201;
                _out201 = DCOMP.COMP.GenType(_1140_o, false, false);
                _1141_genType = _out201;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1123_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1122_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1141_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source72.is_Set) {
              DAST._IType _1142___mcc_h287 = _source72.dtor_element;
              DAST._IType _1143_o = _1121_t;
              {
                Dafny.ISequence<Dafny.Rune> _1144_genType;
                Dafny.ISequence<Dafny.Rune> _out202;
                _out202 = DCOMP.COMP.GenType(_1143_o, false, false);
                _1144_genType = _out202;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1123_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1122_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1144_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source72.is_Multiset) {
              DAST._IType _1145___mcc_h289 = _source72.dtor_element;
              DAST._IType _1146_o = _1121_t;
              {
                Dafny.ISequence<Dafny.Rune> _1147_genType;
                Dafny.ISequence<Dafny.Rune> _out203;
                _out203 = DCOMP.COMP.GenType(_1146_o, false, false);
                _1147_genType = _out203;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1123_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1122_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1147_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source72.is_Map) {
              DAST._IType _1148___mcc_h291 = _source72.dtor_key;
              DAST._IType _1149___mcc_h292 = _source72.dtor_value;
              DAST._IType _1150_o = _1121_t;
              {
                Dafny.ISequence<Dafny.Rune> _1151_genType;
                Dafny.ISequence<Dafny.Rune> _out204;
                _out204 = DCOMP.COMP.GenType(_1150_o, false, false);
                _1151_genType = _out204;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1123_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1122_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1151_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source72.is_Arrow) {
              Dafny.ISequence<DAST._IType> _1152___mcc_h295 = _source72.dtor_args;
              DAST._IType _1153___mcc_h296 = _source72.dtor_result;
              DAST._IType _1154_o = _1121_t;
              {
                Dafny.ISequence<Dafny.Rune> _1155_genType;
                Dafny.ISequence<Dafny.Rune> _out205;
                _out205 = DCOMP.COMP.GenType(_1154_o, false, false);
                _1155_genType = _out205;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1123_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1122_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1155_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source72.is_Primitive) {
              DAST._IPrimitive _1156___mcc_h299 = _source72.dtor_Primitive_a0;
              DAST._IPrimitive _source73 = _1156___mcc_h299;
              if (_source73.is_Int) {
                DAST._IType _1157_o = _1121_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1158_genType;
                  Dafny.ISequence<Dafny.Rune> _out206;
                  _out206 = DCOMP.COMP.GenType(_1157_o, false, false);
                  _1158_genType = _out206;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1123_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1122_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1158_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source73.is_Real) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _1123_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _1122_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"));
                }
              } else if (_source73.is_String) {
                DAST._IType _1159_o = _1121_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1160_genType;
                  Dafny.ISequence<Dafny.Rune> _out207;
                  _out207 = DCOMP.COMP.GenType(_1159_o, false, false);
                  _1160_genType = _out207;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1123_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1122_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1160_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source73.is_Bool) {
                DAST._IType _1161_o = _1121_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1162_genType;
                  Dafny.ISequence<Dafny.Rune> _out208;
                  _out208 = DCOMP.COMP.GenType(_1161_o, false, false);
                  _1162_genType = _out208;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1123_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1122_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1162_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _1163_o = _1121_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1164_genType;
                  Dafny.ISequence<Dafny.Rune> _out209;
                  _out209 = DCOMP.COMP.GenType(_1163_o, false, false);
                  _1164_genType = _out209;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1123_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1122_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1164_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source72.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _1165___mcc_h301 = _source72.dtor_Passthrough_a0;
              DAST._IType _1166_o = _1121_t;
              {
                Dafny.ISequence<Dafny.Rune> _1167_genType;
                Dafny.ISequence<Dafny.Rune> _out210;
                _out210 = DCOMP.COMP.GenType(_1166_o, false, false);
                _1167_genType = _out210;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1123_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1122_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1167_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _1168___mcc_h303 = _source72.dtor_TypeArg_a0;
              DAST._IType _1169_o = _1121_t;
              {
                Dafny.ISequence<Dafny.Rune> _1170_genType;
                Dafny.ISequence<Dafny.Rune> _out211;
                _out211 = DCOMP.COMP.GenType(_1169_o, false, false);
                _1170_genType = _out211;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1123_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1122_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1170_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source69.is_StringLiteral) {
          Dafny.ISequence<Dafny.Rune> _1171___mcc_h7 = _source69.dtor_StringLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _1172_l = _1171___mcc_h7;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""), _1172_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\".chars().collect::<Vec<char>>()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source69.is_CharLiteral) {
          Dafny.Rune _1173___mcc_h8 = _source69.dtor_CharLiteral_a0;
          Dafny.Rune _1174_c = _1173___mcc_h8;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::primitive::char::from_u32("), DCOMP.__default.natToString(new BigInteger((_1174_c).Value))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IType _1175___mcc_h9 = _source69.dtor_Null_a0;
          DAST._IType _1176_tpe = _1175___mcc_h9;
          {
            Dafny.ISequence<Dafny.Rune> _1177_tpeGen;
            Dafny.ISequence<Dafny.Rune> _out212;
            _out212 = DCOMP.COMP.GenType(_1176_tpe, false, false);
            _1177_tpeGen = _out212;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(None as "), _1177_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source68.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _1178___mcc_h10 = _source68.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _1179_name = _1178___mcc_h10;
        {
          s = DCOMP.__default.escapeIdent(_1179_name);
          if (!((@params).Contains(_1179_name))) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            isOwned = false;
          }
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1179_name);
        }
      } else if (_source68.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1180___mcc_h11 = _source68.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1181_path = _1180___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _out213;
          _out213 = DCOMP.COMP.GenPath(_1181_path);
          s = _out213;
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source68.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _1182___mcc_h12 = _source68.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IExpression> _1183_values = _1182___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _1184_i;
          _1184_i = BigInteger.Zero;
          while ((_1184_i) < (new BigInteger((_1183_values).Count))) {
            if ((_1184_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _1185_recursiveGen;
            bool _1186___v31;
            bool _1187_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1188_recIdents;
            Dafny.ISequence<Dafny.Rune> _out214;
            bool _out215;
            bool _out216;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out217;
            DCOMP.COMP.GenExpr((_1183_values).Select(_1184_i), selfIdent, @params, true, out _out214, out _out215, out _out216, out _out217);
            _1185_recursiveGen = _out214;
            _1186___v31 = _out215;
            _1187_isErased = _out216;
            _1188_recIdents = _out217;
            if (_1187_isErased) {
              _1185_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1185_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _1185_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1188_recIdents);
            _1184_i = (_1184_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source68.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1189___mcc_h13 = _source68.dtor_path;
        Dafny.ISequence<DAST._IType> _1190___mcc_h14 = _source68.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _1191___mcc_h15 = _source68.dtor_args;
        Dafny.ISequence<DAST._IExpression> _1192_args = _1191___mcc_h15;
        Dafny.ISequence<DAST._IType> _1193_typeArgs = _1190___mcc_h14;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1194_path = _1189___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _1195_path;
          Dafny.ISequence<Dafny.Rune> _out218;
          _out218 = DCOMP.COMP.GenPath(_1194_path);
          _1195_path = _out218;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _1195_path);
          if ((new BigInteger((_1193_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<"));
            BigInteger _1196_i;
            _1196_i = BigInteger.Zero;
            while ((_1196_i) < (new BigInteger((_1193_typeArgs).Count))) {
              if ((_1196_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
              }
              Dafny.ISequence<Dafny.Rune> _1197_typeString;
              Dafny.ISequence<Dafny.Rune> _out219;
              _out219 = DCOMP.COMP.GenType((_1193_typeArgs).Select(_1196_i), false, false);
              _1197_typeString = _out219;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1197_typeString);
              _1196_i = (_1196_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new("));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _1198_i;
          _1198_i = BigInteger.Zero;
          while ((_1198_i) < (new BigInteger((_1192_args).Count))) {
            if ((_1198_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _1199_recursiveGen;
            bool _1200___v32;
            bool _1201_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1202_recIdents;
            Dafny.ISequence<Dafny.Rune> _out220;
            bool _out221;
            bool _out222;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out223;
            DCOMP.COMP.GenExpr((_1192_args).Select(_1198_i), selfIdent, @params, true, out _out220, out _out221, out _out222, out _out223);
            _1199_recursiveGen = _out220;
            _1200___v32 = _out221;
            _1201_isErased = _out222;
            _1202_recIdents = _out223;
            if (_1201_isErased) {
              _1199_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1199_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1199_recursiveGen);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1202_recIdents);
            _1198_i = (_1198_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = true;
        }
      } else if (_source68.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _1203___mcc_h16 = _source68.dtor_dims;
        DAST._IType _1204___mcc_h17 = _source68.dtor_typ;
        DAST._IType _1205_typ = _1204___mcc_h17;
        Dafny.ISequence<DAST._IExpression> _1206_dims = _1203___mcc_h16;
        {
          BigInteger _1207_i;
          _1207_i = (new BigInteger((_1206_dims).Count)) - (BigInteger.One);
          Dafny.ISequence<Dafny.Rune> _1208_genTyp;
          Dafny.ISequence<Dafny.Rune> _out224;
          _out224 = DCOMP.COMP.GenType(_1205_typ, false, false);
          _1208_genTyp = _out224;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1208_genTyp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::std::default::Default>::default()"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          while ((_1207_i).Sign != -1) {
            Dafny.ISequence<Dafny.Rune> _1209_recursiveGen;
            bool _1210___v33;
            bool _1211_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1212_recIdents;
            Dafny.ISequence<Dafny.Rune> _out225;
            bool _out226;
            bool _out227;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out228;
            DCOMP.COMP.GenExpr((_1206_dims).Select(_1207_i), selfIdent, @params, true, out _out225, out _out226, out _out227, out _out228);
            _1209_recursiveGen = _out225;
            _1210___v33 = _out226;
            _1211_isErased = _out227;
            _1212_recIdents = _out228;
            if (!(_1211_isErased)) {
              _1209_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1209_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::std::cell::RefCell::new(vec!["), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("; <usize as ::dafny_runtime::NumCast>::from(")), _1209_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]))"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1212_recIdents);
            _1207_i = (_1207_i) - (BigInteger.One);
          }
          isOwned = true;
          isErased = false;
        }
      } else if (_source68.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1213___mcc_h18 = _source68.dtor_path;
        Dafny.ISequence<DAST._IType> _1214___mcc_h19 = _source68.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _1215___mcc_h20 = _source68.dtor_variant;
        bool _1216___mcc_h21 = _source68.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _1217___mcc_h22 = _source68.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _1218_values = _1217___mcc_h22;
        bool _1219_isCo = _1216___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _1220_variant = _1215___mcc_h20;
        Dafny.ISequence<DAST._IType> _1221_typeArgs = _1214___mcc_h19;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1222_path = _1213___mcc_h18;
        {
          Dafny.ISequence<Dafny.Rune> _1223_path;
          Dafny.ISequence<Dafny.Rune> _out229;
          _out229 = DCOMP.COMP.GenPath(_1222_path);
          _1223_path = _out229;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _1223_path), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          if ((new BigInteger((_1221_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
            BigInteger _1224_i;
            _1224_i = BigInteger.Zero;
            while ((_1224_i) < (new BigInteger((_1221_typeArgs).Count))) {
              if ((_1224_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _1225_typeString;
              Dafny.ISequence<Dafny.Rune> _out230;
              _out230 = DCOMP.COMP.GenType((_1221_typeArgs).Select(_1224_i), false, false);
              _1225_typeString = _out230;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1225_typeString);
              _1224_i = (_1224_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_1220_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _1226_i;
          _1226_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"));
          while ((_1226_i) < (new BigInteger((_1218_values).Count))) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs1 = (_1218_values).Select(_1226_i);
            Dafny.ISequence<Dafny.Rune> _1227_name = _let_tmp_rhs1.dtor__0;
            DAST._IExpression _1228_value = _let_tmp_rhs1.dtor__1;
            if ((_1226_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            if (_1219_isCo) {
              Dafny.ISequence<Dafny.Rune> _1229_recursiveGen;
              bool _1230___v34;
              bool _1231_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1232_recIdents;
              Dafny.ISequence<Dafny.Rune> _out231;
              bool _out232;
              bool _out233;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out234;
              DCOMP.COMP.GenExpr(_1228_value, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out231, out _out232, out _out233, out _out234);
              _1229_recursiveGen = _out231;
              _1230___v34 = _out232;
              _1231_isErased = _out233;
              _1232_recIdents = _out234;
              if (!(_1231_isErased)) {
                _1229_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1229_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _1229_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1229_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1232_recIdents);
              Dafny.ISequence<Dafny.Rune> _1233_allReadCloned;
              _1233_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_1232_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _1234_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_0 in (_1232_recIdents).Elements) {
                  _1234_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_0;
                  if ((_1232_recIdents).Contains(_1234_next)) {
                    goto after__ASSIGN_SUCH_THAT_0;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 1242)");
              after__ASSIGN_SUCH_THAT_0:;
                _1233_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1233_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_1234_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_1234_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _1232_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_1232_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1234_next));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_1227_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n")), _1233_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), _1229_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
            } else {
              Dafny.ISequence<Dafny.Rune> _1235_recursiveGen;
              bool _1236___v35;
              bool _1237_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1238_recIdents;
              Dafny.ISequence<Dafny.Rune> _out235;
              bool _out236;
              bool _out237;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out238;
              DCOMP.COMP.GenExpr(_1228_value, selfIdent, @params, true, out _out235, out _out236, out _out237, out _out238);
              _1235_recursiveGen = _out235;
              _1236___v35 = _out236;
              _1237_isErased = _out237;
              _1238_recIdents = _out238;
              if (!(_1237_isErased)) {
                _1235_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1235_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _1235_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1235_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_1227_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1235_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1238_recIdents);
            }
            _1226_i = (_1226_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" })"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source68.is_Convert) {
        DAST._IExpression _1239___mcc_h23 = _source68.dtor_value;
        DAST._IType _1240___mcc_h24 = _source68.dtor_from;
        DAST._IType _1241___mcc_h25 = _source68.dtor_typ;
        DAST._IType _1242_toTpe = _1241___mcc_h25;
        DAST._IType _1243_fromTpe = _1240___mcc_h24;
        DAST._IExpression _1244_expr = _1239___mcc_h23;
        {
          if (object.Equals(_1243_fromTpe, _1242_toTpe)) {
            Dafny.ISequence<Dafny.Rune> _1245_recursiveGen;
            bool _1246_recOwned;
            bool _1247_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1248_recIdents;
            Dafny.ISequence<Dafny.Rune> _out239;
            bool _out240;
            bool _out241;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out242;
            DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out239, out _out240, out _out241, out _out242);
            _1245_recursiveGen = _out239;
            _1246_recOwned = _out240;
            _1247_recErased = _out241;
            _1248_recIdents = _out242;
            s = _1245_recursiveGen;
            isOwned = _1246_recOwned;
            isErased = _1247_recErased;
            readIdents = _1248_recIdents;
          } else {
            _System._ITuple2<DAST._IType, DAST._IType> _source74 = _System.Tuple2<DAST._IType, DAST._IType>.create(_1243_fromTpe, _1242_toTpe);
            DAST._IType _1249___mcc_h305 = _source74.dtor__0;
            DAST._IType _1250___mcc_h306 = _source74.dtor__1;
            DAST._IType _source75 = _1249___mcc_h305;
            if (_source75.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1251___mcc_h309 = _source75.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _1252___mcc_h310 = _source75.dtor_typeArgs;
              DAST._IResolvedType _1253___mcc_h311 = _source75.dtor_resolved;
              DAST._IResolvedType _source76 = _1253___mcc_h311;
              if (_source76.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1254___mcc_h321 = _source76.dtor_path;
                DAST._IType _source77 = _1250___mcc_h306;
                if (_source77.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1255___mcc_h325 = _source77.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1256___mcc_h326 = _source77.dtor_typeArgs;
                  DAST._IResolvedType _1257___mcc_h327 = _source77.dtor_resolved;
                  DAST._IResolvedType _source78 = _1257___mcc_h327;
                  if (_source78.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1258___mcc_h331 = _source78.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1259_recursiveGen;
                      bool _1260_recOwned;
                      bool _1261_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1262_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out243;
                      bool _out244;
                      bool _out245;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out246;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out243, out _out244, out _out245, out _out246);
                      _1259_recursiveGen = _out243;
                      _1260_recOwned = _out244;
                      _1261_recErased = _out245;
                      _1262_recIdents = _out246;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1259_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1260_recOwned;
                      isErased = _1261_recErased;
                      readIdents = _1262_recIdents;
                    }
                  } else if (_source78.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1263___mcc_h333 = _source78.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1264_recursiveGen;
                      bool _1265_recOwned;
                      bool _1266_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1267_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out247;
                      bool _out248;
                      bool _out249;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out250;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out247, out _out248, out _out249, out _out250);
                      _1264_recursiveGen = _out247;
                      _1265_recOwned = _out248;
                      _1266_recErased = _out249;
                      _1267_recIdents = _out250;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1264_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1265_recOwned;
                      isErased = _1266_recErased;
                      readIdents = _1267_recIdents;
                    }
                  } else {
                    DAST._IType _1268___mcc_h335 = _source78.dtor_Newtype_a0;
                    DAST._IType _1269_b = _1268___mcc_h335;
                    {
                      if (object.Equals(_1243_fromTpe, _1269_b)) {
                        Dafny.ISequence<Dafny.Rune> _1270_recursiveGen;
                        bool _1271_recOwned;
                        bool _1272_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1273_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out251;
                        bool _out252;
                        bool _out253;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out254;
                        DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out251, out _out252, out _out253, out _out254);
                        _1270_recursiveGen = _out251;
                        _1271_recOwned = _out252;
                        _1272_recErased = _out253;
                        _1273_recIdents = _out254;
                        Dafny.ISequence<Dafny.Rune> _1274_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out255;
                        _out255 = DCOMP.COMP.GenType(_1242_toTpe, true, false);
                        _1274_rhsType = _out255;
                        Dafny.ISequence<Dafny.Rune> _1275_uneraseFn;
                        _1275_uneraseFn = ((_1271_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1274_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1275_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1270_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1271_recOwned;
                        isErased = false;
                        readIdents = _1273_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out256;
                        bool _out257;
                        bool _out258;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out259;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1244_expr, _1243_fromTpe, _1269_b), _1269_b, _1242_toTpe), selfIdent, @params, mustOwn, out _out256, out _out257, out _out258, out _out259);
                        s = _out256;
                        isOwned = _out257;
                        isErased = _out258;
                        readIdents = _out259;
                      }
                    }
                  }
                } else if (_source77.is_Nullable) {
                  DAST._IType _1276___mcc_h337 = _source77.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1277_recursiveGen;
                    bool _1278_recOwned;
                    bool _1279_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1280_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out260;
                    bool _out261;
                    bool _out262;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out263;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out260, out _out261, out _out262, out _out263);
                    _1277_recursiveGen = _out260;
                    _1278_recOwned = _out261;
                    _1279_recErased = _out262;
                    _1280_recIdents = _out263;
                    if (!(_1278_recOwned)) {
                      _1277_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1277_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1277_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1279_recErased;
                    readIdents = _1280_recIdents;
                  }
                } else if (_source77.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1281___mcc_h339 = _source77.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1282_recursiveGen;
                    bool _1283_recOwned;
                    bool _1284_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1285_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out264;
                    bool _out265;
                    bool _out266;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out267;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out264, out _out265, out _out266, out _out267);
                    _1282_recursiveGen = _out264;
                    _1283_recOwned = _out265;
                    _1284_recErased = _out266;
                    _1285_recIdents = _out267;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1282_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1283_recOwned;
                    isErased = _1284_recErased;
                    readIdents = _1285_recIdents;
                  }
                } else if (_source77.is_Array) {
                  DAST._IType _1286___mcc_h341 = _source77.dtor_element;
                  BigInteger _1287___mcc_h342 = _source77.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1288_recursiveGen;
                    bool _1289_recOwned;
                    bool _1290_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1291_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out268;
                    bool _out269;
                    bool _out270;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out271;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out268, out _out269, out _out270, out _out271);
                    _1288_recursiveGen = _out268;
                    _1289_recOwned = _out269;
                    _1290_recErased = _out270;
                    _1291_recIdents = _out271;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1288_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1289_recOwned;
                    isErased = _1290_recErased;
                    readIdents = _1291_recIdents;
                  }
                } else if (_source77.is_Seq) {
                  DAST._IType _1292___mcc_h345 = _source77.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1293_recursiveGen;
                    bool _1294_recOwned;
                    bool _1295_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1296_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out272;
                    bool _out273;
                    bool _out274;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out275;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out272, out _out273, out _out274, out _out275);
                    _1293_recursiveGen = _out272;
                    _1294_recOwned = _out273;
                    _1295_recErased = _out274;
                    _1296_recIdents = _out275;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1293_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1294_recOwned;
                    isErased = _1295_recErased;
                    readIdents = _1296_recIdents;
                  }
                } else if (_source77.is_Set) {
                  DAST._IType _1297___mcc_h347 = _source77.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1298_recursiveGen;
                    bool _1299_recOwned;
                    bool _1300_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1301_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out276;
                    bool _out277;
                    bool _out278;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out279;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out276, out _out277, out _out278, out _out279);
                    _1298_recursiveGen = _out276;
                    _1299_recOwned = _out277;
                    _1300_recErased = _out278;
                    _1301_recIdents = _out279;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1298_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1299_recOwned;
                    isErased = _1300_recErased;
                    readIdents = _1301_recIdents;
                  }
                } else if (_source77.is_Multiset) {
                  DAST._IType _1302___mcc_h349 = _source77.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1303_recursiveGen;
                    bool _1304_recOwned;
                    bool _1305_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1306_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out280;
                    bool _out281;
                    bool _out282;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out283;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out280, out _out281, out _out282, out _out283);
                    _1303_recursiveGen = _out280;
                    _1304_recOwned = _out281;
                    _1305_recErased = _out282;
                    _1306_recIdents = _out283;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1303_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1304_recOwned;
                    isErased = _1305_recErased;
                    readIdents = _1306_recIdents;
                  }
                } else if (_source77.is_Map) {
                  DAST._IType _1307___mcc_h351 = _source77.dtor_key;
                  DAST._IType _1308___mcc_h352 = _source77.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1309_recursiveGen;
                    bool _1310_recOwned;
                    bool _1311_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1312_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out284;
                    bool _out285;
                    bool _out286;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out287;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out284, out _out285, out _out286, out _out287);
                    _1309_recursiveGen = _out284;
                    _1310_recOwned = _out285;
                    _1311_recErased = _out286;
                    _1312_recIdents = _out287;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1309_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1310_recOwned;
                    isErased = _1311_recErased;
                    readIdents = _1312_recIdents;
                  }
                } else if (_source77.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1313___mcc_h355 = _source77.dtor_args;
                  DAST._IType _1314___mcc_h356 = _source77.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1315_recursiveGen;
                    bool _1316_recOwned;
                    bool _1317_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1318_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out288;
                    bool _out289;
                    bool _out290;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out291;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out288, out _out289, out _out290, out _out291);
                    _1315_recursiveGen = _out288;
                    _1316_recOwned = _out289;
                    _1317_recErased = _out290;
                    _1318_recIdents = _out291;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1315_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1316_recOwned;
                    isErased = _1317_recErased;
                    readIdents = _1318_recIdents;
                  }
                } else if (_source77.is_Primitive) {
                  DAST._IPrimitive _1319___mcc_h359 = _source77.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1320_recursiveGen;
                    bool _1321_recOwned;
                    bool _1322_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1323_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out292;
                    bool _out293;
                    bool _out294;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out295;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out292, out _out293, out _out294, out _out295);
                    _1320_recursiveGen = _out292;
                    _1321_recOwned = _out293;
                    _1322_recErased = _out294;
                    _1323_recIdents = _out295;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1320_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1321_recOwned;
                    isErased = _1322_recErased;
                    readIdents = _1323_recIdents;
                  }
                } else if (_source77.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1324___mcc_h361 = _source77.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1325_recursiveGen;
                    bool _1326_recOwned;
                    bool _1327_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1328_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out296;
                    bool _out297;
                    bool _out298;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out299;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out296, out _out297, out _out298, out _out299);
                    _1325_recursiveGen = _out296;
                    _1326_recOwned = _out297;
                    _1327_recErased = _out298;
                    _1328_recIdents = _out299;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1325_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1326_recOwned;
                    isErased = _1327_recErased;
                    readIdents = _1328_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1329___mcc_h363 = _source77.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1330_recursiveGen;
                    bool _1331_recOwned;
                    bool _1332_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1333_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out300;
                    bool _out301;
                    bool _out302;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out303;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out300, out _out301, out _out302, out _out303);
                    _1330_recursiveGen = _out300;
                    _1331_recOwned = _out301;
                    _1332_recErased = _out302;
                    _1333_recIdents = _out303;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1330_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1331_recOwned;
                    isErased = _1332_recErased;
                    readIdents = _1333_recIdents;
                  }
                }
              } else if (_source76.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1334___mcc_h365 = _source76.dtor_path;
                DAST._IType _source79 = _1250___mcc_h306;
                if (_source79.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1335___mcc_h369 = _source79.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1336___mcc_h370 = _source79.dtor_typeArgs;
                  DAST._IResolvedType _1337___mcc_h371 = _source79.dtor_resolved;
                  DAST._IResolvedType _source80 = _1337___mcc_h371;
                  if (_source80.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1338___mcc_h375 = _source80.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1339_recursiveGen;
                      bool _1340_recOwned;
                      bool _1341_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1342_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out304;
                      bool _out305;
                      bool _out306;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out307;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out304, out _out305, out _out306, out _out307);
                      _1339_recursiveGen = _out304;
                      _1340_recOwned = _out305;
                      _1341_recErased = _out306;
                      _1342_recIdents = _out307;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1339_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1340_recOwned;
                      isErased = _1341_recErased;
                      readIdents = _1342_recIdents;
                    }
                  } else if (_source80.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1343___mcc_h377 = _source80.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1344_recursiveGen;
                      bool _1345_recOwned;
                      bool _1346_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1347_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out308;
                      bool _out309;
                      bool _out310;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out311;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out308, out _out309, out _out310, out _out311);
                      _1344_recursiveGen = _out308;
                      _1345_recOwned = _out309;
                      _1346_recErased = _out310;
                      _1347_recIdents = _out311;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1344_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1345_recOwned;
                      isErased = _1346_recErased;
                      readIdents = _1347_recIdents;
                    }
                  } else {
                    DAST._IType _1348___mcc_h379 = _source80.dtor_Newtype_a0;
                    DAST._IType _1349_b = _1348___mcc_h379;
                    {
                      if (object.Equals(_1243_fromTpe, _1349_b)) {
                        Dafny.ISequence<Dafny.Rune> _1350_recursiveGen;
                        bool _1351_recOwned;
                        bool _1352_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1353_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out312;
                        bool _out313;
                        bool _out314;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out315;
                        DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out312, out _out313, out _out314, out _out315);
                        _1350_recursiveGen = _out312;
                        _1351_recOwned = _out313;
                        _1352_recErased = _out314;
                        _1353_recIdents = _out315;
                        Dafny.ISequence<Dafny.Rune> _1354_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out316;
                        _out316 = DCOMP.COMP.GenType(_1242_toTpe, true, false);
                        _1354_rhsType = _out316;
                        Dafny.ISequence<Dafny.Rune> _1355_uneraseFn;
                        _1355_uneraseFn = ((_1351_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1354_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1355_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1350_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1351_recOwned;
                        isErased = false;
                        readIdents = _1353_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out317;
                        bool _out318;
                        bool _out319;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out320;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1244_expr, _1243_fromTpe, _1349_b), _1349_b, _1242_toTpe), selfIdent, @params, mustOwn, out _out317, out _out318, out _out319, out _out320);
                        s = _out317;
                        isOwned = _out318;
                        isErased = _out319;
                        readIdents = _out320;
                      }
                    }
                  }
                } else if (_source79.is_Nullable) {
                  DAST._IType _1356___mcc_h381 = _source79.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1357_recursiveGen;
                    bool _1358_recOwned;
                    bool _1359_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1360_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out321;
                    bool _out322;
                    bool _out323;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out324;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out321, out _out322, out _out323, out _out324);
                    _1357_recursiveGen = _out321;
                    _1358_recOwned = _out322;
                    _1359_recErased = _out323;
                    _1360_recIdents = _out324;
                    if (!(_1358_recOwned)) {
                      _1357_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1357_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1357_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1359_recErased;
                    readIdents = _1360_recIdents;
                  }
                } else if (_source79.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1361___mcc_h383 = _source79.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1362_recursiveGen;
                    bool _1363_recOwned;
                    bool _1364_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1365_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out325;
                    bool _out326;
                    bool _out327;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out328;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out325, out _out326, out _out327, out _out328);
                    _1362_recursiveGen = _out325;
                    _1363_recOwned = _out326;
                    _1364_recErased = _out327;
                    _1365_recIdents = _out328;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1362_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1363_recOwned;
                    isErased = _1364_recErased;
                    readIdents = _1365_recIdents;
                  }
                } else if (_source79.is_Array) {
                  DAST._IType _1366___mcc_h385 = _source79.dtor_element;
                  BigInteger _1367___mcc_h386 = _source79.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1368_recursiveGen;
                    bool _1369_recOwned;
                    bool _1370_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1371_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out329;
                    bool _out330;
                    bool _out331;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out332;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out329, out _out330, out _out331, out _out332);
                    _1368_recursiveGen = _out329;
                    _1369_recOwned = _out330;
                    _1370_recErased = _out331;
                    _1371_recIdents = _out332;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1368_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1369_recOwned;
                    isErased = _1370_recErased;
                    readIdents = _1371_recIdents;
                  }
                } else if (_source79.is_Seq) {
                  DAST._IType _1372___mcc_h389 = _source79.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1373_recursiveGen;
                    bool _1374_recOwned;
                    bool _1375_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1376_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out333;
                    bool _out334;
                    bool _out335;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out336;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out333, out _out334, out _out335, out _out336);
                    _1373_recursiveGen = _out333;
                    _1374_recOwned = _out334;
                    _1375_recErased = _out335;
                    _1376_recIdents = _out336;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1373_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1374_recOwned;
                    isErased = _1375_recErased;
                    readIdents = _1376_recIdents;
                  }
                } else if (_source79.is_Set) {
                  DAST._IType _1377___mcc_h391 = _source79.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1378_recursiveGen;
                    bool _1379_recOwned;
                    bool _1380_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1381_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out337;
                    bool _out338;
                    bool _out339;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out340;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out337, out _out338, out _out339, out _out340);
                    _1378_recursiveGen = _out337;
                    _1379_recOwned = _out338;
                    _1380_recErased = _out339;
                    _1381_recIdents = _out340;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1378_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1379_recOwned;
                    isErased = _1380_recErased;
                    readIdents = _1381_recIdents;
                  }
                } else if (_source79.is_Multiset) {
                  DAST._IType _1382___mcc_h393 = _source79.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1383_recursiveGen;
                    bool _1384_recOwned;
                    bool _1385_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1386_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out341;
                    bool _out342;
                    bool _out343;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out344;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out341, out _out342, out _out343, out _out344);
                    _1383_recursiveGen = _out341;
                    _1384_recOwned = _out342;
                    _1385_recErased = _out343;
                    _1386_recIdents = _out344;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1383_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1384_recOwned;
                    isErased = _1385_recErased;
                    readIdents = _1386_recIdents;
                  }
                } else if (_source79.is_Map) {
                  DAST._IType _1387___mcc_h395 = _source79.dtor_key;
                  DAST._IType _1388___mcc_h396 = _source79.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1389_recursiveGen;
                    bool _1390_recOwned;
                    bool _1391_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1392_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out345;
                    bool _out346;
                    bool _out347;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out348;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out345, out _out346, out _out347, out _out348);
                    _1389_recursiveGen = _out345;
                    _1390_recOwned = _out346;
                    _1391_recErased = _out347;
                    _1392_recIdents = _out348;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1389_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1390_recOwned;
                    isErased = _1391_recErased;
                    readIdents = _1392_recIdents;
                  }
                } else if (_source79.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1393___mcc_h399 = _source79.dtor_args;
                  DAST._IType _1394___mcc_h400 = _source79.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1395_recursiveGen;
                    bool _1396_recOwned;
                    bool _1397_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1398_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out349;
                    bool _out350;
                    bool _out351;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out352;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out349, out _out350, out _out351, out _out352);
                    _1395_recursiveGen = _out349;
                    _1396_recOwned = _out350;
                    _1397_recErased = _out351;
                    _1398_recIdents = _out352;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1395_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1396_recOwned;
                    isErased = _1397_recErased;
                    readIdents = _1398_recIdents;
                  }
                } else if (_source79.is_Primitive) {
                  DAST._IPrimitive _1399___mcc_h403 = _source79.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1400_recursiveGen;
                    bool _1401_recOwned;
                    bool _1402_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1403_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out353;
                    bool _out354;
                    bool _out355;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out356;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out353, out _out354, out _out355, out _out356);
                    _1400_recursiveGen = _out353;
                    _1401_recOwned = _out354;
                    _1402_recErased = _out355;
                    _1403_recIdents = _out356;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1400_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1401_recOwned;
                    isErased = _1402_recErased;
                    readIdents = _1403_recIdents;
                  }
                } else if (_source79.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1404___mcc_h405 = _source79.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1405_recursiveGen;
                    bool _1406_recOwned;
                    bool _1407_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1408_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out357;
                    bool _out358;
                    bool _out359;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out360;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out357, out _out358, out _out359, out _out360);
                    _1405_recursiveGen = _out357;
                    _1406_recOwned = _out358;
                    _1407_recErased = _out359;
                    _1408_recIdents = _out360;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1405_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1406_recOwned;
                    isErased = _1407_recErased;
                    readIdents = _1408_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1409___mcc_h407 = _source79.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1410_recursiveGen;
                    bool _1411_recOwned;
                    bool _1412_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1413_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out361;
                    bool _out362;
                    bool _out363;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out364;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out361, out _out362, out _out363, out _out364);
                    _1410_recursiveGen = _out361;
                    _1411_recOwned = _out362;
                    _1412_recErased = _out363;
                    _1413_recIdents = _out364;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1410_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1411_recOwned;
                    isErased = _1412_recErased;
                    readIdents = _1413_recIdents;
                  }
                }
              } else {
                DAST._IType _1414___mcc_h409 = _source76.dtor_Newtype_a0;
                DAST._IType _source81 = _1250___mcc_h306;
                if (_source81.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1415___mcc_h413 = _source81.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1416___mcc_h414 = _source81.dtor_typeArgs;
                  DAST._IResolvedType _1417___mcc_h415 = _source81.dtor_resolved;
                  DAST._IResolvedType _source82 = _1417___mcc_h415;
                  if (_source82.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1418___mcc_h422 = _source82.dtor_path;
                    DAST._IType _1419_b = _1414___mcc_h409;
                    {
                      if (object.Equals(_1419_b, _1242_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _1420_recursiveGen;
                        bool _1421_recOwned;
                        bool _1422_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1423_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out365;
                        bool _out366;
                        bool _out367;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out368;
                        DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out365, out _out366, out _out367, out _out368);
                        _1420_recursiveGen = _out365;
                        _1421_recOwned = _out366;
                        _1422_recErased = _out367;
                        _1423_recIdents = _out368;
                        Dafny.ISequence<Dafny.Rune> _1424_uneraseFn;
                        _1424_uneraseFn = ((_1421_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1424_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1420_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1421_recOwned;
                        isErased = true;
                        readIdents = _1423_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out369;
                        bool _out370;
                        bool _out371;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out372;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1244_expr, _1243_fromTpe, _1419_b), _1419_b, _1242_toTpe), selfIdent, @params, mustOwn, out _out369, out _out370, out _out371, out _out372);
                        s = _out369;
                        isOwned = _out370;
                        isErased = _out371;
                        readIdents = _out372;
                      }
                    }
                  } else if (_source82.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1425___mcc_h425 = _source82.dtor_path;
                    DAST._IType _1426_b = _1414___mcc_h409;
                    {
                      if (object.Equals(_1426_b, _1242_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _1427_recursiveGen;
                        bool _1428_recOwned;
                        bool _1429_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1430_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out373;
                        bool _out374;
                        bool _out375;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out376;
                        DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out373, out _out374, out _out375, out _out376);
                        _1427_recursiveGen = _out373;
                        _1428_recOwned = _out374;
                        _1429_recErased = _out375;
                        _1430_recIdents = _out376;
                        Dafny.ISequence<Dafny.Rune> _1431_uneraseFn;
                        _1431_uneraseFn = ((_1428_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1431_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1427_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1428_recOwned;
                        isErased = true;
                        readIdents = _1430_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out377;
                        bool _out378;
                        bool _out379;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out380;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1244_expr, _1243_fromTpe, _1426_b), _1426_b, _1242_toTpe), selfIdent, @params, mustOwn, out _out377, out _out378, out _out379, out _out380);
                        s = _out377;
                        isOwned = _out378;
                        isErased = _out379;
                        readIdents = _out380;
                      }
                    }
                  } else {
                    DAST._IType _1432___mcc_h428 = _source82.dtor_Newtype_a0;
                    DAST._IType _1433_b = _1432___mcc_h428;
                    {
                      if (object.Equals(_1243_fromTpe, _1433_b)) {
                        Dafny.ISequence<Dafny.Rune> _1434_recursiveGen;
                        bool _1435_recOwned;
                        bool _1436_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1437_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out381;
                        bool _out382;
                        bool _out383;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out384;
                        DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out381, out _out382, out _out383, out _out384);
                        _1434_recursiveGen = _out381;
                        _1435_recOwned = _out382;
                        _1436_recErased = _out383;
                        _1437_recIdents = _out384;
                        Dafny.ISequence<Dafny.Rune> _1438_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out385;
                        _out385 = DCOMP.COMP.GenType(_1242_toTpe, true, false);
                        _1438_rhsType = _out385;
                        Dafny.ISequence<Dafny.Rune> _1439_uneraseFn;
                        _1439_uneraseFn = ((_1435_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1438_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1439_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1434_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1435_recOwned;
                        isErased = false;
                        readIdents = _1437_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out386;
                        bool _out387;
                        bool _out388;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out389;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1244_expr, _1243_fromTpe, _1433_b), _1433_b, _1242_toTpe), selfIdent, @params, mustOwn, out _out386, out _out387, out _out388, out _out389);
                        s = _out386;
                        isOwned = _out387;
                        isErased = _out388;
                        readIdents = _out389;
                      }
                    }
                  }
                } else if (_source81.is_Nullable) {
                  DAST._IType _1440___mcc_h431 = _source81.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1441_recursiveGen;
                    bool _1442_recOwned;
                    bool _1443_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1444_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out390;
                    bool _out391;
                    bool _out392;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out393;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out390, out _out391, out _out392, out _out393);
                    _1441_recursiveGen = _out390;
                    _1442_recOwned = _out391;
                    _1443_recErased = _out392;
                    _1444_recIdents = _out393;
                    if (!(_1442_recOwned)) {
                      _1441_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1441_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1441_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1443_recErased;
                    readIdents = _1444_recIdents;
                  }
                } else if (_source81.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1445___mcc_h434 = _source81.dtor_Tuple_a0;
                  DAST._IType _1446_b = _1414___mcc_h409;
                  {
                    if (object.Equals(_1446_b, _1242_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1447_recursiveGen;
                      bool _1448_recOwned;
                      bool _1449_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1450_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out394;
                      bool _out395;
                      bool _out396;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out397;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out394, out _out395, out _out396, out _out397);
                      _1447_recursiveGen = _out394;
                      _1448_recOwned = _out395;
                      _1449_recErased = _out396;
                      _1450_recIdents = _out397;
                      Dafny.ISequence<Dafny.Rune> _1451_uneraseFn;
                      _1451_uneraseFn = ((_1448_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1451_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1447_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1448_recOwned;
                      isErased = true;
                      readIdents = _1450_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out398;
                      bool _out399;
                      bool _out400;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out401;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1244_expr, _1243_fromTpe, _1446_b), _1446_b, _1242_toTpe), selfIdent, @params, mustOwn, out _out398, out _out399, out _out400, out _out401);
                      s = _out398;
                      isOwned = _out399;
                      isErased = _out400;
                      readIdents = _out401;
                    }
                  }
                } else if (_source81.is_Array) {
                  DAST._IType _1452___mcc_h437 = _source81.dtor_element;
                  BigInteger _1453___mcc_h438 = _source81.dtor_dims;
                  DAST._IType _1454_b = _1414___mcc_h409;
                  {
                    if (object.Equals(_1454_b, _1242_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1455_recursiveGen;
                      bool _1456_recOwned;
                      bool _1457_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1458_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out402;
                      bool _out403;
                      bool _out404;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out405;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out402, out _out403, out _out404, out _out405);
                      _1455_recursiveGen = _out402;
                      _1456_recOwned = _out403;
                      _1457_recErased = _out404;
                      _1458_recIdents = _out405;
                      Dafny.ISequence<Dafny.Rune> _1459_uneraseFn;
                      _1459_uneraseFn = ((_1456_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1459_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1455_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1456_recOwned;
                      isErased = true;
                      readIdents = _1458_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out406;
                      bool _out407;
                      bool _out408;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out409;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1244_expr, _1243_fromTpe, _1454_b), _1454_b, _1242_toTpe), selfIdent, @params, mustOwn, out _out406, out _out407, out _out408, out _out409);
                      s = _out406;
                      isOwned = _out407;
                      isErased = _out408;
                      readIdents = _out409;
                    }
                  }
                } else if (_source81.is_Seq) {
                  DAST._IType _1460___mcc_h443 = _source81.dtor_element;
                  DAST._IType _1461_b = _1414___mcc_h409;
                  {
                    if (object.Equals(_1461_b, _1242_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1462_recursiveGen;
                      bool _1463_recOwned;
                      bool _1464_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1465_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out410;
                      bool _out411;
                      bool _out412;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out413;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out410, out _out411, out _out412, out _out413);
                      _1462_recursiveGen = _out410;
                      _1463_recOwned = _out411;
                      _1464_recErased = _out412;
                      _1465_recIdents = _out413;
                      Dafny.ISequence<Dafny.Rune> _1466_uneraseFn;
                      _1466_uneraseFn = ((_1463_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1466_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1462_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1463_recOwned;
                      isErased = true;
                      readIdents = _1465_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out414;
                      bool _out415;
                      bool _out416;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out417;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1244_expr, _1243_fromTpe, _1461_b), _1461_b, _1242_toTpe), selfIdent, @params, mustOwn, out _out414, out _out415, out _out416, out _out417);
                      s = _out414;
                      isOwned = _out415;
                      isErased = _out416;
                      readIdents = _out417;
                    }
                  }
                } else if (_source81.is_Set) {
                  DAST._IType _1467___mcc_h446 = _source81.dtor_element;
                  DAST._IType _1468_b = _1414___mcc_h409;
                  {
                    if (object.Equals(_1468_b, _1242_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1469_recursiveGen;
                      bool _1470_recOwned;
                      bool _1471_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1472_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out418;
                      bool _out419;
                      bool _out420;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out421;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out418, out _out419, out _out420, out _out421);
                      _1469_recursiveGen = _out418;
                      _1470_recOwned = _out419;
                      _1471_recErased = _out420;
                      _1472_recIdents = _out421;
                      Dafny.ISequence<Dafny.Rune> _1473_uneraseFn;
                      _1473_uneraseFn = ((_1470_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1473_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1469_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1470_recOwned;
                      isErased = true;
                      readIdents = _1472_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out422;
                      bool _out423;
                      bool _out424;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out425;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1244_expr, _1243_fromTpe, _1468_b), _1468_b, _1242_toTpe), selfIdent, @params, mustOwn, out _out422, out _out423, out _out424, out _out425);
                      s = _out422;
                      isOwned = _out423;
                      isErased = _out424;
                      readIdents = _out425;
                    }
                  }
                } else if (_source81.is_Multiset) {
                  DAST._IType _1474___mcc_h449 = _source81.dtor_element;
                  DAST._IType _1475_b = _1414___mcc_h409;
                  {
                    if (object.Equals(_1475_b, _1242_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1476_recursiveGen;
                      bool _1477_recOwned;
                      bool _1478_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1479_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out426;
                      bool _out427;
                      bool _out428;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out429;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out426, out _out427, out _out428, out _out429);
                      _1476_recursiveGen = _out426;
                      _1477_recOwned = _out427;
                      _1478_recErased = _out428;
                      _1479_recIdents = _out429;
                      Dafny.ISequence<Dafny.Rune> _1480_uneraseFn;
                      _1480_uneraseFn = ((_1477_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1480_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1476_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1477_recOwned;
                      isErased = true;
                      readIdents = _1479_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out430;
                      bool _out431;
                      bool _out432;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out433;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1244_expr, _1243_fromTpe, _1475_b), _1475_b, _1242_toTpe), selfIdent, @params, mustOwn, out _out430, out _out431, out _out432, out _out433);
                      s = _out430;
                      isOwned = _out431;
                      isErased = _out432;
                      readIdents = _out433;
                    }
                  }
                } else if (_source81.is_Map) {
                  DAST._IType _1481___mcc_h452 = _source81.dtor_key;
                  DAST._IType _1482___mcc_h453 = _source81.dtor_value;
                  DAST._IType _1483_b = _1414___mcc_h409;
                  {
                    if (object.Equals(_1483_b, _1242_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1484_recursiveGen;
                      bool _1485_recOwned;
                      bool _1486_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1487_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out434;
                      bool _out435;
                      bool _out436;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out437;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out434, out _out435, out _out436, out _out437);
                      _1484_recursiveGen = _out434;
                      _1485_recOwned = _out435;
                      _1486_recErased = _out436;
                      _1487_recIdents = _out437;
                      Dafny.ISequence<Dafny.Rune> _1488_uneraseFn;
                      _1488_uneraseFn = ((_1485_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1488_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1484_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1485_recOwned;
                      isErased = true;
                      readIdents = _1487_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out438;
                      bool _out439;
                      bool _out440;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out441;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1244_expr, _1243_fromTpe, _1483_b), _1483_b, _1242_toTpe), selfIdent, @params, mustOwn, out _out438, out _out439, out _out440, out _out441);
                      s = _out438;
                      isOwned = _out439;
                      isErased = _out440;
                      readIdents = _out441;
                    }
                  }
                } else if (_source81.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1489___mcc_h458 = _source81.dtor_args;
                  DAST._IType _1490___mcc_h459 = _source81.dtor_result;
                  DAST._IType _1491_b = _1414___mcc_h409;
                  {
                    if (object.Equals(_1491_b, _1242_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1492_recursiveGen;
                      bool _1493_recOwned;
                      bool _1494_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1495_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out442;
                      bool _out443;
                      bool _out444;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out445;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out442, out _out443, out _out444, out _out445);
                      _1492_recursiveGen = _out442;
                      _1493_recOwned = _out443;
                      _1494_recErased = _out444;
                      _1495_recIdents = _out445;
                      Dafny.ISequence<Dafny.Rune> _1496_uneraseFn;
                      _1496_uneraseFn = ((_1493_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1496_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1492_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1493_recOwned;
                      isErased = true;
                      readIdents = _1495_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out446;
                      bool _out447;
                      bool _out448;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out449;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1244_expr, _1243_fromTpe, _1491_b), _1491_b, _1242_toTpe), selfIdent, @params, mustOwn, out _out446, out _out447, out _out448, out _out449);
                      s = _out446;
                      isOwned = _out447;
                      isErased = _out448;
                      readIdents = _out449;
                    }
                  }
                } else if (_source81.is_Primitive) {
                  DAST._IPrimitive _1497___mcc_h464 = _source81.dtor_Primitive_a0;
                  DAST._IType _1498_b = _1414___mcc_h409;
                  {
                    if (object.Equals(_1498_b, _1242_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1499_recursiveGen;
                      bool _1500_recOwned;
                      bool _1501_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1502_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out450;
                      bool _out451;
                      bool _out452;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out453;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out450, out _out451, out _out452, out _out453);
                      _1499_recursiveGen = _out450;
                      _1500_recOwned = _out451;
                      _1501_recErased = _out452;
                      _1502_recIdents = _out453;
                      Dafny.ISequence<Dafny.Rune> _1503_uneraseFn;
                      _1503_uneraseFn = ((_1500_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1503_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1499_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1500_recOwned;
                      isErased = true;
                      readIdents = _1502_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out454;
                      bool _out455;
                      bool _out456;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out457;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1244_expr, _1243_fromTpe, _1498_b), _1498_b, _1242_toTpe), selfIdent, @params, mustOwn, out _out454, out _out455, out _out456, out _out457);
                      s = _out454;
                      isOwned = _out455;
                      isErased = _out456;
                      readIdents = _out457;
                    }
                  }
                } else if (_source81.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1504___mcc_h467 = _source81.dtor_Passthrough_a0;
                  DAST._IType _1505_b = _1414___mcc_h409;
                  {
                    if (object.Equals(_1505_b, _1242_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1506_recursiveGen;
                      bool _1507_recOwned;
                      bool _1508_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1509_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out458;
                      bool _out459;
                      bool _out460;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out461;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out458, out _out459, out _out460, out _out461);
                      _1506_recursiveGen = _out458;
                      _1507_recOwned = _out459;
                      _1508_recErased = _out460;
                      _1509_recIdents = _out461;
                      Dafny.ISequence<Dafny.Rune> _1510_uneraseFn;
                      _1510_uneraseFn = ((_1507_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1510_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1506_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1507_recOwned;
                      isErased = true;
                      readIdents = _1509_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out462;
                      bool _out463;
                      bool _out464;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out465;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1244_expr, _1243_fromTpe, _1505_b), _1505_b, _1242_toTpe), selfIdent, @params, mustOwn, out _out462, out _out463, out _out464, out _out465);
                      s = _out462;
                      isOwned = _out463;
                      isErased = _out464;
                      readIdents = _out465;
                    }
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1511___mcc_h470 = _source81.dtor_TypeArg_a0;
                  DAST._IType _1512_b = _1414___mcc_h409;
                  {
                    if (object.Equals(_1512_b, _1242_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1513_recursiveGen;
                      bool _1514_recOwned;
                      bool _1515_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1516_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out466;
                      bool _out467;
                      bool _out468;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out469;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out466, out _out467, out _out468, out _out469);
                      _1513_recursiveGen = _out466;
                      _1514_recOwned = _out467;
                      _1515_recErased = _out468;
                      _1516_recIdents = _out469;
                      Dafny.ISequence<Dafny.Rune> _1517_uneraseFn;
                      _1517_uneraseFn = ((_1514_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1517_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1513_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1514_recOwned;
                      isErased = true;
                      readIdents = _1516_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out470;
                      bool _out471;
                      bool _out472;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out473;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1244_expr, _1243_fromTpe, _1512_b), _1512_b, _1242_toTpe), selfIdent, @params, mustOwn, out _out470, out _out471, out _out472, out _out473);
                      s = _out470;
                      isOwned = _out471;
                      isErased = _out472;
                      readIdents = _out473;
                    }
                  }
                }
              }
            } else if (_source75.is_Nullable) {
              DAST._IType _1518___mcc_h473 = _source75.dtor_Nullable_a0;
              DAST._IType _source83 = _1250___mcc_h306;
              if (_source83.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1519___mcc_h477 = _source83.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1520___mcc_h478 = _source83.dtor_typeArgs;
                DAST._IResolvedType _1521___mcc_h479 = _source83.dtor_resolved;
                DAST._IResolvedType _source84 = _1521___mcc_h479;
                if (_source84.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1522___mcc_h486 = _source84.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1523_recursiveGen;
                    bool _1524_recOwned;
                    bool _1525_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1526_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out474;
                    bool _out475;
                    bool _out476;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out477;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out474, out _out475, out _out476, out _out477);
                    _1523_recursiveGen = _out474;
                    _1524_recOwned = _out475;
                    _1525_recErased = _out476;
                    _1526_recIdents = _out477;
                    if (!(_1524_recOwned)) {
                      _1523_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1523_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1523_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1524_recOwned;
                    isErased = _1525_recErased;
                    readIdents = _1526_recIdents;
                  }
                } else if (_source84.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1527___mcc_h489 = _source84.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1528_recursiveGen;
                    bool _1529_recOwned;
                    bool _1530_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1531_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out478;
                    bool _out479;
                    bool _out480;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out481;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out478, out _out479, out _out480, out _out481);
                    _1528_recursiveGen = _out478;
                    _1529_recOwned = _out479;
                    _1530_recErased = _out480;
                    _1531_recIdents = _out481;
                    if (!(_1529_recOwned)) {
                      _1528_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1528_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1528_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1529_recOwned;
                    isErased = _1530_recErased;
                    readIdents = _1531_recIdents;
                  }
                } else {
                  DAST._IType _1532___mcc_h492 = _source84.dtor_Newtype_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1533_recursiveGen;
                    bool _1534_recOwned;
                    bool _1535_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1536_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out482;
                    bool _out483;
                    bool _out484;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out485;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out482, out _out483, out _out484, out _out485);
                    _1533_recursiveGen = _out482;
                    _1534_recOwned = _out483;
                    _1535_recErased = _out484;
                    _1536_recIdents = _out485;
                    if (!(_1534_recOwned)) {
                      _1533_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1533_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1533_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1534_recOwned;
                    isErased = _1535_recErased;
                    readIdents = _1536_recIdents;
                  }
                }
              } else if (_source83.is_Nullable) {
                DAST._IType _1537___mcc_h495 = _source83.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1538_recursiveGen;
                  bool _1539_recOwned;
                  bool _1540_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1541_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out486;
                  bool _out487;
                  bool _out488;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out489;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out486, out _out487, out _out488, out _out489);
                  _1538_recursiveGen = _out486;
                  _1539_recOwned = _out487;
                  _1540_recErased = _out488;
                  _1541_recIdents = _out489;
                  if (!(_1539_recOwned)) {
                    _1538_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1538_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1538_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1539_recOwned;
                  isErased = _1540_recErased;
                  readIdents = _1541_recIdents;
                }
              } else if (_source83.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1542___mcc_h498 = _source83.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1543_recursiveGen;
                  bool _1544_recOwned;
                  bool _1545_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1546_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out490;
                  bool _out491;
                  bool _out492;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out493;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out490, out _out491, out _out492, out _out493);
                  _1543_recursiveGen = _out490;
                  _1544_recOwned = _out491;
                  _1545_recErased = _out492;
                  _1546_recIdents = _out493;
                  if (!(_1544_recOwned)) {
                    _1543_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1543_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1543_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1544_recOwned;
                  isErased = _1545_recErased;
                  readIdents = _1546_recIdents;
                }
              } else if (_source83.is_Array) {
                DAST._IType _1547___mcc_h501 = _source83.dtor_element;
                BigInteger _1548___mcc_h502 = _source83.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1549_recursiveGen;
                  bool _1550_recOwned;
                  bool _1551_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1552_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out494;
                  bool _out495;
                  bool _out496;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out497;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out494, out _out495, out _out496, out _out497);
                  _1549_recursiveGen = _out494;
                  _1550_recOwned = _out495;
                  _1551_recErased = _out496;
                  _1552_recIdents = _out497;
                  if (!(_1550_recOwned)) {
                    _1549_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1549_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1549_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1550_recOwned;
                  isErased = _1551_recErased;
                  readIdents = _1552_recIdents;
                }
              } else if (_source83.is_Seq) {
                DAST._IType _1553___mcc_h507 = _source83.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1554_recursiveGen;
                  bool _1555_recOwned;
                  bool _1556_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1557_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out498;
                  bool _out499;
                  bool _out500;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out501;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out498, out _out499, out _out500, out _out501);
                  _1554_recursiveGen = _out498;
                  _1555_recOwned = _out499;
                  _1556_recErased = _out500;
                  _1557_recIdents = _out501;
                  if (!(_1555_recOwned)) {
                    _1554_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1554_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1554_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1555_recOwned;
                  isErased = _1556_recErased;
                  readIdents = _1557_recIdents;
                }
              } else if (_source83.is_Set) {
                DAST._IType _1558___mcc_h510 = _source83.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1559_recursiveGen;
                  bool _1560_recOwned;
                  bool _1561_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1562_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out502;
                  bool _out503;
                  bool _out504;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out505;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out502, out _out503, out _out504, out _out505);
                  _1559_recursiveGen = _out502;
                  _1560_recOwned = _out503;
                  _1561_recErased = _out504;
                  _1562_recIdents = _out505;
                  if (!(_1560_recOwned)) {
                    _1559_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1559_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1559_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1560_recOwned;
                  isErased = _1561_recErased;
                  readIdents = _1562_recIdents;
                }
              } else if (_source83.is_Multiset) {
                DAST._IType _1563___mcc_h513 = _source83.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1564_recursiveGen;
                  bool _1565_recOwned;
                  bool _1566_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1567_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out506;
                  bool _out507;
                  bool _out508;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out509;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out506, out _out507, out _out508, out _out509);
                  _1564_recursiveGen = _out506;
                  _1565_recOwned = _out507;
                  _1566_recErased = _out508;
                  _1567_recIdents = _out509;
                  if (!(_1565_recOwned)) {
                    _1564_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1564_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1564_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1565_recOwned;
                  isErased = _1566_recErased;
                  readIdents = _1567_recIdents;
                }
              } else if (_source83.is_Map) {
                DAST._IType _1568___mcc_h516 = _source83.dtor_key;
                DAST._IType _1569___mcc_h517 = _source83.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1570_recursiveGen;
                  bool _1571_recOwned;
                  bool _1572_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1573_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out510;
                  bool _out511;
                  bool _out512;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out513;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out510, out _out511, out _out512, out _out513);
                  _1570_recursiveGen = _out510;
                  _1571_recOwned = _out511;
                  _1572_recErased = _out512;
                  _1573_recIdents = _out513;
                  if (!(_1571_recOwned)) {
                    _1570_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1570_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1570_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1571_recOwned;
                  isErased = _1572_recErased;
                  readIdents = _1573_recIdents;
                }
              } else if (_source83.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1574___mcc_h522 = _source83.dtor_args;
                DAST._IType _1575___mcc_h523 = _source83.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1576_recursiveGen;
                  bool _1577_recOwned;
                  bool _1578_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1579_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out514;
                  bool _out515;
                  bool _out516;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out517;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out514, out _out515, out _out516, out _out517);
                  _1576_recursiveGen = _out514;
                  _1577_recOwned = _out515;
                  _1578_recErased = _out516;
                  _1579_recIdents = _out517;
                  if (!(_1577_recOwned)) {
                    _1576_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1576_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1576_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1577_recOwned;
                  isErased = _1578_recErased;
                  readIdents = _1579_recIdents;
                }
              } else if (_source83.is_Primitive) {
                DAST._IPrimitive _1580___mcc_h528 = _source83.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1581_recursiveGen;
                  bool _1582_recOwned;
                  bool _1583_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1584_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out518;
                  bool _out519;
                  bool _out520;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out521;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out518, out _out519, out _out520, out _out521);
                  _1581_recursiveGen = _out518;
                  _1582_recOwned = _out519;
                  _1583_recErased = _out520;
                  _1584_recIdents = _out521;
                  if (!(_1582_recOwned)) {
                    _1581_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1581_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1581_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1582_recOwned;
                  isErased = _1583_recErased;
                  readIdents = _1584_recIdents;
                }
              } else if (_source83.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1585___mcc_h531 = _source83.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1586_recursiveGen;
                  bool _1587_recOwned;
                  bool _1588_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1589_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out522;
                  bool _out523;
                  bool _out524;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out525;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out522, out _out523, out _out524, out _out525);
                  _1586_recursiveGen = _out522;
                  _1587_recOwned = _out523;
                  _1588_recErased = _out524;
                  _1589_recIdents = _out525;
                  if (!(_1587_recOwned)) {
                    _1586_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1586_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1586_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1587_recOwned;
                  isErased = _1588_recErased;
                  readIdents = _1589_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1590___mcc_h534 = _source83.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1591_recursiveGen;
                  bool _1592_recOwned;
                  bool _1593_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1594_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out526;
                  bool _out527;
                  bool _out528;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out529;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out526, out _out527, out _out528, out _out529);
                  _1591_recursiveGen = _out526;
                  _1592_recOwned = _out527;
                  _1593_recErased = _out528;
                  _1594_recIdents = _out529;
                  if (!(_1592_recOwned)) {
                    _1591_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1591_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1591_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1592_recOwned;
                  isErased = _1593_recErased;
                  readIdents = _1594_recIdents;
                }
              }
            } else if (_source75.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1595___mcc_h537 = _source75.dtor_Tuple_a0;
              DAST._IType _source85 = _1250___mcc_h306;
              if (_source85.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1596___mcc_h541 = _source85.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1597___mcc_h542 = _source85.dtor_typeArgs;
                DAST._IResolvedType _1598___mcc_h543 = _source85.dtor_resolved;
                DAST._IResolvedType _source86 = _1598___mcc_h543;
                if (_source86.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1599___mcc_h547 = _source86.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1600_recursiveGen;
                    bool _1601_recOwned;
                    bool _1602_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1603_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out530;
                    bool _out531;
                    bool _out532;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out533;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out530, out _out531, out _out532, out _out533);
                    _1600_recursiveGen = _out530;
                    _1601_recOwned = _out531;
                    _1602_recErased = _out532;
                    _1603_recIdents = _out533;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1600_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1601_recOwned;
                    isErased = _1602_recErased;
                    readIdents = _1603_recIdents;
                  }
                } else if (_source86.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1604___mcc_h549 = _source86.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1605_recursiveGen;
                    bool _1606_recOwned;
                    bool _1607_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1608_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out534;
                    bool _out535;
                    bool _out536;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out537;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out534, out _out535, out _out536, out _out537);
                    _1605_recursiveGen = _out534;
                    _1606_recOwned = _out535;
                    _1607_recErased = _out536;
                    _1608_recIdents = _out537;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1605_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1606_recOwned;
                    isErased = _1607_recErased;
                    readIdents = _1608_recIdents;
                  }
                } else {
                  DAST._IType _1609___mcc_h551 = _source86.dtor_Newtype_a0;
                  DAST._IType _1610_b = _1609___mcc_h551;
                  {
                    if (object.Equals(_1243_fromTpe, _1610_b)) {
                      Dafny.ISequence<Dafny.Rune> _1611_recursiveGen;
                      bool _1612_recOwned;
                      bool _1613_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1614_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out538;
                      bool _out539;
                      bool _out540;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out541;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out538, out _out539, out _out540, out _out541);
                      _1611_recursiveGen = _out538;
                      _1612_recOwned = _out539;
                      _1613_recErased = _out540;
                      _1614_recIdents = _out541;
                      Dafny.ISequence<Dafny.Rune> _1615_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out542;
                      _out542 = DCOMP.COMP.GenType(_1242_toTpe, true, false);
                      _1615_rhsType = _out542;
                      Dafny.ISequence<Dafny.Rune> _1616_uneraseFn;
                      _1616_uneraseFn = ((_1612_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1615_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1616_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1611_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1612_recOwned;
                      isErased = false;
                      readIdents = _1614_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out543;
                      bool _out544;
                      bool _out545;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out546;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1244_expr, _1243_fromTpe, _1610_b), _1610_b, _1242_toTpe), selfIdent, @params, mustOwn, out _out543, out _out544, out _out545, out _out546);
                      s = _out543;
                      isOwned = _out544;
                      isErased = _out545;
                      readIdents = _out546;
                    }
                  }
                }
              } else if (_source85.is_Nullable) {
                DAST._IType _1617___mcc_h553 = _source85.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1618_recursiveGen;
                  bool _1619_recOwned;
                  bool _1620_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1621_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out547;
                  bool _out548;
                  bool _out549;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out550;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out547, out _out548, out _out549, out _out550);
                  _1618_recursiveGen = _out547;
                  _1619_recOwned = _out548;
                  _1620_recErased = _out549;
                  _1621_recIdents = _out550;
                  if (!(_1619_recOwned)) {
                    _1618_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1618_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1618_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1620_recErased;
                  readIdents = _1621_recIdents;
                }
              } else if (_source85.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1622___mcc_h555 = _source85.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1623_recursiveGen;
                  bool _1624_recOwned;
                  bool _1625_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1626_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out551;
                  bool _out552;
                  bool _out553;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out554;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out551, out _out552, out _out553, out _out554);
                  _1623_recursiveGen = _out551;
                  _1624_recOwned = _out552;
                  _1625_recErased = _out553;
                  _1626_recIdents = _out554;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1623_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1624_recOwned;
                  isErased = _1625_recErased;
                  readIdents = _1626_recIdents;
                }
              } else if (_source85.is_Array) {
                DAST._IType _1627___mcc_h557 = _source85.dtor_element;
                BigInteger _1628___mcc_h558 = _source85.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1629_recursiveGen;
                  bool _1630_recOwned;
                  bool _1631_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1632_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out555;
                  bool _out556;
                  bool _out557;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out558;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out555, out _out556, out _out557, out _out558);
                  _1629_recursiveGen = _out555;
                  _1630_recOwned = _out556;
                  _1631_recErased = _out557;
                  _1632_recIdents = _out558;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1629_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1630_recOwned;
                  isErased = _1631_recErased;
                  readIdents = _1632_recIdents;
                }
              } else if (_source85.is_Seq) {
                DAST._IType _1633___mcc_h561 = _source85.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1634_recursiveGen;
                  bool _1635_recOwned;
                  bool _1636_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1637_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out559;
                  bool _out560;
                  bool _out561;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out562;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out559, out _out560, out _out561, out _out562);
                  _1634_recursiveGen = _out559;
                  _1635_recOwned = _out560;
                  _1636_recErased = _out561;
                  _1637_recIdents = _out562;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1634_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1635_recOwned;
                  isErased = _1636_recErased;
                  readIdents = _1637_recIdents;
                }
              } else if (_source85.is_Set) {
                DAST._IType _1638___mcc_h563 = _source85.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1639_recursiveGen;
                  bool _1640_recOwned;
                  bool _1641_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1642_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out563;
                  bool _out564;
                  bool _out565;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out566;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out563, out _out564, out _out565, out _out566);
                  _1639_recursiveGen = _out563;
                  _1640_recOwned = _out564;
                  _1641_recErased = _out565;
                  _1642_recIdents = _out566;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1639_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1640_recOwned;
                  isErased = _1641_recErased;
                  readIdents = _1642_recIdents;
                }
              } else if (_source85.is_Multiset) {
                DAST._IType _1643___mcc_h565 = _source85.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1644_recursiveGen;
                  bool _1645_recOwned;
                  bool _1646_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1647_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out567;
                  bool _out568;
                  bool _out569;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out570;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out567, out _out568, out _out569, out _out570);
                  _1644_recursiveGen = _out567;
                  _1645_recOwned = _out568;
                  _1646_recErased = _out569;
                  _1647_recIdents = _out570;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1644_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1645_recOwned;
                  isErased = _1646_recErased;
                  readIdents = _1647_recIdents;
                }
              } else if (_source85.is_Map) {
                DAST._IType _1648___mcc_h567 = _source85.dtor_key;
                DAST._IType _1649___mcc_h568 = _source85.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1650_recursiveGen;
                  bool _1651_recOwned;
                  bool _1652_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1653_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out571;
                  bool _out572;
                  bool _out573;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out574;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out571, out _out572, out _out573, out _out574);
                  _1650_recursiveGen = _out571;
                  _1651_recOwned = _out572;
                  _1652_recErased = _out573;
                  _1653_recIdents = _out574;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1650_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1651_recOwned;
                  isErased = _1652_recErased;
                  readIdents = _1653_recIdents;
                }
              } else if (_source85.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1654___mcc_h571 = _source85.dtor_args;
                DAST._IType _1655___mcc_h572 = _source85.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1656_recursiveGen;
                  bool _1657_recOwned;
                  bool _1658_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1659_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out575;
                  bool _out576;
                  bool _out577;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out578;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out575, out _out576, out _out577, out _out578);
                  _1656_recursiveGen = _out575;
                  _1657_recOwned = _out576;
                  _1658_recErased = _out577;
                  _1659_recIdents = _out578;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1656_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1657_recOwned;
                  isErased = _1658_recErased;
                  readIdents = _1659_recIdents;
                }
              } else if (_source85.is_Primitive) {
                DAST._IPrimitive _1660___mcc_h575 = _source85.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1661_recursiveGen;
                  bool _1662_recOwned;
                  bool _1663_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1664_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out579;
                  bool _out580;
                  bool _out581;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out582;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out579, out _out580, out _out581, out _out582);
                  _1661_recursiveGen = _out579;
                  _1662_recOwned = _out580;
                  _1663_recErased = _out581;
                  _1664_recIdents = _out582;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1661_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1662_recOwned;
                  isErased = _1663_recErased;
                  readIdents = _1664_recIdents;
                }
              } else if (_source85.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1665___mcc_h577 = _source85.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1666_recursiveGen;
                  bool _1667_recOwned;
                  bool _1668_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1669_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out583;
                  bool _out584;
                  bool _out585;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out586;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out583, out _out584, out _out585, out _out586);
                  _1666_recursiveGen = _out583;
                  _1667_recOwned = _out584;
                  _1668_recErased = _out585;
                  _1669_recIdents = _out586;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1666_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1667_recOwned;
                  isErased = _1668_recErased;
                  readIdents = _1669_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1670___mcc_h579 = _source85.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1671_recursiveGen;
                  bool _1672_recOwned;
                  bool _1673_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1674_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out587;
                  bool _out588;
                  bool _out589;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out590;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out587, out _out588, out _out589, out _out590);
                  _1671_recursiveGen = _out587;
                  _1672_recOwned = _out588;
                  _1673_recErased = _out589;
                  _1674_recIdents = _out590;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1671_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1672_recOwned;
                  isErased = _1673_recErased;
                  readIdents = _1674_recIdents;
                }
              }
            } else if (_source75.is_Array) {
              DAST._IType _1675___mcc_h581 = _source75.dtor_element;
              BigInteger _1676___mcc_h582 = _source75.dtor_dims;
              DAST._IType _source87 = _1250___mcc_h306;
              if (_source87.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1677___mcc_h589 = _source87.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1678___mcc_h590 = _source87.dtor_typeArgs;
                DAST._IResolvedType _1679___mcc_h591 = _source87.dtor_resolved;
                DAST._IResolvedType _source88 = _1679___mcc_h591;
                if (_source88.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1680___mcc_h595 = _source88.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1681_recursiveGen;
                    bool _1682_recOwned;
                    bool _1683_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1684_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out591;
                    bool _out592;
                    bool _out593;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out594;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out591, out _out592, out _out593, out _out594);
                    _1681_recursiveGen = _out591;
                    _1682_recOwned = _out592;
                    _1683_recErased = _out593;
                    _1684_recIdents = _out594;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1681_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1682_recOwned;
                    isErased = _1683_recErased;
                    readIdents = _1684_recIdents;
                  }
                } else if (_source88.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1685___mcc_h597 = _source88.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1686_recursiveGen;
                    bool _1687_recOwned;
                    bool _1688_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1689_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out595;
                    bool _out596;
                    bool _out597;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out598;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out595, out _out596, out _out597, out _out598);
                    _1686_recursiveGen = _out595;
                    _1687_recOwned = _out596;
                    _1688_recErased = _out597;
                    _1689_recIdents = _out598;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1686_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1687_recOwned;
                    isErased = _1688_recErased;
                    readIdents = _1689_recIdents;
                  }
                } else {
                  DAST._IType _1690___mcc_h599 = _source88.dtor_Newtype_a0;
                  DAST._IType _1691_b = _1690___mcc_h599;
                  {
                    if (object.Equals(_1243_fromTpe, _1691_b)) {
                      Dafny.ISequence<Dafny.Rune> _1692_recursiveGen;
                      bool _1693_recOwned;
                      bool _1694_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1695_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out599;
                      bool _out600;
                      bool _out601;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out602;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out599, out _out600, out _out601, out _out602);
                      _1692_recursiveGen = _out599;
                      _1693_recOwned = _out600;
                      _1694_recErased = _out601;
                      _1695_recIdents = _out602;
                      Dafny.ISequence<Dafny.Rune> _1696_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out603;
                      _out603 = DCOMP.COMP.GenType(_1242_toTpe, true, false);
                      _1696_rhsType = _out603;
                      Dafny.ISequence<Dafny.Rune> _1697_uneraseFn;
                      _1697_uneraseFn = ((_1693_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1696_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1697_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1692_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1693_recOwned;
                      isErased = false;
                      readIdents = _1695_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out604;
                      bool _out605;
                      bool _out606;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out607;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1244_expr, _1243_fromTpe, _1691_b), _1691_b, _1242_toTpe), selfIdent, @params, mustOwn, out _out604, out _out605, out _out606, out _out607);
                      s = _out604;
                      isOwned = _out605;
                      isErased = _out606;
                      readIdents = _out607;
                    }
                  }
                }
              } else if (_source87.is_Nullable) {
                DAST._IType _1698___mcc_h601 = _source87.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1699_recursiveGen;
                  bool _1700_recOwned;
                  bool _1701_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1702_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out608;
                  bool _out609;
                  bool _out610;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out611;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out608, out _out609, out _out610, out _out611);
                  _1699_recursiveGen = _out608;
                  _1700_recOwned = _out609;
                  _1701_recErased = _out610;
                  _1702_recIdents = _out611;
                  if (!(_1700_recOwned)) {
                    _1699_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1699_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1699_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1701_recErased;
                  readIdents = _1702_recIdents;
                }
              } else if (_source87.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1703___mcc_h603 = _source87.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1704_recursiveGen;
                  bool _1705_recOwned;
                  bool _1706_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1707_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out612;
                  bool _out613;
                  bool _out614;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out615;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out612, out _out613, out _out614, out _out615);
                  _1704_recursiveGen = _out612;
                  _1705_recOwned = _out613;
                  _1706_recErased = _out614;
                  _1707_recIdents = _out615;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1704_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1705_recOwned;
                  isErased = _1706_recErased;
                  readIdents = _1707_recIdents;
                }
              } else if (_source87.is_Array) {
                DAST._IType _1708___mcc_h605 = _source87.dtor_element;
                BigInteger _1709___mcc_h606 = _source87.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1710_recursiveGen;
                  bool _1711_recOwned;
                  bool _1712_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1713_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out616;
                  bool _out617;
                  bool _out618;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out619;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out616, out _out617, out _out618, out _out619);
                  _1710_recursiveGen = _out616;
                  _1711_recOwned = _out617;
                  _1712_recErased = _out618;
                  _1713_recIdents = _out619;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1710_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1711_recOwned;
                  isErased = _1712_recErased;
                  readIdents = _1713_recIdents;
                }
              } else if (_source87.is_Seq) {
                DAST._IType _1714___mcc_h609 = _source87.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1715_recursiveGen;
                  bool _1716_recOwned;
                  bool _1717_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1718_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out620;
                  bool _out621;
                  bool _out622;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out623;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out620, out _out621, out _out622, out _out623);
                  _1715_recursiveGen = _out620;
                  _1716_recOwned = _out621;
                  _1717_recErased = _out622;
                  _1718_recIdents = _out623;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1715_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1716_recOwned;
                  isErased = _1717_recErased;
                  readIdents = _1718_recIdents;
                }
              } else if (_source87.is_Set) {
                DAST._IType _1719___mcc_h611 = _source87.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1720_recursiveGen;
                  bool _1721_recOwned;
                  bool _1722_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1723_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out624;
                  bool _out625;
                  bool _out626;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out627;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out624, out _out625, out _out626, out _out627);
                  _1720_recursiveGen = _out624;
                  _1721_recOwned = _out625;
                  _1722_recErased = _out626;
                  _1723_recIdents = _out627;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1720_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1721_recOwned;
                  isErased = _1722_recErased;
                  readIdents = _1723_recIdents;
                }
              } else if (_source87.is_Multiset) {
                DAST._IType _1724___mcc_h613 = _source87.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1725_recursiveGen;
                  bool _1726_recOwned;
                  bool _1727_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1728_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out628;
                  bool _out629;
                  bool _out630;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out631;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out628, out _out629, out _out630, out _out631);
                  _1725_recursiveGen = _out628;
                  _1726_recOwned = _out629;
                  _1727_recErased = _out630;
                  _1728_recIdents = _out631;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1725_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1726_recOwned;
                  isErased = _1727_recErased;
                  readIdents = _1728_recIdents;
                }
              } else if (_source87.is_Map) {
                DAST._IType _1729___mcc_h615 = _source87.dtor_key;
                DAST._IType _1730___mcc_h616 = _source87.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1731_recursiveGen;
                  bool _1732_recOwned;
                  bool _1733_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1734_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out632;
                  bool _out633;
                  bool _out634;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out635;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out632, out _out633, out _out634, out _out635);
                  _1731_recursiveGen = _out632;
                  _1732_recOwned = _out633;
                  _1733_recErased = _out634;
                  _1734_recIdents = _out635;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1731_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1732_recOwned;
                  isErased = _1733_recErased;
                  readIdents = _1734_recIdents;
                }
              } else if (_source87.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1735___mcc_h619 = _source87.dtor_args;
                DAST._IType _1736___mcc_h620 = _source87.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1737_recursiveGen;
                  bool _1738_recOwned;
                  bool _1739_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1740_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out636;
                  bool _out637;
                  bool _out638;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out639;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out636, out _out637, out _out638, out _out639);
                  _1737_recursiveGen = _out636;
                  _1738_recOwned = _out637;
                  _1739_recErased = _out638;
                  _1740_recIdents = _out639;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1737_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1738_recOwned;
                  isErased = _1739_recErased;
                  readIdents = _1740_recIdents;
                }
              } else if (_source87.is_Primitive) {
                DAST._IPrimitive _1741___mcc_h623 = _source87.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1742_recursiveGen;
                  bool _1743_recOwned;
                  bool _1744_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1745_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out640;
                  bool _out641;
                  bool _out642;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out643;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out640, out _out641, out _out642, out _out643);
                  _1742_recursiveGen = _out640;
                  _1743_recOwned = _out641;
                  _1744_recErased = _out642;
                  _1745_recIdents = _out643;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1742_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1743_recOwned;
                  isErased = _1744_recErased;
                  readIdents = _1745_recIdents;
                }
              } else if (_source87.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1746___mcc_h625 = _source87.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1747_recursiveGen;
                  bool _1748_recOwned;
                  bool _1749_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1750_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out644;
                  bool _out645;
                  bool _out646;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out647;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out644, out _out645, out _out646, out _out647);
                  _1747_recursiveGen = _out644;
                  _1748_recOwned = _out645;
                  _1749_recErased = _out646;
                  _1750_recIdents = _out647;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1747_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1748_recOwned;
                  isErased = _1749_recErased;
                  readIdents = _1750_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1751___mcc_h627 = _source87.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1752_recursiveGen;
                  bool _1753_recOwned;
                  bool _1754_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1755_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out648;
                  bool _out649;
                  bool _out650;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out651;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out648, out _out649, out _out650, out _out651);
                  _1752_recursiveGen = _out648;
                  _1753_recOwned = _out649;
                  _1754_recErased = _out650;
                  _1755_recIdents = _out651;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1752_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1753_recOwned;
                  isErased = _1754_recErased;
                  readIdents = _1755_recIdents;
                }
              }
            } else if (_source75.is_Seq) {
              DAST._IType _1756___mcc_h629 = _source75.dtor_element;
              DAST._IType _source89 = _1250___mcc_h306;
              if (_source89.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1757___mcc_h633 = _source89.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1758___mcc_h634 = _source89.dtor_typeArgs;
                DAST._IResolvedType _1759___mcc_h635 = _source89.dtor_resolved;
                DAST._IResolvedType _source90 = _1759___mcc_h635;
                if (_source90.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1760___mcc_h639 = _source90.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1761_recursiveGen;
                    bool _1762_recOwned;
                    bool _1763_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1764_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out652;
                    bool _out653;
                    bool _out654;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out655;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out652, out _out653, out _out654, out _out655);
                    _1761_recursiveGen = _out652;
                    _1762_recOwned = _out653;
                    _1763_recErased = _out654;
                    _1764_recIdents = _out655;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1761_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1762_recOwned;
                    isErased = _1763_recErased;
                    readIdents = _1764_recIdents;
                  }
                } else if (_source90.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1765___mcc_h641 = _source90.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1766_recursiveGen;
                    bool _1767_recOwned;
                    bool _1768_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1769_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out656;
                    bool _out657;
                    bool _out658;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out659;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out656, out _out657, out _out658, out _out659);
                    _1766_recursiveGen = _out656;
                    _1767_recOwned = _out657;
                    _1768_recErased = _out658;
                    _1769_recIdents = _out659;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1766_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1767_recOwned;
                    isErased = _1768_recErased;
                    readIdents = _1769_recIdents;
                  }
                } else {
                  DAST._IType _1770___mcc_h643 = _source90.dtor_Newtype_a0;
                  DAST._IType _1771_b = _1770___mcc_h643;
                  {
                    if (object.Equals(_1243_fromTpe, _1771_b)) {
                      Dafny.ISequence<Dafny.Rune> _1772_recursiveGen;
                      bool _1773_recOwned;
                      bool _1774_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1775_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out660;
                      bool _out661;
                      bool _out662;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out663;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out660, out _out661, out _out662, out _out663);
                      _1772_recursiveGen = _out660;
                      _1773_recOwned = _out661;
                      _1774_recErased = _out662;
                      _1775_recIdents = _out663;
                      Dafny.ISequence<Dafny.Rune> _1776_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out664;
                      _out664 = DCOMP.COMP.GenType(_1242_toTpe, true, false);
                      _1776_rhsType = _out664;
                      Dafny.ISequence<Dafny.Rune> _1777_uneraseFn;
                      _1777_uneraseFn = ((_1773_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1776_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1777_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1772_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1773_recOwned;
                      isErased = false;
                      readIdents = _1775_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out665;
                      bool _out666;
                      bool _out667;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out668;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1244_expr, _1243_fromTpe, _1771_b), _1771_b, _1242_toTpe), selfIdent, @params, mustOwn, out _out665, out _out666, out _out667, out _out668);
                      s = _out665;
                      isOwned = _out666;
                      isErased = _out667;
                      readIdents = _out668;
                    }
                  }
                }
              } else if (_source89.is_Nullable) {
                DAST._IType _1778___mcc_h645 = _source89.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1779_recursiveGen;
                  bool _1780_recOwned;
                  bool _1781_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1782_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out669;
                  bool _out670;
                  bool _out671;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out672;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out669, out _out670, out _out671, out _out672);
                  _1779_recursiveGen = _out669;
                  _1780_recOwned = _out670;
                  _1781_recErased = _out671;
                  _1782_recIdents = _out672;
                  if (!(_1780_recOwned)) {
                    _1779_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1779_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1779_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1781_recErased;
                  readIdents = _1782_recIdents;
                }
              } else if (_source89.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1783___mcc_h647 = _source89.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1784_recursiveGen;
                  bool _1785_recOwned;
                  bool _1786_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1787_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out673;
                  bool _out674;
                  bool _out675;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out676;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out673, out _out674, out _out675, out _out676);
                  _1784_recursiveGen = _out673;
                  _1785_recOwned = _out674;
                  _1786_recErased = _out675;
                  _1787_recIdents = _out676;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1784_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1785_recOwned;
                  isErased = _1786_recErased;
                  readIdents = _1787_recIdents;
                }
              } else if (_source89.is_Array) {
                DAST._IType _1788___mcc_h649 = _source89.dtor_element;
                BigInteger _1789___mcc_h650 = _source89.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1790_recursiveGen;
                  bool _1791_recOwned;
                  bool _1792_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1793_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out677;
                  bool _out678;
                  bool _out679;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out680;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out677, out _out678, out _out679, out _out680);
                  _1790_recursiveGen = _out677;
                  _1791_recOwned = _out678;
                  _1792_recErased = _out679;
                  _1793_recIdents = _out680;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1790_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1791_recOwned;
                  isErased = _1792_recErased;
                  readIdents = _1793_recIdents;
                }
              } else if (_source89.is_Seq) {
                DAST._IType _1794___mcc_h653 = _source89.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1795_recursiveGen;
                  bool _1796_recOwned;
                  bool _1797_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1798_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out681;
                  bool _out682;
                  bool _out683;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out684;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out681, out _out682, out _out683, out _out684);
                  _1795_recursiveGen = _out681;
                  _1796_recOwned = _out682;
                  _1797_recErased = _out683;
                  _1798_recIdents = _out684;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1795_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1796_recOwned;
                  isErased = _1797_recErased;
                  readIdents = _1798_recIdents;
                }
              } else if (_source89.is_Set) {
                DAST._IType _1799___mcc_h655 = _source89.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1800_recursiveGen;
                  bool _1801_recOwned;
                  bool _1802_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1803_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out685;
                  bool _out686;
                  bool _out687;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out688;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out685, out _out686, out _out687, out _out688);
                  _1800_recursiveGen = _out685;
                  _1801_recOwned = _out686;
                  _1802_recErased = _out687;
                  _1803_recIdents = _out688;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1800_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1801_recOwned;
                  isErased = _1802_recErased;
                  readIdents = _1803_recIdents;
                }
              } else if (_source89.is_Multiset) {
                DAST._IType _1804___mcc_h657 = _source89.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1805_recursiveGen;
                  bool _1806_recOwned;
                  bool _1807_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1808_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out689;
                  bool _out690;
                  bool _out691;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out692;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out689, out _out690, out _out691, out _out692);
                  _1805_recursiveGen = _out689;
                  _1806_recOwned = _out690;
                  _1807_recErased = _out691;
                  _1808_recIdents = _out692;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1805_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1806_recOwned;
                  isErased = _1807_recErased;
                  readIdents = _1808_recIdents;
                }
              } else if (_source89.is_Map) {
                DAST._IType _1809___mcc_h659 = _source89.dtor_key;
                DAST._IType _1810___mcc_h660 = _source89.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1811_recursiveGen;
                  bool _1812_recOwned;
                  bool _1813_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1814_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out693;
                  bool _out694;
                  bool _out695;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out696;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out693, out _out694, out _out695, out _out696);
                  _1811_recursiveGen = _out693;
                  _1812_recOwned = _out694;
                  _1813_recErased = _out695;
                  _1814_recIdents = _out696;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1811_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1812_recOwned;
                  isErased = _1813_recErased;
                  readIdents = _1814_recIdents;
                }
              } else if (_source89.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1815___mcc_h663 = _source89.dtor_args;
                DAST._IType _1816___mcc_h664 = _source89.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1817_recursiveGen;
                  bool _1818_recOwned;
                  bool _1819_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1820_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out697;
                  bool _out698;
                  bool _out699;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out700;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out697, out _out698, out _out699, out _out700);
                  _1817_recursiveGen = _out697;
                  _1818_recOwned = _out698;
                  _1819_recErased = _out699;
                  _1820_recIdents = _out700;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1817_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1818_recOwned;
                  isErased = _1819_recErased;
                  readIdents = _1820_recIdents;
                }
              } else if (_source89.is_Primitive) {
                DAST._IPrimitive _1821___mcc_h667 = _source89.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1822_recursiveGen;
                  bool _1823_recOwned;
                  bool _1824_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1825_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out701;
                  bool _out702;
                  bool _out703;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out704;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out701, out _out702, out _out703, out _out704);
                  _1822_recursiveGen = _out701;
                  _1823_recOwned = _out702;
                  _1824_recErased = _out703;
                  _1825_recIdents = _out704;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1822_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1823_recOwned;
                  isErased = _1824_recErased;
                  readIdents = _1825_recIdents;
                }
              } else if (_source89.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1826___mcc_h669 = _source89.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1827_recursiveGen;
                  bool _1828_recOwned;
                  bool _1829_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1830_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out705;
                  bool _out706;
                  bool _out707;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out708;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out705, out _out706, out _out707, out _out708);
                  _1827_recursiveGen = _out705;
                  _1828_recOwned = _out706;
                  _1829_recErased = _out707;
                  _1830_recIdents = _out708;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1827_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1828_recOwned;
                  isErased = _1829_recErased;
                  readIdents = _1830_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1831___mcc_h671 = _source89.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1832_recursiveGen;
                  bool _1833_recOwned;
                  bool _1834_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1835_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out709;
                  bool _out710;
                  bool _out711;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out712;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out709, out _out710, out _out711, out _out712);
                  _1832_recursiveGen = _out709;
                  _1833_recOwned = _out710;
                  _1834_recErased = _out711;
                  _1835_recIdents = _out712;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1832_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1833_recOwned;
                  isErased = _1834_recErased;
                  readIdents = _1835_recIdents;
                }
              }
            } else if (_source75.is_Set) {
              DAST._IType _1836___mcc_h673 = _source75.dtor_element;
              DAST._IType _source91 = _1250___mcc_h306;
              if (_source91.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1837___mcc_h677 = _source91.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1838___mcc_h678 = _source91.dtor_typeArgs;
                DAST._IResolvedType _1839___mcc_h679 = _source91.dtor_resolved;
                DAST._IResolvedType _source92 = _1839___mcc_h679;
                if (_source92.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1840___mcc_h683 = _source92.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1841_recursiveGen;
                    bool _1842_recOwned;
                    bool _1843_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1844_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out713;
                    bool _out714;
                    bool _out715;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out716;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out713, out _out714, out _out715, out _out716);
                    _1841_recursiveGen = _out713;
                    _1842_recOwned = _out714;
                    _1843_recErased = _out715;
                    _1844_recIdents = _out716;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1841_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1842_recOwned;
                    isErased = _1843_recErased;
                    readIdents = _1844_recIdents;
                  }
                } else if (_source92.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1845___mcc_h685 = _source92.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1846_recursiveGen;
                    bool _1847_recOwned;
                    bool _1848_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1849_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out717;
                    bool _out718;
                    bool _out719;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out720;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out717, out _out718, out _out719, out _out720);
                    _1846_recursiveGen = _out717;
                    _1847_recOwned = _out718;
                    _1848_recErased = _out719;
                    _1849_recIdents = _out720;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1846_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1847_recOwned;
                    isErased = _1848_recErased;
                    readIdents = _1849_recIdents;
                  }
                } else {
                  DAST._IType _1850___mcc_h687 = _source92.dtor_Newtype_a0;
                  DAST._IType _1851_b = _1850___mcc_h687;
                  {
                    if (object.Equals(_1243_fromTpe, _1851_b)) {
                      Dafny.ISequence<Dafny.Rune> _1852_recursiveGen;
                      bool _1853_recOwned;
                      bool _1854_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1855_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out721;
                      bool _out722;
                      bool _out723;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out724;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out721, out _out722, out _out723, out _out724);
                      _1852_recursiveGen = _out721;
                      _1853_recOwned = _out722;
                      _1854_recErased = _out723;
                      _1855_recIdents = _out724;
                      Dafny.ISequence<Dafny.Rune> _1856_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out725;
                      _out725 = DCOMP.COMP.GenType(_1242_toTpe, true, false);
                      _1856_rhsType = _out725;
                      Dafny.ISequence<Dafny.Rune> _1857_uneraseFn;
                      _1857_uneraseFn = ((_1853_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1856_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1857_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1852_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1853_recOwned;
                      isErased = false;
                      readIdents = _1855_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out726;
                      bool _out727;
                      bool _out728;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out729;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1244_expr, _1243_fromTpe, _1851_b), _1851_b, _1242_toTpe), selfIdent, @params, mustOwn, out _out726, out _out727, out _out728, out _out729);
                      s = _out726;
                      isOwned = _out727;
                      isErased = _out728;
                      readIdents = _out729;
                    }
                  }
                }
              } else if (_source91.is_Nullable) {
                DAST._IType _1858___mcc_h689 = _source91.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1859_recursiveGen;
                  bool _1860_recOwned;
                  bool _1861_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1862_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out730;
                  bool _out731;
                  bool _out732;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out733;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out730, out _out731, out _out732, out _out733);
                  _1859_recursiveGen = _out730;
                  _1860_recOwned = _out731;
                  _1861_recErased = _out732;
                  _1862_recIdents = _out733;
                  if (!(_1860_recOwned)) {
                    _1859_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1859_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1859_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1861_recErased;
                  readIdents = _1862_recIdents;
                }
              } else if (_source91.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1863___mcc_h691 = _source91.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1864_recursiveGen;
                  bool _1865_recOwned;
                  bool _1866_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1867_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out734;
                  bool _out735;
                  bool _out736;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out737;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out734, out _out735, out _out736, out _out737);
                  _1864_recursiveGen = _out734;
                  _1865_recOwned = _out735;
                  _1866_recErased = _out736;
                  _1867_recIdents = _out737;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1864_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1865_recOwned;
                  isErased = _1866_recErased;
                  readIdents = _1867_recIdents;
                }
              } else if (_source91.is_Array) {
                DAST._IType _1868___mcc_h693 = _source91.dtor_element;
                BigInteger _1869___mcc_h694 = _source91.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1870_recursiveGen;
                  bool _1871_recOwned;
                  bool _1872_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1873_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out738;
                  bool _out739;
                  bool _out740;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out741;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out738, out _out739, out _out740, out _out741);
                  _1870_recursiveGen = _out738;
                  _1871_recOwned = _out739;
                  _1872_recErased = _out740;
                  _1873_recIdents = _out741;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1870_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1871_recOwned;
                  isErased = _1872_recErased;
                  readIdents = _1873_recIdents;
                }
              } else if (_source91.is_Seq) {
                DAST._IType _1874___mcc_h697 = _source91.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1875_recursiveGen;
                  bool _1876_recOwned;
                  bool _1877_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1878_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out742;
                  bool _out743;
                  bool _out744;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out745;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out742, out _out743, out _out744, out _out745);
                  _1875_recursiveGen = _out742;
                  _1876_recOwned = _out743;
                  _1877_recErased = _out744;
                  _1878_recIdents = _out745;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1875_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1876_recOwned;
                  isErased = _1877_recErased;
                  readIdents = _1878_recIdents;
                }
              } else if (_source91.is_Set) {
                DAST._IType _1879___mcc_h699 = _source91.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1880_recursiveGen;
                  bool _1881_recOwned;
                  bool _1882_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1883_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out746;
                  bool _out747;
                  bool _out748;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out749;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out746, out _out747, out _out748, out _out749);
                  _1880_recursiveGen = _out746;
                  _1881_recOwned = _out747;
                  _1882_recErased = _out748;
                  _1883_recIdents = _out749;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1880_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1881_recOwned;
                  isErased = _1882_recErased;
                  readIdents = _1883_recIdents;
                }
              } else if (_source91.is_Multiset) {
                DAST._IType _1884___mcc_h701 = _source91.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1885_recursiveGen;
                  bool _1886_recOwned;
                  bool _1887_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1888_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out750;
                  bool _out751;
                  bool _out752;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out753;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out750, out _out751, out _out752, out _out753);
                  _1885_recursiveGen = _out750;
                  _1886_recOwned = _out751;
                  _1887_recErased = _out752;
                  _1888_recIdents = _out753;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1885_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1886_recOwned;
                  isErased = _1887_recErased;
                  readIdents = _1888_recIdents;
                }
              } else if (_source91.is_Map) {
                DAST._IType _1889___mcc_h703 = _source91.dtor_key;
                DAST._IType _1890___mcc_h704 = _source91.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1891_recursiveGen;
                  bool _1892_recOwned;
                  bool _1893_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1894_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out754;
                  bool _out755;
                  bool _out756;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out757;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out754, out _out755, out _out756, out _out757);
                  _1891_recursiveGen = _out754;
                  _1892_recOwned = _out755;
                  _1893_recErased = _out756;
                  _1894_recIdents = _out757;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1891_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1892_recOwned;
                  isErased = _1893_recErased;
                  readIdents = _1894_recIdents;
                }
              } else if (_source91.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1895___mcc_h707 = _source91.dtor_args;
                DAST._IType _1896___mcc_h708 = _source91.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1897_recursiveGen;
                  bool _1898_recOwned;
                  bool _1899_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1900_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out758;
                  bool _out759;
                  bool _out760;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out761;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out758, out _out759, out _out760, out _out761);
                  _1897_recursiveGen = _out758;
                  _1898_recOwned = _out759;
                  _1899_recErased = _out760;
                  _1900_recIdents = _out761;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1897_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1898_recOwned;
                  isErased = _1899_recErased;
                  readIdents = _1900_recIdents;
                }
              } else if (_source91.is_Primitive) {
                DAST._IPrimitive _1901___mcc_h711 = _source91.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1902_recursiveGen;
                  bool _1903_recOwned;
                  bool _1904_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1905_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out762;
                  bool _out763;
                  bool _out764;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out765;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out762, out _out763, out _out764, out _out765);
                  _1902_recursiveGen = _out762;
                  _1903_recOwned = _out763;
                  _1904_recErased = _out764;
                  _1905_recIdents = _out765;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1902_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1903_recOwned;
                  isErased = _1904_recErased;
                  readIdents = _1905_recIdents;
                }
              } else if (_source91.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1906___mcc_h713 = _source91.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1907_recursiveGen;
                  bool _1908_recOwned;
                  bool _1909_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1910_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out766;
                  bool _out767;
                  bool _out768;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out769;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out766, out _out767, out _out768, out _out769);
                  _1907_recursiveGen = _out766;
                  _1908_recOwned = _out767;
                  _1909_recErased = _out768;
                  _1910_recIdents = _out769;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1907_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1908_recOwned;
                  isErased = _1909_recErased;
                  readIdents = _1910_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1911___mcc_h715 = _source91.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1912_recursiveGen;
                  bool _1913_recOwned;
                  bool _1914_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1915_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out770;
                  bool _out771;
                  bool _out772;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out773;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out770, out _out771, out _out772, out _out773);
                  _1912_recursiveGen = _out770;
                  _1913_recOwned = _out771;
                  _1914_recErased = _out772;
                  _1915_recIdents = _out773;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1912_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1913_recOwned;
                  isErased = _1914_recErased;
                  readIdents = _1915_recIdents;
                }
              }
            } else if (_source75.is_Multiset) {
              DAST._IType _1916___mcc_h717 = _source75.dtor_element;
              DAST._IType _source93 = _1250___mcc_h306;
              if (_source93.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1917___mcc_h721 = _source93.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1918___mcc_h722 = _source93.dtor_typeArgs;
                DAST._IResolvedType _1919___mcc_h723 = _source93.dtor_resolved;
                DAST._IResolvedType _source94 = _1919___mcc_h723;
                if (_source94.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1920___mcc_h727 = _source94.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1921_recursiveGen;
                    bool _1922_recOwned;
                    bool _1923_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1924_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out774;
                    bool _out775;
                    bool _out776;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out777;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out774, out _out775, out _out776, out _out777);
                    _1921_recursiveGen = _out774;
                    _1922_recOwned = _out775;
                    _1923_recErased = _out776;
                    _1924_recIdents = _out777;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1921_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1922_recOwned;
                    isErased = _1923_recErased;
                    readIdents = _1924_recIdents;
                  }
                } else if (_source94.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1925___mcc_h729 = _source94.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1926_recursiveGen;
                    bool _1927_recOwned;
                    bool _1928_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1929_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out778;
                    bool _out779;
                    bool _out780;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out781;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out778, out _out779, out _out780, out _out781);
                    _1926_recursiveGen = _out778;
                    _1927_recOwned = _out779;
                    _1928_recErased = _out780;
                    _1929_recIdents = _out781;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1926_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1927_recOwned;
                    isErased = _1928_recErased;
                    readIdents = _1929_recIdents;
                  }
                } else {
                  DAST._IType _1930___mcc_h731 = _source94.dtor_Newtype_a0;
                  DAST._IType _1931_b = _1930___mcc_h731;
                  {
                    if (object.Equals(_1243_fromTpe, _1931_b)) {
                      Dafny.ISequence<Dafny.Rune> _1932_recursiveGen;
                      bool _1933_recOwned;
                      bool _1934_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1935_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out782;
                      bool _out783;
                      bool _out784;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out785;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out782, out _out783, out _out784, out _out785);
                      _1932_recursiveGen = _out782;
                      _1933_recOwned = _out783;
                      _1934_recErased = _out784;
                      _1935_recIdents = _out785;
                      Dafny.ISequence<Dafny.Rune> _1936_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out786;
                      _out786 = DCOMP.COMP.GenType(_1242_toTpe, true, false);
                      _1936_rhsType = _out786;
                      Dafny.ISequence<Dafny.Rune> _1937_uneraseFn;
                      _1937_uneraseFn = ((_1933_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1936_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1937_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1932_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1933_recOwned;
                      isErased = false;
                      readIdents = _1935_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out787;
                      bool _out788;
                      bool _out789;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out790;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1244_expr, _1243_fromTpe, _1931_b), _1931_b, _1242_toTpe), selfIdent, @params, mustOwn, out _out787, out _out788, out _out789, out _out790);
                      s = _out787;
                      isOwned = _out788;
                      isErased = _out789;
                      readIdents = _out790;
                    }
                  }
                }
              } else if (_source93.is_Nullable) {
                DAST._IType _1938___mcc_h733 = _source93.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1939_recursiveGen;
                  bool _1940_recOwned;
                  bool _1941_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1942_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out791;
                  bool _out792;
                  bool _out793;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out794;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out791, out _out792, out _out793, out _out794);
                  _1939_recursiveGen = _out791;
                  _1940_recOwned = _out792;
                  _1941_recErased = _out793;
                  _1942_recIdents = _out794;
                  if (!(_1940_recOwned)) {
                    _1939_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1939_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1939_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1941_recErased;
                  readIdents = _1942_recIdents;
                }
              } else if (_source93.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1943___mcc_h735 = _source93.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1944_recursiveGen;
                  bool _1945_recOwned;
                  bool _1946_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1947_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out795;
                  bool _out796;
                  bool _out797;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out798;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out795, out _out796, out _out797, out _out798);
                  _1944_recursiveGen = _out795;
                  _1945_recOwned = _out796;
                  _1946_recErased = _out797;
                  _1947_recIdents = _out798;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1944_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1945_recOwned;
                  isErased = _1946_recErased;
                  readIdents = _1947_recIdents;
                }
              } else if (_source93.is_Array) {
                DAST._IType _1948___mcc_h737 = _source93.dtor_element;
                BigInteger _1949___mcc_h738 = _source93.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1950_recursiveGen;
                  bool _1951_recOwned;
                  bool _1952_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1953_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out799;
                  bool _out800;
                  bool _out801;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out802;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out799, out _out800, out _out801, out _out802);
                  _1950_recursiveGen = _out799;
                  _1951_recOwned = _out800;
                  _1952_recErased = _out801;
                  _1953_recIdents = _out802;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1950_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1951_recOwned;
                  isErased = _1952_recErased;
                  readIdents = _1953_recIdents;
                }
              } else if (_source93.is_Seq) {
                DAST._IType _1954___mcc_h741 = _source93.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1955_recursiveGen;
                  bool _1956_recOwned;
                  bool _1957_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1958_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out803;
                  bool _out804;
                  bool _out805;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out806;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out803, out _out804, out _out805, out _out806);
                  _1955_recursiveGen = _out803;
                  _1956_recOwned = _out804;
                  _1957_recErased = _out805;
                  _1958_recIdents = _out806;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1955_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1956_recOwned;
                  isErased = _1957_recErased;
                  readIdents = _1958_recIdents;
                }
              } else if (_source93.is_Set) {
                DAST._IType _1959___mcc_h743 = _source93.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1960_recursiveGen;
                  bool _1961_recOwned;
                  bool _1962_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1963_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out807;
                  bool _out808;
                  bool _out809;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out810;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out807, out _out808, out _out809, out _out810);
                  _1960_recursiveGen = _out807;
                  _1961_recOwned = _out808;
                  _1962_recErased = _out809;
                  _1963_recIdents = _out810;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1960_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1961_recOwned;
                  isErased = _1962_recErased;
                  readIdents = _1963_recIdents;
                }
              } else if (_source93.is_Multiset) {
                DAST._IType _1964___mcc_h745 = _source93.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1965_recursiveGen;
                  bool _1966_recOwned;
                  bool _1967_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1968_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out811;
                  bool _out812;
                  bool _out813;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out814;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out811, out _out812, out _out813, out _out814);
                  _1965_recursiveGen = _out811;
                  _1966_recOwned = _out812;
                  _1967_recErased = _out813;
                  _1968_recIdents = _out814;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1965_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1966_recOwned;
                  isErased = _1967_recErased;
                  readIdents = _1968_recIdents;
                }
              } else if (_source93.is_Map) {
                DAST._IType _1969___mcc_h747 = _source93.dtor_key;
                DAST._IType _1970___mcc_h748 = _source93.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1971_recursiveGen;
                  bool _1972_recOwned;
                  bool _1973_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1974_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out815;
                  bool _out816;
                  bool _out817;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out818;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out815, out _out816, out _out817, out _out818);
                  _1971_recursiveGen = _out815;
                  _1972_recOwned = _out816;
                  _1973_recErased = _out817;
                  _1974_recIdents = _out818;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1971_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1972_recOwned;
                  isErased = _1973_recErased;
                  readIdents = _1974_recIdents;
                }
              } else if (_source93.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1975___mcc_h751 = _source93.dtor_args;
                DAST._IType _1976___mcc_h752 = _source93.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1977_recursiveGen;
                  bool _1978_recOwned;
                  bool _1979_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1980_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out819;
                  bool _out820;
                  bool _out821;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out822;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out819, out _out820, out _out821, out _out822);
                  _1977_recursiveGen = _out819;
                  _1978_recOwned = _out820;
                  _1979_recErased = _out821;
                  _1980_recIdents = _out822;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1977_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1978_recOwned;
                  isErased = _1979_recErased;
                  readIdents = _1980_recIdents;
                }
              } else if (_source93.is_Primitive) {
                DAST._IPrimitive _1981___mcc_h755 = _source93.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1982_recursiveGen;
                  bool _1983_recOwned;
                  bool _1984_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1985_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out823;
                  bool _out824;
                  bool _out825;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out826;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out823, out _out824, out _out825, out _out826);
                  _1982_recursiveGen = _out823;
                  _1983_recOwned = _out824;
                  _1984_recErased = _out825;
                  _1985_recIdents = _out826;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1982_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1983_recOwned;
                  isErased = _1984_recErased;
                  readIdents = _1985_recIdents;
                }
              } else if (_source93.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1986___mcc_h757 = _source93.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1987_recursiveGen;
                  bool _1988_recOwned;
                  bool _1989_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1990_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out827;
                  bool _out828;
                  bool _out829;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out830;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out827, out _out828, out _out829, out _out830);
                  _1987_recursiveGen = _out827;
                  _1988_recOwned = _out828;
                  _1989_recErased = _out829;
                  _1990_recIdents = _out830;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1987_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1988_recOwned;
                  isErased = _1989_recErased;
                  readIdents = _1990_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1991___mcc_h759 = _source93.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1992_recursiveGen;
                  bool _1993_recOwned;
                  bool _1994_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1995_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out831;
                  bool _out832;
                  bool _out833;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out834;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out831, out _out832, out _out833, out _out834);
                  _1992_recursiveGen = _out831;
                  _1993_recOwned = _out832;
                  _1994_recErased = _out833;
                  _1995_recIdents = _out834;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1992_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1993_recOwned;
                  isErased = _1994_recErased;
                  readIdents = _1995_recIdents;
                }
              }
            } else if (_source75.is_Map) {
              DAST._IType _1996___mcc_h761 = _source75.dtor_key;
              DAST._IType _1997___mcc_h762 = _source75.dtor_value;
              DAST._IType _source95 = _1250___mcc_h306;
              if (_source95.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1998___mcc_h769 = _source95.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1999___mcc_h770 = _source95.dtor_typeArgs;
                DAST._IResolvedType _2000___mcc_h771 = _source95.dtor_resolved;
                DAST._IResolvedType _source96 = _2000___mcc_h771;
                if (_source96.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2001___mcc_h775 = _source96.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2002_recursiveGen;
                    bool _2003_recOwned;
                    bool _2004_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2005_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out835;
                    bool _out836;
                    bool _out837;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out838;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out835, out _out836, out _out837, out _out838);
                    _2002_recursiveGen = _out835;
                    _2003_recOwned = _out836;
                    _2004_recErased = _out837;
                    _2005_recIdents = _out838;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2002_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2003_recOwned;
                    isErased = _2004_recErased;
                    readIdents = _2005_recIdents;
                  }
                } else if (_source96.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2006___mcc_h777 = _source96.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2007_recursiveGen;
                    bool _2008_recOwned;
                    bool _2009_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2010_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out839;
                    bool _out840;
                    bool _out841;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out842;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out839, out _out840, out _out841, out _out842);
                    _2007_recursiveGen = _out839;
                    _2008_recOwned = _out840;
                    _2009_recErased = _out841;
                    _2010_recIdents = _out842;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2007_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2008_recOwned;
                    isErased = _2009_recErased;
                    readIdents = _2010_recIdents;
                  }
                } else {
                  DAST._IType _2011___mcc_h779 = _source96.dtor_Newtype_a0;
                  DAST._IType _2012_b = _2011___mcc_h779;
                  {
                    if (object.Equals(_1243_fromTpe, _2012_b)) {
                      Dafny.ISequence<Dafny.Rune> _2013_recursiveGen;
                      bool _2014_recOwned;
                      bool _2015_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2016_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out843;
                      bool _out844;
                      bool _out845;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out846;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out843, out _out844, out _out845, out _out846);
                      _2013_recursiveGen = _out843;
                      _2014_recOwned = _out844;
                      _2015_recErased = _out845;
                      _2016_recIdents = _out846;
                      Dafny.ISequence<Dafny.Rune> _2017_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out847;
                      _out847 = DCOMP.COMP.GenType(_1242_toTpe, true, false);
                      _2017_rhsType = _out847;
                      Dafny.ISequence<Dafny.Rune> _2018_uneraseFn;
                      _2018_uneraseFn = ((_2014_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2017_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2018_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2013_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2014_recOwned;
                      isErased = false;
                      readIdents = _2016_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out848;
                      bool _out849;
                      bool _out850;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out851;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1244_expr, _1243_fromTpe, _2012_b), _2012_b, _1242_toTpe), selfIdent, @params, mustOwn, out _out848, out _out849, out _out850, out _out851);
                      s = _out848;
                      isOwned = _out849;
                      isErased = _out850;
                      readIdents = _out851;
                    }
                  }
                }
              } else if (_source95.is_Nullable) {
                DAST._IType _2019___mcc_h781 = _source95.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2020_recursiveGen;
                  bool _2021_recOwned;
                  bool _2022_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2023_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out852;
                  bool _out853;
                  bool _out854;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out855;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out852, out _out853, out _out854, out _out855);
                  _2020_recursiveGen = _out852;
                  _2021_recOwned = _out853;
                  _2022_recErased = _out854;
                  _2023_recIdents = _out855;
                  if (!(_2021_recOwned)) {
                    _2020_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2020_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2020_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2022_recErased;
                  readIdents = _2023_recIdents;
                }
              } else if (_source95.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2024___mcc_h783 = _source95.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2025_recursiveGen;
                  bool _2026_recOwned;
                  bool _2027_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2028_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out856;
                  bool _out857;
                  bool _out858;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out859;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out856, out _out857, out _out858, out _out859);
                  _2025_recursiveGen = _out856;
                  _2026_recOwned = _out857;
                  _2027_recErased = _out858;
                  _2028_recIdents = _out859;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2025_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2026_recOwned;
                  isErased = _2027_recErased;
                  readIdents = _2028_recIdents;
                }
              } else if (_source95.is_Array) {
                DAST._IType _2029___mcc_h785 = _source95.dtor_element;
                BigInteger _2030___mcc_h786 = _source95.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2031_recursiveGen;
                  bool _2032_recOwned;
                  bool _2033_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2034_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out860;
                  bool _out861;
                  bool _out862;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out863;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out860, out _out861, out _out862, out _out863);
                  _2031_recursiveGen = _out860;
                  _2032_recOwned = _out861;
                  _2033_recErased = _out862;
                  _2034_recIdents = _out863;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2031_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2032_recOwned;
                  isErased = _2033_recErased;
                  readIdents = _2034_recIdents;
                }
              } else if (_source95.is_Seq) {
                DAST._IType _2035___mcc_h789 = _source95.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2036_recursiveGen;
                  bool _2037_recOwned;
                  bool _2038_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2039_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out864;
                  bool _out865;
                  bool _out866;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out867;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out864, out _out865, out _out866, out _out867);
                  _2036_recursiveGen = _out864;
                  _2037_recOwned = _out865;
                  _2038_recErased = _out866;
                  _2039_recIdents = _out867;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2036_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2037_recOwned;
                  isErased = _2038_recErased;
                  readIdents = _2039_recIdents;
                }
              } else if (_source95.is_Set) {
                DAST._IType _2040___mcc_h791 = _source95.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2041_recursiveGen;
                  bool _2042_recOwned;
                  bool _2043_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2044_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out868;
                  bool _out869;
                  bool _out870;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out871;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out868, out _out869, out _out870, out _out871);
                  _2041_recursiveGen = _out868;
                  _2042_recOwned = _out869;
                  _2043_recErased = _out870;
                  _2044_recIdents = _out871;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2041_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2042_recOwned;
                  isErased = _2043_recErased;
                  readIdents = _2044_recIdents;
                }
              } else if (_source95.is_Multiset) {
                DAST._IType _2045___mcc_h793 = _source95.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2046_recursiveGen;
                  bool _2047_recOwned;
                  bool _2048_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2049_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out872;
                  bool _out873;
                  bool _out874;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out875;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out872, out _out873, out _out874, out _out875);
                  _2046_recursiveGen = _out872;
                  _2047_recOwned = _out873;
                  _2048_recErased = _out874;
                  _2049_recIdents = _out875;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2046_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2047_recOwned;
                  isErased = _2048_recErased;
                  readIdents = _2049_recIdents;
                }
              } else if (_source95.is_Map) {
                DAST._IType _2050___mcc_h795 = _source95.dtor_key;
                DAST._IType _2051___mcc_h796 = _source95.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2052_recursiveGen;
                  bool _2053_recOwned;
                  bool _2054_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2055_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out876;
                  bool _out877;
                  bool _out878;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out879;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out876, out _out877, out _out878, out _out879);
                  _2052_recursiveGen = _out876;
                  _2053_recOwned = _out877;
                  _2054_recErased = _out878;
                  _2055_recIdents = _out879;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2052_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2053_recOwned;
                  isErased = _2054_recErased;
                  readIdents = _2055_recIdents;
                }
              } else if (_source95.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2056___mcc_h799 = _source95.dtor_args;
                DAST._IType _2057___mcc_h800 = _source95.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2058_recursiveGen;
                  bool _2059_recOwned;
                  bool _2060_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2061_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out880;
                  bool _out881;
                  bool _out882;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out883;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out880, out _out881, out _out882, out _out883);
                  _2058_recursiveGen = _out880;
                  _2059_recOwned = _out881;
                  _2060_recErased = _out882;
                  _2061_recIdents = _out883;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2058_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2059_recOwned;
                  isErased = _2060_recErased;
                  readIdents = _2061_recIdents;
                }
              } else if (_source95.is_Primitive) {
                DAST._IPrimitive _2062___mcc_h803 = _source95.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2063_recursiveGen;
                  bool _2064_recOwned;
                  bool _2065_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2066_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out884;
                  bool _out885;
                  bool _out886;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out887;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out884, out _out885, out _out886, out _out887);
                  _2063_recursiveGen = _out884;
                  _2064_recOwned = _out885;
                  _2065_recErased = _out886;
                  _2066_recIdents = _out887;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2063_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2064_recOwned;
                  isErased = _2065_recErased;
                  readIdents = _2066_recIdents;
                }
              } else if (_source95.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2067___mcc_h805 = _source95.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2068_recursiveGen;
                  bool _2069_recOwned;
                  bool _2070_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2071_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out888;
                  bool _out889;
                  bool _out890;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out891;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out888, out _out889, out _out890, out _out891);
                  _2068_recursiveGen = _out888;
                  _2069_recOwned = _out889;
                  _2070_recErased = _out890;
                  _2071_recIdents = _out891;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2068_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2069_recOwned;
                  isErased = _2070_recErased;
                  readIdents = _2071_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2072___mcc_h807 = _source95.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2073_recursiveGen;
                  bool _2074_recOwned;
                  bool _2075_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2076_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out892;
                  bool _out893;
                  bool _out894;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out895;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out892, out _out893, out _out894, out _out895);
                  _2073_recursiveGen = _out892;
                  _2074_recOwned = _out893;
                  _2075_recErased = _out894;
                  _2076_recIdents = _out895;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2073_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2074_recOwned;
                  isErased = _2075_recErased;
                  readIdents = _2076_recIdents;
                }
              }
            } else if (_source75.is_Arrow) {
              Dafny.ISequence<DAST._IType> _2077___mcc_h809 = _source75.dtor_args;
              DAST._IType _2078___mcc_h810 = _source75.dtor_result;
              DAST._IType _source97 = _1250___mcc_h306;
              if (_source97.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2079___mcc_h817 = _source97.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2080___mcc_h818 = _source97.dtor_typeArgs;
                DAST._IResolvedType _2081___mcc_h819 = _source97.dtor_resolved;
                DAST._IResolvedType _source98 = _2081___mcc_h819;
                if (_source98.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2082___mcc_h823 = _source98.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2083_recursiveGen;
                    bool _2084_recOwned;
                    bool _2085_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2086_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out896;
                    bool _out897;
                    bool _out898;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out899;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out896, out _out897, out _out898, out _out899);
                    _2083_recursiveGen = _out896;
                    _2084_recOwned = _out897;
                    _2085_recErased = _out898;
                    _2086_recIdents = _out899;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2083_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2084_recOwned;
                    isErased = _2085_recErased;
                    readIdents = _2086_recIdents;
                  }
                } else if (_source98.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2087___mcc_h825 = _source98.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2088_recursiveGen;
                    bool _2089_recOwned;
                    bool _2090_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2091_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out900;
                    bool _out901;
                    bool _out902;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out903;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out900, out _out901, out _out902, out _out903);
                    _2088_recursiveGen = _out900;
                    _2089_recOwned = _out901;
                    _2090_recErased = _out902;
                    _2091_recIdents = _out903;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2088_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2089_recOwned;
                    isErased = _2090_recErased;
                    readIdents = _2091_recIdents;
                  }
                } else {
                  DAST._IType _2092___mcc_h827 = _source98.dtor_Newtype_a0;
                  DAST._IType _2093_b = _2092___mcc_h827;
                  {
                    if (object.Equals(_1243_fromTpe, _2093_b)) {
                      Dafny.ISequence<Dafny.Rune> _2094_recursiveGen;
                      bool _2095_recOwned;
                      bool _2096_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2097_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out904;
                      bool _out905;
                      bool _out906;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out907;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out904, out _out905, out _out906, out _out907);
                      _2094_recursiveGen = _out904;
                      _2095_recOwned = _out905;
                      _2096_recErased = _out906;
                      _2097_recIdents = _out907;
                      Dafny.ISequence<Dafny.Rune> _2098_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out908;
                      _out908 = DCOMP.COMP.GenType(_1242_toTpe, true, false);
                      _2098_rhsType = _out908;
                      Dafny.ISequence<Dafny.Rune> _2099_uneraseFn;
                      _2099_uneraseFn = ((_2095_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2098_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2099_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2094_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2095_recOwned;
                      isErased = false;
                      readIdents = _2097_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out909;
                      bool _out910;
                      bool _out911;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out912;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1244_expr, _1243_fromTpe, _2093_b), _2093_b, _1242_toTpe), selfIdent, @params, mustOwn, out _out909, out _out910, out _out911, out _out912);
                      s = _out909;
                      isOwned = _out910;
                      isErased = _out911;
                      readIdents = _out912;
                    }
                  }
                }
              } else if (_source97.is_Nullable) {
                DAST._IType _2100___mcc_h829 = _source97.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2101_recursiveGen;
                  bool _2102_recOwned;
                  bool _2103_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2104_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out913;
                  bool _out914;
                  bool _out915;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out916;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out913, out _out914, out _out915, out _out916);
                  _2101_recursiveGen = _out913;
                  _2102_recOwned = _out914;
                  _2103_recErased = _out915;
                  _2104_recIdents = _out916;
                  if (!(_2102_recOwned)) {
                    _2101_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2101_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2101_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2103_recErased;
                  readIdents = _2104_recIdents;
                }
              } else if (_source97.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2105___mcc_h831 = _source97.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2106_recursiveGen;
                  bool _2107_recOwned;
                  bool _2108_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2109_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out917;
                  bool _out918;
                  bool _out919;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out920;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out917, out _out918, out _out919, out _out920);
                  _2106_recursiveGen = _out917;
                  _2107_recOwned = _out918;
                  _2108_recErased = _out919;
                  _2109_recIdents = _out920;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2106_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2107_recOwned;
                  isErased = _2108_recErased;
                  readIdents = _2109_recIdents;
                }
              } else if (_source97.is_Array) {
                DAST._IType _2110___mcc_h833 = _source97.dtor_element;
                BigInteger _2111___mcc_h834 = _source97.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2112_recursiveGen;
                  bool _2113_recOwned;
                  bool _2114_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2115_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out921;
                  bool _out922;
                  bool _out923;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out924;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out921, out _out922, out _out923, out _out924);
                  _2112_recursiveGen = _out921;
                  _2113_recOwned = _out922;
                  _2114_recErased = _out923;
                  _2115_recIdents = _out924;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2112_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2113_recOwned;
                  isErased = _2114_recErased;
                  readIdents = _2115_recIdents;
                }
              } else if (_source97.is_Seq) {
                DAST._IType _2116___mcc_h837 = _source97.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2117_recursiveGen;
                  bool _2118_recOwned;
                  bool _2119_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2120_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out925;
                  bool _out926;
                  bool _out927;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out928;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out925, out _out926, out _out927, out _out928);
                  _2117_recursiveGen = _out925;
                  _2118_recOwned = _out926;
                  _2119_recErased = _out927;
                  _2120_recIdents = _out928;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2117_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2118_recOwned;
                  isErased = _2119_recErased;
                  readIdents = _2120_recIdents;
                }
              } else if (_source97.is_Set) {
                DAST._IType _2121___mcc_h839 = _source97.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2122_recursiveGen;
                  bool _2123_recOwned;
                  bool _2124_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2125_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out929;
                  bool _out930;
                  bool _out931;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out932;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out929, out _out930, out _out931, out _out932);
                  _2122_recursiveGen = _out929;
                  _2123_recOwned = _out930;
                  _2124_recErased = _out931;
                  _2125_recIdents = _out932;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2122_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2123_recOwned;
                  isErased = _2124_recErased;
                  readIdents = _2125_recIdents;
                }
              } else if (_source97.is_Multiset) {
                DAST._IType _2126___mcc_h841 = _source97.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2127_recursiveGen;
                  bool _2128_recOwned;
                  bool _2129_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2130_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out933;
                  bool _out934;
                  bool _out935;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out936;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out933, out _out934, out _out935, out _out936);
                  _2127_recursiveGen = _out933;
                  _2128_recOwned = _out934;
                  _2129_recErased = _out935;
                  _2130_recIdents = _out936;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2127_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2128_recOwned;
                  isErased = _2129_recErased;
                  readIdents = _2130_recIdents;
                }
              } else if (_source97.is_Map) {
                DAST._IType _2131___mcc_h843 = _source97.dtor_key;
                DAST._IType _2132___mcc_h844 = _source97.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2133_recursiveGen;
                  bool _2134_recOwned;
                  bool _2135_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2136_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out937;
                  bool _out938;
                  bool _out939;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out940;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out937, out _out938, out _out939, out _out940);
                  _2133_recursiveGen = _out937;
                  _2134_recOwned = _out938;
                  _2135_recErased = _out939;
                  _2136_recIdents = _out940;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2133_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2134_recOwned;
                  isErased = _2135_recErased;
                  readIdents = _2136_recIdents;
                }
              } else if (_source97.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2137___mcc_h847 = _source97.dtor_args;
                DAST._IType _2138___mcc_h848 = _source97.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2139_recursiveGen;
                  bool _2140_recOwned;
                  bool _2141_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2142_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out941;
                  bool _out942;
                  bool _out943;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out944;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out941, out _out942, out _out943, out _out944);
                  _2139_recursiveGen = _out941;
                  _2140_recOwned = _out942;
                  _2141_recErased = _out943;
                  _2142_recIdents = _out944;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2139_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2140_recOwned;
                  isErased = _2141_recErased;
                  readIdents = _2142_recIdents;
                }
              } else if (_source97.is_Primitive) {
                DAST._IPrimitive _2143___mcc_h851 = _source97.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2144_recursiveGen;
                  bool _2145_recOwned;
                  bool _2146_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2147_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out945;
                  bool _out946;
                  bool _out947;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out948;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out945, out _out946, out _out947, out _out948);
                  _2144_recursiveGen = _out945;
                  _2145_recOwned = _out946;
                  _2146_recErased = _out947;
                  _2147_recIdents = _out948;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2144_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2145_recOwned;
                  isErased = _2146_recErased;
                  readIdents = _2147_recIdents;
                }
              } else if (_source97.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2148___mcc_h853 = _source97.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2149_recursiveGen;
                  bool _2150_recOwned;
                  bool _2151_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2152_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out949;
                  bool _out950;
                  bool _out951;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out952;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out949, out _out950, out _out951, out _out952);
                  _2149_recursiveGen = _out949;
                  _2150_recOwned = _out950;
                  _2151_recErased = _out951;
                  _2152_recIdents = _out952;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2149_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2150_recOwned;
                  isErased = _2151_recErased;
                  readIdents = _2152_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2153___mcc_h855 = _source97.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2154_recursiveGen;
                  bool _2155_recOwned;
                  bool _2156_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2157_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out953;
                  bool _out954;
                  bool _out955;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out956;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out953, out _out954, out _out955, out _out956);
                  _2154_recursiveGen = _out953;
                  _2155_recOwned = _out954;
                  _2156_recErased = _out955;
                  _2157_recIdents = _out956;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2154_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2155_recOwned;
                  isErased = _2156_recErased;
                  readIdents = _2157_recIdents;
                }
              }
            } else if (_source75.is_Primitive) {
              DAST._IPrimitive _2158___mcc_h857 = _source75.dtor_Primitive_a0;
              DAST._IPrimitive _source99 = _2158___mcc_h857;
              if (_source99.is_Int) {
                DAST._IType _source100 = _1250___mcc_h306;
                if (_source100.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2159___mcc_h861 = _source100.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2160___mcc_h862 = _source100.dtor_typeArgs;
                  DAST._IResolvedType _2161___mcc_h863 = _source100.dtor_resolved;
                  DAST._IResolvedType _source101 = _2161___mcc_h863;
                  if (_source101.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2162___mcc_h867 = _source101.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2163_recursiveGen;
                      bool _2164_recOwned;
                      bool _2165_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2166_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out957;
                      bool _out958;
                      bool _out959;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out960;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out957, out _out958, out _out959, out _out960);
                      _2163_recursiveGen = _out957;
                      _2164_recOwned = _out958;
                      _2165_recErased = _out959;
                      _2166_recIdents = _out960;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2163_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2164_recOwned;
                      isErased = _2165_recErased;
                      readIdents = _2166_recIdents;
                    }
                  } else if (_source101.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2167___mcc_h869 = _source101.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2168_recursiveGen;
                      bool _2169_recOwned;
                      bool _2170_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2171_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out961;
                      bool _out962;
                      bool _out963;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out964;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out961, out _out962, out _out963, out _out964);
                      _2168_recursiveGen = _out961;
                      _2169_recOwned = _out962;
                      _2170_recErased = _out963;
                      _2171_recIdents = _out964;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2168_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2169_recOwned;
                      isErased = _2170_recErased;
                      readIdents = _2171_recIdents;
                    }
                  } else {
                    DAST._IType _2172___mcc_h871 = _source101.dtor_Newtype_a0;
                    DAST._IType _2173_b = _2172___mcc_h871;
                    {
                      if (object.Equals(_1243_fromTpe, _2173_b)) {
                        Dafny.ISequence<Dafny.Rune> _2174_recursiveGen;
                        bool _2175_recOwned;
                        bool _2176_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2177_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out965;
                        bool _out966;
                        bool _out967;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out968;
                        DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out965, out _out966, out _out967, out _out968);
                        _2174_recursiveGen = _out965;
                        _2175_recOwned = _out966;
                        _2176_recErased = _out967;
                        _2177_recIdents = _out968;
                        Dafny.ISequence<Dafny.Rune> _2178_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out969;
                        _out969 = DCOMP.COMP.GenType(_1242_toTpe, true, false);
                        _2178_rhsType = _out969;
                        Dafny.ISequence<Dafny.Rune> _2179_uneraseFn;
                        _2179_uneraseFn = ((_2175_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2178_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2179_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2174_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2175_recOwned;
                        isErased = false;
                        readIdents = _2177_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out970;
                        bool _out971;
                        bool _out972;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out973;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1244_expr, _1243_fromTpe, _2173_b), _2173_b, _1242_toTpe), selfIdent, @params, mustOwn, out _out970, out _out971, out _out972, out _out973);
                        s = _out970;
                        isOwned = _out971;
                        isErased = _out972;
                        readIdents = _out973;
                      }
                    }
                  }
                } else if (_source100.is_Nullable) {
                  DAST._IType _2180___mcc_h873 = _source100.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2181_recursiveGen;
                    bool _2182_recOwned;
                    bool _2183_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2184_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out974;
                    bool _out975;
                    bool _out976;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out977;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out974, out _out975, out _out976, out _out977);
                    _2181_recursiveGen = _out974;
                    _2182_recOwned = _out975;
                    _2183_recErased = _out976;
                    _2184_recIdents = _out977;
                    if (!(_2182_recOwned)) {
                      _2181_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2181_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2181_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2183_recErased;
                    readIdents = _2184_recIdents;
                  }
                } else if (_source100.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2185___mcc_h875 = _source100.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2186_recursiveGen;
                    bool _2187_recOwned;
                    bool _2188_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2189_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out978;
                    bool _out979;
                    bool _out980;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out981;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out978, out _out979, out _out980, out _out981);
                    _2186_recursiveGen = _out978;
                    _2187_recOwned = _out979;
                    _2188_recErased = _out980;
                    _2189_recIdents = _out981;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2186_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2187_recOwned;
                    isErased = _2188_recErased;
                    readIdents = _2189_recIdents;
                  }
                } else if (_source100.is_Array) {
                  DAST._IType _2190___mcc_h877 = _source100.dtor_element;
                  BigInteger _2191___mcc_h878 = _source100.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2192_recursiveGen;
                    bool _2193_recOwned;
                    bool _2194_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2195_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out982;
                    bool _out983;
                    bool _out984;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out985;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out982, out _out983, out _out984, out _out985);
                    _2192_recursiveGen = _out982;
                    _2193_recOwned = _out983;
                    _2194_recErased = _out984;
                    _2195_recIdents = _out985;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2192_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2193_recOwned;
                    isErased = _2194_recErased;
                    readIdents = _2195_recIdents;
                  }
                } else if (_source100.is_Seq) {
                  DAST._IType _2196___mcc_h881 = _source100.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2197_recursiveGen;
                    bool _2198_recOwned;
                    bool _2199_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2200_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out986;
                    bool _out987;
                    bool _out988;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out989;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out986, out _out987, out _out988, out _out989);
                    _2197_recursiveGen = _out986;
                    _2198_recOwned = _out987;
                    _2199_recErased = _out988;
                    _2200_recIdents = _out989;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2197_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2198_recOwned;
                    isErased = _2199_recErased;
                    readIdents = _2200_recIdents;
                  }
                } else if (_source100.is_Set) {
                  DAST._IType _2201___mcc_h883 = _source100.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2202_recursiveGen;
                    bool _2203_recOwned;
                    bool _2204_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2205_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out990;
                    bool _out991;
                    bool _out992;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out993;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out990, out _out991, out _out992, out _out993);
                    _2202_recursiveGen = _out990;
                    _2203_recOwned = _out991;
                    _2204_recErased = _out992;
                    _2205_recIdents = _out993;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2202_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2203_recOwned;
                    isErased = _2204_recErased;
                    readIdents = _2205_recIdents;
                  }
                } else if (_source100.is_Multiset) {
                  DAST._IType _2206___mcc_h885 = _source100.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2207_recursiveGen;
                    bool _2208_recOwned;
                    bool _2209_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2210_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out994;
                    bool _out995;
                    bool _out996;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out997;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out994, out _out995, out _out996, out _out997);
                    _2207_recursiveGen = _out994;
                    _2208_recOwned = _out995;
                    _2209_recErased = _out996;
                    _2210_recIdents = _out997;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2207_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2208_recOwned;
                    isErased = _2209_recErased;
                    readIdents = _2210_recIdents;
                  }
                } else if (_source100.is_Map) {
                  DAST._IType _2211___mcc_h887 = _source100.dtor_key;
                  DAST._IType _2212___mcc_h888 = _source100.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2213_recursiveGen;
                    bool _2214_recOwned;
                    bool _2215_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2216_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out998;
                    bool _out999;
                    bool _out1000;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1001;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out998, out _out999, out _out1000, out _out1001);
                    _2213_recursiveGen = _out998;
                    _2214_recOwned = _out999;
                    _2215_recErased = _out1000;
                    _2216_recIdents = _out1001;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2213_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2214_recOwned;
                    isErased = _2215_recErased;
                    readIdents = _2216_recIdents;
                  }
                } else if (_source100.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2217___mcc_h891 = _source100.dtor_args;
                  DAST._IType _2218___mcc_h892 = _source100.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2219_recursiveGen;
                    bool _2220_recOwned;
                    bool _2221_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2222_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1002;
                    bool _out1003;
                    bool _out1004;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1005;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1002, out _out1003, out _out1004, out _out1005);
                    _2219_recursiveGen = _out1002;
                    _2220_recOwned = _out1003;
                    _2221_recErased = _out1004;
                    _2222_recIdents = _out1005;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2219_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2220_recOwned;
                    isErased = _2221_recErased;
                    readIdents = _2222_recIdents;
                  }
                } else if (_source100.is_Primitive) {
                  DAST._IPrimitive _2223___mcc_h895 = _source100.dtor_Primitive_a0;
                  DAST._IPrimitive _source102 = _2223___mcc_h895;
                  if (_source102.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2224_recursiveGen;
                      bool _2225_recOwned;
                      bool _2226_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2227_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1006;
                      bool _out1007;
                      bool _out1008;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1009;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1006, out _out1007, out _out1008, out _out1009);
                      _2224_recursiveGen = _out1006;
                      _2225_recOwned = _out1007;
                      _2226_recErased = _out1008;
                      _2227_recIdents = _out1009;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2224_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2225_recOwned;
                      isErased = _2226_recErased;
                      readIdents = _2227_recIdents;
                    }
                  } else if (_source102.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2228_recursiveGen;
                      bool _2229___v46;
                      bool _2230___v47;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2231_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1010;
                      bool _out1011;
                      bool _out1012;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1013;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, true, out _out1010, out _out1011, out _out1012, out _out1013);
                      _2228_recursiveGen = _out1010;
                      _2229___v46 = _out1011;
                      _2230___v47 = _out1012;
                      _2231_recIdents = _out1013;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), _2228_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2231_recIdents;
                    }
                  } else if (_source102.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2232_recursiveGen;
                      bool _2233_recOwned;
                      bool _2234_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2235_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1014;
                      bool _out1015;
                      bool _out1016;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1017;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1014, out _out1015, out _out1016, out _out1017);
                      _2232_recursiveGen = _out1014;
                      _2233_recOwned = _out1015;
                      _2234_recErased = _out1016;
                      _2235_recIdents = _out1017;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2232_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2233_recOwned;
                      isErased = _2234_recErased;
                      readIdents = _2235_recIdents;
                    }
                  } else if (_source102.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2236_recursiveGen;
                      bool _2237_recOwned;
                      bool _2238_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2239_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1018;
                      bool _out1019;
                      bool _out1020;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1021;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1018, out _out1019, out _out1020, out _out1021);
                      _2236_recursiveGen = _out1018;
                      _2237_recOwned = _out1019;
                      _2238_recErased = _out1020;
                      _2239_recIdents = _out1021;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2236_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2237_recOwned;
                      isErased = _2238_recErased;
                      readIdents = _2239_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2240_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1022;
                      _out1022 = DCOMP.COMP.GenType(_1242_toTpe, true, false);
                      _2240_rhsType = _out1022;
                      Dafny.ISequence<Dafny.Rune> _2241_recursiveGen;
                      bool _2242___v56;
                      bool _2243___v57;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2244_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1023;
                      bool _out1024;
                      bool _out1025;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1026;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, true, out _out1023, out _out1024, out _out1025, out _out1026);
                      _2241_recursiveGen = _out1023;
                      _2242___v56 = _out1024;
                      _2243___v57 = _out1025;
                      _2244_recIdents = _out1026;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), _2241_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2244_recIdents;
                    }
                  }
                } else if (_source100.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2245___mcc_h897 = _source100.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2246_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out1027;
                    _out1027 = DCOMP.COMP.GenType(_1242_toTpe, true, false);
                    _2246_rhsType = _out1027;
                    Dafny.ISequence<Dafny.Rune> _2247_recursiveGen;
                    bool _2248___v51;
                    bool _2249___v52;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2250_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1028;
                    bool _out1029;
                    bool _out1030;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1031;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, true, out _out1028, out _out1029, out _out1030, out _out1031);
                    _2247_recursiveGen = _out1028;
                    _2248___v51 = _out1029;
                    _2249___v52 = _out1030;
                    _2250_recIdents = _out1031;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2246_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), _2247_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _2250_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2251___mcc_h899 = _source100.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2252_recursiveGen;
                    bool _2253_recOwned;
                    bool _2254_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2255_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1032;
                    bool _out1033;
                    bool _out1034;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1035;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1032, out _out1033, out _out1034, out _out1035);
                    _2252_recursiveGen = _out1032;
                    _2253_recOwned = _out1033;
                    _2254_recErased = _out1034;
                    _2255_recIdents = _out1035;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2252_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2253_recOwned;
                    isErased = _2254_recErased;
                    readIdents = _2255_recIdents;
                  }
                }
              } else if (_source99.is_Real) {
                DAST._IType _source103 = _1250___mcc_h306;
                if (_source103.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2256___mcc_h901 = _source103.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2257___mcc_h902 = _source103.dtor_typeArgs;
                  DAST._IResolvedType _2258___mcc_h903 = _source103.dtor_resolved;
                  DAST._IResolvedType _source104 = _2258___mcc_h903;
                  if (_source104.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2259___mcc_h907 = _source104.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2260_recursiveGen;
                      bool _2261_recOwned;
                      bool _2262_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2263_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1036;
                      bool _out1037;
                      bool _out1038;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1039;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1036, out _out1037, out _out1038, out _out1039);
                      _2260_recursiveGen = _out1036;
                      _2261_recOwned = _out1037;
                      _2262_recErased = _out1038;
                      _2263_recIdents = _out1039;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2260_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2261_recOwned;
                      isErased = _2262_recErased;
                      readIdents = _2263_recIdents;
                    }
                  } else if (_source104.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2264___mcc_h909 = _source104.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2265_recursiveGen;
                      bool _2266_recOwned;
                      bool _2267_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2268_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1040;
                      bool _out1041;
                      bool _out1042;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1043;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1040, out _out1041, out _out1042, out _out1043);
                      _2265_recursiveGen = _out1040;
                      _2266_recOwned = _out1041;
                      _2267_recErased = _out1042;
                      _2268_recIdents = _out1043;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2265_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2266_recOwned;
                      isErased = _2267_recErased;
                      readIdents = _2268_recIdents;
                    }
                  } else {
                    DAST._IType _2269___mcc_h911 = _source104.dtor_Newtype_a0;
                    DAST._IType _2270_b = _2269___mcc_h911;
                    {
                      if (object.Equals(_1243_fromTpe, _2270_b)) {
                        Dafny.ISequence<Dafny.Rune> _2271_recursiveGen;
                        bool _2272_recOwned;
                        bool _2273_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2274_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1044;
                        bool _out1045;
                        bool _out1046;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1047;
                        DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1044, out _out1045, out _out1046, out _out1047);
                        _2271_recursiveGen = _out1044;
                        _2272_recOwned = _out1045;
                        _2273_recErased = _out1046;
                        _2274_recIdents = _out1047;
                        Dafny.ISequence<Dafny.Rune> _2275_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1048;
                        _out1048 = DCOMP.COMP.GenType(_1242_toTpe, true, false);
                        _2275_rhsType = _out1048;
                        Dafny.ISequence<Dafny.Rune> _2276_uneraseFn;
                        _2276_uneraseFn = ((_2272_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2275_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2276_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2271_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2272_recOwned;
                        isErased = false;
                        readIdents = _2274_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1049;
                        bool _out1050;
                        bool _out1051;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1052;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1244_expr, _1243_fromTpe, _2270_b), _2270_b, _1242_toTpe), selfIdent, @params, mustOwn, out _out1049, out _out1050, out _out1051, out _out1052);
                        s = _out1049;
                        isOwned = _out1050;
                        isErased = _out1051;
                        readIdents = _out1052;
                      }
                    }
                  }
                } else if (_source103.is_Nullable) {
                  DAST._IType _2277___mcc_h913 = _source103.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2278_recursiveGen;
                    bool _2279_recOwned;
                    bool _2280_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2281_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1053;
                    bool _out1054;
                    bool _out1055;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1056;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1053, out _out1054, out _out1055, out _out1056);
                    _2278_recursiveGen = _out1053;
                    _2279_recOwned = _out1054;
                    _2280_recErased = _out1055;
                    _2281_recIdents = _out1056;
                    if (!(_2279_recOwned)) {
                      _2278_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2278_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2278_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2280_recErased;
                    readIdents = _2281_recIdents;
                  }
                } else if (_source103.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2282___mcc_h915 = _source103.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2283_recursiveGen;
                    bool _2284_recOwned;
                    bool _2285_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2286_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1057;
                    bool _out1058;
                    bool _out1059;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1060;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1057, out _out1058, out _out1059, out _out1060);
                    _2283_recursiveGen = _out1057;
                    _2284_recOwned = _out1058;
                    _2285_recErased = _out1059;
                    _2286_recIdents = _out1060;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2283_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2284_recOwned;
                    isErased = _2285_recErased;
                    readIdents = _2286_recIdents;
                  }
                } else if (_source103.is_Array) {
                  DAST._IType _2287___mcc_h917 = _source103.dtor_element;
                  BigInteger _2288___mcc_h918 = _source103.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2289_recursiveGen;
                    bool _2290_recOwned;
                    bool _2291_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2292_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1061;
                    bool _out1062;
                    bool _out1063;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1064;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1061, out _out1062, out _out1063, out _out1064);
                    _2289_recursiveGen = _out1061;
                    _2290_recOwned = _out1062;
                    _2291_recErased = _out1063;
                    _2292_recIdents = _out1064;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2289_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2290_recOwned;
                    isErased = _2291_recErased;
                    readIdents = _2292_recIdents;
                  }
                } else if (_source103.is_Seq) {
                  DAST._IType _2293___mcc_h921 = _source103.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2294_recursiveGen;
                    bool _2295_recOwned;
                    bool _2296_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2297_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1065;
                    bool _out1066;
                    bool _out1067;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1068;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1065, out _out1066, out _out1067, out _out1068);
                    _2294_recursiveGen = _out1065;
                    _2295_recOwned = _out1066;
                    _2296_recErased = _out1067;
                    _2297_recIdents = _out1068;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2294_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2295_recOwned;
                    isErased = _2296_recErased;
                    readIdents = _2297_recIdents;
                  }
                } else if (_source103.is_Set) {
                  DAST._IType _2298___mcc_h923 = _source103.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2299_recursiveGen;
                    bool _2300_recOwned;
                    bool _2301_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2302_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1069;
                    bool _out1070;
                    bool _out1071;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1072;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1069, out _out1070, out _out1071, out _out1072);
                    _2299_recursiveGen = _out1069;
                    _2300_recOwned = _out1070;
                    _2301_recErased = _out1071;
                    _2302_recIdents = _out1072;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2299_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2300_recOwned;
                    isErased = _2301_recErased;
                    readIdents = _2302_recIdents;
                  }
                } else if (_source103.is_Multiset) {
                  DAST._IType _2303___mcc_h925 = _source103.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2304_recursiveGen;
                    bool _2305_recOwned;
                    bool _2306_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2307_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1073;
                    bool _out1074;
                    bool _out1075;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1076;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1073, out _out1074, out _out1075, out _out1076);
                    _2304_recursiveGen = _out1073;
                    _2305_recOwned = _out1074;
                    _2306_recErased = _out1075;
                    _2307_recIdents = _out1076;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2304_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2305_recOwned;
                    isErased = _2306_recErased;
                    readIdents = _2307_recIdents;
                  }
                } else if (_source103.is_Map) {
                  DAST._IType _2308___mcc_h927 = _source103.dtor_key;
                  DAST._IType _2309___mcc_h928 = _source103.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2310_recursiveGen;
                    bool _2311_recOwned;
                    bool _2312_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2313_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1077;
                    bool _out1078;
                    bool _out1079;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1080;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1077, out _out1078, out _out1079, out _out1080);
                    _2310_recursiveGen = _out1077;
                    _2311_recOwned = _out1078;
                    _2312_recErased = _out1079;
                    _2313_recIdents = _out1080;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2310_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2311_recOwned;
                    isErased = _2312_recErased;
                    readIdents = _2313_recIdents;
                  }
                } else if (_source103.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2314___mcc_h931 = _source103.dtor_args;
                  DAST._IType _2315___mcc_h932 = _source103.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2316_recursiveGen;
                    bool _2317_recOwned;
                    bool _2318_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2319_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1081;
                    bool _out1082;
                    bool _out1083;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1084;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1081, out _out1082, out _out1083, out _out1084);
                    _2316_recursiveGen = _out1081;
                    _2317_recOwned = _out1082;
                    _2318_recErased = _out1083;
                    _2319_recIdents = _out1084;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2316_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2317_recOwned;
                    isErased = _2318_recErased;
                    readIdents = _2319_recIdents;
                  }
                } else if (_source103.is_Primitive) {
                  DAST._IPrimitive _2320___mcc_h935 = _source103.dtor_Primitive_a0;
                  DAST._IPrimitive _source105 = _2320___mcc_h935;
                  if (_source105.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2321_recursiveGen;
                      bool _2322___v48;
                      bool _2323___v49;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2324_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1085;
                      bool _out1086;
                      bool _out1087;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1088;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, false, out _out1085, out _out1086, out _out1087, out _out1088);
                      _2321_recursiveGen = _out1085;
                      _2322___v48 = _out1086;
                      _2323___v49 = _out1087;
                      _2324_recIdents = _out1088;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), _2321_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2324_recIdents;
                    }
                  } else if (_source105.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2325_recursiveGen;
                      bool _2326_recOwned;
                      bool _2327_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2328_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1089;
                      bool _out1090;
                      bool _out1091;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1092;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1089, out _out1090, out _out1091, out _out1092);
                      _2325_recursiveGen = _out1089;
                      _2326_recOwned = _out1090;
                      _2327_recErased = _out1091;
                      _2328_recIdents = _out1092;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2325_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2326_recOwned;
                      isErased = _2327_recErased;
                      readIdents = _2328_recIdents;
                    }
                  } else if (_source105.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2329_recursiveGen;
                      bool _2330_recOwned;
                      bool _2331_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2332_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1093;
                      bool _out1094;
                      bool _out1095;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1096;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1093, out _out1094, out _out1095, out _out1096);
                      _2329_recursiveGen = _out1093;
                      _2330_recOwned = _out1094;
                      _2331_recErased = _out1095;
                      _2332_recIdents = _out1096;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2329_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2330_recOwned;
                      isErased = _2331_recErased;
                      readIdents = _2332_recIdents;
                    }
                  } else if (_source105.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2333_recursiveGen;
                      bool _2334_recOwned;
                      bool _2335_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2336_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1097;
                      bool _out1098;
                      bool _out1099;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1100;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1097, out _out1098, out _out1099, out _out1100);
                      _2333_recursiveGen = _out1097;
                      _2334_recOwned = _out1098;
                      _2335_recErased = _out1099;
                      _2336_recIdents = _out1100;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2333_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2334_recOwned;
                      isErased = _2335_recErased;
                      readIdents = _2336_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2337_recursiveGen;
                      bool _2338_recOwned;
                      bool _2339_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2340_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1101;
                      bool _out1102;
                      bool _out1103;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1104;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1101, out _out1102, out _out1103, out _out1104);
                      _2337_recursiveGen = _out1101;
                      _2338_recOwned = _out1102;
                      _2339_recErased = _out1103;
                      _2340_recIdents = _out1104;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2337_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2338_recOwned;
                      isErased = _2339_recErased;
                      readIdents = _2340_recIdents;
                    }
                  }
                } else if (_source103.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2341___mcc_h937 = _source103.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2342_recursiveGen;
                    bool _2343_recOwned;
                    bool _2344_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2345_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1105;
                    bool _out1106;
                    bool _out1107;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1108;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1105, out _out1106, out _out1107, out _out1108);
                    _2342_recursiveGen = _out1105;
                    _2343_recOwned = _out1106;
                    _2344_recErased = _out1107;
                    _2345_recIdents = _out1108;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2342_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2343_recOwned;
                    isErased = _2344_recErased;
                    readIdents = _2345_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2346___mcc_h939 = _source103.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2347_recursiveGen;
                    bool _2348_recOwned;
                    bool _2349_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2350_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1109;
                    bool _out1110;
                    bool _out1111;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1112;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1109, out _out1110, out _out1111, out _out1112);
                    _2347_recursiveGen = _out1109;
                    _2348_recOwned = _out1110;
                    _2349_recErased = _out1111;
                    _2350_recIdents = _out1112;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2347_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2348_recOwned;
                    isErased = _2349_recErased;
                    readIdents = _2350_recIdents;
                  }
                }
              } else if (_source99.is_String) {
                DAST._IType _source106 = _1250___mcc_h306;
                if (_source106.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2351___mcc_h941 = _source106.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2352___mcc_h942 = _source106.dtor_typeArgs;
                  DAST._IResolvedType _2353___mcc_h943 = _source106.dtor_resolved;
                  DAST._IResolvedType _source107 = _2353___mcc_h943;
                  if (_source107.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2354___mcc_h947 = _source107.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2355_recursiveGen;
                      bool _2356_recOwned;
                      bool _2357_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2358_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1113;
                      bool _out1114;
                      bool _out1115;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1116;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1113, out _out1114, out _out1115, out _out1116);
                      _2355_recursiveGen = _out1113;
                      _2356_recOwned = _out1114;
                      _2357_recErased = _out1115;
                      _2358_recIdents = _out1116;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2355_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2356_recOwned;
                      isErased = _2357_recErased;
                      readIdents = _2358_recIdents;
                    }
                  } else if (_source107.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2359___mcc_h949 = _source107.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2360_recursiveGen;
                      bool _2361_recOwned;
                      bool _2362_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2363_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1117;
                      bool _out1118;
                      bool _out1119;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1120;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1117, out _out1118, out _out1119, out _out1120);
                      _2360_recursiveGen = _out1117;
                      _2361_recOwned = _out1118;
                      _2362_recErased = _out1119;
                      _2363_recIdents = _out1120;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2360_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2361_recOwned;
                      isErased = _2362_recErased;
                      readIdents = _2363_recIdents;
                    }
                  } else {
                    DAST._IType _2364___mcc_h951 = _source107.dtor_Newtype_a0;
                    DAST._IType _2365_b = _2364___mcc_h951;
                    {
                      if (object.Equals(_1243_fromTpe, _2365_b)) {
                        Dafny.ISequence<Dafny.Rune> _2366_recursiveGen;
                        bool _2367_recOwned;
                        bool _2368_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2369_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1121;
                        bool _out1122;
                        bool _out1123;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1124;
                        DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1121, out _out1122, out _out1123, out _out1124);
                        _2366_recursiveGen = _out1121;
                        _2367_recOwned = _out1122;
                        _2368_recErased = _out1123;
                        _2369_recIdents = _out1124;
                        Dafny.ISequence<Dafny.Rune> _2370_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1125;
                        _out1125 = DCOMP.COMP.GenType(_1242_toTpe, true, false);
                        _2370_rhsType = _out1125;
                        Dafny.ISequence<Dafny.Rune> _2371_uneraseFn;
                        _2371_uneraseFn = ((_2367_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2370_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2371_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2366_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2367_recOwned;
                        isErased = false;
                        readIdents = _2369_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1126;
                        bool _out1127;
                        bool _out1128;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1129;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1244_expr, _1243_fromTpe, _2365_b), _2365_b, _1242_toTpe), selfIdent, @params, mustOwn, out _out1126, out _out1127, out _out1128, out _out1129);
                        s = _out1126;
                        isOwned = _out1127;
                        isErased = _out1128;
                        readIdents = _out1129;
                      }
                    }
                  }
                } else if (_source106.is_Nullable) {
                  DAST._IType _2372___mcc_h953 = _source106.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2373_recursiveGen;
                    bool _2374_recOwned;
                    bool _2375_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2376_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1130;
                    bool _out1131;
                    bool _out1132;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1133;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1130, out _out1131, out _out1132, out _out1133);
                    _2373_recursiveGen = _out1130;
                    _2374_recOwned = _out1131;
                    _2375_recErased = _out1132;
                    _2376_recIdents = _out1133;
                    if (!(_2374_recOwned)) {
                      _2373_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2373_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2373_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2375_recErased;
                    readIdents = _2376_recIdents;
                  }
                } else if (_source106.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2377___mcc_h955 = _source106.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2378_recursiveGen;
                    bool _2379_recOwned;
                    bool _2380_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2381_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1134;
                    bool _out1135;
                    bool _out1136;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1137;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1134, out _out1135, out _out1136, out _out1137);
                    _2378_recursiveGen = _out1134;
                    _2379_recOwned = _out1135;
                    _2380_recErased = _out1136;
                    _2381_recIdents = _out1137;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2378_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2379_recOwned;
                    isErased = _2380_recErased;
                    readIdents = _2381_recIdents;
                  }
                } else if (_source106.is_Array) {
                  DAST._IType _2382___mcc_h957 = _source106.dtor_element;
                  BigInteger _2383___mcc_h958 = _source106.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2384_recursiveGen;
                    bool _2385_recOwned;
                    bool _2386_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2387_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1138;
                    bool _out1139;
                    bool _out1140;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1141;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1138, out _out1139, out _out1140, out _out1141);
                    _2384_recursiveGen = _out1138;
                    _2385_recOwned = _out1139;
                    _2386_recErased = _out1140;
                    _2387_recIdents = _out1141;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2384_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2385_recOwned;
                    isErased = _2386_recErased;
                    readIdents = _2387_recIdents;
                  }
                } else if (_source106.is_Seq) {
                  DAST._IType _2388___mcc_h961 = _source106.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2389_recursiveGen;
                    bool _2390_recOwned;
                    bool _2391_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2392_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1142;
                    bool _out1143;
                    bool _out1144;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1145;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1142, out _out1143, out _out1144, out _out1145);
                    _2389_recursiveGen = _out1142;
                    _2390_recOwned = _out1143;
                    _2391_recErased = _out1144;
                    _2392_recIdents = _out1145;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2389_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2390_recOwned;
                    isErased = _2391_recErased;
                    readIdents = _2392_recIdents;
                  }
                } else if (_source106.is_Set) {
                  DAST._IType _2393___mcc_h963 = _source106.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2394_recursiveGen;
                    bool _2395_recOwned;
                    bool _2396_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2397_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1146;
                    bool _out1147;
                    bool _out1148;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1149;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1146, out _out1147, out _out1148, out _out1149);
                    _2394_recursiveGen = _out1146;
                    _2395_recOwned = _out1147;
                    _2396_recErased = _out1148;
                    _2397_recIdents = _out1149;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2394_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2395_recOwned;
                    isErased = _2396_recErased;
                    readIdents = _2397_recIdents;
                  }
                } else if (_source106.is_Multiset) {
                  DAST._IType _2398___mcc_h965 = _source106.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2399_recursiveGen;
                    bool _2400_recOwned;
                    bool _2401_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2402_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1150;
                    bool _out1151;
                    bool _out1152;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1153;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1150, out _out1151, out _out1152, out _out1153);
                    _2399_recursiveGen = _out1150;
                    _2400_recOwned = _out1151;
                    _2401_recErased = _out1152;
                    _2402_recIdents = _out1153;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2399_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2400_recOwned;
                    isErased = _2401_recErased;
                    readIdents = _2402_recIdents;
                  }
                } else if (_source106.is_Map) {
                  DAST._IType _2403___mcc_h967 = _source106.dtor_key;
                  DAST._IType _2404___mcc_h968 = _source106.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2405_recursiveGen;
                    bool _2406_recOwned;
                    bool _2407_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2408_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1154;
                    bool _out1155;
                    bool _out1156;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1157;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1154, out _out1155, out _out1156, out _out1157);
                    _2405_recursiveGen = _out1154;
                    _2406_recOwned = _out1155;
                    _2407_recErased = _out1156;
                    _2408_recIdents = _out1157;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2405_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2406_recOwned;
                    isErased = _2407_recErased;
                    readIdents = _2408_recIdents;
                  }
                } else if (_source106.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2409___mcc_h971 = _source106.dtor_args;
                  DAST._IType _2410___mcc_h972 = _source106.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2411_recursiveGen;
                    bool _2412_recOwned;
                    bool _2413_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2414_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1158;
                    bool _out1159;
                    bool _out1160;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1161;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1158, out _out1159, out _out1160, out _out1161);
                    _2411_recursiveGen = _out1158;
                    _2412_recOwned = _out1159;
                    _2413_recErased = _out1160;
                    _2414_recIdents = _out1161;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2411_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2412_recOwned;
                    isErased = _2413_recErased;
                    readIdents = _2414_recIdents;
                  }
                } else if (_source106.is_Primitive) {
                  DAST._IPrimitive _2415___mcc_h975 = _source106.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2416_recursiveGen;
                    bool _2417_recOwned;
                    bool _2418_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2419_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1162;
                    bool _out1163;
                    bool _out1164;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1165;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1162, out _out1163, out _out1164, out _out1165);
                    _2416_recursiveGen = _out1162;
                    _2417_recOwned = _out1163;
                    _2418_recErased = _out1164;
                    _2419_recIdents = _out1165;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2416_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2417_recOwned;
                    isErased = _2418_recErased;
                    readIdents = _2419_recIdents;
                  }
                } else if (_source106.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2420___mcc_h977 = _source106.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2421_recursiveGen;
                    bool _2422_recOwned;
                    bool _2423_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2424_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1166;
                    bool _out1167;
                    bool _out1168;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1169;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1166, out _out1167, out _out1168, out _out1169);
                    _2421_recursiveGen = _out1166;
                    _2422_recOwned = _out1167;
                    _2423_recErased = _out1168;
                    _2424_recIdents = _out1169;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2421_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2422_recOwned;
                    isErased = _2423_recErased;
                    readIdents = _2424_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2425___mcc_h979 = _source106.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2426_recursiveGen;
                    bool _2427_recOwned;
                    bool _2428_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2429_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1170;
                    bool _out1171;
                    bool _out1172;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1173;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1170, out _out1171, out _out1172, out _out1173);
                    _2426_recursiveGen = _out1170;
                    _2427_recOwned = _out1171;
                    _2428_recErased = _out1172;
                    _2429_recIdents = _out1173;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2426_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2427_recOwned;
                    isErased = _2428_recErased;
                    readIdents = _2429_recIdents;
                  }
                }
              } else if (_source99.is_Bool) {
                DAST._IType _source108 = _1250___mcc_h306;
                if (_source108.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2430___mcc_h981 = _source108.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2431___mcc_h982 = _source108.dtor_typeArgs;
                  DAST._IResolvedType _2432___mcc_h983 = _source108.dtor_resolved;
                  DAST._IResolvedType _source109 = _2432___mcc_h983;
                  if (_source109.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2433___mcc_h987 = _source109.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2434_recursiveGen;
                      bool _2435_recOwned;
                      bool _2436_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2437_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1174;
                      bool _out1175;
                      bool _out1176;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1177;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1174, out _out1175, out _out1176, out _out1177);
                      _2434_recursiveGen = _out1174;
                      _2435_recOwned = _out1175;
                      _2436_recErased = _out1176;
                      _2437_recIdents = _out1177;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2434_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2435_recOwned;
                      isErased = _2436_recErased;
                      readIdents = _2437_recIdents;
                    }
                  } else if (_source109.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2438___mcc_h989 = _source109.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2439_recursiveGen;
                      bool _2440_recOwned;
                      bool _2441_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2442_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1178;
                      bool _out1179;
                      bool _out1180;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1181;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1178, out _out1179, out _out1180, out _out1181);
                      _2439_recursiveGen = _out1178;
                      _2440_recOwned = _out1179;
                      _2441_recErased = _out1180;
                      _2442_recIdents = _out1181;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2439_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2440_recOwned;
                      isErased = _2441_recErased;
                      readIdents = _2442_recIdents;
                    }
                  } else {
                    DAST._IType _2443___mcc_h991 = _source109.dtor_Newtype_a0;
                    DAST._IType _2444_b = _2443___mcc_h991;
                    {
                      if (object.Equals(_1243_fromTpe, _2444_b)) {
                        Dafny.ISequence<Dafny.Rune> _2445_recursiveGen;
                        bool _2446_recOwned;
                        bool _2447_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2448_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1182;
                        bool _out1183;
                        bool _out1184;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1185;
                        DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1182, out _out1183, out _out1184, out _out1185);
                        _2445_recursiveGen = _out1182;
                        _2446_recOwned = _out1183;
                        _2447_recErased = _out1184;
                        _2448_recIdents = _out1185;
                        Dafny.ISequence<Dafny.Rune> _2449_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1186;
                        _out1186 = DCOMP.COMP.GenType(_1242_toTpe, true, false);
                        _2449_rhsType = _out1186;
                        Dafny.ISequence<Dafny.Rune> _2450_uneraseFn;
                        _2450_uneraseFn = ((_2446_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2449_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2450_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2445_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2446_recOwned;
                        isErased = false;
                        readIdents = _2448_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1187;
                        bool _out1188;
                        bool _out1189;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1190;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1244_expr, _1243_fromTpe, _2444_b), _2444_b, _1242_toTpe), selfIdent, @params, mustOwn, out _out1187, out _out1188, out _out1189, out _out1190);
                        s = _out1187;
                        isOwned = _out1188;
                        isErased = _out1189;
                        readIdents = _out1190;
                      }
                    }
                  }
                } else if (_source108.is_Nullable) {
                  DAST._IType _2451___mcc_h993 = _source108.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2452_recursiveGen;
                    bool _2453_recOwned;
                    bool _2454_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2455_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1191;
                    bool _out1192;
                    bool _out1193;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1194;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1191, out _out1192, out _out1193, out _out1194);
                    _2452_recursiveGen = _out1191;
                    _2453_recOwned = _out1192;
                    _2454_recErased = _out1193;
                    _2455_recIdents = _out1194;
                    if (!(_2453_recOwned)) {
                      _2452_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2452_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2452_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2454_recErased;
                    readIdents = _2455_recIdents;
                  }
                } else if (_source108.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2456___mcc_h995 = _source108.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2457_recursiveGen;
                    bool _2458_recOwned;
                    bool _2459_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2460_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1195;
                    bool _out1196;
                    bool _out1197;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1198;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1195, out _out1196, out _out1197, out _out1198);
                    _2457_recursiveGen = _out1195;
                    _2458_recOwned = _out1196;
                    _2459_recErased = _out1197;
                    _2460_recIdents = _out1198;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2457_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2458_recOwned;
                    isErased = _2459_recErased;
                    readIdents = _2460_recIdents;
                  }
                } else if (_source108.is_Array) {
                  DAST._IType _2461___mcc_h997 = _source108.dtor_element;
                  BigInteger _2462___mcc_h998 = _source108.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2463_recursiveGen;
                    bool _2464_recOwned;
                    bool _2465_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2466_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1199;
                    bool _out1200;
                    bool _out1201;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1202;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1199, out _out1200, out _out1201, out _out1202);
                    _2463_recursiveGen = _out1199;
                    _2464_recOwned = _out1200;
                    _2465_recErased = _out1201;
                    _2466_recIdents = _out1202;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2463_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2464_recOwned;
                    isErased = _2465_recErased;
                    readIdents = _2466_recIdents;
                  }
                } else if (_source108.is_Seq) {
                  DAST._IType _2467___mcc_h1001 = _source108.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2468_recursiveGen;
                    bool _2469_recOwned;
                    bool _2470_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2471_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1203;
                    bool _out1204;
                    bool _out1205;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1206;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1203, out _out1204, out _out1205, out _out1206);
                    _2468_recursiveGen = _out1203;
                    _2469_recOwned = _out1204;
                    _2470_recErased = _out1205;
                    _2471_recIdents = _out1206;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2468_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2469_recOwned;
                    isErased = _2470_recErased;
                    readIdents = _2471_recIdents;
                  }
                } else if (_source108.is_Set) {
                  DAST._IType _2472___mcc_h1003 = _source108.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2473_recursiveGen;
                    bool _2474_recOwned;
                    bool _2475_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2476_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1207;
                    bool _out1208;
                    bool _out1209;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1210;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1207, out _out1208, out _out1209, out _out1210);
                    _2473_recursiveGen = _out1207;
                    _2474_recOwned = _out1208;
                    _2475_recErased = _out1209;
                    _2476_recIdents = _out1210;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2473_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2474_recOwned;
                    isErased = _2475_recErased;
                    readIdents = _2476_recIdents;
                  }
                } else if (_source108.is_Multiset) {
                  DAST._IType _2477___mcc_h1005 = _source108.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2478_recursiveGen;
                    bool _2479_recOwned;
                    bool _2480_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2481_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1211;
                    bool _out1212;
                    bool _out1213;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1214;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1211, out _out1212, out _out1213, out _out1214);
                    _2478_recursiveGen = _out1211;
                    _2479_recOwned = _out1212;
                    _2480_recErased = _out1213;
                    _2481_recIdents = _out1214;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2478_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2479_recOwned;
                    isErased = _2480_recErased;
                    readIdents = _2481_recIdents;
                  }
                } else if (_source108.is_Map) {
                  DAST._IType _2482___mcc_h1007 = _source108.dtor_key;
                  DAST._IType _2483___mcc_h1008 = _source108.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2484_recursiveGen;
                    bool _2485_recOwned;
                    bool _2486_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2487_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1215;
                    bool _out1216;
                    bool _out1217;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1218;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1215, out _out1216, out _out1217, out _out1218);
                    _2484_recursiveGen = _out1215;
                    _2485_recOwned = _out1216;
                    _2486_recErased = _out1217;
                    _2487_recIdents = _out1218;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2484_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2485_recOwned;
                    isErased = _2486_recErased;
                    readIdents = _2487_recIdents;
                  }
                } else if (_source108.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2488___mcc_h1011 = _source108.dtor_args;
                  DAST._IType _2489___mcc_h1012 = _source108.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2490_recursiveGen;
                    bool _2491_recOwned;
                    bool _2492_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2493_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1219;
                    bool _out1220;
                    bool _out1221;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1222;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1219, out _out1220, out _out1221, out _out1222);
                    _2490_recursiveGen = _out1219;
                    _2491_recOwned = _out1220;
                    _2492_recErased = _out1221;
                    _2493_recIdents = _out1222;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2490_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2491_recOwned;
                    isErased = _2492_recErased;
                    readIdents = _2493_recIdents;
                  }
                } else if (_source108.is_Primitive) {
                  DAST._IPrimitive _2494___mcc_h1015 = _source108.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2495_recursiveGen;
                    bool _2496_recOwned;
                    bool _2497_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2498_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1223;
                    bool _out1224;
                    bool _out1225;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1226;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1223, out _out1224, out _out1225, out _out1226);
                    _2495_recursiveGen = _out1223;
                    _2496_recOwned = _out1224;
                    _2497_recErased = _out1225;
                    _2498_recIdents = _out1226;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2495_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2496_recOwned;
                    isErased = _2497_recErased;
                    readIdents = _2498_recIdents;
                  }
                } else if (_source108.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2499___mcc_h1017 = _source108.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2500_recursiveGen;
                    bool _2501_recOwned;
                    bool _2502_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2503_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1227;
                    bool _out1228;
                    bool _out1229;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1230;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1227, out _out1228, out _out1229, out _out1230);
                    _2500_recursiveGen = _out1227;
                    _2501_recOwned = _out1228;
                    _2502_recErased = _out1229;
                    _2503_recIdents = _out1230;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2500_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2501_recOwned;
                    isErased = _2502_recErased;
                    readIdents = _2503_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2504___mcc_h1019 = _source108.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2505_recursiveGen;
                    bool _2506_recOwned;
                    bool _2507_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2508_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1231;
                    bool _out1232;
                    bool _out1233;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1234;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1231, out _out1232, out _out1233, out _out1234);
                    _2505_recursiveGen = _out1231;
                    _2506_recOwned = _out1232;
                    _2507_recErased = _out1233;
                    _2508_recIdents = _out1234;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2505_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2506_recOwned;
                    isErased = _2507_recErased;
                    readIdents = _2508_recIdents;
                  }
                }
              } else {
                DAST._IType _source110 = _1250___mcc_h306;
                if (_source110.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2509___mcc_h1021 = _source110.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2510___mcc_h1022 = _source110.dtor_typeArgs;
                  DAST._IResolvedType _2511___mcc_h1023 = _source110.dtor_resolved;
                  DAST._IResolvedType _source111 = _2511___mcc_h1023;
                  if (_source111.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2512___mcc_h1027 = _source111.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2513_recursiveGen;
                      bool _2514_recOwned;
                      bool _2515_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2516_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1235;
                      bool _out1236;
                      bool _out1237;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1238;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1235, out _out1236, out _out1237, out _out1238);
                      _2513_recursiveGen = _out1235;
                      _2514_recOwned = _out1236;
                      _2515_recErased = _out1237;
                      _2516_recIdents = _out1238;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2513_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2514_recOwned;
                      isErased = _2515_recErased;
                      readIdents = _2516_recIdents;
                    }
                  } else if (_source111.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2517___mcc_h1029 = _source111.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2518_recursiveGen;
                      bool _2519_recOwned;
                      bool _2520_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2521_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1239;
                      bool _out1240;
                      bool _out1241;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1242;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1239, out _out1240, out _out1241, out _out1242);
                      _2518_recursiveGen = _out1239;
                      _2519_recOwned = _out1240;
                      _2520_recErased = _out1241;
                      _2521_recIdents = _out1242;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2518_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2519_recOwned;
                      isErased = _2520_recErased;
                      readIdents = _2521_recIdents;
                    }
                  } else {
                    DAST._IType _2522___mcc_h1031 = _source111.dtor_Newtype_a0;
                    DAST._IType _2523_b = _2522___mcc_h1031;
                    {
                      if (object.Equals(_1243_fromTpe, _2523_b)) {
                        Dafny.ISequence<Dafny.Rune> _2524_recursiveGen;
                        bool _2525_recOwned;
                        bool _2526_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2527_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1243;
                        bool _out1244;
                        bool _out1245;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1246;
                        DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1243, out _out1244, out _out1245, out _out1246);
                        _2524_recursiveGen = _out1243;
                        _2525_recOwned = _out1244;
                        _2526_recErased = _out1245;
                        _2527_recIdents = _out1246;
                        Dafny.ISequence<Dafny.Rune> _2528_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1247;
                        _out1247 = DCOMP.COMP.GenType(_1242_toTpe, true, false);
                        _2528_rhsType = _out1247;
                        Dafny.ISequence<Dafny.Rune> _2529_uneraseFn;
                        _2529_uneraseFn = ((_2525_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2528_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2529_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2524_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2525_recOwned;
                        isErased = false;
                        readIdents = _2527_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1248;
                        bool _out1249;
                        bool _out1250;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1251;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1244_expr, _1243_fromTpe, _2523_b), _2523_b, _1242_toTpe), selfIdent, @params, mustOwn, out _out1248, out _out1249, out _out1250, out _out1251);
                        s = _out1248;
                        isOwned = _out1249;
                        isErased = _out1250;
                        readIdents = _out1251;
                      }
                    }
                  }
                } else if (_source110.is_Nullable) {
                  DAST._IType _2530___mcc_h1033 = _source110.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2531_recursiveGen;
                    bool _2532_recOwned;
                    bool _2533_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2534_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1252;
                    bool _out1253;
                    bool _out1254;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1255;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1252, out _out1253, out _out1254, out _out1255);
                    _2531_recursiveGen = _out1252;
                    _2532_recOwned = _out1253;
                    _2533_recErased = _out1254;
                    _2534_recIdents = _out1255;
                    if (!(_2532_recOwned)) {
                      _2531_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2531_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2531_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2533_recErased;
                    readIdents = _2534_recIdents;
                  }
                } else if (_source110.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2535___mcc_h1035 = _source110.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2536_recursiveGen;
                    bool _2537_recOwned;
                    bool _2538_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2539_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1256;
                    bool _out1257;
                    bool _out1258;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1259;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1256, out _out1257, out _out1258, out _out1259);
                    _2536_recursiveGen = _out1256;
                    _2537_recOwned = _out1257;
                    _2538_recErased = _out1258;
                    _2539_recIdents = _out1259;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2536_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2537_recOwned;
                    isErased = _2538_recErased;
                    readIdents = _2539_recIdents;
                  }
                } else if (_source110.is_Array) {
                  DAST._IType _2540___mcc_h1037 = _source110.dtor_element;
                  BigInteger _2541___mcc_h1038 = _source110.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2542_recursiveGen;
                    bool _2543_recOwned;
                    bool _2544_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2545_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1260;
                    bool _out1261;
                    bool _out1262;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1263;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1260, out _out1261, out _out1262, out _out1263);
                    _2542_recursiveGen = _out1260;
                    _2543_recOwned = _out1261;
                    _2544_recErased = _out1262;
                    _2545_recIdents = _out1263;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2542_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2543_recOwned;
                    isErased = _2544_recErased;
                    readIdents = _2545_recIdents;
                  }
                } else if (_source110.is_Seq) {
                  DAST._IType _2546___mcc_h1041 = _source110.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2547_recursiveGen;
                    bool _2548_recOwned;
                    bool _2549_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2550_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1264;
                    bool _out1265;
                    bool _out1266;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1267;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1264, out _out1265, out _out1266, out _out1267);
                    _2547_recursiveGen = _out1264;
                    _2548_recOwned = _out1265;
                    _2549_recErased = _out1266;
                    _2550_recIdents = _out1267;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2547_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2548_recOwned;
                    isErased = _2549_recErased;
                    readIdents = _2550_recIdents;
                  }
                } else if (_source110.is_Set) {
                  DAST._IType _2551___mcc_h1043 = _source110.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2552_recursiveGen;
                    bool _2553_recOwned;
                    bool _2554_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2555_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1268;
                    bool _out1269;
                    bool _out1270;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1271;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1268, out _out1269, out _out1270, out _out1271);
                    _2552_recursiveGen = _out1268;
                    _2553_recOwned = _out1269;
                    _2554_recErased = _out1270;
                    _2555_recIdents = _out1271;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2552_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2553_recOwned;
                    isErased = _2554_recErased;
                    readIdents = _2555_recIdents;
                  }
                } else if (_source110.is_Multiset) {
                  DAST._IType _2556___mcc_h1045 = _source110.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2557_recursiveGen;
                    bool _2558_recOwned;
                    bool _2559_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2560_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1272;
                    bool _out1273;
                    bool _out1274;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1275;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1272, out _out1273, out _out1274, out _out1275);
                    _2557_recursiveGen = _out1272;
                    _2558_recOwned = _out1273;
                    _2559_recErased = _out1274;
                    _2560_recIdents = _out1275;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2557_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2558_recOwned;
                    isErased = _2559_recErased;
                    readIdents = _2560_recIdents;
                  }
                } else if (_source110.is_Map) {
                  DAST._IType _2561___mcc_h1047 = _source110.dtor_key;
                  DAST._IType _2562___mcc_h1048 = _source110.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2563_recursiveGen;
                    bool _2564_recOwned;
                    bool _2565_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2566_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1276;
                    bool _out1277;
                    bool _out1278;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1279;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1276, out _out1277, out _out1278, out _out1279);
                    _2563_recursiveGen = _out1276;
                    _2564_recOwned = _out1277;
                    _2565_recErased = _out1278;
                    _2566_recIdents = _out1279;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2563_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2564_recOwned;
                    isErased = _2565_recErased;
                    readIdents = _2566_recIdents;
                  }
                } else if (_source110.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2567___mcc_h1051 = _source110.dtor_args;
                  DAST._IType _2568___mcc_h1052 = _source110.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2569_recursiveGen;
                    bool _2570_recOwned;
                    bool _2571_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2572_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1280;
                    bool _out1281;
                    bool _out1282;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1283;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1280, out _out1281, out _out1282, out _out1283);
                    _2569_recursiveGen = _out1280;
                    _2570_recOwned = _out1281;
                    _2571_recErased = _out1282;
                    _2572_recIdents = _out1283;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2569_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2570_recOwned;
                    isErased = _2571_recErased;
                    readIdents = _2572_recIdents;
                  }
                } else if (_source110.is_Primitive) {
                  DAST._IPrimitive _2573___mcc_h1055 = _source110.dtor_Primitive_a0;
                  DAST._IPrimitive _source112 = _2573___mcc_h1055;
                  if (_source112.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2574_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1284;
                      _out1284 = DCOMP.COMP.GenType(_1243_fromTpe, true, false);
                      _2574_rhsType = _out1284;
                      Dafny.ISequence<Dafny.Rune> _2575_recursiveGen;
                      bool _2576___v58;
                      bool _2577___v59;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2578_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1285;
                      bool _out1286;
                      bool _out1287;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1288;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, true, out _out1285, out _out1286, out _out1287, out _out1288);
                      _2575_recursiveGen = _out1285;
                      _2576___v58 = _out1286;
                      _2577___v59 = _out1287;
                      _2578_recIdents = _out1288;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _2575_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u32)"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2578_recIdents;
                    }
                  } else if (_source112.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2579_recursiveGen;
                      bool _2580_recOwned;
                      bool _2581_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2582_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1289;
                      bool _out1290;
                      bool _out1291;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1292;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1289, out _out1290, out _out1291, out _out1292);
                      _2579_recursiveGen = _out1289;
                      _2580_recOwned = _out1290;
                      _2581_recErased = _out1291;
                      _2582_recIdents = _out1292;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2579_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2580_recOwned;
                      isErased = _2581_recErased;
                      readIdents = _2582_recIdents;
                    }
                  } else if (_source112.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2583_recursiveGen;
                      bool _2584_recOwned;
                      bool _2585_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2586_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1293;
                      bool _out1294;
                      bool _out1295;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1296;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1293, out _out1294, out _out1295, out _out1296);
                      _2583_recursiveGen = _out1293;
                      _2584_recOwned = _out1294;
                      _2585_recErased = _out1295;
                      _2586_recIdents = _out1296;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2583_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2584_recOwned;
                      isErased = _2585_recErased;
                      readIdents = _2586_recIdents;
                    }
                  } else if (_source112.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2587_recursiveGen;
                      bool _2588_recOwned;
                      bool _2589_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2590_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1297;
                      bool _out1298;
                      bool _out1299;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1300;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1297, out _out1298, out _out1299, out _out1300);
                      _2587_recursiveGen = _out1297;
                      _2588_recOwned = _out1298;
                      _2589_recErased = _out1299;
                      _2590_recIdents = _out1300;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2587_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2588_recOwned;
                      isErased = _2589_recErased;
                      readIdents = _2590_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2591_recursiveGen;
                      bool _2592_recOwned;
                      bool _2593_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2594_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1301;
                      bool _out1302;
                      bool _out1303;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1304;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1301, out _out1302, out _out1303, out _out1304);
                      _2591_recursiveGen = _out1301;
                      _2592_recOwned = _out1302;
                      _2593_recErased = _out1303;
                      _2594_recIdents = _out1304;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2591_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2592_recOwned;
                      isErased = _2593_recErased;
                      readIdents = _2594_recIdents;
                    }
                  }
                } else if (_source110.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2595___mcc_h1057 = _source110.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2596_recursiveGen;
                    bool _2597_recOwned;
                    bool _2598_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2599_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1305;
                    bool _out1306;
                    bool _out1307;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1308;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1305, out _out1306, out _out1307, out _out1308);
                    _2596_recursiveGen = _out1305;
                    _2597_recOwned = _out1306;
                    _2598_recErased = _out1307;
                    _2599_recIdents = _out1308;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2596_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2597_recOwned;
                    isErased = _2598_recErased;
                    readIdents = _2599_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2600___mcc_h1059 = _source110.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2601_recursiveGen;
                    bool _2602_recOwned;
                    bool _2603_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2604_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1309;
                    bool _out1310;
                    bool _out1311;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1312;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1309, out _out1310, out _out1311, out _out1312);
                    _2601_recursiveGen = _out1309;
                    _2602_recOwned = _out1310;
                    _2603_recErased = _out1311;
                    _2604_recIdents = _out1312;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2601_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2602_recOwned;
                    isErased = _2603_recErased;
                    readIdents = _2604_recIdents;
                  }
                }
              }
            } else if (_source75.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _2605___mcc_h1061 = _source75.dtor_Passthrough_a0;
              DAST._IType _source113 = _1250___mcc_h306;
              if (_source113.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2606___mcc_h1065 = _source113.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2607___mcc_h1066 = _source113.dtor_typeArgs;
                DAST._IResolvedType _2608___mcc_h1067 = _source113.dtor_resolved;
                DAST._IResolvedType _source114 = _2608___mcc_h1067;
                if (_source114.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2609___mcc_h1071 = _source114.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2610_recursiveGen;
                    bool _2611_recOwned;
                    bool _2612_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2613_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1313;
                    bool _out1314;
                    bool _out1315;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1316;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1313, out _out1314, out _out1315, out _out1316);
                    _2610_recursiveGen = _out1313;
                    _2611_recOwned = _out1314;
                    _2612_recErased = _out1315;
                    _2613_recIdents = _out1316;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2610_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2611_recOwned;
                    isErased = _2612_recErased;
                    readIdents = _2613_recIdents;
                  }
                } else if (_source114.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2614___mcc_h1073 = _source114.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2615_recursiveGen;
                    bool _2616_recOwned;
                    bool _2617_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2618_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1317;
                    bool _out1318;
                    bool _out1319;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1320;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1317, out _out1318, out _out1319, out _out1320);
                    _2615_recursiveGen = _out1317;
                    _2616_recOwned = _out1318;
                    _2617_recErased = _out1319;
                    _2618_recIdents = _out1320;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2615_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2616_recOwned;
                    isErased = _2617_recErased;
                    readIdents = _2618_recIdents;
                  }
                } else {
                  DAST._IType _2619___mcc_h1075 = _source114.dtor_Newtype_a0;
                  DAST._IType _2620_b = _2619___mcc_h1075;
                  {
                    if (object.Equals(_1243_fromTpe, _2620_b)) {
                      Dafny.ISequence<Dafny.Rune> _2621_recursiveGen;
                      bool _2622_recOwned;
                      bool _2623_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2624_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1321;
                      bool _out1322;
                      bool _out1323;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1324;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1321, out _out1322, out _out1323, out _out1324);
                      _2621_recursiveGen = _out1321;
                      _2622_recOwned = _out1322;
                      _2623_recErased = _out1323;
                      _2624_recIdents = _out1324;
                      Dafny.ISequence<Dafny.Rune> _2625_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1325;
                      _out1325 = DCOMP.COMP.GenType(_1242_toTpe, true, false);
                      _2625_rhsType = _out1325;
                      Dafny.ISequence<Dafny.Rune> _2626_uneraseFn;
                      _2626_uneraseFn = ((_2622_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2625_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2626_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2621_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2622_recOwned;
                      isErased = false;
                      readIdents = _2624_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1326;
                      bool _out1327;
                      bool _out1328;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1329;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1244_expr, _1243_fromTpe, _2620_b), _2620_b, _1242_toTpe), selfIdent, @params, mustOwn, out _out1326, out _out1327, out _out1328, out _out1329);
                      s = _out1326;
                      isOwned = _out1327;
                      isErased = _out1328;
                      readIdents = _out1329;
                    }
                  }
                }
              } else if (_source113.is_Nullable) {
                DAST._IType _2627___mcc_h1077 = _source113.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2628_recursiveGen;
                  bool _2629_recOwned;
                  bool _2630_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2631_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1330;
                  bool _out1331;
                  bool _out1332;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1333;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1330, out _out1331, out _out1332, out _out1333);
                  _2628_recursiveGen = _out1330;
                  _2629_recOwned = _out1331;
                  _2630_recErased = _out1332;
                  _2631_recIdents = _out1333;
                  if (!(_2629_recOwned)) {
                    _2628_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2628_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2628_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2630_recErased;
                  readIdents = _2631_recIdents;
                }
              } else if (_source113.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2632___mcc_h1079 = _source113.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2633_recursiveGen;
                  bool _2634_recOwned;
                  bool _2635_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2636_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1334;
                  bool _out1335;
                  bool _out1336;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1337;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1334, out _out1335, out _out1336, out _out1337);
                  _2633_recursiveGen = _out1334;
                  _2634_recOwned = _out1335;
                  _2635_recErased = _out1336;
                  _2636_recIdents = _out1337;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2633_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2634_recOwned;
                  isErased = _2635_recErased;
                  readIdents = _2636_recIdents;
                }
              } else if (_source113.is_Array) {
                DAST._IType _2637___mcc_h1081 = _source113.dtor_element;
                BigInteger _2638___mcc_h1082 = _source113.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2639_recursiveGen;
                  bool _2640_recOwned;
                  bool _2641_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2642_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1338;
                  bool _out1339;
                  bool _out1340;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1341;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1338, out _out1339, out _out1340, out _out1341);
                  _2639_recursiveGen = _out1338;
                  _2640_recOwned = _out1339;
                  _2641_recErased = _out1340;
                  _2642_recIdents = _out1341;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2639_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2640_recOwned;
                  isErased = _2641_recErased;
                  readIdents = _2642_recIdents;
                }
              } else if (_source113.is_Seq) {
                DAST._IType _2643___mcc_h1085 = _source113.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2644_recursiveGen;
                  bool _2645_recOwned;
                  bool _2646_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2647_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1342;
                  bool _out1343;
                  bool _out1344;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1345;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1342, out _out1343, out _out1344, out _out1345);
                  _2644_recursiveGen = _out1342;
                  _2645_recOwned = _out1343;
                  _2646_recErased = _out1344;
                  _2647_recIdents = _out1345;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2644_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2645_recOwned;
                  isErased = _2646_recErased;
                  readIdents = _2647_recIdents;
                }
              } else if (_source113.is_Set) {
                DAST._IType _2648___mcc_h1087 = _source113.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2649_recursiveGen;
                  bool _2650_recOwned;
                  bool _2651_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2652_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1346;
                  bool _out1347;
                  bool _out1348;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1349;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1346, out _out1347, out _out1348, out _out1349);
                  _2649_recursiveGen = _out1346;
                  _2650_recOwned = _out1347;
                  _2651_recErased = _out1348;
                  _2652_recIdents = _out1349;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2649_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2650_recOwned;
                  isErased = _2651_recErased;
                  readIdents = _2652_recIdents;
                }
              } else if (_source113.is_Multiset) {
                DAST._IType _2653___mcc_h1089 = _source113.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2654_recursiveGen;
                  bool _2655_recOwned;
                  bool _2656_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2657_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1350;
                  bool _out1351;
                  bool _out1352;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1353;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1350, out _out1351, out _out1352, out _out1353);
                  _2654_recursiveGen = _out1350;
                  _2655_recOwned = _out1351;
                  _2656_recErased = _out1352;
                  _2657_recIdents = _out1353;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2654_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2655_recOwned;
                  isErased = _2656_recErased;
                  readIdents = _2657_recIdents;
                }
              } else if (_source113.is_Map) {
                DAST._IType _2658___mcc_h1091 = _source113.dtor_key;
                DAST._IType _2659___mcc_h1092 = _source113.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2660_recursiveGen;
                  bool _2661_recOwned;
                  bool _2662_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2663_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1354;
                  bool _out1355;
                  bool _out1356;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1357;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1354, out _out1355, out _out1356, out _out1357);
                  _2660_recursiveGen = _out1354;
                  _2661_recOwned = _out1355;
                  _2662_recErased = _out1356;
                  _2663_recIdents = _out1357;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2660_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2661_recOwned;
                  isErased = _2662_recErased;
                  readIdents = _2663_recIdents;
                }
              } else if (_source113.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2664___mcc_h1095 = _source113.dtor_args;
                DAST._IType _2665___mcc_h1096 = _source113.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2666_recursiveGen;
                  bool _2667_recOwned;
                  bool _2668_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2669_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1358;
                  bool _out1359;
                  bool _out1360;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1361;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1358, out _out1359, out _out1360, out _out1361);
                  _2666_recursiveGen = _out1358;
                  _2667_recOwned = _out1359;
                  _2668_recErased = _out1360;
                  _2669_recIdents = _out1361;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2666_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2667_recOwned;
                  isErased = _2668_recErased;
                  readIdents = _2669_recIdents;
                }
              } else if (_source113.is_Primitive) {
                DAST._IPrimitive _2670___mcc_h1099 = _source113.dtor_Primitive_a0;
                DAST._IPrimitive _source115 = _2670___mcc_h1099;
                if (_source115.is_Int) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2671_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out1362;
                    _out1362 = DCOMP.COMP.GenType(_1243_fromTpe, true, false);
                    _2671_rhsType = _out1362;
                    Dafny.ISequence<Dafny.Rune> _2672_recursiveGen;
                    bool _2673___v54;
                    bool _2674___v55;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2675_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1363;
                    bool _out1364;
                    bool _out1365;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1366;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, true, out _out1363, out _out1364, out _out1365, out _out1366);
                    _2672_recursiveGen = _out1363;
                    _2673___v54 = _out1364;
                    _2674___v55 = _out1365;
                    _2675_recIdents = _out1366;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _2672_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _2675_recIdents;
                  }
                } else if (_source115.is_Real) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2676_recursiveGen;
                    bool _2677_recOwned;
                    bool _2678_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2679_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1367;
                    bool _out1368;
                    bool _out1369;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1370;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1367, out _out1368, out _out1369, out _out1370);
                    _2676_recursiveGen = _out1367;
                    _2677_recOwned = _out1368;
                    _2678_recErased = _out1369;
                    _2679_recIdents = _out1370;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2676_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2677_recOwned;
                    isErased = _2678_recErased;
                    readIdents = _2679_recIdents;
                  }
                } else if (_source115.is_String) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2680_recursiveGen;
                    bool _2681_recOwned;
                    bool _2682_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2683_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1371;
                    bool _out1372;
                    bool _out1373;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1374;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1371, out _out1372, out _out1373, out _out1374);
                    _2680_recursiveGen = _out1371;
                    _2681_recOwned = _out1372;
                    _2682_recErased = _out1373;
                    _2683_recIdents = _out1374;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2680_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2681_recOwned;
                    isErased = _2682_recErased;
                    readIdents = _2683_recIdents;
                  }
                } else if (_source115.is_Bool) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2684_recursiveGen;
                    bool _2685_recOwned;
                    bool _2686_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2687_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1375;
                    bool _out1376;
                    bool _out1377;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1378;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1375, out _out1376, out _out1377, out _out1378);
                    _2684_recursiveGen = _out1375;
                    _2685_recOwned = _out1376;
                    _2686_recErased = _out1377;
                    _2687_recIdents = _out1378;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2684_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2685_recOwned;
                    isErased = _2686_recErased;
                    readIdents = _2687_recIdents;
                  }
                } else {
                  {
                    Dafny.ISequence<Dafny.Rune> _2688_recursiveGen;
                    bool _2689_recOwned;
                    bool _2690_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2691_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1379;
                    bool _out1380;
                    bool _out1381;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1382;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1379, out _out1380, out _out1381, out _out1382);
                    _2688_recursiveGen = _out1379;
                    _2689_recOwned = _out1380;
                    _2690_recErased = _out1381;
                    _2691_recIdents = _out1382;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2688_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2689_recOwned;
                    isErased = _2690_recErased;
                    readIdents = _2691_recIdents;
                  }
                }
              } else if (_source113.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2692___mcc_h1101 = _source113.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2693_recursiveGen;
                  bool _2694___v62;
                  bool _2695___v63;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2696_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1383;
                  bool _out1384;
                  bool _out1385;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1386;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, true, out _out1383, out _out1384, out _out1385, out _out1386);
                  _2693_recursiveGen = _out1383;
                  _2694___v62 = _out1384;
                  _2695___v63 = _out1385;
                  _2696_recIdents = _out1386;
                  Dafny.ISequence<Dafny.Rune> _2697_toTpeGen;
                  Dafny.ISequence<Dafny.Rune> _out1387;
                  _out1387 = DCOMP.COMP.GenType(_1242_toTpe, true, false);
                  _2697_toTpeGen = _out1387;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2693_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _2697_toTpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = true;
                  readIdents = _2696_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2698___mcc_h1103 = _source113.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2699_recursiveGen;
                  bool _2700_recOwned;
                  bool _2701_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2702_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1388;
                  bool _out1389;
                  bool _out1390;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1391;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1388, out _out1389, out _out1390, out _out1391);
                  _2699_recursiveGen = _out1388;
                  _2700_recOwned = _out1389;
                  _2701_recErased = _out1390;
                  _2702_recIdents = _out1391;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2699_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2700_recOwned;
                  isErased = _2701_recErased;
                  readIdents = _2702_recIdents;
                }
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2703___mcc_h1105 = _source75.dtor_TypeArg_a0;
              DAST._IType _source116 = _1250___mcc_h306;
              if (_source116.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2704___mcc_h1109 = _source116.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2705___mcc_h1110 = _source116.dtor_typeArgs;
                DAST._IResolvedType _2706___mcc_h1111 = _source116.dtor_resolved;
                DAST._IResolvedType _source117 = _2706___mcc_h1111;
                if (_source117.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2707___mcc_h1115 = _source117.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2708_recursiveGen;
                    bool _2709_recOwned;
                    bool _2710_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2711_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1392;
                    bool _out1393;
                    bool _out1394;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1395;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1392, out _out1393, out _out1394, out _out1395);
                    _2708_recursiveGen = _out1392;
                    _2709_recOwned = _out1393;
                    _2710_recErased = _out1394;
                    _2711_recIdents = _out1395;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2708_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2709_recOwned;
                    isErased = _2710_recErased;
                    readIdents = _2711_recIdents;
                  }
                } else if (_source117.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2712___mcc_h1117 = _source117.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2713_recursiveGen;
                    bool _2714_recOwned;
                    bool _2715_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2716_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1396;
                    bool _out1397;
                    bool _out1398;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1399;
                    DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1396, out _out1397, out _out1398, out _out1399);
                    _2713_recursiveGen = _out1396;
                    _2714_recOwned = _out1397;
                    _2715_recErased = _out1398;
                    _2716_recIdents = _out1399;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2713_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2714_recOwned;
                    isErased = _2715_recErased;
                    readIdents = _2716_recIdents;
                  }
                } else {
                  DAST._IType _2717___mcc_h1119 = _source117.dtor_Newtype_a0;
                  DAST._IType _2718_b = _2717___mcc_h1119;
                  {
                    if (object.Equals(_1243_fromTpe, _2718_b)) {
                      Dafny.ISequence<Dafny.Rune> _2719_recursiveGen;
                      bool _2720_recOwned;
                      bool _2721_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2722_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1400;
                      bool _out1401;
                      bool _out1402;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1403;
                      DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1400, out _out1401, out _out1402, out _out1403);
                      _2719_recursiveGen = _out1400;
                      _2720_recOwned = _out1401;
                      _2721_recErased = _out1402;
                      _2722_recIdents = _out1403;
                      Dafny.ISequence<Dafny.Rune> _2723_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1404;
                      _out1404 = DCOMP.COMP.GenType(_1242_toTpe, true, false);
                      _2723_rhsType = _out1404;
                      Dafny.ISequence<Dafny.Rune> _2724_uneraseFn;
                      _2724_uneraseFn = ((_2720_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2723_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2724_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2719_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2720_recOwned;
                      isErased = false;
                      readIdents = _2722_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1405;
                      bool _out1406;
                      bool _out1407;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1408;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1244_expr, _1243_fromTpe, _2718_b), _2718_b, _1242_toTpe), selfIdent, @params, mustOwn, out _out1405, out _out1406, out _out1407, out _out1408);
                      s = _out1405;
                      isOwned = _out1406;
                      isErased = _out1407;
                      readIdents = _out1408;
                    }
                  }
                }
              } else if (_source116.is_Nullable) {
                DAST._IType _2725___mcc_h1121 = _source116.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2726_recursiveGen;
                  bool _2727_recOwned;
                  bool _2728_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2729_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1409;
                  bool _out1410;
                  bool _out1411;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1412;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1409, out _out1410, out _out1411, out _out1412);
                  _2726_recursiveGen = _out1409;
                  _2727_recOwned = _out1410;
                  _2728_recErased = _out1411;
                  _2729_recIdents = _out1412;
                  if (!(_2727_recOwned)) {
                    _2726_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2726_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2726_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2728_recErased;
                  readIdents = _2729_recIdents;
                }
              } else if (_source116.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2730___mcc_h1123 = _source116.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2731_recursiveGen;
                  bool _2732_recOwned;
                  bool _2733_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2734_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1413;
                  bool _out1414;
                  bool _out1415;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1416;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1413, out _out1414, out _out1415, out _out1416);
                  _2731_recursiveGen = _out1413;
                  _2732_recOwned = _out1414;
                  _2733_recErased = _out1415;
                  _2734_recIdents = _out1416;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2731_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2732_recOwned;
                  isErased = _2733_recErased;
                  readIdents = _2734_recIdents;
                }
              } else if (_source116.is_Array) {
                DAST._IType _2735___mcc_h1125 = _source116.dtor_element;
                BigInteger _2736___mcc_h1126 = _source116.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2737_recursiveGen;
                  bool _2738_recOwned;
                  bool _2739_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2740_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1417;
                  bool _out1418;
                  bool _out1419;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1420;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1417, out _out1418, out _out1419, out _out1420);
                  _2737_recursiveGen = _out1417;
                  _2738_recOwned = _out1418;
                  _2739_recErased = _out1419;
                  _2740_recIdents = _out1420;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2737_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2738_recOwned;
                  isErased = _2739_recErased;
                  readIdents = _2740_recIdents;
                }
              } else if (_source116.is_Seq) {
                DAST._IType _2741___mcc_h1129 = _source116.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2742_recursiveGen;
                  bool _2743_recOwned;
                  bool _2744_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2745_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1421;
                  bool _out1422;
                  bool _out1423;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1424;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1421, out _out1422, out _out1423, out _out1424);
                  _2742_recursiveGen = _out1421;
                  _2743_recOwned = _out1422;
                  _2744_recErased = _out1423;
                  _2745_recIdents = _out1424;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2742_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2743_recOwned;
                  isErased = _2744_recErased;
                  readIdents = _2745_recIdents;
                }
              } else if (_source116.is_Set) {
                DAST._IType _2746___mcc_h1131 = _source116.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2747_recursiveGen;
                  bool _2748_recOwned;
                  bool _2749_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2750_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1425;
                  bool _out1426;
                  bool _out1427;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1428;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1425, out _out1426, out _out1427, out _out1428);
                  _2747_recursiveGen = _out1425;
                  _2748_recOwned = _out1426;
                  _2749_recErased = _out1427;
                  _2750_recIdents = _out1428;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2747_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2748_recOwned;
                  isErased = _2749_recErased;
                  readIdents = _2750_recIdents;
                }
              } else if (_source116.is_Multiset) {
                DAST._IType _2751___mcc_h1133 = _source116.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2752_recursiveGen;
                  bool _2753_recOwned;
                  bool _2754_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2755_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1429;
                  bool _out1430;
                  bool _out1431;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1432;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1429, out _out1430, out _out1431, out _out1432);
                  _2752_recursiveGen = _out1429;
                  _2753_recOwned = _out1430;
                  _2754_recErased = _out1431;
                  _2755_recIdents = _out1432;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2752_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2753_recOwned;
                  isErased = _2754_recErased;
                  readIdents = _2755_recIdents;
                }
              } else if (_source116.is_Map) {
                DAST._IType _2756___mcc_h1135 = _source116.dtor_key;
                DAST._IType _2757___mcc_h1136 = _source116.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2758_recursiveGen;
                  bool _2759_recOwned;
                  bool _2760_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2761_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1433;
                  bool _out1434;
                  bool _out1435;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1436;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1433, out _out1434, out _out1435, out _out1436);
                  _2758_recursiveGen = _out1433;
                  _2759_recOwned = _out1434;
                  _2760_recErased = _out1435;
                  _2761_recIdents = _out1436;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2758_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2759_recOwned;
                  isErased = _2760_recErased;
                  readIdents = _2761_recIdents;
                }
              } else if (_source116.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2762___mcc_h1139 = _source116.dtor_args;
                DAST._IType _2763___mcc_h1140 = _source116.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2764_recursiveGen;
                  bool _2765_recOwned;
                  bool _2766_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2767_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1437;
                  bool _out1438;
                  bool _out1439;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1440;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1437, out _out1438, out _out1439, out _out1440);
                  _2764_recursiveGen = _out1437;
                  _2765_recOwned = _out1438;
                  _2766_recErased = _out1439;
                  _2767_recIdents = _out1440;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2764_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2765_recOwned;
                  isErased = _2766_recErased;
                  readIdents = _2767_recIdents;
                }
              } else if (_source116.is_Primitive) {
                DAST._IPrimitive _2768___mcc_h1143 = _source116.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2769_recursiveGen;
                  bool _2770_recOwned;
                  bool _2771_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2772_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1441;
                  bool _out1442;
                  bool _out1443;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1444;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1441, out _out1442, out _out1443, out _out1444);
                  _2769_recursiveGen = _out1441;
                  _2770_recOwned = _out1442;
                  _2771_recErased = _out1443;
                  _2772_recIdents = _out1444;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2769_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2770_recOwned;
                  isErased = _2771_recErased;
                  readIdents = _2772_recIdents;
                }
              } else if (_source116.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2773___mcc_h1145 = _source116.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2774_recursiveGen;
                  bool _2775_recOwned;
                  bool _2776_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2777_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1445;
                  bool _out1446;
                  bool _out1447;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1448;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1445, out _out1446, out _out1447, out _out1448);
                  _2774_recursiveGen = _out1445;
                  _2775_recOwned = _out1446;
                  _2776_recErased = _out1447;
                  _2777_recIdents = _out1448;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2774_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2775_recOwned;
                  isErased = _2776_recErased;
                  readIdents = _2777_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2778___mcc_h1147 = _source116.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2779_recursiveGen;
                  bool _2780_recOwned;
                  bool _2781_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2782_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1449;
                  bool _out1450;
                  bool _out1451;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1452;
                  DCOMP.COMP.GenExpr(_1244_expr, selfIdent, @params, mustOwn, out _out1449, out _out1450, out _out1451, out _out1452);
                  _2779_recursiveGen = _out1449;
                  _2780_recOwned = _out1450;
                  _2781_recErased = _out1451;
                  _2782_recIdents = _out1452;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2779_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2780_recOwned;
                  isErased = _2781_recErased;
                  readIdents = _2782_recIdents;
                }
              }
            }
          }
        }
      } else if (_source68.is_SeqConstruct) {
        DAST._IExpression _2783___mcc_h26 = _source68.dtor_length;
        DAST._IExpression _2784___mcc_h27 = _source68.dtor_elem;
        DAST._IExpression _2785_expr = _2784___mcc_h27;
        DAST._IExpression _2786_length = _2783___mcc_h26;
        {
          Dafny.ISequence<Dafny.Rune> _2787_recursiveGen;
          bool _2788___v65;
          bool _2789_eErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2790_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1453;
          bool _out1454;
          bool _out1455;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1456;
          DCOMP.COMP.GenExpr(_2785_expr, selfIdent, @params, true, out _out1453, out _out1454, out _out1455, out _out1456);
          _2787_recursiveGen = _out1453;
          _2788___v65 = _out1454;
          _2789_eErased = _out1455;
          _2790_recIdents = _out1456;
          Dafny.ISequence<Dafny.Rune> _2791_lengthGen;
          bool _2792___v66;
          bool _2793_lengthErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2794_lengthIdents;
          Dafny.ISequence<Dafny.Rune> _out1457;
          bool _out1458;
          bool _out1459;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1460;
          DCOMP.COMP.GenExpr(_2786_length, selfIdent, @params, true, out _out1457, out _out1458, out _out1459, out _out1460);
          _2791_lengthGen = _out1457;
          _2792___v66 = _out1458;
          _2793_lengthErased = _out1459;
          _2794_lengthIdents = _out1460;
          if (!(_2793_lengthErased)) {
            _2791_lengthGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2791_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), _2787_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), _2791_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer.0(&i)).collect::<Vec<_>>()\n}"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2790_recIdents, _2794_lengthIdents);
          isOwned = true;
          isErased = _2789_eErased;
        }
      } else if (_source68.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _2795___mcc_h28 = _source68.dtor_elements;
        DAST._IType _2796___mcc_h29 = _source68.dtor_typ;
        DAST._IType _2797_typ = _2796___mcc_h29;
        Dafny.ISequence<DAST._IExpression> _2798_exprs = _2795___mcc_h28;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _2799_genTpe;
          Dafny.ISequence<Dafny.Rune> _out1461;
          _out1461 = DCOMP.COMP.GenType(_2797_typ, false, false);
          _2799_genTpe = _out1461;
          BigInteger _2800_i;
          _2800_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(vec![");
          _2800_i = BigInteger.Zero;
          while ((_2800_i) < (new BigInteger((_2798_exprs).Count))) {
            if ((_2800_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2801_recursiveGen;
            bool _2802___v67;
            bool _2803_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2804_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1462;
            bool _out1463;
            bool _out1464;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1465;
            DCOMP.COMP.GenExpr((_2798_exprs).Select(_2800_i), selfIdent, @params, true, out _out1462, out _out1463, out _out1464, out _out1465);
            _2801_recursiveGen = _out1462;
            _2802___v67 = _out1463;
            _2803_isErased = _out1464;
            _2804_recIdents = _out1465;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2804_recIdents);
            if (_2803_isErased) {
              _2801_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2801_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _2801_recursiveGen);
            _2800_i = (_2800_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("] as Vec<")), _2799_genTpe), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source68.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _2805___mcc_h30 = _source68.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _2806_exprs = _2805___mcc_h30;
        {
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>> _2807_generatedValues;
          _2807_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2808_i;
          _2808_i = BigInteger.Zero;
          bool _2809_allErased;
          _2809_allErased = true;
          while ((_2808_i) < (new BigInteger((_2806_exprs).Count))) {
            Dafny.ISequence<Dafny.Rune> _2810_recursiveGen;
            bool _2811___v68;
            bool _2812_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2813_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1466;
            bool _out1467;
            bool _out1468;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1469;
            DCOMP.COMP.GenExpr((_2806_exprs).Select(_2808_i), selfIdent, @params, true, out _out1466, out _out1467, out _out1468, out _out1469);
            _2810_recursiveGen = _out1466;
            _2811___v68 = _out1467;
            _2812_isErased = _out1468;
            _2813_recIdents = _out1469;
            _2809_allErased = (_2809_allErased) && (_2812_isErased);
            _2807_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.Concat(_2807_generatedValues, Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements(_System.Tuple2<Dafny.ISequence<Dafny.Rune>, bool>.create(_2810_recursiveGen, _2812_isErased)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2813_recIdents);
            _2808_i = (_2808_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _2808_i = BigInteger.Zero;
          while ((_2808_i) < (new BigInteger((_2807_generatedValues).Count))) {
            if ((_2808_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2814_gen;
            _2814_gen = ((_2807_generatedValues).Select(_2808_i)).dtor__0;
            if ((((_2807_generatedValues).Select(_2808_i)).dtor__1) && (!(_2809_allErased))) {
              _2814_gen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2814_gen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _2814_gen);
            _2808_i = (_2808_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashSet<_>>()"));
          isOwned = true;
          isErased = _2809_allErased;
        }
      } else if (_source68.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2815___mcc_h31 = _source68.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2816_mapElems = _2815___mcc_h31;
        {
          Dafny.ISequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>> _2817_generatedValues;
          _2817_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2818_i;
          _2818_i = BigInteger.Zero;
          bool _2819_allErased;
          _2819_allErased = true;
          while ((_2818_i) < (new BigInteger((_2816_mapElems).Count))) {
            Dafny.ISequence<Dafny.Rune> _2820_recursiveGenKey;
            bool _2821___v69;
            bool _2822_isErasedKey;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2823_recIdentsKey;
            Dafny.ISequence<Dafny.Rune> _out1470;
            bool _out1471;
            bool _out1472;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1473;
            DCOMP.COMP.GenExpr(((_2816_mapElems).Select(_2818_i)).dtor__0, selfIdent, @params, true, out _out1470, out _out1471, out _out1472, out _out1473);
            _2820_recursiveGenKey = _out1470;
            _2821___v69 = _out1471;
            _2822_isErasedKey = _out1472;
            _2823_recIdentsKey = _out1473;
            Dafny.ISequence<Dafny.Rune> _2824_recursiveGenValue;
            bool _2825___v70;
            bool _2826_isErasedValue;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2827_recIdentsValue;
            Dafny.ISequence<Dafny.Rune> _out1474;
            bool _out1475;
            bool _out1476;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1477;
            DCOMP.COMP.GenExpr(((_2816_mapElems).Select(_2818_i)).dtor__1, selfIdent, @params, true, out _out1474, out _out1475, out _out1476, out _out1477);
            _2824_recursiveGenValue = _out1474;
            _2825___v70 = _out1475;
            _2826_isErasedValue = _out1476;
            _2827_recIdentsValue = _out1477;
            _2819_allErased = ((_2819_allErased) && (_2822_isErasedKey)) && (_2826_isErasedValue);
            _2817_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.Concat(_2817_generatedValues, Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements(_System.Tuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>.create(_2820_recursiveGenKey, _2824_recursiveGenValue, _2822_isErasedKey, _2826_isErasedValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2823_recIdentsKey), _2827_recIdentsValue);
            _2818_i = (_2818_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _2818_i = BigInteger.Zero;
          while ((_2818_i) < (new BigInteger((_2817_generatedValues).Count))) {
            if ((_2818_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2828_genKey;
            _2828_genKey = ((_2817_generatedValues).Select(_2818_i)).dtor__0;
            Dafny.ISequence<Dafny.Rune> _2829_genValue;
            _2829_genValue = ((_2817_generatedValues).Select(_2818_i)).dtor__1;
            if ((((_2817_generatedValues).Select(_2818_i)).dtor__2) && (!(_2819_allErased))) {
              _2828_genKey = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2828_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if ((((_2817_generatedValues).Select(_2818_i)).dtor__3) && (!(_2819_allErased))) {
              _2829_genValue = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2829_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2828_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2829_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _2818_i = (_2818_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashMap<_, _>>()"));
          isOwned = true;
          isErased = _2819_allErased;
        }
      } else if (_source68.is_This) {
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source118 = selfIdent;
          if (_source118.is_Some) {
            Dafny.ISequence<Dafny.Rune> _2830___mcc_h1149 = _source118.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _2831_id = _2830___mcc_h1149;
            {
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(_2831_id, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                isOwned = true;
              } else {
                if ((_2831_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _2831_id);
                }
                isOwned = false;
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2831_id);
              isErased = false;
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")");
              isOwned = true;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
              isErased = true;
            }
          }
        }
      } else if (_source68.is_Ite) {
        DAST._IExpression _2832___mcc_h32 = _source68.dtor_cond;
        DAST._IExpression _2833___mcc_h33 = _source68.dtor_thn;
        DAST._IExpression _2834___mcc_h34 = _source68.dtor_els;
        DAST._IExpression _2835_f = _2834___mcc_h34;
        DAST._IExpression _2836_t = _2833___mcc_h33;
        DAST._IExpression _2837_cond = _2832___mcc_h32;
        {
          Dafny.ISequence<Dafny.Rune> _2838_condString;
          bool _2839___v71;
          bool _2840_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2841_recIdentsCond;
          Dafny.ISequence<Dafny.Rune> _out1478;
          bool _out1479;
          bool _out1480;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1481;
          DCOMP.COMP.GenExpr(_2837_cond, selfIdent, @params, true, out _out1478, out _out1479, out _out1480, out _out1481);
          _2838_condString = _out1478;
          _2839___v71 = _out1479;
          _2840_condErased = _out1480;
          _2841_recIdentsCond = _out1481;
          if (!(_2840_condErased)) {
            _2838_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2838_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          Dafny.ISequence<Dafny.Rune> _2842___v72;
          bool _2843_tHasToBeOwned;
          bool _2844___v73;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2845___v74;
          Dafny.ISequence<Dafny.Rune> _out1482;
          bool _out1483;
          bool _out1484;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1485;
          DCOMP.COMP.GenExpr(_2836_t, selfIdent, @params, mustOwn, out _out1482, out _out1483, out _out1484, out _out1485);
          _2842___v72 = _out1482;
          _2843_tHasToBeOwned = _out1483;
          _2844___v73 = _out1484;
          _2845___v74 = _out1485;
          Dafny.ISequence<Dafny.Rune> _2846_fString;
          bool _2847_fOwned;
          bool _2848_fErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2849_recIdentsF;
          Dafny.ISequence<Dafny.Rune> _out1486;
          bool _out1487;
          bool _out1488;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1489;
          DCOMP.COMP.GenExpr(_2835_f, selfIdent, @params, _2843_tHasToBeOwned, out _out1486, out _out1487, out _out1488, out _out1489);
          _2846_fString = _out1486;
          _2847_fOwned = _out1487;
          _2848_fErased = _out1488;
          _2849_recIdentsF = _out1489;
          Dafny.ISequence<Dafny.Rune> _2850_tString;
          bool _2851___v75;
          bool _2852_tErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2853_recIdentsT;
          Dafny.ISequence<Dafny.Rune> _out1490;
          bool _out1491;
          bool _out1492;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1493;
          DCOMP.COMP.GenExpr(_2836_t, selfIdent, @params, _2847_fOwned, out _out1490, out _out1491, out _out1492, out _out1493);
          _2850_tString = _out1490;
          _2851___v75 = _out1491;
          _2852_tErased = _out1492;
          _2853_recIdentsT = _out1493;
          if ((!(_2848_fErased)) || (!(_2852_tErased))) {
            if (_2848_fErased) {
              _2846_fString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2846_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (_2852_tErased) {
              _2850_tString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2850_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _2838_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _2850_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _2846_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})"));
          isOwned = _2847_fOwned;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2841_recIdentsCond, _2853_recIdentsT), _2849_recIdentsF);
          isErased = (_2848_fErased) || (_2852_tErased);
        }
      } else if (_source68.is_UnOp) {
        DAST._IUnaryOp _2854___mcc_h35 = _source68.dtor_unOp;
        DAST._IExpression _2855___mcc_h36 = _source68.dtor_expr;
        DAST._IUnaryOp _source119 = _2854___mcc_h35;
        if (_source119.is_Not) {
          DAST._IExpression _2856_e = _2855___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _2857_recursiveGen;
            bool _2858___v76;
            bool _2859_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2860_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1494;
            bool _out1495;
            bool _out1496;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1497;
            DCOMP.COMP.GenExpr(_2856_e, selfIdent, @params, true, out _out1494, out _out1495, out _out1496, out _out1497);
            _2857_recursiveGen = _out1494;
            _2858___v76 = _out1495;
            _2859_recErased = _out1496;
            _2860_recIdents = _out1497;
            if (!(_2859_recErased)) {
              _2857_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2857_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _2857_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _2860_recIdents;
            isErased = true;
          }
        } else if (_source119.is_BitwiseNot) {
          DAST._IExpression _2861_e = _2855___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _2862_recursiveGen;
            bool _2863___v77;
            bool _2864_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2865_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1498;
            bool _out1499;
            bool _out1500;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1501;
            DCOMP.COMP.GenExpr(_2861_e, selfIdent, @params, true, out _out1498, out _out1499, out _out1500, out _out1501);
            _2862_recursiveGen = _out1498;
            _2863___v77 = _out1499;
            _2864_recErased = _out1500;
            _2865_recIdents = _out1501;
            if (!(_2864_recErased)) {
              _2862_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2862_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~("), _2862_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _2865_recIdents;
            isErased = true;
          }
        } else {
          DAST._IExpression _2866_e = _2855___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _2867_recursiveGen;
            bool _2868_recOwned;
            bool _2869_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2870_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1502;
            bool _out1503;
            bool _out1504;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1505;
            DCOMP.COMP.GenExpr(_2866_e, selfIdent, @params, false, out _out1502, out _out1503, out _out1504, out _out1505);
            _2867_recursiveGen = _out1502;
            _2868_recOwned = _out1503;
            _2869_recErased = _out1504;
            _2870_recIdents = _out1505;
            if (!(_2869_recErased)) {
              Dafny.ISequence<Dafny.Rune> _2871_eraseFn;
              _2871_eraseFn = ((_2868_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
              _2867_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _2871_eraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2867_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _2867_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").len())"));
            isOwned = true;
            readIdents = _2870_recIdents;
            isErased = true;
          }
        }
      } else if (_source68.is_BinOp) {
        DAST._IBinOp _2872___mcc_h37 = _source68.dtor_op;
        DAST._IExpression _2873___mcc_h38 = _source68.dtor_left;
        DAST._IExpression _2874___mcc_h39 = _source68.dtor_right;
        DAST._IExpression _2875_r = _2874___mcc_h39;
        DAST._IExpression _2876_l = _2873___mcc_h38;
        DAST._IBinOp _2877_op = _2872___mcc_h37;
        {
          Dafny.ISequence<Dafny.Rune> _2878_left;
          bool _2879___v78;
          bool _2880_leftErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2881_recIdentsL;
          Dafny.ISequence<Dafny.Rune> _out1506;
          bool _out1507;
          bool _out1508;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1509;
          DCOMP.COMP.GenExpr(_2876_l, selfIdent, @params, true, out _out1506, out _out1507, out _out1508, out _out1509);
          _2878_left = _out1506;
          _2879___v78 = _out1507;
          _2880_leftErased = _out1508;
          _2881_recIdentsL = _out1509;
          Dafny.ISequence<Dafny.Rune> _2882_right;
          bool _2883___v79;
          bool _2884_rightErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2885_recIdentsR;
          Dafny.ISequence<Dafny.Rune> _out1510;
          bool _out1511;
          bool _out1512;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1513;
          DCOMP.COMP.GenExpr(_2875_r, selfIdent, @params, true, out _out1510, out _out1511, out _out1512, out _out1513);
          _2882_right = _out1510;
          _2883___v79 = _out1511;
          _2884_rightErased = _out1512;
          _2885_recIdentsR = _out1513;
          DAST._IBinOp _source120 = _2877_op;
          if (_source120.is_Eq) {
            bool _2886___mcc_h1150 = _source120.dtor_referential;
            bool _2887___mcc_h1151 = _source120.dtor_nullable;
            {
              if (!(_2880_leftErased)) {
                _2878_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2884_rightErased)) {
                _2882_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source121 = _2877_op;
              if (_source121.is_Eq) {
                bool _2888___mcc_h1160 = _source121.dtor_referential;
                bool _2889___mcc_h1161 = _source121.dtor_nullable;
                bool _2890_nullable = _2889___mcc_h1161;
                bool _2891_referential = _2888___mcc_h1160;
                {
                  if (_2891_referential) {
                    if (_2890_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2878_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2882_right);
                  }
                }
              } else if (_source121.is_Neq) {
                bool _2892___mcc_h1162 = _source121.dtor_referential;
                bool _2893___mcc_h1163 = _source121.dtor_nullable;
                bool _2894_nullable = _2893___mcc_h1163;
                bool _2895_referential = _2892___mcc_h1162;
                {
                  if (_2895_referential) {
                    if (_2894_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2878_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2882_right);
                  }
                }
              } else if (_source121.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source121.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source121.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source121.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2896___mcc_h1164 = _source121.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2897_op = _2896___mcc_h1164;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2897_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source120.is_Neq) {
            bool _2898___mcc_h1154 = _source120.dtor_referential;
            bool _2899___mcc_h1155 = _source120.dtor_nullable;
            {
              if (!(_2880_leftErased)) {
                _2878_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2884_rightErased)) {
                _2882_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source122 = _2877_op;
              if (_source122.is_Eq) {
                bool _2900___mcc_h1165 = _source122.dtor_referential;
                bool _2901___mcc_h1166 = _source122.dtor_nullable;
                bool _2902_nullable = _2901___mcc_h1166;
                bool _2903_referential = _2900___mcc_h1165;
                {
                  if (_2903_referential) {
                    if (_2902_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2878_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2882_right);
                  }
                }
              } else if (_source122.is_Neq) {
                bool _2904___mcc_h1167 = _source122.dtor_referential;
                bool _2905___mcc_h1168 = _source122.dtor_nullable;
                bool _2906_nullable = _2905___mcc_h1168;
                bool _2907_referential = _2904___mcc_h1167;
                {
                  if (_2907_referential) {
                    if (_2906_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2878_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2882_right);
                  }
                }
              } else if (_source122.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source122.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source122.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source122.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2908___mcc_h1169 = _source122.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2909_op = _2908___mcc_h1169;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2909_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source120.is_Div) {
            {
              if (!(_2880_leftErased)) {
                _2878_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2884_rightErased)) {
                _2882_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source123 = _2877_op;
              if (_source123.is_Eq) {
                bool _2910___mcc_h1170 = _source123.dtor_referential;
                bool _2911___mcc_h1171 = _source123.dtor_nullable;
                bool _2912_nullable = _2911___mcc_h1171;
                bool _2913_referential = _2910___mcc_h1170;
                {
                  if (_2913_referential) {
                    if (_2912_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2878_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2882_right);
                  }
                }
              } else if (_source123.is_Neq) {
                bool _2914___mcc_h1172 = _source123.dtor_referential;
                bool _2915___mcc_h1173 = _source123.dtor_nullable;
                bool _2916_nullable = _2915___mcc_h1173;
                bool _2917_referential = _2914___mcc_h1172;
                {
                  if (_2917_referential) {
                    if (_2916_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2878_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2882_right);
                  }
                }
              } else if (_source123.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source123.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source123.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source123.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2918___mcc_h1174 = _source123.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2919_op = _2918___mcc_h1174;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2919_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source120.is_EuclidianDiv) {
            {
              if (!(_2880_leftErased)) {
                _2878_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2884_rightErased)) {
                _2882_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source124 = _2877_op;
              if (_source124.is_Eq) {
                bool _2920___mcc_h1175 = _source124.dtor_referential;
                bool _2921___mcc_h1176 = _source124.dtor_nullable;
                bool _2922_nullable = _2921___mcc_h1176;
                bool _2923_referential = _2920___mcc_h1175;
                {
                  if (_2923_referential) {
                    if (_2922_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2878_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2882_right);
                  }
                }
              } else if (_source124.is_Neq) {
                bool _2924___mcc_h1177 = _source124.dtor_referential;
                bool _2925___mcc_h1178 = _source124.dtor_nullable;
                bool _2926_nullable = _2925___mcc_h1178;
                bool _2927_referential = _2924___mcc_h1177;
                {
                  if (_2927_referential) {
                    if (_2926_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2878_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2882_right);
                  }
                }
              } else if (_source124.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source124.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source124.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source124.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2928___mcc_h1179 = _source124.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2929_op = _2928___mcc_h1179;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2929_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source120.is_Mod) {
            {
              if (!(_2880_leftErased)) {
                _2878_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2884_rightErased)) {
                _2882_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source125 = _2877_op;
              if (_source125.is_Eq) {
                bool _2930___mcc_h1180 = _source125.dtor_referential;
                bool _2931___mcc_h1181 = _source125.dtor_nullable;
                bool _2932_nullable = _2931___mcc_h1181;
                bool _2933_referential = _2930___mcc_h1180;
                {
                  if (_2933_referential) {
                    if (_2932_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2878_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2882_right);
                  }
                }
              } else if (_source125.is_Neq) {
                bool _2934___mcc_h1182 = _source125.dtor_referential;
                bool _2935___mcc_h1183 = _source125.dtor_nullable;
                bool _2936_nullable = _2935___mcc_h1183;
                bool _2937_referential = _2934___mcc_h1182;
                {
                  if (_2937_referential) {
                    if (_2936_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2878_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2882_right);
                  }
                }
              } else if (_source125.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source125.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source125.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source125.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2938___mcc_h1184 = _source125.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2939_op = _2938___mcc_h1184;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2939_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source120.is_EuclidianMod) {
            {
              if (!(_2880_leftErased)) {
                _2878_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2884_rightErased)) {
                _2882_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source126 = _2877_op;
              if (_source126.is_Eq) {
                bool _2940___mcc_h1185 = _source126.dtor_referential;
                bool _2941___mcc_h1186 = _source126.dtor_nullable;
                bool _2942_nullable = _2941___mcc_h1186;
                bool _2943_referential = _2940___mcc_h1185;
                {
                  if (_2943_referential) {
                    if (_2942_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2878_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2882_right);
                  }
                }
              } else if (_source126.is_Neq) {
                bool _2944___mcc_h1187 = _source126.dtor_referential;
                bool _2945___mcc_h1188 = _source126.dtor_nullable;
                bool _2946_nullable = _2945___mcc_h1188;
                bool _2947_referential = _2944___mcc_h1187;
                {
                  if (_2947_referential) {
                    if (_2946_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2878_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2882_right);
                  }
                }
              } else if (_source126.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source126.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source126.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source126.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2948___mcc_h1189 = _source126.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2949_op = _2948___mcc_h1189;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2949_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source120.is_Implies) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") || ")), _2882_right);
            }
          } else if (_source120.is_In) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2882_right, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          } else if (_source120.is_NotIn) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
            }
          } else if (_source120.is_SetDifference) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2878_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".difference(&")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").cloned().collect::<::std::collections::HashSet<_>>()"));
            }
          } else if (_source120.is_Concat) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].concat()"));
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _2950___mcc_h1158 = _source120.dtor_Passthrough_a0;
            {
              if (!(_2880_leftErased)) {
                _2878_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2884_rightErased)) {
                _2882_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source127 = _2877_op;
              if (_source127.is_Eq) {
                bool _2951___mcc_h1190 = _source127.dtor_referential;
                bool _2952___mcc_h1191 = _source127.dtor_nullable;
                bool _2953_nullable = _2952___mcc_h1191;
                bool _2954_referential = _2951___mcc_h1190;
                {
                  if (_2954_referential) {
                    if (_2953_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2878_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2882_right);
                  }
                }
              } else if (_source127.is_Neq) {
                bool _2955___mcc_h1192 = _source127.dtor_referential;
                bool _2956___mcc_h1193 = _source127.dtor_nullable;
                bool _2957_nullable = _2956___mcc_h1193;
                bool _2958_referential = _2955___mcc_h1192;
                {
                  if (_2958_referential) {
                    if (_2957_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2878_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2882_right);
                  }
                }
              } else if (_source127.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source127.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source127.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source127.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2959___mcc_h1194 = _source127.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2960_op = _2959___mcc_h1194;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2878_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2960_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2882_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          }
          isOwned = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2881_recIdentsL, _2885_recIdentsR);
          isErased = true;
        }
      } else if (_source68.is_ArrayLen) {
        DAST._IExpression _2961___mcc_h40 = _source68.dtor_expr;
        BigInteger _2962___mcc_h41 = _source68.dtor_dim;
        BigInteger _2963_dim = _2962___mcc_h41;
        DAST._IExpression _2964_expr = _2961___mcc_h40;
        {
          Dafny.ISequence<Dafny.Rune> _2965_recursiveGen;
          bool _2966___v81;
          bool _2967_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2968_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1514;
          bool _out1515;
          bool _out1516;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1517;
          DCOMP.COMP.GenExpr(_2964_expr, selfIdent, @params, true, out _out1514, out _out1515, out _out1516, out _out1517);
          _2965_recursiveGen = _out1514;
          _2966___v81 = _out1515;
          _2967_recErased = _out1516;
          _2968_recIdents = _out1517;
          if ((_2963_dim).Sign == 0) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _2965_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow().len())"));
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(m.borrow().len())");
            BigInteger _2969_i;
            _2969_i = BigInteger.One;
            while ((_2969_i) < (_2963_dim)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("m.borrow().get(0).map(|m| "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
              _2969_i = (_2969_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2965_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow().get(0).map(|m| ")), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
          }
          isOwned = true;
          readIdents = _2968_recIdents;
          isErased = true;
        }
      } else if (_source68.is_Select) {
        DAST._IExpression _2970___mcc_h42 = _source68.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _2971___mcc_h43 = _source68.dtor_field;
        bool _2972___mcc_h44 = _source68.dtor_isConstant;
        bool _2973___mcc_h45 = _source68.dtor_onDatatype;
        DAST._IExpression _source128 = _2970___mcc_h42;
        if (_source128.is_Literal) {
          DAST._ILiteral _2974___mcc_h46 = _source128.dtor_Literal_a0;
          bool _2975_isDatatype = _2973___mcc_h45;
          bool _2976_isConstant = _2972___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2977_field = _2971___mcc_h43;
          DAST._IExpression _2978_on = _2970___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2979_onString;
            bool _2980_onOwned;
            bool _2981_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2982_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1518;
            bool _out1519;
            bool _out1520;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1521;
            DCOMP.COMP.GenExpr(_2978_on, selfIdent, @params, false, out _out1518, out _out1519, out _out1520, out _out1521);
            _2979_onString = _out1518;
            _2980_onOwned = _out1519;
            _2981_onErased = _out1520;
            _2982_recIdents = _out1521;
            if ((_2975_isDatatype) || (_2976_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2979_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2977_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2976_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2979_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2977_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2982_recIdents;
          }
        } else if (_source128.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _2983___mcc_h48 = _source128.dtor_Ident_a0;
          bool _2984_isDatatype = _2973___mcc_h45;
          bool _2985_isConstant = _2972___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2986_field = _2971___mcc_h43;
          DAST._IExpression _2987_on = _2970___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2988_onString;
            bool _2989_onOwned;
            bool _2990_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2991_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1522;
            bool _out1523;
            bool _out1524;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1525;
            DCOMP.COMP.GenExpr(_2987_on, selfIdent, @params, false, out _out1522, out _out1523, out _out1524, out _out1525);
            _2988_onString = _out1522;
            _2989_onOwned = _out1523;
            _2990_onErased = _out1524;
            _2991_recIdents = _out1525;
            if ((_2984_isDatatype) || (_2985_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2988_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2986_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2985_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2988_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2986_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2991_recIdents;
          }
        } else if (_source128.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2992___mcc_h50 = _source128.dtor_Companion_a0;
          bool _2993_isDatatype = _2973___mcc_h45;
          bool _2994_isConstant = _2972___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2995_field = _2971___mcc_h43;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2996_c = _2992___mcc_h50;
          {
            Dafny.ISequence<Dafny.Rune> _2997_onString;
            bool _2998_onOwned;
            bool _2999_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3000_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1526;
            bool _out1527;
            bool _out1528;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1529;
            DCOMP.COMP.GenExpr(DAST.Expression.create_Companion(_2996_c), selfIdent, @params, false, out _out1526, out _out1527, out _out1528, out _out1529);
            _2997_onString = _out1526;
            _2998_onOwned = _out1527;
            _2999_onErased = _out1528;
            _3000_recIdents = _out1529;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2997_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_2995_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
            isOwned = true;
            isErased = false;
            readIdents = _3000_recIdents;
          }
        } else if (_source128.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _3001___mcc_h52 = _source128.dtor_Tuple_a0;
          bool _3002_isDatatype = _2973___mcc_h45;
          bool _3003_isConstant = _2972___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3004_field = _2971___mcc_h43;
          DAST._IExpression _3005_on = _2970___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3006_onString;
            bool _3007_onOwned;
            bool _3008_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3009_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1530;
            bool _out1531;
            bool _out1532;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1533;
            DCOMP.COMP.GenExpr(_3005_on, selfIdent, @params, false, out _out1530, out _out1531, out _out1532, out _out1533);
            _3006_onString = _out1530;
            _3007_onOwned = _out1531;
            _3008_onErased = _out1532;
            _3009_recIdents = _out1533;
            if ((_3002_isDatatype) || (_3003_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3006_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3004_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3003_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3006_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3004_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3009_recIdents;
          }
        } else if (_source128.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3010___mcc_h54 = _source128.dtor_path;
          Dafny.ISequence<DAST._IType> _3011___mcc_h55 = _source128.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _3012___mcc_h56 = _source128.dtor_args;
          bool _3013_isDatatype = _2973___mcc_h45;
          bool _3014_isConstant = _2972___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3015_field = _2971___mcc_h43;
          DAST._IExpression _3016_on = _2970___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3017_onString;
            bool _3018_onOwned;
            bool _3019_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3020_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1534;
            bool _out1535;
            bool _out1536;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1537;
            DCOMP.COMP.GenExpr(_3016_on, selfIdent, @params, false, out _out1534, out _out1535, out _out1536, out _out1537);
            _3017_onString = _out1534;
            _3018_onOwned = _out1535;
            _3019_onErased = _out1536;
            _3020_recIdents = _out1537;
            if ((_3013_isDatatype) || (_3014_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3017_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3015_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3014_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3017_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3015_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3020_recIdents;
          }
        } else if (_source128.is_NewArray) {
          Dafny.ISequence<DAST._IExpression> _3021___mcc_h60 = _source128.dtor_dims;
          DAST._IType _3022___mcc_h61 = _source128.dtor_typ;
          bool _3023_isDatatype = _2973___mcc_h45;
          bool _3024_isConstant = _2972___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3025_field = _2971___mcc_h43;
          DAST._IExpression _3026_on = _2970___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3027_onString;
            bool _3028_onOwned;
            bool _3029_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3030_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1538;
            bool _out1539;
            bool _out1540;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1541;
            DCOMP.COMP.GenExpr(_3026_on, selfIdent, @params, false, out _out1538, out _out1539, out _out1540, out _out1541);
            _3027_onString = _out1538;
            _3028_onOwned = _out1539;
            _3029_onErased = _out1540;
            _3030_recIdents = _out1541;
            if ((_3023_isDatatype) || (_3024_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3027_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3025_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3024_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3027_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3025_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3030_recIdents;
          }
        } else if (_source128.is_DatatypeValue) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3031___mcc_h64 = _source128.dtor_path;
          Dafny.ISequence<DAST._IType> _3032___mcc_h65 = _source128.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _3033___mcc_h66 = _source128.dtor_variant;
          bool _3034___mcc_h67 = _source128.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _3035___mcc_h68 = _source128.dtor_contents;
          bool _3036_isDatatype = _2973___mcc_h45;
          bool _3037_isConstant = _2972___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3038_field = _2971___mcc_h43;
          DAST._IExpression _3039_on = _2970___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3040_onString;
            bool _3041_onOwned;
            bool _3042_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3043_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1542;
            bool _out1543;
            bool _out1544;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1545;
            DCOMP.COMP.GenExpr(_3039_on, selfIdent, @params, false, out _out1542, out _out1543, out _out1544, out _out1545);
            _3040_onString = _out1542;
            _3041_onOwned = _out1543;
            _3042_onErased = _out1544;
            _3043_recIdents = _out1545;
            if ((_3036_isDatatype) || (_3037_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3038_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3037_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3040_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3038_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3043_recIdents;
          }
        } else if (_source128.is_Convert) {
          DAST._IExpression _3044___mcc_h74 = _source128.dtor_value;
          DAST._IType _3045___mcc_h75 = _source128.dtor_from;
          DAST._IType _3046___mcc_h76 = _source128.dtor_typ;
          bool _3047_isDatatype = _2973___mcc_h45;
          bool _3048_isConstant = _2972___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3049_field = _2971___mcc_h43;
          DAST._IExpression _3050_on = _2970___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3051_onString;
            bool _3052_onOwned;
            bool _3053_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3054_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1546;
            bool _out1547;
            bool _out1548;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1549;
            DCOMP.COMP.GenExpr(_3050_on, selfIdent, @params, false, out _out1546, out _out1547, out _out1548, out _out1549);
            _3051_onString = _out1546;
            _3052_onOwned = _out1547;
            _3053_onErased = _out1548;
            _3054_recIdents = _out1549;
            if ((_3047_isDatatype) || (_3048_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3051_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3049_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3048_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3051_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3049_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3054_recIdents;
          }
        } else if (_source128.is_SeqConstruct) {
          DAST._IExpression _3055___mcc_h80 = _source128.dtor_length;
          DAST._IExpression _3056___mcc_h81 = _source128.dtor_elem;
          bool _3057_isDatatype = _2973___mcc_h45;
          bool _3058_isConstant = _2972___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3059_field = _2971___mcc_h43;
          DAST._IExpression _3060_on = _2970___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3061_onString;
            bool _3062_onOwned;
            bool _3063_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3064_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1550;
            bool _out1551;
            bool _out1552;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1553;
            DCOMP.COMP.GenExpr(_3060_on, selfIdent, @params, false, out _out1550, out _out1551, out _out1552, out _out1553);
            _3061_onString = _out1550;
            _3062_onOwned = _out1551;
            _3063_onErased = _out1552;
            _3064_recIdents = _out1553;
            if ((_3057_isDatatype) || (_3058_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3061_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3059_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3058_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3061_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3059_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3064_recIdents;
          }
        } else if (_source128.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _3065___mcc_h84 = _source128.dtor_elements;
          DAST._IType _3066___mcc_h85 = _source128.dtor_typ;
          bool _3067_isDatatype = _2973___mcc_h45;
          bool _3068_isConstant = _2972___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3069_field = _2971___mcc_h43;
          DAST._IExpression _3070_on = _2970___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3071_onString;
            bool _3072_onOwned;
            bool _3073_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3074_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1554;
            bool _out1555;
            bool _out1556;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1557;
            DCOMP.COMP.GenExpr(_3070_on, selfIdent, @params, false, out _out1554, out _out1555, out _out1556, out _out1557);
            _3071_onString = _out1554;
            _3072_onOwned = _out1555;
            _3073_onErased = _out1556;
            _3074_recIdents = _out1557;
            if ((_3067_isDatatype) || (_3068_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3071_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3069_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3068_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3071_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3069_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3074_recIdents;
          }
        } else if (_source128.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _3075___mcc_h88 = _source128.dtor_elements;
          bool _3076_isDatatype = _2973___mcc_h45;
          bool _3077_isConstant = _2972___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3078_field = _2971___mcc_h43;
          DAST._IExpression _3079_on = _2970___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3080_onString;
            bool _3081_onOwned;
            bool _3082_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3083_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1558;
            bool _out1559;
            bool _out1560;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1561;
            DCOMP.COMP.GenExpr(_3079_on, selfIdent, @params, false, out _out1558, out _out1559, out _out1560, out _out1561);
            _3080_onString = _out1558;
            _3081_onOwned = _out1559;
            _3082_onErased = _out1560;
            _3083_recIdents = _out1561;
            if ((_3076_isDatatype) || (_3077_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3080_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3078_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3077_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3080_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3078_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3083_recIdents;
          }
        } else if (_source128.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3084___mcc_h90 = _source128.dtor_mapElems;
          bool _3085_isDatatype = _2973___mcc_h45;
          bool _3086_isConstant = _2972___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3087_field = _2971___mcc_h43;
          DAST._IExpression _3088_on = _2970___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3089_onString;
            bool _3090_onOwned;
            bool _3091_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3092_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1562;
            bool _out1563;
            bool _out1564;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1565;
            DCOMP.COMP.GenExpr(_3088_on, selfIdent, @params, false, out _out1562, out _out1563, out _out1564, out _out1565);
            _3089_onString = _out1562;
            _3090_onOwned = _out1563;
            _3091_onErased = _out1564;
            _3092_recIdents = _out1565;
            if ((_3085_isDatatype) || (_3086_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3089_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3087_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3086_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3089_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3087_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3092_recIdents;
          }
        } else if (_source128.is_This) {
          bool _3093_isDatatype = _2973___mcc_h45;
          bool _3094_isConstant = _2972___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3095_field = _2971___mcc_h43;
          DAST._IExpression _3096_on = _2970___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3097_onString;
            bool _3098_onOwned;
            bool _3099_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3100_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1566;
            bool _out1567;
            bool _out1568;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1569;
            DCOMP.COMP.GenExpr(_3096_on, selfIdent, @params, false, out _out1566, out _out1567, out _out1568, out _out1569);
            _3097_onString = _out1566;
            _3098_onOwned = _out1567;
            _3099_onErased = _out1568;
            _3100_recIdents = _out1569;
            if ((_3093_isDatatype) || (_3094_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3097_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3095_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3094_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3097_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3095_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3100_recIdents;
          }
        } else if (_source128.is_Ite) {
          DAST._IExpression _3101___mcc_h92 = _source128.dtor_cond;
          DAST._IExpression _3102___mcc_h93 = _source128.dtor_thn;
          DAST._IExpression _3103___mcc_h94 = _source128.dtor_els;
          bool _3104_isDatatype = _2973___mcc_h45;
          bool _3105_isConstant = _2972___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3106_field = _2971___mcc_h43;
          DAST._IExpression _3107_on = _2970___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3108_onString;
            bool _3109_onOwned;
            bool _3110_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3111_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1570;
            bool _out1571;
            bool _out1572;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1573;
            DCOMP.COMP.GenExpr(_3107_on, selfIdent, @params, false, out _out1570, out _out1571, out _out1572, out _out1573);
            _3108_onString = _out1570;
            _3109_onOwned = _out1571;
            _3110_onErased = _out1572;
            _3111_recIdents = _out1573;
            if ((_3104_isDatatype) || (_3105_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3108_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3106_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3105_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3108_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3106_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3111_recIdents;
          }
        } else if (_source128.is_UnOp) {
          DAST._IUnaryOp _3112___mcc_h98 = _source128.dtor_unOp;
          DAST._IExpression _3113___mcc_h99 = _source128.dtor_expr;
          bool _3114_isDatatype = _2973___mcc_h45;
          bool _3115_isConstant = _2972___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3116_field = _2971___mcc_h43;
          DAST._IExpression _3117_on = _2970___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3118_onString;
            bool _3119_onOwned;
            bool _3120_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3121_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1574;
            bool _out1575;
            bool _out1576;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1577;
            DCOMP.COMP.GenExpr(_3117_on, selfIdent, @params, false, out _out1574, out _out1575, out _out1576, out _out1577);
            _3118_onString = _out1574;
            _3119_onOwned = _out1575;
            _3120_onErased = _out1576;
            _3121_recIdents = _out1577;
            if ((_3114_isDatatype) || (_3115_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3118_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3116_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3115_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3118_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3116_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3121_recIdents;
          }
        } else if (_source128.is_BinOp) {
          DAST._IBinOp _3122___mcc_h102 = _source128.dtor_op;
          DAST._IExpression _3123___mcc_h103 = _source128.dtor_left;
          DAST._IExpression _3124___mcc_h104 = _source128.dtor_right;
          bool _3125_isDatatype = _2973___mcc_h45;
          bool _3126_isConstant = _2972___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3127_field = _2971___mcc_h43;
          DAST._IExpression _3128_on = _2970___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3129_onString;
            bool _3130_onOwned;
            bool _3131_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3132_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1578;
            bool _out1579;
            bool _out1580;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1581;
            DCOMP.COMP.GenExpr(_3128_on, selfIdent, @params, false, out _out1578, out _out1579, out _out1580, out _out1581);
            _3129_onString = _out1578;
            _3130_onOwned = _out1579;
            _3131_onErased = _out1580;
            _3132_recIdents = _out1581;
            if ((_3125_isDatatype) || (_3126_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3129_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3127_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3126_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3129_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3127_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3132_recIdents;
          }
        } else if (_source128.is_ArrayLen) {
          DAST._IExpression _3133___mcc_h108 = _source128.dtor_expr;
          BigInteger _3134___mcc_h109 = _source128.dtor_dim;
          bool _3135_isDatatype = _2973___mcc_h45;
          bool _3136_isConstant = _2972___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3137_field = _2971___mcc_h43;
          DAST._IExpression _3138_on = _2970___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3139_onString;
            bool _3140_onOwned;
            bool _3141_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3142_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1582;
            bool _out1583;
            bool _out1584;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1585;
            DCOMP.COMP.GenExpr(_3138_on, selfIdent, @params, false, out _out1582, out _out1583, out _out1584, out _out1585);
            _3139_onString = _out1582;
            _3140_onOwned = _out1583;
            _3141_onErased = _out1584;
            _3142_recIdents = _out1585;
            if ((_3135_isDatatype) || (_3136_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3139_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3137_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3136_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3139_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3137_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3142_recIdents;
          }
        } else if (_source128.is_Select) {
          DAST._IExpression _3143___mcc_h112 = _source128.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _3144___mcc_h113 = _source128.dtor_field;
          bool _3145___mcc_h114 = _source128.dtor_isConstant;
          bool _3146___mcc_h115 = _source128.dtor_onDatatype;
          bool _3147_isDatatype = _2973___mcc_h45;
          bool _3148_isConstant = _2972___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3149_field = _2971___mcc_h43;
          DAST._IExpression _3150_on = _2970___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3151_onString;
            bool _3152_onOwned;
            bool _3153_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3154_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1586;
            bool _out1587;
            bool _out1588;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1589;
            DCOMP.COMP.GenExpr(_3150_on, selfIdent, @params, false, out _out1586, out _out1587, out _out1588, out _out1589);
            _3151_onString = _out1586;
            _3152_onOwned = _out1587;
            _3153_onErased = _out1588;
            _3154_recIdents = _out1589;
            if ((_3147_isDatatype) || (_3148_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3151_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3149_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3148_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3151_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3149_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3154_recIdents;
          }
        } else if (_source128.is_SelectFn) {
          DAST._IExpression _3155___mcc_h120 = _source128.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _3156___mcc_h121 = _source128.dtor_field;
          bool _3157___mcc_h122 = _source128.dtor_onDatatype;
          bool _3158___mcc_h123 = _source128.dtor_isStatic;
          BigInteger _3159___mcc_h124 = _source128.dtor_arity;
          bool _3160_isDatatype = _2973___mcc_h45;
          bool _3161_isConstant = _2972___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3162_field = _2971___mcc_h43;
          DAST._IExpression _3163_on = _2970___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3164_onString;
            bool _3165_onOwned;
            bool _3166_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3167_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1590;
            bool _out1591;
            bool _out1592;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1593;
            DCOMP.COMP.GenExpr(_3163_on, selfIdent, @params, false, out _out1590, out _out1591, out _out1592, out _out1593);
            _3164_onString = _out1590;
            _3165_onOwned = _out1591;
            _3166_onErased = _out1592;
            _3167_recIdents = _out1593;
            if ((_3160_isDatatype) || (_3161_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3164_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3162_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3161_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3164_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3162_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3167_recIdents;
          }
        } else if (_source128.is_Index) {
          DAST._IExpression _3168___mcc_h130 = _source128.dtor_expr;
          DAST._ICollKind _3169___mcc_h131 = _source128.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _3170___mcc_h132 = _source128.dtor_indices;
          bool _3171_isDatatype = _2973___mcc_h45;
          bool _3172_isConstant = _2972___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3173_field = _2971___mcc_h43;
          DAST._IExpression _3174_on = _2970___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3175_onString;
            bool _3176_onOwned;
            bool _3177_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3178_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1594;
            bool _out1595;
            bool _out1596;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1597;
            DCOMP.COMP.GenExpr(_3174_on, selfIdent, @params, false, out _out1594, out _out1595, out _out1596, out _out1597);
            _3175_onString = _out1594;
            _3176_onOwned = _out1595;
            _3177_onErased = _out1596;
            _3178_recIdents = _out1597;
            if ((_3171_isDatatype) || (_3172_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3175_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3173_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3172_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3175_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3173_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3178_recIdents;
          }
        } else if (_source128.is_IndexRange) {
          DAST._IExpression _3179___mcc_h136 = _source128.dtor_expr;
          bool _3180___mcc_h137 = _source128.dtor_isArray;
          DAST._IOptional<DAST._IExpression> _3181___mcc_h138 = _source128.dtor_low;
          DAST._IOptional<DAST._IExpression> _3182___mcc_h139 = _source128.dtor_high;
          bool _3183_isDatatype = _2973___mcc_h45;
          bool _3184_isConstant = _2972___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3185_field = _2971___mcc_h43;
          DAST._IExpression _3186_on = _2970___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3187_onString;
            bool _3188_onOwned;
            bool _3189_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3190_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1598;
            bool _out1599;
            bool _out1600;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1601;
            DCOMP.COMP.GenExpr(_3186_on, selfIdent, @params, false, out _out1598, out _out1599, out _out1600, out _out1601);
            _3187_onString = _out1598;
            _3188_onOwned = _out1599;
            _3189_onErased = _out1600;
            _3190_recIdents = _out1601;
            if ((_3183_isDatatype) || (_3184_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3187_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3185_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3184_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3187_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3185_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3190_recIdents;
          }
        } else if (_source128.is_TupleSelect) {
          DAST._IExpression _3191___mcc_h144 = _source128.dtor_expr;
          BigInteger _3192___mcc_h145 = _source128.dtor_index;
          bool _3193_isDatatype = _2973___mcc_h45;
          bool _3194_isConstant = _2972___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3195_field = _2971___mcc_h43;
          DAST._IExpression _3196_on = _2970___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3197_onString;
            bool _3198_onOwned;
            bool _3199_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3200_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1602;
            bool _out1603;
            bool _out1604;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1605;
            DCOMP.COMP.GenExpr(_3196_on, selfIdent, @params, false, out _out1602, out _out1603, out _out1604, out _out1605);
            _3197_onString = _out1602;
            _3198_onOwned = _out1603;
            _3199_onErased = _out1604;
            _3200_recIdents = _out1605;
            if ((_3193_isDatatype) || (_3194_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3197_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3195_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3194_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3197_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3195_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3200_recIdents;
          }
        } else if (_source128.is_Call) {
          DAST._IExpression _3201___mcc_h148 = _source128.dtor_on;
          Dafny.ISequence<Dafny.Rune> _3202___mcc_h149 = _source128.dtor_name;
          Dafny.ISequence<DAST._IType> _3203___mcc_h150 = _source128.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _3204___mcc_h151 = _source128.dtor_args;
          bool _3205_isDatatype = _2973___mcc_h45;
          bool _3206_isConstant = _2972___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3207_field = _2971___mcc_h43;
          DAST._IExpression _3208_on = _2970___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3209_onString;
            bool _3210_onOwned;
            bool _3211_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3212_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1606;
            bool _out1607;
            bool _out1608;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1609;
            DCOMP.COMP.GenExpr(_3208_on, selfIdent, @params, false, out _out1606, out _out1607, out _out1608, out _out1609);
            _3209_onString = _out1606;
            _3210_onOwned = _out1607;
            _3211_onErased = _out1608;
            _3212_recIdents = _out1609;
            if ((_3205_isDatatype) || (_3206_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3209_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3207_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3206_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3209_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3207_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3212_recIdents;
          }
        } else if (_source128.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _3213___mcc_h156 = _source128.dtor_params;
          DAST._IType _3214___mcc_h157 = _source128.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _3215___mcc_h158 = _source128.dtor_body;
          bool _3216_isDatatype = _2973___mcc_h45;
          bool _3217_isConstant = _2972___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3218_field = _2971___mcc_h43;
          DAST._IExpression _3219_on = _2970___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3220_onString;
            bool _3221_onOwned;
            bool _3222_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3223_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1610;
            bool _out1611;
            bool _out1612;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1613;
            DCOMP.COMP.GenExpr(_3219_on, selfIdent, @params, false, out _out1610, out _out1611, out _out1612, out _out1613);
            _3220_onString = _out1610;
            _3221_onOwned = _out1611;
            _3222_onErased = _out1612;
            _3223_recIdents = _out1613;
            if ((_3216_isDatatype) || (_3217_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3220_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3218_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3217_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3220_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3218_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3223_recIdents;
          }
        } else if (_source128.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3224___mcc_h162 = _source128.dtor_values;
          DAST._IType _3225___mcc_h163 = _source128.dtor_retType;
          DAST._IExpression _3226___mcc_h164 = _source128.dtor_expr;
          bool _3227_isDatatype = _2973___mcc_h45;
          bool _3228_isConstant = _2972___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3229_field = _2971___mcc_h43;
          DAST._IExpression _3230_on = _2970___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3231_onString;
            bool _3232_onOwned;
            bool _3233_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3234_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1614;
            bool _out1615;
            bool _out1616;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1617;
            DCOMP.COMP.GenExpr(_3230_on, selfIdent, @params, false, out _out1614, out _out1615, out _out1616, out _out1617);
            _3231_onString = _out1614;
            _3232_onOwned = _out1615;
            _3233_onErased = _out1616;
            _3234_recIdents = _out1617;
            if ((_3227_isDatatype) || (_3228_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3231_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3229_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3228_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3231_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3229_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3234_recIdents;
          }
        } else if (_source128.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _3235___mcc_h168 = _source128.dtor_name;
          DAST._IType _3236___mcc_h169 = _source128.dtor_typ;
          DAST._IExpression _3237___mcc_h170 = _source128.dtor_value;
          DAST._IExpression _3238___mcc_h171 = _source128.dtor_iifeBody;
          bool _3239_isDatatype = _2973___mcc_h45;
          bool _3240_isConstant = _2972___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3241_field = _2971___mcc_h43;
          DAST._IExpression _3242_on = _2970___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3243_onString;
            bool _3244_onOwned;
            bool _3245_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3246_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1618;
            bool _out1619;
            bool _out1620;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1621;
            DCOMP.COMP.GenExpr(_3242_on, selfIdent, @params, false, out _out1618, out _out1619, out _out1620, out _out1621);
            _3243_onString = _out1618;
            _3244_onOwned = _out1619;
            _3245_onErased = _out1620;
            _3246_recIdents = _out1621;
            if ((_3239_isDatatype) || (_3240_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3243_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3241_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3240_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3243_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3241_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3246_recIdents;
          }
        } else if (_source128.is_Apply) {
          DAST._IExpression _3247___mcc_h176 = _source128.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _3248___mcc_h177 = _source128.dtor_args;
          bool _3249_isDatatype = _2973___mcc_h45;
          bool _3250_isConstant = _2972___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3251_field = _2971___mcc_h43;
          DAST._IExpression _3252_on = _2970___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3253_onString;
            bool _3254_onOwned;
            bool _3255_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3256_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1622;
            bool _out1623;
            bool _out1624;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1625;
            DCOMP.COMP.GenExpr(_3252_on, selfIdent, @params, false, out _out1622, out _out1623, out _out1624, out _out1625);
            _3253_onString = _out1622;
            _3254_onOwned = _out1623;
            _3255_onErased = _out1624;
            _3256_recIdents = _out1625;
            if ((_3249_isDatatype) || (_3250_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3253_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3251_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3250_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3253_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3251_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3256_recIdents;
          }
        } else if (_source128.is_TypeTest) {
          DAST._IExpression _3257___mcc_h180 = _source128.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3258___mcc_h181 = _source128.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _3259___mcc_h182 = _source128.dtor_variant;
          bool _3260_isDatatype = _2973___mcc_h45;
          bool _3261_isConstant = _2972___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3262_field = _2971___mcc_h43;
          DAST._IExpression _3263_on = _2970___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3264_onString;
            bool _3265_onOwned;
            bool _3266_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3267_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1626;
            bool _out1627;
            bool _out1628;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1629;
            DCOMP.COMP.GenExpr(_3263_on, selfIdent, @params, false, out _out1626, out _out1627, out _out1628, out _out1629);
            _3264_onString = _out1626;
            _3265_onOwned = _out1627;
            _3266_onErased = _out1628;
            _3267_recIdents = _out1629;
            if ((_3260_isDatatype) || (_3261_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3264_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3262_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3261_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3264_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3262_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3267_recIdents;
          }
        } else if (_source128.is_InitializationValue) {
          DAST._IType _3268___mcc_h186 = _source128.dtor_typ;
          bool _3269_isDatatype = _2973___mcc_h45;
          bool _3270_isConstant = _2972___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3271_field = _2971___mcc_h43;
          DAST._IExpression _3272_on = _2970___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3273_onString;
            bool _3274_onOwned;
            bool _3275_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3276_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1630;
            bool _out1631;
            bool _out1632;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1633;
            DCOMP.COMP.GenExpr(_3272_on, selfIdent, @params, false, out _out1630, out _out1631, out _out1632, out _out1633);
            _3273_onString = _out1630;
            _3274_onOwned = _out1631;
            _3275_onErased = _out1632;
            _3276_recIdents = _out1633;
            if ((_3269_isDatatype) || (_3270_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3273_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3271_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3270_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3273_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3271_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3276_recIdents;
          }
        } else if (_source128.is_BoolBoundedPool) {
          bool _3277_isDatatype = _2973___mcc_h45;
          bool _3278_isConstant = _2972___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3279_field = _2971___mcc_h43;
          DAST._IExpression _3280_on = _2970___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3281_onString;
            bool _3282_onOwned;
            bool _3283_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3284_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1634;
            bool _out1635;
            bool _out1636;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1637;
            DCOMP.COMP.GenExpr(_3280_on, selfIdent, @params, false, out _out1634, out _out1635, out _out1636, out _out1637);
            _3281_onString = _out1634;
            _3282_onOwned = _out1635;
            _3283_onErased = _out1636;
            _3284_recIdents = _out1637;
            if ((_3277_isDatatype) || (_3278_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3281_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3279_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3278_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3281_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3279_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3284_recIdents;
          }
        } else if (_source128.is_SetBoundedPool) {
          DAST._IExpression _3285___mcc_h188 = _source128.dtor_of;
          bool _3286_isDatatype = _2973___mcc_h45;
          bool _3287_isConstant = _2972___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3288_field = _2971___mcc_h43;
          DAST._IExpression _3289_on = _2970___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3290_onString;
            bool _3291_onOwned;
            bool _3292_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3293_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1638;
            bool _out1639;
            bool _out1640;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1641;
            DCOMP.COMP.GenExpr(_3289_on, selfIdent, @params, false, out _out1638, out _out1639, out _out1640, out _out1641);
            _3290_onString = _out1638;
            _3291_onOwned = _out1639;
            _3292_onErased = _out1640;
            _3293_recIdents = _out1641;
            if ((_3286_isDatatype) || (_3287_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3290_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3288_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3287_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3290_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3288_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3293_recIdents;
          }
        } else if (_source128.is_SeqBoundedPool) {
          DAST._IExpression _3294___mcc_h190 = _source128.dtor_of;
          bool _3295___mcc_h191 = _source128.dtor_includeDuplicates;
          bool _3296_isDatatype = _2973___mcc_h45;
          bool _3297_isConstant = _2972___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3298_field = _2971___mcc_h43;
          DAST._IExpression _3299_on = _2970___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3300_onString;
            bool _3301_onOwned;
            bool _3302_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3303_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1642;
            bool _out1643;
            bool _out1644;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1645;
            DCOMP.COMP.GenExpr(_3299_on, selfIdent, @params, false, out _out1642, out _out1643, out _out1644, out _out1645);
            _3300_onString = _out1642;
            _3301_onOwned = _out1643;
            _3302_onErased = _out1644;
            _3303_recIdents = _out1645;
            if ((_3296_isDatatype) || (_3297_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3300_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3298_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3297_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3300_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3298_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3303_recIdents;
          }
        } else {
          DAST._IExpression _3304___mcc_h194 = _source128.dtor_lo;
          DAST._IExpression _3305___mcc_h195 = _source128.dtor_hi;
          bool _3306_isDatatype = _2973___mcc_h45;
          bool _3307_isConstant = _2972___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3308_field = _2971___mcc_h43;
          DAST._IExpression _3309_on = _2970___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3310_onString;
            bool _3311_onOwned;
            bool _3312_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3313_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1646;
            bool _out1647;
            bool _out1648;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1649;
            DCOMP.COMP.GenExpr(_3309_on, selfIdent, @params, false, out _out1646, out _out1647, out _out1648, out _out1649);
            _3310_onString = _out1646;
            _3311_onOwned = _out1647;
            _3312_onErased = _out1648;
            _3313_recIdents = _out1649;
            if ((_3306_isDatatype) || (_3307_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3310_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3308_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3307_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3310_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3308_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3313_recIdents;
          }
        }
      } else if (_source68.is_SelectFn) {
        DAST._IExpression _3314___mcc_h198 = _source68.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _3315___mcc_h199 = _source68.dtor_field;
        bool _3316___mcc_h200 = _source68.dtor_onDatatype;
        bool _3317___mcc_h201 = _source68.dtor_isStatic;
        BigInteger _3318___mcc_h202 = _source68.dtor_arity;
        BigInteger _3319_arity = _3318___mcc_h202;
        bool _3320_isStatic = _3317___mcc_h201;
        bool _3321_isDatatype = _3316___mcc_h200;
        Dafny.ISequence<Dafny.Rune> _3322_field = _3315___mcc_h199;
        DAST._IExpression _3323_on = _3314___mcc_h198;
        {
          Dafny.ISequence<Dafny.Rune> _3324_onString;
          bool _3325_onOwned;
          bool _3326___v82;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3327_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1650;
          bool _out1651;
          bool _out1652;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1653;
          DCOMP.COMP.GenExpr(_3323_on, selfIdent, @params, false, out _out1650, out _out1651, out _out1652, out _out1653);
          _3324_onString = _out1650;
          _3325_onOwned = _out1651;
          _3326___v82 = _out1652;
          _3327_recIdents = _out1653;
          if (_3320_isStatic) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3324_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _3322_field);
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _3324_onString), ((_3325_onOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _3328_args;
            _3328_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _3329_i;
            _3329_i = BigInteger.Zero;
            while ((_3329_i) < (_3319_arity)) {
              if ((_3329_i).Sign == 1) {
                _3328_args = Dafny.Sequence<Dafny.Rune>.Concat(_3328_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _3328_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3328_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), DCOMP.__default.natToString(_3329_i));
              _3329_i = (_3329_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _3328_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), _3322_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3328_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _3330_typeShape;
          _3330_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _3331_i;
          _3331_i = BigInteger.Zero;
          while ((_3331_i) < (_3319_arity)) {
            if ((_3331_i).Sign == 1) {
              _3330_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_3330_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _3330_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_3330_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _3331_i = (_3331_i) + (BigInteger.One);
          }
          _3330_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_3330_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper(::std::rc::Rc::new("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _3330_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
          readIdents = _3327_recIdents;
        }
      } else if (_source68.is_Index) {
        DAST._IExpression _3332___mcc_h203 = _source68.dtor_expr;
        DAST._ICollKind _3333___mcc_h204 = _source68.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _3334___mcc_h205 = _source68.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _3335_indices = _3334___mcc_h205;
        DAST._ICollKind _3336_collKind = _3333___mcc_h204;
        DAST._IExpression _3337_on = _3332___mcc_h203;
        {
          Dafny.ISequence<Dafny.Rune> _3338_onString;
          bool _3339_onOwned;
          bool _3340_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3341_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1654;
          bool _out1655;
          bool _out1656;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1657;
          DCOMP.COMP.GenExpr(_3337_on, selfIdent, @params, false, out _out1654, out _out1655, out _out1656, out _out1657);
          _3338_onString = _out1654;
          _3339_onOwned = _out1655;
          _3340_onErased = _out1656;
          _3341_recIdents = _out1657;
          readIdents = _3341_recIdents;
          s = _3338_onString;
          BigInteger _3342_i;
          _3342_i = BigInteger.Zero;
          while ((_3342_i) < (new BigInteger((_3335_indices).Count))) {
            if (object.Equals(_3336_collKind, DAST.CollKind.create_Array())) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
            }
            if (object.Equals(_3336_collKind, DAST.CollKind.create_Map())) {
              Dafny.ISequence<Dafny.Rune> _3343_idx;
              bool _3344_idxOwned;
              bool _3345_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3346_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1658;
              bool _out1659;
              bool _out1660;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1661;
              DCOMP.COMP.GenExpr((_3335_indices).Select(_3342_i), selfIdent, @params, false, out _out1658, out _out1659, out _out1660, out _out1661);
              _3343_idx = _out1658;
              _3344_idxOwned = _out1659;
              _3345_idxErased = _out1660;
              _3346_recIdentsIdx = _out1661;
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[")), ((_3344_idxOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), _3343_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3346_recIdentsIdx);
            } else {
              Dafny.ISequence<Dafny.Rune> _3347_idx;
              bool _3348___v83;
              bool _3349_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3350_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1662;
              bool _out1663;
              bool _out1664;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1665;
              DCOMP.COMP.GenExpr((_3335_indices).Select(_3342_i), selfIdent, @params, true, out _out1662, out _out1663, out _out1664, out _out1665);
              _3347_idx = _out1662;
              _3348___v83 = _out1663;
              _3349_idxErased = _out1664;
              _3350_recIdentsIdx = _out1665;
              if (!(_3349_idxErased)) {
                _3347_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3347_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[<usize as ::dafny_runtime::NumCast>::from(")), _3347_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3350_recIdentsIdx);
            }
            _3342_i = (_3342_i) + (BigInteger.One);
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = false;
          }
          isErased = _3340_onErased;
        }
      } else if (_source68.is_IndexRange) {
        DAST._IExpression _3351___mcc_h206 = _source68.dtor_expr;
        bool _3352___mcc_h207 = _source68.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _3353___mcc_h208 = _source68.dtor_low;
        DAST._IOptional<DAST._IExpression> _3354___mcc_h209 = _source68.dtor_high;
        DAST._IOptional<DAST._IExpression> _3355_high = _3354___mcc_h209;
        DAST._IOptional<DAST._IExpression> _3356_low = _3353___mcc_h208;
        bool _3357_isArray = _3352___mcc_h207;
        DAST._IExpression _3358_on = _3351___mcc_h206;
        {
          Dafny.ISequence<Dafny.Rune> _3359_onString;
          bool _3360_onOwned;
          bool _3361_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3362_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1666;
          bool _out1667;
          bool _out1668;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1669;
          DCOMP.COMP.GenExpr(_3358_on, selfIdent, @params, false, out _out1666, out _out1667, out _out1668, out _out1669);
          _3359_onString = _out1666;
          _3360_onOwned = _out1667;
          _3361_onErased = _out1668;
          _3362_recIdents = _out1669;
          readIdents = _3362_recIdents;
          s = _3359_onString;
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _3363_lowString;
          _3363_lowString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None();
          DAST._IOptional<DAST._IExpression> _source129 = _3356_low;
          if (_source129.is_Some) {
            DAST._IExpression _3364___mcc_h1195 = _source129.dtor_Some_a0;
            DAST._IExpression _3365_l = _3364___mcc_h1195;
            {
              Dafny.ISequence<Dafny.Rune> _3366_lString;
              bool _3367___v84;
              bool _3368_lErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3369_recIdentsL;
              Dafny.ISequence<Dafny.Rune> _out1670;
              bool _out1671;
              bool _out1672;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1673;
              DCOMP.COMP.GenExpr(_3365_l, selfIdent, @params, true, out _out1670, out _out1671, out _out1672, out _out1673);
              _3366_lString = _out1670;
              _3367___v84 = _out1671;
              _3368_lErased = _out1672;
              _3369_recIdentsL = _out1673;
              if (!(_3368_lErased)) {
                _3366_lString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3366_lString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _3363_lowString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(_3366_lString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3369_recIdentsL);
            }
          } else {
          }
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _3370_highString;
          _3370_highString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None();
          DAST._IOptional<DAST._IExpression> _source130 = _3355_high;
          if (_source130.is_Some) {
            DAST._IExpression _3371___mcc_h1196 = _source130.dtor_Some_a0;
            DAST._IExpression _3372_h = _3371___mcc_h1196;
            {
              Dafny.ISequence<Dafny.Rune> _3373_hString;
              bool _3374___v85;
              bool _3375_hErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3376_recIdentsH;
              Dafny.ISequence<Dafny.Rune> _out1674;
              bool _out1675;
              bool _out1676;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1677;
              DCOMP.COMP.GenExpr(_3372_h, selfIdent, @params, true, out _out1674, out _out1675, out _out1676, out _out1677);
              _3373_hString = _out1674;
              _3374___v85 = _out1675;
              _3375_hErased = _out1676;
              _3376_recIdentsH = _out1677;
              if (!(_3375_hErased)) {
                _3373_hString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3373_hString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _3370_highString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(_3373_hString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3376_recIdentsH);
            }
          } else {
          }
          if (_3357_isArray) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[")), ((System.Func<DAST._IOptional<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source131) => {
            if (_source131.is_Some) {
              Dafny.ISequence<Dafny.Rune> _3377___mcc_h1197 = _source131.dtor_Some_a0;
              Dafny.ISequence<Dafny.Rune> _3378_l = _3377___mcc_h1197;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _3378_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            }
          }))(_3363_lowString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("..")), ((System.Func<DAST._IOptional<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source132) => {
            if (_source132.is_Some) {
              Dafny.ISequence<Dafny.Rune> _3379___mcc_h1198 = _source132.dtor_Some_a0;
              Dafny.ISequence<Dafny.Rune> _3380_h = _3379___mcc_h1198;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _3380_h), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            }
          }))(_3370_highString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
          isErased = _3361_onErased;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".to_vec())"));
          isOwned = true;
        }
      } else if (_source68.is_TupleSelect) {
        DAST._IExpression _3381___mcc_h210 = _source68.dtor_expr;
        BigInteger _3382___mcc_h211 = _source68.dtor_index;
        BigInteger _3383_idx = _3382___mcc_h211;
        DAST._IExpression _3384_on = _3381___mcc_h210;
        {
          Dafny.ISequence<Dafny.Rune> _3385_onString;
          bool _3386___v86;
          bool _3387_tupErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3388_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1678;
          bool _out1679;
          bool _out1680;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1681;
          DCOMP.COMP.GenExpr(_3384_on, selfIdent, @params, false, out _out1678, out _out1679, out _out1680, out _out1681);
          _3385_onString = _out1678;
          _3386___v86 = _out1679;
          _3387_tupErased = _out1680;
          _3388_recIdents = _out1681;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3385_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.natToString(_3383_idx));
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
            isOwned = false;
          }
          isErased = _3387_tupErased;
          readIdents = _3388_recIdents;
        }
      } else if (_source68.is_Call) {
        DAST._IExpression _3389___mcc_h212 = _source68.dtor_on;
        Dafny.ISequence<Dafny.Rune> _3390___mcc_h213 = _source68.dtor_name;
        Dafny.ISequence<DAST._IType> _3391___mcc_h214 = _source68.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _3392___mcc_h215 = _source68.dtor_args;
        Dafny.ISequence<DAST._IExpression> _3393_args = _3392___mcc_h215;
        Dafny.ISequence<DAST._IType> _3394_typeArgs = _3391___mcc_h214;
        Dafny.ISequence<Dafny.Rune> _3395_name = _3390___mcc_h213;
        DAST._IExpression _3396_on = _3389___mcc_h212;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3397_typeArgString;
          _3397_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_3394_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _3398_typeI;
            _3398_typeI = BigInteger.Zero;
            _3397_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_3398_typeI) < (new BigInteger((_3394_typeArgs).Count))) {
              if ((_3398_typeI).Sign == 1) {
                _3397_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3397_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _3399_typeString;
              Dafny.ISequence<Dafny.Rune> _out1682;
              _out1682 = DCOMP.COMP.GenType((_3394_typeArgs).Select(_3398_typeI), false, false);
              _3399_typeString = _out1682;
              _3397_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3397_typeArgString, _3399_typeString);
              _3398_typeI = (_3398_typeI) + (BigInteger.One);
            }
            _3397_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3397_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _3400_argString;
          _3400_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _3401_i;
          _3401_i = BigInteger.Zero;
          while ((_3401_i) < (new BigInteger((_3393_args).Count))) {
            if ((_3401_i).Sign == 1) {
              _3400_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3400_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3402_argExpr;
            bool _3403_isOwned;
            bool _3404_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3405_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1683;
            bool _out1684;
            bool _out1685;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1686;
            DCOMP.COMP.GenExpr((_3393_args).Select(_3401_i), selfIdent, @params, false, out _out1683, out _out1684, out _out1685, out _out1686);
            _3402_argExpr = _out1683;
            _3403_isOwned = _out1684;
            _3404_argErased = _out1685;
            _3405_argIdents = _out1686;
            if (_3403_isOwned) {
              _3402_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _3402_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (!(_3404_argErased)) {
              _3402_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase("), _3402_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _3402_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::unerase("), _3402_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _3400_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3400_argString, _3402_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3405_argIdents);
            _3401_i = (_3401_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3406_enclosingString;
          bool _3407___v87;
          bool _3408___v88;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3409_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1687;
          bool _out1688;
          bool _out1689;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1690;
          DCOMP.COMP.GenExpr(_3396_on, selfIdent, @params, false, out _out1687, out _out1688, out _out1689, out _out1690);
          _3406_enclosingString = _out1687;
          _3407___v87 = _out1688;
          _3408___v88 = _out1689;
          _3409_recIdents = _out1690;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3409_recIdents);
          DAST._IExpression _source133 = _3396_on;
          if (_source133.is_Literal) {
            DAST._ILiteral _3410___mcc_h1199 = _source133.dtor_Literal_a0;
            {
              _3406_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3406_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3395_name)));
            }
          } else if (_source133.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _3411___mcc_h1201 = _source133.dtor_Ident_a0;
            {
              _3406_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3406_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3395_name)));
            }
          } else if (_source133.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3412___mcc_h1203 = _source133.dtor_Companion_a0;
            {
              _3406_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3406_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_3395_name)));
            }
          } else if (_source133.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _3413___mcc_h1205 = _source133.dtor_Tuple_a0;
            {
              _3406_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3406_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3395_name)));
            }
          } else if (_source133.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3414___mcc_h1207 = _source133.dtor_path;
            Dafny.ISequence<DAST._IType> _3415___mcc_h1208 = _source133.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _3416___mcc_h1209 = _source133.dtor_args;
            {
              _3406_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3406_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3395_name)));
            }
          } else if (_source133.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _3417___mcc_h1213 = _source133.dtor_dims;
            DAST._IType _3418___mcc_h1214 = _source133.dtor_typ;
            {
              _3406_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3406_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3395_name)));
            }
          } else if (_source133.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3419___mcc_h1217 = _source133.dtor_path;
            Dafny.ISequence<DAST._IType> _3420___mcc_h1218 = _source133.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _3421___mcc_h1219 = _source133.dtor_variant;
            bool _3422___mcc_h1220 = _source133.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _3423___mcc_h1221 = _source133.dtor_contents;
            {
              _3406_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3406_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3395_name)));
            }
          } else if (_source133.is_Convert) {
            DAST._IExpression _3424___mcc_h1227 = _source133.dtor_value;
            DAST._IType _3425___mcc_h1228 = _source133.dtor_from;
            DAST._IType _3426___mcc_h1229 = _source133.dtor_typ;
            {
              _3406_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3406_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3395_name)));
            }
          } else if (_source133.is_SeqConstruct) {
            DAST._IExpression _3427___mcc_h1233 = _source133.dtor_length;
            DAST._IExpression _3428___mcc_h1234 = _source133.dtor_elem;
            {
              _3406_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3406_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3395_name)));
            }
          } else if (_source133.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _3429___mcc_h1237 = _source133.dtor_elements;
            DAST._IType _3430___mcc_h1238 = _source133.dtor_typ;
            {
              _3406_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3406_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3395_name)));
            }
          } else if (_source133.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _3431___mcc_h1241 = _source133.dtor_elements;
            {
              _3406_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3406_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3395_name)));
            }
          } else if (_source133.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3432___mcc_h1243 = _source133.dtor_mapElems;
            {
              _3406_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3406_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3395_name)));
            }
          } else if (_source133.is_This) {
            {
              _3406_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3406_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3395_name)));
            }
          } else if (_source133.is_Ite) {
            DAST._IExpression _3433___mcc_h1245 = _source133.dtor_cond;
            DAST._IExpression _3434___mcc_h1246 = _source133.dtor_thn;
            DAST._IExpression _3435___mcc_h1247 = _source133.dtor_els;
            {
              _3406_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3406_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3395_name)));
            }
          } else if (_source133.is_UnOp) {
            DAST._IUnaryOp _3436___mcc_h1251 = _source133.dtor_unOp;
            DAST._IExpression _3437___mcc_h1252 = _source133.dtor_expr;
            {
              _3406_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3406_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3395_name)));
            }
          } else if (_source133.is_BinOp) {
            DAST._IBinOp _3438___mcc_h1255 = _source133.dtor_op;
            DAST._IExpression _3439___mcc_h1256 = _source133.dtor_left;
            DAST._IExpression _3440___mcc_h1257 = _source133.dtor_right;
            {
              _3406_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3406_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3395_name)));
            }
          } else if (_source133.is_ArrayLen) {
            DAST._IExpression _3441___mcc_h1261 = _source133.dtor_expr;
            BigInteger _3442___mcc_h1262 = _source133.dtor_dim;
            {
              _3406_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3406_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3395_name)));
            }
          } else if (_source133.is_Select) {
            DAST._IExpression _3443___mcc_h1265 = _source133.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _3444___mcc_h1266 = _source133.dtor_field;
            bool _3445___mcc_h1267 = _source133.dtor_isConstant;
            bool _3446___mcc_h1268 = _source133.dtor_onDatatype;
            {
              _3406_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3406_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3395_name)));
            }
          } else if (_source133.is_SelectFn) {
            DAST._IExpression _3447___mcc_h1273 = _source133.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _3448___mcc_h1274 = _source133.dtor_field;
            bool _3449___mcc_h1275 = _source133.dtor_onDatatype;
            bool _3450___mcc_h1276 = _source133.dtor_isStatic;
            BigInteger _3451___mcc_h1277 = _source133.dtor_arity;
            {
              _3406_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3406_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3395_name)));
            }
          } else if (_source133.is_Index) {
            DAST._IExpression _3452___mcc_h1283 = _source133.dtor_expr;
            DAST._ICollKind _3453___mcc_h1284 = _source133.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _3454___mcc_h1285 = _source133.dtor_indices;
            {
              _3406_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3406_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3395_name)));
            }
          } else if (_source133.is_IndexRange) {
            DAST._IExpression _3455___mcc_h1289 = _source133.dtor_expr;
            bool _3456___mcc_h1290 = _source133.dtor_isArray;
            DAST._IOptional<DAST._IExpression> _3457___mcc_h1291 = _source133.dtor_low;
            DAST._IOptional<DAST._IExpression> _3458___mcc_h1292 = _source133.dtor_high;
            {
              _3406_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3406_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3395_name)));
            }
          } else if (_source133.is_TupleSelect) {
            DAST._IExpression _3459___mcc_h1297 = _source133.dtor_expr;
            BigInteger _3460___mcc_h1298 = _source133.dtor_index;
            {
              _3406_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3406_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3395_name)));
            }
          } else if (_source133.is_Call) {
            DAST._IExpression _3461___mcc_h1301 = _source133.dtor_on;
            Dafny.ISequence<Dafny.Rune> _3462___mcc_h1302 = _source133.dtor_name;
            Dafny.ISequence<DAST._IType> _3463___mcc_h1303 = _source133.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _3464___mcc_h1304 = _source133.dtor_args;
            {
              _3406_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3406_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3395_name)));
            }
          } else if (_source133.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _3465___mcc_h1309 = _source133.dtor_params;
            DAST._IType _3466___mcc_h1310 = _source133.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _3467___mcc_h1311 = _source133.dtor_body;
            {
              _3406_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3406_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3395_name)));
            }
          } else if (_source133.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3468___mcc_h1315 = _source133.dtor_values;
            DAST._IType _3469___mcc_h1316 = _source133.dtor_retType;
            DAST._IExpression _3470___mcc_h1317 = _source133.dtor_expr;
            {
              _3406_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3406_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3395_name)));
            }
          } else if (_source133.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _3471___mcc_h1321 = _source133.dtor_name;
            DAST._IType _3472___mcc_h1322 = _source133.dtor_typ;
            DAST._IExpression _3473___mcc_h1323 = _source133.dtor_value;
            DAST._IExpression _3474___mcc_h1324 = _source133.dtor_iifeBody;
            {
              _3406_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3406_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3395_name)));
            }
          } else if (_source133.is_Apply) {
            DAST._IExpression _3475___mcc_h1329 = _source133.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _3476___mcc_h1330 = _source133.dtor_args;
            {
              _3406_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3406_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3395_name)));
            }
          } else if (_source133.is_TypeTest) {
            DAST._IExpression _3477___mcc_h1333 = _source133.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3478___mcc_h1334 = _source133.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _3479___mcc_h1335 = _source133.dtor_variant;
            {
              _3406_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3406_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3395_name)));
            }
          } else if (_source133.is_InitializationValue) {
            DAST._IType _3480___mcc_h1339 = _source133.dtor_typ;
            {
              _3406_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3406_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3395_name)));
            }
          } else if (_source133.is_BoolBoundedPool) {
            {
              _3406_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3406_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3395_name)));
            }
          } else if (_source133.is_SetBoundedPool) {
            DAST._IExpression _3481___mcc_h1341 = _source133.dtor_of;
            {
              _3406_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3406_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3395_name)));
            }
          } else if (_source133.is_SeqBoundedPool) {
            DAST._IExpression _3482___mcc_h1343 = _source133.dtor_of;
            bool _3483___mcc_h1344 = _source133.dtor_includeDuplicates;
            {
              _3406_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3406_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3395_name)));
            }
          } else {
            DAST._IExpression _3484___mcc_h1347 = _source133.dtor_lo;
            DAST._IExpression _3485___mcc_h1348 = _source133.dtor_hi;
            {
              _3406_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3406_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3395_name)));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3406_enclosingString, _3397_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3400_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source68.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _3486___mcc_h216 = _source68.dtor_params;
        DAST._IType _3487___mcc_h217 = _source68.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _3488___mcc_h218 = _source68.dtor_body;
        Dafny.ISequence<DAST._IStatement> _3489_body = _3488___mcc_h218;
        DAST._IType _3490_retType = _3487___mcc_h217;
        Dafny.ISequence<DAST._IFormal> _3491_params = _3486___mcc_h216;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3492_paramNames;
          _3492_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3493_i;
          _3493_i = BigInteger.Zero;
          while ((_3493_i) < (new BigInteger((_3491_params).Count))) {
            _3492_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_3492_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(((_3491_params).Select(_3493_i)).dtor_name));
            _3493_i = (_3493_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3494_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3495_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1691;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1692;
          DCOMP.COMP.GenStmts(_3489_body, ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())), _3492_paramNames, true, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), out _out1691, out _out1692);
          _3494_recursiveGen = _out1691;
          _3495_recIdents = _out1692;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3496_allReadCloned;
          _3496_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          while (!(_3495_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _3497_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_1 in (_3495_recIdents).Elements) {
              _3497_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_1;
              if ((_3495_recIdents).Contains(_3497_next)) {
                goto after__ASSIGN_SUCH_THAT_1;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 1933)");
          after__ASSIGN_SUCH_THAT_1:;
            if ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) && ((_3497_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              if (!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) {
                _3496_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(_3496_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let _this = self.clone();\n"));
              }
            } else if (!((_3492_paramNames).Contains(_3497_next))) {
              _3496_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3496_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_3497_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_3497_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3497_next));
            }
            _3495_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3495_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3497_next));
          }
          Dafny.ISequence<Dafny.Rune> _3498_paramsString;
          _3498_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Dafny.ISequence<Dafny.Rune> _3499_paramTypes;
          _3499_paramTypes = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _3493_i = BigInteger.Zero;
          while ((_3493_i) < (new BigInteger((_3491_params).Count))) {
            if ((_3493_i).Sign == 1) {
              _3498_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_3498_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              _3499_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_3499_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3500_typStr;
            Dafny.ISequence<Dafny.Rune> _out1693;
            _out1693 = DCOMP.COMP.GenType(((_3491_params).Select(_3493_i)).dtor_typ, false, true);
            _3500_typStr = _out1693;
            _3498_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3498_paramsString, ((_3491_params).Select(_3493_i)).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _3500_typStr);
            _3499_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3499_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _3500_typStr);
            _3493_i = (_3493_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3501_retTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1694;
          _out1694 = DCOMP.COMP.GenType(_3490_retType, false, true);
          _3501_retTypeGen = _out1694;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper::<::std::rc::Rc<dyn ::std::ops::Fn("), _3499_paramTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _3501_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>({\n")), _3496_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(move |")), _3498_paramsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| -> ")), _3501_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _3494_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})})"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source68.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3502___mcc_h219 = _source68.dtor_values;
        DAST._IType _3503___mcc_h220 = _source68.dtor_retType;
        DAST._IExpression _3504___mcc_h221 = _source68.dtor_expr;
        DAST._IExpression _3505_expr = _3504___mcc_h221;
        DAST._IType _3506_retType = _3503___mcc_h220;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3507_values = _3502___mcc_h219;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3508_paramNames;
          _3508_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3509_paramNamesSet;
          _3509_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3510_i;
          _3510_i = BigInteger.Zero;
          while ((_3510_i) < (new BigInteger((_3507_values).Count))) {
            _3508_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_3508_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((_3507_values).Select(_3510_i)).dtor__0).dtor_name));
            _3509_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3509_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((((_3507_values).Select(_3510_i)).dtor__0).dtor_name));
            _3510_i = (_3510_i) + (BigInteger.One);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          Dafny.ISequence<Dafny.Rune> _3511_paramsString;
          _3511_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _3510_i = BigInteger.Zero;
          while ((_3510_i) < (new BigInteger((_3507_values).Count))) {
            if ((_3510_i).Sign == 1) {
              _3511_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_3511_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3512_typStr;
            Dafny.ISequence<Dafny.Rune> _out1695;
            _out1695 = DCOMP.COMP.GenType((((_3507_values).Select(_3510_i)).dtor__0).dtor_typ, false, true);
            _3512_typStr = _out1695;
            Dafny.ISequence<Dafny.Rune> _3513_valueGen;
            bool _3514___v91;
            bool _3515_valueErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3516_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1696;
            bool _out1697;
            bool _out1698;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1699;
            DCOMP.COMP.GenExpr(((_3507_values).Select(_3510_i)).dtor__1, selfIdent, @params, true, out _out1696, out _out1697, out _out1698, out _out1699);
            _3513_valueGen = _out1696;
            _3514___v91 = _out1697;
            _3515_valueErased = _out1698;
            _3516_recIdents = _out1699;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent((((_3507_values).Select(_3510_i)).dtor__0).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _3512_typStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3516_recIdents);
            if (_3515_valueErased) {
              _3513_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3513_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _3513_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            _3510_i = (_3510_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3517_recGen;
          bool _3518_recOwned;
          bool _3519_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3520_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1700;
          bool _out1701;
          bool _out1702;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1703;
          DCOMP.COMP.GenExpr(_3505_expr, selfIdent, _3508_paramNames, mustOwn, out _out1700, out _out1701, out _out1702, out _out1703);
          _3517_recGen = _out1700;
          _3518_recOwned = _out1701;
          _3519_recErased = _out1702;
          _3520_recIdents = _out1703;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3520_recIdents, _3509_paramNamesSet);
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _3517_recGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = _3518_recOwned;
          isErased = _3519_recErased;
        }
      } else if (_source68.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _3521___mcc_h222 = _source68.dtor_name;
        DAST._IType _3522___mcc_h223 = _source68.dtor_typ;
        DAST._IExpression _3523___mcc_h224 = _source68.dtor_value;
        DAST._IExpression _3524___mcc_h225 = _source68.dtor_iifeBody;
        DAST._IExpression _3525_iifeBody = _3524___mcc_h225;
        DAST._IExpression _3526_value = _3523___mcc_h224;
        DAST._IType _3527_tpe = _3522___mcc_h223;
        Dafny.ISequence<Dafny.Rune> _3528_name = _3521___mcc_h222;
        {
          Dafny.ISequence<Dafny.Rune> _3529_valueGen;
          bool _3530___v92;
          bool _3531_valueErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3532_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1704;
          bool _out1705;
          bool _out1706;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1707;
          DCOMP.COMP.GenExpr(_3526_value, selfIdent, @params, true, out _out1704, out _out1705, out _out1706, out _out1707);
          _3529_valueGen = _out1704;
          _3530___v92 = _out1705;
          _3531_valueErased = _out1706;
          _3532_recIdents = _out1707;
          if (_3531_valueErased) {
            _3529_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3529_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _3532_recIdents;
          Dafny.ISequence<Dafny.Rune> _3533_valueTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1708;
          _out1708 = DCOMP.COMP.GenType(_3527_tpe, false, true);
          _3533_valueTypeGen = _out1708;
          Dafny.ISequence<Dafny.Rune> _3534_bodyGen;
          bool _3535___v93;
          bool _3536_bodyErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3537_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out1709;
          bool _out1710;
          bool _out1711;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1712;
          DCOMP.COMP.GenExpr(_3525_iifeBody, selfIdent, @params, true, out _out1709, out _out1710, out _out1711, out _out1712);
          _3534_bodyGen = _out1709;
          _3535___v93 = _out1710;
          _3536_bodyErased = _out1711;
          _3537_bodyIdents = _out1712;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3537_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_3528_name))));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet "), DCOMP.__default.escapeIdent((_3528_name))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _3533_valueTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _3529_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _3534_bodyGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = true;
          isErased = _3536_bodyErased;
        }
      } else if (_source68.is_Apply) {
        DAST._IExpression _3538___mcc_h226 = _source68.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _3539___mcc_h227 = _source68.dtor_args;
        Dafny.ISequence<DAST._IExpression> _3540_args = _3539___mcc_h227;
        DAST._IExpression _3541_func = _3538___mcc_h226;
        {
          Dafny.ISequence<Dafny.Rune> _3542_funcString;
          bool _3543___v94;
          bool _3544_funcErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3545_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1713;
          bool _out1714;
          bool _out1715;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1716;
          DCOMP.COMP.GenExpr(_3541_func, selfIdent, @params, false, out _out1713, out _out1714, out _out1715, out _out1716);
          _3542_funcString = _out1713;
          _3543___v94 = _out1714;
          _3544_funcErased = _out1715;
          _3545_recIdents = _out1716;
          readIdents = _3545_recIdents;
          Dafny.ISequence<Dafny.Rune> _3546_argString;
          _3546_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _3547_i;
          _3547_i = BigInteger.Zero;
          while ((_3547_i) < (new BigInteger((_3540_args).Count))) {
            if ((_3547_i).Sign == 1) {
              _3546_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3546_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3548_argExpr;
            bool _3549_isOwned;
            bool _3550_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3551_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1717;
            bool _out1718;
            bool _out1719;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1720;
            DCOMP.COMP.GenExpr((_3540_args).Select(_3547_i), selfIdent, @params, false, out _out1717, out _out1718, out _out1719, out _out1720);
            _3548_argExpr = _out1717;
            _3549_isOwned = _out1718;
            _3550_argErased = _out1719;
            _3551_argIdents = _out1720;
            if (_3549_isOwned) {
              _3548_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3548_argExpr);
            }
            _3546_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3546_argString, _3548_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3551_argIdents);
            _3547_i = (_3547_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _3542_funcString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3546_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source68.is_TypeTest) {
        DAST._IExpression _3552___mcc_h228 = _source68.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3553___mcc_h229 = _source68.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _3554___mcc_h230 = _source68.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _3555_variant = _3554___mcc_h230;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3556_dType = _3553___mcc_h229;
        DAST._IExpression _3557_on = _3552___mcc_h228;
        {
          Dafny.ISequence<Dafny.Rune> _3558_exprGen;
          bool _3559___v95;
          bool _3560_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3561_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1721;
          bool _out1722;
          bool _out1723;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1724;
          DCOMP.COMP.GenExpr(_3557_on, selfIdent, @params, false, out _out1721, out _out1722, out _out1723, out _out1724);
          _3558_exprGen = _out1721;
          _3559___v95 = _out1722;
          _3560_exprErased = _out1723;
          _3561_recIdents = _out1724;
          Dafny.ISequence<Dafny.Rune> _3562_dTypePath;
          Dafny.ISequence<Dafny.Rune> _out1725;
          _out1725 = DCOMP.COMP.GenPath(_3556_dType);
          _3562_dTypePath = _out1725;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!("), _3558_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref(), ")), _3562_dTypePath), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_3555_variant)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. })"));
          isOwned = true;
          isErased = true;
          readIdents = _3561_recIdents;
        }
      } else if (_source68.is_InitializationValue) {
        DAST._IType _3563___mcc_h231 = _source68.dtor_typ;
        DAST._IType _3564_typ = _3563___mcc_h231;
        {
          Dafny.ISequence<Dafny.Rune> _3565_typString;
          Dafny.ISequence<Dafny.Rune> _out1726;
          _out1726 = DCOMP.COMP.GenType(_3564_typ, false, false);
          _3565_typString = _out1726;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3565_typString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()"));
          isOwned = true;
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source68.is_BoolBoundedPool) {
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]");
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source68.is_SetBoundedPool) {
        DAST._IExpression _3566___mcc_h232 = _source68.dtor_of;
        DAST._IExpression _3567_of = _3566___mcc_h232;
        {
          Dafny.ISequence<Dafny.Rune> _3568_exprGen;
          bool _3569___v96;
          bool _3570_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3571_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1727;
          bool _out1728;
          bool _out1729;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1730;
          DCOMP.COMP.GenExpr(_3567_of, selfIdent, @params, false, out _out1727, out _out1728, out _out1729, out _out1730);
          _3568_exprGen = _out1727;
          _3569___v96 = _out1728;
          _3570_exprErased = _out1729;
          _3571_recIdents = _out1730;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3568_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          isOwned = true;
          isErased = _3570_exprErased;
          readIdents = _3571_recIdents;
        }
      } else if (_source68.is_SeqBoundedPool) {
        DAST._IExpression _3572___mcc_h233 = _source68.dtor_of;
        bool _3573___mcc_h234 = _source68.dtor_includeDuplicates;
        bool _3574_includeDuplicates = _3573___mcc_h234;
        DAST._IExpression _3575_of = _3572___mcc_h233;
        {
          Dafny.ISequence<Dafny.Rune> _3576_exprGen;
          bool _3577___v97;
          bool _3578_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3579_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1731;
          bool _out1732;
          bool _out1733;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1734;
          DCOMP.COMP.GenExpr(_3575_of, selfIdent, @params, false, out _out1731, out _out1732, out _out1733, out _out1734);
          _3576_exprGen = _out1731;
          _3577___v97 = _out1732;
          _3578_exprErased = _out1733;
          _3579_recIdents = _out1734;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3576_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          if (!(_3574_includeDuplicates)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::itertools::Itertools::unique("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          isOwned = true;
          isErased = _3578_exprErased;
          readIdents = _3579_recIdents;
        }
      } else {
        DAST._IExpression _3580___mcc_h235 = _source68.dtor_lo;
        DAST._IExpression _3581___mcc_h236 = _source68.dtor_hi;
        DAST._IExpression _3582_hi = _3581___mcc_h236;
        DAST._IExpression _3583_lo = _3580___mcc_h235;
        {
          Dafny.ISequence<Dafny.Rune> _3584_loString;
          bool _3585___v98;
          bool _3586_loErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3587_recIdentsLo;
          Dafny.ISequence<Dafny.Rune> _out1735;
          bool _out1736;
          bool _out1737;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1738;
          DCOMP.COMP.GenExpr(_3583_lo, selfIdent, @params, true, out _out1735, out _out1736, out _out1737, out _out1738);
          _3584_loString = _out1735;
          _3585___v98 = _out1736;
          _3586_loErased = _out1737;
          _3587_recIdentsLo = _out1738;
          Dafny.ISequence<Dafny.Rune> _3588_hiString;
          bool _3589___v99;
          bool _3590_hiErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3591_recIdentsHi;
          Dafny.ISequence<Dafny.Rune> _out1739;
          bool _out1740;
          bool _out1741;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1742;
          DCOMP.COMP.GenExpr(_3582_hi, selfIdent, @params, true, out _out1739, out _out1740, out _out1741, out _out1742);
          _3588_hiString = _out1739;
          _3589___v99 = _out1740;
          _3590_hiErased = _out1741;
          _3591_recIdentsHi = _out1742;
          if (!(_3586_loErased)) {
            _3584_loString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3584_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (!(_3590_hiErased)) {
            _3588_hiString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3588_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::integer_range("), _3584_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3588_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3587_recIdentsLo, _3591_recIdentsHi);
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern crate dafny_runtime;\n"));
      BigInteger _3592_i;
      _3592_i = BigInteger.Zero;
      while ((_3592_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _3593_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        Dafny.ISequence<Dafny.Rune> _out1743;
        _out1743 = DCOMP.COMP.GenModule((p).Select(_3592_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _3593_generated = _out1743;
        if ((_3592_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _3593_generated);
        _3592_i = (_3592_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _3594_i;
      _3594_i = BigInteger.Zero;
      while ((_3594_i) < (new BigInteger((fullName).Count))) {
        if ((_3594_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, (fullName).Select(_3594_i));
        _3594_i = (_3594_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
  }
} // end of namespace DCOMP

class __CallToMain {
  public static void Main(string[] args) {
    Dafny.Helpers.WithHaltHandling(() => DAM.__default._Main(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.UnicodeFromMainArguments(args)));
  }
}
