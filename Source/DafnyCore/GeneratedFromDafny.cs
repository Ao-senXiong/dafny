// Dafny program the_program compiled into C#
// To recompile, you will need the libraries
//     System.Runtime.Numerics.dll System.Collections.Immutable.dll
// but the 'dotnet' tool in net6.0 should pick those up automatically.
// Optionally, you may want to include compiler switches like
//     /debug /nowarn:162,164,168,183,219,436,1717,1718

using System;
using System.Numerics;
using System.Collections;
namespace Formatting {

  public partial class __default {
    public static System.String ReindentProgramFromFirstToken(Microsoft.Dafny.IToken firstToken, Formatting.IIndentationFormatter reindent)
    {
      System.String s = default(System.String);
      Microsoft.Dafny.IToken token;
      token = firstToken;
      System.Text.StringBuilder sb;
      System.Text.StringBuilder _nw0 = new System.Text.StringBuilder();
      sb = _nw0;
      while ((token) != (object) ((Microsoft.Dafny.IToken)null)) {
        System.String newLeadingTrivia;
        newLeadingTrivia = (reindent).GetNewLeadingTrivia(token);
        System.String newTrailingTrivia;
        newTrailingTrivia = (reindent).GetNewTrailingTrivia(token);
        (sb).Append(newLeadingTrivia);
        (sb).Append(token.val);
        (sb).Append(newTrailingTrivia);
        token = token.Next;
      }
      System.String _out0;
      _out0 = (sb).ToString().ToString();
      s = _out0;
      return s;
    }
  }

  public interface IIndentationFormatter {
    System.String GetNewLeadingTrivia(Microsoft.Dafny.IToken token);
    System.String GetNewTrailingTrivia(Microsoft.Dafny.IToken token);
  }
  public class _Companion_IIndentationFormatter {
  }
} // end of namespace Formatting


namespace Std.Wrappers {

  public partial class __default {
    public static Std.Wrappers._IOutcomeResult<__E> Need<__E>(bool condition, __E error)
    {
      if (condition) {
        return Std.Wrappers.OutcomeResult<__E>.create_Pass_k();
      } else {
        return Std.Wrappers.OutcomeResult<__E>.create_Fail_k(error);
      }
    }
  }

  public interface _IOption<out T> {
    bool is_None { get; }
    bool is_Some { get; }
    T dtor_value { get; }
    _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0);
    bool IsFailure();
    Std.Wrappers._IOption<__U> PropagateFailure<__U>();
    T Extract();
    Std.Wrappers._IResult<T, __E> ToResult<__E>(__E error);
    Std.Wrappers._IOutcome<__E> ToOutcome<__E>(__E error);
  }
  public abstract class Option<T> : _IOption<T> {
    public Option() {
    }
    public static Std.Wrappers._IOption<T> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOption<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOption<T>>(Std.Wrappers.Option<T>.Default());
    }
    public static _IOption<T> create_None() {
      return new Option_None<T>();
    }
    public static _IOption<T> create_Some(T @value) {
      return new Option_Some<T>(@value);
    }
    public bool is_None { get { return this is Option_None<T>; } }
    public bool is_Some { get { return this is Option_Some<T>; } }
    public T dtor_value {
      get {
        var d = this;
        return ((Option_Some<T>)d)._value;
      }
    }
    public abstract _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0);
    public bool IsFailure() {
      return (this).is_None;
    }
    public Std.Wrappers._IOption<__U> PropagateFailure<__U>() {
      return Std.Wrappers.Option<__U>.create_None();
    }
    public T Extract() {
      return (this).dtor_value;
    }
    public static T GetOr(Std.Wrappers._IOption<T> _this, T @default) {
      Std.Wrappers._IOption<T> _source0 = _this;
      if (_source0.is_None) {
        return @default;
      } else {
        T __mcc_h0 = _source0.dtor_value;
        T v = __mcc_h0;
        return v;
      }
    }
    public Std.Wrappers._IResult<T, __E> ToResult<__E>(__E error) {
      Std.Wrappers._IOption<T> _source1 = this;
      if (_source1.is_None) {
        return Std.Wrappers.Result<T, __E>.create_Failure(error);
      } else {
        T __mcc_h0 = _source1.dtor_value;
        T v = __mcc_h0;
        return Std.Wrappers.Result<T, __E>.create_Success(v);
      }
    }
    public Std.Wrappers._IOutcome<__E> ToOutcome<__E>(__E error) {
      Std.Wrappers._IOption<T> _source2 = this;
      if (_source2.is_None) {
        return Std.Wrappers.Outcome<__E>.create_Fail(error);
      } else {
        T __mcc_h0 = _source2.dtor_value;
        T v = __mcc_h0;
        return Std.Wrappers.Outcome<__E>.create_Pass();
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IOption<T> _this, Func<Std.Wrappers._IOption<T>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IOption<T>, __FC>>(rewrap)(_this);
    }
  }
  public class Option_None<T> : Option<T> {
    public Option_None() : base() {
    }
    public override _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOption<__T> dt) { return dt; }
      return new Option_None<__T>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Option_None<T>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Option.None";
      return s;
    }
  }
  public class Option_Some<T> : Option<T> {
    public readonly T _value;
    public Option_Some(T @value) : base() {
      this._value = @value;
    }
    public override _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOption<__T> dt) { return dt; }
      return new Option_Some<__T>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Option_Some<T>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Option.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }

  public interface _IResult<out R, out E> {
    bool is_Success { get; }
    bool is_Failure { get; }
    R dtor_value { get; }
    E dtor_error { get; }
    _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1);
    bool IsFailure();
    Std.Wrappers._IResult<__U, E> PropagateFailure<__U>();
    R Extract();
    Std.Wrappers._IOption<R> ToOption();
    Std.Wrappers._IOutcome<E> ToOutcome();
  }
  public abstract class Result<R, E> : _IResult<R, E> {
    public Result() {
    }
    public static Std.Wrappers._IResult<R, E> Default(R _default_R) {
      return create_Success(_default_R);
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IResult<R, E>> _TypeDescriptor(Dafny.TypeDescriptor<R> _td_R) {
      return new Dafny.TypeDescriptor<Std.Wrappers._IResult<R, E>>(Std.Wrappers.Result<R, E>.Default(_td_R.Default()));
    }
    public static _IResult<R, E> create_Success(R @value) {
      return new Result_Success<R, E>(@value);
    }
    public static _IResult<R, E> create_Failure(E error) {
      return new Result_Failure<R, E>(error);
    }
    public bool is_Success { get { return this is Result_Success<R, E>; } }
    public bool is_Failure { get { return this is Result_Failure<R, E>; } }
    public R dtor_value {
      get {
        var d = this;
        return ((Result_Success<R, E>)d)._value;
      }
    }
    public E dtor_error {
      get {
        var d = this;
        return ((Result_Failure<R, E>)d)._error;
      }
    }
    public abstract _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1);
    public bool IsFailure() {
      return (this).is_Failure;
    }
    public Std.Wrappers._IResult<__U, E> PropagateFailure<__U>() {
      return Std.Wrappers.Result<__U, E>.create_Failure((this).dtor_error);
    }
    public R Extract() {
      return (this).dtor_value;
    }
    public static R GetOr(Std.Wrappers._IResult<R, E> _this, R @default) {
      Std.Wrappers._IResult<R, E> _source3 = _this;
      if (_source3.is_Success) {
        R _10___mcc_h0 = _source3.dtor_value;
        R _11_s = _10___mcc_h0;
        return _11_s;
      } else {
        E _12___mcc_h1 = _source3.dtor_error;
        E _13_e = _12___mcc_h1;
        return @default;
      }
    }
    public Std.Wrappers._IOption<R> ToOption() {
      Std.Wrappers._IResult<R, E> _source4 = this;
      if (_source4.is_Success) {
        R _14___mcc_h0 = _source4.dtor_value;
        R _15_s = _14___mcc_h0;
        return Std.Wrappers.Option<R>.create_Some(_15_s);
      } else {
        E _16___mcc_h1 = _source4.dtor_error;
        E _17_e = _16___mcc_h1;
        return Std.Wrappers.Option<R>.create_None();
      }
    }
    public Std.Wrappers._IOutcome<E> ToOutcome() {
      Std.Wrappers._IResult<R, E> _source5 = this;
      if (_source5.is_Success) {
        R _18___mcc_h0 = _source5.dtor_value;
        R _19_s = _18___mcc_h0;
        return Std.Wrappers.Outcome<E>.create_Pass();
      } else {
        E _20___mcc_h1 = _source5.dtor_error;
        E _21_e = _20___mcc_h1;
        return Std.Wrappers.Outcome<E>.create_Fail(_21_e);
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IResult<R, E> _this, Func<Std.Wrappers._IResult<R, E>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IResult<R, E>, __FC>>(rewrap)(_this);
    }
    public static Std.Wrappers._IResult<R, __NewE> MapFailure<__NewE>(Std.Wrappers._IResult<R, E> _this, Func<E, __NewE> reWrap) {
      Std.Wrappers._IResult<R, E> _source6 = _this;
      if (_source6.is_Success) {
        R _22___mcc_h0 = _source6.dtor_value;
        R _23_s = _22___mcc_h0;
        return Std.Wrappers.Result<R, __NewE>.create_Success(_23_s);
      } else {
        E _24___mcc_h1 = _source6.dtor_error;
        E _25_e = _24___mcc_h1;
        return Std.Wrappers.Result<R, __NewE>.create_Failure(Dafny.Helpers.Id<Func<E, __NewE>>(reWrap)(_25_e));
      }
    }
  }
  public class Result_Success<R, E> : Result<R, E> {
    public readonly R _value;
    public Result_Success(R @value) : base() {
      this._value = @value;
    }
    public override _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1) {
      if (this is _IResult<__R, __E> dt) { return dt; }
      return new Result_Success<__R, __E>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Result_Success<R, E>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Result.Success";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Result_Failure<R, E> : Result<R, E> {
    public readonly E _error;
    public Result_Failure(E error) : base() {
      this._error = error;
    }
    public override _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1) {
      if (this is _IResult<__R, __E> dt) { return dt; }
      return new Result_Failure<__R, __E>(converter1(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Result_Failure<R, E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Result.Failure";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }

  public interface _IOutcome<out E> {
    bool is_Pass { get; }
    bool is_Fail { get; }
    E dtor_error { get; }
    _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0);
    bool IsFailure();
    Std.Wrappers._IOutcome<E> PropagateFailure();
    Std.Wrappers._IOption<__R> ToOption<__R>(__R r);
    Std.Wrappers._IResult<__R, E> ToResult<__R>(__R r);
  }
  public abstract class Outcome<E> : _IOutcome<E> {
    public Outcome() {
    }
    public static Std.Wrappers._IOutcome<E> Default() {
      return create_Pass();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOutcome<E>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOutcome<E>>(Std.Wrappers.Outcome<E>.Default());
    }
    public static _IOutcome<E> create_Pass() {
      return new Outcome_Pass<E>();
    }
    public static _IOutcome<E> create_Fail(E error) {
      return new Outcome_Fail<E>(error);
    }
    public bool is_Pass { get { return this is Outcome_Pass<E>; } }
    public bool is_Fail { get { return this is Outcome_Fail<E>; } }
    public E dtor_error {
      get {
        var d = this;
        return ((Outcome_Fail<E>)d)._error;
      }
    }
    public abstract _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0);
    public bool IsFailure() {
      return (this).is_Fail;
    }
    public Std.Wrappers._IOutcome<E> PropagateFailure() {
      return this;
    }
    public Std.Wrappers._IOption<__R> ToOption<__R>(__R r) {
      Std.Wrappers._IOutcome<E> _source7 = this;
      if (_source7.is_Pass) {
        return Std.Wrappers.Option<__R>.create_Some(r);
      } else {
        E _26___mcc_h0 = _source7.dtor_error;
        E _27_e = _26___mcc_h0;
        return Std.Wrappers.Option<__R>.create_None();
      }
    }
    public Std.Wrappers._IResult<__R, E> ToResult<__R>(__R r) {
      Std.Wrappers._IOutcome<E> _source8 = this;
      if (_source8.is_Pass) {
        return Std.Wrappers.Result<__R, E>.create_Success(r);
      } else {
        E _28___mcc_h0 = _source8.dtor_error;
        E _29_e = _28___mcc_h0;
        return Std.Wrappers.Result<__R, E>.create_Failure(_29_e);
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IOutcome<E> _this, Func<Std.Wrappers._IOutcome<E>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IOutcome<E>, __FC>>(rewrap)(_this);
    }
    public static Std.Wrappers._IResult<__T, __NewE> MapFailure<__T, __NewE>(Std.Wrappers._IOutcome<E> _this, Func<E, __NewE> rewrap, __T @default)
    {
      Std.Wrappers._IOutcome<E> _source9 = _this;
      if (_source9.is_Pass) {
        return Std.Wrappers.Result<__T, __NewE>.create_Success(@default);
      } else {
        E _30___mcc_h0 = _source9.dtor_error;
        E _31_e = _30___mcc_h0;
        return Std.Wrappers.Result<__T, __NewE>.create_Failure(Dafny.Helpers.Id<Func<E, __NewE>>(rewrap)(_31_e));
      }
    }
    public static Std.Wrappers._IOutcome<E> Need(bool condition, E error)
    {
      if (condition) {
        return Std.Wrappers.Outcome<E>.create_Pass();
      } else {
        return Std.Wrappers.Outcome<E>.create_Fail(error);
      }
    }
  }
  public class Outcome_Pass<E> : Outcome<E> {
    public Outcome_Pass() : base() {
    }
    public override _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcome<__E> dt) { return dt; }
      return new Outcome_Pass<__E>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Outcome_Pass<E>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Outcome.Pass";
      return s;
    }
  }
  public class Outcome_Fail<E> : Outcome<E> {
    public readonly E _error;
    public Outcome_Fail(E error) : base() {
      this._error = error;
    }
    public override _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcome<__E> dt) { return dt; }
      return new Outcome_Fail<__E>(converter0(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Outcome_Fail<E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Outcome.Fail";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }

  public interface _IOutcomeResult<out E> {
    bool is_Pass_k { get; }
    bool is_Fail_k { get; }
    E dtor_error { get; }
    _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0);
    bool IsFailure();
    Std.Wrappers._IResult<__U, E> PropagateFailure<__U>();
  }
  public abstract class OutcomeResult<E> : _IOutcomeResult<E> {
    public OutcomeResult() {
    }
    public static Std.Wrappers._IOutcomeResult<E> Default() {
      return create_Pass_k();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOutcomeResult<E>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOutcomeResult<E>>(Std.Wrappers.OutcomeResult<E>.Default());
    }
    public static _IOutcomeResult<E> create_Pass_k() {
      return new OutcomeResult_Pass_k<E>();
    }
    public static _IOutcomeResult<E> create_Fail_k(E error) {
      return new OutcomeResult_Fail_k<E>(error);
    }
    public bool is_Pass_k { get { return this is OutcomeResult_Pass_k<E>; } }
    public bool is_Fail_k { get { return this is OutcomeResult_Fail_k<E>; } }
    public E dtor_error {
      get {
        var d = this;
        return ((OutcomeResult_Fail_k<E>)d)._error;
      }
    }
    public abstract _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0);
    public bool IsFailure() {
      return (this).is_Fail_k;
    }
    public Std.Wrappers._IResult<__U, E> PropagateFailure<__U>() {
      return Std.Wrappers.Result<__U, E>.create_Failure((this).dtor_error);
    }
  }
  public class OutcomeResult_Pass_k<E> : OutcomeResult<E> {
    public OutcomeResult_Pass_k() : base() {
    }
    public override _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcomeResult<__E> dt) { return dt; }
      return new OutcomeResult_Pass_k<__E>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.OutcomeResult_Pass_k<E>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.OutcomeResult.Pass'";
      return s;
    }
  }
  public class OutcomeResult_Fail_k<E> : OutcomeResult<E> {
    public readonly E _error;
    public OutcomeResult_Fail_k(E error) : base() {
      this._error = error;
    }
    public override _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcomeResult<__E> dt) { return dt; }
      return new OutcomeResult_Fail_k<__E>(converter0(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.OutcomeResult_Fail_k<E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.OutcomeResult.Fail'";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }
} // end of namespace Std.Wrappers
namespace Std.Math {

  public partial class __default {
    public static BigInteger Min(BigInteger a, BigInteger b)
    {
      if ((a) < (b)) {
        return a;
      } else {
        return b;
      }
    }
    public static BigInteger Min3(BigInteger a, BigInteger b, BigInteger c)
    {
      return Std.Math.__default.Min(a, Std.Math.__default.Min(b, c));
    }
    public static BigInteger Max(BigInteger a, BigInteger b)
    {
      if ((a) < (b)) {
        return b;
      } else {
        return a;
      }
    }
    public static BigInteger Max3(BigInteger a, BigInteger b, BigInteger c)
    {
      return Std.Math.__default.Max(a, Std.Math.__default.Max(b, c));
    }
    public static BigInteger Abs(BigInteger a) {
      if ((a).Sign == -1) {
        return (BigInteger.Zero) - (a);
      } else {
        return a;
      }
    }
  }
} // end of namespace Std.Math
namespace Std.Collections.Seq {

  public partial class __default {
    public static __T First<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Select(BigInteger.Zero);
    }
    public static Dafny.ISequence<__T> DropFirst<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Drop(BigInteger.One);
    }
    public static __T Last<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Select((new BigInteger((xs).Count)) - (BigInteger.One));
    }
    public static Dafny.ISequence<__T> DropLast<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
    }
    public static __T[] ToArray<__T>(Dafny.ISequence<__T> xs)
    {
      __T[] a = new __T[0];
      Func<BigInteger, __T> _init2 = Dafny.Helpers.Id<Func<Dafny.ISequence<__T>, Func<BigInteger, __T>>>((_75_xs) => ((System.Func<BigInteger, __T>)((_76_i) => {
        return (_75_xs).Select(_76_i);
      })))(xs);
      __T[] _nw3 = new __T[Dafny.Helpers.ToIntChecked(new BigInteger((xs).Count), "array size exceeds memory limit")];
      for (var _i0_2 = 0; _i0_2 < new BigInteger(_nw3.Length); _i0_2++) {
        _nw3[(int)(_i0_2)] = _init2(_i0_2);
      }
      a = _nw3;
      return a;
    }
    public static Dafny.ISet<__T> ToSet<__T>(Dafny.ISequence<__T> xs) {
      return Dafny.Helpers.Id<Func<Dafny.ISequence<__T>, Dafny.ISet<__T>>>((_77_xs) => ((System.Func<Dafny.ISet<__T>>)(() => {
        var _coll0 = new System.Collections.Generic.List<__T>();
        foreach (__T _compr_0 in (_77_xs).Elements) {
          __T _78_x = (__T)_compr_0;
          if ((_77_xs).Contains(_78_x)) {
            _coll0.Add(_78_x);
          }
        }
        return Dafny.Set<__T>.FromCollection(_coll0);
      }))())(xs);
    }
    public static BigInteger IndexOf<__T>(Dafny.ISequence<__T> xs, __T v)
    {
      BigInteger _79___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if (object.Equals((xs).Select(BigInteger.Zero), v)) {
        return (BigInteger.Zero) + (_79___accumulator);
      } else {
        _79___accumulator = (_79___accumulator) + (BigInteger.One);
        Dafny.ISequence<__T> _in0 = (xs).Drop(BigInteger.One);
        __T _in1 = v;
        xs = _in0;
        v = _in1;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<BigInteger> IndexOfOption<__T>(Dafny.ISequence<__T> xs, __T v)
    {
      return Std.Collections.Seq.__default.IndexByOption<__T>(xs, Dafny.Helpers.Id<Func<__T, Func<__T, bool>>>((_80_v) => ((System.Func<__T, bool>)((_81_x) => {
        return object.Equals(_81_x, _80_v);
      })))(v));
    }
    public static Std.Wrappers._IOption<BigInteger> IndexByOption<__T>(Dafny.ISequence<__T> xs, Func<__T, bool> p)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Option<BigInteger>.create_None();
      } else if (Dafny.Helpers.Id<Func<__T, bool>>(p)((xs).Select(BigInteger.Zero))) {
        return Std.Wrappers.Option<BigInteger>.create_Some(BigInteger.Zero);
      } else {
        Std.Wrappers._IOption<BigInteger> _82_o_k = Std.Collections.Seq.__default.IndexByOption<__T>((xs).Drop(BigInteger.One), p);
        if ((_82_o_k).is_Some) {
          return Std.Wrappers.Option<BigInteger>.create_Some(((_82_o_k).dtor_value) + (BigInteger.One));
        } else {
          return Std.Wrappers.Option<BigInteger>.create_None();
        }
      }
    }
    public static BigInteger LastIndexOf<__T>(Dafny.ISequence<__T> xs, __T v)
    {
    TAIL_CALL_START: ;
      if (object.Equals((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One)), v)) {
        return (new BigInteger((xs).Count)) - (BigInteger.One);
      } else {
        Dafny.ISequence<__T> _in2 = (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
        __T _in3 = v;
        xs = _in2;
        v = _in3;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<BigInteger> LastIndexOfOption<__T>(Dafny.ISequence<__T> xs, __T v)
    {
      return Std.Collections.Seq.__default.LastIndexByOption<__T>(xs, Dafny.Helpers.Id<Func<__T, Func<__T, bool>>>((_83_v) => ((System.Func<__T, bool>)((_84_x) => {
        return object.Equals(_84_x, _83_v);
      })))(v));
    }
    public static Std.Wrappers._IOption<BigInteger> LastIndexByOption<__T>(Dafny.ISequence<__T> xs, Func<__T, bool> p)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Option<BigInteger>.create_None();
      } else if (Dafny.Helpers.Id<Func<__T, bool>>(p)((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One)))) {
        return Std.Wrappers.Option<BigInteger>.create_Some((new BigInteger((xs).Count)) - (BigInteger.One));
      } else {
        Dafny.ISequence<__T> _in4 = (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
        Func<__T, bool> _in5 = p;
        xs = _in4;
        p = _in5;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Remove<__T>(Dafny.ISequence<__T> xs, BigInteger pos)
    {
      return Dafny.Sequence<__T>.Concat((xs).Take(pos), (xs).Drop((pos) + (BigInteger.One)));
    }
    public static Dafny.ISequence<__T> RemoveValue<__T>(Dafny.ISequence<__T> xs, __T v)
    {
      if (!(xs).Contains(v)) {
        return xs;
      } else {
        BigInteger _85_i = Std.Collections.Seq.__default.IndexOf<__T>(xs, v);
        return Dafny.Sequence<__T>.Concat((xs).Take(_85_i), (xs).Drop((_85_i) + (BigInteger.One)));
      }
    }
    public static Dafny.ISequence<__T> Insert<__T>(Dafny.ISequence<__T> xs, __T a, BigInteger pos)
    {
      return Dafny.Sequence<__T>.Concat(Dafny.Sequence<__T>.Concat((xs).Take(pos), Dafny.Sequence<__T>.FromElements(a)), (xs).Drop(pos));
    }
    public static Dafny.ISequence<__T> Reverse<__T>(Dafny.ISequence<__T> xs) {
      Dafny.ISequence<__T> _86___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((xs).Equals(Dafny.Sequence<__T>.FromElements())) {
        return Dafny.Sequence<__T>.Concat(_86___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _86___accumulator = Dafny.Sequence<__T>.Concat(_86___accumulator, Dafny.Sequence<__T>.FromElements((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One))));
        Dafny.ISequence<__T> _in6 = (xs).Subsequence(BigInteger.Zero, (new BigInteger((xs).Count)) - (BigInteger.One));
        xs = _in6;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Repeat<__T>(__T v, BigInteger length)
    {
      Dafny.ISequence<__T> _87___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((length).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_87___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _87___accumulator = Dafny.Sequence<__T>.Concat(_87___accumulator, Dafny.Sequence<__T>.FromElements(v));
        __T _in7 = v;
        BigInteger _in8 = (length) - (BigInteger.One);
        v = _in7;
        length = _in8;
        goto TAIL_CALL_START;
      }
    }
    public static _System._ITuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>> Unzip<__A, __B>(Dafny.ISequence<_System._ITuple2<__A, __B>> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>>.create(Dafny.Sequence<__A>.FromElements(), Dafny.Sequence<__B>.FromElements());
      } else {
        _System._ITuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>> _let_tmp_rhs0 = Std.Collections.Seq.__default.Unzip<__A, __B>(Std.Collections.Seq.__default.DropLast<_System._ITuple2<__A, __B>>(xs));
        Dafny.ISequence<__A> _88_a = _let_tmp_rhs0.dtor__0;
        Dafny.ISequence<__B> _89_b = _let_tmp_rhs0.dtor__1;
        return _System.Tuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>>.create(Dafny.Sequence<__A>.Concat(_88_a, Dafny.Sequence<__A>.FromElements((Std.Collections.Seq.__default.Last<_System._ITuple2<__A, __B>>(xs)).dtor__0)), Dafny.Sequence<__B>.Concat(_89_b, Dafny.Sequence<__B>.FromElements((Std.Collections.Seq.__default.Last<_System._ITuple2<__A, __B>>(xs)).dtor__1)));
      }
    }
    public static Dafny.ISequence<_System._ITuple2<__A, __B>> Zip<__A, __B>(Dafny.ISequence<__A> xs, Dafny.ISequence<__B> ys)
    {
      Dafny.ISequence<_System._ITuple2<__A, __B>> _90___accumulator = Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<_System._ITuple2<__A, __B>>.Concat(Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements(), _90___accumulator);
      } else {
        _90___accumulator = Dafny.Sequence<_System._ITuple2<__A, __B>>.Concat(Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements(_System.Tuple2<__A, __B>.create(Std.Collections.Seq.__default.Last<__A>(xs), Std.Collections.Seq.__default.Last<__B>(ys))), _90___accumulator);
        Dafny.ISequence<__A> _in9 = Std.Collections.Seq.__default.DropLast<__A>(xs);
        Dafny.ISequence<__B> _in10 = Std.Collections.Seq.__default.DropLast<__B>(ys);
        xs = _in9;
        ys = _in10;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger Max(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)) == (BigInteger.One)) {
        return (xs).Select(BigInteger.Zero);
      } else {
        return Std.Math.__default.Max((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.Max((xs).Drop(BigInteger.One)));
      }
    }
    public static BigInteger Min(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)) == (BigInteger.One)) {
        return (xs).Select(BigInteger.Zero);
      } else {
        return Std.Math.__default.Min((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.Min((xs).Drop(BigInteger.One)));
      }
    }
    public static Dafny.ISequence<__T> Flatten<__T>(Dafny.ISequence<Dafny.ISequence<__T>> xs) {
      Dafny.ISequence<__T> _91___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_91___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _91___accumulator = Dafny.Sequence<__T>.Concat(_91___accumulator, (xs).Select(BigInteger.Zero));
        Dafny.ISequence<Dafny.ISequence<__T>> _in11 = (xs).Drop(BigInteger.One);
        xs = _in11;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> FlattenReverse<__T>(Dafny.ISequence<Dafny.ISequence<__T>> xs) {
      Dafny.ISequence<__T> _92___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(Dafny.Sequence<__T>.FromElements(), _92___accumulator);
      } else {
        _92___accumulator = Dafny.Sequence<__T>.Concat(Std.Collections.Seq.__default.Last<Dafny.ISequence<__T>>(xs), _92___accumulator);
        Dafny.ISequence<Dafny.ISequence<__T>> _in12 = Std.Collections.Seq.__default.DropLast<Dafny.ISequence<__T>>(xs);
        xs = _in12;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Join<__T>(Dafny.ISequence<Dafny.ISequence<__T>> seqs, Dafny.ISequence<__T> separator)
    {
      Dafny.ISequence<__T> _93___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((seqs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_93___accumulator, Dafny.Sequence<__T>.FromElements());
      } else if ((new BigInteger((seqs).Count)) == (BigInteger.One)) {
        return Dafny.Sequence<__T>.Concat(_93___accumulator, (seqs).Select(BigInteger.Zero));
      } else {
        _93___accumulator = Dafny.Sequence<__T>.Concat(_93___accumulator, Dafny.Sequence<__T>.Concat((seqs).Select(BigInteger.Zero), separator));
        Dafny.ISequence<Dafny.ISequence<__T>> _in13 = (seqs).Drop(BigInteger.One);
        Dafny.ISequence<__T> _in14 = separator;
        seqs = _in13;
        separator = _in14;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.ISequence<__T>> Split<__T>(Dafny.ISequence<__T> s, __T delim)
    {
      Dafny.ISequence<Dafny.ISequence<__T>> _94___accumulator = Dafny.Sequence<Dafny.ISequence<__T>>.FromElements();
    TAIL_CALL_START: ;
      Std.Wrappers._IOption<BigInteger> _95_i = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      if ((_95_i).is_Some) {
        _94___accumulator = Dafny.Sequence<Dafny.ISequence<__T>>.Concat(_94___accumulator, Dafny.Sequence<Dafny.ISequence<__T>>.FromElements((s).Take((_95_i).dtor_value)));
        Dafny.ISequence<__T> _in15 = (s).Drop(((_95_i).dtor_value) + (BigInteger.One));
        __T _in16 = delim;
        s = _in15;
        delim = _in16;
        goto TAIL_CALL_START;
      } else {
        return Dafny.Sequence<Dafny.ISequence<__T>>.Concat(_94___accumulator, Dafny.Sequence<Dafny.ISequence<__T>>.FromElements(s));
      }
    }
    public static _System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>> SplitOnce<__T>(Dafny.ISequence<__T> s, __T delim)
    {
      Std.Wrappers._IOption<BigInteger> _96_i = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      return _System.Tuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>.create((s).Take((_96_i).dtor_value), (s).Drop(((_96_i).dtor_value) + (BigInteger.One)));
    }
    public static Std.Wrappers._IOption<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>> SplitOnceOption<__T>(Dafny.ISequence<__T> s, __T delim)
    {
      Std.Wrappers._IOption<BigInteger> _97_valueOrError0 = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      if ((_97_valueOrError0).IsFailure()) {
        return (_97_valueOrError0).PropagateFailure<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>>();
      } else {
        BigInteger _98_i = (_97_valueOrError0).Extract();
        return Std.Wrappers.Option<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>>.create_Some(_System.Tuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>.create((s).Take(_98_i), (s).Drop((_98_i) + (BigInteger.One))));
      }
    }
    public static Dafny.ISequence<__R> Map<__T, __R>(Func<__T, __R> f, Dafny.ISequence<__T> xs)
    {
      Dafny.ISequence<__R> _99___accumulator = Dafny.Sequence<__R>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__R>.Concat(_99___accumulator, Dafny.Sequence<__R>.FromElements());
      } else {
        _99___accumulator = Dafny.Sequence<__R>.Concat(_99___accumulator, Dafny.Sequence<__R>.FromElements(Dafny.Helpers.Id<Func<__T, __R>>(f)((xs).Select(BigInteger.Zero))));
        Func<__T, __R> _in17 = f;
        Dafny.ISequence<__T> _in18 = (xs).Drop(BigInteger.One);
        f = _in17;
        xs = _in18;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IResult<Dafny.ISequence<__R>, __E> MapWithResult<__T, __R, __E>(Func<__T, Std.Wrappers._IResult<__R, __E>> f, Dafny.ISequence<__T> xs)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Result<Dafny.ISequence<__R>, __E>.create_Success(Dafny.Sequence<__R>.FromElements());
      } else {
        Std.Wrappers._IResult<__R, __E> _100_valueOrError0 = Dafny.Helpers.Id<Func<__T, Std.Wrappers._IResult<__R, __E>>>(f)((xs).Select(BigInteger.Zero));
        if ((_100_valueOrError0).IsFailure()) {
          return (_100_valueOrError0).PropagateFailure<Dafny.ISequence<__R>>();
        } else {
          __R _101_head = (_100_valueOrError0).Extract();
          Std.Wrappers._IResult<Dafny.ISequence<__R>, __E> _102_valueOrError1 = Std.Collections.Seq.__default.MapWithResult<__T, __R, __E>(f, (xs).Drop(BigInteger.One));
          if ((_102_valueOrError1).IsFailure()) {
            return (_102_valueOrError1).PropagateFailure<Dafny.ISequence<__R>>();
          } else {
            Dafny.ISequence<__R> _103_tail = (_102_valueOrError1).Extract();
            return Std.Wrappers.Result<Dafny.ISequence<__R>, __E>.create_Success(Dafny.Sequence<__R>.Concat(Dafny.Sequence<__R>.FromElements(_101_head), _103_tail));
          }
        }
      }
    }
    public static Dafny.ISequence<__T> Filter<__T>(Func<__T, bool> f, Dafny.ISequence<__T> xs)
    {
      Dafny.ISequence<__T> _104___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_104___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _104___accumulator = Dafny.Sequence<__T>.Concat(_104___accumulator, ((Dafny.Helpers.Id<Func<__T, bool>>(f)((xs).Select(BigInteger.Zero))) ? (Dafny.Sequence<__T>.FromElements((xs).Select(BigInteger.Zero))) : (Dafny.Sequence<__T>.FromElements())));
        Func<__T, bool> _in19 = f;
        Dafny.ISequence<__T> _in20 = (xs).Drop(BigInteger.One);
        f = _in19;
        xs = _in20;
        goto TAIL_CALL_START;
      }
    }
    public static __A FoldLeft<__A, __T>(Func<__A, __T, __A> f, __A init, Dafny.ISequence<__T> xs)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return init;
      } else {
        Func<__A, __T, __A> _in21 = f;
        __A _in22 = Dafny.Helpers.Id<Func<__A, __T, __A>>(f)(init, (xs).Select(BigInteger.Zero));
        Dafny.ISequence<__T> _in23 = (xs).Drop(BigInteger.One);
        f = _in21;
        init = _in22;
        xs = _in23;
        goto TAIL_CALL_START;
      }
    }
    public static __A FoldRight<__A, __T>(Func<__T, __A, __A> f, Dafny.ISequence<__T> xs, __A init)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return init;
      } else {
        return Dafny.Helpers.Id<Func<__T, __A, __A>>(f)((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.FoldRight<__A, __T>(f, (xs).Drop(BigInteger.One), init));
      }
    }
    public static Dafny.ISequence<__T> SetToSeq<__T>(Dafny.ISet<__T> s)
    {
      Dafny.ISequence<__T> xs = Dafny.Sequence<__T>.Empty;
      xs = Dafny.Sequence<__T>.FromElements();
      Dafny.ISet<__T> _105_left;
      _105_left = s;
      while (!(_105_left).Equals(Dafny.Set<__T>.FromElements())) {
        __T _106_x;
        foreach (__T _assign_such_that_0 in (_105_left).Elements) {
          _106_x = (__T)_assign_such_that_0;
          if ((_105_left).Contains(_106_x)) {
            goto after__ASSIGN_SUCH_THAT_0;
          }
        }
        throw new System.Exception("assign-such-that search produced no value (line 7231)");
      after__ASSIGN_SUCH_THAT_0: ;
        _105_left = Dafny.Set<__T>.Difference(_105_left, Dafny.Set<__T>.FromElements(_106_x));
        xs = Dafny.Sequence<__T>.Concat(xs, Dafny.Sequence<__T>.FromElements(_106_x));
      }
      return xs;
    }
    public static Dafny.ISequence<__T> SetToSortedSeq<__T>(Dafny.ISet<__T> s, Func<__T, __T, bool> R)
    {
      Dafny.ISequence<__T> xs = Dafny.Sequence<__T>.Empty;
      Dafny.ISequence<__T> _out6;
      _out6 = Std.Collections.Seq.__default.SetToSeq<__T>(s);
      xs = _out6;
      xs = Std.Collections.Seq.__default.MergeSortBy<__T>(R, xs);
      return xs;
    }
    public static Dafny.ISequence<__T> MergeSortBy<__T>(Func<__T, __T, bool> lessThanOrEq, Dafny.ISequence<__T> a)
    {
      if ((new BigInteger((a).Count)) <= (BigInteger.One)) {
        return a;
      } else {
        BigInteger _107_splitIndex = Dafny.Helpers.EuclideanDivision(new BigInteger((a).Count), new BigInteger(2));
        Dafny.ISequence<__T> _108_left = (a).Take(_107_splitIndex);
        Dafny.ISequence<__T> _109_right = (a).Drop(_107_splitIndex);
        Dafny.ISequence<__T> _110_leftSorted = Std.Collections.Seq.__default.MergeSortBy<__T>(lessThanOrEq, _108_left);
        Dafny.ISequence<__T> _111_rightSorted = Std.Collections.Seq.__default.MergeSortBy<__T>(lessThanOrEq, _109_right);
        return Std.Collections.Seq.__default.MergeSortedWith<__T>(_110_leftSorted, _111_rightSorted, lessThanOrEq);
      }
    }
    public static Dafny.ISequence<__T> MergeSortedWith<__T>(Dafny.ISequence<__T> left, Dafny.ISequence<__T> right, Func<__T, __T, bool> lessThanOrEq)
    {
      Dafny.ISequence<__T> _112___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((left).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_112___accumulator, right);
      } else if ((new BigInteger((right).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_112___accumulator, left);
      } else if (Dafny.Helpers.Id<Func<__T, __T, bool>>(lessThanOrEq)((left).Select(BigInteger.Zero), (right).Select(BigInteger.Zero))) {
        _112___accumulator = Dafny.Sequence<__T>.Concat(_112___accumulator, Dafny.Sequence<__T>.FromElements((left).Select(BigInteger.Zero)));
        Dafny.ISequence<__T> _in24 = (left).Drop(BigInteger.One);
        Dafny.ISequence<__T> _in25 = right;
        Func<__T, __T, bool> _in26 = lessThanOrEq;
        left = _in24;
        right = _in25;
        lessThanOrEq = _in26;
        goto TAIL_CALL_START;
      } else {
        _112___accumulator = Dafny.Sequence<__T>.Concat(_112___accumulator, Dafny.Sequence<__T>.FromElements((right).Select(BigInteger.Zero)));
        Dafny.ISequence<__T> _in27 = left;
        Dafny.ISequence<__T> _in28 = (right).Drop(BigInteger.One);
        Func<__T, __T, bool> _in29 = lessThanOrEq;
        left = _in27;
        right = _in28;
        lessThanOrEq = _in29;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Collections.Seq
namespace Std.Arithmetic.GeneralInternals {

} // end of namespace Std.Arithmetic.GeneralInternals
namespace Std.Arithmetic.MulInternalsNonlinear {

} // end of namespace Std.Arithmetic.MulInternalsNonlinear
namespace Std.Arithmetic.MulInternals {

  public partial class __default {
    public static BigInteger MulPos(BigInteger x, BigInteger y)
    {
      BigInteger _141___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((x).Sign == 0) {
        return (BigInteger.Zero) + (_141___accumulator);
      } else {
        _141___accumulator = (_141___accumulator) + (y);
        BigInteger _in32 = (x) - (BigInteger.One);
        BigInteger _in33 = y;
        x = _in32;
        y = _in33;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger MulRecursive(BigInteger x, BigInteger y)
    {
      if ((x).Sign != -1) {
        return Std.Arithmetic.MulInternals.__default.MulPos(x, y);
      } else {
        return (new BigInteger(-1)) * (Std.Arithmetic.MulInternals.__default.MulPos((new BigInteger(-1)) * (x), y));
      }
    }
  }
} // end of namespace Std.Arithmetic.MulInternals
namespace Std.Arithmetic.Mul {

} // end of namespace Std.Arithmetic.Mul
namespace Std.Arithmetic.ModInternalsNonlinear {

} // end of namespace Std.Arithmetic.ModInternalsNonlinear
namespace Std.Arithmetic.DivInternalsNonlinear {

} // end of namespace Std.Arithmetic.DivInternalsNonlinear
namespace Std.Arithmetic.ModInternals {

  public partial class __default {
    public static BigInteger ModRecursive(BigInteger x, BigInteger d)
    {
    TAIL_CALL_START: ;
      if ((x).Sign == -1) {
        BigInteger _in34 = (d) + (x);
        BigInteger _in35 = d;
        x = _in34;
        d = _in35;
        goto TAIL_CALL_START;
      } else if ((x) < (d)) {
        return x;
      } else {
        BigInteger _in36 = (x) - (d);
        BigInteger _in37 = d;
        x = _in36;
        d = _in37;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.ModInternals
namespace Std.Arithmetic.DivInternals {

  public partial class __default {
    public static BigInteger DivPos(BigInteger x, BigInteger d)
    {
      BigInteger _142___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((x).Sign == -1) {
        _142___accumulator = (_142___accumulator) + (new BigInteger(-1));
        BigInteger _in38 = (x) + (d);
        BigInteger _in39 = d;
        x = _in38;
        d = _in39;
        goto TAIL_CALL_START;
      } else if ((x) < (d)) {
        return (BigInteger.Zero) + (_142___accumulator);
      } else {
        _142___accumulator = (_142___accumulator) + (BigInteger.One);
        BigInteger _in40 = (x) - (d);
        BigInteger _in41 = d;
        x = _in40;
        d = _in41;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger DivRecursive(BigInteger x, BigInteger d)
    {
      if ((d).Sign == 1) {
        return Std.Arithmetic.DivInternals.__default.DivPos(x, d);
      } else {
        return (new BigInteger(-1)) * (Std.Arithmetic.DivInternals.__default.DivPos(x, (new BigInteger(-1)) * (d)));
      }
    }
  }
} // end of namespace Std.Arithmetic.DivInternals
namespace Std.Arithmetic.DivMod {

  public partial class __default {
    public static bool MultiplesVanish(BigInteger a, BigInteger b, BigInteger m)
    {
      return (Dafny.Helpers.EuclideanModulus(((m) * (a)) + (b), m)) == (Dafny.Helpers.EuclideanModulus(b, m));
    }
  }
} // end of namespace Std.Arithmetic.DivMod
namespace Std.Arithmetic.Power {

  public partial class __default {
    public static BigInteger Pow(BigInteger b, BigInteger e)
    {
      BigInteger _143___accumulator = BigInteger.One;
    TAIL_CALL_START: ;
      if ((e).Sign == 0) {
        return (BigInteger.One) * (_143___accumulator);
      } else {
        _143___accumulator = (_143___accumulator) * (b);
        BigInteger _in42 = b;
        BigInteger _in43 = (e) - (BigInteger.One);
        b = _in42;
        e = _in43;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.Power
namespace Std.Arithmetic.Logarithm {

  public partial class __default {
    public static BigInteger Log(BigInteger @base, BigInteger pow)
    {
      BigInteger _144___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((pow) < (@base)) {
        return (BigInteger.Zero) + (_144___accumulator);
      } else {
        _144___accumulator = (_144___accumulator) + (BigInteger.One);
        BigInteger _in44 = @base;
        BigInteger _in45 = Dafny.Helpers.EuclideanDivision(pow, @base);
        @base = _in44;
        pow = _in45;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.Logarithm
namespace Std.Arithmetic.Power2 {

  public partial class __default {
    public static BigInteger Pow2(BigInteger e) {
      return Std.Arithmetic.Power.__default.Pow(new BigInteger(2), e);
    }
  }
} // end of namespace Std.Arithmetic.Power2
namespace Std.Arithmetic {

} // end of namespace Std.Arithmetic
namespace Std.Strings.HexConversion {

  public partial class __default {
    public static BigInteger BASE() {
      return Std.Strings.HexConversion.__default.@base;
    }
    public static bool IsDigitChar(Dafny.Rune c) {
      return (Std.Strings.HexConversion.__default.charToDigit).Contains(c);
    }
    public static Dafny.ISequence<Dafny.Rune> OfDigits(Dafny.ISequence<BigInteger> digits) {
      Dafny.ISequence<Dafny.Rune> _145___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((digits).Equals(Dafny.Sequence<BigInteger>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(), _145___accumulator);
      } else {
        _145___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.HexConversion.__default.chars).Select((digits).Select(BigInteger.Zero))), _145___accumulator);
        Dafny.ISequence<BigInteger> _in46 = (digits).Drop(BigInteger.One);
        digits = _in46;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.HexConversion.__default.chars).Select(BigInteger.Zero));
      } else {
        return Std.Strings.HexConversion.__default.OfDigits(Std.Strings.HexConversion.__default.FromNat(n));
      }
    }
    public static bool IsNumberStr(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus)
    {
      return !(!(str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) || (((((str).Select(BigInteger.Zero)) == (minus)) || ((Std.Strings.HexConversion.__default.charToDigit).Contains((str).Select(BigInteger.Zero)))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, bool>>((_146_str) => Dafny.Helpers.Quantifier<Dafny.Rune>(((_146_str).Drop(BigInteger.One)).UniqueElements, true, (((_forall_var_1) => {
        Dafny.Rune _147_c = (Dafny.Rune)_forall_var_1;
        return !(((_146_str).Drop(BigInteger.One)).Contains(_147_c)) || (Std.Strings.HexConversion.__default.IsDigitChar(_147_c));
      }))))(str)));
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n, Dafny.Rune minus)
    {
      if ((n).Sign != -1) {
        return Std.Strings.HexConversion.__default.OfNat(n);
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(minus), Std.Strings.HexConversion.__default.OfNat((BigInteger.Zero) - (n)));
      }
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return BigInteger.Zero;
      } else {
        Dafny.Rune _148_c = (str).Select((new BigInteger((str).Count)) - (BigInteger.One));
        return ((Std.Strings.HexConversion.__default.ToNat((str).Take((new BigInteger((str).Count)) - (BigInteger.One)))) * (Std.Strings.HexConversion.__default.@base)) + (Dafny.Map<Dafny.Rune, BigInteger>.Select(Std.Strings.HexConversion.__default.charToDigit,_148_c));
      }
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus)
    {
      if (Dafny.Sequence<Dafny.Rune>.IsPrefixOf(Dafny.Sequence<Dafny.Rune>.FromElements(minus), str)) {
        return (BigInteger.Zero) - (Std.Strings.HexConversion.__default.ToNat((str).Drop(BigInteger.One)));
      } else {
        return Std.Strings.HexConversion.__default.ToNat(str);
      }
    }
    public static BigInteger ToNatRight(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        return ((Std.Strings.HexConversion.__default.ToNatRight(Std.Collections.Seq.__default.DropFirst<BigInteger>(xs))) * (Std.Strings.HexConversion.__default.BASE())) + (Std.Collections.Seq.__default.First<BigInteger>(xs));
      }
    }
    public static BigInteger ToNatLeft(Dafny.ISequence<BigInteger> xs) {
      BigInteger _149___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return (BigInteger.Zero) + (_149___accumulator);
      } else {
        _149___accumulator = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) * (Std.Arithmetic.Power.__default.Pow(Std.Strings.HexConversion.__default.BASE(), (new BigInteger((xs).Count)) - (BigInteger.One)))) + (_149___accumulator);
        Dafny.ISequence<BigInteger> _in47 = Std.Collections.Seq.__default.DropLast<BigInteger>(xs);
        xs = _in47;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> FromNat(BigInteger n) {
      Dafny.ISequence<BigInteger> _150___accumulator = Dafny.Sequence<BigInteger>.FromElements();
    TAIL_CALL_START: ;
      if ((n).Sign == 0) {
        return Dafny.Sequence<BigInteger>.Concat(_150___accumulator, Dafny.Sequence<BigInteger>.FromElements());
      } else {
        _150___accumulator = Dafny.Sequence<BigInteger>.Concat(_150___accumulator, Dafny.Sequence<BigInteger>.FromElements(Dafny.Helpers.EuclideanModulus(n, Std.Strings.HexConversion.__default.BASE())));
        BigInteger _in48 = Dafny.Helpers.EuclideanDivision(n, Std.Strings.HexConversion.__default.BASE());
        n = _in48;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtend(Dafny.ISequence<BigInteger> xs, BigInteger n)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)) >= (n)) {
        return xs;
      } else {
        Dafny.ISequence<BigInteger> _in49 = Dafny.Sequence<BigInteger>.Concat(xs, Dafny.Sequence<BigInteger>.FromElements(BigInteger.Zero));
        BigInteger _in50 = n;
        xs = _in49;
        n = _in50;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtendMultiple(Dafny.ISequence<BigInteger> xs, BigInteger n)
    {
      BigInteger _151_newLen = ((new BigInteger((xs).Count)) + (n)) - (Dafny.Helpers.EuclideanModulus(new BigInteger((xs).Count), n));
      return Std.Strings.HexConversion.__default.SeqExtend(xs, _151_newLen);
    }
    public static Dafny.ISequence<BigInteger> FromNatWithLen(BigInteger n, BigInteger len)
    {
      return Std.Strings.HexConversion.__default.SeqExtend(Std.Strings.HexConversion.__default.FromNat(n), len);
    }
    public static Dafny.ISequence<BigInteger> SeqZero(BigInteger len) {
      Dafny.ISequence<BigInteger> _152_xs = Std.Strings.HexConversion.__default.FromNatWithLen(BigInteger.Zero, len);
      return _152_xs;
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqAdd(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs1 = Std.Strings.HexConversion.__default.SeqAdd(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _153_zs_k = _let_tmp_rhs1.dtor__0;
        BigInteger _154_cin = _let_tmp_rhs1.dtor__1;
        BigInteger _155_sum = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) + (Std.Collections.Seq.__default.Last<BigInteger>(ys))) + (_154_cin);
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs2 = (((_155_sum) < (Std.Strings.HexConversion.__default.BASE())) ? (_System.Tuple2<BigInteger, BigInteger>.create(_155_sum, BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((_155_sum) - (Std.Strings.HexConversion.__default.BASE()), BigInteger.One)));
        BigInteger _156_sum__out = _let_tmp_rhs2.dtor__0;
        BigInteger _157_cout = _let_tmp_rhs2.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_153_zs_k, Dafny.Sequence<BigInteger>.FromElements(_156_sum__out)), _157_cout);
      }
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqSub(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs3 = Std.Strings.HexConversion.__default.SeqSub(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _158_zs = _let_tmp_rhs3.dtor__0;
        BigInteger _159_cin = _let_tmp_rhs3.dtor__1;
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs4 = (((Std.Collections.Seq.__default.Last<BigInteger>(xs)) >= ((Std.Collections.Seq.__default.Last<BigInteger>(ys)) + (_159_cin))) ? (_System.Tuple2<BigInteger, BigInteger>.create(((Std.Collections.Seq.__default.Last<BigInteger>(xs)) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_159_cin), BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((((Std.Strings.HexConversion.__default.BASE()) + (Std.Collections.Seq.__default.Last<BigInteger>(xs))) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_159_cin), BigInteger.One)));
        BigInteger _160_diff__out = _let_tmp_rhs4.dtor__0;
        BigInteger _161_cout = _let_tmp_rhs4.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_158_zs, Dafny.Sequence<BigInteger>.FromElements(_160_diff__out)), _161_cout);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> HEX__DIGITS { get {
      return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789ABCDEF");
    } }
    public static Dafny.ISequence<Dafny.Rune> chars { get {
      return Std.Strings.HexConversion.__default.HEX__DIGITS;
    } }
    public static BigInteger @base { get {
      return new BigInteger((Std.Strings.HexConversion.__default.chars).Count);
    } }
    public static Dafny.IMap<Dafny.Rune,BigInteger> charToDigit { get {
      return Dafny.Map<Dafny.Rune, BigInteger>.FromElements(new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('0'), BigInteger.Zero), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('1'), BigInteger.One), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('2'), new BigInteger(2)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('3'), new BigInteger(3)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('4'), new BigInteger(4)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('5'), new BigInteger(5)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('6'), new BigInteger(6)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('7'), new BigInteger(7)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('8'), new BigInteger(8)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('9'), new BigInteger(9)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('a'), new BigInteger(10)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('b'), new BigInteger(11)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('c'), new BigInteger(12)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('d'), new BigInteger(13)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('e'), new BigInteger(14)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('f'), new BigInteger(15)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('A'), new BigInteger(10)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('B'), new BigInteger(11)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('C'), new BigInteger(12)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('D'), new BigInteger(13)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('E'), new BigInteger(14)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('F'), new BigInteger(15)));
    } }
  }

  public partial class CharSeq {
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class digit {
    private static readonly Dafny.TypeDescriptor<BigInteger> _TYPE = new Dafny.TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static Dafny.TypeDescriptor<BigInteger> _TypeDescriptor() {
      return _TYPE;
    }
  }
} // end of namespace Std.Strings.HexConversion
namespace Std.Strings.DecimalConversion {

  public partial class __default {
    public static BigInteger BASE() {
      return Std.Strings.DecimalConversion.__default.@base;
    }
    public static bool IsDigitChar(Dafny.Rune c) {
      return (Std.Strings.DecimalConversion.__default.charToDigit).Contains(c);
    }
    public static Dafny.ISequence<Dafny.Rune> OfDigits(Dafny.ISequence<BigInteger> digits) {
      Dafny.ISequence<Dafny.Rune> _162___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((digits).Equals(Dafny.Sequence<BigInteger>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(), _162___accumulator);
      } else {
        _162___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.DecimalConversion.__default.chars).Select((digits).Select(BigInteger.Zero))), _162___accumulator);
        Dafny.ISequence<BigInteger> _in51 = (digits).Drop(BigInteger.One);
        digits = _in51;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.DecimalConversion.__default.chars).Select(BigInteger.Zero));
      } else {
        return Std.Strings.DecimalConversion.__default.OfDigits(Std.Strings.DecimalConversion.__default.FromNat(n));
      }
    }
    public static bool IsNumberStr(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus)
    {
      return !(!(str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) || (((((str).Select(BigInteger.Zero)) == (minus)) || ((Std.Strings.DecimalConversion.__default.charToDigit).Contains((str).Select(BigInteger.Zero)))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, bool>>((_163_str) => Dafny.Helpers.Quantifier<Dafny.Rune>(((_163_str).Drop(BigInteger.One)).UniqueElements, true, (((_forall_var_2) => {
        Dafny.Rune _164_c = (Dafny.Rune)_forall_var_2;
        return !(((_163_str).Drop(BigInteger.One)).Contains(_164_c)) || (Std.Strings.DecimalConversion.__default.IsDigitChar(_164_c));
      }))))(str)));
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n, Dafny.Rune minus)
    {
      if ((n).Sign != -1) {
        return Std.Strings.DecimalConversion.__default.OfNat(n);
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(minus), Std.Strings.DecimalConversion.__default.OfNat((BigInteger.Zero) - (n)));
      }
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return BigInteger.Zero;
      } else {
        Dafny.Rune _165_c = (str).Select((new BigInteger((str).Count)) - (BigInteger.One));
        return ((Std.Strings.DecimalConversion.__default.ToNat((str).Take((new BigInteger((str).Count)) - (BigInteger.One)))) * (Std.Strings.DecimalConversion.__default.@base)) + (Dafny.Map<Dafny.Rune, BigInteger>.Select(Std.Strings.DecimalConversion.__default.charToDigit,_165_c));
      }
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus)
    {
      if (Dafny.Sequence<Dafny.Rune>.IsPrefixOf(Dafny.Sequence<Dafny.Rune>.FromElements(minus), str)) {
        return (BigInteger.Zero) - (Std.Strings.DecimalConversion.__default.ToNat((str).Drop(BigInteger.One)));
      } else {
        return Std.Strings.DecimalConversion.__default.ToNat(str);
      }
    }
    public static BigInteger ToNatRight(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        return ((Std.Strings.DecimalConversion.__default.ToNatRight(Std.Collections.Seq.__default.DropFirst<BigInteger>(xs))) * (Std.Strings.DecimalConversion.__default.BASE())) + (Std.Collections.Seq.__default.First<BigInteger>(xs));
      }
    }
    public static BigInteger ToNatLeft(Dafny.ISequence<BigInteger> xs) {
      BigInteger _166___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return (BigInteger.Zero) + (_166___accumulator);
      } else {
        _166___accumulator = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) * (Std.Arithmetic.Power.__default.Pow(Std.Strings.DecimalConversion.__default.BASE(), (new BigInteger((xs).Count)) - (BigInteger.One)))) + (_166___accumulator);
        Dafny.ISequence<BigInteger> _in52 = Std.Collections.Seq.__default.DropLast<BigInteger>(xs);
        xs = _in52;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> FromNat(BigInteger n) {
      Dafny.ISequence<BigInteger> _167___accumulator = Dafny.Sequence<BigInteger>.FromElements();
    TAIL_CALL_START: ;
      if ((n).Sign == 0) {
        return Dafny.Sequence<BigInteger>.Concat(_167___accumulator, Dafny.Sequence<BigInteger>.FromElements());
      } else {
        _167___accumulator = Dafny.Sequence<BigInteger>.Concat(_167___accumulator, Dafny.Sequence<BigInteger>.FromElements(Dafny.Helpers.EuclideanModulus(n, Std.Strings.DecimalConversion.__default.BASE())));
        BigInteger _in53 = Dafny.Helpers.EuclideanDivision(n, Std.Strings.DecimalConversion.__default.BASE());
        n = _in53;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtend(Dafny.ISequence<BigInteger> xs, BigInteger n)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)) >= (n)) {
        return xs;
      } else {
        Dafny.ISequence<BigInteger> _in54 = Dafny.Sequence<BigInteger>.Concat(xs, Dafny.Sequence<BigInteger>.FromElements(BigInteger.Zero));
        BigInteger _in55 = n;
        xs = _in54;
        n = _in55;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtendMultiple(Dafny.ISequence<BigInteger> xs, BigInteger n)
    {
      BigInteger _168_newLen = ((new BigInteger((xs).Count)) + (n)) - (Dafny.Helpers.EuclideanModulus(new BigInteger((xs).Count), n));
      return Std.Strings.DecimalConversion.__default.SeqExtend(xs, _168_newLen);
    }
    public static Dafny.ISequence<BigInteger> FromNatWithLen(BigInteger n, BigInteger len)
    {
      return Std.Strings.DecimalConversion.__default.SeqExtend(Std.Strings.DecimalConversion.__default.FromNat(n), len);
    }
    public static Dafny.ISequence<BigInteger> SeqZero(BigInteger len) {
      Dafny.ISequence<BigInteger> _169_xs = Std.Strings.DecimalConversion.__default.FromNatWithLen(BigInteger.Zero, len);
      return _169_xs;
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqAdd(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs5 = Std.Strings.DecimalConversion.__default.SeqAdd(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _170_zs_k = _let_tmp_rhs5.dtor__0;
        BigInteger _171_cin = _let_tmp_rhs5.dtor__1;
        BigInteger _172_sum = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) + (Std.Collections.Seq.__default.Last<BigInteger>(ys))) + (_171_cin);
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs6 = (((_172_sum) < (Std.Strings.DecimalConversion.__default.BASE())) ? (_System.Tuple2<BigInteger, BigInteger>.create(_172_sum, BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((_172_sum) - (Std.Strings.DecimalConversion.__default.BASE()), BigInteger.One)));
        BigInteger _173_sum__out = _let_tmp_rhs6.dtor__0;
        BigInteger _174_cout = _let_tmp_rhs6.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_170_zs_k, Dafny.Sequence<BigInteger>.FromElements(_173_sum__out)), _174_cout);
      }
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqSub(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs7 = Std.Strings.DecimalConversion.__default.SeqSub(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _175_zs = _let_tmp_rhs7.dtor__0;
        BigInteger _176_cin = _let_tmp_rhs7.dtor__1;
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs8 = (((Std.Collections.Seq.__default.Last<BigInteger>(xs)) >= ((Std.Collections.Seq.__default.Last<BigInteger>(ys)) + (_176_cin))) ? (_System.Tuple2<BigInteger, BigInteger>.create(((Std.Collections.Seq.__default.Last<BigInteger>(xs)) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_176_cin), BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((((Std.Strings.DecimalConversion.__default.BASE()) + (Std.Collections.Seq.__default.Last<BigInteger>(xs))) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_176_cin), BigInteger.One)));
        BigInteger _177_diff__out = _let_tmp_rhs8.dtor__0;
        BigInteger _178_cout = _let_tmp_rhs8.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_175_zs, Dafny.Sequence<BigInteger>.FromElements(_177_diff__out)), _178_cout);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> DIGITS { get {
      return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789");
    } }
    public static Dafny.ISequence<Dafny.Rune> chars { get {
      return Std.Strings.DecimalConversion.__default.DIGITS;
    } }
    public static BigInteger @base { get {
      return new BigInteger((Std.Strings.DecimalConversion.__default.chars).Count);
    } }
    public static Dafny.IMap<Dafny.Rune,BigInteger> charToDigit { get {
      return Dafny.Map<Dafny.Rune, BigInteger>.FromElements(new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('0'), BigInteger.Zero), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('1'), BigInteger.One), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('2'), new BigInteger(2)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('3'), new BigInteger(3)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('4'), new BigInteger(4)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('5'), new BigInteger(5)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('6'), new BigInteger(6)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('7'), new BigInteger(7)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('8'), new BigInteger(8)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('9'), new BigInteger(9)));
    } }
  }

  public partial class CharSeq {
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class digit {
    private static readonly Dafny.TypeDescriptor<BigInteger> _TYPE = new Dafny.TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static Dafny.TypeDescriptor<BigInteger> _TypeDescriptor() {
      return _TYPE;
    }
  }
} // end of namespace Std.Strings.DecimalConversion
namespace Std.Strings.CharStrEscaping {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> Escape(Dafny.ISequence<Dafny.Rune> str, Dafny.ISet<Dafny.Rune> mustEscape, Dafny.Rune escape)
    {
      Dafny.ISequence<Dafny.Rune> _179___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_179___accumulator, str);
      } else if ((mustEscape).Contains((str).Select(BigInteger.Zero))) {
        _179___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_179___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements(escape, (str).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in56 = (str).Drop(BigInteger.One);
        Dafny.ISet<Dafny.Rune> _in57 = mustEscape;
        Dafny.Rune _in58 = escape;
        str = _in56;
        mustEscape = _in57;
        escape = _in58;
        goto TAIL_CALL_START;
      } else {
        _179___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_179___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in59 = (str).Drop(BigInteger.One);
        Dafny.ISet<Dafny.Rune> _in60 = mustEscape;
        Dafny.Rune _in61 = escape;
        str = _in59;
        mustEscape = _in60;
        escape = _in61;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> Unescape(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune escape)
    {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(str);
      } else if (((str).Select(BigInteger.Zero)) == (escape)) {
        if ((new BigInteger((str).Count)) > (BigInteger.One)) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _180_valueOrError0 = Std.Strings.CharStrEscaping.__default.Unescape((str).Drop(new BigInteger(2)), escape);
          if ((_180_valueOrError0).IsFailure()) {
            return (_180_valueOrError0).PropagateFailure<Dafny.ISequence<Dafny.Rune>>();
          } else {
            Dafny.ISequence<Dafny.Rune> _181_tl = (_180_valueOrError0).Extract();
            return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.One)), _181_tl));
          }
        } else {
          return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
        }
      } else {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _182_valueOrError1 = Std.Strings.CharStrEscaping.__default.Unescape((str).Drop(BigInteger.One), escape);
        if ((_182_valueOrError1).IsFailure()) {
          return (_182_valueOrError1).PropagateFailure<Dafny.ISequence<Dafny.Rune>>();
        } else {
          Dafny.ISequence<Dafny.Rune> _183_tl = (_182_valueOrError1).Extract();
          return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.Zero)), _183_tl));
        }
      }
    }
  }
} // end of namespace Std.Strings.CharStrEscaping
namespace Std.Strings {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      return Std.Strings.DecimalConversion.__default.OfNat(n);
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n) {
      return Std.Strings.DecimalConversion.__default.OfInt(n, new Dafny.Rune('-'));
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.DecimalConversion.__default.ToNat(str);
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.DecimalConversion.__default.ToInt(str, new Dafny.Rune('-'));
    }
    public static Dafny.ISequence<Dafny.Rune> EscapeQuotes(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.CharStrEscaping.__default.Escape(str, Dafny.Set<Dafny.Rune>.FromElements(new Dafny.Rune('\"'), new Dafny.Rune('\'')), new Dafny.Rune('\\'));
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> UnescapeQuotes(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.CharStrEscaping.__default.Unescape(str, new Dafny.Rune('\\'));
    }
    public static Dafny.ISequence<Dafny.Rune> OfBool(bool b) {
      if (b) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false");
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfChar(Dafny.Rune c) {
      return Dafny.Sequence<Dafny.Rune>.FromElements(c);
    }
  }
} // end of namespace Std.Strings

namespace DAST.Format {


  public interface _IUnOpFormat {
    bool is_NoFormat { get; }
    bool is_CombineNotInner { get; }
    _IUnOpFormat DowncastClone();
  }
  public abstract class UnOpFormat : _IUnOpFormat {
    public UnOpFormat() {
    }
    private static readonly DAST.Format._IUnOpFormat theDefault = create_NoFormat();
    public static DAST.Format._IUnOpFormat Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST.Format._IUnOpFormat> _TYPE = new Dafny.TypeDescriptor<DAST.Format._IUnOpFormat>(DAST.Format.UnOpFormat.Default());
    public static Dafny.TypeDescriptor<DAST.Format._IUnOpFormat> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnOpFormat create_NoFormat() {
      return new UnOpFormat_NoFormat();
    }
    public static _IUnOpFormat create_CombineNotInner() {
      return new UnOpFormat_CombineNotInner();
    }
    public bool is_NoFormat { get { return this is UnOpFormat_NoFormat; } }
    public bool is_CombineNotInner { get { return this is UnOpFormat_CombineNotInner; } }
    public static System.Collections.Generic.IEnumerable<_IUnOpFormat> AllSingletonConstructors {
      get {
        yield return UnOpFormat.create_NoFormat();
        yield return UnOpFormat.create_CombineNotInner();
      }
    }
    public abstract _IUnOpFormat DowncastClone();
  }
  public class UnOpFormat_NoFormat : UnOpFormat {
    public UnOpFormat_NoFormat() : base() {
    }
    public override _IUnOpFormat DowncastClone() {
      if (this is _IUnOpFormat dt) { return dt; }
      return new UnOpFormat_NoFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.UnOpFormat_NoFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.UnOpFormat.NoFormat";
      return s;
    }
  }
  public class UnOpFormat_CombineNotInner : UnOpFormat {
    public UnOpFormat_CombineNotInner() : base() {
    }
    public override _IUnOpFormat DowncastClone() {
      if (this is _IUnOpFormat dt) { return dt; }
      return new UnOpFormat_CombineNotInner();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.UnOpFormat_CombineNotInner;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.UnOpFormat.CombineNotInner";
      return s;
    }
  }

  public interface _IBinOpFormat {
    bool is_NoFormat { get; }
    bool is_ImpliesFormat { get; }
    bool is_Equivalence { get; }
    bool is_ReverseOperands { get; }
    _IBinOpFormat DowncastClone();
  }
  public abstract class BinOpFormat : _IBinOpFormat {
    public BinOpFormat() {
    }
    private static readonly DAST.Format._IBinOpFormat theDefault = create_NoFormat();
    public static DAST.Format._IBinOpFormat Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST.Format._IBinOpFormat> _TYPE = new Dafny.TypeDescriptor<DAST.Format._IBinOpFormat>(DAST.Format.BinOpFormat.Default());
    public static Dafny.TypeDescriptor<DAST.Format._IBinOpFormat> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOpFormat create_NoFormat() {
      return new BinOpFormat_NoFormat();
    }
    public static _IBinOpFormat create_ImpliesFormat() {
      return new BinOpFormat_ImpliesFormat();
    }
    public static _IBinOpFormat create_Equivalence() {
      return new BinOpFormat_Equivalence();
    }
    public static _IBinOpFormat create_ReverseOperands() {
      return new BinOpFormat_ReverseOperands();
    }
    public bool is_NoFormat { get { return this is BinOpFormat_NoFormat; } }
    public bool is_ImpliesFormat { get { return this is BinOpFormat_ImpliesFormat; } }
    public bool is_Equivalence { get { return this is BinOpFormat_Equivalence; } }
    public bool is_ReverseOperands { get { return this is BinOpFormat_ReverseOperands; } }
    public static System.Collections.Generic.IEnumerable<_IBinOpFormat> AllSingletonConstructors {
      get {
        yield return BinOpFormat.create_NoFormat();
        yield return BinOpFormat.create_ImpliesFormat();
        yield return BinOpFormat.create_Equivalence();
        yield return BinOpFormat.create_ReverseOperands();
      }
    }
    public abstract _IBinOpFormat DowncastClone();
  }
  public class BinOpFormat_NoFormat : BinOpFormat {
    public BinOpFormat_NoFormat() : base() {
    }
    public override _IBinOpFormat DowncastClone() {
      if (this is _IBinOpFormat dt) { return dt; }
      return new BinOpFormat_NoFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinOpFormat_NoFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.BinOpFormat.NoFormat";
      return s;
    }
  }
  public class BinOpFormat_ImpliesFormat : BinOpFormat {
    public BinOpFormat_ImpliesFormat() : base() {
    }
    public override _IBinOpFormat DowncastClone() {
      if (this is _IBinOpFormat dt) { return dt; }
      return new BinOpFormat_ImpliesFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinOpFormat_ImpliesFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.BinOpFormat.ImpliesFormat";
      return s;
    }
  }
  public class BinOpFormat_Equivalence : BinOpFormat {
    public BinOpFormat_Equivalence() : base() {
    }
    public override _IBinOpFormat DowncastClone() {
      if (this is _IBinOpFormat dt) { return dt; }
      return new BinOpFormat_Equivalence();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinOpFormat_Equivalence;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.BinOpFormat.Equivalence";
      return s;
    }
  }
  public class BinOpFormat_ReverseOperands : BinOpFormat {
    public BinOpFormat_ReverseOperands() : base() {
    }
    public override _IBinOpFormat DowncastClone() {
      if (this is _IBinOpFormat dt) { return dt; }
      return new BinOpFormat_ReverseOperands();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinOpFormat_ReverseOperands;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.BinOpFormat.ReverseOperands";
      return s;
    }
  }
} // end of namespace DAST.Format
namespace DAST {


  public interface _IModule {
    bool is_Module { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    bool dtor_isExtern { get; }
    Dafny.ISequence<DAST._IModuleItem> dtor_body { get; }
    _IModule DowncastClone();
  }
  public class Module : _IModule {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly bool _isExtern;
    public readonly Dafny.ISequence<DAST._IModuleItem> _body;
    public Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      this._name = name;
      this._isExtern = isExtern;
      this._body = body;
    }
    public _IModule DowncastClone() {
      if (this is _IModule dt) { return dt; }
      return new Module(_name, _isExtern, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Module;
      return oth != null && object.Equals(this._name, oth._name) && this._isExtern == oth._isExtern && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isExtern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Module.Module";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isExtern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IModule theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, false, Dafny.Sequence<DAST._IModuleItem>.Empty);
    public static DAST._IModule Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModule> _TYPE = new Dafny.TypeDescriptor<DAST._IModule>(DAST.Module.Default());
    public static Dafny.TypeDescriptor<DAST._IModule> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModule create(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return new Module(name, isExtern, body);
    }
    public static _IModule create_Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return create(name, isExtern, body);
    }
    public bool is_Module { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public bool dtor_isExtern {
      get {
        return this._isExtern;
      }
    }
    public Dafny.ISequence<DAST._IModuleItem> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IModuleItem {
    bool is_Module { get; }
    bool is_Class { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    bool is_Datatype { get; }
    DAST._IModule dtor_Module_a0 { get; }
    DAST._IClass dtor_Class_a0 { get; }
    DAST._ITrait dtor_Trait_a0 { get; }
    DAST._INewtype dtor_Newtype_a0 { get; }
    DAST._IDatatype dtor_Datatype_a0 { get; }
    _IModuleItem DowncastClone();
  }
  public abstract class ModuleItem : _IModuleItem {
    public ModuleItem() {
    }
    private static readonly DAST._IModuleItem theDefault = create_Module(DAST.Module.Default());
    public static DAST._IModuleItem Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModuleItem> _TYPE = new Dafny.TypeDescriptor<DAST._IModuleItem>(DAST.ModuleItem.Default());
    public static Dafny.TypeDescriptor<DAST._IModuleItem> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModuleItem create_Module(DAST._IModule _a0) {
      return new ModuleItem_Module(_a0);
    }
    public static _IModuleItem create_Class(DAST._IClass _a0) {
      return new ModuleItem_Class(_a0);
    }
    public static _IModuleItem create_Trait(DAST._ITrait _a0) {
      return new ModuleItem_Trait(_a0);
    }
    public static _IModuleItem create_Newtype(DAST._INewtype _a0) {
      return new ModuleItem_Newtype(_a0);
    }
    public static _IModuleItem create_Datatype(DAST._IDatatype _a0) {
      return new ModuleItem_Datatype(_a0);
    }
    public bool is_Module { get { return this is ModuleItem_Module; } }
    public bool is_Class { get { return this is ModuleItem_Class; } }
    public bool is_Trait { get { return this is ModuleItem_Trait; } }
    public bool is_Newtype { get { return this is ModuleItem_Newtype; } }
    public bool is_Datatype { get { return this is ModuleItem_Datatype; } }
    public DAST._IModule dtor_Module_a0 {
      get {
        var d = this;
        return ((ModuleItem_Module)d)._a0;
      }
    }
    public DAST._IClass dtor_Class_a0 {
      get {
        var d = this;
        return ((ModuleItem_Class)d)._a0;
      }
    }
    public DAST._ITrait dtor_Trait_a0 {
      get {
        var d = this;
        return ((ModuleItem_Trait)d)._a0;
      }
    }
    public DAST._INewtype dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Newtype)d)._a0;
      }
    }
    public DAST._IDatatype dtor_Datatype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Datatype)d)._a0;
      }
    }
    public abstract _IModuleItem DowncastClone();
  }
  public class ModuleItem_Module : ModuleItem {
    public readonly DAST._IModule _a0;
    public ModuleItem_Module(DAST._IModule _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Module(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Module;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Module";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Class : ModuleItem {
    public readonly DAST._IClass _a0;
    public ModuleItem_Class(DAST._IClass _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Class(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Class;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Class";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Trait : ModuleItem {
    public readonly DAST._ITrait _a0;
    public ModuleItem_Trait(DAST._ITrait _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Trait(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Trait;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Newtype : ModuleItem {
    public readonly DAST._INewtype _a0;
    public ModuleItem_Newtype(DAST._INewtype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Datatype : ModuleItem {
    public readonly DAST._IDatatype _a0;
    public ModuleItem_Datatype(DAST._IDatatype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Datatype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Datatype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IType {
    bool is_Path { get; }
    bool is_Nullable { get; }
    bool is_Tuple { get; }
    bool is_Array { get; }
    bool is_Seq { get; }
    bool is_Set { get; }
    bool is_Multiset { get; }
    bool is_Map { get; }
    bool is_SetBuilder { get; }
    bool is_MapBuilder { get; }
    bool is_Arrow { get; }
    bool is_Primitive { get; }
    bool is_Passthrough { get; }
    bool is_TypeArg { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    DAST._IResolvedType dtor_resolved { get; }
    DAST._IType dtor_Nullable_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_Tuple_a0 { get; }
    DAST._IType dtor_element { get; }
    BigInteger dtor_dims { get; }
    DAST._IType dtor_key { get; }
    DAST._IType dtor_value { get; }
    Dafny.ISequence<DAST._IType> dtor_args { get; }
    DAST._IType dtor_result { get; }
    DAST._IPrimitive dtor_Primitive_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 { get; }
    _IType DowncastClone();
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly DAST._IType theDefault = create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.ResolvedType.Default());
    public static DAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IType> _TYPE = new Dafny.TypeDescriptor<DAST._IType>(DAST.Type.Default());
    public static Dafny.TypeDescriptor<DAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) {
      return new Type_Path(_a0, typeArgs, resolved);
    }
    public static _IType create_Nullable(DAST._IType _a0) {
      return new Type_Nullable(_a0);
    }
    public static _IType create_Tuple(Dafny.ISequence<DAST._IType> _a0) {
      return new Type_Tuple(_a0);
    }
    public static _IType create_Array(DAST._IType element, BigInteger dims) {
      return new Type_Array(element, dims);
    }
    public static _IType create_Seq(DAST._IType element) {
      return new Type_Seq(element);
    }
    public static _IType create_Set(DAST._IType element) {
      return new Type_Set(element);
    }
    public static _IType create_Multiset(DAST._IType element) {
      return new Type_Multiset(element);
    }
    public static _IType create_Map(DAST._IType key, DAST._IType @value) {
      return new Type_Map(key, @value);
    }
    public static _IType create_SetBuilder(DAST._IType element) {
      return new Type_SetBuilder(element);
    }
    public static _IType create_MapBuilder(DAST._IType key, DAST._IType @value) {
      return new Type_MapBuilder(key, @value);
    }
    public static _IType create_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) {
      return new Type_Arrow(args, result);
    }
    public static _IType create_Primitive(DAST._IPrimitive _a0) {
      return new Type_Primitive(_a0);
    }
    public static _IType create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_Passthrough(_a0);
    }
    public static _IType create_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_TypeArg(_a0);
    }
    public bool is_Path { get { return this is Type_Path; } }
    public bool is_Nullable { get { return this is Type_Nullable; } }
    public bool is_Tuple { get { return this is Type_Tuple; } }
    public bool is_Array { get { return this is Type_Array; } }
    public bool is_Seq { get { return this is Type_Seq; } }
    public bool is_Set { get { return this is Type_Set; } }
    public bool is_Multiset { get { return this is Type_Multiset; } }
    public bool is_Map { get { return this is Type_Map; } }
    public bool is_SetBuilder { get { return this is Type_SetBuilder; } }
    public bool is_MapBuilder { get { return this is Type_MapBuilder; } }
    public bool is_Arrow { get { return this is Type_Arrow; } }
    public bool is_Primitive { get { return this is Type_Primitive; } }
    public bool is_Passthrough { get { return this is Type_Passthrough; } }
    public bool is_TypeArg { get { return this is Type_TypeArg; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 {
      get {
        var d = this;
        return ((Type_Path)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Type_Path)d)._typeArgs;
      }
    }
    public DAST._IResolvedType dtor_resolved {
      get {
        var d = this;
        return ((Type_Path)d)._resolved;
      }
    }
    public DAST._IType dtor_Nullable_a0 {
      get {
        var d = this;
        return ((Type_Nullable)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Type_Tuple)d)._a0;
      }
    }
    public DAST._IType dtor_element {
      get {
        var d = this;
        if (d is Type_Array) { return ((Type_Array)d)._element; }
        if (d is Type_Seq) { return ((Type_Seq)d)._element; }
        if (d is Type_Set) { return ((Type_Set)d)._element; }
        if (d is Type_Multiset) { return ((Type_Multiset)d)._element; }
        return ((Type_SetBuilder)d)._element;
      }
    }
    public BigInteger dtor_dims {
      get {
        var d = this;
        return ((Type_Array)d)._dims;
      }
    }
    public DAST._IType dtor_key {
      get {
        var d = this;
        if (d is Type_Map) { return ((Type_Map)d)._key; }
        return ((Type_MapBuilder)d)._key;
      }
    }
    public DAST._IType dtor_value {
      get {
        var d = this;
        if (d is Type_Map) { return ((Type_Map)d)._value; }
        return ((Type_MapBuilder)d)._value;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_args {
      get {
        var d = this;
        return ((Type_Arrow)d)._args;
      }
    }
    public DAST._IType dtor_result {
      get {
        var d = this;
        return ((Type_Arrow)d)._result;
      }
    }
    public DAST._IPrimitive dtor_Primitive_a0 {
      get {
        var d = this;
        return ((Type_Primitive)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((Type_Passthrough)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 {
      get {
        var d = this;
        return ((Type_TypeArg)d)._a0;
      }
    }
    public abstract _IType DowncastClone();
  }
  public class Type_Path : Type {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly DAST._IResolvedType _resolved;
    public Type_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) : base() {
      this._a0 = _a0;
      this._typeArgs = typeArgs;
      this._resolved = resolved;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Path(_a0, _typeArgs, _resolved);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Path;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._resolved, oth._resolved);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._resolved));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Path";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._resolved);
      s += ")";
      return s;
    }
  }
  public class Type_Nullable : Type {
    public readonly DAST._IType _a0;
    public Type_Nullable(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Nullable(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Nullable;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Nullable";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Tuple : Type {
    public readonly Dafny.ISequence<DAST._IType> _a0;
    public Type_Tuple(Dafny.ISequence<DAST._IType> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Array : Type {
    public readonly DAST._IType _element;
    public readonly BigInteger _dims;
    public Type_Array(DAST._IType element, BigInteger dims) : base() {
      this._element = element;
      this._dims = dims;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Array(_element, _dims);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Array;
      return oth != null && object.Equals(this._element, oth._element) && this._dims == oth._dims;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Array";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dims);
      s += ")";
      return s;
    }
  }
  public class Type_Seq : Type {
    public readonly DAST._IType _element;
    public Type_Seq(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Seq(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Seq;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Seq";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Set : Type {
    public readonly DAST._IType _element;
    public Type_Set(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Set(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Set;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Set";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Multiset : Type {
    public readonly DAST._IType _element;
    public Type_Multiset(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Multiset(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Multiset;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Multiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Map : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_Map(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Map(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Map;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Map";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_SetBuilder : Type {
    public readonly DAST._IType _element;
    public Type_SetBuilder(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_SetBuilder(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_SetBuilder;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.SetBuilder";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_MapBuilder : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_MapBuilder(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_MapBuilder(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_MapBuilder;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.MapBuilder";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_Arrow : Type {
    public readonly Dafny.ISequence<DAST._IType> _args;
    public readonly DAST._IType _result;
    public Type_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) : base() {
      this._args = args;
      this._result = result;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Arrow(_args, _result);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Arrow;
      return oth != null && object.Equals(this._args, oth._args) && object.Equals(this._result, oth._result);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._result));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Arrow";
      s += "(";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._result);
      s += ")";
      return s;
    }
  }
  public class Type_Primitive : Type {
    public readonly DAST._IPrimitive _a0;
    public Type_Primitive(DAST._IPrimitive _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Primitive(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Primitive;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Primitive";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Passthrough : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeArg : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeArg(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_TypeArg;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.TypeArg";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IPrimitive {
    bool is_Int { get; }
    bool is_Real { get; }
    bool is_String { get; }
    bool is_Bool { get; }
    bool is_Char { get; }
    _IPrimitive DowncastClone();
  }
  public abstract class Primitive : _IPrimitive {
    public Primitive() {
    }
    private static readonly DAST._IPrimitive theDefault = create_Int();
    public static DAST._IPrimitive Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IPrimitive> _TYPE = new Dafny.TypeDescriptor<DAST._IPrimitive>(DAST.Primitive.Default());
    public static Dafny.TypeDescriptor<DAST._IPrimitive> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrimitive create_Int() {
      return new Primitive_Int();
    }
    public static _IPrimitive create_Real() {
      return new Primitive_Real();
    }
    public static _IPrimitive create_String() {
      return new Primitive_String();
    }
    public static _IPrimitive create_Bool() {
      return new Primitive_Bool();
    }
    public static _IPrimitive create_Char() {
      return new Primitive_Char();
    }
    public bool is_Int { get { return this is Primitive_Int; } }
    public bool is_Real { get { return this is Primitive_Real; } }
    public bool is_String { get { return this is Primitive_String; } }
    public bool is_Bool { get { return this is Primitive_Bool; } }
    public bool is_Char { get { return this is Primitive_Char; } }
    public static System.Collections.Generic.IEnumerable<_IPrimitive> AllSingletonConstructors {
      get {
        yield return Primitive.create_Int();
        yield return Primitive.create_Real();
        yield return Primitive.create_String();
        yield return Primitive.create_Bool();
        yield return Primitive.create_Char();
      }
    }
    public abstract _IPrimitive DowncastClone();
  }
  public class Primitive_Int : Primitive {
    public Primitive_Int() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Int";
      return s;
    }
  }
  public class Primitive_Real : Primitive {
    public Primitive_Real() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Real();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Real;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Real";
      return s;
    }
  }
  public class Primitive_String : Primitive {
    public Primitive_String() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_String();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_String;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.String";
      return s;
    }
  }
  public class Primitive_Bool : Primitive {
    public Primitive_Bool() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Bool";
      return s;
    }
  }
  public class Primitive_Char : Primitive {
    public Primitive_Char() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Char();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Char;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Char";
      return s;
    }
  }

  public interface _INewtypeRange {
    bool is_U8 { get; }
    bool is_I8 { get; }
    bool is_U16 { get; }
    bool is_I16 { get; }
    bool is_U32 { get; }
    bool is_I32 { get; }
    bool is_U64 { get; }
    bool is_I64 { get; }
    bool is_U128 { get; }
    bool is_I128 { get; }
    bool is_BigInt { get; }
    bool is_NoRange { get; }
    _INewtypeRange DowncastClone();
  }
  public abstract class NewtypeRange : _INewtypeRange {
    public NewtypeRange() {
    }
    private static readonly DAST._INewtypeRange theDefault = create_U8();
    public static DAST._INewtypeRange Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtypeRange> _TYPE = new Dafny.TypeDescriptor<DAST._INewtypeRange>(DAST.NewtypeRange.Default());
    public static Dafny.TypeDescriptor<DAST._INewtypeRange> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtypeRange create_U8() {
      return new NewtypeRange_U8();
    }
    public static _INewtypeRange create_I8() {
      return new NewtypeRange_I8();
    }
    public static _INewtypeRange create_U16() {
      return new NewtypeRange_U16();
    }
    public static _INewtypeRange create_I16() {
      return new NewtypeRange_I16();
    }
    public static _INewtypeRange create_U32() {
      return new NewtypeRange_U32();
    }
    public static _INewtypeRange create_I32() {
      return new NewtypeRange_I32();
    }
    public static _INewtypeRange create_U64() {
      return new NewtypeRange_U64();
    }
    public static _INewtypeRange create_I64() {
      return new NewtypeRange_I64();
    }
    public static _INewtypeRange create_U128() {
      return new NewtypeRange_U128();
    }
    public static _INewtypeRange create_I128() {
      return new NewtypeRange_I128();
    }
    public static _INewtypeRange create_BigInt() {
      return new NewtypeRange_BigInt();
    }
    public static _INewtypeRange create_NoRange() {
      return new NewtypeRange_NoRange();
    }
    public bool is_U8 { get { return this is NewtypeRange_U8; } }
    public bool is_I8 { get { return this is NewtypeRange_I8; } }
    public bool is_U16 { get { return this is NewtypeRange_U16; } }
    public bool is_I16 { get { return this is NewtypeRange_I16; } }
    public bool is_U32 { get { return this is NewtypeRange_U32; } }
    public bool is_I32 { get { return this is NewtypeRange_I32; } }
    public bool is_U64 { get { return this is NewtypeRange_U64; } }
    public bool is_I64 { get { return this is NewtypeRange_I64; } }
    public bool is_U128 { get { return this is NewtypeRange_U128; } }
    public bool is_I128 { get { return this is NewtypeRange_I128; } }
    public bool is_BigInt { get { return this is NewtypeRange_BigInt; } }
    public bool is_NoRange { get { return this is NewtypeRange_NoRange; } }
    public static System.Collections.Generic.IEnumerable<_INewtypeRange> AllSingletonConstructors {
      get {
        yield return NewtypeRange.create_U8();
        yield return NewtypeRange.create_I8();
        yield return NewtypeRange.create_U16();
        yield return NewtypeRange.create_I16();
        yield return NewtypeRange.create_U32();
        yield return NewtypeRange.create_I32();
        yield return NewtypeRange.create_U64();
        yield return NewtypeRange.create_I64();
        yield return NewtypeRange.create_U128();
        yield return NewtypeRange.create_I128();
        yield return NewtypeRange.create_BigInt();
        yield return NewtypeRange.create_NoRange();
      }
    }
    public abstract _INewtypeRange DowncastClone();
  }
  public class NewtypeRange_U8 : NewtypeRange {
    public NewtypeRange_U8() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U8();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U8";
      return s;
    }
  }
  public class NewtypeRange_I8 : NewtypeRange {
    public NewtypeRange_I8() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I8();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I8";
      return s;
    }
  }
  public class NewtypeRange_U16 : NewtypeRange {
    public NewtypeRange_U16() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U16();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U16";
      return s;
    }
  }
  public class NewtypeRange_I16 : NewtypeRange {
    public NewtypeRange_I16() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I16();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I16";
      return s;
    }
  }
  public class NewtypeRange_U32 : NewtypeRange {
    public NewtypeRange_U32() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U32();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U32";
      return s;
    }
  }
  public class NewtypeRange_I32 : NewtypeRange {
    public NewtypeRange_I32() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I32();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I32";
      return s;
    }
  }
  public class NewtypeRange_U64 : NewtypeRange {
    public NewtypeRange_U64() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U64();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U64";
      return s;
    }
  }
  public class NewtypeRange_I64 : NewtypeRange {
    public NewtypeRange_I64() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I64();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I64";
      return s;
    }
  }
  public class NewtypeRange_U128 : NewtypeRange {
    public NewtypeRange_U128() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U128();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U128";
      return s;
    }
  }
  public class NewtypeRange_I128 : NewtypeRange {
    public NewtypeRange_I128() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I128();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I128";
      return s;
    }
  }
  public class NewtypeRange_BigInt : NewtypeRange {
    public NewtypeRange_BigInt() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_BigInt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_BigInt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.BigInt";
      return s;
    }
  }
  public class NewtypeRange_NoRange : NewtypeRange {
    public NewtypeRange_NoRange() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_NoRange();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_NoRange;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.NoRange";
      return s;
    }
  }

  public interface _IResolvedType {
    bool is_Datatype { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    DAST._IType dtor_baseType { get; }
    DAST._INewtypeRange dtor_range { get; }
    bool dtor_erase { get; }
    _IResolvedType DowncastClone();
  }
  public abstract class ResolvedType : _IResolvedType {
    public ResolvedType() {
    }
    private static readonly DAST._IResolvedType theDefault = create_Datatype(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty);
    public static DAST._IResolvedType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IResolvedType> _TYPE = new Dafny.TypeDescriptor<DAST._IResolvedType>(DAST.ResolvedType.Default());
    public static Dafny.TypeDescriptor<DAST._IResolvedType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IResolvedType create_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Datatype(path);
    }
    public static _IResolvedType create_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Trait(path);
    }
    public static _IResolvedType create_Newtype(DAST._IType baseType, DAST._INewtypeRange range, bool erase) {
      return new ResolvedType_Newtype(baseType, range, erase);
    }
    public bool is_Datatype { get { return this is ResolvedType_Datatype; } }
    public bool is_Trait { get { return this is ResolvedType_Trait; } }
    public bool is_Newtype { get { return this is ResolvedType_Newtype; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is ResolvedType_Datatype) { return ((ResolvedType_Datatype)d)._path; }
        return ((ResolvedType_Trait)d)._path;
      }
    }
    public DAST._IType dtor_baseType {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._baseType;
      }
    }
    public DAST._INewtypeRange dtor_range {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._range;
      }
    }
    public bool dtor_erase {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._erase;
      }
    }
    public abstract _IResolvedType DowncastClone();
  }
  public class ResolvedType_Datatype : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Datatype(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Datatype;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Trait : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Trait(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Trait;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Newtype : ResolvedType {
    public readonly DAST._IType _baseType;
    public readonly DAST._INewtypeRange _range;
    public readonly bool _erase;
    public ResolvedType_Newtype(DAST._IType baseType, DAST._INewtypeRange range, bool erase) : base() {
      this._baseType = baseType;
      this._range = range;
      this._erase = erase;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Newtype(_baseType, _range, _erase);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Newtype;
      return oth != null && object.Equals(this._baseType, oth._baseType) && object.Equals(this._range, oth._range) && this._erase == oth._erase;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._baseType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._range));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._erase));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._baseType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._range);
      s += ", ";
      s += Dafny.Helpers.ToString(this._erase);
      s += ")";
      return s;
    }
  }

  public interface _IIdent {
    bool is_Ident { get; }
    Dafny.ISequence<Dafny.Rune> dtor_id { get; }
  }
  public class Ident : _IIdent {
    public readonly Dafny.ISequence<Dafny.Rune> _id;
    public Ident(Dafny.ISequence<Dafny.Rune> id) {
      this._id = id;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Ident;
      return oth != null && object.Equals(this._id, oth._id);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._id));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Ident.Ident";
      s += "(";
      s += this._id.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IIdent create(Dafny.ISequence<Dafny.Rune> id) {
      return new Ident(id);
    }
    public static _IIdent create_Ident(Dafny.ISequence<Dafny.Rune> id) {
      return create(id);
    }
    public bool is_Ident { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_id {
      get {
        return this._id;
      }
    }
  }

  public interface _IClass {
    bool is_Class { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IType> dtor_superClasses { get; }
    Dafny.ISequence<DAST._IField> dtor_fields { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _IClass DowncastClone();
  }
  public class Class : _IClass {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IType> _superClasses;
    public readonly Dafny.ISequence<DAST._IField> _fields;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._superClasses = superClasses;
      this._fields = fields;
      this._body = body;
    }
    public _IClass DowncastClone() {
      if (this is _IClass dt) { return dt; }
      return new Class(_name, _enclosingModule, _typeParams, _superClasses, _fields, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Class;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._superClasses, oth._superClasses) && object.Equals(this._fields, oth._fields) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._superClasses));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Class.Class";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._superClasses);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IClass theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IField>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._IClass Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IClass> _TYPE = new Dafny.TypeDescriptor<DAST._IClass>(DAST.Class.Default());
    public static Dafny.TypeDescriptor<DAST._IClass> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClass create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return new Class(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public static _IClass create_Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public bool is_Class { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_superClasses {
      get {
        return this._superClasses;
      }
    }
    public Dafny.ISequence<DAST._IField> dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _ITrait DowncastClone();
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_name, _typeParams, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Trait;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Trait.Trait";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._ITrait theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ITrait> _TYPE = new Dafny.TypeDescriptor<DAST._ITrait>(DAST.Trait.Default());
    public static Dafny.TypeDescriptor<DAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return new Trait(name, typeParams, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, typeParams, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IDatatype {
    bool is_Datatype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    bool dtor_isCo { get; }
    _IDatatype DowncastClone();
  }
  public class Datatype : _IDatatype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IDatatypeCtor> _ctors;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly bool _isCo;
    public Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._ctors = ctors;
      this._body = body;
      this._isCo = isCo;
    }
    public _IDatatype DowncastClone() {
      if (this is _IDatatype dt) { return dt; }
      return new Datatype(_name, _enclosingModule, _typeParams, _ctors, _body, _isCo);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Datatype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._ctors, oth._ctors) && object.Equals(this._body, oth._body) && this._isCo == oth._isCo;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ctors));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Datatype.Datatype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ctors);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IDatatypeCtor>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, false);
    public static DAST._IDatatype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatype> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatype>(DAST.Datatype.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return new Datatype(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public static _IDatatype create_Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return create(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public bool is_Datatype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors {
      get {
        return this._ctors;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public bool dtor_isCo {
      get {
        return this._isCo;
      }
    }
  }

  public interface _IDatatypeCtor {
    bool is_DatatypeCtor { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_args { get; }
    bool dtor_hasAnyArgs { get; }
    _IDatatypeCtor DowncastClone();
  }
  public class DatatypeCtor : _IDatatypeCtor {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IFormal> _args;
    public readonly bool _hasAnyArgs;
    public DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      this._name = name;
      this._args = args;
      this._hasAnyArgs = hasAnyArgs;
    }
    public _IDatatypeCtor DowncastClone() {
      if (this is _IDatatypeCtor dt) { return dt; }
      return new DatatypeCtor(_name, _args, _hasAnyArgs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.DatatypeCtor;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._args, oth._args) && this._hasAnyArgs == oth._hasAnyArgs;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasAnyArgs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.DatatypeCtor.DatatypeCtor";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasAnyArgs);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatypeCtor theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, false);
    public static DAST._IDatatypeCtor Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatypeCtor>(DAST.DatatypeCtor.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatypeCtor create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return new DatatypeCtor(name, args, hasAnyArgs);
    }
    public static _IDatatypeCtor create_DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return create(name, args, hasAnyArgs);
    }
    public bool is_DatatypeCtor { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_args {
      get {
        return this._args;
      }
    }
    public bool dtor_hasAnyArgs {
      get {
        return this._hasAnyArgs;
      }
    }
  }

  public interface _INewtype {
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    DAST._IType dtor_base { get; }
    DAST._INewtypeRange dtor_range { get; }
    Dafny.ISequence<DAST._IStatement> dtor_witnessStmts { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_witnessExpr { get; }
    _INewtype DowncastClone();
  }
  public class Newtype : _INewtype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly DAST._IType _base;
    public readonly DAST._INewtypeRange _range;
    public readonly Dafny.ISequence<DAST._IStatement> _witnessStmts;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _witnessExpr;
    public Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, DAST._INewtypeRange range, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr) {
      this._name = name;
      this._typeParams = typeParams;
      this._base = @base;
      this._range = range;
      this._witnessStmts = witnessStmts;
      this._witnessExpr = witnessExpr;
    }
    public _INewtype DowncastClone() {
      if (this is _INewtype dt) { return dt; }
      return new Newtype(_name, _typeParams, _base, _range, _witnessStmts, _witnessExpr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Newtype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._base, oth._base) && object.Equals(this._range, oth._range) && object.Equals(this._witnessStmts, oth._witnessStmts) && object.Equals(this._witnessExpr, oth._witnessExpr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._range));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessStmts));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessExpr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Newtype.Newtype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += Dafny.Helpers.ToString(this._range);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessStmts);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessExpr);
      s += ")";
      return s;
    }
    private static readonly DAST._INewtype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Type.Default(), DAST.NewtypeRange.Default(), Dafny.Sequence<DAST._IStatement>.Empty, Std.Wrappers.Option<DAST._IExpression>.Default());
    public static DAST._INewtype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtype> _TYPE = new Dafny.TypeDescriptor<DAST._INewtype>(DAST.Newtype.Default());
    public static Dafny.TypeDescriptor<DAST._INewtype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, DAST._INewtypeRange range, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr) {
      return new Newtype(name, typeParams, @base, range, witnessStmts, witnessExpr);
    }
    public static _INewtype create_Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, DAST._INewtypeRange range, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr) {
      return create(name, typeParams, @base, range, witnessStmts, witnessExpr);
    }
    public bool is_Newtype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public DAST._IType dtor_base {
      get {
        return this._base;
      }
    }
    public DAST._INewtypeRange dtor_range {
      get {
        return this._range;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_witnessStmts {
      get {
        return this._witnessStmts;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_witnessExpr {
      get {
        return this._witnessExpr;
      }
    }
  }

  public interface _IClassItem {
    bool is_Method { get; }
    DAST._IMethod dtor_Method_a0 { get; }
  }
  public class ClassItem : _IClassItem {
    public readonly DAST._IMethod _a0;
    public ClassItem(DAST._IMethod _a0) {
      this._a0 = _a0;
    }
    public static DAST._IMethod DowncastClone(DAST._IMethod _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ClassItem;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ClassItem.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = DAST.Method.Default();
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClassItem create(DAST._IMethod _a0) {
      return new ClassItem(_a0);
    }
    public static _IClassItem create_Method(DAST._IMethod _a0) {
      return create(_a0);
    }
    public bool is_Method { get { return true; } }
    public DAST._IMethod dtor_Method_a0 {
      get {
        return this._a0;
      }
    }
  }

  public interface _IField {
    bool is_Field { get; }
    DAST._IFormal dtor_formal { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_defaultValue { get; }
    _IField DowncastClone();
  }
  public class Field : _IField {
    public readonly DAST._IFormal _formal;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _defaultValue;
    public Field(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      this._formal = formal;
      this._defaultValue = defaultValue;
    }
    public _IField DowncastClone() {
      if (this is _IField dt) { return dt; }
      return new Field(_formal, _defaultValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Field;
      return oth != null && object.Equals(this._formal, oth._formal) && object.Equals(this._defaultValue, oth._defaultValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formal));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._defaultValue));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Field.Field";
      s += "(";
      s += Dafny.Helpers.ToString(this._formal);
      s += ", ";
      s += Dafny.Helpers.ToString(this._defaultValue);
      s += ")";
      return s;
    }
    private static readonly DAST._IField theDefault = create(DAST.Formal.Default(), Std.Wrappers.Option<DAST._IExpression>.Default());
    public static DAST._IField Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IField> _TYPE = new Dafny.TypeDescriptor<DAST._IField>(DAST.Field.Default());
    public static Dafny.TypeDescriptor<DAST._IField> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IField create(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      return new Field(formal, defaultValue);
    }
    public static _IField create_Field(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      return create(formal, defaultValue);
    }
    public bool is_Field { get { return true; } }
    public DAST._IFormal dtor_formal {
      get {
        return this._formal;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_defaultValue {
      get {
        return this._defaultValue;
      }
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    _IFormal DowncastClone();
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      this._name = name;
      this._typ = typ;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
    private static readonly DAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default());
    public static DAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IFormal> _TYPE = new Dafny.TypeDescriptor<DAST._IFormal>(DAST.Formal.Default());
    public static Dafny.TypeDescriptor<DAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return new Formal(name, typ);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return create(name, typ);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        return this._typ;
      }
    }
  }

  public interface _IMethod {
    bool is_Method { get; }
    bool dtor_isStatic { get; }
    bool dtor_hasBody { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<DAST._IType> dtor_outTypes { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars { get; }
    _IMethod DowncastClone();
  }
  public class Method : _IMethod {
    public readonly bool _isStatic;
    public readonly bool _hasBody;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _overridingPath;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public readonly Dafny.ISequence<DAST._IType> _outTypes;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outVars;
    public Method(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      this._isStatic = isStatic;
      this._hasBody = hasBody;
      this._overridingPath = overridingPath;
      this._name = name;
      this._typeParams = typeParams;
      this._params = @params;
      this._body = body;
      this._outTypes = outTypes;
      this._outVars = outVars;
    }
    public _IMethod DowncastClone() {
      if (this is _IMethod dt) { return dt; }
      return new Method(_isStatic, _hasBody, _overridingPath, _name, _typeParams, _params, _body, _outTypes, _outVars);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Method;
      return oth != null && this._isStatic == oth._isStatic && this._hasBody == oth._hasBody && object.Equals(this._overridingPath, oth._overridingPath) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._params, oth._params) && object.Equals(this._body, oth._body) && object.Equals(this._outTypes, oth._outTypes) && object.Equals(this._outVars, oth._outVars);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasBody));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._overridingPath));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outTypes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outVars));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Method.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasBody);
      s += ", ";
      s += Dafny.Helpers.ToString(this._overridingPath);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outTypes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outVars);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = create(false, false, Std.Wrappers.Option<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, Dafny.Sequence<DAST._IStatement>.Empty, Dafny.Sequence<DAST._IType>.Empty, Std.Wrappers.Option<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default());
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMethod create(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return new Method(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public static _IMethod create_Method(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return create(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public bool is_Method { get { return true; } }
    public bool dtor_isStatic {
      get {
        return this._isStatic;
      }
    }
    public bool dtor_hasBody {
      get {
        return this._hasBody;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath {
      get {
        return this._overridingPath;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        return this._params;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_outTypes {
      get {
        return this._outTypes;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars {
      get {
        return this._outVars;
      }
    }
  }

  public interface _ICallName {
    bool is_Name { get; }
    bool is_MapBuilderAdd { get; }
    bool is_MapBuilderBuild { get; }
    bool is_SetBuilderAdd { get; }
    bool is_SetBuilderBuild { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    _ICallName DowncastClone();
  }
  public abstract class CallName : _ICallName {
    public CallName() {
    }
    private static readonly DAST._ICallName theDefault = create_Name(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._ICallName Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICallName> _TYPE = new Dafny.TypeDescriptor<DAST._ICallName>(DAST.CallName.Default());
    public static Dafny.TypeDescriptor<DAST._ICallName> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICallName create_Name(Dafny.ISequence<Dafny.Rune> name) {
      return new CallName_Name(name);
    }
    public static _ICallName create_MapBuilderAdd() {
      return new CallName_MapBuilderAdd();
    }
    public static _ICallName create_MapBuilderBuild() {
      return new CallName_MapBuilderBuild();
    }
    public static _ICallName create_SetBuilderAdd() {
      return new CallName_SetBuilderAdd();
    }
    public static _ICallName create_SetBuilderBuild() {
      return new CallName_SetBuilderBuild();
    }
    public bool is_Name { get { return this is CallName_Name; } }
    public bool is_MapBuilderAdd { get { return this is CallName_MapBuilderAdd; } }
    public bool is_MapBuilderBuild { get { return this is CallName_MapBuilderBuild; } }
    public bool is_SetBuilderAdd { get { return this is CallName_SetBuilderAdd; } }
    public bool is_SetBuilderBuild { get { return this is CallName_SetBuilderBuild; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        return ((CallName_Name)d)._name;
      }
    }
    public abstract _ICallName DowncastClone();
  }
  public class CallName_Name : CallName {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public CallName_Name(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_Name(_name);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_Name;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.Name";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class CallName_MapBuilderAdd : CallName {
    public CallName_MapBuilderAdd() : base() {
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_MapBuilderAdd();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_MapBuilderAdd;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.MapBuilderAdd";
      return s;
    }
  }
  public class CallName_MapBuilderBuild : CallName {
    public CallName_MapBuilderBuild() : base() {
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_MapBuilderBuild();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_MapBuilderBuild;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.MapBuilderBuild";
      return s;
    }
  }
  public class CallName_SetBuilderAdd : CallName {
    public CallName_SetBuilderAdd() : base() {
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_SetBuilderAdd();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_SetBuilderAdd;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.SetBuilderAdd";
      return s;
    }
  }
  public class CallName_SetBuilderBuild : CallName {
    public CallName_SetBuilderBuild() : base() {
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_SetBuilderBuild();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_SetBuilderBuild;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.SetBuilderBuild";
      return s;
    }
  }

  public interface _IStatement {
    bool is_DeclareVar { get; }
    bool is_Assign { get; }
    bool is_If { get; }
    bool is_Labeled { get; }
    bool is_While { get; }
    bool is_Foreach { get; }
    bool is_Call { get; }
    bool is_Return { get; }
    bool is_EarlyReturn { get; }
    bool is_Break { get; }
    bool is_TailRecursive { get; }
    bool is_JumpTailCallStart { get; }
    bool is_Halt { get; }
    bool is_Print { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_maybeValue { get; }
    DAST._IAssignLhs dtor_lhs { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IExpression dtor_cond { get; }
    Dafny.ISequence<DAST._IStatement> dtor_thn { get; }
    Dafny.ISequence<DAST._IStatement> dtor_els { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_boundName { get; }
    DAST._IType dtor_boundType { get; }
    DAST._IExpression dtor_over { get; }
    DAST._IExpression dtor_on { get; }
    DAST._ICallName dtor_callName { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs { get; }
    DAST._IExpression dtor_expr { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_toLabel { get; }
    DAST._IExpression dtor_Print_a0 { get; }
    _IStatement DowncastClone();
  }
  public abstract class Statement : _IStatement {
    public Statement() {
    }
    private static readonly DAST._IStatement theDefault = create_DeclareVar(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default(), Std.Wrappers.Option<DAST._IExpression>.Default());
    public static DAST._IStatement Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IStatement> _TYPE = new Dafny.TypeDescriptor<DAST._IStatement>(DAST.Statement.Default());
    public static Dafny.TypeDescriptor<DAST._IStatement> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStatement create_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, Std.Wrappers._IOption<DAST._IExpression> maybeValue) {
      return new Statement_DeclareVar(name, typ, maybeValue);
    }
    public static _IStatement create_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) {
      return new Statement_Assign(lhs, @value);
    }
    public static _IStatement create_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) {
      return new Statement_If(cond, thn, els);
    }
    public static _IStatement create_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Labeled(lbl, body);
    }
    public static _IStatement create_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_While(cond, body);
    }
    public static _IStatement create_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Foreach(boundName, boundType, over, body);
    }
    public static _IStatement create_Call(DAST._IExpression @on, DAST._ICallName callName, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) {
      return new Statement_Call(@on, callName, typeArgs, args, outs);
    }
    public static _IStatement create_Return(DAST._IExpression expr) {
      return new Statement_Return(expr);
    }
    public static _IStatement create_EarlyReturn() {
      return new Statement_EarlyReturn();
    }
    public static _IStatement create_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> toLabel) {
      return new Statement_Break(toLabel);
    }
    public static _IStatement create_TailRecursive(Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_TailRecursive(body);
    }
    public static _IStatement create_JumpTailCallStart() {
      return new Statement_JumpTailCallStart();
    }
    public static _IStatement create_Halt() {
      return new Statement_Halt();
    }
    public static _IStatement create_Print(DAST._IExpression _a0) {
      return new Statement_Print(_a0);
    }
    public bool is_DeclareVar { get { return this is Statement_DeclareVar; } }
    public bool is_Assign { get { return this is Statement_Assign; } }
    public bool is_If { get { return this is Statement_If; } }
    public bool is_Labeled { get { return this is Statement_Labeled; } }
    public bool is_While { get { return this is Statement_While; } }
    public bool is_Foreach { get { return this is Statement_Foreach; } }
    public bool is_Call { get { return this is Statement_Call; } }
    public bool is_Return { get { return this is Statement_Return; } }
    public bool is_EarlyReturn { get { return this is Statement_EarlyReturn; } }
    public bool is_Break { get { return this is Statement_Break; } }
    public bool is_TailRecursive { get { return this is Statement_TailRecursive; } }
    public bool is_JumpTailCallStart { get { return this is Statement_JumpTailCallStart; } }
    public bool is_Halt { get { return this is Statement_Halt; } }
    public bool is_Print { get { return this is Statement_Print; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._typ;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_maybeValue {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._maybeValue;
      }
    }
    public DAST._IAssignLhs dtor_lhs {
      get {
        var d = this;
        return ((Statement_Assign)d)._lhs;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        return ((Statement_Assign)d)._value;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        if (d is Statement_If) { return ((Statement_If)d)._cond; }
        return ((Statement_While)d)._cond;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_thn {
      get {
        var d = this;
        return ((Statement_If)d)._thn;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_els {
      get {
        var d = this;
        return ((Statement_If)d)._els;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Statement_Labeled)d)._lbl;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        if (d is Statement_Labeled) { return ((Statement_Labeled)d)._body; }
        if (d is Statement_While) { return ((Statement_While)d)._body; }
        if (d is Statement_Foreach) { return ((Statement_Foreach)d)._body; }
        return ((Statement_TailRecursive)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_boundName {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundName;
      }
    }
    public DAST._IType dtor_boundType {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundType;
      }
    }
    public DAST._IExpression dtor_over {
      get {
        var d = this;
        return ((Statement_Foreach)d)._over;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        return ((Statement_Call)d)._on;
      }
    }
    public DAST._ICallName dtor_callName {
      get {
        var d = this;
        return ((Statement_Call)d)._callName;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Statement_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        return ((Statement_Call)d)._args;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs {
      get {
        var d = this;
        return ((Statement_Call)d)._outs;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        return ((Statement_Return)d)._expr;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_toLabel {
      get {
        var d = this;
        return ((Statement_Break)d)._toLabel;
      }
    }
    public DAST._IExpression dtor_Print_a0 {
      get {
        var d = this;
        return ((Statement_Print)d)._a0;
      }
    }
    public abstract _IStatement DowncastClone();
  }
  public class Statement_DeclareVar : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _maybeValue;
    public Statement_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, Std.Wrappers._IOption<DAST._IExpression> maybeValue) : base() {
      this._name = name;
      this._typ = typ;
      this._maybeValue = maybeValue;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_DeclareVar(_name, _typ, _maybeValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_DeclareVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._maybeValue, oth._maybeValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._maybeValue));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.DeclareVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._maybeValue);
      s += ")";
      return s;
    }
  }
  public class Statement_Assign : Statement {
    public readonly DAST._IAssignLhs _lhs;
    public readonly DAST._IExpression _value;
    public Statement_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) : base() {
      this._lhs = lhs;
      this._value = @value;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Assign(_lhs, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Assign;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Assign";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Statement_If : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _thn;
    public readonly Dafny.ISequence<DAST._IStatement> _els;
    public Statement_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_If(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_If;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.If";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Statement_Labeled : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._lbl = lbl;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Labeled(_lbl, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Labeled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Labeled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_While : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._cond = cond;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_While(_cond, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_While;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.While";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Foreach : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _boundName;
    public readonly DAST._IType _boundType;
    public readonly DAST._IExpression _over;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._boundName = boundName;
      this._boundType = boundType;
      this._over = over;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Foreach(_boundName, _boundType, _over, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Foreach;
      return oth != null && object.Equals(this._boundName, oth._boundName) && object.Equals(this._boundType, oth._boundType) && object.Equals(this._over, oth._over) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._over));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Foreach";
      s += "(";
      s += this._boundName.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._boundType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._over);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Call : Statement {
    public readonly DAST._IExpression _on;
    public readonly DAST._ICallName _callName;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outs;
    public Statement_Call(DAST._IExpression @on, DAST._ICallName callName, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) : base() {
      this._on = @on;
      this._callName = callName;
      this._typeArgs = typeArgs;
      this._args = args;
      this._outs = outs;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Call(_on, _callName, _typeArgs, _args, _outs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._callName, oth._callName) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args) && object.Equals(this._outs, oth._outs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._callName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._callName);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outs);
      s += ")";
      return s;
    }
  }
  public class Statement_Return : Statement {
    public readonly DAST._IExpression _expr;
    public Statement_Return(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Return(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Return;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Statement_EarlyReturn : Statement {
    public Statement_EarlyReturn() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_EarlyReturn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_EarlyReturn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.EarlyReturn";
      return s;
    }
  }
  public class Statement_Break : Statement {
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _toLabel;
    public Statement_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> toLabel) : base() {
      this._toLabel = toLabel;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Break(_toLabel);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Break;
      return oth != null && object.Equals(this._toLabel, oth._toLabel);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._toLabel));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._toLabel);
      s += ")";
      return s;
    }
  }
  public class Statement_TailRecursive : Statement {
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_TailRecursive(Dafny.ISequence<DAST._IStatement> body) : base() {
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_TailRecursive(_body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_TailRecursive;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.TailRecursive";
      s += "(";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_JumpTailCallStart : Statement {
    public Statement_JumpTailCallStart() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_JumpTailCallStart();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_JumpTailCallStart;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.JumpTailCallStart";
      return s;
    }
  }
  public class Statement_Halt : Statement {
    public Statement_Halt() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Halt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Halt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Halt";
      return s;
    }
  }
  public class Statement_Print : Statement {
    public readonly DAST._IExpression _a0;
    public Statement_Print(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IAssignLhs {
    bool is_Ident { get; }
    bool is_Select { get; }
    bool is_Index { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    DAST._IExpression dtor_expr { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    _IAssignLhs DowncastClone();
  }
  public abstract class AssignLhs : _IAssignLhs {
    public AssignLhs() {
    }
    private static readonly DAST._IAssignLhs theDefault = create_Ident(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._IAssignLhs Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IAssignLhs> _TYPE = new Dafny.TypeDescriptor<DAST._IAssignLhs>(DAST.AssignLhs.Default());
    public static Dafny.TypeDescriptor<DAST._IAssignLhs> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignLhs create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new AssignLhs_Ident(_a0);
    }
    public static _IAssignLhs create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) {
      return new AssignLhs_Select(expr, field);
    }
    public static _IAssignLhs create_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) {
      return new AssignLhs_Index(expr, indices);
    }
    public bool is_Ident { get { return this is AssignLhs_Ident; } }
    public bool is_Select { get { return this is AssignLhs_Select; } }
    public bool is_Index { get { return this is AssignLhs_Index; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((AssignLhs_Ident)d)._a0;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is AssignLhs_Select) { return ((AssignLhs_Select)d)._expr; }
        return ((AssignLhs_Index)d)._expr;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((AssignLhs_Select)d)._field;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((AssignLhs_Index)d)._indices;
      }
    }
    public abstract _IAssignLhs DowncastClone();
  }
  public class AssignLhs_Ident : AssignLhs {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public AssignLhs_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Ident";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Select : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public AssignLhs_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._expr = expr;
      this._field = field;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Select(_expr, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Index : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public AssignLhs_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._indices = indices;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Index(_expr, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }

  public interface _ICollKind {
    bool is_Seq { get; }
    bool is_Array { get; }
    bool is_Map { get; }
    _ICollKind DowncastClone();
  }
  public abstract class CollKind : _ICollKind {
    public CollKind() {
    }
    private static readonly DAST._ICollKind theDefault = create_Seq();
    public static DAST._ICollKind Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICollKind> _TYPE = new Dafny.TypeDescriptor<DAST._ICollKind>(DAST.CollKind.Default());
    public static Dafny.TypeDescriptor<DAST._ICollKind> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICollKind create_Seq() {
      return new CollKind_Seq();
    }
    public static _ICollKind create_Array() {
      return new CollKind_Array();
    }
    public static _ICollKind create_Map() {
      return new CollKind_Map();
    }
    public bool is_Seq { get { return this is CollKind_Seq; } }
    public bool is_Array { get { return this is CollKind_Array; } }
    public bool is_Map { get { return this is CollKind_Map; } }
    public static System.Collections.Generic.IEnumerable<_ICollKind> AllSingletonConstructors {
      get {
        yield return CollKind.create_Seq();
        yield return CollKind.create_Array();
        yield return CollKind.create_Map();
      }
    }
    public abstract _ICollKind DowncastClone();
  }
  public class CollKind_Seq : CollKind {
    public CollKind_Seq() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Seq();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Seq;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Seq";
      return s;
    }
  }
  public class CollKind_Array : CollKind {
    public CollKind_Array() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Array();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Array;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Array";
      return s;
    }
  }
  public class CollKind_Map : CollKind {
    public CollKind_Map() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Map();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Map;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Map";
      return s;
    }
  }

  public interface _IBinOp {
    bool is_Eq { get; }
    bool is_Div { get; }
    bool is_EuclidianDiv { get; }
    bool is_Mod { get; }
    bool is_EuclidianMod { get; }
    bool is_Lt { get; }
    bool is_LtChar { get; }
    bool is_Plus { get; }
    bool is_Minus { get; }
    bool is_Times { get; }
    bool is_BitwiseAnd { get; }
    bool is_BitwiseOr { get; }
    bool is_BitwiseXor { get; }
    bool is_BitwiseShiftRight { get; }
    bool is_BitwiseShiftLeft { get; }
    bool is_And { get; }
    bool is_Or { get; }
    bool is_In { get; }
    bool is_SetMerge { get; }
    bool is_SetSubtraction { get; }
    bool is_SetIntersection { get; }
    bool is_MapMerge { get; }
    bool is_MapSubtraction { get; }
    bool is_Concat { get; }
    bool is_Passthrough { get; }
    bool dtor_referential { get; }
    bool dtor_nullable { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    _IBinOp DowncastClone();
  }
  public abstract class BinOp : _IBinOp {
    public BinOp() {
    }
    private static readonly DAST._IBinOp theDefault = create_Eq(false, false);
    public static DAST._IBinOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IBinOp> _TYPE = new Dafny.TypeDescriptor<DAST._IBinOp>(DAST.BinOp.Default());
    public static Dafny.TypeDescriptor<DAST._IBinOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOp create_Eq(bool referential, bool nullable) {
      return new BinOp_Eq(referential, nullable);
    }
    public static _IBinOp create_Div() {
      return new BinOp_Div();
    }
    public static _IBinOp create_EuclidianDiv() {
      return new BinOp_EuclidianDiv();
    }
    public static _IBinOp create_Mod() {
      return new BinOp_Mod();
    }
    public static _IBinOp create_EuclidianMod() {
      return new BinOp_EuclidianMod();
    }
    public static _IBinOp create_Lt() {
      return new BinOp_Lt();
    }
    public static _IBinOp create_LtChar() {
      return new BinOp_LtChar();
    }
    public static _IBinOp create_Plus() {
      return new BinOp_Plus();
    }
    public static _IBinOp create_Minus() {
      return new BinOp_Minus();
    }
    public static _IBinOp create_Times() {
      return new BinOp_Times();
    }
    public static _IBinOp create_BitwiseAnd() {
      return new BinOp_BitwiseAnd();
    }
    public static _IBinOp create_BitwiseOr() {
      return new BinOp_BitwiseOr();
    }
    public static _IBinOp create_BitwiseXor() {
      return new BinOp_BitwiseXor();
    }
    public static _IBinOp create_BitwiseShiftRight() {
      return new BinOp_BitwiseShiftRight();
    }
    public static _IBinOp create_BitwiseShiftLeft() {
      return new BinOp_BitwiseShiftLeft();
    }
    public static _IBinOp create_And() {
      return new BinOp_And();
    }
    public static _IBinOp create_Or() {
      return new BinOp_Or();
    }
    public static _IBinOp create_In() {
      return new BinOp_In();
    }
    public static _IBinOp create_SetMerge() {
      return new BinOp_SetMerge();
    }
    public static _IBinOp create_SetSubtraction() {
      return new BinOp_SetSubtraction();
    }
    public static _IBinOp create_SetIntersection() {
      return new BinOp_SetIntersection();
    }
    public static _IBinOp create_MapMerge() {
      return new BinOp_MapMerge();
    }
    public static _IBinOp create_MapSubtraction() {
      return new BinOp_MapSubtraction();
    }
    public static _IBinOp create_Concat() {
      return new BinOp_Concat();
    }
    public static _IBinOp create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new BinOp_Passthrough(_a0);
    }
    public bool is_Eq { get { return this is BinOp_Eq; } }
    public bool is_Div { get { return this is BinOp_Div; } }
    public bool is_EuclidianDiv { get { return this is BinOp_EuclidianDiv; } }
    public bool is_Mod { get { return this is BinOp_Mod; } }
    public bool is_EuclidianMod { get { return this is BinOp_EuclidianMod; } }
    public bool is_Lt { get { return this is BinOp_Lt; } }
    public bool is_LtChar { get { return this is BinOp_LtChar; } }
    public bool is_Plus { get { return this is BinOp_Plus; } }
    public bool is_Minus { get { return this is BinOp_Minus; } }
    public bool is_Times { get { return this is BinOp_Times; } }
    public bool is_BitwiseAnd { get { return this is BinOp_BitwiseAnd; } }
    public bool is_BitwiseOr { get { return this is BinOp_BitwiseOr; } }
    public bool is_BitwiseXor { get { return this is BinOp_BitwiseXor; } }
    public bool is_BitwiseShiftRight { get { return this is BinOp_BitwiseShiftRight; } }
    public bool is_BitwiseShiftLeft { get { return this is BinOp_BitwiseShiftLeft; } }
    public bool is_And { get { return this is BinOp_And; } }
    public bool is_Or { get { return this is BinOp_Or; } }
    public bool is_In { get { return this is BinOp_In; } }
    public bool is_SetMerge { get { return this is BinOp_SetMerge; } }
    public bool is_SetSubtraction { get { return this is BinOp_SetSubtraction; } }
    public bool is_SetIntersection { get { return this is BinOp_SetIntersection; } }
    public bool is_MapMerge { get { return this is BinOp_MapMerge; } }
    public bool is_MapSubtraction { get { return this is BinOp_MapSubtraction; } }
    public bool is_Concat { get { return this is BinOp_Concat; } }
    public bool is_Passthrough { get { return this is BinOp_Passthrough; } }
    public bool dtor_referential {
      get {
        var d = this;
        return ((BinOp_Eq)d)._referential;
      }
    }
    public bool dtor_nullable {
      get {
        var d = this;
        return ((BinOp_Eq)d)._nullable;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((BinOp_Passthrough)d)._a0;
      }
    }
    public abstract _IBinOp DowncastClone();
  }
  public class BinOp_Eq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Eq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Eq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Eq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Eq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Div : BinOp {
    public BinOp_Div() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Div();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Div;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Div";
      return s;
    }
  }
  public class BinOp_EuclidianDiv : BinOp {
    public BinOp_EuclidianDiv() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianDiv();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianDiv;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianDiv";
      return s;
    }
  }
  public class BinOp_Mod : BinOp {
    public BinOp_Mod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Mod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Mod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Mod";
      return s;
    }
  }
  public class BinOp_EuclidianMod : BinOp {
    public BinOp_EuclidianMod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianMod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianMod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianMod";
      return s;
    }
  }
  public class BinOp_Lt : BinOp {
    public BinOp_Lt() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Lt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Lt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Lt";
      return s;
    }
  }
  public class BinOp_LtChar : BinOp {
    public BinOp_LtChar() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_LtChar();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_LtChar;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.LtChar";
      return s;
    }
  }
  public class BinOp_Plus : BinOp {
    public BinOp_Plus() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Plus();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Plus;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Plus";
      return s;
    }
  }
  public class BinOp_Minus : BinOp {
    public BinOp_Minus() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Minus();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Minus;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Minus";
      return s;
    }
  }
  public class BinOp_Times : BinOp {
    public BinOp_Times() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Times();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Times;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Times";
      return s;
    }
  }
  public class BinOp_BitwiseAnd : BinOp {
    public BinOp_BitwiseAnd() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseAnd();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseAnd;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseAnd";
      return s;
    }
  }
  public class BinOp_BitwiseOr : BinOp {
    public BinOp_BitwiseOr() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseOr();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseOr;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseOr";
      return s;
    }
  }
  public class BinOp_BitwiseXor : BinOp {
    public BinOp_BitwiseXor() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseXor();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseXor;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseXor";
      return s;
    }
  }
  public class BinOp_BitwiseShiftRight : BinOp {
    public BinOp_BitwiseShiftRight() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseShiftRight();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseShiftRight;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseShiftRight";
      return s;
    }
  }
  public class BinOp_BitwiseShiftLeft : BinOp {
    public BinOp_BitwiseShiftLeft() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseShiftLeft();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseShiftLeft;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseShiftLeft";
      return s;
    }
  }
  public class BinOp_And : BinOp {
    public BinOp_And() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_And();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_And;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.And";
      return s;
    }
  }
  public class BinOp_Or : BinOp {
    public BinOp_Or() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Or();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Or;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Or";
      return s;
    }
  }
  public class BinOp_In : BinOp {
    public BinOp_In() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_In();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_In;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.In";
      return s;
    }
  }
  public class BinOp_SetMerge : BinOp {
    public BinOp_SetMerge() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetMerge();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetMerge;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetMerge";
      return s;
    }
  }
  public class BinOp_SetSubtraction : BinOp {
    public BinOp_SetSubtraction() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetSubtraction();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetSubtraction;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetSubtraction";
      return s;
    }
  }
  public class BinOp_SetIntersection : BinOp {
    public BinOp_SetIntersection() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetIntersection();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetIntersection;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetIntersection";
      return s;
    }
  }
  public class BinOp_MapMerge : BinOp {
    public BinOp_MapMerge() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MapMerge();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MapMerge;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MapMerge";
      return s;
    }
  }
  public class BinOp_MapSubtraction : BinOp {
    public BinOp_MapSubtraction() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MapSubtraction();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MapSubtraction;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MapSubtraction";
      return s;
    }
  }
  public class BinOp_Concat : BinOp {
    public BinOp_Concat() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Concat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Concat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Concat";
      return s;
    }
  }
  public class BinOp_Passthrough : BinOp {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public BinOp_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IExpression {
    bool is_Literal { get; }
    bool is_Ident { get; }
    bool is_Companion { get; }
    bool is_Tuple { get; }
    bool is_New { get; }
    bool is_NewArray { get; }
    bool is_DatatypeValue { get; }
    bool is_Convert { get; }
    bool is_SeqConstruct { get; }
    bool is_SeqValue { get; }
    bool is_SetValue { get; }
    bool is_MapValue { get; }
    bool is_MapBuilder { get; }
    bool is_SetBuilder { get; }
    bool is_This { get; }
    bool is_Ite { get; }
    bool is_UnOp { get; }
    bool is_BinOp { get; }
    bool is_ArrayLen { get; }
    bool is_MapKeys { get; }
    bool is_MapValues { get; }
    bool is_Select { get; }
    bool is_SelectFn { get; }
    bool is_Index { get; }
    bool is_IndexRange { get; }
    bool is_TupleSelect { get; }
    bool is_Call { get; }
    bool is_Lambda { get; }
    bool is_BetaRedex { get; }
    bool is_IIFE { get; }
    bool is_Apply { get; }
    bool is_TypeTest { get; }
    bool is_InitializationValue { get; }
    bool is_BoolBoundedPool { get; }
    bool is_SetBoundedPool { get; }
    bool is_SeqBoundedPool { get; }
    bool is_IntRange { get; }
    DAST._ILiteral dtor_Literal_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 { get; }
    Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Dafny.ISequence<DAST._IExpression> dtor_dims { get; }
    DAST._IType dtor_typ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_variant { get; }
    bool dtor_isCo { get; }
    Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IType dtor_from { get; }
    DAST._IExpression dtor_length { get; }
    DAST._IExpression dtor_elem { get; }
    Dafny.ISequence<DAST._IExpression> dtor_elements { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems { get; }
    DAST._IType dtor_keyType { get; }
    DAST._IType dtor_valueType { get; }
    DAST._IType dtor_elemType { get; }
    DAST._IExpression dtor_cond { get; }
    DAST._IExpression dtor_thn { get; }
    DAST._IExpression dtor_els { get; }
    DAST._IUnaryOp dtor_unOp { get; }
    DAST._IExpression dtor_expr { get; }
    DAST.Format._IUnOpFormat dtor_format1 { get; }
    DAST._IBinOp dtor_op { get; }
    DAST._IExpression dtor_left { get; }
    DAST._IExpression dtor_right { get; }
    DAST.Format._IBinOpFormat dtor_format2 { get; }
    BigInteger dtor_dim { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    bool dtor_isConstant { get; }
    bool dtor_onDatatype { get; }
    bool dtor_isStatic { get; }
    BigInteger dtor_arity { get; }
    DAST._ICollKind dtor_collKind { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    bool dtor_isArray { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_low { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_high { get; }
    BigInteger dtor_index { get; }
    DAST._IExpression dtor_on { get; }
    DAST._ICallName dtor_callName { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    DAST._IType dtor_retType { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IExpression dtor_iifeBody { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType { get; }
    DAST._IExpression dtor_of { get; }
    bool dtor_includeDuplicates { get; }
    DAST._IExpression dtor_lo { get; }
    DAST._IExpression dtor_hi { get; }
    _IExpression DowncastClone();
  }
  public abstract class Expression : _IExpression {
    public Expression() {
    }
    private static readonly DAST._IExpression theDefault = create_Literal(DAST.Literal.Default());
    public static DAST._IExpression Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IExpression> _TYPE = new Dafny.TypeDescriptor<DAST._IExpression>(DAST.Expression.Default());
    public static Dafny.TypeDescriptor<DAST._IExpression> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpression create_Literal(DAST._ILiteral _a0) {
      return new Expression_Literal(_a0);
    }
    public static _IExpression create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expression_Ident(_a0);
    }
    public static _IExpression create_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) {
      return new Expression_Companion(_a0);
    }
    public static _IExpression create_Tuple(Dafny.ISequence<DAST._IExpression> _a0) {
      return new Expression_Tuple(_a0);
    }
    public static _IExpression create_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_New(path, typeArgs, args);
    }
    public static _IExpression create_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) {
      return new Expression_NewArray(dims, typ);
    }
    public static _IExpression create_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) {
      return new Expression_DatatypeValue(path, typeArgs, variant, isCo, contents);
    }
    public static _IExpression create_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) {
      return new Expression_Convert(@value, @from, typ);
    }
    public static _IExpression create_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) {
      return new Expression_SeqConstruct(length, elem);
    }
    public static _IExpression create_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) {
      return new Expression_SeqValue(elements, typ);
    }
    public static _IExpression create_SetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_SetValue(elements);
    }
    public static _IExpression create_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) {
      return new Expression_MapValue(mapElems);
    }
    public static _IExpression create_MapBuilder(DAST._IType keyType, DAST._IType valueType) {
      return new Expression_MapBuilder(keyType, valueType);
    }
    public static _IExpression create_SetBuilder(DAST._IType elemType) {
      return new Expression_SetBuilder(elemType);
    }
    public static _IExpression create_This() {
      return new Expression_This();
    }
    public static _IExpression create_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) {
      return new Expression_Ite(cond, thn, els);
    }
    public static _IExpression create_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr, DAST.Format._IUnOpFormat format1) {
      return new Expression_UnOp(unOp, expr, format1);
    }
    public static _IExpression create_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right, DAST.Format._IBinOpFormat format2) {
      return new Expression_BinOp(op, left, right, format2);
    }
    public static _IExpression create_ArrayLen(DAST._IExpression expr, BigInteger dim) {
      return new Expression_ArrayLen(expr, dim);
    }
    public static _IExpression create_MapKeys(DAST._IExpression expr) {
      return new Expression_MapKeys(expr);
    }
    public static _IExpression create_MapValues(DAST._IExpression expr) {
      return new Expression_MapValues(expr);
    }
    public static _IExpression create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) {
      return new Expression_Select(expr, field, isConstant, onDatatype);
    }
    public static _IExpression create_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) {
      return new Expression_SelectFn(expr, field, onDatatype, isStatic, arity);
    }
    public static _IExpression create_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) {
      return new Expression_Index(expr, collKind, indices);
    }
    public static _IExpression create_IndexRange(DAST._IExpression expr, bool isArray, Std.Wrappers._IOption<DAST._IExpression> low, Std.Wrappers._IOption<DAST._IExpression> high) {
      return new Expression_IndexRange(expr, isArray, low, high);
    }
    public static _IExpression create_TupleSelect(DAST._IExpression expr, BigInteger index) {
      return new Expression_TupleSelect(expr, index);
    }
    public static _IExpression create_Call(DAST._IExpression @on, DAST._ICallName callName, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Call(@on, callName, typeArgs, args);
    }
    public static _IExpression create_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) {
      return new Expression_Lambda(@params, retType, body);
    }
    public static _IExpression create_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) {
      return new Expression_BetaRedex(values, retType, expr);
    }
    public static _IExpression create_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) {
      return new Expression_IIFE(name, typ, @value, iifeBody);
    }
    public static _IExpression create_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Apply(expr, args);
    }
    public static _IExpression create_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) {
      return new Expression_TypeTest(@on, dType, variant);
    }
    public static _IExpression create_InitializationValue(DAST._IType typ) {
      return new Expression_InitializationValue(typ);
    }
    public static _IExpression create_BoolBoundedPool() {
      return new Expression_BoolBoundedPool();
    }
    public static _IExpression create_SetBoundedPool(DAST._IExpression of) {
      return new Expression_SetBoundedPool(of);
    }
    public static _IExpression create_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) {
      return new Expression_SeqBoundedPool(of, includeDuplicates);
    }
    public static _IExpression create_IntRange(DAST._IExpression lo, DAST._IExpression hi) {
      return new Expression_IntRange(lo, hi);
    }
    public bool is_Literal { get { return this is Expression_Literal; } }
    public bool is_Ident { get { return this is Expression_Ident; } }
    public bool is_Companion { get { return this is Expression_Companion; } }
    public bool is_Tuple { get { return this is Expression_Tuple; } }
    public bool is_New { get { return this is Expression_New; } }
    public bool is_NewArray { get { return this is Expression_NewArray; } }
    public bool is_DatatypeValue { get { return this is Expression_DatatypeValue; } }
    public bool is_Convert { get { return this is Expression_Convert; } }
    public bool is_SeqConstruct { get { return this is Expression_SeqConstruct; } }
    public bool is_SeqValue { get { return this is Expression_SeqValue; } }
    public bool is_SetValue { get { return this is Expression_SetValue; } }
    public bool is_MapValue { get { return this is Expression_MapValue; } }
    public bool is_MapBuilder { get { return this is Expression_MapBuilder; } }
    public bool is_SetBuilder { get { return this is Expression_SetBuilder; } }
    public bool is_This { get { return this is Expression_This; } }
    public bool is_Ite { get { return this is Expression_Ite; } }
    public bool is_UnOp { get { return this is Expression_UnOp; } }
    public bool is_BinOp { get { return this is Expression_BinOp; } }
    public bool is_ArrayLen { get { return this is Expression_ArrayLen; } }
    public bool is_MapKeys { get { return this is Expression_MapKeys; } }
    public bool is_MapValues { get { return this is Expression_MapValues; } }
    public bool is_Select { get { return this is Expression_Select; } }
    public bool is_SelectFn { get { return this is Expression_SelectFn; } }
    public bool is_Index { get { return this is Expression_Index; } }
    public bool is_IndexRange { get { return this is Expression_IndexRange; } }
    public bool is_TupleSelect { get { return this is Expression_TupleSelect; } }
    public bool is_Call { get { return this is Expression_Call; } }
    public bool is_Lambda { get { return this is Expression_Lambda; } }
    public bool is_BetaRedex { get { return this is Expression_BetaRedex; } }
    public bool is_IIFE { get { return this is Expression_IIFE; } }
    public bool is_Apply { get { return this is Expression_Apply; } }
    public bool is_TypeTest { get { return this is Expression_TypeTest; } }
    public bool is_InitializationValue { get { return this is Expression_InitializationValue; } }
    public bool is_BoolBoundedPool { get { return this is Expression_BoolBoundedPool; } }
    public bool is_SetBoundedPool { get { return this is Expression_SetBoundedPool; } }
    public bool is_SeqBoundedPool { get { return this is Expression_SeqBoundedPool; } }
    public bool is_IntRange { get { return this is Expression_IntRange; } }
    public DAST._ILiteral dtor_Literal_a0 {
      get {
        var d = this;
        return ((Expression_Literal)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((Expression_Ident)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 {
      get {
        var d = this;
        return ((Expression_Companion)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Expression_Tuple)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._path; }
        return ((Expression_DatatypeValue)d)._path;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._typeArgs; }
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._typeArgs; }
        return ((Expression_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._args; }
        if (d is Expression_Call) { return ((Expression_Call)d)._args; }
        return ((Expression_Apply)d)._args;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_dims {
      get {
        var d = this;
        return ((Expression_NewArray)d)._dims;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        if (d is Expression_NewArray) { return ((Expression_NewArray)d)._typ; }
        if (d is Expression_Convert) { return ((Expression_Convert)d)._typ; }
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._typ; }
        if (d is Expression_IIFE) { return ((Expression_IIFE)d)._typ; }
        return ((Expression_InitializationValue)d)._typ;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_variant {
      get {
        var d = this;
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._variant; }
        return ((Expression_TypeTest)d)._variant;
      }
    }
    public bool dtor_isCo {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._isCo;
      }
    }
    public Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._contents;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        if (d is Expression_Convert) { return ((Expression_Convert)d)._value; }
        return ((Expression_IIFE)d)._value;
      }
    }
    public DAST._IType dtor_from {
      get {
        var d = this;
        return ((Expression_Convert)d)._from;
      }
    }
    public DAST._IExpression dtor_length {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._length;
      }
    }
    public DAST._IExpression dtor_elem {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._elem;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_elements {
      get {
        var d = this;
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._elements; }
        return ((Expression_SetValue)d)._elements;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems {
      get {
        var d = this;
        return ((Expression_MapValue)d)._mapElems;
      }
    }
    public DAST._IType dtor_keyType {
      get {
        var d = this;
        return ((Expression_MapBuilder)d)._keyType;
      }
    }
    public DAST._IType dtor_valueType {
      get {
        var d = this;
        return ((Expression_MapBuilder)d)._valueType;
      }
    }
    public DAST._IType dtor_elemType {
      get {
        var d = this;
        return ((Expression_SetBuilder)d)._elemType;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        return ((Expression_Ite)d)._cond;
      }
    }
    public DAST._IExpression dtor_thn {
      get {
        var d = this;
        return ((Expression_Ite)d)._thn;
      }
    }
    public DAST._IExpression dtor_els {
      get {
        var d = this;
        return ((Expression_Ite)d)._els;
      }
    }
    public DAST._IUnaryOp dtor_unOp {
      get {
        var d = this;
        return ((Expression_UnOp)d)._unOp;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is Expression_UnOp) { return ((Expression_UnOp)d)._expr; }
        if (d is Expression_ArrayLen) { return ((Expression_ArrayLen)d)._expr; }
        if (d is Expression_MapKeys) { return ((Expression_MapKeys)d)._expr; }
        if (d is Expression_MapValues) { return ((Expression_MapValues)d)._expr; }
        if (d is Expression_Select) { return ((Expression_Select)d)._expr; }
        if (d is Expression_SelectFn) { return ((Expression_SelectFn)d)._expr; }
        if (d is Expression_Index) { return ((Expression_Index)d)._expr; }
        if (d is Expression_IndexRange) { return ((Expression_IndexRange)d)._expr; }
        if (d is Expression_TupleSelect) { return ((Expression_TupleSelect)d)._expr; }
        if (d is Expression_BetaRedex) { return ((Expression_BetaRedex)d)._expr; }
        return ((Expression_Apply)d)._expr;
      }
    }
    public DAST.Format._IUnOpFormat dtor_format1 {
      get {
        var d = this;
        return ((Expression_UnOp)d)._format1;
      }
    }
    public DAST._IBinOp dtor_op {
      get {
        var d = this;
        return ((Expression_BinOp)d)._op;
      }
    }
    public DAST._IExpression dtor_left {
      get {
        var d = this;
        return ((Expression_BinOp)d)._left;
      }
    }
    public DAST._IExpression dtor_right {
      get {
        var d = this;
        return ((Expression_BinOp)d)._right;
      }
    }
    public DAST.Format._IBinOpFormat dtor_format2 {
      get {
        var d = this;
        return ((Expression_BinOp)d)._format2;
      }
    }
    public BigInteger dtor_dim {
      get {
        var d = this;
        return ((Expression_ArrayLen)d)._dim;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._field; }
        return ((Expression_SelectFn)d)._field;
      }
    }
    public bool dtor_isConstant {
      get {
        var d = this;
        return ((Expression_Select)d)._isConstant;
      }
    }
    public bool dtor_onDatatype {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._onDatatype; }
        return ((Expression_SelectFn)d)._onDatatype;
      }
    }
    public bool dtor_isStatic {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._isStatic;
      }
    }
    public BigInteger dtor_arity {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._arity;
      }
    }
    public DAST._ICollKind dtor_collKind {
      get {
        var d = this;
        return ((Expression_Index)d)._collKind;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((Expression_Index)d)._indices;
      }
    }
    public bool dtor_isArray {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._isArray;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_low {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._low;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_high {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._high;
      }
    }
    public BigInteger dtor_index {
      get {
        var d = this;
        return ((Expression_TupleSelect)d)._index;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._on; }
        return ((Expression_TypeTest)d)._on;
      }
    }
    public DAST._ICallName dtor_callName {
      get {
        var d = this;
        return ((Expression_Call)d)._callName;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        var d = this;
        return ((Expression_Lambda)d)._params;
      }
    }
    public DAST._IType dtor_retType {
      get {
        var d = this;
        if (d is Expression_Lambda) { return ((Expression_Lambda)d)._retType; }
        return ((Expression_BetaRedex)d)._retType;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        return ((Expression_Lambda)d)._body;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values {
      get {
        var d = this;
        return ((Expression_BetaRedex)d)._values;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        return ((Expression_IIFE)d)._name;
      }
    }
    public DAST._IExpression dtor_iifeBody {
      get {
        var d = this;
        return ((Expression_IIFE)d)._iifeBody;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType {
      get {
        var d = this;
        return ((Expression_TypeTest)d)._dType;
      }
    }
    public DAST._IExpression dtor_of {
      get {
        var d = this;
        if (d is Expression_SetBoundedPool) { return ((Expression_SetBoundedPool)d)._of; }
        return ((Expression_SeqBoundedPool)d)._of;
      }
    }
    public bool dtor_includeDuplicates {
      get {
        var d = this;
        return ((Expression_SeqBoundedPool)d)._includeDuplicates;
      }
    }
    public DAST._IExpression dtor_lo {
      get {
        var d = this;
        return ((Expression_IntRange)d)._lo;
      }
    }
    public DAST._IExpression dtor_hi {
      get {
        var d = this;
        return ((Expression_IntRange)d)._hi;
      }
    }
    public abstract _IExpression DowncastClone();
  }
  public class Expression_Literal : Expression {
    public readonly DAST._ILiteral _a0;
    public Expression_Literal(DAST._ILiteral _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Literal(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Literal;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Literal";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Ident : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expression_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ident";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_Companion : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public Expression_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Companion(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Companion;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Companion";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Tuple : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _a0;
    public Expression_Tuple(Dafny.ISequence<DAST._IExpression> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_New : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_New(_path, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_New;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_NewArray : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _dims;
    public readonly DAST._IType _typ;
    public Expression_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) : base() {
      this._dims = dims;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_NewArray(_dims, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_NewArray;
      return oth != null && object.Equals(this._dims, oth._dims) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.NewArray";
      s += "(";
      s += Dafny.Helpers.ToString(this._dims);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_DatatypeValue : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public readonly bool _isCo;
    public readonly Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _contents;
    public Expression_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._variant = variant;
      this._isCo = isCo;
      this._contents = contents;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_DatatypeValue(_path, _typeArgs, _variant, _isCo, _contents);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_DatatypeValue;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._variant, oth._variant) && this._isCo == oth._isCo && object.Equals(this._contents, oth._contents);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._contents));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.DatatypeValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._contents);
      s += ")";
      return s;
    }
  }
  public class Expression_Convert : Expression {
    public readonly DAST._IExpression _value;
    public readonly DAST._IType _from;
    public readonly DAST._IType _typ;
    public Expression_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) : base() {
      this._value = @value;
      this._from = @from;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Convert(_value, _from, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Convert;
      return oth != null && object.Equals(this._value, oth._value) && object.Equals(this._from, oth._from) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._from));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Convert";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._from);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqConstruct : Expression {
    public readonly DAST._IExpression _length;
    public readonly DAST._IExpression _elem;
    public Expression_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) : base() {
      this._length = length;
      this._elem = elem;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqConstruct(_length, _elem);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqConstruct;
      return oth != null && object.Equals(this._length, oth._length) && object.Equals(this._elem, oth._elem);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._length));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elem));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqConstruct";
      s += "(";
      s += Dafny.Helpers.ToString(this._length);
      s += ", ";
      s += Dafny.Helpers.ToString(this._elem);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public readonly DAST._IType _typ;
    public Expression_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) : base() {
      this._elements = elements;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqValue(_elements, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqValue;
      return oth != null && object.Equals(this._elements, oth._elements) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_SetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValue : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _mapElems;
    public Expression_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) : base() {
      this._mapElems = mapElems;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValue(_mapElems);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValue;
      return oth != null && object.Equals(this._mapElems, oth._mapElems);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mapElems));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._mapElems);
      s += ")";
      return s;
    }
  }
  public class Expression_MapBuilder : Expression {
    public readonly DAST._IType _keyType;
    public readonly DAST._IType _valueType;
    public Expression_MapBuilder(DAST._IType keyType, DAST._IType valueType) : base() {
      this._keyType = keyType;
      this._valueType = valueType;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapBuilder(_keyType, _valueType);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapBuilder;
      return oth != null && object.Equals(this._keyType, oth._keyType) && object.Equals(this._valueType, oth._valueType);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._keyType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._valueType));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapBuilder";
      s += "(";
      s += Dafny.Helpers.ToString(this._keyType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._valueType);
      s += ")";
      return s;
    }
  }
  public class Expression_SetBuilder : Expression {
    public readonly DAST._IType _elemType;
    public Expression_SetBuilder(DAST._IType elemType) : base() {
      this._elemType = elemType;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBuilder(_elemType);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBuilder;
      return oth != null && object.Equals(this._elemType, oth._elemType);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elemType));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBuilder";
      s += "(";
      s += Dafny.Helpers.ToString(this._elemType);
      s += ")";
      return s;
    }
  }
  public class Expression_This : Expression {
    public Expression_This() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_This();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_This;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.This";
      return s;
    }
  }
  public class Expression_Ite : Expression {
    public readonly DAST._IExpression _cond;
    public readonly DAST._IExpression _thn;
    public readonly DAST._IExpression _els;
    public Expression_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ite(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ite;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expression_UnOp : Expression {
    public readonly DAST._IUnaryOp _unOp;
    public readonly DAST._IExpression _expr;
    public readonly DAST.Format._IUnOpFormat _format1;
    public Expression_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr, DAST.Format._IUnOpFormat format1) : base() {
      this._unOp = unOp;
      this._expr = expr;
      this._format1 = format1;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_UnOp(_unOp, _expr, _format1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_UnOp;
      return oth != null && object.Equals(this._unOp, oth._unOp) && object.Equals(this._expr, oth._expr) && object.Equals(this._format1, oth._format1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._unOp));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format1));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.UnOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._unOp);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format1);
      s += ")";
      return s;
    }
  }
  public class Expression_BinOp : Expression {
    public readonly DAST._IBinOp _op;
    public readonly DAST._IExpression _left;
    public readonly DAST._IExpression _right;
    public readonly DAST.Format._IBinOpFormat _format2;
    public Expression_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right, DAST.Format._IBinOpFormat format2) : base() {
      this._op = op;
      this._left = left;
      this._right = right;
      this._format2 = format2;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BinOp(_op, _left, _right, _format2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BinOp;
      return oth != null && object.Equals(this._op, oth._op) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right) && object.Equals(this._format2, oth._format2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format2));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BinOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._op);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format2);
      s += ")";
      return s;
    }
  }
  public class Expression_ArrayLen : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _dim;
    public Expression_ArrayLen(DAST._IExpression expr, BigInteger dim) : base() {
      this._expr = expr;
      this._dim = dim;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ArrayLen(_expr, _dim);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ArrayLen;
      return oth != null && object.Equals(this._expr, oth._expr) && this._dim == oth._dim;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dim));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ArrayLen";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dim);
      s += ")";
      return s;
    }
  }
  public class Expression_MapKeys : Expression {
    public readonly DAST._IExpression _expr;
    public Expression_MapKeys(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapKeys(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapKeys;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapKeys";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValues : Expression {
    public readonly DAST._IExpression _expr;
    public Expression_MapValues(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValues(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValues;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValues";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_Select : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _isConstant;
    public readonly bool _onDatatype;
    public Expression_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) : base() {
      this._expr = expr;
      this._field = field;
      this._isConstant = isConstant;
      this._onDatatype = onDatatype;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Select(_expr, _field, _isConstant, _onDatatype);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._isConstant == oth._isConstant && this._onDatatype == oth._onDatatype;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isConstant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isConstant);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ")";
      return s;
    }
  }
  public class Expression_SelectFn : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _onDatatype;
    public readonly bool _isStatic;
    public readonly BigInteger _arity;
    public Expression_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) : base() {
      this._expr = expr;
      this._field = field;
      this._onDatatype = onDatatype;
      this._isStatic = isStatic;
      this._arity = arity;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SelectFn(_expr, _field, _onDatatype, _isStatic, _arity);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SelectFn;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._onDatatype == oth._onDatatype && this._isStatic == oth._isStatic && this._arity == oth._arity;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arity));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SelectFn";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arity);
      s += ")";
      return s;
    }
  }
  public class Expression_Index : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._ICollKind _collKind;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public Expression_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._collKind = collKind;
      this._indices = indices;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Index(_expr, _collKind, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._collKind, oth._collKind) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._collKind));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._collKind);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }
  public class Expression_IndexRange : Expression {
    public readonly DAST._IExpression _expr;
    public readonly bool _isArray;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _low;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _high;
    public Expression_IndexRange(DAST._IExpression expr, bool isArray, Std.Wrappers._IOption<DAST._IExpression> low, Std.Wrappers._IOption<DAST._IExpression> high) : base() {
      this._expr = expr;
      this._isArray = isArray;
      this._low = low;
      this._high = high;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IndexRange(_expr, _isArray, _low, _high);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IndexRange;
      return oth != null && object.Equals(this._expr, oth._expr) && this._isArray == oth._isArray && object.Equals(this._low, oth._low) && object.Equals(this._high, oth._high);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isArray));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._low));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._high));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IndexRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isArray);
      s += ", ";
      s += Dafny.Helpers.ToString(this._low);
      s += ", ";
      s += Dafny.Helpers.ToString(this._high);
      s += ")";
      return s;
    }
  }
  public class Expression_TupleSelect : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _index;
    public Expression_TupleSelect(DAST._IExpression expr, BigInteger index) : base() {
      this._expr = expr;
      this._index = index;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TupleSelect(_expr, _index);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TupleSelect;
      return oth != null && object.Equals(this._expr, oth._expr) && this._index == oth._index;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._index));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TupleSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._index);
      s += ")";
      return s;
    }
  }
  public class Expression_Call : Expression {
    public readonly DAST._IExpression _on;
    public readonly DAST._ICallName _callName;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Call(DAST._IExpression @on, DAST._ICallName callName, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._on = @on;
      this._callName = callName;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Call(_on, _callName, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._callName, oth._callName) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._callName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._callName);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_Lambda : Expression {
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly DAST._IType _retType;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Expression_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._params = @params;
      this._retType = retType;
      this._body = body;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Lambda(_params, _retType, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Lambda;
      return oth != null && object.Equals(this._params, oth._params) && object.Equals(this._retType, oth._retType) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Lambda";
      s += "(";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expression_BetaRedex : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _values;
    public readonly DAST._IType _retType;
    public readonly DAST._IExpression _expr;
    public Expression_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) : base() {
      this._values = values;
      this._retType = retType;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BetaRedex(_values, _retType, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BetaRedex;
      return oth != null && object.Equals(this._values, oth._values) && object.Equals(this._retType, oth._retType) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._values));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BetaRedex";
      s += "(";
      s += Dafny.Helpers.ToString(this._values);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_IIFE : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IExpression _value;
    public readonly DAST._IExpression _iifeBody;
    public Expression_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) : base() {
      this._name = name;
      this._typ = typ;
      this._value = @value;
      this._iifeBody = iifeBody;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IIFE(_name, _typ, _value, _iifeBody);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IIFE;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._value, oth._value) && object.Equals(this._iifeBody, oth._iifeBody);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._iifeBody));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IIFE";
      s += "(";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._iifeBody);
      s += ")";
      return s;
    }
  }
  public class Expression_Apply : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._expr = expr;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Apply(_expr, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Apply;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Apply";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_TypeTest : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _dType;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public Expression_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) : base() {
      this._on = @on;
      this._dType = dType;
      this._variant = variant;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TypeTest(_on, _dType, _variant);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TypeTest;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._dType, oth._dType) && object.Equals(this._variant, oth._variant);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TypeTest";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dType);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_InitializationValue : Expression {
    public readonly DAST._IType _typ;
    public Expression_InitializationValue(DAST._IType typ) : base() {
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_InitializationValue(_typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_InitializationValue;
      return oth != null && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.InitializationValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_BoolBoundedPool : Expression {
    public Expression_BoolBoundedPool() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BoolBoundedPool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BoolBoundedPool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 33;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BoolBoundedPool";
      return s;
    }
  }
  public class Expression_SetBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public Expression_SetBoundedPool(DAST._IExpression of) : base() {
      this._of = of;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBoundedPool(_of);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBoundedPool;
      return oth != null && object.Equals(this._of, oth._of);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 34;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public readonly bool _includeDuplicates;
    public Expression_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) : base() {
      this._of = of;
      this._includeDuplicates = includeDuplicates;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqBoundedPool(_of, _includeDuplicates);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqBoundedPool;
      return oth != null && object.Equals(this._of, oth._of) && this._includeDuplicates == oth._includeDuplicates;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 35;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._includeDuplicates));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ", ";
      s += Dafny.Helpers.ToString(this._includeDuplicates);
      s += ")";
      return s;
    }
  }
  public class Expression_IntRange : Expression {
    public readonly DAST._IExpression _lo;
    public readonly DAST._IExpression _hi;
    public Expression_IntRange(DAST._IExpression lo, DAST._IExpression hi) : base() {
      this._lo = lo;
      this._hi = hi;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IntRange(_lo, _hi);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IntRange;
      return oth != null && object.Equals(this._lo, oth._lo) && object.Equals(this._hi, oth._hi);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 36;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hi));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IntRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._lo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hi);
      s += ")";
      return s;
    }
  }

  public interface _IUnaryOp {
    bool is_Not { get; }
    bool is_BitwiseNot { get; }
    bool is_Cardinality { get; }
    _IUnaryOp DowncastClone();
  }
  public abstract class UnaryOp : _IUnaryOp {
    public UnaryOp() {
    }
    private static readonly DAST._IUnaryOp theDefault = create_Not();
    public static DAST._IUnaryOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IUnaryOp> _TYPE = new Dafny.TypeDescriptor<DAST._IUnaryOp>(DAST.UnaryOp.Default());
    public static Dafny.TypeDescriptor<DAST._IUnaryOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnaryOp create_Not() {
      return new UnaryOp_Not();
    }
    public static _IUnaryOp create_BitwiseNot() {
      return new UnaryOp_BitwiseNot();
    }
    public static _IUnaryOp create_Cardinality() {
      return new UnaryOp_Cardinality();
    }
    public bool is_Not { get { return this is UnaryOp_Not; } }
    public bool is_BitwiseNot { get { return this is UnaryOp_BitwiseNot; } }
    public bool is_Cardinality { get { return this is UnaryOp_Cardinality; } }
    public static System.Collections.Generic.IEnumerable<_IUnaryOp> AllSingletonConstructors {
      get {
        yield return UnaryOp.create_Not();
        yield return UnaryOp.create_BitwiseNot();
        yield return UnaryOp.create_Cardinality();
      }
    }
    public abstract _IUnaryOp DowncastClone();
  }
  public class UnaryOp_Not : UnaryOp {
    public UnaryOp_Not() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Not();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Not;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Not";
      return s;
    }
  }
  public class UnaryOp_BitwiseNot : UnaryOp {
    public UnaryOp_BitwiseNot() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_BitwiseNot();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_BitwiseNot;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.BitwiseNot";
      return s;
    }
  }
  public class UnaryOp_Cardinality : UnaryOp {
    public UnaryOp_Cardinality() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Cardinality();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Cardinality;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Cardinality";
      return s;
    }
  }

  public interface _ILiteral {
    bool is_BoolLiteral { get; }
    bool is_IntLiteral { get; }
    bool is_DecLiteral { get; }
    bool is_StringLiteral { get; }
    bool is_CharLiteral { get; }
    bool is_Null { get; }
    bool dtor_BoolLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 { get; }
    DAST._IType dtor_IntLiteral_a1 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 { get; }
    DAST._IType dtor_DecLiteral_a2 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 { get; }
    Dafny.Rune dtor_CharLiteral_a0 { get; }
    DAST._IType dtor_Null_a0 { get; }
    _ILiteral DowncastClone();
  }
  public abstract class Literal : _ILiteral {
    public Literal() {
    }
    private static readonly DAST._ILiteral theDefault = create_BoolLiteral(false);
    public static DAST._ILiteral Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ILiteral> _TYPE = new Dafny.TypeDescriptor<DAST._ILiteral>(DAST.Literal.Default());
    public static Dafny.TypeDescriptor<DAST._ILiteral> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ILiteral create_BoolLiteral(bool _a0) {
      return new Literal_BoolLiteral(_a0);
    }
    public static _ILiteral create_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) {
      return new Literal_IntLiteral(_a0, _a1);
    }
    public static _ILiteral create_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) {
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public static _ILiteral create_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Literal_StringLiteral(_a0);
    }
    public static _ILiteral create_CharLiteral(Dafny.Rune _a0) {
      return new Literal_CharLiteral(_a0);
    }
    public static _ILiteral create_Null(DAST._IType _a0) {
      return new Literal_Null(_a0);
    }
    public bool is_BoolLiteral { get { return this is Literal_BoolLiteral; } }
    public bool is_IntLiteral { get { return this is Literal_IntLiteral; } }
    public bool is_DecLiteral { get { return this is Literal_DecLiteral; } }
    public bool is_StringLiteral { get { return this is Literal_StringLiteral; } }
    public bool is_CharLiteral { get { return this is Literal_CharLiteral; } }
    public bool is_Null { get { return this is Literal_Null; } }
    public bool dtor_BoolLiteral_a0 {
      get {
        var d = this;
        return ((Literal_BoolLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_IntLiteral_a1 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a1;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a1;
      }
    }
    public DAST._IType dtor_DecLiteral_a2 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a2;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 {
      get {
        var d = this;
        return ((Literal_StringLiteral)d)._a0;
      }
    }
    public Dafny.Rune dtor_CharLiteral_a0 {
      get {
        var d = this;
        return ((Literal_CharLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_Null_a0 {
      get {
        var d = this;
        return ((Literal_Null)d)._a0;
      }
    }
    public abstract _ILiteral DowncastClone();
  }
  public class Literal_BoolLiteral : Literal {
    public readonly bool _a0;
    public Literal_BoolLiteral(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_BoolLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_BoolLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.BoolLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_IntLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly DAST._IType _a1;
    public Literal_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_IntLiteral(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_IntLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.IntLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Literal_DecLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly Dafny.ISequence<Dafny.Rune> _a1;
    public readonly DAST._IType _a2;
    public Literal_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
      this._a2 = _a2;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_DecLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1) && object.Equals(this._a2, oth._a2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a2));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.DecLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += this._a1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a2);
      s += ")";
      return s;
    }
  }
  public class Literal_StringLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Literal_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_StringLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_StringLiteral;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.StringLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Literal_CharLiteral : Literal {
    public readonly Dafny.Rune _a0;
    public Literal_CharLiteral(Dafny.Rune _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_CharLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_CharLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.CharLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_Null : Literal {
    public readonly DAST._IType _a0;
    public Literal_Null(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_Null(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_Null;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.Null";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
} // end of namespace DAST

namespace D2DPrettyPrinter {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> PrettyPrint(Dafny.ISequence<DAST._IModule> d)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Microsoft.Dafny.Compilers.WrapException.Throw();
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Not Implemented Yet");
      return s;
    }
  }
} // end of namespace D2DPrettyPrinter
namespace ResolvedDesugaredExecutableDafnyPlugin {


  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _out14;
      _out14 = D2DPrettyPrinter.__default.PrettyPrint(p);
      s = _out14;
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      return s;
    }
  }
} // end of namespace ResolvedDesugaredExecutableDafnyPlugin
namespace RAST {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> SeqToString<__T>(Dafny.ISequence<__T> s, Func<__T, Dafny.ISequence<Dafny.Rune>> f, Dafny.ISequence<Dafny.Rune> separator)
    {
      if ((new BigInteger((s).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Helpers.Id<Func<__T, Dafny.ISequence<Dafny.Rune>>>(f)((s).Select(BigInteger.Zero)), (((new BigInteger((s).Count)) > (BigInteger.One)) ? (Dafny.Sequence<Dafny.Rune>.Concat(separator, RAST.__default.SeqToString<__T>((s).Drop(BigInteger.One), f, separator))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
      }
    }
    public static BigInteger SeqToHeight<__T>(Dafny.ISequence<__T> s, Func<__T, BigInteger> f)
    {
      if ((new BigInteger((s).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        BigInteger _801_i = Dafny.Helpers.Id<Func<__T, BigInteger>>(f)((s).Select(BigInteger.Zero));
        BigInteger _802_j = RAST.__default.SeqToHeight<__T>((s).Drop(BigInteger.One), f);
        if ((_801_i) < (_802_j)) {
          return _802_j;
        } else {
          return _801_i;
        }
      }
    }
    public static RAST._IType Rc(RAST._IType underlying) {
      return RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc"), Dafny.Sequence<RAST._IType>.FromElements(underlying));
    }
    public static RAST._IType RefCell(RAST._IType underlying) {
      return RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cell::RefCell"), Dafny.Sequence<RAST._IType>.FromElements(underlying));
    }
    public static RAST._IType Vec(RAST._IType underlying) {
      return RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::vec::Vec"), Dafny.Sequence<RAST._IType>.FromElements(underlying));
    }
    public static RAST._IExpr NewVec(Dafny.ISequence<RAST._IExpr> elements) {
      return RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec!")), Dafny.Sequence<RAST._IType>.FromElements(), elements);
    }
    public static RAST._IExpr Clone(RAST._IExpr underlying) {
      return RAST.Expr.create_Call(RAST.Expr.create_Select(underlying, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
    }
    public static RAST._IExpr Borrow(RAST._IExpr underlying) {
      return RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), underlying, DAST.Format.UnOpFormat.create_NoFormat());
    }
    public static RAST._IExpr BorrowMut(RAST._IExpr underlying) {
      return RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut"), underlying, DAST.Format.UnOpFormat.create_NoFormat());
    }
    public static RAST._IType RawType(Dafny.ISequence<Dafny.Rune> content) {
      return RAST.Type.create_TypeApp(content, Dafny.Sequence<RAST._IType>.FromElements());
    }
    public static Dafny.ISequence<Dafny.Rune> AddIndent(Dafny.ISequence<Dafny.Rune> raw, Dafny.ISequence<Dafny.Rune> ind)
    {
      Dafny.ISequence<Dafny.Rune> _803___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((raw).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, raw);
      } else if ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[({")).Contains((raw).Select(BigInteger.Zero))) {
        _803___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in103 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in104 = Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND);
        raw = _in103;
        ind = _in104;
        goto TAIL_CALL_START;
      } else if (((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("})]")).Contains((raw).Select(BigInteger.Zero))) && ((new BigInteger((ind).Count)) > (new BigInteger(2)))) {
        _803___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in105 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in106 = (ind).Take((new BigInteger((ind).Count)) - (new BigInteger(2)));
        raw = _in105;
        ind = _in106;
        goto TAIL_CALL_START;
      } else if (((raw).Select(BigInteger.Zero)) == (new Dafny.Rune('\n'))) {
        _803___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)), ind));
        Dafny.ISequence<Dafny.Rune> _in107 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in108 = ind;
        raw = _in107;
        ind = _in108;
        goto TAIL_CALL_START;
      } else {
        _803___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in109 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in110 = ind;
        raw = _in109;
        ind = _in110;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger max(BigInteger i, BigInteger j)
    {
      if ((i) < (j)) {
        return j;
      } else {
        return i;
      }
    }
    public static RAST._IExpr RcNew(RAST._IExpr underlying) {
      return RAST.Expr.create_Call(RAST.__default.std__rc__Rc__new, Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(underlying));
    }
    public static RAST._IType Self { get {
      return RAST.Type.create_Borrowed(RAST.Type.create_SelfOwned());
    } }
    public static RAST._IType SelfMut { get {
      return RAST.Type.create_BorrowedMut(RAST.Type.create_SelfOwned());
    } }
    public static RAST._IType CloneTrait { get {
      return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Clone"));
    } }
    public static RAST._IType DafnyPrintTrait { get {
      return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint"));
    } }
    public static RAST._IType DefaultTrait { get {
      return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default"));
    } }
    public static RAST._IType StaticTrait { get {
      return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'static"));
    } }
    public static Dafny.ISequence<Dafny.Rune> IND { get {
      return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  ");
    } }
    public static RAST._IExpr dafny__runtime { get {
      return RAST.Expr.create_MemberSelect(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dafny_runtime"));
    } }
    public static RAST._IExpr dafny__runtime__Set { get {
      return RAST.Expr.create_MemberSelect(RAST.__default.dafny__runtime, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Set"));
    } }
    public static RAST._IExpr dafny__runtime__Set__from__array { get {
      return RAST.Expr.create_MemberSelect(RAST.__default.dafny__runtime__Set, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array"));
    } }
    public static RAST._IExpr std { get {
      return RAST.Expr.create_MemberSelect(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"));
    } }
    public static RAST._IExpr std__rc { get {
      return RAST.Expr.create_MemberSelect(RAST.__default.std, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rc"));
    } }
    public static RAST._IExpr std__rc__Rc { get {
      return RAST.Expr.create_MemberSelect(RAST.__default.std__rc, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Rc"));
    } }
    public static RAST._IExpr std__rc__Rc__new { get {
      return RAST.Expr.create_MemberSelect(RAST.__default.std__rc__Rc, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"));
    } }
  }

  public interface _IMod {
    bool is_Mod { get; }
    bool is_ExternMod { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._IModDecl> dtor_body { get; }
    _IMod DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class Mod : _IMod {
    public Mod() {
    }
    private static readonly RAST._IMod theDefault = create_Mod(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IModDecl>.Empty);
    public static RAST._IMod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IMod> _TYPE = new Dafny.TypeDescriptor<RAST._IMod>(RAST.Mod.Default());
    public static Dafny.TypeDescriptor<RAST._IMod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMod create_Mod(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IModDecl> body) {
      return new Mod_Mod(name, body);
    }
    public static _IMod create_ExternMod(Dafny.ISequence<Dafny.Rune> name) {
      return new Mod_ExternMod(name);
    }
    public bool is_Mod { get { return this is Mod_Mod; } }
    public bool is_ExternMod { get { return this is Mod_ExternMod; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Mod_Mod) { return ((Mod_Mod)d)._name; }
        return ((Mod_ExternMod)d)._name;
      }
    }
    public Dafny.ISequence<RAST._IModDecl> dtor_body {
      get {
        var d = this;
        return ((Mod_Mod)d)._body;
      }
    }
    public abstract _IMod DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      RAST._IMod _source25 = this;
      if (_source25.is_Mod) {
        Dafny.ISequence<Dafny.Rune> _804___mcc_h0 = _source25.dtor_name;
        Dafny.ISequence<RAST._IModDecl> _805___mcc_h1 = _source25.dtor_body;
        Dafny.ISequence<RAST._IModDecl> _806_body = _805___mcc_h1;
        Dafny.ISequence<Dafny.Rune> _807_name = _804___mcc_h0;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), _807_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), RAST.__default.IND), RAST.__default.SeqToString<RAST._IModDecl>(_806_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IModDecl, Dafny.ISequence<Dafny.Rune>>>>((_808_ind) => ((System.Func<RAST._IModDecl, Dafny.ISequence<Dafny.Rune>>)((_809_modDecl) => {
          return (_809_modDecl)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_808_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else {
        Dafny.ISequence<Dafny.Rune> _810___mcc_h2 = _source25.dtor_name;
        Dafny.ISequence<Dafny.Rune> _811_name = _810___mcc_h2;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), _811_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      }
    }
  }
  public class Mod_Mod : Mod {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._IModDecl> _body;
    public Mod_Mod(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IModDecl> body) : base() {
      this._name = name;
      this._body = body;
    }
    public override _IMod DowncastClone() {
      if (this is _IMod dt) { return dt; }
      return new Mod_Mod(_name, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Mod_Mod;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Mod.Mod";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Mod_ExternMod : Mod {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Mod_ExternMod(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _IMod DowncastClone() {
      if (this is _IMod dt) { return dt; }
      return new Mod_ExternMod(_name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Mod_ExternMod;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Mod.ExternMod";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IModDecl {
    bool is_RawDecl { get; }
    bool is_ModDecl { get; }
    bool is_StructDecl { get; }
    bool is_EnumDecl { get; }
    bool is_ImplDecl { get; }
    bool is_TraitDecl { get; }
    Dafny.ISequence<Dafny.Rune> dtor_body { get; }
    RAST._IMod dtor_mod { get; }
    RAST._IStruct dtor_struct { get; }
    RAST._IEnum dtor_enum { get; }
    RAST._IImpl dtor_impl { get; }
    RAST._ITrait dtor_tr { get; }
    _IModDecl DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class ModDecl : _IModDecl {
    public ModDecl() {
    }
    private static readonly RAST._IModDecl theDefault = create_RawDecl(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IModDecl Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IModDecl> _TYPE = new Dafny.TypeDescriptor<RAST._IModDecl>(RAST.ModDecl.Default());
    public static Dafny.TypeDescriptor<RAST._IModDecl> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModDecl create_RawDecl(Dafny.ISequence<Dafny.Rune> body) {
      return new ModDecl_RawDecl(body);
    }
    public static _IModDecl create_ModDecl(RAST._IMod mod) {
      return new ModDecl_ModDecl(mod);
    }
    public static _IModDecl create_StructDecl(RAST._IStruct @struct) {
      return new ModDecl_StructDecl(@struct);
    }
    public static _IModDecl create_EnumDecl(RAST._IEnum @enum) {
      return new ModDecl_EnumDecl(@enum);
    }
    public static _IModDecl create_ImplDecl(RAST._IImpl impl) {
      return new ModDecl_ImplDecl(impl);
    }
    public static _IModDecl create_TraitDecl(RAST._ITrait tr) {
      return new ModDecl_TraitDecl(tr);
    }
    public bool is_RawDecl { get { return this is ModDecl_RawDecl; } }
    public bool is_ModDecl { get { return this is ModDecl_ModDecl; } }
    public bool is_StructDecl { get { return this is ModDecl_StructDecl; } }
    public bool is_EnumDecl { get { return this is ModDecl_EnumDecl; } }
    public bool is_ImplDecl { get { return this is ModDecl_ImplDecl; } }
    public bool is_TraitDecl { get { return this is ModDecl_TraitDecl; } }
    public Dafny.ISequence<Dafny.Rune> dtor_body {
      get {
        var d = this;
        return ((ModDecl_RawDecl)d)._body;
      }
    }
    public RAST._IMod dtor_mod {
      get {
        var d = this;
        return ((ModDecl_ModDecl)d)._mod;
      }
    }
    public RAST._IStruct dtor_struct {
      get {
        var d = this;
        return ((ModDecl_StructDecl)d)._struct;
      }
    }
    public RAST._IEnum dtor_enum {
      get {
        var d = this;
        return ((ModDecl_EnumDecl)d)._enum;
      }
    }
    public RAST._IImpl dtor_impl {
      get {
        var d = this;
        return ((ModDecl_ImplDecl)d)._impl;
      }
    }
    public RAST._ITrait dtor_tr {
      get {
        var d = this;
        return ((ModDecl_TraitDecl)d)._tr;
      }
    }
    public abstract _IModDecl DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((this).is_ModDecl) {
        return ((this).dtor_mod)._ToString(ind);
      } else if ((this).is_StructDecl) {
        return ((this).dtor_struct)._ToString(ind);
      } else if ((this).is_ImplDecl) {
        return ((this).dtor_impl)._ToString(ind);
      } else if ((this).is_EnumDecl) {
        return ((this).dtor_enum)._ToString(ind);
      } else if ((this).is_TraitDecl) {
        return ((this).dtor_tr)._ToString(ind);
      } else {
        return (this).dtor_body;
      }
    }
  }
  public class ModDecl_RawDecl : ModDecl {
    public readonly Dafny.ISequence<Dafny.Rune> _body;
    public ModDecl_RawDecl(Dafny.ISequence<Dafny.Rune> body) : base() {
      this._body = body;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_RawDecl(_body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_RawDecl;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.RawDecl";
      s += "(";
      s += this._body.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class ModDecl_ModDecl : ModDecl {
    public readonly RAST._IMod _mod;
    public ModDecl_ModDecl(RAST._IMod mod) : base() {
      this._mod = mod;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_ModDecl(_mod);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_ModDecl;
      return oth != null && object.Equals(this._mod, oth._mod);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mod));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.ModDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._mod);
      s += ")";
      return s;
    }
  }
  public class ModDecl_StructDecl : ModDecl {
    public readonly RAST._IStruct _struct;
    public ModDecl_StructDecl(RAST._IStruct @struct) : base() {
      this._struct = @struct;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_StructDecl(_struct);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_StructDecl;
      return oth != null && object.Equals(this._struct, oth._struct);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._struct));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.StructDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._struct);
      s += ")";
      return s;
    }
  }
  public class ModDecl_EnumDecl : ModDecl {
    public readonly RAST._IEnum _enum;
    public ModDecl_EnumDecl(RAST._IEnum @enum) : base() {
      this._enum = @enum;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_EnumDecl(_enum);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_EnumDecl;
      return oth != null && object.Equals(this._enum, oth._enum);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enum));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.EnumDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._enum);
      s += ")";
      return s;
    }
  }
  public class ModDecl_ImplDecl : ModDecl {
    public readonly RAST._IImpl _impl;
    public ModDecl_ImplDecl(RAST._IImpl impl) : base() {
      this._impl = impl;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_ImplDecl(_impl);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_ImplDecl;
      return oth != null && object.Equals(this._impl, oth._impl);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._impl));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.ImplDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._impl);
      s += ")";
      return s;
    }
  }
  public class ModDecl_TraitDecl : ModDecl {
    public readonly RAST._ITrait _tr;
    public ModDecl_TraitDecl(RAST._ITrait tr) : base() {
      this._tr = tr;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_TraitDecl(_tr);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_TraitDecl;
      return oth != null && object.Equals(this._tr, oth._tr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.TraitDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._tr);
      s += ")";
      return s;
    }
  }

  public interface _IAttribute {
    bool is_RawAttribute { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
  }
  public class Attribute : _IAttribute {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Attribute(Dafny.ISequence<Dafny.Rune> content) {
      this._content = content;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Attribute;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Attribute.RawAttribute";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAttribute create(Dafny.ISequence<Dafny.Rune> content) {
      return new Attribute(content);
    }
    public static _IAttribute create_RawAttribute(Dafny.ISequence<Dafny.Rune> content) {
      return create(content);
    }
    public bool is_RawAttribute { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> ToStringMultiple(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> ind)
    {
      return RAST.__default.SeqToString<Dafny.ISequence<Dafny.Rune>>(attributes, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>>>((_812_ind) => ((System.Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>)((_813_attribute) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_813_attribute), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _812_ind);
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
    }
  }

  public interface _IStruct {
    bool is_Struct { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    RAST._IFormals dtor_fields { get; }
    _IStruct DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Struct : _IStruct {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _attributes;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IFormals _fields;
    public Struct(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IFormals fields) {
      this._attributes = attributes;
      this._name = name;
      this._typeParams = typeParams;
      this._fields = fields;
    }
    public _IStruct DowncastClone() {
      if (this is _IStruct dt) { return dt; }
      return new Struct(_attributes, _name, _typeParams, _fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Struct;
      return oth != null && object.Equals(this._attributes, oth._attributes) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Struct.Struct";
      s += "(";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
    private static readonly RAST._IStruct theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._ITypeParam>.Empty, RAST.Formals.Default());
    public static RAST._IStruct Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IStruct> _TYPE = new Dafny.TypeDescriptor<RAST._IStruct>(RAST.Struct.Default());
    public static Dafny.TypeDescriptor<RAST._IStruct> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStruct create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IFormals fields) {
      return new Struct(attributes, name, typeParams, fields);
    }
    public static _IStruct create_Struct(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IFormals fields) {
      return create(attributes, name, typeParams, fields);
    }
    public bool is_Struct { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes {
      get {
        return this._attributes;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public RAST._IFormals dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Attribute.ToStringMultiple((this).dtor_attributes, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub struct ")), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_fields)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND), ((this).dtor_fields).is_NamedFormals)), ((((this).dtor_fields).is_NamelessFormals) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
    }
  }

  public interface _INamelessFormal {
    bool is_NamelessFormal { get; }
    RAST._IVisibility dtor_visibility { get; }
    RAST._IType dtor_tpe { get; }
    _INamelessFormal DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class NamelessFormal : _INamelessFormal {
    public readonly RAST._IVisibility _visibility;
    public readonly RAST._IType _tpe;
    public NamelessFormal(RAST._IVisibility visibility, RAST._IType tpe) {
      this._visibility = visibility;
      this._tpe = tpe;
    }
    public _INamelessFormal DowncastClone() {
      if (this is _INamelessFormal dt) { return dt; }
      return new NamelessFormal(_visibility, _tpe);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.NamelessFormal;
      return oth != null && object.Equals(this._visibility, oth._visibility) && object.Equals(this._tpe, oth._tpe);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._visibility));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.NamelessFormal.NamelessFormal";
      s += "(";
      s += Dafny.Helpers.ToString(this._visibility);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ")";
      return s;
    }
    private static readonly RAST._INamelessFormal theDefault = create(RAST.Visibility.Default(), RAST.Type.Default());
    public static RAST._INamelessFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._INamelessFormal> _TYPE = new Dafny.TypeDescriptor<RAST._INamelessFormal>(RAST.NamelessFormal.Default());
    public static Dafny.TypeDescriptor<RAST._INamelessFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INamelessFormal create(RAST._IVisibility visibility, RAST._IType tpe) {
      return new NamelessFormal(visibility, tpe);
    }
    public static _INamelessFormal create_NamelessFormal(RAST._IVisibility visibility, RAST._IType tpe) {
      return create(visibility, tpe);
    }
    public bool is_NamelessFormal { get { return true; } }
    public RAST._IVisibility dtor_visibility {
      get {
        return this._visibility;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        return this._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(((object.Equals((this).dtor_visibility, RAST.Visibility.create_PUB())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), ((this).dtor_tpe)._ToString(ind));
    }
  }

  public interface _IFormals {
    bool is_NamedFormals { get; }
    bool is_NamelessFormals { get; }
    Dafny.ISequence<RAST._IFormal> dtor_fields { get; }
    Dafny.ISequence<RAST._INamelessFormal> dtor_types { get; }
    _IFormals DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine);
  }
  public abstract class Formals : _IFormals {
    public Formals() {
    }
    private static readonly RAST._IFormals theDefault = create_NamedFormals(Dafny.Sequence<RAST._IFormal>.Empty);
    public static RAST._IFormals Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFormals> _TYPE = new Dafny.TypeDescriptor<RAST._IFormals>(RAST.Formals.Default());
    public static Dafny.TypeDescriptor<RAST._IFormals> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormals create_NamedFormals(Dafny.ISequence<RAST._IFormal> fields) {
      return new Formals_NamedFormals(fields);
    }
    public static _IFormals create_NamelessFormals(Dafny.ISequence<RAST._INamelessFormal> types) {
      return new Formals_NamelessFormals(types);
    }
    public bool is_NamedFormals { get { return this is Formals_NamedFormals; } }
    public bool is_NamelessFormals { get { return this is Formals_NamelessFormals; } }
    public Dafny.ISequence<RAST._IFormal> dtor_fields {
      get {
        var d = this;
        return ((Formals_NamedFormals)d)._fields;
      }
    }
    public Dafny.ISequence<RAST._INamelessFormal> dtor_types {
      get {
        var d = this;
        return ((Formals_NamelessFormals)d)._types;
      }
    }
    public abstract _IFormals DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine)
    {
      if ((this).is_NamedFormals) {
        Dafny.ISequence<Dafny.Rune> _814_separator = ((newLine) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"), ind), RAST.__default.IND)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")));
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs40 = (((newLine) && ((new BigInteger(((this).dtor_fields).Count)).Sign == 1)) ? (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind))) : ((((new BigInteger(((this).dtor_fields).Count)).Sign == 1) ? (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "))) : (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))))));
        Dafny.ISequence<Dafny.Rune> _815_beginSpace = _let_tmp_rhs40.dtor__0;
        Dafny.ISequence<Dafny.Rune> _816_endSpace = _let_tmp_rhs40.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"), _815_beginSpace), RAST.__default.SeqToString<RAST._IFormal>((this).dtor_fields, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>>>((_817_ind) => ((System.Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>)((_818_field) => {
          return (_818_field)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_817_ind, RAST.__default.IND));
        })))(ind), _814_separator)), _816_endSpace), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else {
        Dafny.ISequence<Dafny.Rune> _819_separator = ((newLine) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"), ind), RAST.__default.IND)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")));
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), RAST.__default.SeqToString<RAST._INamelessFormal>((this).dtor_types, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._INamelessFormal, Dafny.ISequence<Dafny.Rune>>>>((_820_ind) => ((System.Func<RAST._INamelessFormal, Dafny.ISequence<Dafny.Rune>>)((_821_t) => {
          return (_821_t)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_820_ind, RAST.__default.IND));
        })))(ind), _819_separator)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
    }
  }
  public class Formals_NamedFormals : Formals {
    public readonly Dafny.ISequence<RAST._IFormal> _fields;
    public Formals_NamedFormals(Dafny.ISequence<RAST._IFormal> fields) : base() {
      this._fields = fields;
    }
    public override _IFormals DowncastClone() {
      if (this is _IFormals dt) { return dt; }
      return new Formals_NamedFormals(_fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formals_NamedFormals;
      return oth != null && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Formals.NamedFormals";
      s += "(";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
  }
  public class Formals_NamelessFormals : Formals {
    public readonly Dafny.ISequence<RAST._INamelessFormal> _types;
    public Formals_NamelessFormals(Dafny.ISequence<RAST._INamelessFormal> types) : base() {
      this._types = types;
    }
    public override _IFormals DowncastClone() {
      if (this is _IFormals dt) { return dt; }
      return new Formals_NamelessFormals(_types);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formals_NamelessFormals;
      return oth != null && object.Equals(this._types, oth._types);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._types));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Formals.NamelessFormals";
      s += "(";
      s += Dafny.Helpers.ToString(this._types);
      s += ")";
      return s;
    }
  }

  public interface _IEnumCase {
    bool is_EnumCase { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IFormals dtor_fields { get; }
    _IEnumCase DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine);
  }
  public class EnumCase : _IEnumCase {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IFormals _fields;
    public EnumCase(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      this._name = name;
      this._fields = fields;
    }
    public _IEnumCase DowncastClone() {
      if (this is _IEnumCase dt) { return dt; }
      return new EnumCase(_name, _fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.EnumCase;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.EnumCase.EnumCase";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
    private static readonly RAST._IEnumCase theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Formals.Default());
    public static RAST._IEnumCase Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IEnumCase> _TYPE = new Dafny.TypeDescriptor<RAST._IEnumCase>(RAST.EnumCase.Default());
    public static Dafny.TypeDescriptor<RAST._IEnumCase> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEnumCase create(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      return new EnumCase(name, fields);
    }
    public static _IEnumCase create_EnumCase(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      return create(name, fields);
    }
    public bool is_EnumCase { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public RAST._IFormals dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine)
    {
      return Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_name, ((this).dtor_fields)._ToString(ind, newLine));
    }
  }

  public interface _IEnum {
    bool is_Enum { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    Dafny.ISequence<RAST._IEnumCase> dtor_variants { get; }
    _IEnum DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Enum : _IEnum {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _attributes;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly Dafny.ISequence<RAST._IEnumCase> _variants;
    public Enum(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      this._attributes = attributes;
      this._name = name;
      this._typeParams = typeParams;
      this._variants = variants;
    }
    public _IEnum DowncastClone() {
      if (this is _IEnum dt) { return dt; }
      return new Enum(_attributes, _name, _typeParams, _variants);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Enum;
      return oth != null && object.Equals(this._attributes, oth._attributes) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._variants, oth._variants);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variants));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Enum.Enum";
      s += "(";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._variants);
      s += ")";
      return s;
    }
    private static readonly RAST._IEnum theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._ITypeParam>.Empty, Dafny.Sequence<RAST._IEnumCase>.Empty);
    public static RAST._IEnum Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IEnum> _TYPE = new Dafny.TypeDescriptor<RAST._IEnum>(RAST.Enum.Default());
    public static Dafny.TypeDescriptor<RAST._IEnum> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEnum create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      return new Enum(attributes, name, typeParams, variants);
    }
    public static _IEnum create_Enum(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      return create(attributes, name, typeParams, variants);
    }
    public bool is_Enum { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes {
      get {
        return this._attributes;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<RAST._IEnumCase> dtor_variants {
      get {
        return this._variants;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Attribute.ToStringMultiple((this).dtor_attributes, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub enum ")), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IEnumCase>((this).dtor_variants, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IEnumCase, Dafny.ISequence<Dafny.Rune>>>>((_822_ind) => ((System.Func<RAST._IEnumCase, Dafny.ISequence<Dafny.Rune>>)((_823_variant) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _822_ind), RAST.__default.IND), (_823_variant)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_822_ind, RAST.__default.IND), false));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }

  public interface _ITypeParam {
    bool is_RawTypeParam { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    Dafny.ISequence<RAST._IType> dtor_constraints { get; }
    _ITypeParam DowncastClone();
    RAST._ITypeParam AddConstraints(Dafny.ISequence<RAST._IType> constraints);
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class TypeParam : _ITypeParam {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public readonly Dafny.ISequence<RAST._IType> _constraints;
    public TypeParam(Dafny.ISequence<Dafny.Rune> content, Dafny.ISequence<RAST._IType> constraints) {
      this._content = content;
      this._constraints = constraints;
    }
    public _ITypeParam DowncastClone() {
      if (this is _ITypeParam dt) { return dt; }
      return new TypeParam(_content, _constraints);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.TypeParam;
      return oth != null && object.Equals(this._content, oth._content) && object.Equals(this._constraints, oth._constraints);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._constraints));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.TypeParam.RawTypeParam";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._constraints);
      s += ")";
      return s;
    }
    private static readonly RAST._ITypeParam theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IType>.Empty);
    public static RAST._ITypeParam Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._ITypeParam> _TYPE = new Dafny.TypeDescriptor<RAST._ITypeParam>(RAST.TypeParam.Default());
    public static Dafny.TypeDescriptor<RAST._ITypeParam> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITypeParam create(Dafny.ISequence<Dafny.Rune> content, Dafny.ISequence<RAST._IType> constraints) {
      return new TypeParam(content, constraints);
    }
    public static _ITypeParam create_RawTypeParam(Dafny.ISequence<Dafny.Rune> content, Dafny.ISequence<RAST._IType> constraints) {
      return create(content, constraints);
    }
    public bool is_RawTypeParam { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public Dafny.ISequence<RAST._IType> dtor_constraints {
      get {
        return this._constraints;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> ToStringMultiple(Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<Dafny.Rune> ind)
    {
      if ((new BigInteger((typeParams).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), RAST.__default.SeqToString<RAST._ITypeParam>(typeParams, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._ITypeParam, Dafny.ISequence<Dafny.Rune>>>>((_824_ind) => ((System.Func<RAST._ITypeParam, Dafny.ISequence<Dafny.Rune>>)((_825_t) => {
          return (_825_t)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_824_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
    }
    public static Dafny.ISequence<RAST._ITypeParam> AddConstraintsMultiple(Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IType> constraints)
    {
      Dafny.ISequence<RAST._ITypeParam> _826___accumulator = Dafny.Sequence<RAST._ITypeParam>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((typeParams).Count)).Sign == 0) {
        return Dafny.Sequence<RAST._ITypeParam>.Concat(_826___accumulator, Dafny.Sequence<RAST._ITypeParam>.FromElements());
      } else {
        _826___accumulator = Dafny.Sequence<RAST._ITypeParam>.Concat(_826___accumulator, Dafny.Sequence<RAST._ITypeParam>.FromElements(((typeParams).Select(BigInteger.Zero)).AddConstraints(constraints)));
        Dafny.ISequence<RAST._ITypeParam> _in111 = (typeParams).Drop(BigInteger.One);
        Dafny.ISequence<RAST._IType> _in112 = constraints;
        typeParams = _in111;
        constraints = _in112;
        goto TAIL_CALL_START;
      }
    }
    public RAST._ITypeParam AddConstraints(Dafny.ISequence<RAST._IType> constraints) {
      RAST._ITypeParam _827_dt__update__tmp_h0 = this;
      Dafny.ISequence<RAST._IType> _828_dt__update_hconstraints_h0 = Dafny.Sequence<RAST._IType>.Concat((this).dtor_constraints, constraints);
      return RAST.TypeParam.create((_827_dt__update__tmp_h0).dtor_content, _828_dt__update_hconstraints_h0);
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_content, (((new BigInteger(((this).dtor_constraints).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": "), RAST.__default.SeqToString<RAST._IType>((this).dtor_constraints, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_829_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_830_t) => {
        return (_830_t)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_829_ind, RAST.__default.IND));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + "))))));
    }
  }

  public interface _IType {
    bool is_SelfOwned { get; }
    bool is_U8 { get; }
    bool is_U16 { get; }
    bool is_U32 { get; }
    bool is_U64 { get; }
    bool is_U128 { get; }
    bool is_I8 { get; }
    bool is_I16 { get; }
    bool is_I32 { get; }
    bool is_I64 { get; }
    bool is_I128 { get; }
    bool is_TypeApp { get; }
    bool is_Borrowed { get; }
    bool is_BorrowedMut { get; }
    bool is_ImplType { get; }
    bool is_DynType { get; }
    bool is_TupleType { get; }
    bool is_FnType { get; }
    bool is_IntersectionType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_baseName { get; }
    Dafny.ISequence<RAST._IType> dtor_arguments { get; }
    RAST._IType dtor_underlying { get; }
    RAST._IType dtor_returnType { get; }
    RAST._IType dtor_left { get; }
    RAST._IType dtor_right { get; }
    _IType DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly RAST._IType theDefault = create_SelfOwned();
    public static RAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IType> _TYPE = new Dafny.TypeDescriptor<RAST._IType>(RAST.Type.Default());
    public static Dafny.TypeDescriptor<RAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_SelfOwned() {
      return new Type_SelfOwned();
    }
    public static _IType create_U8() {
      return new Type_U8();
    }
    public static _IType create_U16() {
      return new Type_U16();
    }
    public static _IType create_U32() {
      return new Type_U32();
    }
    public static _IType create_U64() {
      return new Type_U64();
    }
    public static _IType create_U128() {
      return new Type_U128();
    }
    public static _IType create_I8() {
      return new Type_I8();
    }
    public static _IType create_I16() {
      return new Type_I16();
    }
    public static _IType create_I32() {
      return new Type_I32();
    }
    public static _IType create_I64() {
      return new Type_I64();
    }
    public static _IType create_I128() {
      return new Type_I128();
    }
    public static _IType create_TypeApp(Dafny.ISequence<Dafny.Rune> baseName, Dafny.ISequence<RAST._IType> arguments) {
      return new Type_TypeApp(baseName, arguments);
    }
    public static _IType create_Borrowed(RAST._IType underlying) {
      return new Type_Borrowed(underlying);
    }
    public static _IType create_BorrowedMut(RAST._IType underlying) {
      return new Type_BorrowedMut(underlying);
    }
    public static _IType create_ImplType(RAST._IType underlying) {
      return new Type_ImplType(underlying);
    }
    public static _IType create_DynType(RAST._IType underlying) {
      return new Type_DynType(underlying);
    }
    public static _IType create_TupleType(Dafny.ISequence<RAST._IType> arguments) {
      return new Type_TupleType(arguments);
    }
    public static _IType create_FnType(Dafny.ISequence<RAST._IType> arguments, RAST._IType returnType) {
      return new Type_FnType(arguments, returnType);
    }
    public static _IType create_IntersectionType(RAST._IType left, RAST._IType right) {
      return new Type_IntersectionType(left, right);
    }
    public bool is_SelfOwned { get { return this is Type_SelfOwned; } }
    public bool is_U8 { get { return this is Type_U8; } }
    public bool is_U16 { get { return this is Type_U16; } }
    public bool is_U32 { get { return this is Type_U32; } }
    public bool is_U64 { get { return this is Type_U64; } }
    public bool is_U128 { get { return this is Type_U128; } }
    public bool is_I8 { get { return this is Type_I8; } }
    public bool is_I16 { get { return this is Type_I16; } }
    public bool is_I32 { get { return this is Type_I32; } }
    public bool is_I64 { get { return this is Type_I64; } }
    public bool is_I128 { get { return this is Type_I128; } }
    public bool is_TypeApp { get { return this is Type_TypeApp; } }
    public bool is_Borrowed { get { return this is Type_Borrowed; } }
    public bool is_BorrowedMut { get { return this is Type_BorrowedMut; } }
    public bool is_ImplType { get { return this is Type_ImplType; } }
    public bool is_DynType { get { return this is Type_DynType; } }
    public bool is_TupleType { get { return this is Type_TupleType; } }
    public bool is_FnType { get { return this is Type_FnType; } }
    public bool is_IntersectionType { get { return this is Type_IntersectionType; } }
    public Dafny.ISequence<Dafny.Rune> dtor_baseName {
      get {
        var d = this;
        return ((Type_TypeApp)d)._baseName;
      }
    }
    public Dafny.ISequence<RAST._IType> dtor_arguments {
      get {
        var d = this;
        if (d is Type_TypeApp) { return ((Type_TypeApp)d)._arguments; }
        if (d is Type_TupleType) { return ((Type_TupleType)d)._arguments; }
        return ((Type_FnType)d)._arguments;
      }
    }
    public RAST._IType dtor_underlying {
      get {
        var d = this;
        if (d is Type_Borrowed) { return ((Type_Borrowed)d)._underlying; }
        if (d is Type_BorrowedMut) { return ((Type_BorrowedMut)d)._underlying; }
        if (d is Type_ImplType) { return ((Type_ImplType)d)._underlying; }
        return ((Type_DynType)d)._underlying;
      }
    }
    public RAST._IType dtor_returnType {
      get {
        var d = this;
        return ((Type_FnType)d)._returnType;
      }
    }
    public RAST._IType dtor_left {
      get {
        var d = this;
        return ((Type_IntersectionType)d)._left;
      }
    }
    public RAST._IType dtor_right {
      get {
        var d = this;
        return ((Type_IntersectionType)d)._right;
      }
    }
    public abstract _IType DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      RAST._IType _source26 = this;
      if (_source26.is_SelfOwned) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
      } else if (_source26.is_U8) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u8");
      } else if (_source26.is_U16) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u16");
      } else if (_source26.is_U32) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u32");
      } else if (_source26.is_U64) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u64");
      } else if (_source26.is_U128) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u128");
      } else if (_source26.is_I8) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i8");
      } else if (_source26.is_I16) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i16");
      } else if (_source26.is_I32) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i32");
      } else if (_source26.is_I64) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i64");
      } else if (_source26.is_I128) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i128");
      } else if (_source26.is_TypeApp) {
        Dafny.ISequence<Dafny.Rune> _831___mcc_h0 = _source26.dtor_baseName;
        Dafny.ISequence<RAST._IType> _832___mcc_h1 = _source26.dtor_arguments;
        Dafny.ISequence<RAST._IType> _833_args = _832___mcc_h1;
        Dafny.ISequence<Dafny.Rune> _834_base = _831___mcc_h0;
        return Dafny.Sequence<Dafny.Rune>.Concat(_834_base, (((_833_args).Equals(Dafny.Sequence<RAST._IType>.FromElements())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), RAST.__default.SeqToString<RAST._IType>(_833_args, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_835_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_836_arg) => {
          return (_836_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_835_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")))));
      } else if (_source26.is_Borrowed) {
        RAST._IType _837___mcc_h2 = _source26.dtor_underlying;
        RAST._IType _838_underlying = _837___mcc_h2;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), (_838_underlying)._ToString(ind));
      } else if (_source26.is_BorrowedMut) {
        RAST._IType _839___mcc_h3 = _source26.dtor_underlying;
        RAST._IType _840_underlying = _839___mcc_h3;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut "), (_840_underlying)._ToString(ind));
      } else if (_source26.is_ImplType) {
        RAST._IType _841___mcc_h4 = _source26.dtor_underlying;
        RAST._IType _842_underlying = _841___mcc_h4;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), (_842_underlying)._ToString(ind));
      } else if (_source26.is_DynType) {
        RAST._IType _843___mcc_h5 = _source26.dtor_underlying;
        RAST._IType _844_underlying = _843___mcc_h5;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn "), (_844_underlying)._ToString(ind));
      } else if (_source26.is_TupleType) {
        Dafny.ISequence<RAST._IType> _845___mcc_h6 = _source26.dtor_arguments;
        Dafny.ISequence<RAST._IType> _846_args = _845___mcc_h6;
        if ((_846_args).Equals(Dafny.Sequence<RAST._IType>.FromElements())) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()");
        } else {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), RAST.__default.SeqToString<RAST._IType>(_846_args, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_847_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_848_arg) => {
            return (_848_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_847_ind, RAST.__default.IND));
          })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
        }
      } else if (_source26.is_FnType) {
        Dafny.ISequence<RAST._IType> _849___mcc_h7 = _source26.dtor_arguments;
        RAST._IType _850___mcc_h8 = _source26.dtor_returnType;
        RAST._IType _851_returnType = _850___mcc_h8;
        Dafny.ISequence<RAST._IType> _852_arguments = _849___mcc_h7;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Fn("), RAST.__default.SeqToString<RAST._IType>(_852_arguments, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_853_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_854_arg) => {
          return (_854_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_853_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), (_851_returnType)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)));
      } else {
        RAST._IType _855___mcc_h9 = _source26.dtor_left;
        RAST._IType _856___mcc_h10 = _source26.dtor_right;
        RAST._IType _857_right = _856___mcc_h10;
        RAST._IType _858_left = _855___mcc_h9;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_858_left)._ToString(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + ")), (_857_right)._ToString(ind));
      }
    }
  }
  public class Type_SelfOwned : Type {
    public Type_SelfOwned() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_SelfOwned();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_SelfOwned;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.SelfOwned";
      return s;
    }
  }
  public class Type_U8 : Type {
    public Type_U8() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U8();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U8";
      return s;
    }
  }
  public class Type_U16 : Type {
    public Type_U16() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U16();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U16";
      return s;
    }
  }
  public class Type_U32 : Type {
    public Type_U32() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U32();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U32";
      return s;
    }
  }
  public class Type_U64 : Type {
    public Type_U64() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U64();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U64";
      return s;
    }
  }
  public class Type_U128 : Type {
    public Type_U128() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U128();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U128";
      return s;
    }
  }
  public class Type_I8 : Type {
    public Type_I8() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I8();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I8";
      return s;
    }
  }
  public class Type_I16 : Type {
    public Type_I16() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I16();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I16";
      return s;
    }
  }
  public class Type_I32 : Type {
    public Type_I32() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I32();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I32";
      return s;
    }
  }
  public class Type_I64 : Type {
    public Type_I64() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I64();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I64";
      return s;
    }
  }
  public class Type_I128 : Type {
    public Type_I128() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I128();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I128";
      return s;
    }
  }
  public class Type_TypeApp : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _baseName;
    public readonly Dafny.ISequence<RAST._IType> _arguments;
    public Type_TypeApp(Dafny.ISequence<Dafny.Rune> baseName, Dafny.ISequence<RAST._IType> arguments) : base() {
      this._baseName = baseName;
      this._arguments = arguments;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeApp(_baseName, _arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_TypeApp;
      return oth != null && object.Equals(this._baseName, oth._baseName) && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._baseName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.TypeApp";
      s += "(";
      s += this._baseName.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Type_Borrowed : Type {
    public readonly RAST._IType _underlying;
    public Type_Borrowed(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Borrowed(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_Borrowed;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.Borrowed";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_BorrowedMut : Type {
    public readonly RAST._IType _underlying;
    public Type_BorrowedMut(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_BorrowedMut(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_BorrowedMut;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.BorrowedMut";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_ImplType : Type {
    public readonly RAST._IType _underlying;
    public Type_ImplType(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_ImplType(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_ImplType;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.ImplType";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_DynType : Type {
    public readonly RAST._IType _underlying;
    public Type_DynType(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_DynType(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_DynType;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.DynType";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_TupleType : Type {
    public readonly Dafny.ISequence<RAST._IType> _arguments;
    public Type_TupleType(Dafny.ISequence<RAST._IType> arguments) : base() {
      this._arguments = arguments;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TupleType(_arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_TupleType;
      return oth != null && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.TupleType";
      s += "(";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Type_FnType : Type {
    public readonly Dafny.ISequence<RAST._IType> _arguments;
    public readonly RAST._IType _returnType;
    public Type_FnType(Dafny.ISequence<RAST._IType> arguments, RAST._IType returnType) : base() {
      this._arguments = arguments;
      this._returnType = returnType;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_FnType(_arguments, _returnType);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_FnType;
      return oth != null && object.Equals(this._arguments, oth._arguments) && object.Equals(this._returnType, oth._returnType);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._returnType));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.FnType";
      s += "(";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ", ";
      s += Dafny.Helpers.ToString(this._returnType);
      s += ")";
      return s;
    }
  }
  public class Type_IntersectionType : Type {
    public readonly RAST._IType _left;
    public readonly RAST._IType _right;
    public Type_IntersectionType(RAST._IType left, RAST._IType right) : base() {
      this._left = left;
      this._right = right;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_IntersectionType(_left, _right);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_IntersectionType;
      return oth != null && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.IntersectionType";
      s += "(";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ")";
      return s;
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    RAST._IType dtor_tpe { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Dafny.ISequence<RAST._IImplMember> dtor_body { get; }
    _ITrait DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Trait(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._where = @where;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_typeParams, _tpe, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Trait;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Trait.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly RAST._ITrait theDefault = create(Dafny.Sequence<RAST._ITypeParam>.Empty, RAST.Type.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IImplMember>.Empty);
    public static RAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._ITrait> _TYPE = new Dafny.TypeDescriptor<RAST._ITrait>(RAST.Trait.Default());
    public static Dafny.TypeDescriptor<RAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Trait(typeParams, tpe, @where, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return create(typeParams, tpe, @where, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        return this._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        return this._where;
      }
    }
    public Dafny.ISequence<RAST._IImplMember> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("trait "), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_tpe)._ToString(ind)), ((!((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IImplMember>((this).dtor_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>>>((_859_ind) => ((System.Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>)((_860_member) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _859_ind), RAST.__default.IND), (_860_member)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_859_ind, RAST.__default.IND)));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), (((new BigInteger(((this).dtor_body).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }

  public interface _IImpl {
    bool is_ImplFor { get; }
    bool is_Impl { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    RAST._IType dtor_tpe { get; }
    RAST._IType dtor_forType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Dafny.ISequence<RAST._IImplMember> dtor_body { get; }
    _IImpl DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class Impl : _IImpl {
    public Impl() {
    }
    private static readonly RAST._IImpl theDefault = create_ImplFor(Dafny.Sequence<RAST._ITypeParam>.Empty, RAST.Type.Default(), RAST.Type.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IImplMember>.Empty);
    public static RAST._IImpl Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IImpl> _TYPE = new Dafny.TypeDescriptor<RAST._IImpl>(RAST.Impl.Default());
    public static Dafny.TypeDescriptor<RAST._IImpl> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IImpl create_ImplFor(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, RAST._IType forType, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Impl_ImplFor(typeParams, tpe, forType, @where, body);
    }
    public static _IImpl create_Impl(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Impl_Impl(typeParams, tpe, @where, body);
    }
    public bool is_ImplFor { get { return this is Impl_ImplFor; } }
    public bool is_Impl { get { return this is Impl_Impl; } }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._typeParams; }
        return ((Impl_Impl)d)._typeParams;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._tpe; }
        return ((Impl_Impl)d)._tpe;
      }
    }
    public RAST._IType dtor_forType {
      get {
        var d = this;
        return ((Impl_ImplFor)d)._forType;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._where; }
        return ((Impl_Impl)d)._where;
      }
    }
    public Dafny.ISequence<RAST._IImplMember> dtor_body {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._body; }
        return ((Impl_Impl)d)._body;
      }
    }
    public abstract _IImpl DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_tpe)._ToString(ind)), (((this).is_ImplFor) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" for "), ((this).dtor_forType)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), ((!((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IImplMember>((this).dtor_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>>>((_861_ind) => ((System.Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>)((_862_member) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _861_ind), RAST.__default.IND), (_862_member)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_861_ind, RAST.__default.IND)));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), (((new BigInteger(((this).dtor_body).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }
  public class Impl_ImplFor : Impl {
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly RAST._IType _forType;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Impl_ImplFor(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, RAST._IType forType, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) : base() {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._forType = forType;
      this._where = @where;
      this._body = body;
    }
    public override _IImpl DowncastClone() {
      if (this is _IImpl dt) { return dt; }
      return new Impl_ImplFor(_typeParams, _tpe, _forType, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Impl_ImplFor;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._forType, oth._forType) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._forType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Impl.ImplFor";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += Dafny.Helpers.ToString(this._forType);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Impl_Impl : Impl {
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Impl_Impl(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) : base() {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._where = @where;
      this._body = body;
    }
    public override _IImpl DowncastClone() {
      if (this is _IImpl dt) { return dt; }
      return new Impl_Impl(_typeParams, _tpe, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Impl_Impl;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Impl.Impl";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }

  public interface _IImplMember {
    bool is_RawImplMember { get; }
    bool is_FnDecl { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    RAST._IVisibility dtor_pub { get; }
    RAST._IFn dtor_fun { get; }
    _IImplMember DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class ImplMember : _IImplMember {
    public ImplMember() {
    }
    private static readonly RAST._IImplMember theDefault = create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IImplMember Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IImplMember> _TYPE = new Dafny.TypeDescriptor<RAST._IImplMember>(RAST.ImplMember.Default());
    public static Dafny.TypeDescriptor<RAST._IImplMember> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IImplMember create_RawImplMember(Dafny.ISequence<Dafny.Rune> content) {
      return new ImplMember_RawImplMember(content);
    }
    public static _IImplMember create_FnDecl(RAST._IVisibility pub, RAST._IFn fun) {
      return new ImplMember_FnDecl(pub, fun);
    }
    public bool is_RawImplMember { get { return this is ImplMember_RawImplMember; } }
    public bool is_FnDecl { get { return this is ImplMember_FnDecl; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        var d = this;
        return ((ImplMember_RawImplMember)d)._content;
      }
    }
    public RAST._IVisibility dtor_pub {
      get {
        var d = this;
        return ((ImplMember_FnDecl)d)._pub;
      }
    }
    public RAST._IFn dtor_fun {
      get {
        var d = this;
        return ((ImplMember_FnDecl)d)._fun;
      }
    }
    public abstract _IImplMember DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((this).is_FnDecl) {
        return Dafny.Sequence<Dafny.Rune>.Concat(((object.Equals((this).dtor_pub, RAST.Visibility.create_PUB())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), ((this).dtor_fun)._ToString(ind));
      } else {
        return (this).dtor_content;
      }
    }
  }
  public class ImplMember_RawImplMember : ImplMember {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public ImplMember_RawImplMember(Dafny.ISequence<Dafny.Rune> content) : base() {
      this._content = content;
    }
    public override _IImplMember DowncastClone() {
      if (this is _IImplMember dt) { return dt; }
      return new ImplMember_RawImplMember(_content);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ImplMember_RawImplMember;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ImplMember.RawImplMember";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class ImplMember_FnDecl : ImplMember {
    public readonly RAST._IVisibility _pub;
    public readonly RAST._IFn _fun;
    public ImplMember_FnDecl(RAST._IVisibility pub, RAST._IFn fun) : base() {
      this._pub = pub;
      this._fun = fun;
    }
    public override _IImplMember DowncastClone() {
      if (this is _IImplMember dt) { return dt; }
      return new ImplMember_FnDecl(_pub, _fun);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ImplMember_FnDecl;
      return oth != null && object.Equals(this._pub, oth._pub) && object.Equals(this._fun, oth._fun);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pub));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fun));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ImplMember.FnDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._pub);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fun);
      s += ")";
      return s;
    }
  }

  public interface _IVisibility {
    bool is_PUB { get; }
    bool is_PRIV { get; }
    _IVisibility DowncastClone();
  }
  public abstract class Visibility : _IVisibility {
    public Visibility() {
    }
    private static readonly RAST._IVisibility theDefault = create_PUB();
    public static RAST._IVisibility Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IVisibility> _TYPE = new Dafny.TypeDescriptor<RAST._IVisibility>(RAST.Visibility.Default());
    public static Dafny.TypeDescriptor<RAST._IVisibility> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IVisibility create_PUB() {
      return new Visibility_PUB();
    }
    public static _IVisibility create_PRIV() {
      return new Visibility_PRIV();
    }
    public bool is_PUB { get { return this is Visibility_PUB; } }
    public bool is_PRIV { get { return this is Visibility_PRIV; } }
    public static System.Collections.Generic.IEnumerable<_IVisibility> AllSingletonConstructors {
      get {
        yield return Visibility.create_PUB();
        yield return Visibility.create_PRIV();
      }
    }
    public abstract _IVisibility DowncastClone();
  }
  public class Visibility_PUB : Visibility {
    public Visibility_PUB() : base() {
    }
    public override _IVisibility DowncastClone() {
      if (this is _IVisibility dt) { return dt; }
      return new Visibility_PUB();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Visibility_PUB;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Visibility.PUB";
      return s;
    }
  }
  public class Visibility_PRIV : Visibility {
    public Visibility_PRIV() : base() {
    }
    public override _IVisibility DowncastClone() {
      if (this is _IVisibility dt) { return dt; }
      return new Visibility_PRIV();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Visibility_PRIV;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Visibility.PRIV";
      return s;
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IType dtor_tpe { get; }
    _IFormal DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IType _tpe;
    public Formal(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      this._name = name;
      this._tpe = tpe;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _tpe);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._tpe, oth._tpe);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ")";
      return s;
    }
    private static readonly RAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Type.Default());
    public static RAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFormal> _TYPE = new Dafny.TypeDescriptor<RAST._IFormal>(RAST.Formal.Default());
    public static Dafny.TypeDescriptor<RAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      return new Formal(name, tpe);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      return create(name, tpe);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        return this._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) && (((this).dtor_tpe).is_SelfOwned)) {
        return (this).dtor_name;
      } else if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"))) && (object.Equals((this).dtor_tpe, RAST.Type.create_Borrowed(RAST.Type.create_SelfOwned())))) {
        return (this).dtor_name;
      } else if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut self"))) && (object.Equals((this).dtor_tpe, RAST.Type.create_Borrowed(RAST.__default.SelfMut)))) {
        return (this).dtor_name;
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_name, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), ((this).dtor_tpe)._ToString(ind));
      }
    }
    public static RAST._IFormal self { get {
      return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"), RAST.__default.Self);
    } }
    public static RAST._IFormal selfOwned { get {
      return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), RAST.Type.create_SelfOwned());
    } }
    public static RAST._IFormal selfMut { get {
      return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut self"), RAST.__default.SelfMut);
    } }
  }

  public interface _IPattern {
    bool is_RawPattern { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
  }
  public class Pattern : _IPattern {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Pattern(Dafny.ISequence<Dafny.Rune> content) {
      this._content = content;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Pattern;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Pattern.RawPattern";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPattern create(Dafny.ISequence<Dafny.Rune> content) {
      return new Pattern(content);
    }
    public static _IPattern create_RawPattern(Dafny.ISequence<Dafny.Rune> content) {
      return create(content);
    }
    public bool is_RawPattern { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> _this, Dafny.ISequence<Dafny.Rune> ind) {
      return (_this);
    }
  }

  public interface _IMatchCase {
    bool is_MatchCase { get; }
    Dafny.ISequence<Dafny.Rune> dtor_pattern { get; }
    RAST._IExpr dtor_rhs { get; }
    _IMatchCase DowncastClone();
    BigInteger Height();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class MatchCase : _IMatchCase {
    public readonly Dafny.ISequence<Dafny.Rune> _pattern;
    public readonly RAST._IExpr _rhs;
    public MatchCase(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      this._pattern = pattern;
      this._rhs = rhs;
    }
    public _IMatchCase DowncastClone() {
      if (this is _IMatchCase dt) { return dt; }
      return new MatchCase(_pattern, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.MatchCase;
      return oth != null && object.Equals(this._pattern, oth._pattern) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pattern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.MatchCase.MatchCase";
      s += "(";
      s += Dafny.Helpers.ToString(this._pattern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
    private static readonly RAST._IMatchCase theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Expr.Default());
    public static RAST._IMatchCase Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IMatchCase> _TYPE = new Dafny.TypeDescriptor<RAST._IMatchCase>(RAST.MatchCase.Default());
    public static Dafny.TypeDescriptor<RAST._IMatchCase> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMatchCase create(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      return new MatchCase(pattern, rhs);
    }
    public static _IMatchCase create_MatchCase(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      return create(pattern, rhs);
    }
    public bool is_MatchCase { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_pattern {
      get {
        return this._pattern;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        return this._rhs;
      }
    }
    public BigInteger Height() {
      return (BigInteger.One) + (((this).dtor_rhs).Height());
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      Dafny.ISequence<Dafny.Rune> _863_newIndent = ((((this).dtor_rhs).is_Block) ? (ind) : (Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)));
      Dafny.ISequence<Dafny.Rune> _864_rhsString = ((this).dtor_rhs)._ToString(_863_newIndent);
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Pattern._ToString((this).dtor_pattern, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" =>")), ((((_864_rhsString).Contains(new Dafny.Rune('\n'))) && (((_864_rhsString).Select(BigInteger.Zero)) != (new Dafny.Rune('{')))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), _864_rhsString)) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), _864_rhsString))));
    }
  }

  public interface _IAssignIdentifier {
    bool is_AssignIdentifier { get; }
    Dafny.ISequence<Dafny.Rune> dtor_identifier { get; }
    RAST._IExpr dtor_rhs { get; }
    _IAssignIdentifier DowncastClone();
    BigInteger Height();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class AssignIdentifier : _IAssignIdentifier {
    public readonly Dafny.ISequence<Dafny.Rune> _identifier;
    public readonly RAST._IExpr _rhs;
    public AssignIdentifier(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      this._identifier = identifier;
      this._rhs = rhs;
    }
    public _IAssignIdentifier DowncastClone() {
      if (this is _IAssignIdentifier dt) { return dt; }
      return new AssignIdentifier(_identifier, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.AssignIdentifier;
      return oth != null && object.Equals(this._identifier, oth._identifier) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._identifier));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.AssignIdentifier.AssignIdentifier";
      s += "(";
      s += this._identifier.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
    private static readonly RAST._IAssignIdentifier theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Expr.Default());
    public static RAST._IAssignIdentifier Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IAssignIdentifier> _TYPE = new Dafny.TypeDescriptor<RAST._IAssignIdentifier>(RAST.AssignIdentifier.Default());
    public static Dafny.TypeDescriptor<RAST._IAssignIdentifier> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignIdentifier create(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      return new AssignIdentifier(identifier, rhs);
    }
    public static _IAssignIdentifier create_AssignIdentifier(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      return create(identifier, rhs);
    }
    public bool is_AssignIdentifier { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_identifier {
      get {
        return this._identifier;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        return this._rhs;
      }
    }
    public BigInteger Height() {
      return (BigInteger.One) + (((this).dtor_rhs).Height());
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_identifier, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), ((this).dtor_rhs)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)));
    }
  }

  public interface _IDeclareType {
    bool is_MUT { get; }
    bool is_CONST { get; }
    _IDeclareType DowncastClone();
  }
  public abstract class DeclareType : _IDeclareType {
    public DeclareType() {
    }
    private static readonly RAST._IDeclareType theDefault = create_MUT();
    public static RAST._IDeclareType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IDeclareType> _TYPE = new Dafny.TypeDescriptor<RAST._IDeclareType>(RAST.DeclareType.Default());
    public static Dafny.TypeDescriptor<RAST._IDeclareType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDeclareType create_MUT() {
      return new DeclareType_MUT();
    }
    public static _IDeclareType create_CONST() {
      return new DeclareType_CONST();
    }
    public bool is_MUT { get { return this is DeclareType_MUT; } }
    public bool is_CONST { get { return this is DeclareType_CONST; } }
    public static System.Collections.Generic.IEnumerable<_IDeclareType> AllSingletonConstructors {
      get {
        yield return DeclareType.create_MUT();
        yield return DeclareType.create_CONST();
      }
    }
    public abstract _IDeclareType DowncastClone();
  }
  public class DeclareType_MUT : DeclareType {
    public DeclareType_MUT() : base() {
    }
    public override _IDeclareType DowncastClone() {
      if (this is _IDeclareType dt) { return dt; }
      return new DeclareType_MUT();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.DeclareType_MUT;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.DeclareType.MUT";
      return s;
    }
  }
  public class DeclareType_CONST : DeclareType {
    public DeclareType_CONST() : base() {
    }
    public override _IDeclareType DowncastClone() {
      if (this is _IDeclareType dt) { return dt; }
      return new DeclareType_CONST();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.DeclareType_CONST;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.DeclareType.CONST";
      return s;
    }
  }

  public interface _IAssociativity {
    bool is_LeftToRight { get; }
    bool is_RightToLeft { get; }
    bool is_RequiresParentheses { get; }
    _IAssociativity DowncastClone();
  }
  public abstract class Associativity : _IAssociativity {
    public Associativity() {
    }
    private static readonly RAST._IAssociativity theDefault = create_LeftToRight();
    public static RAST._IAssociativity Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IAssociativity> _TYPE = new Dafny.TypeDescriptor<RAST._IAssociativity>(RAST.Associativity.Default());
    public static Dafny.TypeDescriptor<RAST._IAssociativity> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssociativity create_LeftToRight() {
      return new Associativity_LeftToRight();
    }
    public static _IAssociativity create_RightToLeft() {
      return new Associativity_RightToLeft();
    }
    public static _IAssociativity create_RequiresParentheses() {
      return new Associativity_RequiresParentheses();
    }
    public bool is_LeftToRight { get { return this is Associativity_LeftToRight; } }
    public bool is_RightToLeft { get { return this is Associativity_RightToLeft; } }
    public bool is_RequiresParentheses { get { return this is Associativity_RequiresParentheses; } }
    public static System.Collections.Generic.IEnumerable<_IAssociativity> AllSingletonConstructors {
      get {
        yield return Associativity.create_LeftToRight();
        yield return Associativity.create_RightToLeft();
        yield return Associativity.create_RequiresParentheses();
      }
    }
    public abstract _IAssociativity DowncastClone();
  }
  public class Associativity_LeftToRight : Associativity {
    public Associativity_LeftToRight() : base() {
    }
    public override _IAssociativity DowncastClone() {
      if (this is _IAssociativity dt) { return dt; }
      return new Associativity_LeftToRight();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Associativity_LeftToRight;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Associativity.LeftToRight";
      return s;
    }
  }
  public class Associativity_RightToLeft : Associativity {
    public Associativity_RightToLeft() : base() {
    }
    public override _IAssociativity DowncastClone() {
      if (this is _IAssociativity dt) { return dt; }
      return new Associativity_RightToLeft();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Associativity_RightToLeft;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Associativity.RightToLeft";
      return s;
    }
  }
  public class Associativity_RequiresParentheses : Associativity {
    public Associativity_RequiresParentheses() : base() {
    }
    public override _IAssociativity DowncastClone() {
      if (this is _IAssociativity dt) { return dt; }
      return new Associativity_RequiresParentheses();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Associativity_RequiresParentheses;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Associativity.RequiresParentheses";
      return s;
    }
  }

  public interface _IPrintingInfo {
    bool is_UnknownPrecedence { get; }
    bool is_Precedence { get; }
    bool is_SuffixPrecedence { get; }
    bool is_PrecedenceAssociativity { get; }
    BigInteger dtor_precedence { get; }
    RAST._IAssociativity dtor_associativity { get; }
    _IPrintingInfo DowncastClone();
    bool NeedParenthesesFor(RAST._IPrintingInfo underlying);
    bool NeedParenthesesForLeft(RAST._IPrintingInfo underlying);
    bool NeedParenthesesForRight(RAST._IPrintingInfo underlying);
  }
  public abstract class PrintingInfo : _IPrintingInfo {
    public PrintingInfo() {
    }
    private static readonly RAST._IPrintingInfo theDefault = create_UnknownPrecedence();
    public static RAST._IPrintingInfo Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IPrintingInfo> _TYPE = new Dafny.TypeDescriptor<RAST._IPrintingInfo>(RAST.PrintingInfo.Default());
    public static Dafny.TypeDescriptor<RAST._IPrintingInfo> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrintingInfo create_UnknownPrecedence() {
      return new PrintingInfo_UnknownPrecedence();
    }
    public static _IPrintingInfo create_Precedence(BigInteger precedence) {
      return new PrintingInfo_Precedence(precedence);
    }
    public static _IPrintingInfo create_SuffixPrecedence(BigInteger precedence) {
      return new PrintingInfo_SuffixPrecedence(precedence);
    }
    public static _IPrintingInfo create_PrecedenceAssociativity(BigInteger precedence, RAST._IAssociativity associativity) {
      return new PrintingInfo_PrecedenceAssociativity(precedence, associativity);
    }
    public bool is_UnknownPrecedence { get { return this is PrintingInfo_UnknownPrecedence; } }
    public bool is_Precedence { get { return this is PrintingInfo_Precedence; } }
    public bool is_SuffixPrecedence { get { return this is PrintingInfo_SuffixPrecedence; } }
    public bool is_PrecedenceAssociativity { get { return this is PrintingInfo_PrecedenceAssociativity; } }
    public BigInteger dtor_precedence {
      get {
        var d = this;
        if (d is PrintingInfo_Precedence) { return ((PrintingInfo_Precedence)d)._precedence; }
        if (d is PrintingInfo_SuffixPrecedence) { return ((PrintingInfo_SuffixPrecedence)d)._precedence; }
        return ((PrintingInfo_PrecedenceAssociativity)d)._precedence;
      }
    }
    public RAST._IAssociativity dtor_associativity {
      get {
        var d = this;
        return ((PrintingInfo_PrecedenceAssociativity)d)._associativity;
      }
    }
    public abstract _IPrintingInfo DowncastClone();
    public bool NeedParenthesesFor(RAST._IPrintingInfo underlying) {
      if ((this).is_UnknownPrecedence) {
        return true;
      } else if ((underlying).is_UnknownPrecedence) {
        return true;
      } else if (((this).dtor_precedence) <= ((underlying).dtor_precedence)) {
        return true;
      } else {
        return false;
      }
    }
    public bool NeedParenthesesForLeft(RAST._IPrintingInfo underlying) {
      if ((this).is_UnknownPrecedence) {
        return true;
      } else if ((underlying).is_UnknownPrecedence) {
        return true;
      } else if (((this).dtor_precedence) <= ((underlying).dtor_precedence)) {
        return ((((this).dtor_precedence) < ((underlying).dtor_precedence)) || (!((this).is_PrecedenceAssociativity))) || (!(((this).dtor_associativity).is_LeftToRight));
      } else {
        return false;
      }
    }
    public bool NeedParenthesesForRight(RAST._IPrintingInfo underlying) {
      if ((this).is_UnknownPrecedence) {
        return true;
      } else if ((underlying).is_UnknownPrecedence) {
        return true;
      } else if (((this).dtor_precedence) <= ((underlying).dtor_precedence)) {
        return ((((this).dtor_precedence) < ((underlying).dtor_precedence)) || (!((this).is_PrecedenceAssociativity))) || (!(((this).dtor_associativity).is_RightToLeft));
      } else {
        return false;
      }
    }
  }
  public class PrintingInfo_UnknownPrecedence : PrintingInfo {
    public PrintingInfo_UnknownPrecedence() : base() {
    }
    public override _IPrintingInfo DowncastClone() {
      if (this is _IPrintingInfo dt) { return dt; }
      return new PrintingInfo_UnknownPrecedence();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.PrintingInfo_UnknownPrecedence;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.PrintingInfo.UnknownPrecedence";
      return s;
    }
  }
  public class PrintingInfo_Precedence : PrintingInfo {
    public readonly BigInteger _precedence;
    public PrintingInfo_Precedence(BigInteger precedence) : base() {
      this._precedence = precedence;
    }
    public override _IPrintingInfo DowncastClone() {
      if (this is _IPrintingInfo dt) { return dt; }
      return new PrintingInfo_Precedence(_precedence);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.PrintingInfo_Precedence;
      return oth != null && this._precedence == oth._precedence;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._precedence));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.PrintingInfo.Precedence";
      s += "(";
      s += Dafny.Helpers.ToString(this._precedence);
      s += ")";
      return s;
    }
  }
  public class PrintingInfo_SuffixPrecedence : PrintingInfo {
    public readonly BigInteger _precedence;
    public PrintingInfo_SuffixPrecedence(BigInteger precedence) : base() {
      this._precedence = precedence;
    }
    public override _IPrintingInfo DowncastClone() {
      if (this is _IPrintingInfo dt) { return dt; }
      return new PrintingInfo_SuffixPrecedence(_precedence);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.PrintingInfo_SuffixPrecedence;
      return oth != null && this._precedence == oth._precedence;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._precedence));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.PrintingInfo.SuffixPrecedence";
      s += "(";
      s += Dafny.Helpers.ToString(this._precedence);
      s += ")";
      return s;
    }
  }
  public class PrintingInfo_PrecedenceAssociativity : PrintingInfo {
    public readonly BigInteger _precedence;
    public readonly RAST._IAssociativity _associativity;
    public PrintingInfo_PrecedenceAssociativity(BigInteger precedence, RAST._IAssociativity associativity) : base() {
      this._precedence = precedence;
      this._associativity = associativity;
    }
    public override _IPrintingInfo DowncastClone() {
      if (this is _IPrintingInfo dt) { return dt; }
      return new PrintingInfo_PrecedenceAssociativity(_precedence, _associativity);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.PrintingInfo_PrecedenceAssociativity;
      return oth != null && this._precedence == oth._precedence && object.Equals(this._associativity, oth._associativity);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._precedence));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._associativity));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.PrintingInfo.PrecedenceAssociativity";
      s += "(";
      s += Dafny.Helpers.ToString(this._precedence);
      s += ", ";
      s += Dafny.Helpers.ToString(this._associativity);
      s += ")";
      return s;
    }
  }

  public interface _IExpr {
    bool is_RawExpr { get; }
    bool is_Identifier { get; }
    bool is_Match { get; }
    bool is_StmtExpr { get; }
    bool is_Block { get; }
    bool is_StructBuild { get; }
    bool is_Tuple { get; }
    bool is_UnaryOp { get; }
    bool is_BinaryOp { get; }
    bool is_LiteralInt { get; }
    bool is_ConversionNum { get; }
    bool is_DeclareVar { get; }
    bool is_AssignVar { get; }
    bool is_IfExpr { get; }
    bool is_Loop { get; }
    bool is_For { get; }
    bool is_Labelled { get; }
    bool is_Break { get; }
    bool is_Continue { get; }
    bool is_Return { get; }
    bool is_Call { get; }
    bool is_Select { get; }
    bool is_MemberSelect { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IExpr dtor_matchee { get; }
    Dafny.ISequence<RAST._IMatchCase> dtor_cases { get; }
    RAST._IExpr dtor_stmt { get; }
    RAST._IExpr dtor_rhs { get; }
    RAST._IExpr dtor_underlying { get; }
    Dafny.ISequence<RAST._IAssignIdentifier> dtor_assignments { get; }
    Dafny.ISequence<RAST._IExpr> dtor_arguments { get; }
    Dafny.ISequence<Dafny.Rune> dtor_op1 { get; }
    DAST.Format._IUnOpFormat dtor_format { get; }
    Dafny.ISequence<Dafny.Rune> dtor_op2 { get; }
    RAST._IExpr dtor_left { get; }
    RAST._IExpr dtor_right { get; }
    DAST.Format._IBinOpFormat dtor_format2 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_value { get; }
    RAST._IType dtor_tpe { get; }
    RAST._IDeclareType dtor_declareType { get; }
    Std.Wrappers._IOption<RAST._IType> dtor_optType { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_optRhs { get; }
    RAST._IExpr dtor_cond { get; }
    RAST._IExpr dtor_thn { get; }
    RAST._IExpr dtor_els { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_optCond { get; }
    RAST._IExpr dtor_range { get; }
    RAST._IExpr dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_optLbl { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_optExpr { get; }
    RAST._IExpr dtor_obj { get; }
    Dafny.ISequence<RAST._IType> dtor_typeParameters { get; }
    _IExpr DowncastClone();
    bool NoExtraSemicolonAfter();
    RAST._IPrintingInfo printingInfo { get; }
    BigInteger Height();
    RAST._IExpr Optimize();
    bool LeftRequiresParentheses(RAST._IExpr left);
    _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> LeftParentheses(RAST._IExpr left);
    bool RightRequiresParentheses(RAST._IExpr right);
    _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> RightParentheses(RAST._IExpr right);
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
    RAST._IExpr Then(RAST._IExpr rhs2);
  }
  public abstract class Expr : _IExpr {
    public Expr() {
    }
    private static readonly RAST._IExpr theDefault = create_RawExpr(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IExpr Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IExpr> _TYPE = new Dafny.TypeDescriptor<RAST._IExpr>(RAST.Expr.Default());
    public static Dafny.TypeDescriptor<RAST._IExpr> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpr create_RawExpr(Dafny.ISequence<Dafny.Rune> content) {
      return new Expr_RawExpr(content);
    }
    public static _IExpr create_Identifier(Dafny.ISequence<Dafny.Rune> name) {
      return new Expr_Identifier(name);
    }
    public static _IExpr create_Match(RAST._IExpr matchee, Dafny.ISequence<RAST._IMatchCase> cases) {
      return new Expr_Match(matchee, cases);
    }
    public static _IExpr create_StmtExpr(RAST._IExpr stmt, RAST._IExpr rhs) {
      return new Expr_StmtExpr(stmt, rhs);
    }
    public static _IExpr create_Block(RAST._IExpr underlying) {
      return new Expr_Block(underlying);
    }
    public static _IExpr create_StructBuild(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IAssignIdentifier> assignments) {
      return new Expr_StructBuild(name, assignments);
    }
    public static _IExpr create_Tuple(Dafny.ISequence<RAST._IExpr> arguments) {
      return new Expr_Tuple(arguments);
    }
    public static _IExpr create_UnaryOp(Dafny.ISequence<Dafny.Rune> op1, RAST._IExpr underlying, DAST.Format._IUnOpFormat format) {
      return new Expr_UnaryOp(op1, underlying, format);
    }
    public static _IExpr create_BinaryOp(Dafny.ISequence<Dafny.Rune> op2, RAST._IExpr left, RAST._IExpr right, DAST.Format._IBinOpFormat format2) {
      return new Expr_BinaryOp(op2, left, right, format2);
    }
    public static _IExpr create_LiteralInt(Dafny.ISequence<Dafny.Rune> @value) {
      return new Expr_LiteralInt(@value);
    }
    public static _IExpr create_ConversionNum(RAST._IType tpe, RAST._IExpr underlying) {
      return new Expr_ConversionNum(tpe, underlying);
    }
    public static _IExpr create_DeclareVar(RAST._IDeclareType declareType, Dafny.ISequence<Dafny.Rune> name, Std.Wrappers._IOption<RAST._IType> optType, Std.Wrappers._IOption<RAST._IExpr> optRhs) {
      return new Expr_DeclareVar(declareType, name, optType, optRhs);
    }
    public static _IExpr create_AssignVar(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr rhs) {
      return new Expr_AssignVar(name, rhs);
    }
    public static _IExpr create_IfExpr(RAST._IExpr cond, RAST._IExpr thn, RAST._IExpr els) {
      return new Expr_IfExpr(cond, thn, els);
    }
    public static _IExpr create_Loop(Std.Wrappers._IOption<RAST._IExpr> optCond, RAST._IExpr underlying) {
      return new Expr_Loop(optCond, underlying);
    }
    public static _IExpr create_For(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr range, RAST._IExpr body) {
      return new Expr_For(name, range, body);
    }
    public static _IExpr create_Labelled(Dafny.ISequence<Dafny.Rune> lbl, RAST._IExpr underlying) {
      return new Expr_Labelled(lbl, underlying);
    }
    public static _IExpr create_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) {
      return new Expr_Break(optLbl);
    }
    public static _IExpr create_Continue(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) {
      return new Expr_Continue(optLbl);
    }
    public static _IExpr create_Return(Std.Wrappers._IOption<RAST._IExpr> optExpr) {
      return new Expr_Return(optExpr);
    }
    public static _IExpr create_Call(RAST._IExpr obj, Dafny.ISequence<RAST._IType> typeParameters, Dafny.ISequence<RAST._IExpr> arguments) {
      return new Expr_Call(obj, typeParameters, arguments);
    }
    public static _IExpr create_Select(RAST._IExpr obj, Dafny.ISequence<Dafny.Rune> name) {
      return new Expr_Select(obj, name);
    }
    public static _IExpr create_MemberSelect(RAST._IExpr obj, Dafny.ISequence<Dafny.Rune> name) {
      return new Expr_MemberSelect(obj, name);
    }
    public bool is_RawExpr { get { return this is Expr_RawExpr; } }
    public bool is_Identifier { get { return this is Expr_Identifier; } }
    public bool is_Match { get { return this is Expr_Match; } }
    public bool is_StmtExpr { get { return this is Expr_StmtExpr; } }
    public bool is_Block { get { return this is Expr_Block; } }
    public bool is_StructBuild { get { return this is Expr_StructBuild; } }
    public bool is_Tuple { get { return this is Expr_Tuple; } }
    public bool is_UnaryOp { get { return this is Expr_UnaryOp; } }
    public bool is_BinaryOp { get { return this is Expr_BinaryOp; } }
    public bool is_LiteralInt { get { return this is Expr_LiteralInt; } }
    public bool is_ConversionNum { get { return this is Expr_ConversionNum; } }
    public bool is_DeclareVar { get { return this is Expr_DeclareVar; } }
    public bool is_AssignVar { get { return this is Expr_AssignVar; } }
    public bool is_IfExpr { get { return this is Expr_IfExpr; } }
    public bool is_Loop { get { return this is Expr_Loop; } }
    public bool is_For { get { return this is Expr_For; } }
    public bool is_Labelled { get { return this is Expr_Labelled; } }
    public bool is_Break { get { return this is Expr_Break; } }
    public bool is_Continue { get { return this is Expr_Continue; } }
    public bool is_Return { get { return this is Expr_Return; } }
    public bool is_Call { get { return this is Expr_Call; } }
    public bool is_Select { get { return this is Expr_Select; } }
    public bool is_MemberSelect { get { return this is Expr_MemberSelect; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        var d = this;
        return ((Expr_RawExpr)d)._content;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Expr_Identifier) { return ((Expr_Identifier)d)._name; }
        if (d is Expr_StructBuild) { return ((Expr_StructBuild)d)._name; }
        if (d is Expr_DeclareVar) { return ((Expr_DeclareVar)d)._name; }
        if (d is Expr_AssignVar) { return ((Expr_AssignVar)d)._name; }
        if (d is Expr_For) { return ((Expr_For)d)._name; }
        if (d is Expr_Select) { return ((Expr_Select)d)._name; }
        return ((Expr_MemberSelect)d)._name;
      }
    }
    public RAST._IExpr dtor_matchee {
      get {
        var d = this;
        return ((Expr_Match)d)._matchee;
      }
    }
    public Dafny.ISequence<RAST._IMatchCase> dtor_cases {
      get {
        var d = this;
        return ((Expr_Match)d)._cases;
      }
    }
    public RAST._IExpr dtor_stmt {
      get {
        var d = this;
        return ((Expr_StmtExpr)d)._stmt;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        var d = this;
        if (d is Expr_StmtExpr) { return ((Expr_StmtExpr)d)._rhs; }
        return ((Expr_AssignVar)d)._rhs;
      }
    }
    public RAST._IExpr dtor_underlying {
      get {
        var d = this;
        if (d is Expr_Block) { return ((Expr_Block)d)._underlying; }
        if (d is Expr_UnaryOp) { return ((Expr_UnaryOp)d)._underlying; }
        if (d is Expr_ConversionNum) { return ((Expr_ConversionNum)d)._underlying; }
        if (d is Expr_Loop) { return ((Expr_Loop)d)._underlying; }
        return ((Expr_Labelled)d)._underlying;
      }
    }
    public Dafny.ISequence<RAST._IAssignIdentifier> dtor_assignments {
      get {
        var d = this;
        return ((Expr_StructBuild)d)._assignments;
      }
    }
    public Dafny.ISequence<RAST._IExpr> dtor_arguments {
      get {
        var d = this;
        if (d is Expr_Tuple) { return ((Expr_Tuple)d)._arguments; }
        return ((Expr_Call)d)._arguments;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_op1 {
      get {
        var d = this;
        return ((Expr_UnaryOp)d)._op1;
      }
    }
    public DAST.Format._IUnOpFormat dtor_format {
      get {
        var d = this;
        return ((Expr_UnaryOp)d)._format;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_op2 {
      get {
        var d = this;
        return ((Expr_BinaryOp)d)._op2;
      }
    }
    public RAST._IExpr dtor_left {
      get {
        var d = this;
        return ((Expr_BinaryOp)d)._left;
      }
    }
    public RAST._IExpr dtor_right {
      get {
        var d = this;
        return ((Expr_BinaryOp)d)._right;
      }
    }
    public DAST.Format._IBinOpFormat dtor_format2 {
      get {
        var d = this;
        return ((Expr_BinaryOp)d)._format2;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_value {
      get {
        var d = this;
        return ((Expr_LiteralInt)d)._value;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        var d = this;
        return ((Expr_ConversionNum)d)._tpe;
      }
    }
    public RAST._IDeclareType dtor_declareType {
      get {
        var d = this;
        return ((Expr_DeclareVar)d)._declareType;
      }
    }
    public Std.Wrappers._IOption<RAST._IType> dtor_optType {
      get {
        var d = this;
        return ((Expr_DeclareVar)d)._optType;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_optRhs {
      get {
        var d = this;
        return ((Expr_DeclareVar)d)._optRhs;
      }
    }
    public RAST._IExpr dtor_cond {
      get {
        var d = this;
        return ((Expr_IfExpr)d)._cond;
      }
    }
    public RAST._IExpr dtor_thn {
      get {
        var d = this;
        return ((Expr_IfExpr)d)._thn;
      }
    }
    public RAST._IExpr dtor_els {
      get {
        var d = this;
        return ((Expr_IfExpr)d)._els;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_optCond {
      get {
        var d = this;
        return ((Expr_Loop)d)._optCond;
      }
    }
    public RAST._IExpr dtor_range {
      get {
        var d = this;
        return ((Expr_For)d)._range;
      }
    }
    public RAST._IExpr dtor_body {
      get {
        var d = this;
        return ((Expr_For)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Expr_Labelled)d)._lbl;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_optLbl {
      get {
        var d = this;
        if (d is Expr_Break) { return ((Expr_Break)d)._optLbl; }
        return ((Expr_Continue)d)._optLbl;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_optExpr {
      get {
        var d = this;
        return ((Expr_Return)d)._optExpr;
      }
    }
    public RAST._IExpr dtor_obj {
      get {
        var d = this;
        if (d is Expr_Call) { return ((Expr_Call)d)._obj; }
        if (d is Expr_Select) { return ((Expr_Select)d)._obj; }
        return ((Expr_MemberSelect)d)._obj;
      }
    }
    public Dafny.ISequence<RAST._IType> dtor_typeParameters {
      get {
        var d = this;
        return ((Expr_Call)d)._typeParameters;
      }
    }
    public abstract _IExpr DowncastClone();
    public bool NoExtraSemicolonAfter() {
      return ((((((this).is_DeclareVar) || ((this).is_AssignVar)) || ((this).is_Break)) || ((this).is_Continue)) || ((this).is_Return)) || ((((this).is_RawExpr) && ((new BigInteger(((this).dtor_content).Count)).Sign == 1)) && ((((this).dtor_content).Select((new BigInteger(((this).dtor_content).Count)) - (BigInteger.One))) == (new Dafny.Rune(';'))));
    }
    public BigInteger Height() {
      RAST._IExpr _source27 = this;
      if (_source27.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _865___mcc_h0 = _source27.dtor_content;
        return BigInteger.One;
      } else if (_source27.is_Identifier) {
        Dafny.ISequence<Dafny.Rune> _866___mcc_h2 = _source27.dtor_name;
        return BigInteger.One;
      } else if (_source27.is_Match) {
        RAST._IExpr _867___mcc_h4 = _source27.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _868___mcc_h5 = _source27.dtor_cases;
        Dafny.ISequence<RAST._IMatchCase> _869_cases = _868___mcc_h5;
        RAST._IExpr _870_matchee = _867___mcc_h4;
        return (BigInteger.One) + (RAST.__default.max((_870_matchee).Height(), RAST.__default.SeqToHeight<RAST._IMatchCase>(_869_cases, ((System.Func<RAST._IMatchCase, BigInteger>)((_871_oneCase) => {
          return (_871_oneCase).Height();
        })))));
      } else if (_source27.is_StmtExpr) {
        RAST._IExpr _872___mcc_h8 = _source27.dtor_stmt;
        RAST._IExpr _873___mcc_h9 = _source27.dtor_rhs;
        RAST._IExpr _874_rhs = _873___mcc_h9;
        RAST._IExpr _875_stmt = _872___mcc_h8;
        BigInteger _876_default = (BigInteger.One) + (RAST.__default.max((_875_stmt).Height(), (_874_rhs).Height()));
        RAST._IExpr _source28 = this;
        if (_source28.is_RawExpr) {
          Dafny.ISequence<Dafny.Rune> _877___mcc_h92 = _source28.dtor_content;
          return _876_default;
        } else if (_source28.is_Identifier) {
          Dafny.ISequence<Dafny.Rune> _878___mcc_h94 = _source28.dtor_name;
          return _876_default;
        } else if (_source28.is_Match) {
          RAST._IExpr _879___mcc_h96 = _source28.dtor_matchee;
          Dafny.ISequence<RAST._IMatchCase> _880___mcc_h97 = _source28.dtor_cases;
          return _876_default;
        } else if (_source28.is_StmtExpr) {
          RAST._IExpr _881___mcc_h100 = _source28.dtor_stmt;
          RAST._IExpr _882___mcc_h101 = _source28.dtor_rhs;
          RAST._IExpr _source29 = _881___mcc_h100;
          if (_source29.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _883___mcc_h104 = _source29.dtor_content;
            return _876_default;
          } else if (_source29.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _884___mcc_h106 = _source29.dtor_name;
            return _876_default;
          } else if (_source29.is_Match) {
            RAST._IExpr _885___mcc_h108 = _source29.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _886___mcc_h109 = _source29.dtor_cases;
            return _876_default;
          } else if (_source29.is_StmtExpr) {
            RAST._IExpr _887___mcc_h112 = _source29.dtor_stmt;
            RAST._IExpr _888___mcc_h113 = _source29.dtor_rhs;
            return _876_default;
          } else if (_source29.is_Block) {
            RAST._IExpr _889___mcc_h116 = _source29.dtor_underlying;
            return _876_default;
          } else if (_source29.is_StructBuild) {
            Dafny.ISequence<Dafny.Rune> _890___mcc_h118 = _source29.dtor_name;
            Dafny.ISequence<RAST._IAssignIdentifier> _891___mcc_h119 = _source29.dtor_assignments;
            return _876_default;
          } else if (_source29.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _892___mcc_h122 = _source29.dtor_arguments;
            return _876_default;
          } else if (_source29.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _893___mcc_h124 = _source29.dtor_op1;
            RAST._IExpr _894___mcc_h125 = _source29.dtor_underlying;
            DAST.Format._IUnOpFormat _895___mcc_h126 = _source29.dtor_format;
            return _876_default;
          } else if (_source29.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _896___mcc_h130 = _source29.dtor_op2;
            RAST._IExpr _897___mcc_h131 = _source29.dtor_left;
            RAST._IExpr _898___mcc_h132 = _source29.dtor_right;
            DAST.Format._IBinOpFormat _899___mcc_h133 = _source29.dtor_format2;
            return _876_default;
          } else if (_source29.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _900___mcc_h138 = _source29.dtor_value;
            return _876_default;
          } else if (_source29.is_ConversionNum) {
            RAST._IType _901___mcc_h140 = _source29.dtor_tpe;
            RAST._IExpr _902___mcc_h141 = _source29.dtor_underlying;
            return _876_default;
          } else if (_source29.is_DeclareVar) {
            RAST._IDeclareType _903___mcc_h144 = _source29.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _904___mcc_h145 = _source29.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _905___mcc_h146 = _source29.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _906___mcc_h147 = _source29.dtor_optRhs;
            Std.Wrappers._IOption<RAST._IType> _source30 = _905___mcc_h146;
            if (_source30.is_None) {
              return _876_default;
            } else {
              RAST._IType _907___mcc_h152 = _source30.dtor_value;
              Std.Wrappers._IOption<RAST._IExpr> _source31 = _906___mcc_h147;
              if (_source31.is_None) {
                RAST._IExpr _source32 = _882___mcc_h101;
                if (_source32.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _908___mcc_h154 = _source32.dtor_content;
                  return _876_default;
                } else if (_source32.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _909___mcc_h156 = _source32.dtor_name;
                  return _876_default;
                } else if (_source32.is_Match) {
                  RAST._IExpr _910___mcc_h158 = _source32.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _911___mcc_h159 = _source32.dtor_cases;
                  return _876_default;
                } else if (_source32.is_StmtExpr) {
                  RAST._IExpr _912___mcc_h162 = _source32.dtor_stmt;
                  RAST._IExpr _913___mcc_h163 = _source32.dtor_rhs;
                  RAST._IExpr _source33 = _912___mcc_h162;
                  if (_source33.is_RawExpr) {
                    Dafny.ISequence<Dafny.Rune> _914___mcc_h166 = _source33.dtor_content;
                    return _876_default;
                  } else if (_source33.is_Identifier) {
                    Dafny.ISequence<Dafny.Rune> _915___mcc_h168 = _source33.dtor_name;
                    return _876_default;
                  } else if (_source33.is_Match) {
                    RAST._IExpr _916___mcc_h170 = _source33.dtor_matchee;
                    Dafny.ISequence<RAST._IMatchCase> _917___mcc_h171 = _source33.dtor_cases;
                    return _876_default;
                  } else if (_source33.is_StmtExpr) {
                    RAST._IExpr _918___mcc_h174 = _source33.dtor_stmt;
                    RAST._IExpr _919___mcc_h175 = _source33.dtor_rhs;
                    return _876_default;
                  } else if (_source33.is_Block) {
                    RAST._IExpr _920___mcc_h178 = _source33.dtor_underlying;
                    return _876_default;
                  } else if (_source33.is_StructBuild) {
                    Dafny.ISequence<Dafny.Rune> _921___mcc_h180 = _source33.dtor_name;
                    Dafny.ISequence<RAST._IAssignIdentifier> _922___mcc_h181 = _source33.dtor_assignments;
                    return _876_default;
                  } else if (_source33.is_Tuple) {
                    Dafny.ISequence<RAST._IExpr> _923___mcc_h184 = _source33.dtor_arguments;
                    return _876_default;
                  } else if (_source33.is_UnaryOp) {
                    Dafny.ISequence<Dafny.Rune> _924___mcc_h186 = _source33.dtor_op1;
                    RAST._IExpr _925___mcc_h187 = _source33.dtor_underlying;
                    DAST.Format._IUnOpFormat _926___mcc_h188 = _source33.dtor_format;
                    return _876_default;
                  } else if (_source33.is_BinaryOp) {
                    Dafny.ISequence<Dafny.Rune> _927___mcc_h192 = _source33.dtor_op2;
                    RAST._IExpr _928___mcc_h193 = _source33.dtor_left;
                    RAST._IExpr _929___mcc_h194 = _source33.dtor_right;
                    DAST.Format._IBinOpFormat _930___mcc_h195 = _source33.dtor_format2;
                    return _876_default;
                  } else if (_source33.is_LiteralInt) {
                    Dafny.ISequence<Dafny.Rune> _931___mcc_h200 = _source33.dtor_value;
                    return _876_default;
                  } else if (_source33.is_ConversionNum) {
                    RAST._IType _932___mcc_h202 = _source33.dtor_tpe;
                    RAST._IExpr _933___mcc_h203 = _source33.dtor_underlying;
                    return _876_default;
                  } else if (_source33.is_DeclareVar) {
                    RAST._IDeclareType _934___mcc_h206 = _source33.dtor_declareType;
                    Dafny.ISequence<Dafny.Rune> _935___mcc_h207 = _source33.dtor_name;
                    Std.Wrappers._IOption<RAST._IType> _936___mcc_h208 = _source33.dtor_optType;
                    Std.Wrappers._IOption<RAST._IExpr> _937___mcc_h209 = _source33.dtor_optRhs;
                    return _876_default;
                  } else if (_source33.is_AssignVar) {
                    Dafny.ISequence<Dafny.Rune> _938___mcc_h214 = _source33.dtor_name;
                    RAST._IExpr _939___mcc_h215 = _source33.dtor_rhs;
                    RAST._IExpr _940_last = _913___mcc_h163;
                    RAST._IExpr _941_rhs = _939___mcc_h215;
                    Dafny.ISequence<Dafny.Rune> _942_name2 = _938___mcc_h214;
                    RAST._IType _943_tpe = _907___mcc_h152;
                    Dafny.ISequence<Dafny.Rune> _944_name = _904___mcc_h145;
                    RAST._IDeclareType _945_mod = _903___mcc_h144;
                    if ((_944_name).Equals(_942_name2)) {
                      return (BigInteger.One) + (_876_default);
                    } else {
                      return _876_default;
                    }
                  } else if (_source33.is_IfExpr) {
                    RAST._IExpr _946___mcc_h218 = _source33.dtor_cond;
                    RAST._IExpr _947___mcc_h219 = _source33.dtor_thn;
                    RAST._IExpr _948___mcc_h220 = _source33.dtor_els;
                    return _876_default;
                  } else if (_source33.is_Loop) {
                    Std.Wrappers._IOption<RAST._IExpr> _949___mcc_h224 = _source33.dtor_optCond;
                    RAST._IExpr _950___mcc_h225 = _source33.dtor_underlying;
                    return _876_default;
                  } else if (_source33.is_For) {
                    Dafny.ISequence<Dafny.Rune> _951___mcc_h228 = _source33.dtor_name;
                    RAST._IExpr _952___mcc_h229 = _source33.dtor_range;
                    RAST._IExpr _953___mcc_h230 = _source33.dtor_body;
                    return _876_default;
                  } else if (_source33.is_Labelled) {
                    Dafny.ISequence<Dafny.Rune> _954___mcc_h234 = _source33.dtor_lbl;
                    RAST._IExpr _955___mcc_h235 = _source33.dtor_underlying;
                    return _876_default;
                  } else if (_source33.is_Break) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _956___mcc_h238 = _source33.dtor_optLbl;
                    return _876_default;
                  } else if (_source33.is_Continue) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _957___mcc_h240 = _source33.dtor_optLbl;
                    return _876_default;
                  } else if (_source33.is_Return) {
                    Std.Wrappers._IOption<RAST._IExpr> _958___mcc_h242 = _source33.dtor_optExpr;
                    return _876_default;
                  } else if (_source33.is_Call) {
                    RAST._IExpr _959___mcc_h244 = _source33.dtor_obj;
                    Dafny.ISequence<RAST._IType> _960___mcc_h245 = _source33.dtor_typeParameters;
                    Dafny.ISequence<RAST._IExpr> _961___mcc_h246 = _source33.dtor_arguments;
                    return _876_default;
                  } else if (_source33.is_Select) {
                    RAST._IExpr _962___mcc_h250 = _source33.dtor_obj;
                    Dafny.ISequence<Dafny.Rune> _963___mcc_h251 = _source33.dtor_name;
                    return _876_default;
                  } else {
                    RAST._IExpr _964___mcc_h254 = _source33.dtor_obj;
                    Dafny.ISequence<Dafny.Rune> _965___mcc_h255 = _source33.dtor_name;
                    return _876_default;
                  }
                } else if (_source32.is_Block) {
                  RAST._IExpr _966___mcc_h258 = _source32.dtor_underlying;
                  return _876_default;
                } else if (_source32.is_StructBuild) {
                  Dafny.ISequence<Dafny.Rune> _967___mcc_h260 = _source32.dtor_name;
                  Dafny.ISequence<RAST._IAssignIdentifier> _968___mcc_h261 = _source32.dtor_assignments;
                  return _876_default;
                } else if (_source32.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _969___mcc_h264 = _source32.dtor_arguments;
                  return _876_default;
                } else if (_source32.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _970___mcc_h266 = _source32.dtor_op1;
                  RAST._IExpr _971___mcc_h267 = _source32.dtor_underlying;
                  DAST.Format._IUnOpFormat _972___mcc_h268 = _source32.dtor_format;
                  return _876_default;
                } else if (_source32.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _973___mcc_h272 = _source32.dtor_op2;
                  RAST._IExpr _974___mcc_h273 = _source32.dtor_left;
                  RAST._IExpr _975___mcc_h274 = _source32.dtor_right;
                  DAST.Format._IBinOpFormat _976___mcc_h275 = _source32.dtor_format2;
                  return _876_default;
                } else if (_source32.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _977___mcc_h280 = _source32.dtor_value;
                  return _876_default;
                } else if (_source32.is_ConversionNum) {
                  RAST._IType _978___mcc_h282 = _source32.dtor_tpe;
                  RAST._IExpr _979___mcc_h283 = _source32.dtor_underlying;
                  return _876_default;
                } else if (_source32.is_DeclareVar) {
                  RAST._IDeclareType _980___mcc_h286 = _source32.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _981___mcc_h287 = _source32.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _982___mcc_h288 = _source32.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _983___mcc_h289 = _source32.dtor_optRhs;
                  return _876_default;
                } else if (_source32.is_AssignVar) {
                  Dafny.ISequence<Dafny.Rune> _984___mcc_h294 = _source32.dtor_name;
                  RAST._IExpr _985___mcc_h295 = _source32.dtor_rhs;
                  return _876_default;
                } else if (_source32.is_IfExpr) {
                  RAST._IExpr _986___mcc_h298 = _source32.dtor_cond;
                  RAST._IExpr _987___mcc_h299 = _source32.dtor_thn;
                  RAST._IExpr _988___mcc_h300 = _source32.dtor_els;
                  return _876_default;
                } else if (_source32.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _989___mcc_h304 = _source32.dtor_optCond;
                  RAST._IExpr _990___mcc_h305 = _source32.dtor_underlying;
                  return _876_default;
                } else if (_source32.is_For) {
                  Dafny.ISequence<Dafny.Rune> _991___mcc_h308 = _source32.dtor_name;
                  RAST._IExpr _992___mcc_h309 = _source32.dtor_range;
                  RAST._IExpr _993___mcc_h310 = _source32.dtor_body;
                  return _876_default;
                } else if (_source32.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _994___mcc_h314 = _source32.dtor_lbl;
                  RAST._IExpr _995___mcc_h315 = _source32.dtor_underlying;
                  return _876_default;
                } else if (_source32.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _996___mcc_h318 = _source32.dtor_optLbl;
                  return _876_default;
                } else if (_source32.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _997___mcc_h320 = _source32.dtor_optLbl;
                  return _876_default;
                } else if (_source32.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _998___mcc_h322 = _source32.dtor_optExpr;
                  return _876_default;
                } else if (_source32.is_Call) {
                  RAST._IExpr _999___mcc_h324 = _source32.dtor_obj;
                  Dafny.ISequence<RAST._IType> _1000___mcc_h325 = _source32.dtor_typeParameters;
                  Dafny.ISequence<RAST._IExpr> _1001___mcc_h326 = _source32.dtor_arguments;
                  return _876_default;
                } else if (_source32.is_Select) {
                  RAST._IExpr _1002___mcc_h330 = _source32.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1003___mcc_h331 = _source32.dtor_name;
                  return _876_default;
                } else {
                  RAST._IExpr _1004___mcc_h334 = _source32.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1005___mcc_h335 = _source32.dtor_name;
                  return _876_default;
                }
              } else {
                RAST._IExpr _1006___mcc_h338 = _source31.dtor_value;
                return _876_default;
              }
            }
          } else if (_source29.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _1007___mcc_h340 = _source29.dtor_name;
            RAST._IExpr _1008___mcc_h341 = _source29.dtor_rhs;
            return _876_default;
          } else if (_source29.is_IfExpr) {
            RAST._IExpr _1009___mcc_h344 = _source29.dtor_cond;
            RAST._IExpr _1010___mcc_h345 = _source29.dtor_thn;
            RAST._IExpr _1011___mcc_h346 = _source29.dtor_els;
            return _876_default;
          } else if (_source29.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1012___mcc_h350 = _source29.dtor_optCond;
            RAST._IExpr _1013___mcc_h351 = _source29.dtor_underlying;
            return _876_default;
          } else if (_source29.is_For) {
            Dafny.ISequence<Dafny.Rune> _1014___mcc_h354 = _source29.dtor_name;
            RAST._IExpr _1015___mcc_h355 = _source29.dtor_range;
            RAST._IExpr _1016___mcc_h356 = _source29.dtor_body;
            return _876_default;
          } else if (_source29.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1017___mcc_h360 = _source29.dtor_lbl;
            RAST._IExpr _1018___mcc_h361 = _source29.dtor_underlying;
            return _876_default;
          } else if (_source29.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1019___mcc_h364 = _source29.dtor_optLbl;
            return _876_default;
          } else if (_source29.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1020___mcc_h366 = _source29.dtor_optLbl;
            return _876_default;
          } else if (_source29.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1021___mcc_h368 = _source29.dtor_optExpr;
            return _876_default;
          } else if (_source29.is_Call) {
            RAST._IExpr _1022___mcc_h370 = _source29.dtor_obj;
            Dafny.ISequence<RAST._IType> _1023___mcc_h371 = _source29.dtor_typeParameters;
            Dafny.ISequence<RAST._IExpr> _1024___mcc_h372 = _source29.dtor_arguments;
            return _876_default;
          } else if (_source29.is_Select) {
            RAST._IExpr _1025___mcc_h376 = _source29.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1026___mcc_h377 = _source29.dtor_name;
            return _876_default;
          } else {
            RAST._IExpr _1027___mcc_h380 = _source29.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1028___mcc_h381 = _source29.dtor_name;
            return _876_default;
          }
        } else if (_source28.is_Block) {
          RAST._IExpr _1029___mcc_h384 = _source28.dtor_underlying;
          return _876_default;
        } else if (_source28.is_StructBuild) {
          Dafny.ISequence<Dafny.Rune> _1030___mcc_h386 = _source28.dtor_name;
          Dafny.ISequence<RAST._IAssignIdentifier> _1031___mcc_h387 = _source28.dtor_assignments;
          return _876_default;
        } else if (_source28.is_Tuple) {
          Dafny.ISequence<RAST._IExpr> _1032___mcc_h390 = _source28.dtor_arguments;
          return _876_default;
        } else if (_source28.is_UnaryOp) {
          Dafny.ISequence<Dafny.Rune> _1033___mcc_h392 = _source28.dtor_op1;
          RAST._IExpr _1034___mcc_h393 = _source28.dtor_underlying;
          DAST.Format._IUnOpFormat _1035___mcc_h394 = _source28.dtor_format;
          return _876_default;
        } else if (_source28.is_BinaryOp) {
          Dafny.ISequence<Dafny.Rune> _1036___mcc_h398 = _source28.dtor_op2;
          RAST._IExpr _1037___mcc_h399 = _source28.dtor_left;
          RAST._IExpr _1038___mcc_h400 = _source28.dtor_right;
          DAST.Format._IBinOpFormat _1039___mcc_h401 = _source28.dtor_format2;
          return _876_default;
        } else if (_source28.is_LiteralInt) {
          Dafny.ISequence<Dafny.Rune> _1040___mcc_h406 = _source28.dtor_value;
          return _876_default;
        } else if (_source28.is_ConversionNum) {
          RAST._IType _1041___mcc_h408 = _source28.dtor_tpe;
          RAST._IExpr _1042___mcc_h409 = _source28.dtor_underlying;
          return _876_default;
        } else if (_source28.is_DeclareVar) {
          RAST._IDeclareType _1043___mcc_h412 = _source28.dtor_declareType;
          Dafny.ISequence<Dafny.Rune> _1044___mcc_h413 = _source28.dtor_name;
          Std.Wrappers._IOption<RAST._IType> _1045___mcc_h414 = _source28.dtor_optType;
          Std.Wrappers._IOption<RAST._IExpr> _1046___mcc_h415 = _source28.dtor_optRhs;
          return _876_default;
        } else if (_source28.is_AssignVar) {
          Dafny.ISequence<Dafny.Rune> _1047___mcc_h420 = _source28.dtor_name;
          RAST._IExpr _1048___mcc_h421 = _source28.dtor_rhs;
          return _876_default;
        } else if (_source28.is_IfExpr) {
          RAST._IExpr _1049___mcc_h424 = _source28.dtor_cond;
          RAST._IExpr _1050___mcc_h425 = _source28.dtor_thn;
          RAST._IExpr _1051___mcc_h426 = _source28.dtor_els;
          return _876_default;
        } else if (_source28.is_Loop) {
          Std.Wrappers._IOption<RAST._IExpr> _1052___mcc_h430 = _source28.dtor_optCond;
          RAST._IExpr _1053___mcc_h431 = _source28.dtor_underlying;
          return _876_default;
        } else if (_source28.is_For) {
          Dafny.ISequence<Dafny.Rune> _1054___mcc_h434 = _source28.dtor_name;
          RAST._IExpr _1055___mcc_h435 = _source28.dtor_range;
          RAST._IExpr _1056___mcc_h436 = _source28.dtor_body;
          return _876_default;
        } else if (_source28.is_Labelled) {
          Dafny.ISequence<Dafny.Rune> _1057___mcc_h440 = _source28.dtor_lbl;
          RAST._IExpr _1058___mcc_h441 = _source28.dtor_underlying;
          return _876_default;
        } else if (_source28.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1059___mcc_h444 = _source28.dtor_optLbl;
          return _876_default;
        } else if (_source28.is_Continue) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1060___mcc_h446 = _source28.dtor_optLbl;
          return _876_default;
        } else if (_source28.is_Return) {
          Std.Wrappers._IOption<RAST._IExpr> _1061___mcc_h448 = _source28.dtor_optExpr;
          return _876_default;
        } else if (_source28.is_Call) {
          RAST._IExpr _1062___mcc_h450 = _source28.dtor_obj;
          Dafny.ISequence<RAST._IType> _1063___mcc_h451 = _source28.dtor_typeParameters;
          Dafny.ISequence<RAST._IExpr> _1064___mcc_h452 = _source28.dtor_arguments;
          return _876_default;
        } else if (_source28.is_Select) {
          RAST._IExpr _1065___mcc_h456 = _source28.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _1066___mcc_h457 = _source28.dtor_name;
          return _876_default;
        } else {
          RAST._IExpr _1067___mcc_h460 = _source28.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _1068___mcc_h461 = _source28.dtor_name;
          return _876_default;
        }
      } else if (_source27.is_Block) {
        RAST._IExpr _1069___mcc_h12 = _source27.dtor_underlying;
        RAST._IExpr _1070_underlying = _1069___mcc_h12;
        return (BigInteger.One) + ((_1070_underlying).Height());
      } else if (_source27.is_StructBuild) {
        Dafny.ISequence<Dafny.Rune> _1071___mcc_h14 = _source27.dtor_name;
        Dafny.ISequence<RAST._IAssignIdentifier> _1072___mcc_h15 = _source27.dtor_assignments;
        Dafny.ISequence<RAST._IAssignIdentifier> _1073_assignments = _1072___mcc_h15;
        Dafny.ISequence<Dafny.Rune> _1074_name = _1071___mcc_h14;
        return (BigInteger.One) + (RAST.__default.SeqToHeight<RAST._IAssignIdentifier>(_1073_assignments, ((System.Func<RAST._IAssignIdentifier, BigInteger>)((_1075_assignment) => {
          return (_1075_assignment).Height();
        }))));
      } else if (_source27.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _1076___mcc_h18 = _source27.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _1077_arguments = _1076___mcc_h18;
        return (BigInteger.One) + (RAST.__default.SeqToHeight<RAST._IExpr>(_1077_arguments, ((System.Func<RAST._IExpr, BigInteger>)((_1078_argument) => {
          return (_1078_argument).Height();
        }))));
      } else if (_source27.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _1079___mcc_h20 = _source27.dtor_op1;
        RAST._IExpr _1080___mcc_h21 = _source27.dtor_underlying;
        DAST.Format._IUnOpFormat _1081___mcc_h22 = _source27.dtor_format;
        RAST._IExpr _1082_underlying = _1080___mcc_h21;
        return (BigInteger.One) + ((_1082_underlying).Height());
      } else if (_source27.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _1083___mcc_h26 = _source27.dtor_op2;
        RAST._IExpr _1084___mcc_h27 = _source27.dtor_left;
        RAST._IExpr _1085___mcc_h28 = _source27.dtor_right;
        DAST.Format._IBinOpFormat _1086___mcc_h29 = _source27.dtor_format2;
        DAST.Format._IBinOpFormat _1087_format = _1086___mcc_h29;
        RAST._IExpr _1088_right = _1085___mcc_h28;
        RAST._IExpr _1089_left = _1084___mcc_h27;
        Dafny.ISequence<Dafny.Rune> _1090_op = _1083___mcc_h26;
        return (BigInteger.One) + (RAST.__default.max((_1089_left).Height(), (_1088_right).Height()));
      } else if (_source27.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _1091___mcc_h34 = _source27.dtor_value;
        return BigInteger.One;
      } else if (_source27.is_ConversionNum) {
        RAST._IType _1092___mcc_h36 = _source27.dtor_tpe;
        RAST._IExpr _1093___mcc_h37 = _source27.dtor_underlying;
        RAST._IExpr _1094_underlying = _1093___mcc_h37;
        return (BigInteger.One) + ((_1094_underlying).Height());
      } else if (_source27.is_DeclareVar) {
        RAST._IDeclareType _1095___mcc_h40 = _source27.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _1096___mcc_h41 = _source27.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _1097___mcc_h42 = _source27.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _1098___mcc_h43 = _source27.dtor_optRhs;
        Std.Wrappers._IOption<RAST._IExpr> _1099_expr = _1098___mcc_h43;
        Std.Wrappers._IOption<RAST._IType> _1100_tpe = _1097___mcc_h42;
        Dafny.ISequence<Dafny.Rune> _1101_name = _1096___mcc_h41;
        RAST._IDeclareType _1102_declareType = _1095___mcc_h40;
        return (BigInteger.One) + (((System.Func<Std.Wrappers._IOption<RAST._IExpr>, BigInteger>)((_source34) => {
          if (_source34.is_None) {
            return BigInteger.Zero;
          } else {
            RAST._IExpr _1103___mcc_h464 = _source34.dtor_value;
            RAST._IExpr _1104_e = _1103___mcc_h464;
            return (_1104_e).Height();
          }
        }))(_1099_expr));
      } else if (_source27.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _1105___mcc_h48 = _source27.dtor_name;
        RAST._IExpr _1106___mcc_h49 = _source27.dtor_rhs;
        RAST._IExpr _1107_expr = _1106___mcc_h49;
        Dafny.ISequence<Dafny.Rune> _1108_name = _1105___mcc_h48;
        return (BigInteger.One) + ((_1107_expr).Height());
      } else if (_source27.is_IfExpr) {
        RAST._IExpr _1109___mcc_h52 = _source27.dtor_cond;
        RAST._IExpr _1110___mcc_h53 = _source27.dtor_thn;
        RAST._IExpr _1111___mcc_h54 = _source27.dtor_els;
        RAST._IExpr _1112_els = _1111___mcc_h54;
        RAST._IExpr _1113_thn = _1110___mcc_h53;
        RAST._IExpr _1114_cond = _1109___mcc_h52;
        return (BigInteger.One) + (RAST.__default.max((_1114_cond).Height(), RAST.__default.max((_1113_thn).Height(), (_1112_els).Height())));
      } else if (_source27.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _1115___mcc_h58 = _source27.dtor_optCond;
        RAST._IExpr _1116___mcc_h59 = _source27.dtor_underlying;
        RAST._IExpr _1117_underlying = _1116___mcc_h59;
        Std.Wrappers._IOption<RAST._IExpr> _1118_optCond = _1115___mcc_h58;
        return (BigInteger.One) + ((((_1118_optCond).is_Some) ? (RAST.__default.max(((_1118_optCond).dtor_value).Height(), (_1117_underlying).Height())) : ((_1117_underlying).Height())));
      } else if (_source27.is_For) {
        Dafny.ISequence<Dafny.Rune> _1119___mcc_h62 = _source27.dtor_name;
        RAST._IExpr _1120___mcc_h63 = _source27.dtor_range;
        RAST._IExpr _1121___mcc_h64 = _source27.dtor_body;
        RAST._IExpr _1122_body = _1121___mcc_h64;
        RAST._IExpr _1123_range = _1120___mcc_h63;
        Dafny.ISequence<Dafny.Rune> _1124_name = _1119___mcc_h62;
        return (BigInteger.One) + (RAST.__default.max((_1123_range).Height(), (_1122_body).Height()));
      } else if (_source27.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _1125___mcc_h68 = _source27.dtor_lbl;
        RAST._IExpr _1126___mcc_h69 = _source27.dtor_underlying;
        RAST._IExpr _1127_underlying = _1126___mcc_h69;
        Dafny.ISequence<Dafny.Rune> _1128_lbl = _1125___mcc_h68;
        return (BigInteger.One) + ((_1127_underlying).Height());
      } else if (_source27.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1129___mcc_h72 = _source27.dtor_optLbl;
        return BigInteger.One;
      } else if (_source27.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1130___mcc_h74 = _source27.dtor_optLbl;
        return BigInteger.One;
      } else if (_source27.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _1131___mcc_h76 = _source27.dtor_optExpr;
        Std.Wrappers._IOption<RAST._IExpr> _1132_optExpr = _1131___mcc_h76;
        if ((_1132_optExpr).is_Some) {
          return (BigInteger.One) + (((_1132_optExpr).dtor_value).Height());
        } else {
          return BigInteger.One;
        }
      } else if (_source27.is_Call) {
        RAST._IExpr _1133___mcc_h78 = _source27.dtor_obj;
        Dafny.ISequence<RAST._IType> _1134___mcc_h79 = _source27.dtor_typeParameters;
        Dafny.ISequence<RAST._IExpr> _1135___mcc_h80 = _source27.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _1136_args = _1135___mcc_h80;
        Dafny.ISequence<RAST._IType> _1137_tpes = _1134___mcc_h79;
        RAST._IExpr _1138_obj = _1133___mcc_h78;
        return (BigInteger.One) + (RAST.__default.max((_1138_obj).Height(), RAST.__default.max(RAST.__default.SeqToHeight<RAST._IType>(_1137_tpes, ((System.Func<RAST._IType, BigInteger>)((_1139_tpe) => {
          return BigInteger.One;
        }))), RAST.__default.SeqToHeight<RAST._IExpr>(_1136_args, ((System.Func<RAST._IExpr, BigInteger>)((_1140_arg) => {
          return (_1140_arg).Height();
        }))))));
      } else if (_source27.is_Select) {
        RAST._IExpr _1141___mcc_h84 = _source27.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1142___mcc_h85 = _source27.dtor_name;
        Dafny.ISequence<Dafny.Rune> _1143_name = _1142___mcc_h85;
        RAST._IExpr _1144_expression = _1141___mcc_h84;
        return (BigInteger.One) + ((_1144_expression).Height());
      } else {
        RAST._IExpr _1145___mcc_h88 = _source27.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1146___mcc_h89 = _source27.dtor_name;
        Dafny.ISequence<Dafny.Rune> _1147_name = _1146___mcc_h89;
        RAST._IExpr _1148_expression = _1145___mcc_h88;
        return (BigInteger.One) + ((_1148_expression).Height());
      }
    }
    public RAST._IExpr Optimize() {
      RAST._IExpr _source35 = this;
      if (_source35.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _1149___mcc_h0 = _source35.dtor_content;
        return this;
      } else if (_source35.is_Identifier) {
        Dafny.ISequence<Dafny.Rune> _1150___mcc_h2 = _source35.dtor_name;
        return this;
      } else if (_source35.is_Match) {
        RAST._IExpr _1151___mcc_h4 = _source35.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _1152___mcc_h5 = _source35.dtor_cases;
        return this;
      } else if (_source35.is_StmtExpr) {
        RAST._IExpr _1153___mcc_h8 = _source35.dtor_stmt;
        RAST._IExpr _1154___mcc_h9 = _source35.dtor_rhs;
        RAST._IExpr _source36 = _1153___mcc_h8;
        if (_source36.is_RawExpr) {
          Dafny.ISequence<Dafny.Rune> _1155___mcc_h12 = _source36.dtor_content;
          return this;
        } else if (_source36.is_Identifier) {
          Dafny.ISequence<Dafny.Rune> _1156___mcc_h14 = _source36.dtor_name;
          return this;
        } else if (_source36.is_Match) {
          RAST._IExpr _1157___mcc_h16 = _source36.dtor_matchee;
          Dafny.ISequence<RAST._IMatchCase> _1158___mcc_h17 = _source36.dtor_cases;
          return this;
        } else if (_source36.is_StmtExpr) {
          RAST._IExpr _1159___mcc_h20 = _source36.dtor_stmt;
          RAST._IExpr _1160___mcc_h21 = _source36.dtor_rhs;
          return this;
        } else if (_source36.is_Block) {
          RAST._IExpr _1161___mcc_h24 = _source36.dtor_underlying;
          return this;
        } else if (_source36.is_StructBuild) {
          Dafny.ISequence<Dafny.Rune> _1162___mcc_h26 = _source36.dtor_name;
          Dafny.ISequence<RAST._IAssignIdentifier> _1163___mcc_h27 = _source36.dtor_assignments;
          return this;
        } else if (_source36.is_Tuple) {
          Dafny.ISequence<RAST._IExpr> _1164___mcc_h30 = _source36.dtor_arguments;
          return this;
        } else if (_source36.is_UnaryOp) {
          Dafny.ISequence<Dafny.Rune> _1165___mcc_h32 = _source36.dtor_op1;
          RAST._IExpr _1166___mcc_h33 = _source36.dtor_underlying;
          DAST.Format._IUnOpFormat _1167___mcc_h34 = _source36.dtor_format;
          return this;
        } else if (_source36.is_BinaryOp) {
          Dafny.ISequence<Dafny.Rune> _1168___mcc_h38 = _source36.dtor_op2;
          RAST._IExpr _1169___mcc_h39 = _source36.dtor_left;
          RAST._IExpr _1170___mcc_h40 = _source36.dtor_right;
          DAST.Format._IBinOpFormat _1171___mcc_h41 = _source36.dtor_format2;
          return this;
        } else if (_source36.is_LiteralInt) {
          Dafny.ISequence<Dafny.Rune> _1172___mcc_h46 = _source36.dtor_value;
          return this;
        } else if (_source36.is_ConversionNum) {
          RAST._IType _1173___mcc_h48 = _source36.dtor_tpe;
          RAST._IExpr _1174___mcc_h49 = _source36.dtor_underlying;
          return this;
        } else if (_source36.is_DeclareVar) {
          RAST._IDeclareType _1175___mcc_h52 = _source36.dtor_declareType;
          Dafny.ISequence<Dafny.Rune> _1176___mcc_h53 = _source36.dtor_name;
          Std.Wrappers._IOption<RAST._IType> _1177___mcc_h54 = _source36.dtor_optType;
          Std.Wrappers._IOption<RAST._IExpr> _1178___mcc_h55 = _source36.dtor_optRhs;
          Std.Wrappers._IOption<RAST._IType> _source37 = _1177___mcc_h54;
          if (_source37.is_None) {
            return this;
          } else {
            RAST._IType _1179___mcc_h60 = _source37.dtor_value;
            Std.Wrappers._IOption<RAST._IExpr> _source38 = _1178___mcc_h55;
            if (_source38.is_None) {
              RAST._IExpr _source39 = _1154___mcc_h9;
              if (_source39.is_RawExpr) {
                Dafny.ISequence<Dafny.Rune> _1180___mcc_h62 = _source39.dtor_content;
                return this;
              } else if (_source39.is_Identifier) {
                Dafny.ISequence<Dafny.Rune> _1181___mcc_h64 = _source39.dtor_name;
                return this;
              } else if (_source39.is_Match) {
                RAST._IExpr _1182___mcc_h66 = _source39.dtor_matchee;
                Dafny.ISequence<RAST._IMatchCase> _1183___mcc_h67 = _source39.dtor_cases;
                return this;
              } else if (_source39.is_StmtExpr) {
                RAST._IExpr _1184___mcc_h70 = _source39.dtor_stmt;
                RAST._IExpr _1185___mcc_h71 = _source39.dtor_rhs;
                RAST._IExpr _source40 = _1184___mcc_h70;
                if (_source40.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _1186___mcc_h74 = _source40.dtor_content;
                  return this;
                } else if (_source40.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _1187___mcc_h76 = _source40.dtor_name;
                  return this;
                } else if (_source40.is_Match) {
                  RAST._IExpr _1188___mcc_h78 = _source40.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _1189___mcc_h79 = _source40.dtor_cases;
                  return this;
                } else if (_source40.is_StmtExpr) {
                  RAST._IExpr _1190___mcc_h82 = _source40.dtor_stmt;
                  RAST._IExpr _1191___mcc_h83 = _source40.dtor_rhs;
                  return this;
                } else if (_source40.is_Block) {
                  RAST._IExpr _1192___mcc_h86 = _source40.dtor_underlying;
                  return this;
                } else if (_source40.is_StructBuild) {
                  Dafny.ISequence<Dafny.Rune> _1193___mcc_h88 = _source40.dtor_name;
                  Dafny.ISequence<RAST._IAssignIdentifier> _1194___mcc_h89 = _source40.dtor_assignments;
                  return this;
                } else if (_source40.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _1195___mcc_h92 = _source40.dtor_arguments;
                  return this;
                } else if (_source40.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _1196___mcc_h94 = _source40.dtor_op1;
                  RAST._IExpr _1197___mcc_h95 = _source40.dtor_underlying;
                  DAST.Format._IUnOpFormat _1198___mcc_h96 = _source40.dtor_format;
                  return this;
                } else if (_source40.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _1199___mcc_h100 = _source40.dtor_op2;
                  RAST._IExpr _1200___mcc_h101 = _source40.dtor_left;
                  RAST._IExpr _1201___mcc_h102 = _source40.dtor_right;
                  DAST.Format._IBinOpFormat _1202___mcc_h103 = _source40.dtor_format2;
                  return this;
                } else if (_source40.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _1203___mcc_h108 = _source40.dtor_value;
                  return this;
                } else if (_source40.is_ConversionNum) {
                  RAST._IType _1204___mcc_h110 = _source40.dtor_tpe;
                  RAST._IExpr _1205___mcc_h111 = _source40.dtor_underlying;
                  return this;
                } else if (_source40.is_DeclareVar) {
                  RAST._IDeclareType _1206___mcc_h114 = _source40.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _1207___mcc_h115 = _source40.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _1208___mcc_h116 = _source40.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _1209___mcc_h117 = _source40.dtor_optRhs;
                  return this;
                } else if (_source40.is_AssignVar) {
                  Dafny.ISequence<Dafny.Rune> _1210___mcc_h122 = _source40.dtor_name;
                  RAST._IExpr _1211___mcc_h123 = _source40.dtor_rhs;
                  RAST._IExpr _1212_last = _1185___mcc_h71;
                  RAST._IExpr _1213_rhs = _1211___mcc_h123;
                  Dafny.ISequence<Dafny.Rune> _1214_name2 = _1210___mcc_h122;
                  RAST._IType _1215_tpe = _1179___mcc_h60;
                  Dafny.ISequence<Dafny.Rune> _1216_name = _1176___mcc_h53;
                  RAST._IDeclareType _1217_mod = _1175___mcc_h52;
                  if ((_1216_name).Equals(_1214_name2)) {
                    RAST._IExpr _1218_rewriting = RAST.Expr.create_StmtExpr(RAST.Expr.create_DeclareVar(_1217_mod, _1216_name, Std.Wrappers.Option<RAST._IType>.create_Some(_1215_tpe), Std.Wrappers.Option<RAST._IExpr>.create_Some(_1213_rhs)), _1212_last);
                    return _1218_rewriting;
                  } else {
                    return this;
                  }
                } else if (_source40.is_IfExpr) {
                  RAST._IExpr _1219___mcc_h126 = _source40.dtor_cond;
                  RAST._IExpr _1220___mcc_h127 = _source40.dtor_thn;
                  RAST._IExpr _1221___mcc_h128 = _source40.dtor_els;
                  return this;
                } else if (_source40.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _1222___mcc_h132 = _source40.dtor_optCond;
                  RAST._IExpr _1223___mcc_h133 = _source40.dtor_underlying;
                  return this;
                } else if (_source40.is_For) {
                  Dafny.ISequence<Dafny.Rune> _1224___mcc_h136 = _source40.dtor_name;
                  RAST._IExpr _1225___mcc_h137 = _source40.dtor_range;
                  RAST._IExpr _1226___mcc_h138 = _source40.dtor_body;
                  return this;
                } else if (_source40.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _1227___mcc_h142 = _source40.dtor_lbl;
                  RAST._IExpr _1228___mcc_h143 = _source40.dtor_underlying;
                  return this;
                } else if (_source40.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1229___mcc_h146 = _source40.dtor_optLbl;
                  return this;
                } else if (_source40.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1230___mcc_h148 = _source40.dtor_optLbl;
                  return this;
                } else if (_source40.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _1231___mcc_h150 = _source40.dtor_optExpr;
                  return this;
                } else if (_source40.is_Call) {
                  RAST._IExpr _1232___mcc_h152 = _source40.dtor_obj;
                  Dafny.ISequence<RAST._IType> _1233___mcc_h153 = _source40.dtor_typeParameters;
                  Dafny.ISequence<RAST._IExpr> _1234___mcc_h154 = _source40.dtor_arguments;
                  return this;
                } else if (_source40.is_Select) {
                  RAST._IExpr _1235___mcc_h158 = _source40.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1236___mcc_h159 = _source40.dtor_name;
                  return this;
                } else {
                  RAST._IExpr _1237___mcc_h162 = _source40.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1238___mcc_h163 = _source40.dtor_name;
                  return this;
                }
              } else if (_source39.is_Block) {
                RAST._IExpr _1239___mcc_h166 = _source39.dtor_underlying;
                return this;
              } else if (_source39.is_StructBuild) {
                Dafny.ISequence<Dafny.Rune> _1240___mcc_h168 = _source39.dtor_name;
                Dafny.ISequence<RAST._IAssignIdentifier> _1241___mcc_h169 = _source39.dtor_assignments;
                return this;
              } else if (_source39.is_Tuple) {
                Dafny.ISequence<RAST._IExpr> _1242___mcc_h172 = _source39.dtor_arguments;
                return this;
              } else if (_source39.is_UnaryOp) {
                Dafny.ISequence<Dafny.Rune> _1243___mcc_h174 = _source39.dtor_op1;
                RAST._IExpr _1244___mcc_h175 = _source39.dtor_underlying;
                DAST.Format._IUnOpFormat _1245___mcc_h176 = _source39.dtor_format;
                return this;
              } else if (_source39.is_BinaryOp) {
                Dafny.ISequence<Dafny.Rune> _1246___mcc_h180 = _source39.dtor_op2;
                RAST._IExpr _1247___mcc_h181 = _source39.dtor_left;
                RAST._IExpr _1248___mcc_h182 = _source39.dtor_right;
                DAST.Format._IBinOpFormat _1249___mcc_h183 = _source39.dtor_format2;
                return this;
              } else if (_source39.is_LiteralInt) {
                Dafny.ISequence<Dafny.Rune> _1250___mcc_h188 = _source39.dtor_value;
                return this;
              } else if (_source39.is_ConversionNum) {
                RAST._IType _1251___mcc_h190 = _source39.dtor_tpe;
                RAST._IExpr _1252___mcc_h191 = _source39.dtor_underlying;
                return this;
              } else if (_source39.is_DeclareVar) {
                RAST._IDeclareType _1253___mcc_h194 = _source39.dtor_declareType;
                Dafny.ISequence<Dafny.Rune> _1254___mcc_h195 = _source39.dtor_name;
                Std.Wrappers._IOption<RAST._IType> _1255___mcc_h196 = _source39.dtor_optType;
                Std.Wrappers._IOption<RAST._IExpr> _1256___mcc_h197 = _source39.dtor_optRhs;
                return this;
              } else if (_source39.is_AssignVar) {
                Dafny.ISequence<Dafny.Rune> _1257___mcc_h202 = _source39.dtor_name;
                RAST._IExpr _1258___mcc_h203 = _source39.dtor_rhs;
                return this;
              } else if (_source39.is_IfExpr) {
                RAST._IExpr _1259___mcc_h206 = _source39.dtor_cond;
                RAST._IExpr _1260___mcc_h207 = _source39.dtor_thn;
                RAST._IExpr _1261___mcc_h208 = _source39.dtor_els;
                return this;
              } else if (_source39.is_Loop) {
                Std.Wrappers._IOption<RAST._IExpr> _1262___mcc_h212 = _source39.dtor_optCond;
                RAST._IExpr _1263___mcc_h213 = _source39.dtor_underlying;
                return this;
              } else if (_source39.is_For) {
                Dafny.ISequence<Dafny.Rune> _1264___mcc_h216 = _source39.dtor_name;
                RAST._IExpr _1265___mcc_h217 = _source39.dtor_range;
                RAST._IExpr _1266___mcc_h218 = _source39.dtor_body;
                return this;
              } else if (_source39.is_Labelled) {
                Dafny.ISequence<Dafny.Rune> _1267___mcc_h222 = _source39.dtor_lbl;
                RAST._IExpr _1268___mcc_h223 = _source39.dtor_underlying;
                return this;
              } else if (_source39.is_Break) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1269___mcc_h226 = _source39.dtor_optLbl;
                return this;
              } else if (_source39.is_Continue) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1270___mcc_h228 = _source39.dtor_optLbl;
                return this;
              } else if (_source39.is_Return) {
                Std.Wrappers._IOption<RAST._IExpr> _1271___mcc_h230 = _source39.dtor_optExpr;
                return this;
              } else if (_source39.is_Call) {
                RAST._IExpr _1272___mcc_h232 = _source39.dtor_obj;
                Dafny.ISequence<RAST._IType> _1273___mcc_h233 = _source39.dtor_typeParameters;
                Dafny.ISequence<RAST._IExpr> _1274___mcc_h234 = _source39.dtor_arguments;
                return this;
              } else if (_source39.is_Select) {
                RAST._IExpr _1275___mcc_h238 = _source39.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _1276___mcc_h239 = _source39.dtor_name;
                return this;
              } else {
                RAST._IExpr _1277___mcc_h242 = _source39.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _1278___mcc_h243 = _source39.dtor_name;
                return this;
              }
            } else {
              RAST._IExpr _1279___mcc_h246 = _source38.dtor_value;
              return this;
            }
          }
        } else if (_source36.is_AssignVar) {
          Dafny.ISequence<Dafny.Rune> _1280___mcc_h248 = _source36.dtor_name;
          RAST._IExpr _1281___mcc_h249 = _source36.dtor_rhs;
          return this;
        } else if (_source36.is_IfExpr) {
          RAST._IExpr _1282___mcc_h252 = _source36.dtor_cond;
          RAST._IExpr _1283___mcc_h253 = _source36.dtor_thn;
          RAST._IExpr _1284___mcc_h254 = _source36.dtor_els;
          return this;
        } else if (_source36.is_Loop) {
          Std.Wrappers._IOption<RAST._IExpr> _1285___mcc_h258 = _source36.dtor_optCond;
          RAST._IExpr _1286___mcc_h259 = _source36.dtor_underlying;
          return this;
        } else if (_source36.is_For) {
          Dafny.ISequence<Dafny.Rune> _1287___mcc_h262 = _source36.dtor_name;
          RAST._IExpr _1288___mcc_h263 = _source36.dtor_range;
          RAST._IExpr _1289___mcc_h264 = _source36.dtor_body;
          return this;
        } else if (_source36.is_Labelled) {
          Dafny.ISequence<Dafny.Rune> _1290___mcc_h268 = _source36.dtor_lbl;
          RAST._IExpr _1291___mcc_h269 = _source36.dtor_underlying;
          return this;
        } else if (_source36.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1292___mcc_h272 = _source36.dtor_optLbl;
          return this;
        } else if (_source36.is_Continue) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1293___mcc_h274 = _source36.dtor_optLbl;
          return this;
        } else if (_source36.is_Return) {
          Std.Wrappers._IOption<RAST._IExpr> _1294___mcc_h276 = _source36.dtor_optExpr;
          return this;
        } else if (_source36.is_Call) {
          RAST._IExpr _1295___mcc_h278 = _source36.dtor_obj;
          Dafny.ISequence<RAST._IType> _1296___mcc_h279 = _source36.dtor_typeParameters;
          Dafny.ISequence<RAST._IExpr> _1297___mcc_h280 = _source36.dtor_arguments;
          return this;
        } else if (_source36.is_Select) {
          RAST._IExpr _1298___mcc_h284 = _source36.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _1299___mcc_h285 = _source36.dtor_name;
          return this;
        } else {
          RAST._IExpr _1300___mcc_h288 = _source36.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _1301___mcc_h289 = _source36.dtor_name;
          return this;
        }
      } else if (_source35.is_Block) {
        RAST._IExpr _1302___mcc_h292 = _source35.dtor_underlying;
        return this;
      } else if (_source35.is_StructBuild) {
        Dafny.ISequence<Dafny.Rune> _1303___mcc_h294 = _source35.dtor_name;
        Dafny.ISequence<RAST._IAssignIdentifier> _1304___mcc_h295 = _source35.dtor_assignments;
        return this;
      } else if (_source35.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _1305___mcc_h298 = _source35.dtor_arguments;
        return this;
      } else if (_source35.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _1306___mcc_h300 = _source35.dtor_op1;
        RAST._IExpr _1307___mcc_h301 = _source35.dtor_underlying;
        DAST.Format._IUnOpFormat _1308___mcc_h302 = _source35.dtor_format;
        if (object.Equals(_1306___mcc_h300, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
          RAST._IExpr _source41 = _1307___mcc_h301;
          if (_source41.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _1309___mcc_h306 = _source41.dtor_content;
            return this;
          } else if (_source41.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _1310___mcc_h308 = _source41.dtor_name;
            return this;
          } else if (_source41.is_Match) {
            RAST._IExpr _1311___mcc_h310 = _source41.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _1312___mcc_h311 = _source41.dtor_cases;
            return this;
          } else if (_source41.is_StmtExpr) {
            RAST._IExpr _1313___mcc_h314 = _source41.dtor_stmt;
            RAST._IExpr _1314___mcc_h315 = _source41.dtor_rhs;
            return this;
          } else if (_source41.is_Block) {
            RAST._IExpr _1315___mcc_h318 = _source41.dtor_underlying;
            return this;
          } else if (_source41.is_StructBuild) {
            Dafny.ISequence<Dafny.Rune> _1316___mcc_h320 = _source41.dtor_name;
            Dafny.ISequence<RAST._IAssignIdentifier> _1317___mcc_h321 = _source41.dtor_assignments;
            return this;
          } else if (_source41.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _1318___mcc_h324 = _source41.dtor_arguments;
            return this;
          } else if (_source41.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _1319___mcc_h326 = _source41.dtor_op1;
            RAST._IExpr _1320___mcc_h327 = _source41.dtor_underlying;
            DAST.Format._IUnOpFormat _1321___mcc_h328 = _source41.dtor_format;
            return this;
          } else if (_source41.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _1322___mcc_h332 = _source41.dtor_op2;
            RAST._IExpr _1323___mcc_h333 = _source41.dtor_left;
            RAST._IExpr _1324___mcc_h334 = _source41.dtor_right;
            DAST.Format._IBinOpFormat _1325___mcc_h335 = _source41.dtor_format2;
            return this;
          } else if (_source41.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _1326___mcc_h340 = _source41.dtor_value;
            return this;
          } else if (_source41.is_ConversionNum) {
            RAST._IType _1327___mcc_h342 = _source41.dtor_tpe;
            RAST._IExpr _1328___mcc_h343 = _source41.dtor_underlying;
            return this;
          } else if (_source41.is_DeclareVar) {
            RAST._IDeclareType _1329___mcc_h346 = _source41.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _1330___mcc_h347 = _source41.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _1331___mcc_h348 = _source41.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _1332___mcc_h349 = _source41.dtor_optRhs;
            return this;
          } else if (_source41.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _1333___mcc_h354 = _source41.dtor_name;
            RAST._IExpr _1334___mcc_h355 = _source41.dtor_rhs;
            return this;
          } else if (_source41.is_IfExpr) {
            RAST._IExpr _1335___mcc_h358 = _source41.dtor_cond;
            RAST._IExpr _1336___mcc_h359 = _source41.dtor_thn;
            RAST._IExpr _1337___mcc_h360 = _source41.dtor_els;
            return this;
          } else if (_source41.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1338___mcc_h364 = _source41.dtor_optCond;
            RAST._IExpr _1339___mcc_h365 = _source41.dtor_underlying;
            return this;
          } else if (_source41.is_For) {
            Dafny.ISequence<Dafny.Rune> _1340___mcc_h368 = _source41.dtor_name;
            RAST._IExpr _1341___mcc_h369 = _source41.dtor_range;
            RAST._IExpr _1342___mcc_h370 = _source41.dtor_body;
            return this;
          } else if (_source41.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1343___mcc_h374 = _source41.dtor_lbl;
            RAST._IExpr _1344___mcc_h375 = _source41.dtor_underlying;
            return this;
          } else if (_source41.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1345___mcc_h378 = _source41.dtor_optLbl;
            return this;
          } else if (_source41.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1346___mcc_h380 = _source41.dtor_optLbl;
            return this;
          } else if (_source41.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1347___mcc_h382 = _source41.dtor_optExpr;
            return this;
          } else if (_source41.is_Call) {
            RAST._IExpr _1348___mcc_h384 = _source41.dtor_obj;
            Dafny.ISequence<RAST._IType> _1349___mcc_h385 = _source41.dtor_typeParameters;
            Dafny.ISequence<RAST._IExpr> _1350___mcc_h386 = _source41.dtor_arguments;
            RAST._IExpr _source42 = _1348___mcc_h384;
            if (_source42.is_RawExpr) {
              Dafny.ISequence<Dafny.Rune> _1351___mcc_h390 = _source42.dtor_content;
              return this;
            } else if (_source42.is_Identifier) {
              Dafny.ISequence<Dafny.Rune> _1352___mcc_h392 = _source42.dtor_name;
              return this;
            } else if (_source42.is_Match) {
              RAST._IExpr _1353___mcc_h394 = _source42.dtor_matchee;
              Dafny.ISequence<RAST._IMatchCase> _1354___mcc_h395 = _source42.dtor_cases;
              return this;
            } else if (_source42.is_StmtExpr) {
              RAST._IExpr _1355___mcc_h398 = _source42.dtor_stmt;
              RAST._IExpr _1356___mcc_h399 = _source42.dtor_rhs;
              return this;
            } else if (_source42.is_Block) {
              RAST._IExpr _1357___mcc_h402 = _source42.dtor_underlying;
              return this;
            } else if (_source42.is_StructBuild) {
              Dafny.ISequence<Dafny.Rune> _1358___mcc_h404 = _source42.dtor_name;
              Dafny.ISequence<RAST._IAssignIdentifier> _1359___mcc_h405 = _source42.dtor_assignments;
              return this;
            } else if (_source42.is_Tuple) {
              Dafny.ISequence<RAST._IExpr> _1360___mcc_h408 = _source42.dtor_arguments;
              return this;
            } else if (_source42.is_UnaryOp) {
              Dafny.ISequence<Dafny.Rune> _1361___mcc_h410 = _source42.dtor_op1;
              RAST._IExpr _1362___mcc_h411 = _source42.dtor_underlying;
              DAST.Format._IUnOpFormat _1363___mcc_h412 = _source42.dtor_format;
              return this;
            } else if (_source42.is_BinaryOp) {
              Dafny.ISequence<Dafny.Rune> _1364___mcc_h416 = _source42.dtor_op2;
              RAST._IExpr _1365___mcc_h417 = _source42.dtor_left;
              RAST._IExpr _1366___mcc_h418 = _source42.dtor_right;
              DAST.Format._IBinOpFormat _1367___mcc_h419 = _source42.dtor_format2;
              return this;
            } else if (_source42.is_LiteralInt) {
              Dafny.ISequence<Dafny.Rune> _1368___mcc_h424 = _source42.dtor_value;
              return this;
            } else if (_source42.is_ConversionNum) {
              RAST._IType _1369___mcc_h426 = _source42.dtor_tpe;
              RAST._IExpr _1370___mcc_h427 = _source42.dtor_underlying;
              return this;
            } else if (_source42.is_DeclareVar) {
              RAST._IDeclareType _1371___mcc_h430 = _source42.dtor_declareType;
              Dafny.ISequence<Dafny.Rune> _1372___mcc_h431 = _source42.dtor_name;
              Std.Wrappers._IOption<RAST._IType> _1373___mcc_h432 = _source42.dtor_optType;
              Std.Wrappers._IOption<RAST._IExpr> _1374___mcc_h433 = _source42.dtor_optRhs;
              return this;
            } else if (_source42.is_AssignVar) {
              Dafny.ISequence<Dafny.Rune> _1375___mcc_h438 = _source42.dtor_name;
              RAST._IExpr _1376___mcc_h439 = _source42.dtor_rhs;
              return this;
            } else if (_source42.is_IfExpr) {
              RAST._IExpr _1377___mcc_h442 = _source42.dtor_cond;
              RAST._IExpr _1378___mcc_h443 = _source42.dtor_thn;
              RAST._IExpr _1379___mcc_h444 = _source42.dtor_els;
              return this;
            } else if (_source42.is_Loop) {
              Std.Wrappers._IOption<RAST._IExpr> _1380___mcc_h448 = _source42.dtor_optCond;
              RAST._IExpr _1381___mcc_h449 = _source42.dtor_underlying;
              return this;
            } else if (_source42.is_For) {
              Dafny.ISequence<Dafny.Rune> _1382___mcc_h452 = _source42.dtor_name;
              RAST._IExpr _1383___mcc_h453 = _source42.dtor_range;
              RAST._IExpr _1384___mcc_h454 = _source42.dtor_body;
              return this;
            } else if (_source42.is_Labelled) {
              Dafny.ISequence<Dafny.Rune> _1385___mcc_h458 = _source42.dtor_lbl;
              RAST._IExpr _1386___mcc_h459 = _source42.dtor_underlying;
              return this;
            } else if (_source42.is_Break) {
              Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1387___mcc_h462 = _source42.dtor_optLbl;
              return this;
            } else if (_source42.is_Continue) {
              Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1388___mcc_h464 = _source42.dtor_optLbl;
              return this;
            } else if (_source42.is_Return) {
              Std.Wrappers._IOption<RAST._IExpr> _1389___mcc_h466 = _source42.dtor_optExpr;
              return this;
            } else if (_source42.is_Call) {
              RAST._IExpr _1390___mcc_h468 = _source42.dtor_obj;
              Dafny.ISequence<RAST._IType> _1391___mcc_h469 = _source42.dtor_typeParameters;
              Dafny.ISequence<RAST._IExpr> _1392___mcc_h470 = _source42.dtor_arguments;
              return this;
            } else if (_source42.is_Select) {
              RAST._IExpr _1393___mcc_h474 = _source42.dtor_obj;
              Dafny.ISequence<Dafny.Rune> _1394___mcc_h475 = _source42.dtor_name;
              if (object.Equals(_1394___mcc_h475, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))) {
                DAST.Format._IUnOpFormat _1395_format = _1308___mcc_h302;
                Dafny.ISequence<RAST._IExpr> _1396_args = _1350___mcc_h386;
                Dafny.ISequence<RAST._IType> _1397_typeArgs = _1349___mcc_h385;
                RAST._IExpr _1398_underlying = _1393___mcc_h474;
                if (((_1397_typeArgs).Equals(Dafny.Sequence<RAST._IType>.FromElements())) && ((_1396_args).Equals(Dafny.Sequence<RAST._IExpr>.FromElements()))) {
                  return RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _1398_underlying, _1395_format);
                } else {
                  return this;
                }
              } else {
                return this;
              }
            } else {
              RAST._IExpr _1399___mcc_h478 = _source42.dtor_obj;
              Dafny.ISequence<Dafny.Rune> _1400___mcc_h479 = _source42.dtor_name;
              return this;
            }
          } else if (_source41.is_Select) {
            RAST._IExpr _1401___mcc_h482 = _source41.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1402___mcc_h483 = _source41.dtor_name;
            return this;
          } else {
            RAST._IExpr _1403___mcc_h486 = _source41.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1404___mcc_h487 = _source41.dtor_name;
            return this;
          }
        } else if (object.Equals(_1306___mcc_h300, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"))) {
          RAST._IExpr _source43 = _1307___mcc_h301;
          if (_source43.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _1405___mcc_h490 = _source43.dtor_content;
            return this;
          } else if (_source43.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _1406___mcc_h492 = _source43.dtor_name;
            return this;
          } else if (_source43.is_Match) {
            RAST._IExpr _1407___mcc_h494 = _source43.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _1408___mcc_h495 = _source43.dtor_cases;
            return this;
          } else if (_source43.is_StmtExpr) {
            RAST._IExpr _1409___mcc_h498 = _source43.dtor_stmt;
            RAST._IExpr _1410___mcc_h499 = _source43.dtor_rhs;
            return this;
          } else if (_source43.is_Block) {
            RAST._IExpr _1411___mcc_h502 = _source43.dtor_underlying;
            return this;
          } else if (_source43.is_StructBuild) {
            Dafny.ISequence<Dafny.Rune> _1412___mcc_h504 = _source43.dtor_name;
            Dafny.ISequence<RAST._IAssignIdentifier> _1413___mcc_h505 = _source43.dtor_assignments;
            return this;
          } else if (_source43.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _1414___mcc_h508 = _source43.dtor_arguments;
            return this;
          } else if (_source43.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _1415___mcc_h510 = _source43.dtor_op1;
            RAST._IExpr _1416___mcc_h511 = _source43.dtor_underlying;
            DAST.Format._IUnOpFormat _1417___mcc_h512 = _source43.dtor_format;
            return this;
          } else if (_source43.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _1418___mcc_h516 = _source43.dtor_op2;
            RAST._IExpr _1419___mcc_h517 = _source43.dtor_left;
            RAST._IExpr _1420___mcc_h518 = _source43.dtor_right;
            DAST.Format._IBinOpFormat _1421___mcc_h519 = _source43.dtor_format2;
            if (object.Equals(_1418___mcc_h516, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="))) {
              DAST.Format._IUnOpFormat _source44 = _1308___mcc_h302;
              if (_source44.is_NoFormat) {
                return this;
              } else {
                DAST.Format._IBinOpFormat _1422_format = _1421___mcc_h519;
                RAST._IExpr _1423_right = _1420___mcc_h518;
                RAST._IExpr _1424_left = _1419___mcc_h517;
                return RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!="), _1424_left, _1423_right, DAST.Format.BinOpFormat.create_NoFormat());
              }
            } else if (object.Equals(_1418___mcc_h516, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"))) {
              DAST.Format._IBinOpFormat _source45 = _1421___mcc_h519;
              if (_source45.is_NoFormat) {
                DAST.Format._IUnOpFormat _source46 = _1308___mcc_h302;
                if (_source46.is_NoFormat) {
                  return this;
                } else {
                  RAST._IExpr _1425_right = _1420___mcc_h518;
                  RAST._IExpr _1426_left = _1419___mcc_h517;
                  return RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">="), _1426_left, _1425_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              } else if (_source45.is_ImpliesFormat) {
                return this;
              } else if (_source45.is_Equivalence) {
                return this;
              } else {
                DAST.Format._IUnOpFormat _source47 = _1308___mcc_h302;
                if (_source47.is_NoFormat) {
                  return this;
                } else {
                  RAST._IExpr _1427_right = _1420___mcc_h518;
                  RAST._IExpr _1428_left = _1419___mcc_h517;
                  return RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _1427_right, _1428_left, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else {
              return this;
            }
          } else if (_source43.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _1429___mcc_h524 = _source43.dtor_value;
            return this;
          } else if (_source43.is_ConversionNum) {
            RAST._IType _1430___mcc_h526 = _source43.dtor_tpe;
            RAST._IExpr _1431___mcc_h527 = _source43.dtor_underlying;
            return this;
          } else if (_source43.is_DeclareVar) {
            RAST._IDeclareType _1432___mcc_h530 = _source43.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _1433___mcc_h531 = _source43.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _1434___mcc_h532 = _source43.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _1435___mcc_h533 = _source43.dtor_optRhs;
            return this;
          } else if (_source43.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _1436___mcc_h538 = _source43.dtor_name;
            RAST._IExpr _1437___mcc_h539 = _source43.dtor_rhs;
            return this;
          } else if (_source43.is_IfExpr) {
            RAST._IExpr _1438___mcc_h542 = _source43.dtor_cond;
            RAST._IExpr _1439___mcc_h543 = _source43.dtor_thn;
            RAST._IExpr _1440___mcc_h544 = _source43.dtor_els;
            return this;
          } else if (_source43.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1441___mcc_h548 = _source43.dtor_optCond;
            RAST._IExpr _1442___mcc_h549 = _source43.dtor_underlying;
            return this;
          } else if (_source43.is_For) {
            Dafny.ISequence<Dafny.Rune> _1443___mcc_h552 = _source43.dtor_name;
            RAST._IExpr _1444___mcc_h553 = _source43.dtor_range;
            RAST._IExpr _1445___mcc_h554 = _source43.dtor_body;
            return this;
          } else if (_source43.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1446___mcc_h558 = _source43.dtor_lbl;
            RAST._IExpr _1447___mcc_h559 = _source43.dtor_underlying;
            return this;
          } else if (_source43.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1448___mcc_h562 = _source43.dtor_optLbl;
            return this;
          } else if (_source43.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1449___mcc_h564 = _source43.dtor_optLbl;
            return this;
          } else if (_source43.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1450___mcc_h566 = _source43.dtor_optExpr;
            return this;
          } else if (_source43.is_Call) {
            RAST._IExpr _1451___mcc_h568 = _source43.dtor_obj;
            Dafny.ISequence<RAST._IType> _1452___mcc_h569 = _source43.dtor_typeParameters;
            Dafny.ISequence<RAST._IExpr> _1453___mcc_h570 = _source43.dtor_arguments;
            return this;
          } else if (_source43.is_Select) {
            RAST._IExpr _1454___mcc_h574 = _source43.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1455___mcc_h575 = _source43.dtor_name;
            return this;
          } else {
            RAST._IExpr _1456___mcc_h578 = _source43.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1457___mcc_h579 = _source43.dtor_name;
            return this;
          }
        } else {
          return this;
        }
      } else if (_source35.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _1458___mcc_h582 = _source35.dtor_op2;
        RAST._IExpr _1459___mcc_h583 = _source35.dtor_left;
        RAST._IExpr _1460___mcc_h584 = _source35.dtor_right;
        DAST.Format._IBinOpFormat _1461___mcc_h585 = _source35.dtor_format2;
        return this;
      } else if (_source35.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _1462___mcc_h590 = _source35.dtor_value;
        return this;
      } else if (_source35.is_ConversionNum) {
        RAST._IType _1463___mcc_h592 = _source35.dtor_tpe;
        RAST._IExpr _1464___mcc_h593 = _source35.dtor_underlying;
        RAST._IExpr _1465_expr = _1464___mcc_h593;
        RAST._IType _1466_tpe = _1463___mcc_h592;
        if (((((((((((_1466_tpe).is_U8) || ((_1466_tpe).is_U16)) || ((_1466_tpe).is_U32)) || ((_1466_tpe).is_U64)) || ((_1466_tpe).is_U128)) || ((_1466_tpe).is_I8)) || ((_1466_tpe).is_I16)) || ((_1466_tpe).is_I32)) || ((_1466_tpe).is_I64)) || ((_1466_tpe).is_I128)) {
          RAST._IExpr _source48 = _1465_expr;
          if (_source48.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _1467___mcc_h648 = _source48.dtor_content;
            return this;
          } else if (_source48.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _1468___mcc_h650 = _source48.dtor_name;
            return this;
          } else if (_source48.is_Match) {
            RAST._IExpr _1469___mcc_h652 = _source48.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _1470___mcc_h653 = _source48.dtor_cases;
            return this;
          } else if (_source48.is_StmtExpr) {
            RAST._IExpr _1471___mcc_h656 = _source48.dtor_stmt;
            RAST._IExpr _1472___mcc_h657 = _source48.dtor_rhs;
            return this;
          } else if (_source48.is_Block) {
            RAST._IExpr _1473___mcc_h660 = _source48.dtor_underlying;
            return this;
          } else if (_source48.is_StructBuild) {
            Dafny.ISequence<Dafny.Rune> _1474___mcc_h662 = _source48.dtor_name;
            Dafny.ISequence<RAST._IAssignIdentifier> _1475___mcc_h663 = _source48.dtor_assignments;
            return this;
          } else if (_source48.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _1476___mcc_h666 = _source48.dtor_arguments;
            return this;
          } else if (_source48.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _1477___mcc_h668 = _source48.dtor_op1;
            RAST._IExpr _1478___mcc_h669 = _source48.dtor_underlying;
            DAST.Format._IUnOpFormat _1479___mcc_h670 = _source48.dtor_format;
            return this;
          } else if (_source48.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _1480___mcc_h674 = _source48.dtor_op2;
            RAST._IExpr _1481___mcc_h675 = _source48.dtor_left;
            RAST._IExpr _1482___mcc_h676 = _source48.dtor_right;
            DAST.Format._IBinOpFormat _1483___mcc_h677 = _source48.dtor_format2;
            return this;
          } else if (_source48.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _1484___mcc_h682 = _source48.dtor_value;
            Dafny.ISequence<Dafny.Rune> _1485_number = _1484___mcc_h682;
            return RAST.Expr.create_RawExpr(_1485_number);
          } else if (_source48.is_ConversionNum) {
            RAST._IType _1486___mcc_h684 = _source48.dtor_tpe;
            RAST._IExpr _1487___mcc_h685 = _source48.dtor_underlying;
            return this;
          } else if (_source48.is_DeclareVar) {
            RAST._IDeclareType _1488___mcc_h688 = _source48.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _1489___mcc_h689 = _source48.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _1490___mcc_h690 = _source48.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _1491___mcc_h691 = _source48.dtor_optRhs;
            return this;
          } else if (_source48.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _1492___mcc_h696 = _source48.dtor_name;
            RAST._IExpr _1493___mcc_h697 = _source48.dtor_rhs;
            return this;
          } else if (_source48.is_IfExpr) {
            RAST._IExpr _1494___mcc_h700 = _source48.dtor_cond;
            RAST._IExpr _1495___mcc_h701 = _source48.dtor_thn;
            RAST._IExpr _1496___mcc_h702 = _source48.dtor_els;
            return this;
          } else if (_source48.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1497___mcc_h706 = _source48.dtor_optCond;
            RAST._IExpr _1498___mcc_h707 = _source48.dtor_underlying;
            return this;
          } else if (_source48.is_For) {
            Dafny.ISequence<Dafny.Rune> _1499___mcc_h710 = _source48.dtor_name;
            RAST._IExpr _1500___mcc_h711 = _source48.dtor_range;
            RAST._IExpr _1501___mcc_h712 = _source48.dtor_body;
            return this;
          } else if (_source48.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1502___mcc_h716 = _source48.dtor_lbl;
            RAST._IExpr _1503___mcc_h717 = _source48.dtor_underlying;
            return this;
          } else if (_source48.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1504___mcc_h720 = _source48.dtor_optLbl;
            return this;
          } else if (_source48.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1505___mcc_h722 = _source48.dtor_optLbl;
            return this;
          } else if (_source48.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1506___mcc_h724 = _source48.dtor_optExpr;
            return this;
          } else if (_source48.is_Call) {
            RAST._IExpr _1507___mcc_h726 = _source48.dtor_obj;
            Dafny.ISequence<RAST._IType> _1508___mcc_h727 = _source48.dtor_typeParameters;
            Dafny.ISequence<RAST._IExpr> _1509___mcc_h728 = _source48.dtor_arguments;
            return this;
          } else if (_source48.is_Select) {
            RAST._IExpr _1510___mcc_h732 = _source48.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1511___mcc_h733 = _source48.dtor_name;
            return this;
          } else {
            RAST._IExpr _1512___mcc_h736 = _source48.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1513___mcc_h737 = _source48.dtor_name;
            return this;
          }
        } else {
          return this;
        }
      } else if (_source35.is_DeclareVar) {
        RAST._IDeclareType _1514___mcc_h596 = _source35.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _1515___mcc_h597 = _source35.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _1516___mcc_h598 = _source35.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _1517___mcc_h599 = _source35.dtor_optRhs;
        return this;
      } else if (_source35.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _1518___mcc_h604 = _source35.dtor_name;
        RAST._IExpr _1519___mcc_h605 = _source35.dtor_rhs;
        return this;
      } else if (_source35.is_IfExpr) {
        RAST._IExpr _1520___mcc_h608 = _source35.dtor_cond;
        RAST._IExpr _1521___mcc_h609 = _source35.dtor_thn;
        RAST._IExpr _1522___mcc_h610 = _source35.dtor_els;
        return this;
      } else if (_source35.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _1523___mcc_h614 = _source35.dtor_optCond;
        RAST._IExpr _1524___mcc_h615 = _source35.dtor_underlying;
        return this;
      } else if (_source35.is_For) {
        Dafny.ISequence<Dafny.Rune> _1525___mcc_h618 = _source35.dtor_name;
        RAST._IExpr _1526___mcc_h619 = _source35.dtor_range;
        RAST._IExpr _1527___mcc_h620 = _source35.dtor_body;
        return this;
      } else if (_source35.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _1528___mcc_h624 = _source35.dtor_lbl;
        RAST._IExpr _1529___mcc_h625 = _source35.dtor_underlying;
        return this;
      } else if (_source35.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1530___mcc_h628 = _source35.dtor_optLbl;
        return this;
      } else if (_source35.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1531___mcc_h630 = _source35.dtor_optLbl;
        return this;
      } else if (_source35.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _1532___mcc_h632 = _source35.dtor_optExpr;
        return this;
      } else if (_source35.is_Call) {
        RAST._IExpr _1533___mcc_h634 = _source35.dtor_obj;
        Dafny.ISequence<RAST._IType> _1534___mcc_h635 = _source35.dtor_typeParameters;
        Dafny.ISequence<RAST._IExpr> _1535___mcc_h636 = _source35.dtor_arguments;
        return this;
      } else if (_source35.is_Select) {
        RAST._IExpr _1536___mcc_h640 = _source35.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1537___mcc_h641 = _source35.dtor_name;
        return this;
      } else {
        RAST._IExpr _1538___mcc_h644 = _source35.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1539___mcc_h645 = _source35.dtor_name;
        return this;
      }
    }
    public bool LeftRequiresParentheses(RAST._IExpr left) {
      return ((this).printingInfo).NeedParenthesesForLeft((left).printingInfo);
    }
    public _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> LeftParentheses(RAST._IExpr left) {
      if ((this).LeftRequiresParentheses(left)) {
        return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      } else {
        return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      }
    }
    public bool RightRequiresParentheses(RAST._IExpr right) {
      return ((this).printingInfo).NeedParenthesesForRight((right).printingInfo);
    }
    public _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> RightParentheses(RAST._IExpr right) {
      if ((this).RightRequiresParentheses(right)) {
        return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      } else {
        return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      var _pat_let_tv4 = ind;
      RAST._IExpr _source49 = (this).Optimize();
      if (_source49.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _1540___mcc_h0 = _source49.dtor_content;
        RAST._IExpr _1541_r = (this).Optimize();
        return RAST.__default.AddIndent((_1541_r).dtor_content, ind);
      } else if (_source49.is_Identifier) {
        Dafny.ISequence<Dafny.Rune> _1542___mcc_h2 = _source49.dtor_name;
        Dafny.ISequence<Dafny.Rune> _1543_name = _1542___mcc_h2;
        return _1543_name;
      } else if (_source49.is_Match) {
        RAST._IExpr _1544___mcc_h4 = _source49.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _1545___mcc_h5 = _source49.dtor_cases;
        Dafny.ISequence<RAST._IMatchCase> _1546_cases = _1545___mcc_h5;
        RAST._IExpr _1547_matchee = _1544___mcc_h4;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match "), (_1547_matchee)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IMatchCase>(_1546_cases, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IMatchCase, Dafny.ISequence<Dafny.Rune>>>>((_1548_ind) => ((System.Func<RAST._IMatchCase, Dafny.ISequence<Dafny.Rune>>)((_1549_c) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _1548_ind), RAST.__default.IND), (_1549_c)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_1548_ind, RAST.__default.IND)));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source49.is_StmtExpr) {
        RAST._IExpr _1550___mcc_h8 = _source49.dtor_stmt;
        RAST._IExpr _1551___mcc_h9 = _source49.dtor_rhs;
        RAST._IExpr _1552_rhs = _1551___mcc_h9;
        RAST._IExpr _1553_stmt = _1550___mcc_h8;
        if (object.Equals(_1553_stmt, RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))) {
          return (_1552_rhs)._ToString(ind);
        } else {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_1553_stmt)._ToString(ind), (((_1553_stmt).NoExtraSemicolonAfter()) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), (_1552_rhs)._ToString(ind));
        }
      } else if (_source49.is_Block) {
        RAST._IExpr _1554___mcc_h12 = _source49.dtor_underlying;
        RAST._IExpr _1555_underlying = _1554___mcc_h12;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n"), ind), RAST.__default.IND), (_1555_underlying)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source49.is_StructBuild) {
        Dafny.ISequence<Dafny.Rune> _1556___mcc_h14 = _source49.dtor_name;
        Dafny.ISequence<RAST._IAssignIdentifier> _1557___mcc_h15 = _source49.dtor_assignments;
        Dafny.ISequence<RAST._IAssignIdentifier> _1558_assignments = _1557___mcc_h15;
        Dafny.ISequence<Dafny.Rune> _1559_name = _1556___mcc_h14;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1559_name, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IAssignIdentifier>(_1558_assignments, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IAssignIdentifier, Dafny.ISequence<Dafny.Rune>>>>((_1560_ind) => ((System.Func<RAST._IAssignIdentifier, Dafny.ISequence<Dafny.Rune>>)((_1561_assignment) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _1560_ind), RAST.__default.IND), (_1561_assignment)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_1560_ind, RAST.__default.IND)));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), (((new BigInteger((_1558_assignments).Count)).Sign == 1) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source49.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _1562___mcc_h18 = _source49.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _1563_arguments = _1562___mcc_h18;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), RAST.__default.SeqToString<RAST._IExpr>(_1563_arguments, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>>>((_1564_ind) => ((System.Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>)((_1565_arg) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _1564_ind), RAST.__default.IND), (_1565_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_1564_ind, RAST.__default.IND)));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), (((new BigInteger((_1563_arguments).Count)).Sign == 1) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      } else if (_source49.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _1566___mcc_h20 = _source49.dtor_op1;
        RAST._IExpr _1567___mcc_h21 = _source49.dtor_underlying;
        DAST.Format._IUnOpFormat _1568___mcc_h22 = _source49.dtor_format;
        DAST.Format._IUnOpFormat _1569_format = _1568___mcc_h22;
        RAST._IExpr _1570_underlying = _1567___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _1571_op = _1566___mcc_h20;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs41 = ((((this).printingInfo).NeedParenthesesFor((_1570_underlying).printingInfo)) ? (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))) : (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
        Dafny.ISequence<Dafny.Rune> _1572_leftP = _let_tmp_rhs41.dtor__0;
        Dafny.ISequence<Dafny.Rune> _1573_rightP = _let_tmp_rhs41.dtor__1;
        Dafny.ISequence<Dafny.Rune> _1574_leftOp = ((((_1571_op).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut"))) && (!(_1572_leftP).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_1571_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "))) : ((((_1571_op).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("?"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (_1571_op))));
        Dafny.ISequence<Dafny.Rune> _1575_rightOp = (((_1571_op).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("?"))) ? (_1571_op) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")));
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1574_leftOp, _1572_leftP), (_1570_underlying)._ToString(ind)), _1573_rightP), _1575_rightOp);
      } else if (_source49.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _1576___mcc_h26 = _source49.dtor_op2;
        RAST._IExpr _1577___mcc_h27 = _source49.dtor_left;
        RAST._IExpr _1578___mcc_h28 = _source49.dtor_right;
        DAST.Format._IBinOpFormat _1579___mcc_h29 = _source49.dtor_format2;
        DAST.Format._IBinOpFormat _1580_format = _1579___mcc_h29;
        RAST._IExpr _1581_right = _1578___mcc_h28;
        RAST._IExpr _1582_left = _1577___mcc_h27;
        Dafny.ISequence<Dafny.Rune> _1583_op2 = _1576___mcc_h26;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs42 = (this).LeftParentheses(_1582_left);
        Dafny.ISequence<Dafny.Rune> _1584_leftLeftP = _let_tmp_rhs42.dtor__0;
        Dafny.ISequence<Dafny.Rune> _1585_leftRighP = _let_tmp_rhs42.dtor__1;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs43 = (this).RightParentheses(_1581_right);
        Dafny.ISequence<Dafny.Rune> _1586_rightLeftP = _let_tmp_rhs43.dtor__0;
        Dafny.ISequence<Dafny.Rune> _1587_rightRightP = _let_tmp_rhs43.dtor__1;
        Dafny.ISequence<Dafny.Rune> _1588_opRendered = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), _1583_op2), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
        Dafny.ISequence<Dafny.Rune> _1589_indLeft = (((_1584_leftLeftP).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("))) ? (Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)) : (ind));
        Dafny.ISequence<Dafny.Rune> _1590_indRight = (((_1586_rightLeftP).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("))) ? (Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)) : (ind));
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1584_leftLeftP, (_1582_left)._ToString(_1589_indLeft)), _1585_leftRighP), _1588_opRendered), _1586_rightLeftP), (_1581_right)._ToString(_1590_indRight)), _1587_rightRightP);
      } else if (_source49.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _1591___mcc_h34 = _source49.dtor_value;
        Dafny.ISequence<Dafny.Rune> _1592_number = _1591___mcc_h34;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyInt::parse_bytes(b\""), _1592_number), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10)"));
      } else if (_source49.is_ConversionNum) {
        RAST._IType _1593___mcc_h36 = _source49.dtor_tpe;
        RAST._IExpr _1594___mcc_h37 = _source49.dtor_underlying;
        RAST._IExpr _1595_expr = _1594___mcc_h37;
        RAST._IType _1596_tpe = _1593___mcc_h36;
        if (((((((((((_1596_tpe).is_U8) || ((_1596_tpe).is_U16)) || ((_1596_tpe).is_U32)) || ((_1596_tpe).is_U64)) || ((_1596_tpe).is_U128)) || ((_1596_tpe).is_I8)) || ((_1596_tpe).is_I16)) || ((_1596_tpe).is_I32)) || ((_1596_tpe).is_I64)) || ((_1596_tpe).is_I128)) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("num::ToPrimitive::to_"), (_1596_tpe)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1595_expr)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
        } else {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<b>Unsupported: Numeric conversion to "), (_1596_tpe)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("</b>"));
        }
      } else if (_source49.is_DeclareVar) {
        RAST._IDeclareType _1597___mcc_h40 = _source49.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _1598___mcc_h41 = _source49.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _1599___mcc_h42 = _source49.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _1600___mcc_h43 = _source49.dtor_optRhs;
        Std.Wrappers._IOption<RAST._IExpr> _1601_optExpr = _1600___mcc_h43;
        Std.Wrappers._IOption<RAST._IType> _1602_optType = _1599___mcc_h42;
        Dafny.ISequence<Dafny.Rune> _1603_name = _1598___mcc_h41;
        RAST._IDeclareType _1604_declareType = _1597___mcc_h40;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let "), ((object.Equals(_1604_declareType, RAST.DeclareType.create_MUT())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mut ")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), _1603_name), (((_1602_optType).is_Some) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": "), ((_1602_optType).dtor_value)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), (((_1601_optExpr).is_Some) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "), ((_1601_optExpr).dtor_value)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else if (_source49.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _1605___mcc_h48 = _source49.dtor_name;
        RAST._IExpr _1606___mcc_h49 = _source49.dtor_rhs;
        RAST._IExpr _1607_expr = _1606___mcc_h49;
        Dafny.ISequence<Dafny.Rune> _1608_name = _1605___mcc_h48;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1608_name, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), (_1607_expr)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else if (_source49.is_IfExpr) {
        RAST._IExpr _1609___mcc_h52 = _source49.dtor_cond;
        RAST._IExpr _1610___mcc_h53 = _source49.dtor_thn;
        RAST._IExpr _1611___mcc_h54 = _source49.dtor_els;
        RAST._IExpr _1612_els = _1611___mcc_h54;
        RAST._IExpr _1613_thn = _1610___mcc_h53;
        RAST._IExpr _1614_cond = _1609___mcc_h52;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if "), (_1614_cond)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), ind), RAST.__default.IND), (_1613_thn)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} else {\n")), ind), RAST.__default.IND), (_1612_els)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source49.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _1615___mcc_h58 = _source49.dtor_optCond;
        RAST._IExpr _1616___mcc_h59 = _source49.dtor_underlying;
        RAST._IExpr _1617_underlying = _1616___mcc_h59;
        Std.Wrappers._IOption<RAST._IExpr> _1618_optCond = _1615___mcc_h58;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((System.Func<Std.Wrappers._IOption<RAST._IExpr>, Dafny.ISequence<Dafny.Rune>>)((_source50) => {
          if (_source50.is_None) {
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("loop");
          } else {
            RAST._IExpr _1619___mcc_h92 = _source50.dtor_value;
            RAST._IExpr _1620_c = _1619___mcc_h92;
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while "), (_1620_c)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_pat_let_tv4, RAST.__default.IND)));
          }
        }))(_1618_optCond), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), ind), RAST.__default.IND), (_1617_underlying)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source49.is_For) {
        Dafny.ISequence<Dafny.Rune> _1621___mcc_h62 = _source49.dtor_name;
        RAST._IExpr _1622___mcc_h63 = _source49.dtor_range;
        RAST._IExpr _1623___mcc_h64 = _source49.dtor_body;
        RAST._IExpr _1624_body = _1623___mcc_h64;
        RAST._IExpr _1625_range = _1622___mcc_h63;
        Dafny.ISequence<Dafny.Rune> _1626_name = _1621___mcc_h62;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for "), _1626_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" in ")), (_1625_range)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), ind), RAST.__default.IND), (_1624_body)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source49.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _1627___mcc_h68 = _source49.dtor_lbl;
        RAST._IExpr _1628___mcc_h69 = _source49.dtor_underlying;
        RAST._IExpr _1629_underlying = _1628___mcc_h69;
        Dafny.ISequence<Dafny.Rune> _1630_name = _1627___mcc_h68;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'"), _1630_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_1629_underlying)._ToString(ind));
      } else if (_source49.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1631___mcc_h72 = _source49.dtor_optLbl;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1632_optLbl = _1631___mcc_h72;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source51 = _1632_optLbl;
        if (_source51.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;");
        } else {
          Dafny.ISequence<Dafny.Rune> _1633___mcc_h93 = _source51.dtor_value;
          Dafny.ISequence<Dafny.Rune> _1634_lbl = _1633___mcc_h93;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break '"), _1634_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
        }
      } else if (_source49.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1635___mcc_h74 = _source49.dtor_optLbl;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1636_optLbl = _1635___mcc_h74;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source52 = _1636_optLbl;
        if (_source52.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue;");
        } else {
          Dafny.ISequence<Dafny.Rune> _1637___mcc_h94 = _source52.dtor_value;
          Dafny.ISequence<Dafny.Rune> _1638_lbl = _1637___mcc_h94;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue '"), _1638_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
        }
      } else if (_source49.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _1639___mcc_h76 = _source49.dtor_optExpr;
        Std.Wrappers._IOption<RAST._IExpr> _1640_optExpr = _1639___mcc_h76;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), (((_1640_optExpr).is_Some) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), ((_1640_optExpr).dtor_value)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else if (_source49.is_Call) {
        RAST._IExpr _1641___mcc_h78 = _source49.dtor_obj;
        Dafny.ISequence<RAST._IType> _1642___mcc_h79 = _source49.dtor_typeParameters;
        Dafny.ISequence<RAST._IExpr> _1643___mcc_h80 = _source49.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _1644_args = _1643___mcc_h80;
        Dafny.ISequence<RAST._IType> _1645_tpes = _1642___mcc_h79;
        RAST._IExpr _1646_expr = _1641___mcc_h78;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs44 = (this).LeftParentheses(_1646_expr);
        Dafny.ISequence<Dafny.Rune> _1647_leftP = _let_tmp_rhs44.dtor__0;
        Dafny.ISequence<Dafny.Rune> _1648_rightP = _let_tmp_rhs44.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1647_leftP, (_1646_expr)._ToString(ind)), _1648_rightP), (((new BigInteger((_1645_tpes).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<"), RAST.__default.SeqToString<RAST._IType>(_1645_tpes, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_1649_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_1650_tpe) => {
          return (_1650_tpe)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_1649_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), RAST.__default.SeqToString<RAST._IExpr>(_1644_args, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>>>((_1651_ind) => ((System.Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>)((_1652_arg) => {
          return (_1652_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_1651_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      } else if (_source49.is_Select) {
        RAST._IExpr _1653___mcc_h84 = _source49.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1654___mcc_h85 = _source49.dtor_name;
        Dafny.ISequence<Dafny.Rune> _1655_name = _1654___mcc_h85;
        RAST._IExpr _1656_expression = _1653___mcc_h84;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs45 = (this).LeftParentheses(_1656_expression);
        Dafny.ISequence<Dafny.Rune> _1657_leftP = _let_tmp_rhs45.dtor__0;
        Dafny.ISequence<Dafny.Rune> _1658_rightP = _let_tmp_rhs45.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1657_leftP, (_1656_expression)._ToString(ind)), _1658_rightP), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _1655_name);
      } else {
        RAST._IExpr _1659___mcc_h88 = _source49.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1660___mcc_h89 = _source49.dtor_name;
        Dafny.ISequence<Dafny.Rune> _1661_name = _1660___mcc_h89;
        RAST._IExpr _1662_expression = _1659___mcc_h88;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs46 = (this).LeftParentheses(_1662_expression);
        Dafny.ISequence<Dafny.Rune> _1663_leftP = _let_tmp_rhs46.dtor__0;
        Dafny.ISequence<Dafny.Rune> _1664_rightP = _let_tmp_rhs46.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1663_leftP, (_1662_expression)._ToString(ind)), _1664_rightP), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _1661_name);
      }
    }
    public RAST._IExpr Then(RAST._IExpr rhs2) {
      if ((this).is_StmtExpr) {
        return RAST.Expr.create_StmtExpr((this).dtor_stmt, ((this).dtor_rhs).Then(rhs2));
      } else {
        return RAST.Expr.create_StmtExpr(this, rhs2);
      }
    }
    public RAST._IPrintingInfo printingInfo { get {
      RAST._IExpr _source53 = this;
      if (_source53.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _1665___mcc_h0 = _source53.dtor_content;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source53.is_Identifier) {
        Dafny.ISequence<Dafny.Rune> _1666___mcc_h2 = _source53.dtor_name;
        return RAST.PrintingInfo.create_Precedence(BigInteger.One);
      } else if (_source53.is_Match) {
        RAST._IExpr _1667___mcc_h4 = _source53.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _1668___mcc_h5 = _source53.dtor_cases;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source53.is_StmtExpr) {
        RAST._IExpr _1669___mcc_h8 = _source53.dtor_stmt;
        RAST._IExpr _1670___mcc_h9 = _source53.dtor_rhs;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source53.is_Block) {
        RAST._IExpr _1671___mcc_h12 = _source53.dtor_underlying;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source53.is_StructBuild) {
        Dafny.ISequence<Dafny.Rune> _1672___mcc_h14 = _source53.dtor_name;
        Dafny.ISequence<RAST._IAssignIdentifier> _1673___mcc_h15 = _source53.dtor_assignments;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source53.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _1674___mcc_h18 = _source53.dtor_arguments;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source53.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _1675___mcc_h20 = _source53.dtor_op1;
        RAST._IExpr _1676___mcc_h21 = _source53.dtor_underlying;
        DAST.Format._IUnOpFormat _1677___mcc_h22 = _source53.dtor_format;
        DAST.Format._IUnOpFormat _1678_format = _1677___mcc_h22;
        RAST._IExpr _1679_underlying = _1676___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _1680_op = _1675___mcc_h20;
        if (object.Equals(_1680_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("?"))) {
          return RAST.PrintingInfo.create_SuffixPrecedence(new BigInteger(5));
        } else if (object.Equals(_1680_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else if (object.Equals(_1680_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else if (object.Equals(_1680_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else if (object.Equals(_1680_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else if (object.Equals(_1680_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else {
          return RAST.PrintingInfo.create_UnknownPrecedence();
        }
      } else if (_source53.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _1681___mcc_h26 = _source53.dtor_op2;
        RAST._IExpr _1682___mcc_h27 = _source53.dtor_left;
        RAST._IExpr _1683___mcc_h28 = _source53.dtor_right;
        DAST.Format._IBinOpFormat _1684___mcc_h29 = _source53.dtor_format2;
        DAST.Format._IBinOpFormat _1685_format = _1684___mcc_h29;
        RAST._IExpr _1686_right = _1683___mcc_h28;
        RAST._IExpr _1687_left = _1682___mcc_h27;
        Dafny.ISequence<Dafny.Rune> _1688_op2 = _1681___mcc_h26;
        if (object.Equals(_1688_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(10), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_1688_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(20), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_1688_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(20), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_1688_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("%"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(20), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_1688_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(30), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_1688_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(30), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_1688_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<<"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(40), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_1688_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(40), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_1688_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(50), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_1688_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("^"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(60), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_1688_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(70), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_1688_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_1688_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_1688_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_1688_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_1688_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_1688_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_1688_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&&"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(90), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_1688_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("||"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(100), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_1688_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".."))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_1688_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("..="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_1688_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_1688_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_1688_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_1688_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_1688_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_1688_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("%="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_1688_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_1688_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_1688_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("^="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_1688_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<<="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_1688_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(BigInteger.Zero, RAST.Associativity.create_RequiresParentheses());
        }
      } else if (_source53.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _1689___mcc_h34 = _source53.dtor_value;
        return RAST.PrintingInfo.create_Precedence(BigInteger.One);
      } else if (_source53.is_ConversionNum) {
        RAST._IType _1690___mcc_h36 = _source53.dtor_tpe;
        RAST._IExpr _1691___mcc_h37 = _source53.dtor_underlying;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source53.is_DeclareVar) {
        RAST._IDeclareType _1692___mcc_h40 = _source53.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _1693___mcc_h41 = _source53.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _1694___mcc_h42 = _source53.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _1695___mcc_h43 = _source53.dtor_optRhs;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source53.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _1696___mcc_h48 = _source53.dtor_name;
        RAST._IExpr _1697___mcc_h49 = _source53.dtor_rhs;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source53.is_IfExpr) {
        RAST._IExpr _1698___mcc_h52 = _source53.dtor_cond;
        RAST._IExpr _1699___mcc_h53 = _source53.dtor_thn;
        RAST._IExpr _1700___mcc_h54 = _source53.dtor_els;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source53.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _1701___mcc_h58 = _source53.dtor_optCond;
        RAST._IExpr _1702___mcc_h59 = _source53.dtor_underlying;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source53.is_For) {
        Dafny.ISequence<Dafny.Rune> _1703___mcc_h62 = _source53.dtor_name;
        RAST._IExpr _1704___mcc_h63 = _source53.dtor_range;
        RAST._IExpr _1705___mcc_h64 = _source53.dtor_body;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source53.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _1706___mcc_h68 = _source53.dtor_lbl;
        RAST._IExpr _1707___mcc_h69 = _source53.dtor_underlying;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source53.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1708___mcc_h72 = _source53.dtor_optLbl;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source53.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1709___mcc_h74 = _source53.dtor_optLbl;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source53.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _1710___mcc_h76 = _source53.dtor_optExpr;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source53.is_Call) {
        RAST._IExpr _1711___mcc_h78 = _source53.dtor_obj;
        Dafny.ISequence<RAST._IType> _1712___mcc_h79 = _source53.dtor_typeParameters;
        Dafny.ISequence<RAST._IExpr> _1713___mcc_h80 = _source53.dtor_arguments;
        return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(2), RAST.Associativity.create_LeftToRight());
      } else if (_source53.is_Select) {
        RAST._IExpr _1714___mcc_h84 = _source53.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1715___mcc_h85 = _source53.dtor_name;
        Dafny.ISequence<Dafny.Rune> _1716_name = _1715___mcc_h85;
        RAST._IExpr _1717_underlying = _1714___mcc_h84;
        return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(2), RAST.Associativity.create_LeftToRight());
      } else {
        RAST._IExpr _1718___mcc_h88 = _source53.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1719___mcc_h89 = _source53.dtor_name;
        Dafny.ISequence<Dafny.Rune> _1720_name = _1719___mcc_h89;
        RAST._IExpr _1721_underlying = _1718___mcc_h88;
        return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(2), RAST.Associativity.create_LeftToRight());
      }
    } }
  }
  public class Expr_RawExpr : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Expr_RawExpr(Dafny.ISequence<Dafny.Rune> content) : base() {
      this._content = content;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_RawExpr(_content);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_RawExpr;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.RawExpr";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_Identifier : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Expr_Identifier(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Identifier(_name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Identifier;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Identifier";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_Match : Expr {
    public readonly RAST._IExpr _matchee;
    public readonly Dafny.ISequence<RAST._IMatchCase> _cases;
    public Expr_Match(RAST._IExpr matchee, Dafny.ISequence<RAST._IMatchCase> cases) : base() {
      this._matchee = matchee;
      this._cases = cases;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Match(_matchee, _cases);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Match;
      return oth != null && object.Equals(this._matchee, oth._matchee) && object.Equals(this._cases, oth._cases);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._matchee));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cases));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Match";
      s += "(";
      s += Dafny.Helpers.ToString(this._matchee);
      s += ", ";
      s += Dafny.Helpers.ToString(this._cases);
      s += ")";
      return s;
    }
  }
  public class Expr_StmtExpr : Expr {
    public readonly RAST._IExpr _stmt;
    public readonly RAST._IExpr _rhs;
    public Expr_StmtExpr(RAST._IExpr stmt, RAST._IExpr rhs) : base() {
      this._stmt = stmt;
      this._rhs = rhs;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_StmtExpr(_stmt, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_StmtExpr;
      return oth != null && object.Equals(this._stmt, oth._stmt) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._stmt));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.StmtExpr";
      s += "(";
      s += Dafny.Helpers.ToString(this._stmt);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Expr_Block : Expr {
    public readonly RAST._IExpr _underlying;
    public Expr_Block(RAST._IExpr underlying) : base() {
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Block(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Block;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Block";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_StructBuild : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._IAssignIdentifier> _assignments;
    public Expr_StructBuild(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IAssignIdentifier> assignments) : base() {
      this._name = name;
      this._assignments = assignments;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_StructBuild(_name, _assignments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_StructBuild;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._assignments, oth._assignments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._assignments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.StructBuild";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._assignments);
      s += ")";
      return s;
    }
  }
  public class Expr_Tuple : Expr {
    public readonly Dafny.ISequence<RAST._IExpr> _arguments;
    public Expr_Tuple(Dafny.ISequence<RAST._IExpr> arguments) : base() {
      this._arguments = arguments;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Tuple(_arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Tuple;
      return oth != null && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Expr_UnaryOp : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _op1;
    public readonly RAST._IExpr _underlying;
    public readonly DAST.Format._IUnOpFormat _format;
    public Expr_UnaryOp(Dafny.ISequence<Dafny.Rune> op1, RAST._IExpr underlying, DAST.Format._IUnOpFormat format) : base() {
      this._op1 = op1;
      this._underlying = underlying;
      this._format = format;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_UnaryOp(_op1, _underlying, _format);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_UnaryOp;
      return oth != null && object.Equals(this._op1, oth._op1) && object.Equals(this._underlying, oth._underlying) && object.Equals(this._format, oth._format);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.UnaryOp";
      s += "(";
      s += this._op1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format);
      s += ")";
      return s;
    }
  }
  public class Expr_BinaryOp : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _op2;
    public readonly RAST._IExpr _left;
    public readonly RAST._IExpr _right;
    public readonly DAST.Format._IBinOpFormat _format2;
    public Expr_BinaryOp(Dafny.ISequence<Dafny.Rune> op2, RAST._IExpr left, RAST._IExpr right, DAST.Format._IBinOpFormat format2) : base() {
      this._op2 = op2;
      this._left = left;
      this._right = right;
      this._format2 = format2;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_BinaryOp(_op2, _left, _right, _format2);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_BinaryOp;
      return oth != null && object.Equals(this._op2, oth._op2) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right) && object.Equals(this._format2, oth._format2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op2));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format2));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.BinaryOp";
      s += "(";
      s += this._op2.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format2);
      s += ")";
      return s;
    }
  }
  public class Expr_LiteralInt : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _value;
    public Expr_LiteralInt(Dafny.ISequence<Dafny.Rune> @value) : base() {
      this._value = @value;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_LiteralInt(_value);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_LiteralInt;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.LiteralInt";
      s += "(";
      s += this._value.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_ConversionNum : Expr {
    public readonly RAST._IType _tpe;
    public readonly RAST._IExpr _underlying;
    public Expr_ConversionNum(RAST._IType tpe, RAST._IExpr underlying) : base() {
      this._tpe = tpe;
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_ConversionNum(_tpe, _underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_ConversionNum;
      return oth != null && object.Equals(this._tpe, oth._tpe) && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.ConversionNum";
      s += "(";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_DeclareVar : Expr {
    public readonly RAST._IDeclareType _declareType;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Std.Wrappers._IOption<RAST._IType> _optType;
    public readonly Std.Wrappers._IOption<RAST._IExpr> _optRhs;
    public Expr_DeclareVar(RAST._IDeclareType declareType, Dafny.ISequence<Dafny.Rune> name, Std.Wrappers._IOption<RAST._IType> optType, Std.Wrappers._IOption<RAST._IExpr> optRhs) : base() {
      this._declareType = declareType;
      this._name = name;
      this._optType = optType;
      this._optRhs = optRhs;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_DeclareVar(_declareType, _name, _optType, _optRhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_DeclareVar;
      return oth != null && object.Equals(this._declareType, oth._declareType) && object.Equals(this._name, oth._name) && object.Equals(this._optType, oth._optType) && object.Equals(this._optRhs, oth._optRhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._declareType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optRhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.DeclareVar";
      s += "(";
      s += Dafny.Helpers.ToString(this._declareType);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._optType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._optRhs);
      s += ")";
      return s;
    }
  }
  public class Expr_AssignVar : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IExpr _rhs;
    public Expr_AssignVar(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr rhs) : base() {
      this._name = name;
      this._rhs = rhs;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_AssignVar(_name, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_AssignVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.AssignVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Expr_IfExpr : Expr {
    public readonly RAST._IExpr _cond;
    public readonly RAST._IExpr _thn;
    public readonly RAST._IExpr _els;
    public Expr_IfExpr(RAST._IExpr cond, RAST._IExpr thn, RAST._IExpr els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_IfExpr(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_IfExpr;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.IfExpr";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expr_Loop : Expr {
    public readonly Std.Wrappers._IOption<RAST._IExpr> _optCond;
    public readonly RAST._IExpr _underlying;
    public Expr_Loop(Std.Wrappers._IOption<RAST._IExpr> optCond, RAST._IExpr underlying) : base() {
      this._optCond = optCond;
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Loop(_optCond, _underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Loop;
      return oth != null && object.Equals(this._optCond, oth._optCond) && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optCond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Loop";
      s += "(";
      s += Dafny.Helpers.ToString(this._optCond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_For : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IExpr _range;
    public readonly RAST._IExpr _body;
    public Expr_For(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr range, RAST._IExpr body) : base() {
      this._name = name;
      this._range = range;
      this._body = body;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_For(_name, _range, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_For;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._range, oth._range) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._range));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.For";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._range);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expr_Labelled : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly RAST._IExpr _underlying;
    public Expr_Labelled(Dafny.ISequence<Dafny.Rune> lbl, RAST._IExpr underlying) : base() {
      this._lbl = lbl;
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Labelled(_lbl, _underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Labelled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Labelled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_Break : Expr {
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _optLbl;
    public Expr_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) : base() {
      this._optLbl = optLbl;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Break(_optLbl);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Break;
      return oth != null && object.Equals(this._optLbl, oth._optLbl);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optLbl));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._optLbl);
      s += ")";
      return s;
    }
  }
  public class Expr_Continue : Expr {
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _optLbl;
    public Expr_Continue(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) : base() {
      this._optLbl = optLbl;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Continue(_optLbl);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Continue;
      return oth != null && object.Equals(this._optLbl, oth._optLbl);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optLbl));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Continue";
      s += "(";
      s += Dafny.Helpers.ToString(this._optLbl);
      s += ")";
      return s;
    }
  }
  public class Expr_Return : Expr {
    public readonly Std.Wrappers._IOption<RAST._IExpr> _optExpr;
    public Expr_Return(Std.Wrappers._IOption<RAST._IExpr> optExpr) : base() {
      this._optExpr = optExpr;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Return(_optExpr);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Return;
      return oth != null && object.Equals(this._optExpr, oth._optExpr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optExpr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._optExpr);
      s += ")";
      return s;
    }
  }
  public class Expr_Call : Expr {
    public readonly RAST._IExpr _obj;
    public readonly Dafny.ISequence<RAST._IType> _typeParameters;
    public readonly Dafny.ISequence<RAST._IExpr> _arguments;
    public Expr_Call(RAST._IExpr obj, Dafny.ISequence<RAST._IType> typeParameters, Dafny.ISequence<RAST._IExpr> arguments) : base() {
      this._obj = obj;
      this._typeParameters = typeParameters;
      this._arguments = arguments;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Call(_obj, _typeParameters, _arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Call;
      return oth != null && object.Equals(this._obj, oth._obj) && object.Equals(this._typeParameters, oth._typeParameters) && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._obj));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParameters));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._obj);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParameters);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Expr_Select : Expr {
    public readonly RAST._IExpr _obj;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Expr_Select(RAST._IExpr obj, Dafny.ISequence<Dafny.Rune> name) : base() {
      this._obj = obj;
      this._name = name;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Select(_obj, _name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Select;
      return oth != null && object.Equals(this._obj, oth._obj) && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._obj));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._obj);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_MemberSelect : Expr {
    public readonly RAST._IExpr _obj;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Expr_MemberSelect(RAST._IExpr obj, Dafny.ISequence<Dafny.Rune> name) : base() {
      this._obj = obj;
      this._name = name;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_MemberSelect(_obj, _name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_MemberSelect;
      return oth != null && object.Equals(this._obj, oth._obj) && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._obj));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.MemberSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._obj);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IFn {
    bool is_Fn { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    Dafny.ISequence<RAST._IFormal> dtor_formals { get; }
    Std.Wrappers._IOption<RAST._IType> dtor_returnType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_body { get; }
    _IFn DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Fn : _IFn {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly Dafny.ISequence<RAST._IFormal> _formals;
    public readonly Std.Wrappers._IOption<RAST._IType> _returnType;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Std.Wrappers._IOption<RAST._IExpr> _body;
    public Fn(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._formals = formals;
      this._returnType = returnType;
      this._where = @where;
      this._body = body;
    }
    public _IFn DowncastClone() {
      if (this is _IFn dt) { return dt; }
      return new Fn(_name, _typeParams, _formals, _returnType, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Fn;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._formals, oth._formals) && object.Equals(this._returnType, oth._returnType) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formals));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._returnType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Fn.Fn";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._formals);
      s += ", ";
      s += Dafny.Helpers.ToString(this._returnType);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly RAST._IFn theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._ITypeParam>.Empty, Dafny.Sequence<RAST._IFormal>.Empty, Std.Wrappers.Option<RAST._IType>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Std.Wrappers.Option<RAST._IExpr>.Default());
    public static RAST._IFn Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFn> _TYPE = new Dafny.TypeDescriptor<RAST._IFn>(RAST.Fn.Default());
    public static Dafny.TypeDescriptor<RAST._IFn> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFn create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      return new Fn(name, typeParams, formals, returnType, @where, body);
    }
    public static _IFn create_Fn(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      return create(name, typeParams, formals, returnType, @where, body);
    }
    public bool is_Fn { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<RAST._IFormal> dtor_formals {
      get {
        return this._formals;
      }
    }
    public Std.Wrappers._IOption<RAST._IType> dtor_returnType {
      get {
        return this._returnType;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        return this._where;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      var _pat_let_tv5 = ind;
      var _pat_let_tv6 = ind;
      var _pat_let_tv7 = ind;
      var _pat_let_tv8 = ind;
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn "), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), RAST.__default.SeqToString<RAST._IFormal>((this).dtor_formals, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>>>((_1722_ind) => ((System.Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>)((_1723_formal) => {
        return (_1723_formal)._ToString(_1722_ind);
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), ((System.Func<Std.Wrappers._IOption<RAST._IType>, Dafny.ISequence<Dafny.Rune>>)((_source54) => {
        if (_source54.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
        } else {
          RAST._IType _1724___mcc_h0 = _source54.dtor_value;
          RAST._IType _1725_t = _1724___mcc_h0;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" -> "), (_1725_t)._ToString(_pat_let_tv5));
        }
      }))((this).dtor_returnType)), ((((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)))), ((System.Func<Std.Wrappers._IOption<RAST._IExpr>, Dafny.ISequence<Dafny.Rune>>)((_source55) => {
        if (_source55.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";");
        } else {
          RAST._IExpr _1726___mcc_h2 = _source55.dtor_value;
          RAST._IExpr _1727_body = _1726___mcc_h2;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"), _pat_let_tv6), RAST.__default.IND), (_1727_body)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_pat_let_tv7, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _pat_let_tv8), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        }
      }))((this).dtor_body));
    }
  }
} // end of namespace RAST
namespace DCOMP {

  public partial class __default {
    public static bool is__tuple__numeric(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(2))) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(BigInteger.One)))) && (((new BigInteger((i).Count)) == (new BigInteger(2))) || (((new BigInteger((i).Count)) == (new BigInteger(3))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(2))))));
    }
    public static bool has__special(Dafny.ISequence<Dafny.Rune> i) {
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return false;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('#'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        if ((new BigInteger(2)) <= (new BigInteger((i).Count))) {
          if (((i).Select(BigInteger.One)) != (new Dafny.Rune('_'))) {
            return true;
          } else {
            Dafny.ISequence<Dafny.Rune> _in113 = (i).Drop(new BigInteger(2));
            i = _in113;
            goto TAIL_CALL_START;
          }
        } else {
          return true;
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _in114 = (i).Drop(BigInteger.One);
        i = _in114;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> idiomatic__rust(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _1728___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_1728___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        _1728___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_1728___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
        Dafny.ISequence<Dafny.Rune> _in115 = (i).Drop(new BigInteger(2));
        i = _in115;
        goto TAIL_CALL_START;
      } else {
        _1728___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_1728___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in116 = (i).Drop(BigInteger.One);
        i = _in116;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _1729___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_1729___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        _1729___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_1729___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_d"));
        Dafny.ISequence<Dafny.Rune> _in117 = (i).Drop(BigInteger.One);
        i = _in117;
        goto TAIL_CALL_START;
      } else {
        _1729___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_1729___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in118 = (i).Drop(BigInteger.One);
        i = _in118;
        goto TAIL_CALL_START;
      }
    }
    public static bool is__tuple__builder(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(9))) && (((i).Take(new BigInteger(8))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("___hMake")))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(8))))) && (((new BigInteger((i).Count)) == (new BigInteger(9))) || (((new BigInteger((i).Count)) == (new BigInteger(10))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(9))))));
    }
    public static Dafny.ISequence<Dafny.Rune> better__tuple__builder__name(Dafny.ISequence<Dafny.Rune> i) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_T"), (i).Drop(new BigInteger(8)));
    }
    public static bool is__dafny__generated__id(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)).Sign == 1) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && (!(DCOMP.__default.has__special((i).Drop(BigInteger.One))))) && (!((new BigInteger((i).Count)) >= (new BigInteger(2))) || (((i).Select(BigInteger.One)) != (new Dafny.Rune('T'))));
    }
    public static bool is__idiomatic__rust__id(Dafny.ISequence<Dafny.Rune> i) {
      return (((new BigInteger((i).Count)).Sign == 1) && (!(DCOMP.__default.has__special(i)))) && (!(DCOMP.__default.reserved__rust).Contains(i));
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      if (DCOMP.__default.is__tuple__numeric(i)) {
        return i;
      } else if (DCOMP.__default.is__tuple__builder(i)) {
        return DCOMP.__default.better__tuple__builder__name(i);
      } else if ((DCOMP.__default.reserved__rust).Contains(i)) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), i);
      } else if (DCOMP.__default.is__idiomatic__rust__id(i)) {
        return DCOMP.__default.idiomatic__rust(i);
      } else if (DCOMP.__default.is__dafny__generated__id(i)) {
        return i;
      } else {
        Dafny.ISequence<Dafny.Rune> _1730_r = DCOMP.__default.replaceDots(i);
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#_"), _1730_r);
      }
    }
    public static Dafny.ISet<Dafny.ISequence<Dafny.Rune>> reserved__rust { get {
      return Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("async"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("await"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("const"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("crate"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("else"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("enum"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("loop"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mut"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ref"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("static"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("struct"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("trait"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("union"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsafe"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("use"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("where"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Keywords"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("The"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("abstract"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("become"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("box"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("do"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("final"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("macro"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("override"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("priv"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("try"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("typeof"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsized"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("virtual"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("yield"));
    } }
    public static Dafny.ISequence<Dafny.Rune> IND { get {
      return RAST.__default.IND;
    } }
  }

  public interface _IOwnership {
    bool is_OwnershipOwned { get; }
    bool is_OwnershipBorrowed { get; }
    bool is_OwnershipBorrowedMut { get; }
    bool is_OwnershipAny { get; }
    _IOwnership DowncastClone();
  }
  public abstract class Ownership : _IOwnership {
    public Ownership() {
    }
    private static readonly DCOMP._IOwnership theDefault = create_OwnershipOwned();
    public static DCOMP._IOwnership Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DCOMP._IOwnership> _TYPE = new Dafny.TypeDescriptor<DCOMP._IOwnership>(DCOMP.Ownership.Default());
    public static Dafny.TypeDescriptor<DCOMP._IOwnership> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IOwnership create_OwnershipOwned() {
      return new Ownership_OwnershipOwned();
    }
    public static _IOwnership create_OwnershipBorrowed() {
      return new Ownership_OwnershipBorrowed();
    }
    public static _IOwnership create_OwnershipBorrowedMut() {
      return new Ownership_OwnershipBorrowedMut();
    }
    public static _IOwnership create_OwnershipAny() {
      return new Ownership_OwnershipAny();
    }
    public bool is_OwnershipOwned { get { return this is Ownership_OwnershipOwned; } }
    public bool is_OwnershipBorrowed { get { return this is Ownership_OwnershipBorrowed; } }
    public bool is_OwnershipBorrowedMut { get { return this is Ownership_OwnershipBorrowedMut; } }
    public bool is_OwnershipAny { get { return this is Ownership_OwnershipAny; } }
    public static System.Collections.Generic.IEnumerable<_IOwnership> AllSingletonConstructors {
      get {
        yield return Ownership.create_OwnershipOwned();
        yield return Ownership.create_OwnershipBorrowed();
        yield return Ownership.create_OwnershipBorrowedMut();
        yield return Ownership.create_OwnershipAny();
      }
    }
    public abstract _IOwnership DowncastClone();
  }
  public class Ownership_OwnershipOwned : Ownership {
    public Ownership_OwnershipOwned() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipOwned();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipOwned;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipOwned";
      return s;
    }
  }
  public class Ownership_OwnershipBorrowed : Ownership {
    public Ownership_OwnershipBorrowed() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipBorrowed();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipBorrowed;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipBorrowed";
      return s;
    }
  }
  public class Ownership_OwnershipBorrowedMut : Ownership {
    public Ownership_OwnershipBorrowedMut() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipBorrowedMut();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipBorrowedMut;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipBorrowedMut";
      return s;
    }
  }
  public class Ownership_OwnershipAny : Ownership {
    public Ownership_OwnershipAny() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipAny();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipAny;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipAny";
      return s;
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static RAST._IMod GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      RAST._IMod s = RAST.Mod.Default();
      Dafny.ISequence<RAST._IModDecl> _1731_body;
      Dafny.ISequence<RAST._IModDecl> _out15;
      _out15 = DCOMP.COMP.GenModuleBody((mod).dtor_body, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
      _1731_body = _out15;
      s = (((mod).dtor_isExtern) ? (RAST.Mod.create_ExternMod(DCOMP.__default.escapeIdent((mod).dtor_name))) : (RAST.Mod.create_Mod(DCOMP.__default.escapeIdent((mod).dtor_name), _1731_body)));
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      s = Dafny.Sequence<RAST._IModDecl>.FromElements();
      BigInteger _1732_i;
      _1732_i = BigInteger.Zero;
      while ((_1732_i) < (new BigInteger((body).Count))) {
        Dafny.ISequence<RAST._IModDecl> _1733_generated = Dafny.Sequence<RAST._IModDecl>.Empty;
        DAST._IModuleItem _source56 = (body).Select(_1732_i);
        if (_source56.is_Module) {
          DAST._IModule _1734___mcc_h0 = _source56.dtor_Module_a0;
          DAST._IModule _1735_m = _1734___mcc_h0;
          RAST._IMod _1736_mm;
          RAST._IMod _out16;
          _out16 = DCOMP.COMP.GenModule(_1735_m, containingPath);
          _1736_mm = _out16;
          _1733_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ModDecl(_1736_mm));
        } else if (_source56.is_Class) {
          DAST._IClass _1737___mcc_h1 = _source56.dtor_Class_a0;
          DAST._IClass _1738_c = _1737___mcc_h1;
          Dafny.ISequence<RAST._IModDecl> _out17;
          _out17 = DCOMP.COMP.GenClass(_1738_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_1738_c).dtor_name)));
          _1733_generated = _out17;
        } else if (_source56.is_Trait) {
          DAST._ITrait _1739___mcc_h2 = _source56.dtor_Trait_a0;
          DAST._ITrait _1740_t = _1739___mcc_h2;
          Dafny.ISequence<Dafny.Rune> _1741_tt;
          Dafny.ISequence<Dafny.Rune> _out18;
          _out18 = DCOMP.COMP.GenTrait(_1740_t, containingPath);
          _1741_tt = _out18;
          _1733_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_RawDecl(_1741_tt));
        } else if (_source56.is_Newtype) {
          DAST._INewtype _1742___mcc_h3 = _source56.dtor_Newtype_a0;
          DAST._INewtype _1743_n = _1742___mcc_h3;
          Dafny.ISequence<RAST._IModDecl> _out19;
          _out19 = DCOMP.COMP.GenNewtype(_1743_n);
          _1733_generated = _out19;
        } else {
          DAST._IDatatype _1744___mcc_h4 = _source56.dtor_Datatype_a0;
          DAST._IDatatype _1745_d = _1744___mcc_h4;
          Dafny.ISequence<RAST._IModDecl> _out20;
          _out20 = DCOMP.COMP.GenDatatype(_1745_d);
          _1733_generated = _out20;
        }
        s = Dafny.Sequence<RAST._IModDecl>.Concat(s, _1733_generated);
        _1732_i = (_1732_i) + (BigInteger.One);
      }
      return s;
    }
    public static void GenTypeParameters(Dafny.ISequence<DAST._IType> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<RAST._ITypeParam> typeParams, out Dafny.ISequence<RAST._ITypeParam> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints)
    {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<RAST._ITypeParam>.Empty;
      constrainedTypeParams = Dafny.Sequence<RAST._ITypeParam>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      constrainedTypeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _1746_tpI;
      _1746_tpI = BigInteger.Zero;
      if ((new BigInteger((@params).Count)).Sign == 1) {
        while ((_1746_tpI) < (new BigInteger((@params).Count))) {
          DAST._IType _1747_tp;
          _1747_tp = (@params).Select(_1746_tpI);
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_1747_tp));
          RAST._IType _1748_genTp;
          RAST._IType _out21;
          _out21 = DCOMP.COMP.GenType(_1747_tp, false, false);
          _1748_genTp = _out21;
          typeParams = Dafny.Sequence<RAST._ITypeParam>.Concat(typeParams, Dafny.Sequence<RAST._ITypeParam>.FromElements(RAST.TypeParam.create((_1748_genTp)._ToString(DCOMP.__default.IND), Dafny.Sequence<RAST._IType>.FromElements())));
          _1746_tpI = (_1746_tpI) + (BigInteger.One);
        }
      }
      Dafny.ISequence<RAST._IType> _1749_baseConstraints;
      _1749_baseConstraints = Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.CloneTrait, RAST.__default.DafnyPrintTrait, RAST.__default.StaticTrait);
      constrainedTypeParams = RAST.TypeParam.AddConstraintsMultiple(typeParams, _1749_baseConstraints);
    }
    public static Dafny.ISequence<RAST._IModDecl> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _1750_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _1751_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _1752_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _1753_whereConstraints;
      Dafny.ISet<DAST._IType> _out22;
      Dafny.ISequence<RAST._ITypeParam> _out23;
      Dafny.ISequence<RAST._ITypeParam> _out24;
      Dafny.ISequence<Dafny.Rune> _out25;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out22, out _out23, out _out24, out _out25);
      _1750_typeParamsSet = _out22;
      _1751_sTypeParams = _out23;
      _1752_sConstrainedTypeParams = _out24;
      _1753_whereConstraints = _out25;
      Dafny.ISequence<Dafny.Rune> _1754_constrainedTypeParams;
      _1754_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_1752_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      Dafny.ISequence<RAST._IFormal> _1755_fields;
      _1755_fields = Dafny.Sequence<RAST._IFormal>.FromElements();
      Dafny.ISequence<RAST._IAssignIdentifier> _1756_fieldInits;
      _1756_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
      BigInteger _1757_fieldI;
      _1757_fieldI = BigInteger.Zero;
      while ((_1757_fieldI) < (new BigInteger(((c).dtor_fields).Count))) {
        DAST._IField _1758_field;
        _1758_field = ((c).dtor_fields).Select(_1757_fieldI);
        RAST._IType _1759_fieldType;
        RAST._IType _out26;
        _out26 = DCOMP.COMP.GenType(((_1758_field).dtor_formal).dtor_typ, false, false);
        _1759_fieldType = _out26;
        _1755_fields = Dafny.Sequence<RAST._IFormal>.Concat(_1755_fields, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub "), DCOMP.__default.escapeIdent(((_1758_field).dtor_formal).dtor_name)), RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cell::RefCell"), Dafny.Sequence<RAST._IType>.FromElements(_1759_fieldType)))));
        Std.Wrappers._IOption<DAST._IExpression> _source57 = (_1758_field).dtor_defaultValue;
        if (_source57.is_None) {
          {
            _1756_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_1756_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent(((_1758_field).dtor_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cell::RefCell::new(::std::default::Default::default())")))));
          }
        } else {
          DAST._IExpression _1760___mcc_h0 = _source57.dtor_value;
          DAST._IExpression _1761_e = _1760___mcc_h0;
          {
            RAST._IExpr _1762_eStr;
            DCOMP._IOwnership _1763___v21;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1764___v22;
            RAST._IExpr _out27;
            DCOMP._IOwnership _out28;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out29;
            DCOMP.COMP.GenExpr(_1761_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), DCOMP.Ownership.create_OwnershipOwned(), out _out27, out _out28, out _out29);
            _1762_eStr = _out27;
            _1763___v21 = _out28;
            _1764___v22 = _out29;
            _1756_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_1756_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent(((_1758_field).dtor_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cell::RefCell::new("), (_1762_eStr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))))));
          }
        }
        _1757_fieldI = (_1757_fieldI) + (BigInteger.One);
      }
      BigInteger _1765_typeParamI;
      _1765_typeParamI = BigInteger.Zero;
      while ((_1765_typeParamI) < (new BigInteger(((c).dtor_typeParams).Count))) {
        RAST._IType _1766_tpeGen;
        RAST._IType _out30;
        _out30 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_1765_typeParamI), false, false);
        _1766_tpeGen = _out30;
        _1755_fields = Dafny.Sequence<RAST._IFormal>.Concat(_1755_fields, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_1765_typeParamI)), RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData"), Dafny.Sequence<RAST._IType>.FromElements(_1766_tpeGen)))));
        _1756_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_1756_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_1765_typeParamI)), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData")))));
        _1765_typeParamI = (_1765_typeParamI) + (BigInteger.One);
      }
      RAST._IStruct _1767_struct;
      _1767_struct = RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), DCOMP.__default.escapeIdent((c).dtor_name), _1751_sTypeParams, RAST.Formals.create_NamedFormals(_1755_fields));
      Dafny.ISequence<RAST._IType> _1768_typeParamsAsTypes;
      _1768_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_1769_typeParam) => {
        return RAST.__default.RawType((_1769_typeParam).dtor_content);
      })), _1751_sTypeParams);
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(_1767_struct));
      Dafny.ISequence<RAST._IImplMember> _1770_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _1771_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out31;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out32;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(path)), _1750_typeParamsSet, out _out31, out _out32);
      _1770_implBodyRaw = _out31;
      _1771_traitBodies = _out32;
      Dafny.ISequence<RAST._IImplMember> _1772_implBody;
      _1772_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PUB(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(DCOMP.__default.escapeIdent((c).dtor_name), _1756_fieldInits))))), _1770_implBodyRaw);
      RAST._IImpl _1773_i;
      _1773_i = RAST.Impl.create_Impl(_1752_sConstrainedTypeParams, RAST.Type.create_TypeApp(DCOMP.__default.escapeIdent((c).dtor_name), _1768_typeParamsAsTypes), _1753_whereConstraints, _1772_implBody);
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_1773_i)));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _1774_i;
        _1774_i = BigInteger.Zero;
        while ((_1774_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _1775_superClass;
          _1775_superClass = ((c).dtor_superClasses).Select(_1774_i);
          DAST._IType _source58 = _1775_superClass;
          if (_source58.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1776___mcc_h1 = _source58.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _1777___mcc_h2 = _source58.dtor_typeArgs;
            DAST._IResolvedType _1778___mcc_h3 = _source58.dtor_resolved;
            DAST._IResolvedType _source59 = _1778___mcc_h3;
            if (_source59.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1779___mcc_h7 = _source59.dtor_path;
            } else if (_source59.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1780___mcc_h9 = _source59.dtor_path;
              Dafny.ISequence<DAST._IType> _1781_typeArgs = _1777___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1782_traitPath = _1776___mcc_h1;
              {
                Dafny.ISequence<Dafny.Rune> _1783_pathStr;
                Dafny.ISequence<Dafny.Rune> _out33;
                _out33 = DCOMP.COMP.GenPath(_1782_traitPath);
                _1783_pathStr = _out33;
                Dafny.ISequence<RAST._IType> _1784_typeArgs;
                Dafny.ISequence<RAST._IType> _out34;
                _out34 = DCOMP.COMP.GenTypeArgs(_1781_typeArgs, false, false);
                _1784_typeArgs = _out34;
                Dafny.ISequence<RAST._IImplMember> _1785_body;
                _1785_body = Dafny.Sequence<RAST._IImplMember>.FromElements();
                if ((_1771_traitBodies).Contains(_1782_traitPath)) {
                  _1785_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(_1771_traitBodies,_1782_traitPath);
                }
                Dafny.ISequence<Dafny.Rune> _1786_genSelfPath;
                Dafny.ISequence<Dafny.Rune> _out35;
                _out35 = DCOMP.COMP.GenPath(path);
                _1786_genSelfPath = _out35;
                RAST._IModDecl _1787_x;
                _1787_x = RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_1752_sConstrainedTypeParams, RAST.Type.create_TypeApp(_1783_pathStr, _1784_typeArgs), RAST.__default.Rc(RAST.Type.create_TypeApp(_1786_genSelfPath, _1768_typeParamsAsTypes)), _1753_whereConstraints, _1785_body));
                s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(_1787_x));
              }
            } else {
              DAST._IType _1788___mcc_h11 = _source59.dtor_baseType;
              DAST._INewtypeRange _1789___mcc_h12 = _source59.dtor_range;
              bool _1790___mcc_h13 = _source59.dtor_erase;
            }
          } else if (_source58.is_Nullable) {
            DAST._IType _1791___mcc_h17 = _source58.dtor_Nullable_a0;
          } else if (_source58.is_Tuple) {
            Dafny.ISequence<DAST._IType> _1792___mcc_h19 = _source58.dtor_Tuple_a0;
          } else if (_source58.is_Array) {
            DAST._IType _1793___mcc_h21 = _source58.dtor_element;
            BigInteger _1794___mcc_h22 = _source58.dtor_dims;
          } else if (_source58.is_Seq) {
            DAST._IType _1795___mcc_h25 = _source58.dtor_element;
          } else if (_source58.is_Set) {
            DAST._IType _1796___mcc_h27 = _source58.dtor_element;
          } else if (_source58.is_Multiset) {
            DAST._IType _1797___mcc_h29 = _source58.dtor_element;
          } else if (_source58.is_Map) {
            DAST._IType _1798___mcc_h31 = _source58.dtor_key;
            DAST._IType _1799___mcc_h32 = _source58.dtor_value;
          } else if (_source58.is_SetBuilder) {
            DAST._IType _1800___mcc_h35 = _source58.dtor_element;
          } else if (_source58.is_MapBuilder) {
            DAST._IType _1801___mcc_h37 = _source58.dtor_key;
            DAST._IType _1802___mcc_h38 = _source58.dtor_value;
          } else if (_source58.is_Arrow) {
            Dafny.ISequence<DAST._IType> _1803___mcc_h41 = _source58.dtor_args;
            DAST._IType _1804___mcc_h42 = _source58.dtor_result;
          } else if (_source58.is_Primitive) {
            DAST._IPrimitive _1805___mcc_h45 = _source58.dtor_Primitive_a0;
          } else if (_source58.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _1806___mcc_h47 = _source58.dtor_Passthrough_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _1807___mcc_h49 = _source58.dtor_TypeArg_a0;
          }
          _1774_i = (_1774_i) + (BigInteger.One);
        }
      }
      RAST._IImpl _1808_d;
      _1808_d = RAST.Impl.create_ImplFor(_1752_sConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(DCOMP.__default.escapeIdent((c).dtor_name), _1768_typeParamsAsTypes), _1753_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new()"))))))));
      Dafny.ISequence<RAST._IModDecl> _1809_defaultImpl;
      _1809_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_1808_d));
      RAST._IImpl _1810_p;
      _1810_p = RAST.Impl.create_ImplFor(_1752_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(DCOMP.__default.escapeIdent((c).dtor_name), _1768_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), ((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")"))))))));
      Dafny.ISequence<RAST._IModDecl> _1811_printImpl;
      _1811_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_1810_p));
      RAST._IImpl _1812_pp;
      _1812_pp = RAST.Impl.create_ImplFor(_1751_sTypeParams, RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cmp::PartialEq")), RAST.Type.create_TypeApp(DCOMP.__default.escapeIdent((c).dtor_name), _1768_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("eq"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("other"), RAST.__default.Self)), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ptr::eq(self, other)")))))));
      Dafny.ISequence<RAST._IModDecl> _1813_ptrPartialEqImpl;
      _1813_ptrPartialEqImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_1812_pp));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(s, _1809_defaultImpl), _1811_printImpl), _1813_ptrPartialEqImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _1814_typeParamsSet;
      _1814_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<RAST._IType> _1815_typeParams;
      _1815_typeParams = Dafny.Sequence<RAST._IType>.FromElements();
      BigInteger _1816_tpI;
      _1816_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        while ((_1816_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._IType _1817_tp;
          _1817_tp = ((t).dtor_typeParams).Select(_1816_tpI);
          _1814_typeParamsSet = Dafny.Set<DAST._IType>.Union(_1814_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_1817_tp));
          RAST._IType _1818_genTp;
          RAST._IType _out36;
          _out36 = DCOMP.COMP.GenType(_1817_tp, false, false);
          _1818_genTp = _out36;
          _1815_typeParams = Dafny.Sequence<RAST._IType>.Concat(_1815_typeParams, Dafny.Sequence<RAST._IType>.FromElements(_1818_genTp));
          _1816_tpI = (_1816_tpI) + (BigInteger.One);
        }
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1819_fullPath;
      _1819_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<RAST._IImplMember> _1820_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _1821___v25;
      Dafny.ISequence<RAST._IImplMember> _out37;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out38;
      DCOMP.COMP.GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_1819_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_1819_fullPath)), _1814_typeParamsSet, out _out37, out _out38);
      _1820_implBody = _out37;
      _1821___v25 = _out38;
      s = (RAST.ModDecl.create_TraitDecl(RAST.Trait.create(Dafny.Sequence<RAST._ITypeParam>.FromElements(), RAST.Type.create_TypeApp(DCOMP.__default.escapeIdent((t).dtor_name), _1815_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), _1820_implBody)))._ToString(DCOMP.__default.IND);
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenNewtype(DAST._INewtype c)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _1822_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _1823_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _1824_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _1825_whereConstraints;
      Dafny.ISet<DAST._IType> _out39;
      Dafny.ISequence<RAST._ITypeParam> _out40;
      Dafny.ISequence<RAST._ITypeParam> _out41;
      Dafny.ISequence<Dafny.Rune> _out42;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out39, out _out40, out _out41, out _out42);
      _1822_typeParamsSet = _out39;
      _1823_sTypeParams = _out40;
      _1824_sConstrainedTypeParams = _out41;
      _1825_whereConstraints = _out42;
      Dafny.ISequence<RAST._IType> _1826_typeParamsAsTypes;
      _1826_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_1827_t) => {
        return RAST.__default.RawType((_1827_t).dtor_content);
      })), _1823_sTypeParams);
      Dafny.ISequence<Dafny.Rune> _1828_constrainedTypeParams;
      _1828_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_1824_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      RAST._IType _1829_underlyingType = RAST.Type.Default();
      Std.Wrappers._IOption<RAST._IType> _source60 = DCOMP.COMP.NewtypeToRustType((c).dtor_base, (c).dtor_range);
      if (_source60.is_None) {
        RAST._IType _out43;
        _out43 = DCOMP.COMP.GenType((c).dtor_base, false, false);
        _1829_underlyingType = _out43;
      } else {
        RAST._IType _1830___mcc_h0 = _source60.dtor_value;
        RAST._IType _1831_v = _1830___mcc_h0;
        _1829_underlyingType = _1831_v;
      }
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[repr(transparent)]")), DCOMP.__default.escapeIdent((c).dtor_name), _1823_sTypeParams, RAST.Formals.create_NamelessFormals(Dafny.Sequence<RAST._INamelessFormal>.FromElements(RAST.NamelessFormal.create(RAST.Visibility.create_PUB(), _1829_underlyingType))))));
      Dafny.ISequence<Dafny.Rune> _1832_fnBody;
      _1832_fnBody = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Std.Wrappers._IOption<DAST._IExpression> _source61 = (c).dtor_witnessExpr;
      if (_source61.is_None) {
        {
          _1832_fnBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1832_fnBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(::std::default::Default::default())"));
        }
      } else {
        DAST._IExpression _1833___mcc_h1 = _source61.dtor_value;
        DAST._IExpression _1834_e = _1833___mcc_h1;
        {
          RAST._IExpr _1835_eStr;
          DCOMP._IOwnership _1836___v26;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1837___v27;
          RAST._IExpr _out44;
          DCOMP._IOwnership _out45;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out46;
          DCOMP.COMP.GenExpr(_1834_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), DCOMP.Ownership.create_OwnershipOwned(), out _out44, out _out45, out _out46);
          _1835_eStr = _out44;
          _1836___v26 = _out45;
          _1837___v27 = _out46;
          _1832_fnBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1832_fnBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1835_eStr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
        }
      }
      RAST._IImplMember _1838_body;
      _1838_body = RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(_1832_fnBody))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_1824_sConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(DCOMP.__default.escapeIdent((c).dtor_name), _1826_typeParamsAsTypes), _1825_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(_1838_body)))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_1824_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(DCOMP.__default.escapeIdent((c).dtor_name), _1826_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)"))))))))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_1824_sConstrainedTypeParams, RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref")), RAST.Type.create_TypeApp(DCOMP.__default.escapeIdent((c).dtor_name), _1826_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = "), (_1829_underlyingType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"))), RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("deref"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&Self::Target"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0"))))))))));
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenDatatype(DAST._IDatatype c)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _1839_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _1840_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _1841_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _1842_whereConstraints;
      Dafny.ISet<DAST._IType> _out47;
      Dafny.ISequence<RAST._ITypeParam> _out48;
      Dafny.ISequence<RAST._ITypeParam> _out49;
      Dafny.ISequence<Dafny.Rune> _out50;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out47, out _out48, out _out49, out _out50);
      _1839_typeParamsSet = _out47;
      _1840_sTypeParams = _out48;
      _1841_sConstrainedTypeParams = _out49;
      _1842_whereConstraints = _out50;
      Dafny.ISequence<RAST._IType> _1843_typeParamsAsTypes;
      _1843_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_1844_t) => {
        return RAST.__default.RawType((_1844_t).dtor_content);
      })), _1840_sTypeParams);
      Dafny.ISequence<Dafny.Rune> _1845_constrainedTypeParams;
      _1845_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_1841_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.IND, DCOMP.__default.IND));
      Dafny.ISequence<RAST._IEnumCase> _1846_ctors;
      _1846_ctors = Dafny.Sequence<RAST._IEnumCase>.FromElements();
      BigInteger _1847_i;
      _1847_i = BigInteger.Zero;
      while ((_1847_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _1848_ctor;
        _1848_ctor = ((c).dtor_ctors).Select(_1847_i);
        Dafny.ISequence<RAST._IFormal> _1849_ctorArgs;
        _1849_ctorArgs = Dafny.Sequence<RAST._IFormal>.FromElements();
        BigInteger _1850_j;
        _1850_j = BigInteger.Zero;
        while ((_1850_j) < (new BigInteger(((_1848_ctor).dtor_args).Count))) {
          DAST._IFormal _1851_formal;
          _1851_formal = ((_1848_ctor).dtor_args).Select(_1850_j);
          RAST._IType _1852_formalType;
          RAST._IType _out51;
          _out51 = DCOMP.COMP.GenType((_1851_formal).dtor_typ, false, false);
          _1852_formalType = _out51;
          if ((c).dtor_isCo) {
            _1849_ctorArgs = Dafny.Sequence<RAST._IFormal>.Concat(_1849_ctorArgs, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_1851_formal).dtor_name), RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::LazyFieldWrapper"), Dafny.Sequence<RAST._IType>.FromElements(_1852_formalType)))));
          } else {
            _1849_ctorArgs = Dafny.Sequence<RAST._IFormal>.Concat(_1849_ctorArgs, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_1851_formal).dtor_name), _1852_formalType)));
          }
          _1850_j = (_1850_j) + (BigInteger.One);
        }
        _1846_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_1846_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(DCOMP.__default.escapeIdent((_1848_ctor).dtor_name), RAST.Formals.create_NamedFormals(_1849_ctorArgs))));
        _1847_i = (_1847_i) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1853_selfPath;
      _1853_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<RAST._IImplMember> _1854_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _1855_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out52;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out53;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(_1853_selfPath)), _1839_typeParamsSet, out _out52, out _out53);
      _1854_implBodyRaw = _out52;
      _1855_traitBodies = _out53;
      Dafny.ISequence<RAST._IImplMember> _1856_implBody;
      _1856_implBody = _1854_implBodyRaw;
      _1847_i = BigInteger.Zero;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1857_emittedFields;
      _1857_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      while ((_1847_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _1858_ctor;
        _1858_ctor = ((c).dtor_ctors).Select(_1847_i);
        BigInteger _1859_j;
        _1859_j = BigInteger.Zero;
        while ((_1859_j) < (new BigInteger(((_1858_ctor).dtor_args).Count))) {
          DAST._IFormal _1860_formal;
          _1860_formal = ((_1858_ctor).dtor_args).Select(_1859_j);
          if (!((_1857_emittedFields).Contains((_1860_formal).dtor_name))) {
            _1857_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_1857_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_1860_formal).dtor_name));
            RAST._IType _1861_formalType;
            RAST._IType _out54;
            _out54 = DCOMP.COMP.GenType((_1860_formal).dtor_typ, false, false);
            _1861_formalType = _out54;
            Dafny.ISequence<RAST._IMatchCase> _1862_cases;
            _1862_cases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
            BigInteger _1863_k;
            _1863_k = BigInteger.Zero;
            while ((_1863_k) < (new BigInteger(((c).dtor_ctors).Count))) {
              DAST._IDatatypeCtor _1864_ctor2;
              _1864_ctor2 = ((c).dtor_ctors).Select(_1863_k);
              Dafny.ISequence<Dafny.Rune> _1865_pattern;
              _1865_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_1864_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              Dafny.ISequence<Dafny.Rune> _1866_rhs = Dafny.Sequence<Dafny.Rune>.Empty;
              BigInteger _1867_l;
              _1867_l = BigInteger.Zero;
              bool _1868_hasMatchingField;
              _1868_hasMatchingField = false;
              while ((_1867_l) < (new BigInteger(((_1864_ctor2).dtor_args).Count))) {
                DAST._IFormal _1869_formal2;
                _1869_formal2 = ((_1864_ctor2).dtor_args).Select(_1867_l);
                if (((_1860_formal).dtor_name).Equals((_1869_formal2).dtor_name)) {
                  _1868_hasMatchingField = true;
                }
                _1865_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1865_pattern, DCOMP.__default.escapeIdent((_1869_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                _1867_l = (_1867_l) + (BigInteger.One);
              }
              _1865_pattern = Dafny.Sequence<Dafny.Rune>.Concat(_1865_pattern, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
              if (_1868_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _1866_rhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&"), DCOMP.__default.escapeIdent((_1860_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0)"));
                } else {
                  _1866_rhs = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_1860_formal).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              } else {
                _1866_rhs = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"field does not exist on this variant\")");
              }
              RAST._IMatchCase _1870_ctorMatch;
              _1870_ctorMatch = RAST.MatchCase.create(_1865_pattern, RAST.Expr.create_RawExpr(_1866_rhs));
              _1862_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_1862_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(_1870_ctorMatch));
              _1863_k = (_1863_k) + (BigInteger.One);
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _1862_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_1862_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!()")))));
            }
            RAST._IExpr _1871_methodBody;
            _1871_methodBody = RAST.Expr.create_Match(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")), _1862_cases);
            _1856_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(_1856_implBody, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PUB(), RAST.Fn.create(DCOMP.__default.escapeIdent((_1860_formal).dtor_name), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_Borrowed(_1861_formalType)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_1871_methodBody)))));
          }
          _1859_j = (_1859_j) + (BigInteger.One);
        }
        _1847_i = (_1847_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        BigInteger _1872_typeI;
        _1872_typeI = BigInteger.Zero;
        Dafny.ISequence<RAST._IType> _1873_types;
        _1873_types = Dafny.Sequence<RAST._IType>.FromElements();
        while ((_1872_typeI) < (new BigInteger(((c).dtor_typeParams).Count))) {
          RAST._IType _1874_genTp;
          RAST._IType _out55;
          _out55 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_1872_typeI), false, false);
          _1874_genTp = _out55;
          _1873_types = Dafny.Sequence<RAST._IType>.Concat(_1873_types, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData::"), Dafny.Sequence<RAST._IType>.FromElements(_1874_genTp))));
          _1872_typeI = (_1872_typeI) + (BigInteger.One);
        }
        _1846_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_1846_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant"), RAST.Formals.create_NamelessFormals(Std.Collections.Seq.__default.Map<RAST._IType, RAST._INamelessFormal>(((System.Func<RAST._IType, RAST._INamelessFormal>)((_1875_tpe) => {
  return RAST.NamelessFormal.create(RAST.Visibility.create_PRIV(), _1875_tpe);
})), _1873_types)))));
      }
      Dafny.ISequence<RAST._IModDecl> _1876_enumBody;
      _1876_enumBody = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_EnumDecl(RAST.Enum.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq)]")), DCOMP.__default.escapeIdent((c).dtor_name), _1840_sTypeParams, _1846_ctors)), RAST.ModDecl.create_ImplDecl(RAST.Impl.create_Impl(_1841_sConstrainedTypeParams, RAST.Type.create_TypeApp(DCOMP.__default.escapeIdent((c).dtor_name), _1843_typeParamsAsTypes), _1842_whereConstraints, _1856_implBody)));
      _1847_i = BigInteger.Zero;
      Dafny.ISequence<RAST._IMatchCase> _1877_printImplBodyCases;
      _1877_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
      while ((_1847_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _1878_ctor;
        _1878_ctor = ((c).dtor_ctors).Select(_1847_i);
        Dafny.ISequence<Dafny.Rune> _1879_ctorMatch;
        _1879_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_1878_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _1880_modulePrefix;
        _1880_modulePrefix = (((((c).dtor_enclosingModule)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(((c).dtor_enclosingModule), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        RAST._IExpr _1881_printRhs;
        _1881_printRhs = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), _1880_modulePrefix), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent((_1878_ctor).dtor_name)), (((_1878_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?")))));
        BigInteger _1882_j;
        _1882_j = BigInteger.Zero;
        while ((_1882_j) < (new BigInteger(((_1878_ctor).dtor_args).Count))) {
          DAST._IFormal _1883_formal;
          _1883_formal = ((_1878_ctor).dtor_args).Select(_1882_j);
          _1879_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1879_ctorMatch, DCOMP.__default.escapeIdent((_1883_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          if ((_1882_j).Sign == 1) {
            _1881_printRhs = (_1881_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \", \")?")));
          }
          _1881_printRhs = (_1881_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print("), DCOMP.__default.escapeIdent((_1883_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", _formatter, false)?"))));
          _1882_j = (_1882_j) + (BigInteger.One);
        }
        _1879_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_1879_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_1878_ctor).dtor_hasAnyArgs) {
          _1881_printRhs = (_1881_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \")\")?")));
        }
        _1881_printRhs = (_1881_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Ok(())")));
        _1877_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_1877_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _1879_ctorMatch), RAST.Expr.create_Block(_1881_printRhs))));
        _1847_i = (_1847_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _1877_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_1877_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{panic!()}")))));
      }
      RAST._IExpr _1884_printImplBody;
      _1884_printImplBody = RAST.Expr.create_Match(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")), _1877_printImplBodyCases);
      Dafny.ISequence<RAST._IModDecl> _1885_printImpl;
      _1885_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_1841_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(DCOMP.__default.escapeIdent((c).dtor_name), _1843_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_1884_printImplBody)))))));
      Dafny.ISequence<RAST._IModDecl> _1886_defaultImpl;
      _1886_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements();
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        _1847_i = BigInteger.Zero;
        Dafny.ISequence<Dafny.Rune> _1887_structName;
        _1887_structName = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name));
        Dafny.ISequence<RAST._IAssignIdentifier> _1888_structAssignments;
        _1888_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
        while ((_1847_i) < (new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count))) {
          DAST._IFormal _1889_formal;
          _1889_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_1847_i);
          _1888_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_1888_structAssignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent((_1889_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default::default()")))));
          _1847_i = (_1847_i) + (BigInteger.One);
        }
        Dafny.ISequence<RAST._ITypeParam> _1890_defaultConstrainedTypeParams;
        _1890_defaultConstrainedTypeParams = RAST.TypeParam.AddConstraintsMultiple(_1840_sTypeParams, Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.DefaultTrait));
        _1886_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_1890_defaultConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(DCOMP.__default.escapeIdent((c).dtor_name), _1843_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(_1887_structName, _1888_structAssignments))))))));
      }
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(_1876_enumBody, _1885_printImpl), _1886_defaultImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      if ((new BigInteger((p).Count)).Sign == 0) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
        return s;
      } else {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super::");
        BigInteger _1891_i;
        _1891_i = BigInteger.Zero;
        while ((_1891_i) < (new BigInteger((p).Count))) {
          if ((_1891_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(((p).Select(_1891_i))));
          _1891_i = (_1891_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static Dafny.ISequence<RAST._IType> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn)
    {
      Dafny.ISequence<RAST._IType> s = Dafny.Sequence<RAST._IType>.Empty;
      s = Dafny.Sequence<RAST._IType>.FromElements();
      if ((new BigInteger((args).Count)).Sign == 1) {
        BigInteger _1892_i;
        _1892_i = BigInteger.Zero;
        while ((_1892_i) < (new BigInteger((args).Count))) {
          RAST._IType _1893_genTp;
          RAST._IType _out56;
          _out56 = DCOMP.COMP.GenType((args).Select(_1892_i), inBinding, inFn);
          _1893_genTp = _out56;
          s = Dafny.Sequence<RAST._IType>.Concat(s, Dafny.Sequence<RAST._IType>.FromElements(_1893_genTp));
          _1892_i = (_1892_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static RAST._IType GenType(DAST._IType c, bool inBinding, bool inFn)
    {
      RAST._IType s = RAST.Type.Default();
      DAST._IType _source62 = c;
      if (_source62.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1894___mcc_h0 = _source62.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _1895___mcc_h1 = _source62.dtor_typeArgs;
        DAST._IResolvedType _1896___mcc_h2 = _source62.dtor_resolved;
        DAST._IResolvedType _1897_resolved = _1896___mcc_h2;
        Dafny.ISequence<DAST._IType> _1898_args = _1895___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1899_p = _1894___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _1900_t;
          Dafny.ISequence<Dafny.Rune> _out57;
          _out57 = DCOMP.COMP.GenPath(_1899_p);
          _1900_t = _out57;
          s = RAST.Type.create_TypeApp(_1900_t, Dafny.Sequence<RAST._IType>.FromElements());
          Dafny.ISequence<RAST._IType> _1901_typeArgs;
          Dafny.ISequence<RAST._IType> _out58;
          _out58 = DCOMP.COMP.GenTypeArgs(_1898_args, inBinding, inFn);
          _1901_typeArgs = _out58;
          var _pat_let_tv9 = _1901_typeArgs;
          s = Dafny.Helpers.Let<RAST._IType, RAST._IType>(s, _pat_let6_0 => Dafny.Helpers.Let<RAST._IType, RAST._IType>(_pat_let6_0, _1902_dt__update__tmp_h0 => Dafny.Helpers.Let<Dafny.ISequence<RAST._IType>, RAST._IType>(_pat_let_tv9, _pat_let7_0 => Dafny.Helpers.Let<Dafny.ISequence<RAST._IType>, RAST._IType>(_pat_let7_0, _1903_dt__update_harguments_h0 => (((_1902_dt__update__tmp_h0).is_TypeApp) ? (RAST.Type.create_TypeApp((_1902_dt__update__tmp_h0).dtor_baseName, _1903_dt__update_harguments_h0)) : ((((_1902_dt__update__tmp_h0).is_TupleType) ? (RAST.Type.create_TupleType(_1903_dt__update_harguments_h0)) : (RAST.Type.create_FnType(_1903_dt__update_harguments_h0, (_1902_dt__update__tmp_h0).dtor_returnType)))))))));
          DAST._IResolvedType _source63 = _1897_resolved;
          if (_source63.is_Datatype) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1904___mcc_h21 = _source63.dtor_path;
            {
              s = RAST.__default.Rc(s);
            }
          } else if (_source63.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1905___mcc_h22 = _source63.dtor_path;
            {
              if ((_1899_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
                s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<dyn ::std::any::Any>"));
              } else {
                if (inBinding) {
                  s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
                } else {
                  s = RAST.Type.create_ImplType(s);
                }
              }
            }
          } else {
            DAST._IType _1906___mcc_h23 = _source63.dtor_baseType;
            DAST._INewtypeRange _1907___mcc_h24 = _source63.dtor_range;
            bool _1908___mcc_h25 = _source63.dtor_erase;
            bool _1909_erased = _1908___mcc_h25;
            DAST._INewtypeRange _1910_range = _1907___mcc_h24;
            DAST._IType _1911_t = _1906___mcc_h23;
            {
              if (_1909_erased) {
                Std.Wrappers._IOption<RAST._IType> _source64 = DCOMP.COMP.NewtypeToRustType(_1911_t, _1910_range);
                if (_source64.is_None) {
                } else {
                  RAST._IType _1912___mcc_h26 = _source64.dtor_value;
                  RAST._IType _1913_v = _1912___mcc_h26;
                  s = _1913_v;
                }
              }
            }
          }
        }
      } else if (_source62.is_Nullable) {
        DAST._IType _1914___mcc_h3 = _source62.dtor_Nullable_a0;
        DAST._IType _1915_inner = _1914___mcc_h3;
        {
          RAST._IType _1916_innerExpr;
          RAST._IType _out59;
          _out59 = DCOMP.COMP.GenType(_1915_inner, inBinding, inFn);
          _1916_innerExpr = _out59;
          s = RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option"), Dafny.Sequence<RAST._IType>.FromElements(_1916_innerExpr));
        }
      } else if (_source62.is_Tuple) {
        Dafny.ISequence<DAST._IType> _1917___mcc_h4 = _source62.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IType> _1918_types = _1917___mcc_h4;
        {
          Dafny.ISequence<RAST._IType> _1919_args;
          _1919_args = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _1920_i;
          _1920_i = BigInteger.Zero;
          while ((_1920_i) < (new BigInteger((_1918_types).Count))) {
            RAST._IType _1921_generated;
            RAST._IType _out60;
            _out60 = DCOMP.COMP.GenType((_1918_types).Select(_1920_i), inBinding, inFn);
            _1921_generated = _out60;
            _1919_args = Dafny.Sequence<RAST._IType>.Concat(_1919_args, Dafny.Sequence<RAST._IType>.FromElements(_1921_generated));
            _1920_i = (_1920_i) + (BigInteger.One);
          }
          s = RAST.Type.create_TupleType(_1919_args);
        }
      } else if (_source62.is_Array) {
        DAST._IType _1922___mcc_h5 = _source62.dtor_element;
        BigInteger _1923___mcc_h6 = _source62.dtor_dims;
        BigInteger _1924_dims = _1923___mcc_h6;
        DAST._IType _1925_element = _1922___mcc_h5;
        {
          RAST._IType _1926_elem;
          RAST._IType _out61;
          _out61 = DCOMP.COMP.GenType(_1925_element, inBinding, inFn);
          _1926_elem = _out61;
          s = _1926_elem;
          BigInteger _1927_i;
          _1927_i = BigInteger.Zero;
          while ((_1927_i) < (_1924_dims)) {
            s = RAST.__default.Rc(RAST.__default.RefCell(RAST.__default.Vec(s)));
            _1927_i = (_1927_i) + (BigInteger.One);
          }
        }
      } else if (_source62.is_Seq) {
        DAST._IType _1928___mcc_h7 = _source62.dtor_element;
        DAST._IType _1929_element = _1928___mcc_h7;
        {
          RAST._IType _1930_elem;
          RAST._IType _out62;
          _out62 = DCOMP.COMP.GenType(_1929_element, inBinding, inFn);
          _1930_elem = _out62;
          s = RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::Sequence"), Dafny.Sequence<RAST._IType>.FromElements(_1930_elem));
        }
      } else if (_source62.is_Set) {
        DAST._IType _1931___mcc_h8 = _source62.dtor_element;
        DAST._IType _1932_element = _1931___mcc_h8;
        {
          RAST._IType _1933_elem;
          RAST._IType _out63;
          _out63 = DCOMP.COMP.GenType(_1932_element, inBinding, inFn);
          _1933_elem = _out63;
          s = RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::Set"), Dafny.Sequence<RAST._IType>.FromElements(_1933_elem));
        }
      } else if (_source62.is_Multiset) {
        DAST._IType _1934___mcc_h9 = _source62.dtor_element;
        DAST._IType _1935_element = _1934___mcc_h9;
        {
          RAST._IType _1936_elem;
          RAST._IType _out64;
          _out64 = DCOMP.COMP.GenType(_1935_element, inBinding, inFn);
          _1936_elem = _out64;
          s = RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::Multiset"), Dafny.Sequence<RAST._IType>.FromElements(_1936_elem));
        }
      } else if (_source62.is_Map) {
        DAST._IType _1937___mcc_h10 = _source62.dtor_key;
        DAST._IType _1938___mcc_h11 = _source62.dtor_value;
        DAST._IType _1939_value = _1938___mcc_h11;
        DAST._IType _1940_key = _1937___mcc_h10;
        {
          RAST._IType _1941_keyType;
          RAST._IType _out65;
          _out65 = DCOMP.COMP.GenType(_1940_key, inBinding, inFn);
          _1941_keyType = _out65;
          RAST._IType _1942_valueType;
          RAST._IType _out66;
          _out66 = DCOMP.COMP.GenType(_1939_value, inBinding, inFn);
          _1942_valueType = _out66;
          s = RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::Map"), Dafny.Sequence<RAST._IType>.FromElements(_1941_keyType, _1942_valueType));
        }
      } else if (_source62.is_SetBuilder) {
        DAST._IType _1943___mcc_h12 = _source62.dtor_element;
        DAST._IType _1944_elem = _1943___mcc_h12;
        {
          RAST._IType _1945_elemType;
          RAST._IType _out67;
          _out67 = DCOMP.COMP.GenType(_1944_elem, inBinding, inFn);
          _1945_elemType = _out67;
          s = RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::SetBuilder"), Dafny.Sequence<RAST._IType>.FromElements(_1945_elemType));
        }
      } else if (_source62.is_MapBuilder) {
        DAST._IType _1946___mcc_h13 = _source62.dtor_key;
        DAST._IType _1947___mcc_h14 = _source62.dtor_value;
        DAST._IType _1948_value = _1947___mcc_h14;
        DAST._IType _1949_key = _1946___mcc_h13;
        {
          RAST._IType _1950_keyType;
          RAST._IType _out68;
          _out68 = DCOMP.COMP.GenType(_1949_key, inBinding, inFn);
          _1950_keyType = _out68;
          RAST._IType _1951_valueType;
          RAST._IType _out69;
          _out69 = DCOMP.COMP.GenType(_1948_value, inBinding, inFn);
          _1951_valueType = _out69;
          s = RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::MapBuilder"), Dafny.Sequence<RAST._IType>.FromElements(_1950_keyType, _1951_valueType));
        }
      } else if (_source62.is_Arrow) {
        Dafny.ISequence<DAST._IType> _1952___mcc_h15 = _source62.dtor_args;
        DAST._IType _1953___mcc_h16 = _source62.dtor_result;
        DAST._IType _1954_result = _1953___mcc_h16;
        Dafny.ISequence<DAST._IType> _1955_args = _1952___mcc_h15;
        {
          Dafny.ISequence<RAST._IType> _1956_argTypes;
          _1956_argTypes = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _1957_i;
          _1957_i = BigInteger.Zero;
          while ((_1957_i) < (new BigInteger((_1955_args).Count))) {
            RAST._IType _1958_generated;
            RAST._IType _out70;
            _out70 = DCOMP.COMP.GenType((_1955_args).Select(_1957_i), inBinding, true);
            _1958_generated = _out70;
            _1956_argTypes = Dafny.Sequence<RAST._IType>.Concat(_1956_argTypes, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_Borrowed(_1958_generated)));
            _1957_i = (_1957_i) + (BigInteger.One);
          }
          RAST._IType _1959_resultType;
          RAST._IType _out71;
          _out71 = DCOMP.COMP.GenType(_1954_result, inBinding, (inFn) || (inBinding));
          _1959_resultType = _out71;
          s = RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper"), Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_FnType(_1956_argTypes, RAST.Type.create_IntersectionType(_1959_resultType, RAST.__default.StaticTrait))));
        }
      } else if (_source62.is_Primitive) {
        DAST._IPrimitive _1960___mcc_h17 = _source62.dtor_Primitive_a0;
        DAST._IPrimitive _1961_p = _1960___mcc_h17;
        {
          DAST._IPrimitive _source65 = _1961_p;
          if (_source65.is_Int) {
            s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyInt"));
          } else if (_source65.is_Real) {
            s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational"));
          } else if (_source65.is_String) {
            s = RAST.__default.Vec(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char")));
          } else if (_source65.is_Bool) {
            s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool"));
          } else {
            s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char"));
          }
        }
      } else if (_source62.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _1962___mcc_h18 = _source62.dtor_Passthrough_a0;
        Dafny.ISequence<Dafny.Rune> _1963_v = _1962___mcc_h18;
        s = RAST.__default.RawType(_1963_v);
      } else {
        Dafny.ISequence<Dafny.Rune> _1964___mcc_h19 = _source62.dtor_TypeArg_a0;
        Dafny.ISequence<Dafny.Rune> _source66 = _1964___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _1965___mcc_h20 = _source66;
        Dafny.ISequence<Dafny.Rune> _1966_name = _1965___mcc_h20;
        s = RAST.__default.RawType(DCOMP.__default.escapeIdent(_1966_name));
      }
      return s;
    }
    public static void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<RAST._IImplMember> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> traitBodies)
    {
      s = Dafny.Sequence<RAST._IImplMember>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Empty;
      s = Dafny.Sequence<RAST._IImplMember>.FromElements();
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements();
      BigInteger _1967_i;
      _1967_i = BigInteger.Zero;
      while ((_1967_i) < (new BigInteger((body).Count))) {
        DAST._IMethod _source67 = (body).Select(_1967_i);
        DAST._IMethod _1968___mcc_h0 = _source67;
        DAST._IMethod _1969_m = _1968___mcc_h0;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source68 = (_1969_m).dtor_overridingPath;
          if (_source68.is_None) {
            {
              RAST._IImplMember _1970_generated;
              RAST._IImplMember _out72;
              _out72 = DCOMP.COMP.GenMethod(_1969_m, forTrait, enclosingType, enclosingTypeParams);
              _1970_generated = _out72;
              s = Dafny.Sequence<RAST._IImplMember>.Concat(s, Dafny.Sequence<RAST._IImplMember>.FromElements(_1970_generated));
            }
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1971___mcc_h1 = _source68.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1972_p = _1971___mcc_h1;
            {
              Dafny.ISequence<RAST._IImplMember> _1973_existing;
              _1973_existing = Dafny.Sequence<RAST._IImplMember>.FromElements();
              if ((traitBodies).Contains(_1972_p)) {
                _1973_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(traitBodies,_1972_p);
              }
              RAST._IImplMember _1974_genMethod;
              RAST._IImplMember _out73;
              _out73 = DCOMP.COMP.GenMethod(_1969_m, true, enclosingType, enclosingTypeParams);
              _1974_genMethod = _out73;
              _1973_existing = Dafny.Sequence<RAST._IImplMember>.Concat(_1973_existing, Dafny.Sequence<RAST._IImplMember>.FromElements(_1974_genMethod));
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>(_1972_p, _1973_existing)));
            }
          }
        }
        _1967_i = (_1967_i) + (BigInteger.One);
      }
    }
    public static Dafny.ISequence<RAST._IFormal> GenParams(Dafny.ISequence<DAST._IFormal> @params)
    {
      Dafny.ISequence<RAST._IFormal> s = Dafny.Sequence<RAST._IFormal>.Empty;
      s = Dafny.Sequence<RAST._IFormal>.FromElements();
      BigInteger _1975_i;
      _1975_i = BigInteger.Zero;
      while ((_1975_i) < (new BigInteger((@params).Count))) {
        DAST._IFormal _1976_param;
        _1976_param = (@params).Select(_1975_i);
        RAST._IType _1977_paramType;
        RAST._IType _out74;
        _out74 = DCOMP.COMP.GenType((_1976_param).dtor_typ, false, false);
        _1977_paramType = _out74;
        s = Dafny.Sequence<RAST._IFormal>.Concat(s, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_1976_param).dtor_name), RAST.Type.create_Borrowed(_1977_paramType))));
        _1975_i = (_1975_i) + (BigInteger.One);
      }
      return s;
    }
    public static RAST._IImplMember GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams)
    {
      RAST._IImplMember s = RAST.ImplMember.Default();
      Dafny.ISequence<RAST._IFormal> _1978_params;
      Dafny.ISequence<RAST._IFormal> _out75;
      _out75 = DCOMP.COMP.GenParams((m).dtor_params);
      _1978_params = _out75;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1979_paramNames;
      _1979_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _1980_paramI;
      _1980_paramI = BigInteger.Zero;
      while ((_1980_paramI) < (new BigInteger(((m).dtor_params).Count))) {
        _1979_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_1979_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((m).dtor_params).Select(_1980_paramI)).dtor_name));
        _1980_paramI = (_1980_paramI) + (BigInteger.One);
      }
      if (!((m).dtor_isStatic)) {
        if (forTrait) {
          _1978_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self), _1978_params);
        } else {
          RAST._IType _1981_tpe;
          RAST._IType _out76;
          _out76 = DCOMP.COMP.GenType(enclosingType, false, false);
          _1981_tpe = _out76;
          _1978_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), RAST.Type.create_Borrowed(_1981_tpe))), _1978_params);
        }
      }
      Dafny.ISequence<RAST._IType> _1982_retTypeArgs;
      _1982_retTypeArgs = Dafny.Sequence<RAST._IType>.FromElements();
      BigInteger _1983_typeI;
      _1983_typeI = BigInteger.Zero;
      while ((_1983_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        RAST._IType _1984_typeExpr;
        RAST._IType _out77;
        _out77 = DCOMP.COMP.GenType(((m).dtor_outTypes).Select(_1983_typeI), false, false);
        _1984_typeExpr = _out77;
        _1982_retTypeArgs = Dafny.Sequence<RAST._IType>.Concat(_1982_retTypeArgs, Dafny.Sequence<RAST._IType>.FromElements(_1984_typeExpr));
        _1983_typeI = (_1983_typeI) + (BigInteger.One);
      }
      RAST._IVisibility _1985_visibility;
      _1985_visibility = RAST.Visibility.create_PUB();
      Dafny.ISequence<Dafny.Rune> _1986_fnName;
      _1986_fnName = DCOMP.__default.escapeIdent((m).dtor_name);
      Dafny.ISequence<DAST._IType> _1987_typeParamsFiltered;
      _1987_typeParamsFiltered = Dafny.Sequence<DAST._IType>.FromElements();
      BigInteger _1988_typeParamI;
      _1988_typeParamI = BigInteger.Zero;
      while ((_1988_typeParamI) < (new BigInteger(((m).dtor_typeParams).Count))) {
        DAST._IType _1989_typeParam;
        _1989_typeParam = ((m).dtor_typeParams).Select(_1988_typeParamI);
        if (!((enclosingTypeParams).Contains(_1989_typeParam))) {
          _1987_typeParamsFiltered = Dafny.Sequence<DAST._IType>.Concat(_1987_typeParamsFiltered, Dafny.Sequence<DAST._IType>.FromElements(_1989_typeParam));
        }
        _1988_typeParamI = (_1988_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _1990_whereClauses;
      _1990_whereClauses = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<RAST._ITypeParam> _1991_typeParams;
      _1991_typeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      if ((new BigInteger((_1987_typeParamsFiltered).Count)).Sign == 1) {
        _1990_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_1990_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where "));
        BigInteger _1992_i;
        _1992_i = BigInteger.Zero;
        while ((_1992_i) < (new BigInteger((_1987_typeParamsFiltered).Count))) {
          RAST._IType _1993_typeExpr;
          RAST._IType _out78;
          _out78 = DCOMP.COMP.GenType((_1987_typeParamsFiltered).Select(_1992_i), false, false);
          _1993_typeExpr = _out78;
          _1991_typeParams = Dafny.Sequence<RAST._ITypeParam>.Concat(_1991_typeParams, Dafny.Sequence<RAST._ITypeParam>.FromElements(RAST.TypeParam.create((_1993_typeExpr)._ToString(DCOMP.__default.IND), Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.CloneTrait, RAST.__default.DafnyPrintTrait, RAST.__default.DefaultTrait, RAST.__default.StaticTrait))));
          _1992_i = (_1992_i) + (BigInteger.One);
        }
      }
      Std.Wrappers._IOption<RAST._IExpr> _1994_fBody = Std.Wrappers.Option<RAST._IExpr>.Default();
      if ((m).dtor_hasBody) {
        RAST._IExpr _1995_earlyReturn;
        _1995_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_None());
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source69 = (m).dtor_outVars;
        if (_source69.is_None) {
        } else {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1996___mcc_h0 = _source69.dtor_value;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1997_outVars = _1996___mcc_h0;
          {
            Dafny.ISequence<RAST._IExpr> _1998_tupleArgs;
            _1998_tupleArgs = Dafny.Sequence<RAST._IExpr>.FromElements();
            BigInteger _1999_outI;
            _1999_outI = BigInteger.Zero;
            while ((_1999_outI) < (new BigInteger((_1997_outVars).Count))) {
              Dafny.ISequence<Dafny.Rune> _2000_outVar;
              _2000_outVar = (_1997_outVars).Select(_1999_outI);
              _1998_tupleArgs = Dafny.Sequence<RAST._IExpr>.Concat(_1998_tupleArgs, Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Identifier(DCOMP.__default.escapeIdent((_2000_outVar)))));
              _1999_outI = (_1999_outI) + (BigInteger.One);
            }
            _1995_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_Tuple(_1998_tupleArgs)));
          }
        }
        RAST._IExpr _2001_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2002___v30;
        RAST._IExpr _out79;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out80;
        DCOMP.COMP.GenStmts((m).dtor_body, (((m).dtor_isStatic) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None()) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))), _1979_paramNames, true, _1995_earlyReturn, out _out79, out _out80);
        _2001_body = _out79;
        _2002___v30 = _out80;
        _1994_fBody = Std.Wrappers.Option<RAST._IExpr>.create_Some(_2001_body);
      } else {
        _1994_fBody = Std.Wrappers.Option<RAST._IExpr>.create_None();
      }
      s = RAST.ImplMember.create_FnDecl(_1985_visibility, RAST.Fn.create(_1986_fnName, _1991_typeParams, _1978_params, Std.Wrappers.Option<RAST._IType>.create_Some((((new BigInteger((_1982_retTypeArgs).Count)) == (BigInteger.One)) ? ((_1982_retTypeArgs).Select(BigInteger.Zero)) : (RAST.Type.create_TupleType(_1982_retTypeArgs)))), _1990_whereClauses, _1994_fBody));
      return s;
    }
    public static void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, RAST._IExpr earlyReturn, out RAST._IExpr generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = RAST.Expr.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2003_declarations;
      _2003_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _2004_i;
      _2004_i = BigInteger.Zero;
      while ((_2004_i) < (new BigInteger((stmts).Count))) {
        DAST._IStatement _2005_stmt;
        _2005_stmt = (stmts).Select(_2004_i);
        RAST._IExpr _2006_stmtExpr;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2007_recIdents;
        RAST._IExpr _out81;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out82;
        DCOMP.COMP.GenStmt(_2005_stmt, selfIdent, @params, (isLast) && ((_2004_i) == ((new BigInteger((stmts).Count)) - (BigInteger.One))), earlyReturn, out _out81, out _out82);
        _2006_stmtExpr = _out81;
        _2007_recIdents = _out82;
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_2007_recIdents, _2003_declarations));
        DAST._IStatement _source70 = _2005_stmt;
        if (_source70.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _2008___mcc_h0 = _source70.dtor_name;
          DAST._IType _2009___mcc_h1 = _source70.dtor_typ;
          Std.Wrappers._IOption<DAST._IExpression> _2010___mcc_h2 = _source70.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _2011_name = _2008___mcc_h0;
          {
            _2003_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2003_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2011_name));
          }
        } else if (_source70.is_Assign) {
          DAST._IAssignLhs _2012___mcc_h6 = _source70.dtor_lhs;
          DAST._IExpression _2013___mcc_h7 = _source70.dtor_value;
        } else if (_source70.is_If) {
          DAST._IExpression _2014___mcc_h10 = _source70.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _2015___mcc_h11 = _source70.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _2016___mcc_h12 = _source70.dtor_els;
        } else if (_source70.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _2017___mcc_h16 = _source70.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _2018___mcc_h17 = _source70.dtor_body;
        } else if (_source70.is_While) {
          DAST._IExpression _2019___mcc_h20 = _source70.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _2020___mcc_h21 = _source70.dtor_body;
        } else if (_source70.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _2021___mcc_h24 = _source70.dtor_boundName;
          DAST._IType _2022___mcc_h25 = _source70.dtor_boundType;
          DAST._IExpression _2023___mcc_h26 = _source70.dtor_over;
          Dafny.ISequence<DAST._IStatement> _2024___mcc_h27 = _source70.dtor_body;
        } else if (_source70.is_Call) {
          DAST._IExpression _2025___mcc_h32 = _source70.dtor_on;
          DAST._ICallName _2026___mcc_h33 = _source70.dtor_callName;
          Dafny.ISequence<DAST._IType> _2027___mcc_h34 = _source70.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _2028___mcc_h35 = _source70.dtor_args;
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _2029___mcc_h36 = _source70.dtor_outs;
        } else if (_source70.is_Return) {
          DAST._IExpression _2030___mcc_h42 = _source70.dtor_expr;
        } else if (_source70.is_EarlyReturn) {
        } else if (_source70.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2031___mcc_h44 = _source70.dtor_toLabel;
        } else if (_source70.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _2032___mcc_h46 = _source70.dtor_body;
        } else if (_source70.is_JumpTailCallStart) {
        } else if (_source70.is_Halt) {
        } else {
          DAST._IExpression _2033___mcc_h48 = _source70.dtor_Print_a0;
        }
        generated = (generated).Then(_2006_stmtExpr);
        _2004_i = (_2004_i) + (BigInteger.One);
      }
    }
    public static void GenAssignLhs(DAST._IAssignLhs lhs, Dafny.ISequence<Dafny.Rune> rhs, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, out Dafny.ISequence<Dafny.Rune> generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IAssignLhs _source71 = lhs;
      if (_source71.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _2034___mcc_h0 = _source71.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source72 = _2034___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _2035___mcc_h1 = _source72;
        Dafny.ISequence<Dafny.Rune> _2036_id = _2035___mcc_h1;
        {
          if ((@params).Contains(_2036_id)) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), DCOMP.__default.escapeIdent(_2036_id));
          } else {
            generated = DCOMP.__default.escapeIdent(_2036_id);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2036_id);
          needsIIFE = false;
        }
      } else if (_source71.is_Select) {
        DAST._IExpression _2037___mcc_h2 = _source71.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _2038___mcc_h3 = _source71.dtor_field;
        Dafny.ISequence<Dafny.Rune> _2039_field = _2038___mcc_h3;
        DAST._IExpression _2040_on = _2037___mcc_h2;
        {
          RAST._IExpr _2041_onExpr;
          DCOMP._IOwnership _2042_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2043_recIdents;
          RAST._IExpr _out83;
          DCOMP._IOwnership _out84;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out85;
          DCOMP.COMP.GenExpr(_2040_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out83, out _out84, out _out85);
          _2041_onExpr = _out83;
          _2042_onOwned = _out84;
          _2043_recIdents = _out85;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*("), (_2041_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _2039_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()) = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          readIdents = _2043_recIdents;
          needsIIFE = true;
        }
      } else {
        DAST._IExpression _2044___mcc_h4 = _source71.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _2045___mcc_h5 = _source71.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _2046_indices = _2045___mcc_h5;
        DAST._IExpression _2047_on = _2044___mcc_h4;
        {
          RAST._IExpr _2048_onExpr;
          DCOMP._IOwnership _2049_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2050_recIdents;
          RAST._IExpr _out86;
          DCOMP._IOwnership _out87;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out88;
          DCOMP.COMP.GenExpr(_2047_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out86, out _out87, out _out88);
          _2048_onExpr = _out86;
          _2049_onOwned = _out87;
          _2050_recIdents = _out88;
          readIdents = _2050_recIdents;
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          BigInteger _2051_i;
          _2051_i = BigInteger.Zero;
          while ((_2051_i) < (new BigInteger((_2046_indices).Count))) {
            RAST._IExpr _2052_idx;
            DCOMP._IOwnership _2053___v34;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2054_recIdentsIdx;
            RAST._IExpr _out89;
            DCOMP._IOwnership _out90;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out91;
            DCOMP.COMP.GenExpr((_2046_indices).Select(_2051_i), selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out89, out _out90, out _out91);
            _2052_idx = _out89;
            _2053___v34 = _out90;
            _2054_recIdentsIdx = _out91;
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let __idx")), Std.Strings.__default.OfNat(_2051_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = <usize as ::dafny_runtime::NumCast>::from(")), (_2052_idx)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap();\n"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2054_recIdentsIdx);
            _2051_i = (_2051_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, (_2048_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()"));
          _2051_i = BigInteger.Zero;
          while ((_2051_i) < (new BigInteger((_2046_indices).Count))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[__idx")), Std.Strings.__default.OfNat(_2051_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            _2051_i = (_2051_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}"));
          needsIIFE = true;
        }
      }
    }
    public static void GenStmt(DAST._IStatement stmt, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, RAST._IExpr earlyReturn, out RAST._IExpr generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = RAST.Expr.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IStatement _source73 = stmt;
      if (_source73.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _2055___mcc_h0 = _source73.dtor_name;
        DAST._IType _2056___mcc_h1 = _source73.dtor_typ;
        Std.Wrappers._IOption<DAST._IExpression> _2057___mcc_h2 = _source73.dtor_maybeValue;
        Std.Wrappers._IOption<DAST._IExpression> _source74 = _2057___mcc_h2;
        if (_source74.is_None) {
          DAST._IType _2058_typ = _2056___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _2059_name = _2055___mcc_h0;
          {
            RAST._IType _2060_typeString;
            RAST._IType _out92;
            _out92 = DCOMP.COMP.GenType(_2058_typ, true, false);
            _2060_typeString = _out92;
            generated = RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMP.__default.escapeIdent(_2059_name), Std.Wrappers.Option<RAST._IType>.create_Some(_2060_typeString), Std.Wrappers.Option<RAST._IExpr>.create_None());
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IExpression _2061___mcc_h3 = _source74.dtor_value;
          DAST._IExpression _2062_expression = _2061___mcc_h3;
          DAST._IType _2063_typ = _2056___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _2064_name = _2055___mcc_h0;
          {
            RAST._IType _2065_typeString;
            RAST._IType _out93;
            _out93 = DCOMP.COMP.GenType(_2063_typ, true, false);
            _2065_typeString = _out93;
            RAST._IExpr _2066_expr;
            DCOMP._IOwnership _2067___v35;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2068_recIdents;
            RAST._IExpr _out94;
            DCOMP._IOwnership _out95;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out96;
            DCOMP.COMP.GenExpr(_2062_expression, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out94, out _out95, out _out96);
            _2066_expr = _out94;
            _2067___v35 = _out95;
            _2068_recIdents = _out96;
            generated = RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMP.__default.escapeIdent(_2064_name), Std.Wrappers.Option<RAST._IType>.create_Some(_2065_typeString), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2066_expr));
            readIdents = _2068_recIdents;
          }
        }
      } else if (_source73.is_Assign) {
        DAST._IAssignLhs _2069___mcc_h4 = _source73.dtor_lhs;
        DAST._IExpression _2070___mcc_h5 = _source73.dtor_value;
        DAST._IExpression _2071_expression = _2070___mcc_h5;
        DAST._IAssignLhs _2072_lhs = _2069___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _2073_lhsGen;
          bool _2074_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2075_recIdents;
          Dafny.ISequence<Dafny.Rune> _out97;
          bool _out98;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out99;
          DCOMP.COMP.GenAssignLhs(_2072_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), selfIdent, @params, out _out97, out _out98, out _out99);
          _2073_lhsGen = _out97;
          _2074_needsIIFE = _out98;
          _2075_recIdents = _out99;
          RAST._IExpr _2076_exprGen;
          DCOMP._IOwnership _2077___v36;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2078_exprIdents;
          RAST._IExpr _out100;
          DCOMP._IOwnership _out101;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out102;
          DCOMP.COMP.GenExpr(_2071_expression, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out100, out _out101, out _out102);
          _2076_exprGen = _out100;
          _2077___v36 = _out101;
          _2078_exprIdents = _out102;
          if (_2074_needsIIFE) {
            generated = RAST.Expr.create_Block(RAST.Expr.create_StmtExpr(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_CONST(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2076_exprGen)), RAST.Expr.create_RawExpr(_2073_lhsGen)));
          } else {
            generated = RAST.Expr.create_AssignVar(_2073_lhsGen, _2076_exprGen);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2075_recIdents, _2078_exprIdents);
        }
      } else if (_source73.is_If) {
        DAST._IExpression _2079___mcc_h6 = _source73.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _2080___mcc_h7 = _source73.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _2081___mcc_h8 = _source73.dtor_els;
        Dafny.ISequence<DAST._IStatement> _2082_els = _2081___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _2083_thn = _2080___mcc_h7;
        DAST._IExpression _2084_cond = _2079___mcc_h6;
        {
          RAST._IExpr _2085_cond;
          DCOMP._IOwnership _2086___v37;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2087_recIdents;
          RAST._IExpr _out103;
          DCOMP._IOwnership _out104;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out105;
          DCOMP.COMP.GenExpr(_2084_cond, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out103, out _out104, out _out105);
          _2085_cond = _out103;
          _2086___v37 = _out104;
          _2087_recIdents = _out105;
          Dafny.ISequence<Dafny.Rune> _2088_condString;
          _2088_condString = (_2085_cond)._ToString(DCOMP.__default.IND);
          readIdents = _2087_recIdents;
          RAST._IExpr _2089_thn;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2090_thnIdents;
          RAST._IExpr _out106;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out107;
          DCOMP.COMP.GenStmts(_2083_thn, selfIdent, @params, isLast, earlyReturn, out _out106, out _out107);
          _2089_thn = _out106;
          _2090_thnIdents = _out107;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2090_thnIdents);
          RAST._IExpr _2091_els;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2092_elsIdents;
          RAST._IExpr _out108;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out109;
          DCOMP.COMP.GenStmts(_2082_els, selfIdent, @params, isLast, earlyReturn, out _out108, out _out109);
          _2091_els = _out108;
          _2092_elsIdents = _out109;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2092_elsIdents);
          generated = RAST.Expr.create_IfExpr(_2085_cond, _2089_thn, _2091_els);
        }
      } else if (_source73.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _2093___mcc_h9 = _source73.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _2094___mcc_h10 = _source73.dtor_body;
        Dafny.ISequence<DAST._IStatement> _2095_body = _2094___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _2096_lbl = _2093___mcc_h9;
        {
          RAST._IExpr _2097_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2098_bodyIdents;
          RAST._IExpr _out110;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out111;
          DCOMP.COMP.GenStmts(_2095_body, selfIdent, @params, isLast, earlyReturn, out _out110, out _out111);
          _2097_body = _out110;
          _2098_bodyIdents = _out111;
          readIdents = _2098_bodyIdents;
          generated = RAST.Expr.create_Labelled(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("label_"), _2096_lbl), RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_None(), RAST.Expr.create_StmtExpr(_2097_body, RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None()))));
        }
      } else if (_source73.is_While) {
        DAST._IExpression _2099___mcc_h11 = _source73.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _2100___mcc_h12 = _source73.dtor_body;
        Dafny.ISequence<DAST._IStatement> _2101_body = _2100___mcc_h12;
        DAST._IExpression _2102_cond = _2099___mcc_h11;
        {
          RAST._IExpr _2103_cond;
          DCOMP._IOwnership _2104___v38;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2105_recIdents;
          RAST._IExpr _out112;
          DCOMP._IOwnership _out113;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out114;
          DCOMP.COMP.GenExpr(_2102_cond, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out112, out _out113, out _out114);
          _2103_cond = _out112;
          _2104___v38 = _out113;
          _2105_recIdents = _out114;
          readIdents = _2105_recIdents;
          RAST._IExpr _2106_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2107_bodyIdents;
          RAST._IExpr _out115;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out116;
          DCOMP.COMP.GenStmts(_2101_body, selfIdent, @params, false, earlyReturn, out _out115, out _out116);
          _2106_body = _out115;
          _2107_bodyIdents = _out116;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2107_bodyIdents);
          generated = RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_Some(_2103_cond), _2106_body);
        }
      } else if (_source73.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _2108___mcc_h13 = _source73.dtor_boundName;
        DAST._IType _2109___mcc_h14 = _source73.dtor_boundType;
        DAST._IExpression _2110___mcc_h15 = _source73.dtor_over;
        Dafny.ISequence<DAST._IStatement> _2111___mcc_h16 = _source73.dtor_body;
        Dafny.ISequence<DAST._IStatement> _2112_body = _2111___mcc_h16;
        DAST._IExpression _2113_over = _2110___mcc_h15;
        DAST._IType _2114_boundType = _2109___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _2115_boundName = _2108___mcc_h13;
        {
          RAST._IExpr _2116_over;
          DCOMP._IOwnership _2117___v39;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2118_recIdents;
          RAST._IExpr _out117;
          DCOMP._IOwnership _out118;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out119;
          DCOMP.COMP.GenExpr(_2113_over, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out117, out _out118, out _out119);
          _2116_over = _out117;
          _2117___v39 = _out118;
          _2118_recIdents = _out119;
          RAST._IType _2119_boundTypeStr;
          RAST._IType _out120;
          _out120 = DCOMP.COMP.GenType(_2114_boundType, false, false);
          _2119_boundTypeStr = _out120;
          readIdents = _2118_recIdents;
          RAST._IExpr _2120_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2121_bodyIdents;
          RAST._IExpr _out121;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out122;
          DCOMP.COMP.GenStmts(_2112_body, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(@params, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_2115_boundName)), false, earlyReturn, out _out121, out _out122);
          _2120_body = _out121;
          _2121_bodyIdents = _out122;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2121_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2115_boundName));
          generated = RAST.Expr.create_For(DCOMP.__default.escapeIdent(_2115_boundName), _2116_over, _2120_body);
        }
      } else if (_source73.is_Call) {
        DAST._IExpression _2122___mcc_h17 = _source73.dtor_on;
        DAST._ICallName _2123___mcc_h18 = _source73.dtor_callName;
        Dafny.ISequence<DAST._IType> _2124___mcc_h19 = _source73.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _2125___mcc_h20 = _source73.dtor_args;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _2126___mcc_h21 = _source73.dtor_outs;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _2127_maybeOutVars = _2126___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _2128_args = _2125___mcc_h20;
        Dafny.ISequence<DAST._IType> _2129_typeArgs = _2124___mcc_h19;
        DAST._ICallName _2130_name = _2123___mcc_h18;
        DAST._IExpression _2131_on = _2122___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _2132_typeArgString;
          _2132_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_2129_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _2133_typeI;
            _2133_typeI = BigInteger.Zero;
            Dafny.ISequence<RAST._IType> _2134_typeArgsR;
            _2134_typeArgsR = Dafny.Sequence<RAST._IType>.FromElements();
            while ((_2133_typeI) < (new BigInteger((_2129_typeArgs).Count))) {
              RAST._IType _2135_tpe;
              RAST._IType _out123;
              _out123 = DCOMP.COMP.GenType((_2129_typeArgs).Select(_2133_typeI), false, false);
              _2135_tpe = _out123;
              _2134_typeArgsR = Dafny.Sequence<RAST._IType>.Concat(_2134_typeArgsR, Dafny.Sequence<RAST._IType>.FromElements(_2135_tpe));
              _2133_typeI = (_2133_typeI) + (BigInteger.One);
            }
            _2132_typeArgString = (RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"), _2134_typeArgsR))._ToString(DCOMP.__default.IND);
          }
          Dafny.ISequence<Dafny.Rune> _2136_argString;
          _2136_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _2137_i;
          _2137_i = BigInteger.Zero;
          while ((_2137_i) < (new BigInteger((_2128_args).Count))) {
            if ((_2137_i).Sign == 1) {
              _2136_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2136_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _2138_argExpr;
            DCOMP._IOwnership _2139_ownership;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2140_argIdents;
            RAST._IExpr _out124;
            DCOMP._IOwnership _out125;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out126;
            DCOMP.COMP.GenExpr((_2128_args).Select(_2137_i), selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out124, out _out125, out _out126);
            _2138_argExpr = _out124;
            _2139_ownership = _out125;
            _2140_argIdents = _out126;
            if (object.Equals(_2139_ownership, DCOMP.Ownership.create_OwnershipOwned())) {
              _2138_argExpr = RAST.__default.Borrow(_2138_argExpr);
            }
            Dafny.ISequence<Dafny.Rune> _2141_argExprString;
            _2141_argExprString = (_2138_argExpr)._ToString(DCOMP.__default.IND);
            _2136_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2136_argString, _2141_argExprString);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2140_argIdents);
            _2137_i = (_2137_i) + (BigInteger.One);
          }
          RAST._IExpr _2142_onExpr;
          DCOMP._IOwnership _2143___v40;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2144_enclosingIdents;
          RAST._IExpr _out127;
          DCOMP._IOwnership _out128;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out129;
          DCOMP.COMP.GenExpr(_2131_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipAny(), out _out127, out _out128, out _out129);
          _2142_onExpr = _out127;
          _2143___v40 = _out128;
          _2144_enclosingIdents = _out129;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2144_enclosingIdents);
          Dafny.ISequence<Dafny.Rune> _2145_enclosingString;
          _2145_enclosingString = (_2142_onExpr)._ToString(DCOMP.__default.IND);
          DAST._IExpression _source75 = _2131_on;
          if (_source75.is_Literal) {
            DAST._ILiteral _2146___mcc_h26 = _source75.dtor_Literal_a0;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source75.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _2147___mcc_h28 = _source75.dtor_Ident_a0;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source75.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2148___mcc_h30 = _source75.dtor_Companion_a0;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(_2145_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
            }
          } else if (_source75.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _2149___mcc_h32 = _source75.dtor_Tuple_a0;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source75.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2150___mcc_h34 = _source75.dtor_path;
            Dafny.ISequence<DAST._IType> _2151___mcc_h35 = _source75.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _2152___mcc_h36 = _source75.dtor_args;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source75.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _2153___mcc_h40 = _source75.dtor_dims;
            DAST._IType _2154___mcc_h41 = _source75.dtor_typ;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source75.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2155___mcc_h44 = _source75.dtor_path;
            Dafny.ISequence<DAST._IType> _2156___mcc_h45 = _source75.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _2157___mcc_h46 = _source75.dtor_variant;
            bool _2158___mcc_h47 = _source75.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _2159___mcc_h48 = _source75.dtor_contents;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source75.is_Convert) {
            DAST._IExpression _2160___mcc_h54 = _source75.dtor_value;
            DAST._IType _2161___mcc_h55 = _source75.dtor_from;
            DAST._IType _2162___mcc_h56 = _source75.dtor_typ;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source75.is_SeqConstruct) {
            DAST._IExpression _2163___mcc_h60 = _source75.dtor_length;
            DAST._IExpression _2164___mcc_h61 = _source75.dtor_elem;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source75.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _2165___mcc_h64 = _source75.dtor_elements;
            DAST._IType _2166___mcc_h65 = _source75.dtor_typ;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source75.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _2167___mcc_h68 = _source75.dtor_elements;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source75.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2168___mcc_h70 = _source75.dtor_mapElems;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source75.is_MapBuilder) {
            DAST._IType _2169___mcc_h72 = _source75.dtor_keyType;
            DAST._IType _2170___mcc_h73 = _source75.dtor_valueType;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source75.is_SetBuilder) {
            DAST._IType _2171___mcc_h76 = _source75.dtor_elemType;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source75.is_This) {
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source75.is_Ite) {
            DAST._IExpression _2172___mcc_h78 = _source75.dtor_cond;
            DAST._IExpression _2173___mcc_h79 = _source75.dtor_thn;
            DAST._IExpression _2174___mcc_h80 = _source75.dtor_els;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source75.is_UnOp) {
            DAST._IUnaryOp _2175___mcc_h84 = _source75.dtor_unOp;
            DAST._IExpression _2176___mcc_h85 = _source75.dtor_expr;
            DAST.Format._IUnOpFormat _2177___mcc_h86 = _source75.dtor_format1;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source75.is_BinOp) {
            DAST._IBinOp _2178___mcc_h90 = _source75.dtor_op;
            DAST._IExpression _2179___mcc_h91 = _source75.dtor_left;
            DAST._IExpression _2180___mcc_h92 = _source75.dtor_right;
            DAST.Format._IBinOpFormat _2181___mcc_h93 = _source75.dtor_format2;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source75.is_ArrayLen) {
            DAST._IExpression _2182___mcc_h98 = _source75.dtor_expr;
            BigInteger _2183___mcc_h99 = _source75.dtor_dim;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source75.is_MapKeys) {
            DAST._IExpression _2184___mcc_h102 = _source75.dtor_expr;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source75.is_MapValues) {
            DAST._IExpression _2185___mcc_h104 = _source75.dtor_expr;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source75.is_Select) {
            DAST._IExpression _2186___mcc_h106 = _source75.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _2187___mcc_h107 = _source75.dtor_field;
            bool _2188___mcc_h108 = _source75.dtor_isConstant;
            bool _2189___mcc_h109 = _source75.dtor_onDatatype;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source75.is_SelectFn) {
            DAST._IExpression _2190___mcc_h114 = _source75.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _2191___mcc_h115 = _source75.dtor_field;
            bool _2192___mcc_h116 = _source75.dtor_onDatatype;
            bool _2193___mcc_h117 = _source75.dtor_isStatic;
            BigInteger _2194___mcc_h118 = _source75.dtor_arity;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source75.is_Index) {
            DAST._IExpression _2195___mcc_h124 = _source75.dtor_expr;
            DAST._ICollKind _2196___mcc_h125 = _source75.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _2197___mcc_h126 = _source75.dtor_indices;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source75.is_IndexRange) {
            DAST._IExpression _2198___mcc_h130 = _source75.dtor_expr;
            bool _2199___mcc_h131 = _source75.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _2200___mcc_h132 = _source75.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _2201___mcc_h133 = _source75.dtor_high;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source75.is_TupleSelect) {
            DAST._IExpression _2202___mcc_h138 = _source75.dtor_expr;
            BigInteger _2203___mcc_h139 = _source75.dtor_index;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source75.is_Call) {
            DAST._IExpression _2204___mcc_h142 = _source75.dtor_on;
            DAST._ICallName _2205___mcc_h143 = _source75.dtor_callName;
            Dafny.ISequence<DAST._IType> _2206___mcc_h144 = _source75.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _2207___mcc_h145 = _source75.dtor_args;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source75.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _2208___mcc_h150 = _source75.dtor_params;
            DAST._IType _2209___mcc_h151 = _source75.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _2210___mcc_h152 = _source75.dtor_body;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source75.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _2211___mcc_h156 = _source75.dtor_values;
            DAST._IType _2212___mcc_h157 = _source75.dtor_retType;
            DAST._IExpression _2213___mcc_h158 = _source75.dtor_expr;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source75.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _2214___mcc_h162 = _source75.dtor_name;
            DAST._IType _2215___mcc_h163 = _source75.dtor_typ;
            DAST._IExpression _2216___mcc_h164 = _source75.dtor_value;
            DAST._IExpression _2217___mcc_h165 = _source75.dtor_iifeBody;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source75.is_Apply) {
            DAST._IExpression _2218___mcc_h170 = _source75.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _2219___mcc_h171 = _source75.dtor_args;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source75.is_TypeTest) {
            DAST._IExpression _2220___mcc_h174 = _source75.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2221___mcc_h175 = _source75.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _2222___mcc_h176 = _source75.dtor_variant;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source75.is_InitializationValue) {
            DAST._IType _2223___mcc_h180 = _source75.dtor_typ;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source75.is_BoolBoundedPool) {
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source75.is_SetBoundedPool) {
            DAST._IExpression _2224___mcc_h182 = _source75.dtor_of;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source75.is_SeqBoundedPool) {
            DAST._IExpression _2225___mcc_h184 = _source75.dtor_of;
            bool _2226___mcc_h185 = _source75.dtor_includeDuplicates;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else {
            DAST._IExpression _2227___mcc_h188 = _source75.dtor_lo;
            DAST._IExpression _2228___mcc_h189 = _source75.dtor_hi;
            {
              _2145_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          }
          Dafny.ISequence<Dafny.Rune> _2229_receiver;
          _2229_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source76 = _2127_maybeOutVars;
          if (_source76.is_None) {
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2230___mcc_h192 = _source76.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2231_outVars = _2230___mcc_h192;
            {
              if ((new BigInteger((_2231_outVars).Count)) > (BigInteger.One)) {
                _2229_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
              }
              BigInteger _2232_outI;
              _2232_outI = BigInteger.Zero;
              while ((_2232_outI) < (new BigInteger((_2231_outVars).Count))) {
                if ((_2232_outI).Sign == 1) {
                  _2229_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_2229_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                }
                Dafny.ISequence<Dafny.Rune> _2233_outVar;
                _2233_outVar = (_2231_outVars).Select(_2232_outI);
                _2229_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_2229_receiver, (_2233_outVar));
                _2232_outI = (_2232_outI) + (BigInteger.One);
              }
              if ((new BigInteger((_2231_outVars).Count)) > (BigInteger.One)) {
                _2229_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_2229_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
          }
          Dafny.ISequence<Dafny.Rune> _2234_renderedName;
          _2234_renderedName = ((System.Func<DAST._ICallName, Dafny.ISequence<Dafny.Rune>>)((_source77) => {
            if (_source77.is_Name) {
              Dafny.ISequence<Dafny.Rune> _2235___mcc_h193 = _source77.dtor_name;
              Dafny.ISequence<Dafny.Rune> _2236_name = _2235___mcc_h193;
              return DCOMP.__default.escapeIdent(_2236_name);
            } else if (_source77.is_MapBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else if (_source77.is_MapBuilderBuild) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            } else if (_source77.is_SetBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            }
          }))(_2130_name);
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((!(_2229_receiver).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_2229_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), _2145_enclosingString), _2234_renderedName), _2132_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2136_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");")));
        }
      } else if (_source73.is_Return) {
        DAST._IExpression _2237___mcc_h22 = _source73.dtor_expr;
        DAST._IExpression _2238_expr = _2237___mcc_h22;
        {
          RAST._IExpr _2239_expr;
          DCOMP._IOwnership _2240___v43;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2241_recIdents;
          RAST._IExpr _out130;
          DCOMP._IOwnership _out131;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out132;
          DCOMP.COMP.GenExpr(_2238_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out130, out _out131, out _out132);
          _2239_expr = _out130;
          _2240___v43 = _out131;
          _2241_recIdents = _out132;
          readIdents = _2241_recIdents;
          if (isLast) {
            generated = _2239_expr;
          } else {
            generated = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some(_2239_expr));
          }
        }
      } else if (_source73.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source73.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2242___mcc_h23 = _source73.dtor_toLabel;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2243_toLabel = _2242___mcc_h23;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source78 = _2243_toLabel;
          if (_source78.is_None) {
            {
              generated = RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None());
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _2244___mcc_h194 = _source78.dtor_value;
            Dafny.ISequence<Dafny.Rune> _2245_lbl = _2244___mcc_h194;
            {
              generated = RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("label_"), _2245_lbl)));
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source73.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _2246___mcc_h24 = _source73.dtor_body;
        Dafny.ISequence<DAST._IStatement> _2247_body = _2246___mcc_h24;
        {
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
          if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = (generated).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self.clone()")))));
          }
          BigInteger _2248_paramI;
          _2248_paramI = BigInteger.Zero;
          while ((_2248_paramI) < (new BigInteger((@params).Count))) {
            Dafny.ISequence<Dafny.Rune> _2249_param;
            _2249_param = (@params).Select(_2248_paramI);
            generated = (generated).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMP.__default.escapeIdent(_2249_param), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.__default.Clone(RAST.Expr.create_Identifier(DCOMP.__default.escapeIdent(_2249_param))))));
            _2248_paramI = (_2248_paramI) + (BigInteger.One);
          }
          RAST._IExpr _2250_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2251_bodyIdents;
          RAST._IExpr _out133;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out134;
          DCOMP.COMP.GenStmts(_2247_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), false, earlyReturn, out _out133, out _out134);
          _2250_body = _out133;
          _2251_bodyIdents = _out134;
          readIdents = _2251_bodyIdents;
          generated = (generated).Then(RAST.Expr.create_Labelled(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("TAIL_CALL_START"), RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_None(), _2250_body)));
        }
      } else if (_source73.is_JumpTailCallStart) {
        {
          generated = RAST.Expr.create_Continue(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("TAIL_CALL_START")));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source73.is_Halt) {
        {
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else {
        DAST._IExpression _2252___mcc_h25 = _source73.dtor_Print_a0;
        DAST._IExpression _2253_e = _2252___mcc_h25;
        {
          RAST._IExpr _2254_printedExpr;
          DCOMP._IOwnership _2255_recOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2256_recIdents;
          RAST._IExpr _out135;
          DCOMP._IOwnership _out136;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out137;
          DCOMP.COMP.GenExpr(_2253_e, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out135, out _out136, out _out137);
          _2254_printedExpr = _out135;
          _2255_recOwnership = _out136;
          _2256_recIdents = _out137;
          if (object.Equals(_2255_recOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
            _2254_printedExpr = RAST.__default.Borrow(_2254_printedExpr);
          }
          Dafny.ISequence<Dafny.Rune> _2257_printedExprString;
          _2257_printedExprString = (_2254_printedExpr)._ToString(DCOMP.__default.IND);
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!(\"{}\", ::dafny_runtime::DafnyPrintWrapper("), _2257_printedExprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("));")));
          readIdents = _2256_recIdents;
        }
      }
    }
    public static Std.Wrappers._IOption<RAST._IType> NewtypeToRustType(DAST._IType @base, DAST._INewtypeRange range)
    {
      DAST._INewtypeRange _source79 = range;
      if (_source79.is_U8) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U8());
      } else if (_source79.is_I8) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I8());
      } else if (_source79.is_U16) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U16());
      } else if (_source79.is_I16) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I16());
      } else if (_source79.is_U32) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U32());
      } else if (_source79.is_I32) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I32());
      } else if (_source79.is_U64) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U64());
      } else if (_source79.is_I64) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I64());
      } else if (_source79.is_U128) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U128());
      } else if (_source79.is_I128) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I128());
      } else if (_source79.is_BigInt) {
        return Std.Wrappers.Option<RAST._IType>.create_None();
      } else {
        return Std.Wrappers.Option<RAST._IType>.create_None();
      }
    }
    public static void GenExpr(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source80 = e;
      if (_source80.is_Literal) {
        DAST._ILiteral _2258___mcc_h0 = _source80.dtor_Literal_a0;
        DAST._ILiteral _source81 = _2258___mcc_h0;
        if (_source81.is_BoolLiteral) {
          bool _2259___mcc_h1 = _source81.dtor_BoolLiteral_a0;
          if ((_2259___mcc_h1) == (false)) {
            {
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            {
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          }
        } else if (_source81.is_IntLiteral) {
          Dafny.ISequence<Dafny.Rune> _2260___mcc_h2 = _source81.dtor_IntLiteral_a0;
          DAST._IType _2261___mcc_h3 = _source81.dtor_IntLiteral_a1;
          DAST._IType _2262_t = _2261___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _2263_i = _2260___mcc_h2;
          {
            DAST._IType _source82 = _2262_t;
            if (_source82.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2264___mcc_h258 = _source82.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _2265___mcc_h259 = _source82.dtor_typeArgs;
              DAST._IResolvedType _2266___mcc_h260 = _source82.dtor_resolved;
              DAST._IType _2267_o = _2262_t;
              {
                RAST._IType _2268_genType;
                RAST._IType _out138;
                _out138 = DCOMP.COMP.GenType(_2267_o, false, false);
                _2268_genType = _out138;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2263_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2268_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source82.is_Nullable) {
              DAST._IType _2269___mcc_h264 = _source82.dtor_Nullable_a0;
              DAST._IType _2270_o = _2262_t;
              {
                RAST._IType _2271_genType;
                RAST._IType _out139;
                _out139 = DCOMP.COMP.GenType(_2270_o, false, false);
                _2271_genType = _out139;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2263_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2271_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source82.is_Tuple) {
              Dafny.ISequence<DAST._IType> _2272___mcc_h266 = _source82.dtor_Tuple_a0;
              DAST._IType _2273_o = _2262_t;
              {
                RAST._IType _2274_genType;
                RAST._IType _out140;
                _out140 = DCOMP.COMP.GenType(_2273_o, false, false);
                _2274_genType = _out140;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2263_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2274_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source82.is_Array) {
              DAST._IType _2275___mcc_h268 = _source82.dtor_element;
              BigInteger _2276___mcc_h269 = _source82.dtor_dims;
              DAST._IType _2277_o = _2262_t;
              {
                RAST._IType _2278_genType;
                RAST._IType _out141;
                _out141 = DCOMP.COMP.GenType(_2277_o, false, false);
                _2278_genType = _out141;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2263_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2278_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source82.is_Seq) {
              DAST._IType _2279___mcc_h272 = _source82.dtor_element;
              DAST._IType _2280_o = _2262_t;
              {
                RAST._IType _2281_genType;
                RAST._IType _out142;
                _out142 = DCOMP.COMP.GenType(_2280_o, false, false);
                _2281_genType = _out142;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2263_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2281_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source82.is_Set) {
              DAST._IType _2282___mcc_h274 = _source82.dtor_element;
              DAST._IType _2283_o = _2262_t;
              {
                RAST._IType _2284_genType;
                RAST._IType _out143;
                _out143 = DCOMP.COMP.GenType(_2283_o, false, false);
                _2284_genType = _out143;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2263_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2284_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source82.is_Multiset) {
              DAST._IType _2285___mcc_h276 = _source82.dtor_element;
              DAST._IType _2286_o = _2262_t;
              {
                RAST._IType _2287_genType;
                RAST._IType _out144;
                _out144 = DCOMP.COMP.GenType(_2286_o, false, false);
                _2287_genType = _out144;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2263_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2287_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source82.is_Map) {
              DAST._IType _2288___mcc_h278 = _source82.dtor_key;
              DAST._IType _2289___mcc_h279 = _source82.dtor_value;
              DAST._IType _2290_o = _2262_t;
              {
                RAST._IType _2291_genType;
                RAST._IType _out145;
                _out145 = DCOMP.COMP.GenType(_2290_o, false, false);
                _2291_genType = _out145;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2263_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2291_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source82.is_SetBuilder) {
              DAST._IType _2292___mcc_h282 = _source82.dtor_element;
              DAST._IType _2293_o = _2262_t;
              {
                RAST._IType _2294_genType;
                RAST._IType _out146;
                _out146 = DCOMP.COMP.GenType(_2293_o, false, false);
                _2294_genType = _out146;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2263_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2294_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source82.is_MapBuilder) {
              DAST._IType _2295___mcc_h284 = _source82.dtor_key;
              DAST._IType _2296___mcc_h285 = _source82.dtor_value;
              DAST._IType _2297_o = _2262_t;
              {
                RAST._IType _2298_genType;
                RAST._IType _out147;
                _out147 = DCOMP.COMP.GenType(_2297_o, false, false);
                _2298_genType = _out147;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2263_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2298_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source82.is_Arrow) {
              Dafny.ISequence<DAST._IType> _2299___mcc_h288 = _source82.dtor_args;
              DAST._IType _2300___mcc_h289 = _source82.dtor_result;
              DAST._IType _2301_o = _2262_t;
              {
                RAST._IType _2302_genType;
                RAST._IType _out148;
                _out148 = DCOMP.COMP.GenType(_2301_o, false, false);
                _2302_genType = _out148;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2263_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2302_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source82.is_Primitive) {
              DAST._IPrimitive _2303___mcc_h292 = _source82.dtor_Primitive_a0;
              DAST._IPrimitive _source83 = _2303___mcc_h292;
              if (_source83.is_Int) {
                {
                  r = RAST.Expr.create_LiteralInt(_2263_i);
                }
              } else if (_source83.is_Real) {
                DAST._IType _2304_o = _2262_t;
                {
                  RAST._IType _2305_genType;
                  RAST._IType _out149;
                  _out149 = DCOMP.COMP.GenType(_2304_o, false, false);
                  _2305_genType = _out149;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2263_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2305_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                }
              } else if (_source83.is_String) {
                DAST._IType _2306_o = _2262_t;
                {
                  RAST._IType _2307_genType;
                  RAST._IType _out150;
                  _out150 = DCOMP.COMP.GenType(_2306_o, false, false);
                  _2307_genType = _out150;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2263_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2307_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                }
              } else if (_source83.is_Bool) {
                DAST._IType _2308_o = _2262_t;
                {
                  RAST._IType _2309_genType;
                  RAST._IType _out151;
                  _out151 = DCOMP.COMP.GenType(_2308_o, false, false);
                  _2309_genType = _out151;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2263_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2309_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                }
              } else {
                DAST._IType _2310_o = _2262_t;
                {
                  RAST._IType _2311_genType;
                  RAST._IType _out152;
                  _out152 = DCOMP.COMP.GenType(_2310_o, false, false);
                  _2311_genType = _out152;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2263_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2311_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                }
              }
            } else if (_source82.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _2312___mcc_h294 = _source82.dtor_Passthrough_a0;
              DAST._IType _2313_o = _2262_t;
              {
                RAST._IType _2314_genType;
                RAST._IType _out153;
                _out153 = DCOMP.COMP.GenType(_2313_o, false, false);
                _2314_genType = _out153;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2263_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2314_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2315___mcc_h296 = _source82.dtor_TypeArg_a0;
              DAST._IType _2316_o = _2262_t;
              {
                RAST._IType _2317_genType;
                RAST._IType _out154;
                _out154 = DCOMP.COMP.GenType(_2316_o, false, false);
                _2317_genType = _out154;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2263_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2317_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            }
            resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source81.is_DecLiteral) {
          Dafny.ISequence<Dafny.Rune> _2318___mcc_h4 = _source81.dtor_DecLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _2319___mcc_h5 = _source81.dtor_DecLiteral_a1;
          DAST._IType _2320___mcc_h6 = _source81.dtor_DecLiteral_a2;
          DAST._IType _2321_t = _2320___mcc_h6;
          Dafny.ISequence<Dafny.Rune> _2322_d = _2319___mcc_h5;
          Dafny.ISequence<Dafny.Rune> _2323_n = _2318___mcc_h4;
          {
            DAST._IType _source84 = _2321_t;
            if (_source84.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2324___mcc_h298 = _source84.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _2325___mcc_h299 = _source84.dtor_typeArgs;
              DAST._IResolvedType _2326___mcc_h300 = _source84.dtor_resolved;
              DAST._IType _2327_o = _2321_t;
              {
                RAST._IType _2328_genType;
                RAST._IType _out155;
                _out155 = DCOMP.COMP.GenType(_2327_o, false, false);
                _2328_genType = _out155;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2323_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2322_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2328_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source84.is_Nullable) {
              DAST._IType _2329___mcc_h304 = _source84.dtor_Nullable_a0;
              DAST._IType _2330_o = _2321_t;
              {
                RAST._IType _2331_genType;
                RAST._IType _out156;
                _out156 = DCOMP.COMP.GenType(_2330_o, false, false);
                _2331_genType = _out156;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2323_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2322_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2331_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source84.is_Tuple) {
              Dafny.ISequence<DAST._IType> _2332___mcc_h306 = _source84.dtor_Tuple_a0;
              DAST._IType _2333_o = _2321_t;
              {
                RAST._IType _2334_genType;
                RAST._IType _out157;
                _out157 = DCOMP.COMP.GenType(_2333_o, false, false);
                _2334_genType = _out157;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2323_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2322_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2334_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source84.is_Array) {
              DAST._IType _2335___mcc_h308 = _source84.dtor_element;
              BigInteger _2336___mcc_h309 = _source84.dtor_dims;
              DAST._IType _2337_o = _2321_t;
              {
                RAST._IType _2338_genType;
                RAST._IType _out158;
                _out158 = DCOMP.COMP.GenType(_2337_o, false, false);
                _2338_genType = _out158;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2323_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2322_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2338_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source84.is_Seq) {
              DAST._IType _2339___mcc_h312 = _source84.dtor_element;
              DAST._IType _2340_o = _2321_t;
              {
                RAST._IType _2341_genType;
                RAST._IType _out159;
                _out159 = DCOMP.COMP.GenType(_2340_o, false, false);
                _2341_genType = _out159;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2323_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2322_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2341_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source84.is_Set) {
              DAST._IType _2342___mcc_h314 = _source84.dtor_element;
              DAST._IType _2343_o = _2321_t;
              {
                RAST._IType _2344_genType;
                RAST._IType _out160;
                _out160 = DCOMP.COMP.GenType(_2343_o, false, false);
                _2344_genType = _out160;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2323_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2322_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2344_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source84.is_Multiset) {
              DAST._IType _2345___mcc_h316 = _source84.dtor_element;
              DAST._IType _2346_o = _2321_t;
              {
                RAST._IType _2347_genType;
                RAST._IType _out161;
                _out161 = DCOMP.COMP.GenType(_2346_o, false, false);
                _2347_genType = _out161;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2323_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2322_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2347_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source84.is_Map) {
              DAST._IType _2348___mcc_h318 = _source84.dtor_key;
              DAST._IType _2349___mcc_h319 = _source84.dtor_value;
              DAST._IType _2350_o = _2321_t;
              {
                RAST._IType _2351_genType;
                RAST._IType _out162;
                _out162 = DCOMP.COMP.GenType(_2350_o, false, false);
                _2351_genType = _out162;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2323_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2322_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2351_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source84.is_SetBuilder) {
              DAST._IType _2352___mcc_h322 = _source84.dtor_element;
              DAST._IType _2353_o = _2321_t;
              {
                RAST._IType _2354_genType;
                RAST._IType _out163;
                _out163 = DCOMP.COMP.GenType(_2353_o, false, false);
                _2354_genType = _out163;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2323_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2322_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2354_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source84.is_MapBuilder) {
              DAST._IType _2355___mcc_h324 = _source84.dtor_key;
              DAST._IType _2356___mcc_h325 = _source84.dtor_value;
              DAST._IType _2357_o = _2321_t;
              {
                RAST._IType _2358_genType;
                RAST._IType _out164;
                _out164 = DCOMP.COMP.GenType(_2357_o, false, false);
                _2358_genType = _out164;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2323_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2322_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2358_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source84.is_Arrow) {
              Dafny.ISequence<DAST._IType> _2359___mcc_h328 = _source84.dtor_args;
              DAST._IType _2360___mcc_h329 = _source84.dtor_result;
              DAST._IType _2361_o = _2321_t;
              {
                RAST._IType _2362_genType;
                RAST._IType _out165;
                _out165 = DCOMP.COMP.GenType(_2361_o, false, false);
                _2362_genType = _out165;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2323_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2322_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2362_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source84.is_Primitive) {
              DAST._IPrimitive _2363___mcc_h332 = _source84.dtor_Primitive_a0;
              DAST._IPrimitive _source85 = _2363___mcc_h332;
              if (_source85.is_Int) {
                DAST._IType _2364_o = _2321_t;
                {
                  RAST._IType _2365_genType;
                  RAST._IType _out166;
                  _out166 = DCOMP.COMP.GenType(_2364_o, false, false);
                  _2365_genType = _out166;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2323_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2322_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2365_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                }
              } else if (_source85.is_Real) {
                {
                  r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _2323_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _2322_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"))));
                }
              } else if (_source85.is_String) {
                DAST._IType _2366_o = _2321_t;
                {
                  RAST._IType _2367_genType;
                  RAST._IType _out167;
                  _out167 = DCOMP.COMP.GenType(_2366_o, false, false);
                  _2367_genType = _out167;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2323_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2322_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2367_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                }
              } else if (_source85.is_Bool) {
                DAST._IType _2368_o = _2321_t;
                {
                  RAST._IType _2369_genType;
                  RAST._IType _out168;
                  _out168 = DCOMP.COMP.GenType(_2368_o, false, false);
                  _2369_genType = _out168;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2323_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2322_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2369_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                }
              } else {
                DAST._IType _2370_o = _2321_t;
                {
                  RAST._IType _2371_genType;
                  RAST._IType _out169;
                  _out169 = DCOMP.COMP.GenType(_2370_o, false, false);
                  _2371_genType = _out169;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2323_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2322_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2371_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                }
              }
            } else if (_source84.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _2372___mcc_h334 = _source84.dtor_Passthrough_a0;
              DAST._IType _2373_o = _2321_t;
              {
                RAST._IType _2374_genType;
                RAST._IType _out170;
                _out170 = DCOMP.COMP.GenType(_2373_o, false, false);
                _2374_genType = _out170;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2323_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2322_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2374_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2375___mcc_h336 = _source84.dtor_TypeArg_a0;
              DAST._IType _2376_o = _2321_t;
              {
                RAST._IType _2377_genType;
                RAST._IType _out171;
                _out171 = DCOMP.COMP.GenType(_2376_o, false, false);
                _2377_genType = _out171;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2323_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2322_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2377_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            }
            resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source81.is_StringLiteral) {
          Dafny.ISequence<Dafny.Rune> _2378___mcc_h7 = _source81.dtor_StringLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _2379_l = _2378___mcc_h7;
          {
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""), _2379_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\".chars().collect::<Vec<char>>()")));
            resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source81.is_CharLiteral) {
          Dafny.Rune _2380___mcc_h8 = _source81.dtor_CharLiteral_a0;
          Dafny.Rune _2381_c = _2380___mcc_h8;
          {
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::primitive::char::from_u32("), Std.Strings.__default.OfNat(new BigInteger((_2381_c).Value))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()")));
            resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IType _2382___mcc_h9 = _source81.dtor_Null_a0;
          DAST._IType _2383_tpe = _2382___mcc_h9;
          {
            RAST._IType _2384_tpeGen;
            RAST._IType _out172;
            _out172 = DCOMP.COMP.GenType(_2383_tpe, false, false);
            _2384_tpeGen = _out172;
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(None as "), (_2384_tpeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
            resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source80.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _2385___mcc_h10 = _source80.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _2386_name = _2385___mcc_h10;
        {
          r = RAST.Expr.create_Identifier(DCOMP.__default.escapeIdent(_2386_name));
          bool _2387_currentlyBorrowed;
          _2387_currentlyBorrowed = (@params).Contains(_2386_name);
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAny())) {
          } else if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowedMut())) {
            r = RAST.__default.BorrowMut(r);
          } else if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
            r = RAST.__default.Clone(r);
          } else if (_2387_currentlyBorrowed) {
            if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowed())) {
              resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
            }
          } else {
            if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowed())) {
              r = RAST.__default.Borrow(r);
              resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2386_name);
        }
      } else if (_source80.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2388___mcc_h11 = _source80.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2389_path = _2388___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _2390_p;
          Dafny.ISequence<Dafny.Rune> _out173;
          _out173 = DCOMP.COMP.GenPath(_2389_path);
          _2390_p = _out173;
          r = RAST.Expr.create_RawExpr(_2390_p);
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source80.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _2391___mcc_h12 = _source80.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IExpression> _2392_values = _2391___mcc_h12;
        {
          Dafny.ISequence<Dafny.Rune> _2393_s;
          _2393_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2394_i;
          _2394_i = BigInteger.Zero;
          while ((_2394_i) < (new BigInteger((_2392_values).Count))) {
            if ((_2394_i).Sign == 1) {
              _2393_s = Dafny.Sequence<Dafny.Rune>.Concat(_2393_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            RAST._IExpr _2395_recursiveGen;
            DCOMP._IOwnership _2396___v45;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2397_recIdents;
            RAST._IExpr _out174;
            DCOMP._IOwnership _out175;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out176;
            DCOMP.COMP.GenExpr((_2392_values).Select(_2394_i), selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out174, out _out175, out _out176);
            _2395_recursiveGen = _out174;
            _2396___v45 = _out175;
            _2397_recIdents = _out176;
            _2393_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2393_s, (_2395_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2397_recIdents);
            _2394_i = (_2394_i) + (BigInteger.One);
          }
          _2393_s = Dafny.Sequence<Dafny.Rune>.Concat(_2393_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          r = RAST.Expr.create_RawExpr(_2393_s);
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
        }
      } else if (_source80.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2398___mcc_h13 = _source80.dtor_path;
        Dafny.ISequence<DAST._IType> _2399___mcc_h14 = _source80.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _2400___mcc_h15 = _source80.dtor_args;
        Dafny.ISequence<DAST._IExpression> _2401_args = _2400___mcc_h15;
        Dafny.ISequence<DAST._IType> _2402_typeArgs = _2399___mcc_h14;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2403_path = _2398___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _2404_path;
          Dafny.ISequence<Dafny.Rune> _out177;
          _out177 = DCOMP.COMP.GenPath(_2403_path);
          _2404_path = _out177;
          Dafny.ISequence<Dafny.Rune> _2405_s;
          _2405_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _2404_path);
          if ((new BigInteger((_2402_typeArgs).Count)).Sign == 1) {
            BigInteger _2406_i;
            _2406_i = BigInteger.Zero;
            Dafny.ISequence<RAST._IType> _2407_typeExprs;
            _2407_typeExprs = Dafny.Sequence<RAST._IType>.FromElements();
            while ((_2406_i) < (new BigInteger((_2402_typeArgs).Count))) {
              RAST._IType _2408_typeExpr;
              RAST._IType _out178;
              _out178 = DCOMP.COMP.GenType((_2402_typeArgs).Select(_2406_i), false, false);
              _2408_typeExpr = _out178;
              _2407_typeExprs = Dafny.Sequence<RAST._IType>.Concat(_2407_typeExprs, Dafny.Sequence<RAST._IType>.FromElements(_2408_typeExpr));
              _2406_i = (_2406_i) + (BigInteger.One);
            }
            _2405_s = Dafny.Sequence<Dafny.Rune>.Concat(_2405_s, (RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"), _2407_typeExprs))._ToString(DCOMP.__default.IND));
          }
          _2405_s = Dafny.Sequence<Dafny.Rune>.Concat(_2405_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new("));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2409_i;
          _2409_i = BigInteger.Zero;
          while ((_2409_i) < (new BigInteger((_2401_args).Count))) {
            if ((_2409_i).Sign == 1) {
              _2405_s = Dafny.Sequence<Dafny.Rune>.Concat(_2405_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _2410_recursiveGen;
            DCOMP._IOwnership _2411___v46;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2412_recIdents;
            RAST._IExpr _out179;
            DCOMP._IOwnership _out180;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out181;
            DCOMP.COMP.GenExpr((_2401_args).Select(_2409_i), selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out179, out _out180, out _out181);
            _2410_recursiveGen = _out179;
            _2411___v46 = _out180;
            _2412_recIdents = _out181;
            _2405_s = Dafny.Sequence<Dafny.Rune>.Concat(_2405_s, (_2410_recursiveGen)._ToString(DCOMP.__default.IND));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2412_recIdents);
            _2409_i = (_2409_i) + (BigInteger.One);
          }
          _2405_s = Dafny.Sequence<Dafny.Rune>.Concat(_2405_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          r = RAST.Expr.create_RawExpr(_2405_s);
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
        }
      } else if (_source80.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _2413___mcc_h16 = _source80.dtor_dims;
        DAST._IType _2414___mcc_h17 = _source80.dtor_typ;
        DAST._IType _2415_typ = _2414___mcc_h17;
        Dafny.ISequence<DAST._IExpression> _2416_dims = _2413___mcc_h16;
        {
          BigInteger _2417_i;
          _2417_i = (new BigInteger((_2416_dims).Count)) - (BigInteger.One);
          RAST._IType _2418_genTyp;
          RAST._IType _out182;
          _out182 = DCOMP.COMP.GenType(_2415_typ, false, false);
          _2418_genTyp = _out182;
          Dafny.ISequence<Dafny.Rune> _2419_s;
          _2419_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_2418_genTyp)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::std::default::Default>::default()"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          while ((_2417_i).Sign != -1) {
            RAST._IExpr _2420_recursiveGen;
            DCOMP._IOwnership _2421___v47;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2422_recIdents;
            RAST._IExpr _out183;
            DCOMP._IOwnership _out184;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out185;
            DCOMP.COMP.GenExpr((_2416_dims).Select(_2417_i), selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out183, out _out184, out _out185);
            _2420_recursiveGen = _out183;
            _2421___v47 = _out184;
            _2422_recIdents = _out185;
            _2419_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::std::cell::RefCell::new(vec!["), _2419_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("; <usize as ::dafny_runtime::NumCast>::from(")), (_2420_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]))"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2422_recIdents);
            _2417_i = (_2417_i) - (BigInteger.One);
          }
          r = RAST.Expr.create_RawExpr(_2419_s);
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
        }
      } else if (_source80.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2423___mcc_h18 = _source80.dtor_path;
        Dafny.ISequence<DAST._IType> _2424___mcc_h19 = _source80.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _2425___mcc_h20 = _source80.dtor_variant;
        bool _2426___mcc_h21 = _source80.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _2427___mcc_h22 = _source80.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _2428_values = _2427___mcc_h22;
        bool _2429_isCo = _2426___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _2430_variant = _2425___mcc_h20;
        Dafny.ISequence<DAST._IType> _2431_typeArgs = _2424___mcc_h19;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2432_path = _2423___mcc_h18;
        {
          Dafny.ISequence<Dafny.Rune> _2433_path;
          Dafny.ISequence<Dafny.Rune> _out186;
          _out186 = DCOMP.COMP.GenPath(_2432_path);
          _2433_path = _out186;
          Dafny.ISequence<Dafny.Rune> _2434_s;
          _2434_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _2433_path), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          if ((new BigInteger((_2431_typeArgs).Count)).Sign == 1) {
            _2434_s = Dafny.Sequence<Dafny.Rune>.Concat(_2434_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
            BigInteger _2435_i;
            _2435_i = BigInteger.Zero;
            while ((_2435_i) < (new BigInteger((_2431_typeArgs).Count))) {
              if ((_2435_i).Sign == 1) {
                _2434_s = Dafny.Sequence<Dafny.Rune>.Concat(_2434_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              RAST._IType _2436_typeExpr;
              RAST._IType _out187;
              _out187 = DCOMP.COMP.GenType((_2431_typeArgs).Select(_2435_i), false, false);
              _2436_typeExpr = _out187;
              _2434_s = Dafny.Sequence<Dafny.Rune>.Concat(_2434_s, (_2436_typeExpr)._ToString(DCOMP.__default.IND));
              _2435_i = (_2435_i) + (BigInteger.One);
            }
            _2434_s = Dafny.Sequence<Dafny.Rune>.Concat(_2434_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::"));
          }
          _2434_s = Dafny.Sequence<Dafny.Rune>.Concat(_2434_s, DCOMP.__default.escapeIdent(_2430_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2437_i;
          _2437_i = BigInteger.Zero;
          _2434_s = Dafny.Sequence<Dafny.Rune>.Concat(_2434_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"));
          while ((_2437_i) < (new BigInteger((_2428_values).Count))) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs47 = (_2428_values).Select(_2437_i);
            Dafny.ISequence<Dafny.Rune> _2438_name = _let_tmp_rhs47.dtor__0;
            DAST._IExpression _2439_value = _let_tmp_rhs47.dtor__1;
            if ((_2437_i).Sign == 1) {
              _2434_s = Dafny.Sequence<Dafny.Rune>.Concat(_2434_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            if (_2429_isCo) {
              RAST._IExpr _2440_recursiveGen;
              DCOMP._IOwnership _2441___v48;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2442_recIdents;
              RAST._IExpr _out188;
              DCOMP._IOwnership _out189;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out190;
              DCOMP.COMP.GenExpr(_2439_value, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), DCOMP.Ownership.create_OwnershipOwned(), out _out188, out _out189, out _out190);
              _2440_recursiveGen = _out188;
              _2441___v48 = _out189;
              _2442_recIdents = _out190;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2442_recIdents);
              Dafny.ISequence<Dafny.Rune> _2443_allReadCloned;
              _2443_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_2442_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _2444_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_2 in (_2442_recIdents).Elements) {
                  _2444_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_2;
                  if ((_2442_recIdents).Contains(_2444_next)) {
                    goto after__ASSIGN_SUCH_THAT_2;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 2294)");
              after__ASSIGN_SUCH_THAT_2: ;
                _2443_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2443_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_2444_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_2444_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _2442_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_2442_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2444_next));
              }
              _2434_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2434_s, DCOMP.__default.escapeIdent(_2438_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n")), _2443_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), (_2440_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
            } else {
              RAST._IExpr _2445_recursiveGen;
              DCOMP._IOwnership _2446___v49;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2447_recIdents;
              RAST._IExpr _out191;
              DCOMP._IOwnership _out192;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out193;
              DCOMP.COMP.GenExpr(_2439_value, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out191, out _out192, out _out193);
              _2445_recursiveGen = _out191;
              _2446___v49 = _out192;
              _2447_recIdents = _out193;
              _2434_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2434_s, DCOMP.__default.escapeIdent(_2438_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_2445_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2447_recIdents);
            }
            _2437_i = (_2437_i) + (BigInteger.One);
          }
          _2434_s = Dafny.Sequence<Dafny.Rune>.Concat(_2434_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" })"));
          r = RAST.Expr.create_RawExpr(_2434_s);
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
        }
      } else if (_source80.is_Convert) {
        DAST._IExpression _2448___mcc_h23 = _source80.dtor_value;
        DAST._IType _2449___mcc_h24 = _source80.dtor_from;
        DAST._IType _2450___mcc_h25 = _source80.dtor_typ;
        DAST._IType _2451_toTpe = _2450___mcc_h25;
        DAST._IType _2452_fromTpe = _2449___mcc_h24;
        DAST._IExpression _2453_expr = _2448___mcc_h23;
        {
          if (object.Equals(_2452_fromTpe, _2451_toTpe)) {
            RAST._IExpr _2454_recursiveGen;
            DCOMP._IOwnership _2455_recOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2456_recIdents;
            RAST._IExpr _out194;
            DCOMP._IOwnership _out195;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out196;
            DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out194, out _out195, out _out196);
            _2454_recursiveGen = _out194;
            _2455_recOwned = _out195;
            _2456_recIdents = _out196;
            r = _2454_recursiveGen;
            resultingOwnership = _2455_recOwned;
            readIdents = _2456_recIdents;
          } else {
            _System._ITuple2<DAST._IType, DAST._IType> _source86 = _System.Tuple2<DAST._IType, DAST._IType>.create(_2452_fromTpe, _2451_toTpe);
            DAST._IType _2457___mcc_h338 = _source86.dtor__0;
            DAST._IType _2458___mcc_h339 = _source86.dtor__1;
            DAST._IType _source87 = _2457___mcc_h338;
            if (_source87.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2459___mcc_h342 = _source87.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _2460___mcc_h343 = _source87.dtor_typeArgs;
              DAST._IResolvedType _2461___mcc_h344 = _source87.dtor_resolved;
              DAST._IResolvedType _source88 = _2461___mcc_h344;
              if (_source88.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2462___mcc_h354 = _source88.dtor_path;
                DAST._IType _source89 = _2458___mcc_h339;
                if (_source89.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2463___mcc_h358 = _source89.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2464___mcc_h359 = _source89.dtor_typeArgs;
                  DAST._IResolvedType _2465___mcc_h360 = _source89.dtor_resolved;
                  DAST._IResolvedType _source90 = _2465___mcc_h360;
                  if (_source90.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2466___mcc_h364 = _source90.dtor_path;
                    {
                      RAST._IExpr _2467_recursiveGen;
                      DCOMP._IOwnership _2468_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2469_recIdents;
                      RAST._IExpr _out197;
                      DCOMP._IOwnership _out198;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out199;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out197, out _out198, out _out199);
                      _2467_recursiveGen = _out197;
                      _2468_recOwned = _out198;
                      _2469_recIdents = _out199;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2467_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      resultingOwnership = _2468_recOwned;
                      readIdents = _2469_recIdents;
                    }
                  } else if (_source90.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2470___mcc_h366 = _source90.dtor_path;
                    {
                      RAST._IExpr _2471_recursiveGen;
                      DCOMP._IOwnership _2472_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2473_recIdents;
                      RAST._IExpr _out200;
                      DCOMP._IOwnership _out201;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out202;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out200, out _out201, out _out202);
                      _2471_recursiveGen = _out200;
                      _2472_recOwned = _out201;
                      _2473_recIdents = _out202;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2471_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      resultingOwnership = _2472_recOwned;
                      readIdents = _2473_recIdents;
                    }
                  } else {
                    DAST._IType _2474___mcc_h368 = _source90.dtor_baseType;
                    DAST._INewtypeRange _2475___mcc_h369 = _source90.dtor_range;
                    bool _2476___mcc_h370 = _source90.dtor_erase;
                    bool _2477_erase = _2476___mcc_h370;
                    DAST._INewtypeRange _2478_range = _2475___mcc_h369;
                    DAST._IType _2479_b = _2474___mcc_h368;
                    {
                      if (object.Equals(_2452_fromTpe, _2479_b)) {
                        RAST._IExpr _2480_recursiveGen;
                        DCOMP._IOwnership _2481_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2482_recIdents;
                        RAST._IExpr _out203;
                        DCOMP._IOwnership _out204;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out205;
                        DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out203, out _out204, out _out205);
                        _2480_recursiveGen = _out203;
                        _2481_recOwned = _out204;
                        _2482_recIdents = _out205;
                        Std.Wrappers._IOption<RAST._IType> _2483_potentialRhsType;
                        _2483_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_2479_b, _2478_range);
                        Std.Wrappers._IOption<RAST._IType> _source91 = _2483_potentialRhsType;
                        if (_source91.is_None) {
                          if (_2477_erase) {
                            r = _2480_recursiveGen;
                          } else {
                            RAST._IType _2484_rhsType;
                            RAST._IType _out206;
                            _out206 = DCOMP.COMP.GenType(_2451_toTpe, true, false);
                            _2484_rhsType = _out206;
                            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_2484_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_2480_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                          }
                          resultingOwnership = _2481_recOwned;
                        } else {
                          RAST._IType _2485___mcc_h1492 = _source91.dtor_value;
                          RAST._IType _2486_v = _2485___mcc_h1492;
                          r = RAST.Expr.create_ConversionNum(_2486_v, _2480_recursiveGen);
                          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                        }
                        readIdents = _2482_recIdents;
                      } else {
                        RAST._IExpr _out207;
                        DCOMP._IOwnership _out208;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out209;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2453_expr, _2452_fromTpe, _2479_b), _2479_b, _2451_toTpe), selfIdent, @params, expectedOwnership, out _out207, out _out208, out _out209);
                        r = _out207;
                        resultingOwnership = _out208;
                        readIdents = _out209;
                      }
                    }
                  }
                } else if (_source89.is_Nullable) {
                  DAST._IType _2487___mcc_h374 = _source89.dtor_Nullable_a0;
                  {
                    RAST._IExpr _2488_recursiveGen;
                    DCOMP._IOwnership _2489_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2490_recIdents;
                    RAST._IExpr _out210;
                    DCOMP._IOwnership _out211;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out212;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out210, out _out211, out _out212);
                    _2488_recursiveGen = _out210;
                    _2489_recOwned = _out211;
                    _2490_recIdents = _out212;
                    Dafny.ISequence<Dafny.Rune> _2491_s;
                    _2491_s = (_2488_recursiveGen)._ToString(DCOMP.__default.IND);
                    if (object.Equals(_2489_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                      _2491_s = Dafny.Sequence<Dafny.Rune>.Concat(_2491_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    _2491_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2491_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    r = RAST.Expr.create_RawExpr(_2491_s);
                    resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                    readIdents = _2490_recIdents;
                  }
                } else if (_source89.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2492___mcc_h376 = _source89.dtor_Tuple_a0;
                  {
                    RAST._IExpr _2493_recursiveGen;
                    DCOMP._IOwnership _2494_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2495_recIdents;
                    RAST._IExpr _out213;
                    DCOMP._IOwnership _out214;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out215;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out213, out _out214, out _out215);
                    _2493_recursiveGen = _out213;
                    _2494_recOwned = _out214;
                    _2495_recIdents = _out215;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2493_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _2494_recOwned;
                    readIdents = _2495_recIdents;
                  }
                } else if (_source89.is_Array) {
                  DAST._IType _2496___mcc_h378 = _source89.dtor_element;
                  BigInteger _2497___mcc_h379 = _source89.dtor_dims;
                  {
                    RAST._IExpr _2498_recursiveGen;
                    DCOMP._IOwnership _2499_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2500_recIdents;
                    RAST._IExpr _out216;
                    DCOMP._IOwnership _out217;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out218;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out216, out _out217, out _out218);
                    _2498_recursiveGen = _out216;
                    _2499_recOwned = _out217;
                    _2500_recIdents = _out218;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2498_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _2499_recOwned;
                    readIdents = _2500_recIdents;
                  }
                } else if (_source89.is_Seq) {
                  DAST._IType _2501___mcc_h382 = _source89.dtor_element;
                  {
                    RAST._IExpr _2502_recursiveGen;
                    DCOMP._IOwnership _2503_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2504_recIdents;
                    RAST._IExpr _out219;
                    DCOMP._IOwnership _out220;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out221;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out219, out _out220, out _out221);
                    _2502_recursiveGen = _out219;
                    _2503_recOwned = _out220;
                    _2504_recIdents = _out221;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2502_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _2503_recOwned;
                    readIdents = _2504_recIdents;
                  }
                } else if (_source89.is_Set) {
                  DAST._IType _2505___mcc_h384 = _source89.dtor_element;
                  {
                    RAST._IExpr _2506_recursiveGen;
                    DCOMP._IOwnership _2507_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2508_recIdents;
                    RAST._IExpr _out222;
                    DCOMP._IOwnership _out223;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out224;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out222, out _out223, out _out224);
                    _2506_recursiveGen = _out222;
                    _2507_recOwned = _out223;
                    _2508_recIdents = _out224;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2506_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _2507_recOwned;
                    readIdents = _2508_recIdents;
                  }
                } else if (_source89.is_Multiset) {
                  DAST._IType _2509___mcc_h386 = _source89.dtor_element;
                  {
                    RAST._IExpr _2510_recursiveGen;
                    DCOMP._IOwnership _2511_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2512_recIdents;
                    RAST._IExpr _out225;
                    DCOMP._IOwnership _out226;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out227;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out225, out _out226, out _out227);
                    _2510_recursiveGen = _out225;
                    _2511_recOwned = _out226;
                    _2512_recIdents = _out227;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2510_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _2511_recOwned;
                    readIdents = _2512_recIdents;
                  }
                } else if (_source89.is_Map) {
                  DAST._IType _2513___mcc_h388 = _source89.dtor_key;
                  DAST._IType _2514___mcc_h389 = _source89.dtor_value;
                  {
                    RAST._IExpr _2515_recursiveGen;
                    DCOMP._IOwnership _2516_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2517_recIdents;
                    RAST._IExpr _out228;
                    DCOMP._IOwnership _out229;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out230;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out228, out _out229, out _out230);
                    _2515_recursiveGen = _out228;
                    _2516_recOwned = _out229;
                    _2517_recIdents = _out230;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2515_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _2516_recOwned;
                    readIdents = _2517_recIdents;
                  }
                } else if (_source89.is_SetBuilder) {
                  DAST._IType _2518___mcc_h392 = _source89.dtor_element;
                  {
                    RAST._IExpr _2519_recursiveGen;
                    DCOMP._IOwnership _2520_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2521_recIdents;
                    RAST._IExpr _out231;
                    DCOMP._IOwnership _out232;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out233;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out231, out _out232, out _out233);
                    _2519_recursiveGen = _out231;
                    _2520_recOwned = _out232;
                    _2521_recIdents = _out233;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2519_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _2520_recOwned;
                    readIdents = _2521_recIdents;
                  }
                } else if (_source89.is_MapBuilder) {
                  DAST._IType _2522___mcc_h394 = _source89.dtor_key;
                  DAST._IType _2523___mcc_h395 = _source89.dtor_value;
                  {
                    RAST._IExpr _2524_recursiveGen;
                    DCOMP._IOwnership _2525_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2526_recIdents;
                    RAST._IExpr _out234;
                    DCOMP._IOwnership _out235;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out236;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out234, out _out235, out _out236);
                    _2524_recursiveGen = _out234;
                    _2525_recOwned = _out235;
                    _2526_recIdents = _out236;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2524_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _2525_recOwned;
                    readIdents = _2526_recIdents;
                  }
                } else if (_source89.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2527___mcc_h398 = _source89.dtor_args;
                  DAST._IType _2528___mcc_h399 = _source89.dtor_result;
                  {
                    RAST._IExpr _2529_recursiveGen;
                    DCOMP._IOwnership _2530_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2531_recIdents;
                    RAST._IExpr _out237;
                    DCOMP._IOwnership _out238;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out239;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out237, out _out238, out _out239);
                    _2529_recursiveGen = _out237;
                    _2530_recOwned = _out238;
                    _2531_recIdents = _out239;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2529_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _2530_recOwned;
                    readIdents = _2531_recIdents;
                  }
                } else if (_source89.is_Primitive) {
                  DAST._IPrimitive _2532___mcc_h402 = _source89.dtor_Primitive_a0;
                  {
                    RAST._IExpr _2533_recursiveGen;
                    DCOMP._IOwnership _2534_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2535_recIdents;
                    RAST._IExpr _out240;
                    DCOMP._IOwnership _out241;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out242;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out240, out _out241, out _out242);
                    _2533_recursiveGen = _out240;
                    _2534_recOwned = _out241;
                    _2535_recIdents = _out242;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2533_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _2534_recOwned;
                    readIdents = _2535_recIdents;
                  }
                } else if (_source89.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2536___mcc_h404 = _source89.dtor_Passthrough_a0;
                  {
                    RAST._IExpr _2537_recursiveGen;
                    DCOMP._IOwnership _2538_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2539_recIdents;
                    RAST._IExpr _out243;
                    DCOMP._IOwnership _out244;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out245;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out243, out _out244, out _out245);
                    _2537_recursiveGen = _out243;
                    _2538_recOwned = _out244;
                    _2539_recIdents = _out245;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2537_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _2538_recOwned;
                    readIdents = _2539_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2540___mcc_h406 = _source89.dtor_TypeArg_a0;
                  {
                    RAST._IExpr _2541_recursiveGen;
                    DCOMP._IOwnership _2542_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2543_recIdents;
                    RAST._IExpr _out246;
                    DCOMP._IOwnership _out247;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out248;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out246, out _out247, out _out248);
                    _2541_recursiveGen = _out246;
                    _2542_recOwned = _out247;
                    _2543_recIdents = _out248;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2541_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _2542_recOwned;
                    readIdents = _2543_recIdents;
                  }
                }
              } else if (_source88.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2544___mcc_h408 = _source88.dtor_path;
                DAST._IType _source92 = _2458___mcc_h339;
                if (_source92.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2545___mcc_h412 = _source92.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2546___mcc_h413 = _source92.dtor_typeArgs;
                  DAST._IResolvedType _2547___mcc_h414 = _source92.dtor_resolved;
                  DAST._IResolvedType _source93 = _2547___mcc_h414;
                  if (_source93.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2548___mcc_h418 = _source93.dtor_path;
                    {
                      RAST._IExpr _2549_recursiveGen;
                      DCOMP._IOwnership _2550_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2551_recIdents;
                      RAST._IExpr _out249;
                      DCOMP._IOwnership _out250;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out251;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out249, out _out250, out _out251);
                      _2549_recursiveGen = _out249;
                      _2550_recOwned = _out250;
                      _2551_recIdents = _out251;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2549_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      resultingOwnership = _2550_recOwned;
                      readIdents = _2551_recIdents;
                    }
                  } else if (_source93.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2552___mcc_h420 = _source93.dtor_path;
                    {
                      RAST._IExpr _2553_recursiveGen;
                      DCOMP._IOwnership _2554_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2555_recIdents;
                      RAST._IExpr _out252;
                      DCOMP._IOwnership _out253;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out254;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out252, out _out253, out _out254);
                      _2553_recursiveGen = _out252;
                      _2554_recOwned = _out253;
                      _2555_recIdents = _out254;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2553_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      resultingOwnership = _2554_recOwned;
                      readIdents = _2555_recIdents;
                    }
                  } else {
                    DAST._IType _2556___mcc_h422 = _source93.dtor_baseType;
                    DAST._INewtypeRange _2557___mcc_h423 = _source93.dtor_range;
                    bool _2558___mcc_h424 = _source93.dtor_erase;
                    bool _2559_erase = _2558___mcc_h424;
                    DAST._INewtypeRange _2560_range = _2557___mcc_h423;
                    DAST._IType _2561_b = _2556___mcc_h422;
                    {
                      if (object.Equals(_2452_fromTpe, _2561_b)) {
                        RAST._IExpr _2562_recursiveGen;
                        DCOMP._IOwnership _2563_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2564_recIdents;
                        RAST._IExpr _out255;
                        DCOMP._IOwnership _out256;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out257;
                        DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out255, out _out256, out _out257);
                        _2562_recursiveGen = _out255;
                        _2563_recOwned = _out256;
                        _2564_recIdents = _out257;
                        Std.Wrappers._IOption<RAST._IType> _2565_potentialRhsType;
                        _2565_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_2561_b, _2560_range);
                        Std.Wrappers._IOption<RAST._IType> _source94 = _2565_potentialRhsType;
                        if (_source94.is_None) {
                          if (_2559_erase) {
                            r = _2562_recursiveGen;
                          } else {
                            RAST._IType _2566_rhsType;
                            RAST._IType _out258;
                            _out258 = DCOMP.COMP.GenType(_2451_toTpe, true, false);
                            _2566_rhsType = _out258;
                            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_2566_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_2562_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                          }
                          resultingOwnership = _2563_recOwned;
                        } else {
                          RAST._IType _2567___mcc_h1493 = _source94.dtor_value;
                          RAST._IType _2568_v = _2567___mcc_h1493;
                          r = RAST.Expr.create_ConversionNum(_2568_v, _2562_recursiveGen);
                          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                        }
                        readIdents = _2564_recIdents;
                      } else {
                        RAST._IExpr _out259;
                        DCOMP._IOwnership _out260;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out261;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2453_expr, _2452_fromTpe, _2561_b), _2561_b, _2451_toTpe), selfIdent, @params, expectedOwnership, out _out259, out _out260, out _out261);
                        r = _out259;
                        resultingOwnership = _out260;
                        readIdents = _out261;
                      }
                    }
                  }
                } else if (_source92.is_Nullable) {
                  DAST._IType _2569___mcc_h428 = _source92.dtor_Nullable_a0;
                  {
                    RAST._IExpr _2570_recursiveGen;
                    DCOMP._IOwnership _2571_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2572_recIdents;
                    RAST._IExpr _out262;
                    DCOMP._IOwnership _out263;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out264;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out262, out _out263, out _out264);
                    _2570_recursiveGen = _out262;
                    _2571_recOwned = _out263;
                    _2572_recIdents = _out264;
                    Dafny.ISequence<Dafny.Rune> _2573_s;
                    _2573_s = (_2570_recursiveGen)._ToString(DCOMP.__default.IND);
                    if (object.Equals(_2571_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                      _2573_s = Dafny.Sequence<Dafny.Rune>.Concat(_2573_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    _2573_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2573_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    r = RAST.Expr.create_RawExpr(_2573_s);
                    resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                    readIdents = _2572_recIdents;
                  }
                } else if (_source92.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2574___mcc_h430 = _source92.dtor_Tuple_a0;
                  {
                    RAST._IExpr _2575_recursiveGen;
                    DCOMP._IOwnership _2576_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2577_recIdents;
                    RAST._IExpr _out265;
                    DCOMP._IOwnership _out266;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out267;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out265, out _out266, out _out267);
                    _2575_recursiveGen = _out265;
                    _2576_recOwned = _out266;
                    _2577_recIdents = _out267;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2575_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _2576_recOwned;
                    readIdents = _2577_recIdents;
                  }
                } else if (_source92.is_Array) {
                  DAST._IType _2578___mcc_h432 = _source92.dtor_element;
                  BigInteger _2579___mcc_h433 = _source92.dtor_dims;
                  {
                    RAST._IExpr _2580_recursiveGen;
                    DCOMP._IOwnership _2581_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2582_recIdents;
                    RAST._IExpr _out268;
                    DCOMP._IOwnership _out269;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out270;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out268, out _out269, out _out270);
                    _2580_recursiveGen = _out268;
                    _2581_recOwned = _out269;
                    _2582_recIdents = _out270;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2580_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _2581_recOwned;
                    readIdents = _2582_recIdents;
                  }
                } else if (_source92.is_Seq) {
                  DAST._IType _2583___mcc_h436 = _source92.dtor_element;
                  {
                    RAST._IExpr _2584_recursiveGen;
                    DCOMP._IOwnership _2585_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2586_recIdents;
                    RAST._IExpr _out271;
                    DCOMP._IOwnership _out272;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out273;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out271, out _out272, out _out273);
                    _2584_recursiveGen = _out271;
                    _2585_recOwned = _out272;
                    _2586_recIdents = _out273;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2584_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _2585_recOwned;
                    readIdents = _2586_recIdents;
                  }
                } else if (_source92.is_Set) {
                  DAST._IType _2587___mcc_h438 = _source92.dtor_element;
                  {
                    RAST._IExpr _2588_recursiveGen;
                    DCOMP._IOwnership _2589_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2590_recIdents;
                    RAST._IExpr _out274;
                    DCOMP._IOwnership _out275;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out276;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out274, out _out275, out _out276);
                    _2588_recursiveGen = _out274;
                    _2589_recOwned = _out275;
                    _2590_recIdents = _out276;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2588_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _2589_recOwned;
                    readIdents = _2590_recIdents;
                  }
                } else if (_source92.is_Multiset) {
                  DAST._IType _2591___mcc_h440 = _source92.dtor_element;
                  {
                    RAST._IExpr _2592_recursiveGen;
                    DCOMP._IOwnership _2593_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2594_recIdents;
                    RAST._IExpr _out277;
                    DCOMP._IOwnership _out278;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out279;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out277, out _out278, out _out279);
                    _2592_recursiveGen = _out277;
                    _2593_recOwned = _out278;
                    _2594_recIdents = _out279;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2592_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _2593_recOwned;
                    readIdents = _2594_recIdents;
                  }
                } else if (_source92.is_Map) {
                  DAST._IType _2595___mcc_h442 = _source92.dtor_key;
                  DAST._IType _2596___mcc_h443 = _source92.dtor_value;
                  {
                    RAST._IExpr _2597_recursiveGen;
                    DCOMP._IOwnership _2598_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2599_recIdents;
                    RAST._IExpr _out280;
                    DCOMP._IOwnership _out281;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out282;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out280, out _out281, out _out282);
                    _2597_recursiveGen = _out280;
                    _2598_recOwned = _out281;
                    _2599_recIdents = _out282;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2597_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _2598_recOwned;
                    readIdents = _2599_recIdents;
                  }
                } else if (_source92.is_SetBuilder) {
                  DAST._IType _2600___mcc_h446 = _source92.dtor_element;
                  {
                    RAST._IExpr _2601_recursiveGen;
                    DCOMP._IOwnership _2602_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2603_recIdents;
                    RAST._IExpr _out283;
                    DCOMP._IOwnership _out284;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out285;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out283, out _out284, out _out285);
                    _2601_recursiveGen = _out283;
                    _2602_recOwned = _out284;
                    _2603_recIdents = _out285;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2601_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _2602_recOwned;
                    readIdents = _2603_recIdents;
                  }
                } else if (_source92.is_MapBuilder) {
                  DAST._IType _2604___mcc_h448 = _source92.dtor_key;
                  DAST._IType _2605___mcc_h449 = _source92.dtor_value;
                  {
                    RAST._IExpr _2606_recursiveGen;
                    DCOMP._IOwnership _2607_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2608_recIdents;
                    RAST._IExpr _out286;
                    DCOMP._IOwnership _out287;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out288;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out286, out _out287, out _out288);
                    _2606_recursiveGen = _out286;
                    _2607_recOwned = _out287;
                    _2608_recIdents = _out288;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2606_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _2607_recOwned;
                    readIdents = _2608_recIdents;
                  }
                } else if (_source92.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2609___mcc_h452 = _source92.dtor_args;
                  DAST._IType _2610___mcc_h453 = _source92.dtor_result;
                  {
                    RAST._IExpr _2611_recursiveGen;
                    DCOMP._IOwnership _2612_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2613_recIdents;
                    RAST._IExpr _out289;
                    DCOMP._IOwnership _out290;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out291;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out289, out _out290, out _out291);
                    _2611_recursiveGen = _out289;
                    _2612_recOwned = _out290;
                    _2613_recIdents = _out291;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2611_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _2612_recOwned;
                    readIdents = _2613_recIdents;
                  }
                } else if (_source92.is_Primitive) {
                  DAST._IPrimitive _2614___mcc_h456 = _source92.dtor_Primitive_a0;
                  {
                    RAST._IExpr _2615_recursiveGen;
                    DCOMP._IOwnership _2616_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2617_recIdents;
                    RAST._IExpr _out292;
                    DCOMP._IOwnership _out293;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out294;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out292, out _out293, out _out294);
                    _2615_recursiveGen = _out292;
                    _2616_recOwned = _out293;
                    _2617_recIdents = _out294;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2615_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _2616_recOwned;
                    readIdents = _2617_recIdents;
                  }
                } else if (_source92.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2618___mcc_h458 = _source92.dtor_Passthrough_a0;
                  {
                    RAST._IExpr _2619_recursiveGen;
                    DCOMP._IOwnership _2620_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2621_recIdents;
                    RAST._IExpr _out295;
                    DCOMP._IOwnership _out296;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out297;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out295, out _out296, out _out297);
                    _2619_recursiveGen = _out295;
                    _2620_recOwned = _out296;
                    _2621_recIdents = _out297;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2619_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _2620_recOwned;
                    readIdents = _2621_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2622___mcc_h460 = _source92.dtor_TypeArg_a0;
                  {
                    RAST._IExpr _2623_recursiveGen;
                    DCOMP._IOwnership _2624_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2625_recIdents;
                    RAST._IExpr _out298;
                    DCOMP._IOwnership _out299;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out300;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out298, out _out299, out _out300);
                    _2623_recursiveGen = _out298;
                    _2624_recOwned = _out299;
                    _2625_recIdents = _out300;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2623_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _2624_recOwned;
                    readIdents = _2625_recIdents;
                  }
                }
              } else {
                DAST._IType _2626___mcc_h462 = _source88.dtor_baseType;
                DAST._INewtypeRange _2627___mcc_h463 = _source88.dtor_range;
                bool _2628___mcc_h464 = _source88.dtor_erase;
                DAST._IType _source95 = _2458___mcc_h339;
                if (_source95.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2629___mcc_h474 = _source95.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2630___mcc_h475 = _source95.dtor_typeArgs;
                  DAST._IResolvedType _2631___mcc_h476 = _source95.dtor_resolved;
                  DAST._IResolvedType _source96 = _2631___mcc_h476;
                  if (_source96.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2632___mcc_h483 = _source96.dtor_path;
                    bool _2633_erase = _2628___mcc_h464;
                    DAST._INewtypeRange _2634_range = _2627___mcc_h463;
                    DAST._IType _2635_b = _2626___mcc_h462;
                    {
                      if (object.Equals(_2635_b, _2451_toTpe)) {
                        RAST._IExpr _2636_recursiveGen;
                        DCOMP._IOwnership _2637_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2638_recIdents;
                        RAST._IExpr _out301;
                        DCOMP._IOwnership _out302;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out303;
                        DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out301, out _out302, out _out303);
                        _2636_recursiveGen = _out301;
                        _2637_recOwned = _out302;
                        _2638_recIdents = _out303;
                        if (_2633_erase) {
                          r = _2636_recursiveGen;
                        } else {
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2636_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                        }
                        resultingOwnership = _2637_recOwned;
                        readIdents = _2638_recIdents;
                      } else {
                        RAST._IExpr _out304;
                        DCOMP._IOwnership _out305;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out306;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2453_expr, _2452_fromTpe, _2635_b), _2635_b, _2451_toTpe), selfIdent, @params, expectedOwnership, out _out304, out _out305, out _out306);
                        r = _out304;
                        resultingOwnership = _out305;
                        readIdents = _out306;
                      }
                    }
                  } else if (_source96.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2639___mcc_h486 = _source96.dtor_path;
                    bool _2640_erase = _2628___mcc_h464;
                    DAST._INewtypeRange _2641_range = _2627___mcc_h463;
                    DAST._IType _2642_b = _2626___mcc_h462;
                    {
                      if (object.Equals(_2642_b, _2451_toTpe)) {
                        RAST._IExpr _2643_recursiveGen;
                        DCOMP._IOwnership _2644_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2645_recIdents;
                        RAST._IExpr _out307;
                        DCOMP._IOwnership _out308;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out309;
                        DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out307, out _out308, out _out309);
                        _2643_recursiveGen = _out307;
                        _2644_recOwned = _out308;
                        _2645_recIdents = _out309;
                        if (_2640_erase) {
                          r = _2643_recursiveGen;
                        } else {
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2643_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                        }
                        resultingOwnership = _2644_recOwned;
                        readIdents = _2645_recIdents;
                      } else {
                        RAST._IExpr _out310;
                        DCOMP._IOwnership _out311;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out312;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2453_expr, _2452_fromTpe, _2642_b), _2642_b, _2451_toTpe), selfIdent, @params, expectedOwnership, out _out310, out _out311, out _out312);
                        r = _out310;
                        resultingOwnership = _out311;
                        readIdents = _out312;
                      }
                    }
                  } else {
                    DAST._IType _2646___mcc_h489 = _source96.dtor_baseType;
                    DAST._INewtypeRange _2647___mcc_h490 = _source96.dtor_range;
                    bool _2648___mcc_h491 = _source96.dtor_erase;
                    bool _2649_erase = _2648___mcc_h491;
                    DAST._INewtypeRange _2650_range = _2647___mcc_h490;
                    DAST._IType _2651_b = _2646___mcc_h489;
                    {
                      if (object.Equals(_2452_fromTpe, _2651_b)) {
                        RAST._IExpr _2652_recursiveGen;
                        DCOMP._IOwnership _2653_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2654_recIdents;
                        RAST._IExpr _out313;
                        DCOMP._IOwnership _out314;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out315;
                        DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out313, out _out314, out _out315);
                        _2652_recursiveGen = _out313;
                        _2653_recOwned = _out314;
                        _2654_recIdents = _out315;
                        Std.Wrappers._IOption<RAST._IType> _2655_potentialRhsType;
                        _2655_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_2651_b, _2650_range);
                        Std.Wrappers._IOption<RAST._IType> _source97 = _2655_potentialRhsType;
                        if (_source97.is_None) {
                          if (_2649_erase) {
                            r = _2652_recursiveGen;
                          } else {
                            RAST._IType _2656_rhsType;
                            RAST._IType _out316;
                            _out316 = DCOMP.COMP.GenType(_2451_toTpe, true, false);
                            _2656_rhsType = _out316;
                            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_2656_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_2652_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                          }
                          resultingOwnership = _2653_recOwned;
                        } else {
                          RAST._IType _2657___mcc_h1494 = _source97.dtor_value;
                          RAST._IType _2658_v = _2657___mcc_h1494;
                          r = RAST.Expr.create_ConversionNum(_2658_v, _2652_recursiveGen);
                          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                        }
                        readIdents = _2654_recIdents;
                      } else {
                        RAST._IExpr _out317;
                        DCOMP._IOwnership _out318;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out319;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2453_expr, _2452_fromTpe, _2651_b), _2651_b, _2451_toTpe), selfIdent, @params, expectedOwnership, out _out317, out _out318, out _out319);
                        r = _out317;
                        resultingOwnership = _out318;
                        readIdents = _out319;
                      }
                    }
                  }
                } else if (_source95.is_Nullable) {
                  DAST._IType _2659___mcc_h498 = _source95.dtor_Nullable_a0;
                  {
                    RAST._IExpr _2660_recursiveGen;
                    DCOMP._IOwnership _2661_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2662_recIdents;
                    RAST._IExpr _out320;
                    DCOMP._IOwnership _out321;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out322;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out320, out _out321, out _out322);
                    _2660_recursiveGen = _out320;
                    _2661_recOwned = _out321;
                    _2662_recIdents = _out322;
                    Dafny.ISequence<Dafny.Rune> _2663_s;
                    _2663_s = (_2660_recursiveGen)._ToString(DCOMP.__default.IND);
                    if (object.Equals(_2661_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                      _2663_s = Dafny.Sequence<Dafny.Rune>.Concat(_2663_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    _2663_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2663_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    r = RAST.Expr.create_RawExpr(_2663_s);
                    resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                    readIdents = _2662_recIdents;
                  }
                } else if (_source95.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2664___mcc_h501 = _source95.dtor_Tuple_a0;
                  bool _2665_erase = _2628___mcc_h464;
                  DAST._INewtypeRange _2666_range = _2627___mcc_h463;
                  DAST._IType _2667_b = _2626___mcc_h462;
                  {
                    if (object.Equals(_2667_b, _2451_toTpe)) {
                      RAST._IExpr _2668_recursiveGen;
                      DCOMP._IOwnership _2669_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2670_recIdents;
                      RAST._IExpr _out323;
                      DCOMP._IOwnership _out324;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out325;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out323, out _out324, out _out325);
                      _2668_recursiveGen = _out323;
                      _2669_recOwned = _out324;
                      _2670_recIdents = _out325;
                      if (_2665_erase) {
                        r = _2668_recursiveGen;
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2668_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                      }
                      resultingOwnership = _2669_recOwned;
                      readIdents = _2670_recIdents;
                    } else {
                      RAST._IExpr _out326;
                      DCOMP._IOwnership _out327;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out328;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2453_expr, _2452_fromTpe, _2667_b), _2667_b, _2451_toTpe), selfIdent, @params, expectedOwnership, out _out326, out _out327, out _out328);
                      r = _out326;
                      resultingOwnership = _out327;
                      readIdents = _out328;
                    }
                  }
                } else if (_source95.is_Array) {
                  DAST._IType _2671___mcc_h504 = _source95.dtor_element;
                  BigInteger _2672___mcc_h505 = _source95.dtor_dims;
                  bool _2673_erase = _2628___mcc_h464;
                  DAST._INewtypeRange _2674_range = _2627___mcc_h463;
                  DAST._IType _2675_b = _2626___mcc_h462;
                  {
                    if (object.Equals(_2675_b, _2451_toTpe)) {
                      RAST._IExpr _2676_recursiveGen;
                      DCOMP._IOwnership _2677_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2678_recIdents;
                      RAST._IExpr _out329;
                      DCOMP._IOwnership _out330;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out331;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out329, out _out330, out _out331);
                      _2676_recursiveGen = _out329;
                      _2677_recOwned = _out330;
                      _2678_recIdents = _out331;
                      if (_2673_erase) {
                        r = _2676_recursiveGen;
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2676_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                      }
                      resultingOwnership = _2677_recOwned;
                      readIdents = _2678_recIdents;
                    } else {
                      RAST._IExpr _out332;
                      DCOMP._IOwnership _out333;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out334;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2453_expr, _2452_fromTpe, _2675_b), _2675_b, _2451_toTpe), selfIdent, @params, expectedOwnership, out _out332, out _out333, out _out334);
                      r = _out332;
                      resultingOwnership = _out333;
                      readIdents = _out334;
                    }
                  }
                } else if (_source95.is_Seq) {
                  DAST._IType _2679___mcc_h510 = _source95.dtor_element;
                  bool _2680_erase = _2628___mcc_h464;
                  DAST._INewtypeRange _2681_range = _2627___mcc_h463;
                  DAST._IType _2682_b = _2626___mcc_h462;
                  {
                    if (object.Equals(_2682_b, _2451_toTpe)) {
                      RAST._IExpr _2683_recursiveGen;
                      DCOMP._IOwnership _2684_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2685_recIdents;
                      RAST._IExpr _out335;
                      DCOMP._IOwnership _out336;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out337;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out335, out _out336, out _out337);
                      _2683_recursiveGen = _out335;
                      _2684_recOwned = _out336;
                      _2685_recIdents = _out337;
                      if (_2680_erase) {
                        r = _2683_recursiveGen;
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2683_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                      }
                      resultingOwnership = _2684_recOwned;
                      readIdents = _2685_recIdents;
                    } else {
                      RAST._IExpr _out338;
                      DCOMP._IOwnership _out339;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out340;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2453_expr, _2452_fromTpe, _2682_b), _2682_b, _2451_toTpe), selfIdent, @params, expectedOwnership, out _out338, out _out339, out _out340);
                      r = _out338;
                      resultingOwnership = _out339;
                      readIdents = _out340;
                    }
                  }
                } else if (_source95.is_Set) {
                  DAST._IType _2686___mcc_h513 = _source95.dtor_element;
                  bool _2687_erase = _2628___mcc_h464;
                  DAST._INewtypeRange _2688_range = _2627___mcc_h463;
                  DAST._IType _2689_b = _2626___mcc_h462;
                  {
                    if (object.Equals(_2689_b, _2451_toTpe)) {
                      RAST._IExpr _2690_recursiveGen;
                      DCOMP._IOwnership _2691_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2692_recIdents;
                      RAST._IExpr _out341;
                      DCOMP._IOwnership _out342;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out343;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out341, out _out342, out _out343);
                      _2690_recursiveGen = _out341;
                      _2691_recOwned = _out342;
                      _2692_recIdents = _out343;
                      if (_2687_erase) {
                        r = _2690_recursiveGen;
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2690_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                      }
                      resultingOwnership = _2691_recOwned;
                      readIdents = _2692_recIdents;
                    } else {
                      RAST._IExpr _out344;
                      DCOMP._IOwnership _out345;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out346;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2453_expr, _2452_fromTpe, _2689_b), _2689_b, _2451_toTpe), selfIdent, @params, expectedOwnership, out _out344, out _out345, out _out346);
                      r = _out344;
                      resultingOwnership = _out345;
                      readIdents = _out346;
                    }
                  }
                } else if (_source95.is_Multiset) {
                  DAST._IType _2693___mcc_h516 = _source95.dtor_element;
                  bool _2694_erase = _2628___mcc_h464;
                  DAST._INewtypeRange _2695_range = _2627___mcc_h463;
                  DAST._IType _2696_b = _2626___mcc_h462;
                  {
                    if (object.Equals(_2696_b, _2451_toTpe)) {
                      RAST._IExpr _2697_recursiveGen;
                      DCOMP._IOwnership _2698_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2699_recIdents;
                      RAST._IExpr _out347;
                      DCOMP._IOwnership _out348;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out349;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out347, out _out348, out _out349);
                      _2697_recursiveGen = _out347;
                      _2698_recOwned = _out348;
                      _2699_recIdents = _out349;
                      if (_2694_erase) {
                        r = _2697_recursiveGen;
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2697_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                      }
                      resultingOwnership = _2698_recOwned;
                      readIdents = _2699_recIdents;
                    } else {
                      RAST._IExpr _out350;
                      DCOMP._IOwnership _out351;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out352;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2453_expr, _2452_fromTpe, _2696_b), _2696_b, _2451_toTpe), selfIdent, @params, expectedOwnership, out _out350, out _out351, out _out352);
                      r = _out350;
                      resultingOwnership = _out351;
                      readIdents = _out352;
                    }
                  }
                } else if (_source95.is_Map) {
                  DAST._IType _2700___mcc_h519 = _source95.dtor_key;
                  DAST._IType _2701___mcc_h520 = _source95.dtor_value;
                  bool _2702_erase = _2628___mcc_h464;
                  DAST._INewtypeRange _2703_range = _2627___mcc_h463;
                  DAST._IType _2704_b = _2626___mcc_h462;
                  {
                    if (object.Equals(_2704_b, _2451_toTpe)) {
                      RAST._IExpr _2705_recursiveGen;
                      DCOMP._IOwnership _2706_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2707_recIdents;
                      RAST._IExpr _out353;
                      DCOMP._IOwnership _out354;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out355;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out353, out _out354, out _out355);
                      _2705_recursiveGen = _out353;
                      _2706_recOwned = _out354;
                      _2707_recIdents = _out355;
                      if (_2702_erase) {
                        r = _2705_recursiveGen;
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2705_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                      }
                      resultingOwnership = _2706_recOwned;
                      readIdents = _2707_recIdents;
                    } else {
                      RAST._IExpr _out356;
                      DCOMP._IOwnership _out357;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out358;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2453_expr, _2452_fromTpe, _2704_b), _2704_b, _2451_toTpe), selfIdent, @params, expectedOwnership, out _out356, out _out357, out _out358);
                      r = _out356;
                      resultingOwnership = _out357;
                      readIdents = _out358;
                    }
                  }
                } else if (_source95.is_SetBuilder) {
                  DAST._IType _2708___mcc_h525 = _source95.dtor_element;
                  bool _2709_erase = _2628___mcc_h464;
                  DAST._INewtypeRange _2710_range = _2627___mcc_h463;
                  DAST._IType _2711_b = _2626___mcc_h462;
                  {
                    if (object.Equals(_2711_b, _2451_toTpe)) {
                      RAST._IExpr _2712_recursiveGen;
                      DCOMP._IOwnership _2713_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2714_recIdents;
                      RAST._IExpr _out359;
                      DCOMP._IOwnership _out360;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out361;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out359, out _out360, out _out361);
                      _2712_recursiveGen = _out359;
                      _2713_recOwned = _out360;
                      _2714_recIdents = _out361;
                      if (_2709_erase) {
                        r = _2712_recursiveGen;
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2712_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                      }
                      resultingOwnership = _2713_recOwned;
                      readIdents = _2714_recIdents;
                    } else {
                      RAST._IExpr _out362;
                      DCOMP._IOwnership _out363;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out364;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2453_expr, _2452_fromTpe, _2711_b), _2711_b, _2451_toTpe), selfIdent, @params, expectedOwnership, out _out362, out _out363, out _out364);
                      r = _out362;
                      resultingOwnership = _out363;
                      readIdents = _out364;
                    }
                  }
                } else if (_source95.is_MapBuilder) {
                  DAST._IType _2715___mcc_h528 = _source95.dtor_key;
                  DAST._IType _2716___mcc_h529 = _source95.dtor_value;
                  bool _2717_erase = _2628___mcc_h464;
                  DAST._INewtypeRange _2718_range = _2627___mcc_h463;
                  DAST._IType _2719_b = _2626___mcc_h462;
                  {
                    if (object.Equals(_2719_b, _2451_toTpe)) {
                      RAST._IExpr _2720_recursiveGen;
                      DCOMP._IOwnership _2721_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2722_recIdents;
                      RAST._IExpr _out365;
                      DCOMP._IOwnership _out366;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out367;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out365, out _out366, out _out367);
                      _2720_recursiveGen = _out365;
                      _2721_recOwned = _out366;
                      _2722_recIdents = _out367;
                      if (_2717_erase) {
                        r = _2720_recursiveGen;
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2720_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                      }
                      resultingOwnership = _2721_recOwned;
                      readIdents = _2722_recIdents;
                    } else {
                      RAST._IExpr _out368;
                      DCOMP._IOwnership _out369;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out370;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2453_expr, _2452_fromTpe, _2719_b), _2719_b, _2451_toTpe), selfIdent, @params, expectedOwnership, out _out368, out _out369, out _out370);
                      r = _out368;
                      resultingOwnership = _out369;
                      readIdents = _out370;
                    }
                  }
                } else if (_source95.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2723___mcc_h534 = _source95.dtor_args;
                  DAST._IType _2724___mcc_h535 = _source95.dtor_result;
                  bool _2725_erase = _2628___mcc_h464;
                  DAST._INewtypeRange _2726_range = _2627___mcc_h463;
                  DAST._IType _2727_b = _2626___mcc_h462;
                  {
                    if (object.Equals(_2727_b, _2451_toTpe)) {
                      RAST._IExpr _2728_recursiveGen;
                      DCOMP._IOwnership _2729_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2730_recIdents;
                      RAST._IExpr _out371;
                      DCOMP._IOwnership _out372;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out373;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out371, out _out372, out _out373);
                      _2728_recursiveGen = _out371;
                      _2729_recOwned = _out372;
                      _2730_recIdents = _out373;
                      if (_2725_erase) {
                        r = _2728_recursiveGen;
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2728_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                      }
                      resultingOwnership = _2729_recOwned;
                      readIdents = _2730_recIdents;
                    } else {
                      RAST._IExpr _out374;
                      DCOMP._IOwnership _out375;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out376;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2453_expr, _2452_fromTpe, _2727_b), _2727_b, _2451_toTpe), selfIdent, @params, expectedOwnership, out _out374, out _out375, out _out376);
                      r = _out374;
                      resultingOwnership = _out375;
                      readIdents = _out376;
                    }
                  }
                } else if (_source95.is_Primitive) {
                  DAST._IPrimitive _2731___mcc_h540 = _source95.dtor_Primitive_a0;
                  bool _2732_erase = _2628___mcc_h464;
                  DAST._INewtypeRange _2733_range = _2627___mcc_h463;
                  DAST._IType _2734_b = _2626___mcc_h462;
                  {
                    if (object.Equals(_2734_b, _2451_toTpe)) {
                      RAST._IExpr _2735_recursiveGen;
                      DCOMP._IOwnership _2736_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2737_recIdents;
                      RAST._IExpr _out377;
                      DCOMP._IOwnership _out378;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out379;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out377, out _out378, out _out379);
                      _2735_recursiveGen = _out377;
                      _2736_recOwned = _out378;
                      _2737_recIdents = _out379;
                      if (_2732_erase) {
                        r = _2735_recursiveGen;
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2735_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                      }
                      resultingOwnership = _2736_recOwned;
                      readIdents = _2737_recIdents;
                    } else {
                      RAST._IExpr _out380;
                      DCOMP._IOwnership _out381;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out382;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2453_expr, _2452_fromTpe, _2734_b), _2734_b, _2451_toTpe), selfIdent, @params, expectedOwnership, out _out380, out _out381, out _out382);
                      r = _out380;
                      resultingOwnership = _out381;
                      readIdents = _out382;
                    }
                  }
                } else if (_source95.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2738___mcc_h543 = _source95.dtor_Passthrough_a0;
                  bool _2739_erase = _2628___mcc_h464;
                  DAST._INewtypeRange _2740_range = _2627___mcc_h463;
                  DAST._IType _2741_b = _2626___mcc_h462;
                  {
                    if (object.Equals(_2741_b, _2451_toTpe)) {
                      RAST._IExpr _2742_recursiveGen;
                      DCOMP._IOwnership _2743_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2744_recIdents;
                      RAST._IExpr _out383;
                      DCOMP._IOwnership _out384;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out385;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out383, out _out384, out _out385);
                      _2742_recursiveGen = _out383;
                      _2743_recOwned = _out384;
                      _2744_recIdents = _out385;
                      if (_2739_erase) {
                        r = _2742_recursiveGen;
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2742_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                      }
                      resultingOwnership = _2743_recOwned;
                      readIdents = _2744_recIdents;
                    } else {
                      RAST._IExpr _out386;
                      DCOMP._IOwnership _out387;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out388;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2453_expr, _2452_fromTpe, _2741_b), _2741_b, _2451_toTpe), selfIdent, @params, expectedOwnership, out _out386, out _out387, out _out388);
                      r = _out386;
                      resultingOwnership = _out387;
                      readIdents = _out388;
                    }
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2745___mcc_h546 = _source95.dtor_TypeArg_a0;
                  bool _2746_erase = _2628___mcc_h464;
                  DAST._INewtypeRange _2747_range = _2627___mcc_h463;
                  DAST._IType _2748_b = _2626___mcc_h462;
                  {
                    if (object.Equals(_2748_b, _2451_toTpe)) {
                      RAST._IExpr _2749_recursiveGen;
                      DCOMP._IOwnership _2750_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2751_recIdents;
                      RAST._IExpr _out389;
                      DCOMP._IOwnership _out390;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out391;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out389, out _out390, out _out391);
                      _2749_recursiveGen = _out389;
                      _2750_recOwned = _out390;
                      _2751_recIdents = _out391;
                      if (_2746_erase) {
                        r = _2749_recursiveGen;
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2749_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                      }
                      resultingOwnership = _2750_recOwned;
                      readIdents = _2751_recIdents;
                    } else {
                      RAST._IExpr _out392;
                      DCOMP._IOwnership _out393;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out394;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2453_expr, _2452_fromTpe, _2748_b), _2748_b, _2451_toTpe), selfIdent, @params, expectedOwnership, out _out392, out _out393, out _out394);
                      r = _out392;
                      resultingOwnership = _out393;
                      readIdents = _out394;
                    }
                  }
                }
              }
            } else if (_source87.is_Nullable) {
              DAST._IType _2752___mcc_h549 = _source87.dtor_Nullable_a0;
              DAST._IType _source98 = _2458___mcc_h339;
              if (_source98.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2753___mcc_h553 = _source98.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2754___mcc_h554 = _source98.dtor_typeArgs;
                DAST._IResolvedType _2755___mcc_h555 = _source98.dtor_resolved;
                DAST._IResolvedType _source99 = _2755___mcc_h555;
                if (_source99.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2756___mcc_h562 = _source99.dtor_path;
                  {
                    RAST._IExpr _2757_recursiveGen;
                    DCOMP._IOwnership _2758_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2759_recIdents;
                    RAST._IExpr _out395;
                    DCOMP._IOwnership _out396;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out397;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out395, out _out396, out _out397);
                    _2757_recursiveGen = _out395;
                    _2758_recOwned = _out396;
                    _2759_recIdents = _out397;
                    Dafny.ISequence<Dafny.Rune> _2760_s;
                    _2760_s = (_2757_recursiveGen)._ToString(DCOMP.__default.IND);
                    if (object.Equals(_2758_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                      _2760_s = Dafny.Sequence<Dafny.Rune>.Concat(_2760_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    _2760_s = Dafny.Sequence<Dafny.Rune>.Concat(_2760_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    r = RAST.Expr.create_RawExpr(_2760_s);
                    resultingOwnership = _2758_recOwned;
                    readIdents = _2759_recIdents;
                  }
                } else if (_source99.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2761___mcc_h565 = _source99.dtor_path;
                  {
                    RAST._IExpr _2762_recursiveGen;
                    DCOMP._IOwnership _2763_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2764_recIdents;
                    RAST._IExpr _out398;
                    DCOMP._IOwnership _out399;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out400;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out398, out _out399, out _out400);
                    _2762_recursiveGen = _out398;
                    _2763_recOwned = _out399;
                    _2764_recIdents = _out400;
                    Dafny.ISequence<Dafny.Rune> _2765_s;
                    _2765_s = (_2762_recursiveGen)._ToString(DCOMP.__default.IND);
                    if (object.Equals(_2763_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                      _2765_s = Dafny.Sequence<Dafny.Rune>.Concat(_2765_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    _2765_s = Dafny.Sequence<Dafny.Rune>.Concat(_2765_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    r = RAST.Expr.create_RawExpr(_2765_s);
                    resultingOwnership = _2763_recOwned;
                    readIdents = _2764_recIdents;
                  }
                } else {
                  DAST._IType _2766___mcc_h568 = _source99.dtor_baseType;
                  DAST._INewtypeRange _2767___mcc_h569 = _source99.dtor_range;
                  bool _2768___mcc_h570 = _source99.dtor_erase;
                  {
                    RAST._IExpr _2769_recursiveGen;
                    DCOMP._IOwnership _2770_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2771_recIdents;
                    RAST._IExpr _out401;
                    DCOMP._IOwnership _out402;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out403;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out401, out _out402, out _out403);
                    _2769_recursiveGen = _out401;
                    _2770_recOwned = _out402;
                    _2771_recIdents = _out403;
                    Dafny.ISequence<Dafny.Rune> _2772_s;
                    _2772_s = (_2769_recursiveGen)._ToString(DCOMP.__default.IND);
                    if (object.Equals(_2770_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                      _2772_s = Dafny.Sequence<Dafny.Rune>.Concat(_2772_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    _2772_s = Dafny.Sequence<Dafny.Rune>.Concat(_2772_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    r = RAST.Expr.create_RawExpr(_2772_s);
                    resultingOwnership = _2770_recOwned;
                    readIdents = _2771_recIdents;
                  }
                }
              } else if (_source98.is_Nullable) {
                DAST._IType _2773___mcc_h577 = _source98.dtor_Nullable_a0;
                {
                  RAST._IExpr _2774_recursiveGen;
                  DCOMP._IOwnership _2775_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2776_recIdents;
                  RAST._IExpr _out404;
                  DCOMP._IOwnership _out405;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out406;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out404, out _out405, out _out406);
                  _2774_recursiveGen = _out404;
                  _2775_recOwned = _out405;
                  _2776_recIdents = _out406;
                  Dafny.ISequence<Dafny.Rune> _2777_s;
                  _2777_s = (_2774_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (object.Equals(_2775_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                    _2777_s = Dafny.Sequence<Dafny.Rune>.Concat(_2777_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2777_s = Dafny.Sequence<Dafny.Rune>.Concat(_2777_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2777_s);
                  resultingOwnership = _2775_recOwned;
                  readIdents = _2776_recIdents;
                }
              } else if (_source98.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2778___mcc_h580 = _source98.dtor_Tuple_a0;
                {
                  RAST._IExpr _2779_recursiveGen;
                  DCOMP._IOwnership _2780_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2781_recIdents;
                  RAST._IExpr _out407;
                  DCOMP._IOwnership _out408;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out409;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out407, out _out408, out _out409);
                  _2779_recursiveGen = _out407;
                  _2780_recOwned = _out408;
                  _2781_recIdents = _out409;
                  Dafny.ISequence<Dafny.Rune> _2782_s;
                  _2782_s = (_2779_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (object.Equals(_2780_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                    _2782_s = Dafny.Sequence<Dafny.Rune>.Concat(_2782_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2782_s = Dafny.Sequence<Dafny.Rune>.Concat(_2782_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2782_s);
                  resultingOwnership = _2780_recOwned;
                  readIdents = _2781_recIdents;
                }
              } else if (_source98.is_Array) {
                DAST._IType _2783___mcc_h583 = _source98.dtor_element;
                BigInteger _2784___mcc_h584 = _source98.dtor_dims;
                {
                  RAST._IExpr _2785_recursiveGen;
                  DCOMP._IOwnership _2786_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2787_recIdents;
                  RAST._IExpr _out410;
                  DCOMP._IOwnership _out411;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out412;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out410, out _out411, out _out412);
                  _2785_recursiveGen = _out410;
                  _2786_recOwned = _out411;
                  _2787_recIdents = _out412;
                  Dafny.ISequence<Dafny.Rune> _2788_s;
                  _2788_s = (_2785_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (object.Equals(_2786_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                    _2788_s = Dafny.Sequence<Dafny.Rune>.Concat(_2788_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2788_s = Dafny.Sequence<Dafny.Rune>.Concat(_2788_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2788_s);
                  resultingOwnership = _2786_recOwned;
                  readIdents = _2787_recIdents;
                }
              } else if (_source98.is_Seq) {
                DAST._IType _2789___mcc_h589 = _source98.dtor_element;
                {
                  RAST._IExpr _2790_recursiveGen;
                  DCOMP._IOwnership _2791_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2792_recIdents;
                  RAST._IExpr _out413;
                  DCOMP._IOwnership _out414;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out415;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out413, out _out414, out _out415);
                  _2790_recursiveGen = _out413;
                  _2791_recOwned = _out414;
                  _2792_recIdents = _out415;
                  Dafny.ISequence<Dafny.Rune> _2793_s;
                  _2793_s = (_2790_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (object.Equals(_2791_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                    _2793_s = Dafny.Sequence<Dafny.Rune>.Concat(_2793_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2793_s = Dafny.Sequence<Dafny.Rune>.Concat(_2793_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2793_s);
                  resultingOwnership = _2791_recOwned;
                  readIdents = _2792_recIdents;
                }
              } else if (_source98.is_Set) {
                DAST._IType _2794___mcc_h592 = _source98.dtor_element;
                {
                  RAST._IExpr _2795_recursiveGen;
                  DCOMP._IOwnership _2796_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2797_recIdents;
                  RAST._IExpr _out416;
                  DCOMP._IOwnership _out417;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out418;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out416, out _out417, out _out418);
                  _2795_recursiveGen = _out416;
                  _2796_recOwned = _out417;
                  _2797_recIdents = _out418;
                  Dafny.ISequence<Dafny.Rune> _2798_s;
                  _2798_s = (_2795_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (object.Equals(_2796_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                    _2798_s = Dafny.Sequence<Dafny.Rune>.Concat(_2798_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2798_s = Dafny.Sequence<Dafny.Rune>.Concat(_2798_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2798_s);
                  resultingOwnership = _2796_recOwned;
                  readIdents = _2797_recIdents;
                }
              } else if (_source98.is_Multiset) {
                DAST._IType _2799___mcc_h595 = _source98.dtor_element;
                {
                  RAST._IExpr _2800_recursiveGen;
                  DCOMP._IOwnership _2801_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2802_recIdents;
                  RAST._IExpr _out419;
                  DCOMP._IOwnership _out420;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out421;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out419, out _out420, out _out421);
                  _2800_recursiveGen = _out419;
                  _2801_recOwned = _out420;
                  _2802_recIdents = _out421;
                  Dafny.ISequence<Dafny.Rune> _2803_s;
                  _2803_s = (_2800_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (object.Equals(_2801_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                    _2803_s = Dafny.Sequence<Dafny.Rune>.Concat(_2803_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2803_s = Dafny.Sequence<Dafny.Rune>.Concat(_2803_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2803_s);
                  resultingOwnership = _2801_recOwned;
                  readIdents = _2802_recIdents;
                }
              } else if (_source98.is_Map) {
                DAST._IType _2804___mcc_h598 = _source98.dtor_key;
                DAST._IType _2805___mcc_h599 = _source98.dtor_value;
                {
                  RAST._IExpr _2806_recursiveGen;
                  DCOMP._IOwnership _2807_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2808_recIdents;
                  RAST._IExpr _out422;
                  DCOMP._IOwnership _out423;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out424;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out422, out _out423, out _out424);
                  _2806_recursiveGen = _out422;
                  _2807_recOwned = _out423;
                  _2808_recIdents = _out424;
                  Dafny.ISequence<Dafny.Rune> _2809_s;
                  _2809_s = (_2806_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (object.Equals(_2807_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                    _2809_s = Dafny.Sequence<Dafny.Rune>.Concat(_2809_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2809_s = Dafny.Sequence<Dafny.Rune>.Concat(_2809_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2809_s);
                  resultingOwnership = _2807_recOwned;
                  readIdents = _2808_recIdents;
                }
              } else if (_source98.is_SetBuilder) {
                DAST._IType _2810___mcc_h604 = _source98.dtor_element;
                {
                  RAST._IExpr _2811_recursiveGen;
                  DCOMP._IOwnership _2812_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2813_recIdents;
                  RAST._IExpr _out425;
                  DCOMP._IOwnership _out426;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out427;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out425, out _out426, out _out427);
                  _2811_recursiveGen = _out425;
                  _2812_recOwned = _out426;
                  _2813_recIdents = _out427;
                  Dafny.ISequence<Dafny.Rune> _2814_s;
                  _2814_s = (_2811_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (object.Equals(_2812_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                    _2814_s = Dafny.Sequence<Dafny.Rune>.Concat(_2814_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2814_s = Dafny.Sequence<Dafny.Rune>.Concat(_2814_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2814_s);
                  resultingOwnership = _2812_recOwned;
                  readIdents = _2813_recIdents;
                }
              } else if (_source98.is_MapBuilder) {
                DAST._IType _2815___mcc_h607 = _source98.dtor_key;
                DAST._IType _2816___mcc_h608 = _source98.dtor_value;
                {
                  RAST._IExpr _2817_recursiveGen;
                  DCOMP._IOwnership _2818_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2819_recIdents;
                  RAST._IExpr _out428;
                  DCOMP._IOwnership _out429;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out430;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out428, out _out429, out _out430);
                  _2817_recursiveGen = _out428;
                  _2818_recOwned = _out429;
                  _2819_recIdents = _out430;
                  Dafny.ISequence<Dafny.Rune> _2820_s;
                  _2820_s = (_2817_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (object.Equals(_2818_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                    _2820_s = Dafny.Sequence<Dafny.Rune>.Concat(_2820_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2820_s = Dafny.Sequence<Dafny.Rune>.Concat(_2820_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2820_s);
                  resultingOwnership = _2818_recOwned;
                  readIdents = _2819_recIdents;
                }
              } else if (_source98.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2821___mcc_h613 = _source98.dtor_args;
                DAST._IType _2822___mcc_h614 = _source98.dtor_result;
                {
                  RAST._IExpr _2823_recursiveGen;
                  DCOMP._IOwnership _2824_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2825_recIdents;
                  RAST._IExpr _out431;
                  DCOMP._IOwnership _out432;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out433;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out431, out _out432, out _out433);
                  _2823_recursiveGen = _out431;
                  _2824_recOwned = _out432;
                  _2825_recIdents = _out433;
                  Dafny.ISequence<Dafny.Rune> _2826_s;
                  _2826_s = (_2823_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (object.Equals(_2824_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                    _2826_s = Dafny.Sequence<Dafny.Rune>.Concat(_2826_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2826_s = Dafny.Sequence<Dafny.Rune>.Concat(_2826_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2826_s);
                  resultingOwnership = _2824_recOwned;
                  readIdents = _2825_recIdents;
                }
              } else if (_source98.is_Primitive) {
                DAST._IPrimitive _2827___mcc_h619 = _source98.dtor_Primitive_a0;
                {
                  RAST._IExpr _2828_recursiveGen;
                  DCOMP._IOwnership _2829_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2830_recIdents;
                  RAST._IExpr _out434;
                  DCOMP._IOwnership _out435;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out436;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out434, out _out435, out _out436);
                  _2828_recursiveGen = _out434;
                  _2829_recOwned = _out435;
                  _2830_recIdents = _out436;
                  Dafny.ISequence<Dafny.Rune> _2831_s;
                  _2831_s = (_2828_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (object.Equals(_2829_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                    _2831_s = Dafny.Sequence<Dafny.Rune>.Concat(_2831_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2831_s = Dafny.Sequence<Dafny.Rune>.Concat(_2831_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2831_s);
                  resultingOwnership = _2829_recOwned;
                  readIdents = _2830_recIdents;
                }
              } else if (_source98.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2832___mcc_h622 = _source98.dtor_Passthrough_a0;
                {
                  RAST._IExpr _2833_recursiveGen;
                  DCOMP._IOwnership _2834_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2835_recIdents;
                  RAST._IExpr _out437;
                  DCOMP._IOwnership _out438;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out439;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out437, out _out438, out _out439);
                  _2833_recursiveGen = _out437;
                  _2834_recOwned = _out438;
                  _2835_recIdents = _out439;
                  Dafny.ISequence<Dafny.Rune> _2836_s;
                  _2836_s = (_2833_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (object.Equals(_2834_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                    _2836_s = Dafny.Sequence<Dafny.Rune>.Concat(_2836_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2836_s = Dafny.Sequence<Dafny.Rune>.Concat(_2836_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2836_s);
                  resultingOwnership = _2834_recOwned;
                  readIdents = _2835_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2837___mcc_h625 = _source98.dtor_TypeArg_a0;
                {
                  RAST._IExpr _2838_recursiveGen;
                  DCOMP._IOwnership _2839_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2840_recIdents;
                  RAST._IExpr _out440;
                  DCOMP._IOwnership _out441;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out442;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out440, out _out441, out _out442);
                  _2838_recursiveGen = _out440;
                  _2839_recOwned = _out441;
                  _2840_recIdents = _out442;
                  Dafny.ISequence<Dafny.Rune> _2841_s;
                  _2841_s = (_2838_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (object.Equals(_2839_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                    _2841_s = Dafny.Sequence<Dafny.Rune>.Concat(_2841_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2841_s = Dafny.Sequence<Dafny.Rune>.Concat(_2841_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2841_s);
                  resultingOwnership = _2839_recOwned;
                  readIdents = _2840_recIdents;
                }
              }
            } else if (_source87.is_Tuple) {
              Dafny.ISequence<DAST._IType> _2842___mcc_h628 = _source87.dtor_Tuple_a0;
              DAST._IType _source100 = _2458___mcc_h339;
              if (_source100.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2843___mcc_h632 = _source100.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2844___mcc_h633 = _source100.dtor_typeArgs;
                DAST._IResolvedType _2845___mcc_h634 = _source100.dtor_resolved;
                DAST._IResolvedType _source101 = _2845___mcc_h634;
                if (_source101.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2846___mcc_h638 = _source101.dtor_path;
                  {
                    RAST._IExpr _2847_recursiveGen;
                    DCOMP._IOwnership _2848_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2849_recIdents;
                    RAST._IExpr _out443;
                    DCOMP._IOwnership _out444;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out445;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out443, out _out444, out _out445);
                    _2847_recursiveGen = _out443;
                    _2848_recOwned = _out444;
                    _2849_recIdents = _out445;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2847_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _2848_recOwned;
                    readIdents = _2849_recIdents;
                  }
                } else if (_source101.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2850___mcc_h640 = _source101.dtor_path;
                  {
                    RAST._IExpr _2851_recursiveGen;
                    DCOMP._IOwnership _2852_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2853_recIdents;
                    RAST._IExpr _out446;
                    DCOMP._IOwnership _out447;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out448;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out446, out _out447, out _out448);
                    _2851_recursiveGen = _out446;
                    _2852_recOwned = _out447;
                    _2853_recIdents = _out448;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2851_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _2852_recOwned;
                    readIdents = _2853_recIdents;
                  }
                } else {
                  DAST._IType _2854___mcc_h642 = _source101.dtor_baseType;
                  DAST._INewtypeRange _2855___mcc_h643 = _source101.dtor_range;
                  bool _2856___mcc_h644 = _source101.dtor_erase;
                  bool _2857_erase = _2856___mcc_h644;
                  DAST._INewtypeRange _2858_range = _2855___mcc_h643;
                  DAST._IType _2859_b = _2854___mcc_h642;
                  {
                    if (object.Equals(_2452_fromTpe, _2859_b)) {
                      RAST._IExpr _2860_recursiveGen;
                      DCOMP._IOwnership _2861_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2862_recIdents;
                      RAST._IExpr _out449;
                      DCOMP._IOwnership _out450;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out451;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out449, out _out450, out _out451);
                      _2860_recursiveGen = _out449;
                      _2861_recOwned = _out450;
                      _2862_recIdents = _out451;
                      Std.Wrappers._IOption<RAST._IType> _2863_potentialRhsType;
                      _2863_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_2859_b, _2858_range);
                      Std.Wrappers._IOption<RAST._IType> _source102 = _2863_potentialRhsType;
                      if (_source102.is_None) {
                        if (_2857_erase) {
                          r = _2860_recursiveGen;
                        } else {
                          RAST._IType _2864_rhsType;
                          RAST._IType _out452;
                          _out452 = DCOMP.COMP.GenType(_2451_toTpe, true, false);
                          _2864_rhsType = _out452;
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_2864_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_2860_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                        }
                        resultingOwnership = _2861_recOwned;
                      } else {
                        RAST._IType _2865___mcc_h1495 = _source102.dtor_value;
                        RAST._IType _2866_v = _2865___mcc_h1495;
                        r = RAST.Expr.create_ConversionNum(_2866_v, _2860_recursiveGen);
                        resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                      }
                      readIdents = _2862_recIdents;
                    } else {
                      RAST._IExpr _out453;
                      DCOMP._IOwnership _out454;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out455;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2453_expr, _2452_fromTpe, _2859_b), _2859_b, _2451_toTpe), selfIdent, @params, expectedOwnership, out _out453, out _out454, out _out455);
                      r = _out453;
                      resultingOwnership = _out454;
                      readIdents = _out455;
                    }
                  }
                }
              } else if (_source100.is_Nullable) {
                DAST._IType _2867___mcc_h648 = _source100.dtor_Nullable_a0;
                {
                  RAST._IExpr _2868_recursiveGen;
                  DCOMP._IOwnership _2869_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2870_recIdents;
                  RAST._IExpr _out456;
                  DCOMP._IOwnership _out457;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out458;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out456, out _out457, out _out458);
                  _2868_recursiveGen = _out456;
                  _2869_recOwned = _out457;
                  _2870_recIdents = _out458;
                  Dafny.ISequence<Dafny.Rune> _2871_s;
                  _2871_s = (_2868_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (object.Equals(_2869_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                    _2871_s = Dafny.Sequence<Dafny.Rune>.Concat(_2871_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  _2871_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2871_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  r = RAST.Expr.create_RawExpr(_2871_s);
                  resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                  readIdents = _2870_recIdents;
                }
              } else if (_source100.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2872___mcc_h650 = _source100.dtor_Tuple_a0;
                {
                  RAST._IExpr _2873_recursiveGen;
                  DCOMP._IOwnership _2874_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2875_recIdents;
                  RAST._IExpr _out459;
                  DCOMP._IOwnership _out460;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out461;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out459, out _out460, out _out461);
                  _2873_recursiveGen = _out459;
                  _2874_recOwned = _out460;
                  _2875_recIdents = _out461;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2873_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _2874_recOwned;
                  readIdents = _2875_recIdents;
                }
              } else if (_source100.is_Array) {
                DAST._IType _2876___mcc_h652 = _source100.dtor_element;
                BigInteger _2877___mcc_h653 = _source100.dtor_dims;
                {
                  RAST._IExpr _2878_recursiveGen;
                  DCOMP._IOwnership _2879_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2880_recIdents;
                  RAST._IExpr _out462;
                  DCOMP._IOwnership _out463;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out464;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out462, out _out463, out _out464);
                  _2878_recursiveGen = _out462;
                  _2879_recOwned = _out463;
                  _2880_recIdents = _out464;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2878_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _2879_recOwned;
                  readIdents = _2880_recIdents;
                }
              } else if (_source100.is_Seq) {
                DAST._IType _2881___mcc_h656 = _source100.dtor_element;
                {
                  RAST._IExpr _2882_recursiveGen;
                  DCOMP._IOwnership _2883_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2884_recIdents;
                  RAST._IExpr _out465;
                  DCOMP._IOwnership _out466;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out467;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out465, out _out466, out _out467);
                  _2882_recursiveGen = _out465;
                  _2883_recOwned = _out466;
                  _2884_recIdents = _out467;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2882_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _2883_recOwned;
                  readIdents = _2884_recIdents;
                }
              } else if (_source100.is_Set) {
                DAST._IType _2885___mcc_h658 = _source100.dtor_element;
                {
                  RAST._IExpr _2886_recursiveGen;
                  DCOMP._IOwnership _2887_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2888_recIdents;
                  RAST._IExpr _out468;
                  DCOMP._IOwnership _out469;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out470;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out468, out _out469, out _out470);
                  _2886_recursiveGen = _out468;
                  _2887_recOwned = _out469;
                  _2888_recIdents = _out470;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2886_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _2887_recOwned;
                  readIdents = _2888_recIdents;
                }
              } else if (_source100.is_Multiset) {
                DAST._IType _2889___mcc_h660 = _source100.dtor_element;
                {
                  RAST._IExpr _2890_recursiveGen;
                  DCOMP._IOwnership _2891_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2892_recIdents;
                  RAST._IExpr _out471;
                  DCOMP._IOwnership _out472;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out473;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out471, out _out472, out _out473);
                  _2890_recursiveGen = _out471;
                  _2891_recOwned = _out472;
                  _2892_recIdents = _out473;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2890_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _2891_recOwned;
                  readIdents = _2892_recIdents;
                }
              } else if (_source100.is_Map) {
                DAST._IType _2893___mcc_h662 = _source100.dtor_key;
                DAST._IType _2894___mcc_h663 = _source100.dtor_value;
                {
                  RAST._IExpr _2895_recursiveGen;
                  DCOMP._IOwnership _2896_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2897_recIdents;
                  RAST._IExpr _out474;
                  DCOMP._IOwnership _out475;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out476;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out474, out _out475, out _out476);
                  _2895_recursiveGen = _out474;
                  _2896_recOwned = _out475;
                  _2897_recIdents = _out476;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2895_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _2896_recOwned;
                  readIdents = _2897_recIdents;
                }
              } else if (_source100.is_SetBuilder) {
                DAST._IType _2898___mcc_h666 = _source100.dtor_element;
                {
                  RAST._IExpr _2899_recursiveGen;
                  DCOMP._IOwnership _2900_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2901_recIdents;
                  RAST._IExpr _out477;
                  DCOMP._IOwnership _out478;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out479;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out477, out _out478, out _out479);
                  _2899_recursiveGen = _out477;
                  _2900_recOwned = _out478;
                  _2901_recIdents = _out479;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2899_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _2900_recOwned;
                  readIdents = _2901_recIdents;
                }
              } else if (_source100.is_MapBuilder) {
                DAST._IType _2902___mcc_h668 = _source100.dtor_key;
                DAST._IType _2903___mcc_h669 = _source100.dtor_value;
                {
                  RAST._IExpr _2904_recursiveGen;
                  DCOMP._IOwnership _2905_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2906_recIdents;
                  RAST._IExpr _out480;
                  DCOMP._IOwnership _out481;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out482;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out480, out _out481, out _out482);
                  _2904_recursiveGen = _out480;
                  _2905_recOwned = _out481;
                  _2906_recIdents = _out482;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2904_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _2905_recOwned;
                  readIdents = _2906_recIdents;
                }
              } else if (_source100.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2907___mcc_h672 = _source100.dtor_args;
                DAST._IType _2908___mcc_h673 = _source100.dtor_result;
                {
                  RAST._IExpr _2909_recursiveGen;
                  DCOMP._IOwnership _2910_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2911_recIdents;
                  RAST._IExpr _out483;
                  DCOMP._IOwnership _out484;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out485;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out483, out _out484, out _out485);
                  _2909_recursiveGen = _out483;
                  _2910_recOwned = _out484;
                  _2911_recIdents = _out485;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2909_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _2910_recOwned;
                  readIdents = _2911_recIdents;
                }
              } else if (_source100.is_Primitive) {
                DAST._IPrimitive _2912___mcc_h676 = _source100.dtor_Primitive_a0;
                {
                  RAST._IExpr _2913_recursiveGen;
                  DCOMP._IOwnership _2914_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2915_recIdents;
                  RAST._IExpr _out486;
                  DCOMP._IOwnership _out487;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out488;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out486, out _out487, out _out488);
                  _2913_recursiveGen = _out486;
                  _2914_recOwned = _out487;
                  _2915_recIdents = _out488;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2913_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _2914_recOwned;
                  readIdents = _2915_recIdents;
                }
              } else if (_source100.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2916___mcc_h678 = _source100.dtor_Passthrough_a0;
                {
                  RAST._IExpr _2917_recursiveGen;
                  DCOMP._IOwnership _2918_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2919_recIdents;
                  RAST._IExpr _out489;
                  DCOMP._IOwnership _out490;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out491;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out489, out _out490, out _out491);
                  _2917_recursiveGen = _out489;
                  _2918_recOwned = _out490;
                  _2919_recIdents = _out491;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2917_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _2918_recOwned;
                  readIdents = _2919_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2920___mcc_h680 = _source100.dtor_TypeArg_a0;
                {
                  RAST._IExpr _2921_recursiveGen;
                  DCOMP._IOwnership _2922_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2923_recIdents;
                  RAST._IExpr _out492;
                  DCOMP._IOwnership _out493;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out494;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out492, out _out493, out _out494);
                  _2921_recursiveGen = _out492;
                  _2922_recOwned = _out493;
                  _2923_recIdents = _out494;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2921_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _2922_recOwned;
                  readIdents = _2923_recIdents;
                }
              }
            } else if (_source87.is_Array) {
              DAST._IType _2924___mcc_h682 = _source87.dtor_element;
              BigInteger _2925___mcc_h683 = _source87.dtor_dims;
              DAST._IType _source103 = _2458___mcc_h339;
              if (_source103.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2926___mcc_h690 = _source103.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2927___mcc_h691 = _source103.dtor_typeArgs;
                DAST._IResolvedType _2928___mcc_h692 = _source103.dtor_resolved;
                DAST._IResolvedType _source104 = _2928___mcc_h692;
                if (_source104.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2929___mcc_h696 = _source104.dtor_path;
                  {
                    RAST._IExpr _2930_recursiveGen;
                    DCOMP._IOwnership _2931_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2932_recIdents;
                    RAST._IExpr _out495;
                    DCOMP._IOwnership _out496;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out497;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out495, out _out496, out _out497);
                    _2930_recursiveGen = _out495;
                    _2931_recOwned = _out496;
                    _2932_recIdents = _out497;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2930_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _2931_recOwned;
                    readIdents = _2932_recIdents;
                  }
                } else if (_source104.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2933___mcc_h698 = _source104.dtor_path;
                  {
                    RAST._IExpr _2934_recursiveGen;
                    DCOMP._IOwnership _2935_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2936_recIdents;
                    RAST._IExpr _out498;
                    DCOMP._IOwnership _out499;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out500;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out498, out _out499, out _out500);
                    _2934_recursiveGen = _out498;
                    _2935_recOwned = _out499;
                    _2936_recIdents = _out500;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2934_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _2935_recOwned;
                    readIdents = _2936_recIdents;
                  }
                } else {
                  DAST._IType _2937___mcc_h700 = _source104.dtor_baseType;
                  DAST._INewtypeRange _2938___mcc_h701 = _source104.dtor_range;
                  bool _2939___mcc_h702 = _source104.dtor_erase;
                  bool _2940_erase = _2939___mcc_h702;
                  DAST._INewtypeRange _2941_range = _2938___mcc_h701;
                  DAST._IType _2942_b = _2937___mcc_h700;
                  {
                    if (object.Equals(_2452_fromTpe, _2942_b)) {
                      RAST._IExpr _2943_recursiveGen;
                      DCOMP._IOwnership _2944_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2945_recIdents;
                      RAST._IExpr _out501;
                      DCOMP._IOwnership _out502;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out503;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out501, out _out502, out _out503);
                      _2943_recursiveGen = _out501;
                      _2944_recOwned = _out502;
                      _2945_recIdents = _out503;
                      Std.Wrappers._IOption<RAST._IType> _2946_potentialRhsType;
                      _2946_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_2942_b, _2941_range);
                      Std.Wrappers._IOption<RAST._IType> _source105 = _2946_potentialRhsType;
                      if (_source105.is_None) {
                        if (_2940_erase) {
                          r = _2943_recursiveGen;
                        } else {
                          RAST._IType _2947_rhsType;
                          RAST._IType _out504;
                          _out504 = DCOMP.COMP.GenType(_2451_toTpe, true, false);
                          _2947_rhsType = _out504;
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_2947_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_2943_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                        }
                        resultingOwnership = _2944_recOwned;
                      } else {
                        RAST._IType _2948___mcc_h1496 = _source105.dtor_value;
                        RAST._IType _2949_v = _2948___mcc_h1496;
                        r = RAST.Expr.create_ConversionNum(_2949_v, _2943_recursiveGen);
                        resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                      }
                      readIdents = _2945_recIdents;
                    } else {
                      RAST._IExpr _out505;
                      DCOMP._IOwnership _out506;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out507;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2453_expr, _2452_fromTpe, _2942_b), _2942_b, _2451_toTpe), selfIdent, @params, expectedOwnership, out _out505, out _out506, out _out507);
                      r = _out505;
                      resultingOwnership = _out506;
                      readIdents = _out507;
                    }
                  }
                }
              } else if (_source103.is_Nullable) {
                DAST._IType _2950___mcc_h706 = _source103.dtor_Nullable_a0;
                {
                  RAST._IExpr _2951_recursiveGen;
                  DCOMP._IOwnership _2952_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2953_recIdents;
                  RAST._IExpr _out508;
                  DCOMP._IOwnership _out509;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out510;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out508, out _out509, out _out510);
                  _2951_recursiveGen = _out508;
                  _2952_recOwned = _out509;
                  _2953_recIdents = _out510;
                  Dafny.ISequence<Dafny.Rune> _2954_s;
                  _2954_s = (_2951_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (object.Equals(_2952_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                    _2954_s = Dafny.Sequence<Dafny.Rune>.Concat(_2954_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  _2954_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2954_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  r = RAST.Expr.create_RawExpr(_2954_s);
                  resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                  readIdents = _2953_recIdents;
                }
              } else if (_source103.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2955___mcc_h708 = _source103.dtor_Tuple_a0;
                {
                  RAST._IExpr _2956_recursiveGen;
                  DCOMP._IOwnership _2957_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2958_recIdents;
                  RAST._IExpr _out511;
                  DCOMP._IOwnership _out512;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out513;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out511, out _out512, out _out513);
                  _2956_recursiveGen = _out511;
                  _2957_recOwned = _out512;
                  _2958_recIdents = _out513;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2956_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _2957_recOwned;
                  readIdents = _2958_recIdents;
                }
              } else if (_source103.is_Array) {
                DAST._IType _2959___mcc_h710 = _source103.dtor_element;
                BigInteger _2960___mcc_h711 = _source103.dtor_dims;
                {
                  RAST._IExpr _2961_recursiveGen;
                  DCOMP._IOwnership _2962_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2963_recIdents;
                  RAST._IExpr _out514;
                  DCOMP._IOwnership _out515;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out516;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out514, out _out515, out _out516);
                  _2961_recursiveGen = _out514;
                  _2962_recOwned = _out515;
                  _2963_recIdents = _out516;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2961_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _2962_recOwned;
                  readIdents = _2963_recIdents;
                }
              } else if (_source103.is_Seq) {
                DAST._IType _2964___mcc_h714 = _source103.dtor_element;
                {
                  RAST._IExpr _2965_recursiveGen;
                  DCOMP._IOwnership _2966_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2967_recIdents;
                  RAST._IExpr _out517;
                  DCOMP._IOwnership _out518;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out519;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out517, out _out518, out _out519);
                  _2965_recursiveGen = _out517;
                  _2966_recOwned = _out518;
                  _2967_recIdents = _out519;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2965_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _2966_recOwned;
                  readIdents = _2967_recIdents;
                }
              } else if (_source103.is_Set) {
                DAST._IType _2968___mcc_h716 = _source103.dtor_element;
                {
                  RAST._IExpr _2969_recursiveGen;
                  DCOMP._IOwnership _2970_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2971_recIdents;
                  RAST._IExpr _out520;
                  DCOMP._IOwnership _out521;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out522;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out520, out _out521, out _out522);
                  _2969_recursiveGen = _out520;
                  _2970_recOwned = _out521;
                  _2971_recIdents = _out522;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2969_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _2970_recOwned;
                  readIdents = _2971_recIdents;
                }
              } else if (_source103.is_Multiset) {
                DAST._IType _2972___mcc_h718 = _source103.dtor_element;
                {
                  RAST._IExpr _2973_recursiveGen;
                  DCOMP._IOwnership _2974_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2975_recIdents;
                  RAST._IExpr _out523;
                  DCOMP._IOwnership _out524;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out525;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out523, out _out524, out _out525);
                  _2973_recursiveGen = _out523;
                  _2974_recOwned = _out524;
                  _2975_recIdents = _out525;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2973_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _2974_recOwned;
                  readIdents = _2975_recIdents;
                }
              } else if (_source103.is_Map) {
                DAST._IType _2976___mcc_h720 = _source103.dtor_key;
                DAST._IType _2977___mcc_h721 = _source103.dtor_value;
                {
                  RAST._IExpr _2978_recursiveGen;
                  DCOMP._IOwnership _2979_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2980_recIdents;
                  RAST._IExpr _out526;
                  DCOMP._IOwnership _out527;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out528;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out526, out _out527, out _out528);
                  _2978_recursiveGen = _out526;
                  _2979_recOwned = _out527;
                  _2980_recIdents = _out528;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2978_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _2979_recOwned;
                  readIdents = _2980_recIdents;
                }
              } else if (_source103.is_SetBuilder) {
                DAST._IType _2981___mcc_h724 = _source103.dtor_element;
                {
                  RAST._IExpr _2982_recursiveGen;
                  DCOMP._IOwnership _2983_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2984_recIdents;
                  RAST._IExpr _out529;
                  DCOMP._IOwnership _out530;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out531;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out529, out _out530, out _out531);
                  _2982_recursiveGen = _out529;
                  _2983_recOwned = _out530;
                  _2984_recIdents = _out531;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2982_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _2983_recOwned;
                  readIdents = _2984_recIdents;
                }
              } else if (_source103.is_MapBuilder) {
                DAST._IType _2985___mcc_h726 = _source103.dtor_key;
                DAST._IType _2986___mcc_h727 = _source103.dtor_value;
                {
                  RAST._IExpr _2987_recursiveGen;
                  DCOMP._IOwnership _2988_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2989_recIdents;
                  RAST._IExpr _out532;
                  DCOMP._IOwnership _out533;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out534;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out532, out _out533, out _out534);
                  _2987_recursiveGen = _out532;
                  _2988_recOwned = _out533;
                  _2989_recIdents = _out534;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2987_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _2988_recOwned;
                  readIdents = _2989_recIdents;
                }
              } else if (_source103.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2990___mcc_h730 = _source103.dtor_args;
                DAST._IType _2991___mcc_h731 = _source103.dtor_result;
                {
                  RAST._IExpr _2992_recursiveGen;
                  DCOMP._IOwnership _2993_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2994_recIdents;
                  RAST._IExpr _out535;
                  DCOMP._IOwnership _out536;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out537;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out535, out _out536, out _out537);
                  _2992_recursiveGen = _out535;
                  _2993_recOwned = _out536;
                  _2994_recIdents = _out537;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2992_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _2993_recOwned;
                  readIdents = _2994_recIdents;
                }
              } else if (_source103.is_Primitive) {
                DAST._IPrimitive _2995___mcc_h734 = _source103.dtor_Primitive_a0;
                {
                  RAST._IExpr _2996_recursiveGen;
                  DCOMP._IOwnership _2997_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2998_recIdents;
                  RAST._IExpr _out538;
                  DCOMP._IOwnership _out539;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out540;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out538, out _out539, out _out540);
                  _2996_recursiveGen = _out538;
                  _2997_recOwned = _out539;
                  _2998_recIdents = _out540;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2996_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _2997_recOwned;
                  readIdents = _2998_recIdents;
                }
              } else if (_source103.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2999___mcc_h736 = _source103.dtor_Passthrough_a0;
                {
                  RAST._IExpr _3000_recursiveGen;
                  DCOMP._IOwnership _3001_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3002_recIdents;
                  RAST._IExpr _out541;
                  DCOMP._IOwnership _out542;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out543;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out541, out _out542, out _out543);
                  _3000_recursiveGen = _out541;
                  _3001_recOwned = _out542;
                  _3002_recIdents = _out543;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3000_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3001_recOwned;
                  readIdents = _3002_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3003___mcc_h738 = _source103.dtor_TypeArg_a0;
                {
                  RAST._IExpr _3004_recursiveGen;
                  DCOMP._IOwnership _3005_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3006_recIdents;
                  RAST._IExpr _out544;
                  DCOMP._IOwnership _out545;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out546;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out544, out _out545, out _out546);
                  _3004_recursiveGen = _out544;
                  _3005_recOwned = _out545;
                  _3006_recIdents = _out546;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3004_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3005_recOwned;
                  readIdents = _3006_recIdents;
                }
              }
            } else if (_source87.is_Seq) {
              DAST._IType _3007___mcc_h740 = _source87.dtor_element;
              DAST._IType _source106 = _2458___mcc_h339;
              if (_source106.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3008___mcc_h744 = _source106.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _3009___mcc_h745 = _source106.dtor_typeArgs;
                DAST._IResolvedType _3010___mcc_h746 = _source106.dtor_resolved;
                DAST._IResolvedType _source107 = _3010___mcc_h746;
                if (_source107.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3011___mcc_h750 = _source107.dtor_path;
                  {
                    RAST._IExpr _3012_recursiveGen;
                    DCOMP._IOwnership _3013_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3014_recIdents;
                    RAST._IExpr _out547;
                    DCOMP._IOwnership _out548;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out549;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out547, out _out548, out _out549);
                    _3012_recursiveGen = _out547;
                    _3013_recOwned = _out548;
                    _3014_recIdents = _out549;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3012_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3013_recOwned;
                    readIdents = _3014_recIdents;
                  }
                } else if (_source107.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3015___mcc_h752 = _source107.dtor_path;
                  {
                    RAST._IExpr _3016_recursiveGen;
                    DCOMP._IOwnership _3017_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3018_recIdents;
                    RAST._IExpr _out550;
                    DCOMP._IOwnership _out551;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out552;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out550, out _out551, out _out552);
                    _3016_recursiveGen = _out550;
                    _3017_recOwned = _out551;
                    _3018_recIdents = _out552;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3016_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3017_recOwned;
                    readIdents = _3018_recIdents;
                  }
                } else {
                  DAST._IType _3019___mcc_h754 = _source107.dtor_baseType;
                  DAST._INewtypeRange _3020___mcc_h755 = _source107.dtor_range;
                  bool _3021___mcc_h756 = _source107.dtor_erase;
                  bool _3022_erase = _3021___mcc_h756;
                  DAST._INewtypeRange _3023_range = _3020___mcc_h755;
                  DAST._IType _3024_b = _3019___mcc_h754;
                  {
                    if (object.Equals(_2452_fromTpe, _3024_b)) {
                      RAST._IExpr _3025_recursiveGen;
                      DCOMP._IOwnership _3026_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3027_recIdents;
                      RAST._IExpr _out553;
                      DCOMP._IOwnership _out554;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out555;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out553, out _out554, out _out555);
                      _3025_recursiveGen = _out553;
                      _3026_recOwned = _out554;
                      _3027_recIdents = _out555;
                      Std.Wrappers._IOption<RAST._IType> _3028_potentialRhsType;
                      _3028_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3024_b, _3023_range);
                      Std.Wrappers._IOption<RAST._IType> _source108 = _3028_potentialRhsType;
                      if (_source108.is_None) {
                        if (_3022_erase) {
                          r = _3025_recursiveGen;
                        } else {
                          RAST._IType _3029_rhsType;
                          RAST._IType _out556;
                          _out556 = DCOMP.COMP.GenType(_2451_toTpe, true, false);
                          _3029_rhsType = _out556;
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3029_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3025_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                        }
                        resultingOwnership = _3026_recOwned;
                      } else {
                        RAST._IType _3030___mcc_h1497 = _source108.dtor_value;
                        RAST._IType _3031_v = _3030___mcc_h1497;
                        r = RAST.Expr.create_ConversionNum(_3031_v, _3025_recursiveGen);
                        resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                      }
                      readIdents = _3027_recIdents;
                    } else {
                      RAST._IExpr _out557;
                      DCOMP._IOwnership _out558;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out559;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2453_expr, _2452_fromTpe, _3024_b), _3024_b, _2451_toTpe), selfIdent, @params, expectedOwnership, out _out557, out _out558, out _out559);
                      r = _out557;
                      resultingOwnership = _out558;
                      readIdents = _out559;
                    }
                  }
                }
              } else if (_source106.is_Nullable) {
                DAST._IType _3032___mcc_h760 = _source106.dtor_Nullable_a0;
                {
                  RAST._IExpr _3033_recursiveGen;
                  DCOMP._IOwnership _3034_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3035_recIdents;
                  RAST._IExpr _out560;
                  DCOMP._IOwnership _out561;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out562;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out560, out _out561, out _out562);
                  _3033_recursiveGen = _out560;
                  _3034_recOwned = _out561;
                  _3035_recIdents = _out562;
                  Dafny.ISequence<Dafny.Rune> _3036_s;
                  _3036_s = (_3033_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (object.Equals(_3034_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                    _3036_s = Dafny.Sequence<Dafny.Rune>.Concat(_3036_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  _3036_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3036_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  r = RAST.Expr.create_RawExpr(_3036_s);
                  resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                  readIdents = _3035_recIdents;
                }
              } else if (_source106.is_Tuple) {
                Dafny.ISequence<DAST._IType> _3037___mcc_h762 = _source106.dtor_Tuple_a0;
                {
                  RAST._IExpr _3038_recursiveGen;
                  DCOMP._IOwnership _3039_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3040_recIdents;
                  RAST._IExpr _out563;
                  DCOMP._IOwnership _out564;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out565;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out563, out _out564, out _out565);
                  _3038_recursiveGen = _out563;
                  _3039_recOwned = _out564;
                  _3040_recIdents = _out565;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3038_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3039_recOwned;
                  readIdents = _3040_recIdents;
                }
              } else if (_source106.is_Array) {
                DAST._IType _3041___mcc_h764 = _source106.dtor_element;
                BigInteger _3042___mcc_h765 = _source106.dtor_dims;
                {
                  RAST._IExpr _3043_recursiveGen;
                  DCOMP._IOwnership _3044_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3045_recIdents;
                  RAST._IExpr _out566;
                  DCOMP._IOwnership _out567;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out568;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out566, out _out567, out _out568);
                  _3043_recursiveGen = _out566;
                  _3044_recOwned = _out567;
                  _3045_recIdents = _out568;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3043_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3044_recOwned;
                  readIdents = _3045_recIdents;
                }
              } else if (_source106.is_Seq) {
                DAST._IType _3046___mcc_h768 = _source106.dtor_element;
                {
                  RAST._IExpr _3047_recursiveGen;
                  DCOMP._IOwnership _3048_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3049_recIdents;
                  RAST._IExpr _out569;
                  DCOMP._IOwnership _out570;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out571;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out569, out _out570, out _out571);
                  _3047_recursiveGen = _out569;
                  _3048_recOwned = _out570;
                  _3049_recIdents = _out571;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3047_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3048_recOwned;
                  readIdents = _3049_recIdents;
                }
              } else if (_source106.is_Set) {
                DAST._IType _3050___mcc_h770 = _source106.dtor_element;
                {
                  RAST._IExpr _3051_recursiveGen;
                  DCOMP._IOwnership _3052_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3053_recIdents;
                  RAST._IExpr _out572;
                  DCOMP._IOwnership _out573;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out574;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out572, out _out573, out _out574);
                  _3051_recursiveGen = _out572;
                  _3052_recOwned = _out573;
                  _3053_recIdents = _out574;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3051_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3052_recOwned;
                  readIdents = _3053_recIdents;
                }
              } else if (_source106.is_Multiset) {
                DAST._IType _3054___mcc_h772 = _source106.dtor_element;
                {
                  RAST._IExpr _3055_recursiveGen;
                  DCOMP._IOwnership _3056_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3057_recIdents;
                  RAST._IExpr _out575;
                  DCOMP._IOwnership _out576;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out577;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out575, out _out576, out _out577);
                  _3055_recursiveGen = _out575;
                  _3056_recOwned = _out576;
                  _3057_recIdents = _out577;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3055_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3056_recOwned;
                  readIdents = _3057_recIdents;
                }
              } else if (_source106.is_Map) {
                DAST._IType _3058___mcc_h774 = _source106.dtor_key;
                DAST._IType _3059___mcc_h775 = _source106.dtor_value;
                {
                  RAST._IExpr _3060_recursiveGen;
                  DCOMP._IOwnership _3061_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3062_recIdents;
                  RAST._IExpr _out578;
                  DCOMP._IOwnership _out579;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out580;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out578, out _out579, out _out580);
                  _3060_recursiveGen = _out578;
                  _3061_recOwned = _out579;
                  _3062_recIdents = _out580;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3060_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3061_recOwned;
                  readIdents = _3062_recIdents;
                }
              } else if (_source106.is_SetBuilder) {
                DAST._IType _3063___mcc_h778 = _source106.dtor_element;
                {
                  RAST._IExpr _3064_recursiveGen;
                  DCOMP._IOwnership _3065_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3066_recIdents;
                  RAST._IExpr _out581;
                  DCOMP._IOwnership _out582;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out583;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out581, out _out582, out _out583);
                  _3064_recursiveGen = _out581;
                  _3065_recOwned = _out582;
                  _3066_recIdents = _out583;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3064_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3065_recOwned;
                  readIdents = _3066_recIdents;
                }
              } else if (_source106.is_MapBuilder) {
                DAST._IType _3067___mcc_h780 = _source106.dtor_key;
                DAST._IType _3068___mcc_h781 = _source106.dtor_value;
                {
                  RAST._IExpr _3069_recursiveGen;
                  DCOMP._IOwnership _3070_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3071_recIdents;
                  RAST._IExpr _out584;
                  DCOMP._IOwnership _out585;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out586;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out584, out _out585, out _out586);
                  _3069_recursiveGen = _out584;
                  _3070_recOwned = _out585;
                  _3071_recIdents = _out586;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3069_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3070_recOwned;
                  readIdents = _3071_recIdents;
                }
              } else if (_source106.is_Arrow) {
                Dafny.ISequence<DAST._IType> _3072___mcc_h784 = _source106.dtor_args;
                DAST._IType _3073___mcc_h785 = _source106.dtor_result;
                {
                  RAST._IExpr _3074_recursiveGen;
                  DCOMP._IOwnership _3075_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3076_recIdents;
                  RAST._IExpr _out587;
                  DCOMP._IOwnership _out588;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out589;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out587, out _out588, out _out589);
                  _3074_recursiveGen = _out587;
                  _3075_recOwned = _out588;
                  _3076_recIdents = _out589;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3074_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3075_recOwned;
                  readIdents = _3076_recIdents;
                }
              } else if (_source106.is_Primitive) {
                DAST._IPrimitive _3077___mcc_h788 = _source106.dtor_Primitive_a0;
                {
                  RAST._IExpr _3078_recursiveGen;
                  DCOMP._IOwnership _3079_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3080_recIdents;
                  RAST._IExpr _out590;
                  DCOMP._IOwnership _out591;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out592;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out590, out _out591, out _out592);
                  _3078_recursiveGen = _out590;
                  _3079_recOwned = _out591;
                  _3080_recIdents = _out592;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3078_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3079_recOwned;
                  readIdents = _3080_recIdents;
                }
              } else if (_source106.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _3081___mcc_h790 = _source106.dtor_Passthrough_a0;
                {
                  RAST._IExpr _3082_recursiveGen;
                  DCOMP._IOwnership _3083_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3084_recIdents;
                  RAST._IExpr _out593;
                  DCOMP._IOwnership _out594;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out595;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out593, out _out594, out _out595);
                  _3082_recursiveGen = _out593;
                  _3083_recOwned = _out594;
                  _3084_recIdents = _out595;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3082_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3083_recOwned;
                  readIdents = _3084_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3085___mcc_h792 = _source106.dtor_TypeArg_a0;
                {
                  RAST._IExpr _3086_recursiveGen;
                  DCOMP._IOwnership _3087_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3088_recIdents;
                  RAST._IExpr _out596;
                  DCOMP._IOwnership _out597;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out598;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out596, out _out597, out _out598);
                  _3086_recursiveGen = _out596;
                  _3087_recOwned = _out597;
                  _3088_recIdents = _out598;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3086_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3087_recOwned;
                  readIdents = _3088_recIdents;
                }
              }
            } else if (_source87.is_Set) {
              DAST._IType _3089___mcc_h794 = _source87.dtor_element;
              DAST._IType _source109 = _2458___mcc_h339;
              if (_source109.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3090___mcc_h798 = _source109.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _3091___mcc_h799 = _source109.dtor_typeArgs;
                DAST._IResolvedType _3092___mcc_h800 = _source109.dtor_resolved;
                DAST._IResolvedType _source110 = _3092___mcc_h800;
                if (_source110.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3093___mcc_h804 = _source110.dtor_path;
                  {
                    RAST._IExpr _3094_recursiveGen;
                    DCOMP._IOwnership _3095_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3096_recIdents;
                    RAST._IExpr _out599;
                    DCOMP._IOwnership _out600;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out601;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out599, out _out600, out _out601);
                    _3094_recursiveGen = _out599;
                    _3095_recOwned = _out600;
                    _3096_recIdents = _out601;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3094_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3095_recOwned;
                    readIdents = _3096_recIdents;
                  }
                } else if (_source110.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3097___mcc_h806 = _source110.dtor_path;
                  {
                    RAST._IExpr _3098_recursiveGen;
                    DCOMP._IOwnership _3099_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3100_recIdents;
                    RAST._IExpr _out602;
                    DCOMP._IOwnership _out603;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out604;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out602, out _out603, out _out604);
                    _3098_recursiveGen = _out602;
                    _3099_recOwned = _out603;
                    _3100_recIdents = _out604;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3098_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3099_recOwned;
                    readIdents = _3100_recIdents;
                  }
                } else {
                  DAST._IType _3101___mcc_h808 = _source110.dtor_baseType;
                  DAST._INewtypeRange _3102___mcc_h809 = _source110.dtor_range;
                  bool _3103___mcc_h810 = _source110.dtor_erase;
                  bool _3104_erase = _3103___mcc_h810;
                  DAST._INewtypeRange _3105_range = _3102___mcc_h809;
                  DAST._IType _3106_b = _3101___mcc_h808;
                  {
                    if (object.Equals(_2452_fromTpe, _3106_b)) {
                      RAST._IExpr _3107_recursiveGen;
                      DCOMP._IOwnership _3108_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3109_recIdents;
                      RAST._IExpr _out605;
                      DCOMP._IOwnership _out606;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out607;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out605, out _out606, out _out607);
                      _3107_recursiveGen = _out605;
                      _3108_recOwned = _out606;
                      _3109_recIdents = _out607;
                      Std.Wrappers._IOption<RAST._IType> _3110_potentialRhsType;
                      _3110_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3106_b, _3105_range);
                      Std.Wrappers._IOption<RAST._IType> _source111 = _3110_potentialRhsType;
                      if (_source111.is_None) {
                        if (_3104_erase) {
                          r = _3107_recursiveGen;
                        } else {
                          RAST._IType _3111_rhsType;
                          RAST._IType _out608;
                          _out608 = DCOMP.COMP.GenType(_2451_toTpe, true, false);
                          _3111_rhsType = _out608;
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3111_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3107_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                        }
                        resultingOwnership = _3108_recOwned;
                      } else {
                        RAST._IType _3112___mcc_h1498 = _source111.dtor_value;
                        RAST._IType _3113_v = _3112___mcc_h1498;
                        r = RAST.Expr.create_ConversionNum(_3113_v, _3107_recursiveGen);
                        resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                      }
                      readIdents = _3109_recIdents;
                    } else {
                      RAST._IExpr _out609;
                      DCOMP._IOwnership _out610;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out611;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2453_expr, _2452_fromTpe, _3106_b), _3106_b, _2451_toTpe), selfIdent, @params, expectedOwnership, out _out609, out _out610, out _out611);
                      r = _out609;
                      resultingOwnership = _out610;
                      readIdents = _out611;
                    }
                  }
                }
              } else if (_source109.is_Nullable) {
                DAST._IType _3114___mcc_h814 = _source109.dtor_Nullable_a0;
                {
                  RAST._IExpr _3115_recursiveGen;
                  DCOMP._IOwnership _3116_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3117_recIdents;
                  RAST._IExpr _out612;
                  DCOMP._IOwnership _out613;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out614;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out612, out _out613, out _out614);
                  _3115_recursiveGen = _out612;
                  _3116_recOwned = _out613;
                  _3117_recIdents = _out614;
                  Dafny.ISequence<Dafny.Rune> _3118_s;
                  _3118_s = (_3115_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (object.Equals(_3116_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                    _3118_s = Dafny.Sequence<Dafny.Rune>.Concat(_3118_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  _3118_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3118_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  r = RAST.Expr.create_RawExpr(_3118_s);
                  resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                  readIdents = _3117_recIdents;
                }
              } else if (_source109.is_Tuple) {
                Dafny.ISequence<DAST._IType> _3119___mcc_h816 = _source109.dtor_Tuple_a0;
                {
                  RAST._IExpr _3120_recursiveGen;
                  DCOMP._IOwnership _3121_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3122_recIdents;
                  RAST._IExpr _out615;
                  DCOMP._IOwnership _out616;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out617;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out615, out _out616, out _out617);
                  _3120_recursiveGen = _out615;
                  _3121_recOwned = _out616;
                  _3122_recIdents = _out617;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3120_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3121_recOwned;
                  readIdents = _3122_recIdents;
                }
              } else if (_source109.is_Array) {
                DAST._IType _3123___mcc_h818 = _source109.dtor_element;
                BigInteger _3124___mcc_h819 = _source109.dtor_dims;
                {
                  RAST._IExpr _3125_recursiveGen;
                  DCOMP._IOwnership _3126_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3127_recIdents;
                  RAST._IExpr _out618;
                  DCOMP._IOwnership _out619;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out620;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out618, out _out619, out _out620);
                  _3125_recursiveGen = _out618;
                  _3126_recOwned = _out619;
                  _3127_recIdents = _out620;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3125_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3126_recOwned;
                  readIdents = _3127_recIdents;
                }
              } else if (_source109.is_Seq) {
                DAST._IType _3128___mcc_h822 = _source109.dtor_element;
                {
                  RAST._IExpr _3129_recursiveGen;
                  DCOMP._IOwnership _3130_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3131_recIdents;
                  RAST._IExpr _out621;
                  DCOMP._IOwnership _out622;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out623;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out621, out _out622, out _out623);
                  _3129_recursiveGen = _out621;
                  _3130_recOwned = _out622;
                  _3131_recIdents = _out623;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3129_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3130_recOwned;
                  readIdents = _3131_recIdents;
                }
              } else if (_source109.is_Set) {
                DAST._IType _3132___mcc_h824 = _source109.dtor_element;
                {
                  RAST._IExpr _3133_recursiveGen;
                  DCOMP._IOwnership _3134_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3135_recIdents;
                  RAST._IExpr _out624;
                  DCOMP._IOwnership _out625;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out626;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out624, out _out625, out _out626);
                  _3133_recursiveGen = _out624;
                  _3134_recOwned = _out625;
                  _3135_recIdents = _out626;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3133_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3134_recOwned;
                  readIdents = _3135_recIdents;
                }
              } else if (_source109.is_Multiset) {
                DAST._IType _3136___mcc_h826 = _source109.dtor_element;
                {
                  RAST._IExpr _3137_recursiveGen;
                  DCOMP._IOwnership _3138_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3139_recIdents;
                  RAST._IExpr _out627;
                  DCOMP._IOwnership _out628;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out629;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out627, out _out628, out _out629);
                  _3137_recursiveGen = _out627;
                  _3138_recOwned = _out628;
                  _3139_recIdents = _out629;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3137_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3138_recOwned;
                  readIdents = _3139_recIdents;
                }
              } else if (_source109.is_Map) {
                DAST._IType _3140___mcc_h828 = _source109.dtor_key;
                DAST._IType _3141___mcc_h829 = _source109.dtor_value;
                {
                  RAST._IExpr _3142_recursiveGen;
                  DCOMP._IOwnership _3143_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3144_recIdents;
                  RAST._IExpr _out630;
                  DCOMP._IOwnership _out631;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out632;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out630, out _out631, out _out632);
                  _3142_recursiveGen = _out630;
                  _3143_recOwned = _out631;
                  _3144_recIdents = _out632;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3142_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3143_recOwned;
                  readIdents = _3144_recIdents;
                }
              } else if (_source109.is_SetBuilder) {
                DAST._IType _3145___mcc_h832 = _source109.dtor_element;
                {
                  RAST._IExpr _3146_recursiveGen;
                  DCOMP._IOwnership _3147_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3148_recIdents;
                  RAST._IExpr _out633;
                  DCOMP._IOwnership _out634;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out635;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out633, out _out634, out _out635);
                  _3146_recursiveGen = _out633;
                  _3147_recOwned = _out634;
                  _3148_recIdents = _out635;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3146_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3147_recOwned;
                  readIdents = _3148_recIdents;
                }
              } else if (_source109.is_MapBuilder) {
                DAST._IType _3149___mcc_h834 = _source109.dtor_key;
                DAST._IType _3150___mcc_h835 = _source109.dtor_value;
                {
                  RAST._IExpr _3151_recursiveGen;
                  DCOMP._IOwnership _3152_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3153_recIdents;
                  RAST._IExpr _out636;
                  DCOMP._IOwnership _out637;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out638;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out636, out _out637, out _out638);
                  _3151_recursiveGen = _out636;
                  _3152_recOwned = _out637;
                  _3153_recIdents = _out638;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3151_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3152_recOwned;
                  readIdents = _3153_recIdents;
                }
              } else if (_source109.is_Arrow) {
                Dafny.ISequence<DAST._IType> _3154___mcc_h838 = _source109.dtor_args;
                DAST._IType _3155___mcc_h839 = _source109.dtor_result;
                {
                  RAST._IExpr _3156_recursiveGen;
                  DCOMP._IOwnership _3157_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3158_recIdents;
                  RAST._IExpr _out639;
                  DCOMP._IOwnership _out640;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out641;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out639, out _out640, out _out641);
                  _3156_recursiveGen = _out639;
                  _3157_recOwned = _out640;
                  _3158_recIdents = _out641;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3156_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3157_recOwned;
                  readIdents = _3158_recIdents;
                }
              } else if (_source109.is_Primitive) {
                DAST._IPrimitive _3159___mcc_h842 = _source109.dtor_Primitive_a0;
                {
                  RAST._IExpr _3160_recursiveGen;
                  DCOMP._IOwnership _3161_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3162_recIdents;
                  RAST._IExpr _out642;
                  DCOMP._IOwnership _out643;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out644;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out642, out _out643, out _out644);
                  _3160_recursiveGen = _out642;
                  _3161_recOwned = _out643;
                  _3162_recIdents = _out644;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3160_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3161_recOwned;
                  readIdents = _3162_recIdents;
                }
              } else if (_source109.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _3163___mcc_h844 = _source109.dtor_Passthrough_a0;
                {
                  RAST._IExpr _3164_recursiveGen;
                  DCOMP._IOwnership _3165_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3166_recIdents;
                  RAST._IExpr _out645;
                  DCOMP._IOwnership _out646;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out647;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out645, out _out646, out _out647);
                  _3164_recursiveGen = _out645;
                  _3165_recOwned = _out646;
                  _3166_recIdents = _out647;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3164_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3165_recOwned;
                  readIdents = _3166_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3167___mcc_h846 = _source109.dtor_TypeArg_a0;
                {
                  RAST._IExpr _3168_recursiveGen;
                  DCOMP._IOwnership _3169_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3170_recIdents;
                  RAST._IExpr _out648;
                  DCOMP._IOwnership _out649;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out650;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out648, out _out649, out _out650);
                  _3168_recursiveGen = _out648;
                  _3169_recOwned = _out649;
                  _3170_recIdents = _out650;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3168_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3169_recOwned;
                  readIdents = _3170_recIdents;
                }
              }
            } else if (_source87.is_Multiset) {
              DAST._IType _3171___mcc_h848 = _source87.dtor_element;
              DAST._IType _source112 = _2458___mcc_h339;
              if (_source112.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3172___mcc_h852 = _source112.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _3173___mcc_h853 = _source112.dtor_typeArgs;
                DAST._IResolvedType _3174___mcc_h854 = _source112.dtor_resolved;
                DAST._IResolvedType _source113 = _3174___mcc_h854;
                if (_source113.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3175___mcc_h858 = _source113.dtor_path;
                  {
                    RAST._IExpr _3176_recursiveGen;
                    DCOMP._IOwnership _3177_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3178_recIdents;
                    RAST._IExpr _out651;
                    DCOMP._IOwnership _out652;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out653;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out651, out _out652, out _out653);
                    _3176_recursiveGen = _out651;
                    _3177_recOwned = _out652;
                    _3178_recIdents = _out653;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3176_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3177_recOwned;
                    readIdents = _3178_recIdents;
                  }
                } else if (_source113.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3179___mcc_h860 = _source113.dtor_path;
                  {
                    RAST._IExpr _3180_recursiveGen;
                    DCOMP._IOwnership _3181_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3182_recIdents;
                    RAST._IExpr _out654;
                    DCOMP._IOwnership _out655;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out656;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out654, out _out655, out _out656);
                    _3180_recursiveGen = _out654;
                    _3181_recOwned = _out655;
                    _3182_recIdents = _out656;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3180_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3181_recOwned;
                    readIdents = _3182_recIdents;
                  }
                } else {
                  DAST._IType _3183___mcc_h862 = _source113.dtor_baseType;
                  DAST._INewtypeRange _3184___mcc_h863 = _source113.dtor_range;
                  bool _3185___mcc_h864 = _source113.dtor_erase;
                  bool _3186_erase = _3185___mcc_h864;
                  DAST._INewtypeRange _3187_range = _3184___mcc_h863;
                  DAST._IType _3188_b = _3183___mcc_h862;
                  {
                    if (object.Equals(_2452_fromTpe, _3188_b)) {
                      RAST._IExpr _3189_recursiveGen;
                      DCOMP._IOwnership _3190_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3191_recIdents;
                      RAST._IExpr _out657;
                      DCOMP._IOwnership _out658;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out659;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out657, out _out658, out _out659);
                      _3189_recursiveGen = _out657;
                      _3190_recOwned = _out658;
                      _3191_recIdents = _out659;
                      Std.Wrappers._IOption<RAST._IType> _3192_potentialRhsType;
                      _3192_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3188_b, _3187_range);
                      Std.Wrappers._IOption<RAST._IType> _source114 = _3192_potentialRhsType;
                      if (_source114.is_None) {
                        if (_3186_erase) {
                          r = _3189_recursiveGen;
                        } else {
                          RAST._IType _3193_rhsType;
                          RAST._IType _out660;
                          _out660 = DCOMP.COMP.GenType(_2451_toTpe, true, false);
                          _3193_rhsType = _out660;
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3193_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3189_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                        }
                        resultingOwnership = _3190_recOwned;
                      } else {
                        RAST._IType _3194___mcc_h1499 = _source114.dtor_value;
                        RAST._IType _3195_v = _3194___mcc_h1499;
                        r = RAST.Expr.create_ConversionNum(_3195_v, _3189_recursiveGen);
                        resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                      }
                      readIdents = _3191_recIdents;
                    } else {
                      RAST._IExpr _out661;
                      DCOMP._IOwnership _out662;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out663;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2453_expr, _2452_fromTpe, _3188_b), _3188_b, _2451_toTpe), selfIdent, @params, expectedOwnership, out _out661, out _out662, out _out663);
                      r = _out661;
                      resultingOwnership = _out662;
                      readIdents = _out663;
                    }
                  }
                }
              } else if (_source112.is_Nullable) {
                DAST._IType _3196___mcc_h868 = _source112.dtor_Nullable_a0;
                {
                  RAST._IExpr _3197_recursiveGen;
                  DCOMP._IOwnership _3198_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3199_recIdents;
                  RAST._IExpr _out664;
                  DCOMP._IOwnership _out665;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out666;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out664, out _out665, out _out666);
                  _3197_recursiveGen = _out664;
                  _3198_recOwned = _out665;
                  _3199_recIdents = _out666;
                  Dafny.ISequence<Dafny.Rune> _3200_s;
                  _3200_s = (_3197_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (object.Equals(_3198_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                    _3200_s = Dafny.Sequence<Dafny.Rune>.Concat(_3200_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  _3200_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3200_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  r = RAST.Expr.create_RawExpr(_3200_s);
                  resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                  readIdents = _3199_recIdents;
                }
              } else if (_source112.is_Tuple) {
                Dafny.ISequence<DAST._IType> _3201___mcc_h870 = _source112.dtor_Tuple_a0;
                {
                  RAST._IExpr _3202_recursiveGen;
                  DCOMP._IOwnership _3203_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3204_recIdents;
                  RAST._IExpr _out667;
                  DCOMP._IOwnership _out668;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out669;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out667, out _out668, out _out669);
                  _3202_recursiveGen = _out667;
                  _3203_recOwned = _out668;
                  _3204_recIdents = _out669;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3202_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3203_recOwned;
                  readIdents = _3204_recIdents;
                }
              } else if (_source112.is_Array) {
                DAST._IType _3205___mcc_h872 = _source112.dtor_element;
                BigInteger _3206___mcc_h873 = _source112.dtor_dims;
                {
                  RAST._IExpr _3207_recursiveGen;
                  DCOMP._IOwnership _3208_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3209_recIdents;
                  RAST._IExpr _out670;
                  DCOMP._IOwnership _out671;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out672;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out670, out _out671, out _out672);
                  _3207_recursiveGen = _out670;
                  _3208_recOwned = _out671;
                  _3209_recIdents = _out672;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3207_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3208_recOwned;
                  readIdents = _3209_recIdents;
                }
              } else if (_source112.is_Seq) {
                DAST._IType _3210___mcc_h876 = _source112.dtor_element;
                {
                  RAST._IExpr _3211_recursiveGen;
                  DCOMP._IOwnership _3212_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3213_recIdents;
                  RAST._IExpr _out673;
                  DCOMP._IOwnership _out674;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out675;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out673, out _out674, out _out675);
                  _3211_recursiveGen = _out673;
                  _3212_recOwned = _out674;
                  _3213_recIdents = _out675;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3211_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3212_recOwned;
                  readIdents = _3213_recIdents;
                }
              } else if (_source112.is_Set) {
                DAST._IType _3214___mcc_h878 = _source112.dtor_element;
                {
                  RAST._IExpr _3215_recursiveGen;
                  DCOMP._IOwnership _3216_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3217_recIdents;
                  RAST._IExpr _out676;
                  DCOMP._IOwnership _out677;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out678;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out676, out _out677, out _out678);
                  _3215_recursiveGen = _out676;
                  _3216_recOwned = _out677;
                  _3217_recIdents = _out678;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3215_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3216_recOwned;
                  readIdents = _3217_recIdents;
                }
              } else if (_source112.is_Multiset) {
                DAST._IType _3218___mcc_h880 = _source112.dtor_element;
                {
                  RAST._IExpr _3219_recursiveGen;
                  DCOMP._IOwnership _3220_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3221_recIdents;
                  RAST._IExpr _out679;
                  DCOMP._IOwnership _out680;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out681;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out679, out _out680, out _out681);
                  _3219_recursiveGen = _out679;
                  _3220_recOwned = _out680;
                  _3221_recIdents = _out681;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3219_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3220_recOwned;
                  readIdents = _3221_recIdents;
                }
              } else if (_source112.is_Map) {
                DAST._IType _3222___mcc_h882 = _source112.dtor_key;
                DAST._IType _3223___mcc_h883 = _source112.dtor_value;
                {
                  RAST._IExpr _3224_recursiveGen;
                  DCOMP._IOwnership _3225_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3226_recIdents;
                  RAST._IExpr _out682;
                  DCOMP._IOwnership _out683;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out684;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out682, out _out683, out _out684);
                  _3224_recursiveGen = _out682;
                  _3225_recOwned = _out683;
                  _3226_recIdents = _out684;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3224_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3225_recOwned;
                  readIdents = _3226_recIdents;
                }
              } else if (_source112.is_SetBuilder) {
                DAST._IType _3227___mcc_h886 = _source112.dtor_element;
                {
                  RAST._IExpr _3228_recursiveGen;
                  DCOMP._IOwnership _3229_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3230_recIdents;
                  RAST._IExpr _out685;
                  DCOMP._IOwnership _out686;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out687;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out685, out _out686, out _out687);
                  _3228_recursiveGen = _out685;
                  _3229_recOwned = _out686;
                  _3230_recIdents = _out687;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3228_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3229_recOwned;
                  readIdents = _3230_recIdents;
                }
              } else if (_source112.is_MapBuilder) {
                DAST._IType _3231___mcc_h888 = _source112.dtor_key;
                DAST._IType _3232___mcc_h889 = _source112.dtor_value;
                {
                  RAST._IExpr _3233_recursiveGen;
                  DCOMP._IOwnership _3234_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3235_recIdents;
                  RAST._IExpr _out688;
                  DCOMP._IOwnership _out689;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out690;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out688, out _out689, out _out690);
                  _3233_recursiveGen = _out688;
                  _3234_recOwned = _out689;
                  _3235_recIdents = _out690;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3233_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3234_recOwned;
                  readIdents = _3235_recIdents;
                }
              } else if (_source112.is_Arrow) {
                Dafny.ISequence<DAST._IType> _3236___mcc_h892 = _source112.dtor_args;
                DAST._IType _3237___mcc_h893 = _source112.dtor_result;
                {
                  RAST._IExpr _3238_recursiveGen;
                  DCOMP._IOwnership _3239_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3240_recIdents;
                  RAST._IExpr _out691;
                  DCOMP._IOwnership _out692;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out693;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out691, out _out692, out _out693);
                  _3238_recursiveGen = _out691;
                  _3239_recOwned = _out692;
                  _3240_recIdents = _out693;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3238_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3239_recOwned;
                  readIdents = _3240_recIdents;
                }
              } else if (_source112.is_Primitive) {
                DAST._IPrimitive _3241___mcc_h896 = _source112.dtor_Primitive_a0;
                {
                  RAST._IExpr _3242_recursiveGen;
                  DCOMP._IOwnership _3243_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3244_recIdents;
                  RAST._IExpr _out694;
                  DCOMP._IOwnership _out695;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out696;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out694, out _out695, out _out696);
                  _3242_recursiveGen = _out694;
                  _3243_recOwned = _out695;
                  _3244_recIdents = _out696;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3242_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3243_recOwned;
                  readIdents = _3244_recIdents;
                }
              } else if (_source112.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _3245___mcc_h898 = _source112.dtor_Passthrough_a0;
                {
                  RAST._IExpr _3246_recursiveGen;
                  DCOMP._IOwnership _3247_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3248_recIdents;
                  RAST._IExpr _out697;
                  DCOMP._IOwnership _out698;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out699;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out697, out _out698, out _out699);
                  _3246_recursiveGen = _out697;
                  _3247_recOwned = _out698;
                  _3248_recIdents = _out699;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3246_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3247_recOwned;
                  readIdents = _3248_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3249___mcc_h900 = _source112.dtor_TypeArg_a0;
                {
                  RAST._IExpr _3250_recursiveGen;
                  DCOMP._IOwnership _3251_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3252_recIdents;
                  RAST._IExpr _out700;
                  DCOMP._IOwnership _out701;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out702;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out700, out _out701, out _out702);
                  _3250_recursiveGen = _out700;
                  _3251_recOwned = _out701;
                  _3252_recIdents = _out702;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3250_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3251_recOwned;
                  readIdents = _3252_recIdents;
                }
              }
            } else if (_source87.is_Map) {
              DAST._IType _3253___mcc_h902 = _source87.dtor_key;
              DAST._IType _3254___mcc_h903 = _source87.dtor_value;
              DAST._IType _source115 = _2458___mcc_h339;
              if (_source115.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3255___mcc_h910 = _source115.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _3256___mcc_h911 = _source115.dtor_typeArgs;
                DAST._IResolvedType _3257___mcc_h912 = _source115.dtor_resolved;
                DAST._IResolvedType _source116 = _3257___mcc_h912;
                if (_source116.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3258___mcc_h916 = _source116.dtor_path;
                  {
                    RAST._IExpr _3259_recursiveGen;
                    DCOMP._IOwnership _3260_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3261_recIdents;
                    RAST._IExpr _out703;
                    DCOMP._IOwnership _out704;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out705;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out703, out _out704, out _out705);
                    _3259_recursiveGen = _out703;
                    _3260_recOwned = _out704;
                    _3261_recIdents = _out705;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3259_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3260_recOwned;
                    readIdents = _3261_recIdents;
                  }
                } else if (_source116.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3262___mcc_h918 = _source116.dtor_path;
                  {
                    RAST._IExpr _3263_recursiveGen;
                    DCOMP._IOwnership _3264_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3265_recIdents;
                    RAST._IExpr _out706;
                    DCOMP._IOwnership _out707;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out708;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out706, out _out707, out _out708);
                    _3263_recursiveGen = _out706;
                    _3264_recOwned = _out707;
                    _3265_recIdents = _out708;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3263_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3264_recOwned;
                    readIdents = _3265_recIdents;
                  }
                } else {
                  DAST._IType _3266___mcc_h920 = _source116.dtor_baseType;
                  DAST._INewtypeRange _3267___mcc_h921 = _source116.dtor_range;
                  bool _3268___mcc_h922 = _source116.dtor_erase;
                  bool _3269_erase = _3268___mcc_h922;
                  DAST._INewtypeRange _3270_range = _3267___mcc_h921;
                  DAST._IType _3271_b = _3266___mcc_h920;
                  {
                    if (object.Equals(_2452_fromTpe, _3271_b)) {
                      RAST._IExpr _3272_recursiveGen;
                      DCOMP._IOwnership _3273_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3274_recIdents;
                      RAST._IExpr _out709;
                      DCOMP._IOwnership _out710;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out711;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out709, out _out710, out _out711);
                      _3272_recursiveGen = _out709;
                      _3273_recOwned = _out710;
                      _3274_recIdents = _out711;
                      Std.Wrappers._IOption<RAST._IType> _3275_potentialRhsType;
                      _3275_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3271_b, _3270_range);
                      Std.Wrappers._IOption<RAST._IType> _source117 = _3275_potentialRhsType;
                      if (_source117.is_None) {
                        if (_3269_erase) {
                          r = _3272_recursiveGen;
                        } else {
                          RAST._IType _3276_rhsType;
                          RAST._IType _out712;
                          _out712 = DCOMP.COMP.GenType(_2451_toTpe, true, false);
                          _3276_rhsType = _out712;
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3276_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3272_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                        }
                        resultingOwnership = _3273_recOwned;
                      } else {
                        RAST._IType _3277___mcc_h1500 = _source117.dtor_value;
                        RAST._IType _3278_v = _3277___mcc_h1500;
                        r = RAST.Expr.create_ConversionNum(_3278_v, _3272_recursiveGen);
                        resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                      }
                      readIdents = _3274_recIdents;
                    } else {
                      RAST._IExpr _out713;
                      DCOMP._IOwnership _out714;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out715;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2453_expr, _2452_fromTpe, _3271_b), _3271_b, _2451_toTpe), selfIdent, @params, expectedOwnership, out _out713, out _out714, out _out715);
                      r = _out713;
                      resultingOwnership = _out714;
                      readIdents = _out715;
                    }
                  }
                }
              } else if (_source115.is_Nullable) {
                DAST._IType _3279___mcc_h926 = _source115.dtor_Nullable_a0;
                {
                  RAST._IExpr _3280_recursiveGen;
                  DCOMP._IOwnership _3281_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3282_recIdents;
                  RAST._IExpr _out716;
                  DCOMP._IOwnership _out717;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out718;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out716, out _out717, out _out718);
                  _3280_recursiveGen = _out716;
                  _3281_recOwned = _out717;
                  _3282_recIdents = _out718;
                  Dafny.ISequence<Dafny.Rune> _3283_s;
                  _3283_s = (_3280_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (object.Equals(_3281_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                    _3283_s = Dafny.Sequence<Dafny.Rune>.Concat(_3283_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  _3283_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3283_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  r = RAST.Expr.create_RawExpr(_3283_s);
                  resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                  readIdents = _3282_recIdents;
                }
              } else if (_source115.is_Tuple) {
                Dafny.ISequence<DAST._IType> _3284___mcc_h928 = _source115.dtor_Tuple_a0;
                {
                  RAST._IExpr _3285_recursiveGen;
                  DCOMP._IOwnership _3286_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3287_recIdents;
                  RAST._IExpr _out719;
                  DCOMP._IOwnership _out720;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out721;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out719, out _out720, out _out721);
                  _3285_recursiveGen = _out719;
                  _3286_recOwned = _out720;
                  _3287_recIdents = _out721;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3285_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3286_recOwned;
                  readIdents = _3287_recIdents;
                }
              } else if (_source115.is_Array) {
                DAST._IType _3288___mcc_h930 = _source115.dtor_element;
                BigInteger _3289___mcc_h931 = _source115.dtor_dims;
                {
                  RAST._IExpr _3290_recursiveGen;
                  DCOMP._IOwnership _3291_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3292_recIdents;
                  RAST._IExpr _out722;
                  DCOMP._IOwnership _out723;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out724;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out722, out _out723, out _out724);
                  _3290_recursiveGen = _out722;
                  _3291_recOwned = _out723;
                  _3292_recIdents = _out724;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3290_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3291_recOwned;
                  readIdents = _3292_recIdents;
                }
              } else if (_source115.is_Seq) {
                DAST._IType _3293___mcc_h934 = _source115.dtor_element;
                {
                  RAST._IExpr _3294_recursiveGen;
                  DCOMP._IOwnership _3295_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3296_recIdents;
                  RAST._IExpr _out725;
                  DCOMP._IOwnership _out726;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out727;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out725, out _out726, out _out727);
                  _3294_recursiveGen = _out725;
                  _3295_recOwned = _out726;
                  _3296_recIdents = _out727;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3294_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3295_recOwned;
                  readIdents = _3296_recIdents;
                }
              } else if (_source115.is_Set) {
                DAST._IType _3297___mcc_h936 = _source115.dtor_element;
                {
                  RAST._IExpr _3298_recursiveGen;
                  DCOMP._IOwnership _3299_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3300_recIdents;
                  RAST._IExpr _out728;
                  DCOMP._IOwnership _out729;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out730;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out728, out _out729, out _out730);
                  _3298_recursiveGen = _out728;
                  _3299_recOwned = _out729;
                  _3300_recIdents = _out730;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3298_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3299_recOwned;
                  readIdents = _3300_recIdents;
                }
              } else if (_source115.is_Multiset) {
                DAST._IType _3301___mcc_h938 = _source115.dtor_element;
                {
                  RAST._IExpr _3302_recursiveGen;
                  DCOMP._IOwnership _3303_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3304_recIdents;
                  RAST._IExpr _out731;
                  DCOMP._IOwnership _out732;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out733;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out731, out _out732, out _out733);
                  _3302_recursiveGen = _out731;
                  _3303_recOwned = _out732;
                  _3304_recIdents = _out733;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3302_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3303_recOwned;
                  readIdents = _3304_recIdents;
                }
              } else if (_source115.is_Map) {
                DAST._IType _3305___mcc_h940 = _source115.dtor_key;
                DAST._IType _3306___mcc_h941 = _source115.dtor_value;
                {
                  RAST._IExpr _3307_recursiveGen;
                  DCOMP._IOwnership _3308_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3309_recIdents;
                  RAST._IExpr _out734;
                  DCOMP._IOwnership _out735;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out736;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out734, out _out735, out _out736);
                  _3307_recursiveGen = _out734;
                  _3308_recOwned = _out735;
                  _3309_recIdents = _out736;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3307_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3308_recOwned;
                  readIdents = _3309_recIdents;
                }
              } else if (_source115.is_SetBuilder) {
                DAST._IType _3310___mcc_h944 = _source115.dtor_element;
                {
                  RAST._IExpr _3311_recursiveGen;
                  DCOMP._IOwnership _3312_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3313_recIdents;
                  RAST._IExpr _out737;
                  DCOMP._IOwnership _out738;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out739;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out737, out _out738, out _out739);
                  _3311_recursiveGen = _out737;
                  _3312_recOwned = _out738;
                  _3313_recIdents = _out739;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3311_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3312_recOwned;
                  readIdents = _3313_recIdents;
                }
              } else if (_source115.is_MapBuilder) {
                DAST._IType _3314___mcc_h946 = _source115.dtor_key;
                DAST._IType _3315___mcc_h947 = _source115.dtor_value;
                {
                  RAST._IExpr _3316_recursiveGen;
                  DCOMP._IOwnership _3317_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3318_recIdents;
                  RAST._IExpr _out740;
                  DCOMP._IOwnership _out741;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out742;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out740, out _out741, out _out742);
                  _3316_recursiveGen = _out740;
                  _3317_recOwned = _out741;
                  _3318_recIdents = _out742;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3316_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3317_recOwned;
                  readIdents = _3318_recIdents;
                }
              } else if (_source115.is_Arrow) {
                Dafny.ISequence<DAST._IType> _3319___mcc_h950 = _source115.dtor_args;
                DAST._IType _3320___mcc_h951 = _source115.dtor_result;
                {
                  RAST._IExpr _3321_recursiveGen;
                  DCOMP._IOwnership _3322_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3323_recIdents;
                  RAST._IExpr _out743;
                  DCOMP._IOwnership _out744;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out745;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out743, out _out744, out _out745);
                  _3321_recursiveGen = _out743;
                  _3322_recOwned = _out744;
                  _3323_recIdents = _out745;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3321_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3322_recOwned;
                  readIdents = _3323_recIdents;
                }
              } else if (_source115.is_Primitive) {
                DAST._IPrimitive _3324___mcc_h954 = _source115.dtor_Primitive_a0;
                {
                  RAST._IExpr _3325_recursiveGen;
                  DCOMP._IOwnership _3326_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3327_recIdents;
                  RAST._IExpr _out746;
                  DCOMP._IOwnership _out747;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out748;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out746, out _out747, out _out748);
                  _3325_recursiveGen = _out746;
                  _3326_recOwned = _out747;
                  _3327_recIdents = _out748;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3325_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3326_recOwned;
                  readIdents = _3327_recIdents;
                }
              } else if (_source115.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _3328___mcc_h956 = _source115.dtor_Passthrough_a0;
                {
                  RAST._IExpr _3329_recursiveGen;
                  DCOMP._IOwnership _3330_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3331_recIdents;
                  RAST._IExpr _out749;
                  DCOMP._IOwnership _out750;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out751;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out749, out _out750, out _out751);
                  _3329_recursiveGen = _out749;
                  _3330_recOwned = _out750;
                  _3331_recIdents = _out751;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3329_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3330_recOwned;
                  readIdents = _3331_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3332___mcc_h958 = _source115.dtor_TypeArg_a0;
                {
                  RAST._IExpr _3333_recursiveGen;
                  DCOMP._IOwnership _3334_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3335_recIdents;
                  RAST._IExpr _out752;
                  DCOMP._IOwnership _out753;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out754;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out752, out _out753, out _out754);
                  _3333_recursiveGen = _out752;
                  _3334_recOwned = _out753;
                  _3335_recIdents = _out754;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3333_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3334_recOwned;
                  readIdents = _3335_recIdents;
                }
              }
            } else if (_source87.is_SetBuilder) {
              DAST._IType _3336___mcc_h960 = _source87.dtor_element;
              DAST._IType _source118 = _2458___mcc_h339;
              if (_source118.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3337___mcc_h964 = _source118.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _3338___mcc_h965 = _source118.dtor_typeArgs;
                DAST._IResolvedType _3339___mcc_h966 = _source118.dtor_resolved;
                DAST._IResolvedType _source119 = _3339___mcc_h966;
                if (_source119.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3340___mcc_h970 = _source119.dtor_path;
                  {
                    RAST._IExpr _3341_recursiveGen;
                    DCOMP._IOwnership _3342_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3343_recIdents;
                    RAST._IExpr _out755;
                    DCOMP._IOwnership _out756;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out757;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out755, out _out756, out _out757);
                    _3341_recursiveGen = _out755;
                    _3342_recOwned = _out756;
                    _3343_recIdents = _out757;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3341_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3342_recOwned;
                    readIdents = _3343_recIdents;
                  }
                } else if (_source119.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3344___mcc_h972 = _source119.dtor_path;
                  {
                    RAST._IExpr _3345_recursiveGen;
                    DCOMP._IOwnership _3346_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3347_recIdents;
                    RAST._IExpr _out758;
                    DCOMP._IOwnership _out759;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out760;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out758, out _out759, out _out760);
                    _3345_recursiveGen = _out758;
                    _3346_recOwned = _out759;
                    _3347_recIdents = _out760;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3345_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3346_recOwned;
                    readIdents = _3347_recIdents;
                  }
                } else {
                  DAST._IType _3348___mcc_h974 = _source119.dtor_baseType;
                  DAST._INewtypeRange _3349___mcc_h975 = _source119.dtor_range;
                  bool _3350___mcc_h976 = _source119.dtor_erase;
                  bool _3351_erase = _3350___mcc_h976;
                  DAST._INewtypeRange _3352_range = _3349___mcc_h975;
                  DAST._IType _3353_b = _3348___mcc_h974;
                  {
                    if (object.Equals(_2452_fromTpe, _3353_b)) {
                      RAST._IExpr _3354_recursiveGen;
                      DCOMP._IOwnership _3355_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3356_recIdents;
                      RAST._IExpr _out761;
                      DCOMP._IOwnership _out762;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out763;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out761, out _out762, out _out763);
                      _3354_recursiveGen = _out761;
                      _3355_recOwned = _out762;
                      _3356_recIdents = _out763;
                      Std.Wrappers._IOption<RAST._IType> _3357_potentialRhsType;
                      _3357_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3353_b, _3352_range);
                      Std.Wrappers._IOption<RAST._IType> _source120 = _3357_potentialRhsType;
                      if (_source120.is_None) {
                        if (_3351_erase) {
                          r = _3354_recursiveGen;
                        } else {
                          RAST._IType _3358_rhsType;
                          RAST._IType _out764;
                          _out764 = DCOMP.COMP.GenType(_2451_toTpe, true, false);
                          _3358_rhsType = _out764;
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3358_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3354_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                        }
                        resultingOwnership = _3355_recOwned;
                      } else {
                        RAST._IType _3359___mcc_h1501 = _source120.dtor_value;
                        RAST._IType _3360_v = _3359___mcc_h1501;
                        r = RAST.Expr.create_ConversionNum(_3360_v, _3354_recursiveGen);
                        resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                      }
                      readIdents = _3356_recIdents;
                    } else {
                      RAST._IExpr _out765;
                      DCOMP._IOwnership _out766;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out767;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2453_expr, _2452_fromTpe, _3353_b), _3353_b, _2451_toTpe), selfIdent, @params, expectedOwnership, out _out765, out _out766, out _out767);
                      r = _out765;
                      resultingOwnership = _out766;
                      readIdents = _out767;
                    }
                  }
                }
              } else if (_source118.is_Nullable) {
                DAST._IType _3361___mcc_h980 = _source118.dtor_Nullable_a0;
                {
                  RAST._IExpr _3362_recursiveGen;
                  DCOMP._IOwnership _3363_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3364_recIdents;
                  RAST._IExpr _out768;
                  DCOMP._IOwnership _out769;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out770;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out768, out _out769, out _out770);
                  _3362_recursiveGen = _out768;
                  _3363_recOwned = _out769;
                  _3364_recIdents = _out770;
                  Dafny.ISequence<Dafny.Rune> _3365_s;
                  _3365_s = (_3362_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (object.Equals(_3363_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                    _3365_s = Dafny.Sequence<Dafny.Rune>.Concat(_3365_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  _3365_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3365_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  r = RAST.Expr.create_RawExpr(_3365_s);
                  resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                  readIdents = _3364_recIdents;
                }
              } else if (_source118.is_Tuple) {
                Dafny.ISequence<DAST._IType> _3366___mcc_h982 = _source118.dtor_Tuple_a0;
                {
                  RAST._IExpr _3367_recursiveGen;
                  DCOMP._IOwnership _3368_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3369_recIdents;
                  RAST._IExpr _out771;
                  DCOMP._IOwnership _out772;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out773;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out771, out _out772, out _out773);
                  _3367_recursiveGen = _out771;
                  _3368_recOwned = _out772;
                  _3369_recIdents = _out773;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3367_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3368_recOwned;
                  readIdents = _3369_recIdents;
                }
              } else if (_source118.is_Array) {
                DAST._IType _3370___mcc_h984 = _source118.dtor_element;
                BigInteger _3371___mcc_h985 = _source118.dtor_dims;
                {
                  RAST._IExpr _3372_recursiveGen;
                  DCOMP._IOwnership _3373_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3374_recIdents;
                  RAST._IExpr _out774;
                  DCOMP._IOwnership _out775;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out776;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out774, out _out775, out _out776);
                  _3372_recursiveGen = _out774;
                  _3373_recOwned = _out775;
                  _3374_recIdents = _out776;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3372_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3373_recOwned;
                  readIdents = _3374_recIdents;
                }
              } else if (_source118.is_Seq) {
                DAST._IType _3375___mcc_h988 = _source118.dtor_element;
                {
                  RAST._IExpr _3376_recursiveGen;
                  DCOMP._IOwnership _3377_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3378_recIdents;
                  RAST._IExpr _out777;
                  DCOMP._IOwnership _out778;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out779;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out777, out _out778, out _out779);
                  _3376_recursiveGen = _out777;
                  _3377_recOwned = _out778;
                  _3378_recIdents = _out779;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3376_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3377_recOwned;
                  readIdents = _3378_recIdents;
                }
              } else if (_source118.is_Set) {
                DAST._IType _3379___mcc_h990 = _source118.dtor_element;
                {
                  RAST._IExpr _3380_recursiveGen;
                  DCOMP._IOwnership _3381_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3382_recIdents;
                  RAST._IExpr _out780;
                  DCOMP._IOwnership _out781;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out782;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out780, out _out781, out _out782);
                  _3380_recursiveGen = _out780;
                  _3381_recOwned = _out781;
                  _3382_recIdents = _out782;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3380_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3381_recOwned;
                  readIdents = _3382_recIdents;
                }
              } else if (_source118.is_Multiset) {
                DAST._IType _3383___mcc_h992 = _source118.dtor_element;
                {
                  RAST._IExpr _3384_recursiveGen;
                  DCOMP._IOwnership _3385_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3386_recIdents;
                  RAST._IExpr _out783;
                  DCOMP._IOwnership _out784;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out785;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out783, out _out784, out _out785);
                  _3384_recursiveGen = _out783;
                  _3385_recOwned = _out784;
                  _3386_recIdents = _out785;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3384_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3385_recOwned;
                  readIdents = _3386_recIdents;
                }
              } else if (_source118.is_Map) {
                DAST._IType _3387___mcc_h994 = _source118.dtor_key;
                DAST._IType _3388___mcc_h995 = _source118.dtor_value;
                {
                  RAST._IExpr _3389_recursiveGen;
                  DCOMP._IOwnership _3390_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3391_recIdents;
                  RAST._IExpr _out786;
                  DCOMP._IOwnership _out787;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out788;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out786, out _out787, out _out788);
                  _3389_recursiveGen = _out786;
                  _3390_recOwned = _out787;
                  _3391_recIdents = _out788;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3389_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3390_recOwned;
                  readIdents = _3391_recIdents;
                }
              } else if (_source118.is_SetBuilder) {
                DAST._IType _3392___mcc_h998 = _source118.dtor_element;
                {
                  RAST._IExpr _3393_recursiveGen;
                  DCOMP._IOwnership _3394_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3395_recIdents;
                  RAST._IExpr _out789;
                  DCOMP._IOwnership _out790;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out791;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out789, out _out790, out _out791);
                  _3393_recursiveGen = _out789;
                  _3394_recOwned = _out790;
                  _3395_recIdents = _out791;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3393_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3394_recOwned;
                  readIdents = _3395_recIdents;
                }
              } else if (_source118.is_MapBuilder) {
                DAST._IType _3396___mcc_h1000 = _source118.dtor_key;
                DAST._IType _3397___mcc_h1001 = _source118.dtor_value;
                {
                  RAST._IExpr _3398_recursiveGen;
                  DCOMP._IOwnership _3399_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3400_recIdents;
                  RAST._IExpr _out792;
                  DCOMP._IOwnership _out793;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out794;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out792, out _out793, out _out794);
                  _3398_recursiveGen = _out792;
                  _3399_recOwned = _out793;
                  _3400_recIdents = _out794;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3398_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3399_recOwned;
                  readIdents = _3400_recIdents;
                }
              } else if (_source118.is_Arrow) {
                Dafny.ISequence<DAST._IType> _3401___mcc_h1004 = _source118.dtor_args;
                DAST._IType _3402___mcc_h1005 = _source118.dtor_result;
                {
                  RAST._IExpr _3403_recursiveGen;
                  DCOMP._IOwnership _3404_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3405_recIdents;
                  RAST._IExpr _out795;
                  DCOMP._IOwnership _out796;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out797;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out795, out _out796, out _out797);
                  _3403_recursiveGen = _out795;
                  _3404_recOwned = _out796;
                  _3405_recIdents = _out797;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3403_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3404_recOwned;
                  readIdents = _3405_recIdents;
                }
              } else if (_source118.is_Primitive) {
                DAST._IPrimitive _3406___mcc_h1008 = _source118.dtor_Primitive_a0;
                {
                  RAST._IExpr _3407_recursiveGen;
                  DCOMP._IOwnership _3408_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3409_recIdents;
                  RAST._IExpr _out798;
                  DCOMP._IOwnership _out799;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out800;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out798, out _out799, out _out800);
                  _3407_recursiveGen = _out798;
                  _3408_recOwned = _out799;
                  _3409_recIdents = _out800;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3407_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3408_recOwned;
                  readIdents = _3409_recIdents;
                }
              } else if (_source118.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _3410___mcc_h1010 = _source118.dtor_Passthrough_a0;
                {
                  RAST._IExpr _3411_recursiveGen;
                  DCOMP._IOwnership _3412_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3413_recIdents;
                  RAST._IExpr _out801;
                  DCOMP._IOwnership _out802;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out803;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out801, out _out802, out _out803);
                  _3411_recursiveGen = _out801;
                  _3412_recOwned = _out802;
                  _3413_recIdents = _out803;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3411_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3412_recOwned;
                  readIdents = _3413_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3414___mcc_h1012 = _source118.dtor_TypeArg_a0;
                {
                  RAST._IExpr _3415_recursiveGen;
                  DCOMP._IOwnership _3416_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3417_recIdents;
                  RAST._IExpr _out804;
                  DCOMP._IOwnership _out805;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out806;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out804, out _out805, out _out806);
                  _3415_recursiveGen = _out804;
                  _3416_recOwned = _out805;
                  _3417_recIdents = _out806;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3415_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3416_recOwned;
                  readIdents = _3417_recIdents;
                }
              }
            } else if (_source87.is_MapBuilder) {
              DAST._IType _3418___mcc_h1014 = _source87.dtor_key;
              DAST._IType _3419___mcc_h1015 = _source87.dtor_value;
              DAST._IType _source121 = _2458___mcc_h339;
              if (_source121.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3420___mcc_h1022 = _source121.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _3421___mcc_h1023 = _source121.dtor_typeArgs;
                DAST._IResolvedType _3422___mcc_h1024 = _source121.dtor_resolved;
                DAST._IResolvedType _source122 = _3422___mcc_h1024;
                if (_source122.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3423___mcc_h1028 = _source122.dtor_path;
                  {
                    RAST._IExpr _3424_recursiveGen;
                    DCOMP._IOwnership _3425_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3426_recIdents;
                    RAST._IExpr _out807;
                    DCOMP._IOwnership _out808;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out809;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out807, out _out808, out _out809);
                    _3424_recursiveGen = _out807;
                    _3425_recOwned = _out808;
                    _3426_recIdents = _out809;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3424_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3425_recOwned;
                    readIdents = _3426_recIdents;
                  }
                } else if (_source122.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3427___mcc_h1030 = _source122.dtor_path;
                  {
                    RAST._IExpr _3428_recursiveGen;
                    DCOMP._IOwnership _3429_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3430_recIdents;
                    RAST._IExpr _out810;
                    DCOMP._IOwnership _out811;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out812;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out810, out _out811, out _out812);
                    _3428_recursiveGen = _out810;
                    _3429_recOwned = _out811;
                    _3430_recIdents = _out812;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3428_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3429_recOwned;
                    readIdents = _3430_recIdents;
                  }
                } else {
                  DAST._IType _3431___mcc_h1032 = _source122.dtor_baseType;
                  DAST._INewtypeRange _3432___mcc_h1033 = _source122.dtor_range;
                  bool _3433___mcc_h1034 = _source122.dtor_erase;
                  bool _3434_erase = _3433___mcc_h1034;
                  DAST._INewtypeRange _3435_range = _3432___mcc_h1033;
                  DAST._IType _3436_b = _3431___mcc_h1032;
                  {
                    if (object.Equals(_2452_fromTpe, _3436_b)) {
                      RAST._IExpr _3437_recursiveGen;
                      DCOMP._IOwnership _3438_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3439_recIdents;
                      RAST._IExpr _out813;
                      DCOMP._IOwnership _out814;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out815;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out813, out _out814, out _out815);
                      _3437_recursiveGen = _out813;
                      _3438_recOwned = _out814;
                      _3439_recIdents = _out815;
                      Std.Wrappers._IOption<RAST._IType> _3440_potentialRhsType;
                      _3440_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3436_b, _3435_range);
                      Std.Wrappers._IOption<RAST._IType> _source123 = _3440_potentialRhsType;
                      if (_source123.is_None) {
                        if (_3434_erase) {
                          r = _3437_recursiveGen;
                        } else {
                          RAST._IType _3441_rhsType;
                          RAST._IType _out816;
                          _out816 = DCOMP.COMP.GenType(_2451_toTpe, true, false);
                          _3441_rhsType = _out816;
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3441_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3437_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                        }
                        resultingOwnership = _3438_recOwned;
                      } else {
                        RAST._IType _3442___mcc_h1502 = _source123.dtor_value;
                        RAST._IType _3443_v = _3442___mcc_h1502;
                        r = RAST.Expr.create_ConversionNum(_3443_v, _3437_recursiveGen);
                        resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                      }
                      readIdents = _3439_recIdents;
                    } else {
                      RAST._IExpr _out817;
                      DCOMP._IOwnership _out818;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out819;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2453_expr, _2452_fromTpe, _3436_b), _3436_b, _2451_toTpe), selfIdent, @params, expectedOwnership, out _out817, out _out818, out _out819);
                      r = _out817;
                      resultingOwnership = _out818;
                      readIdents = _out819;
                    }
                  }
                }
              } else if (_source121.is_Nullable) {
                DAST._IType _3444___mcc_h1038 = _source121.dtor_Nullable_a0;
                {
                  RAST._IExpr _3445_recursiveGen;
                  DCOMP._IOwnership _3446_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3447_recIdents;
                  RAST._IExpr _out820;
                  DCOMP._IOwnership _out821;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out822;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out820, out _out821, out _out822);
                  _3445_recursiveGen = _out820;
                  _3446_recOwned = _out821;
                  _3447_recIdents = _out822;
                  Dafny.ISequence<Dafny.Rune> _3448_s;
                  _3448_s = (_3445_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (object.Equals(_3446_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                    _3448_s = Dafny.Sequence<Dafny.Rune>.Concat(_3448_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  _3448_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3448_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  r = RAST.Expr.create_RawExpr(_3448_s);
                  resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                  readIdents = _3447_recIdents;
                }
              } else if (_source121.is_Tuple) {
                Dafny.ISequence<DAST._IType> _3449___mcc_h1040 = _source121.dtor_Tuple_a0;
                {
                  RAST._IExpr _3450_recursiveGen;
                  DCOMP._IOwnership _3451_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3452_recIdents;
                  RAST._IExpr _out823;
                  DCOMP._IOwnership _out824;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out825;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out823, out _out824, out _out825);
                  _3450_recursiveGen = _out823;
                  _3451_recOwned = _out824;
                  _3452_recIdents = _out825;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3450_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3451_recOwned;
                  readIdents = _3452_recIdents;
                }
              } else if (_source121.is_Array) {
                DAST._IType _3453___mcc_h1042 = _source121.dtor_element;
                BigInteger _3454___mcc_h1043 = _source121.dtor_dims;
                {
                  RAST._IExpr _3455_recursiveGen;
                  DCOMP._IOwnership _3456_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3457_recIdents;
                  RAST._IExpr _out826;
                  DCOMP._IOwnership _out827;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out828;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out826, out _out827, out _out828);
                  _3455_recursiveGen = _out826;
                  _3456_recOwned = _out827;
                  _3457_recIdents = _out828;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3455_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3456_recOwned;
                  readIdents = _3457_recIdents;
                }
              } else if (_source121.is_Seq) {
                DAST._IType _3458___mcc_h1046 = _source121.dtor_element;
                {
                  RAST._IExpr _3459_recursiveGen;
                  DCOMP._IOwnership _3460_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3461_recIdents;
                  RAST._IExpr _out829;
                  DCOMP._IOwnership _out830;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out831;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out829, out _out830, out _out831);
                  _3459_recursiveGen = _out829;
                  _3460_recOwned = _out830;
                  _3461_recIdents = _out831;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3459_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3460_recOwned;
                  readIdents = _3461_recIdents;
                }
              } else if (_source121.is_Set) {
                DAST._IType _3462___mcc_h1048 = _source121.dtor_element;
                {
                  RAST._IExpr _3463_recursiveGen;
                  DCOMP._IOwnership _3464_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3465_recIdents;
                  RAST._IExpr _out832;
                  DCOMP._IOwnership _out833;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out834;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out832, out _out833, out _out834);
                  _3463_recursiveGen = _out832;
                  _3464_recOwned = _out833;
                  _3465_recIdents = _out834;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3463_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3464_recOwned;
                  readIdents = _3465_recIdents;
                }
              } else if (_source121.is_Multiset) {
                DAST._IType _3466___mcc_h1050 = _source121.dtor_element;
                {
                  RAST._IExpr _3467_recursiveGen;
                  DCOMP._IOwnership _3468_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3469_recIdents;
                  RAST._IExpr _out835;
                  DCOMP._IOwnership _out836;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out837;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out835, out _out836, out _out837);
                  _3467_recursiveGen = _out835;
                  _3468_recOwned = _out836;
                  _3469_recIdents = _out837;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3467_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3468_recOwned;
                  readIdents = _3469_recIdents;
                }
              } else if (_source121.is_Map) {
                DAST._IType _3470___mcc_h1052 = _source121.dtor_key;
                DAST._IType _3471___mcc_h1053 = _source121.dtor_value;
                {
                  RAST._IExpr _3472_recursiveGen;
                  DCOMP._IOwnership _3473_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3474_recIdents;
                  RAST._IExpr _out838;
                  DCOMP._IOwnership _out839;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out840;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out838, out _out839, out _out840);
                  _3472_recursiveGen = _out838;
                  _3473_recOwned = _out839;
                  _3474_recIdents = _out840;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3472_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3473_recOwned;
                  readIdents = _3474_recIdents;
                }
              } else if (_source121.is_SetBuilder) {
                DAST._IType _3475___mcc_h1056 = _source121.dtor_element;
                {
                  RAST._IExpr _3476_recursiveGen;
                  DCOMP._IOwnership _3477_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3478_recIdents;
                  RAST._IExpr _out841;
                  DCOMP._IOwnership _out842;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out843;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out841, out _out842, out _out843);
                  _3476_recursiveGen = _out841;
                  _3477_recOwned = _out842;
                  _3478_recIdents = _out843;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3476_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3477_recOwned;
                  readIdents = _3478_recIdents;
                }
              } else if (_source121.is_MapBuilder) {
                DAST._IType _3479___mcc_h1058 = _source121.dtor_key;
                DAST._IType _3480___mcc_h1059 = _source121.dtor_value;
                {
                  RAST._IExpr _3481_recursiveGen;
                  DCOMP._IOwnership _3482_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3483_recIdents;
                  RAST._IExpr _out844;
                  DCOMP._IOwnership _out845;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out846;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out844, out _out845, out _out846);
                  _3481_recursiveGen = _out844;
                  _3482_recOwned = _out845;
                  _3483_recIdents = _out846;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3481_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3482_recOwned;
                  readIdents = _3483_recIdents;
                }
              } else if (_source121.is_Arrow) {
                Dafny.ISequence<DAST._IType> _3484___mcc_h1062 = _source121.dtor_args;
                DAST._IType _3485___mcc_h1063 = _source121.dtor_result;
                {
                  RAST._IExpr _3486_recursiveGen;
                  DCOMP._IOwnership _3487_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3488_recIdents;
                  RAST._IExpr _out847;
                  DCOMP._IOwnership _out848;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out849;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out847, out _out848, out _out849);
                  _3486_recursiveGen = _out847;
                  _3487_recOwned = _out848;
                  _3488_recIdents = _out849;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3486_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3487_recOwned;
                  readIdents = _3488_recIdents;
                }
              } else if (_source121.is_Primitive) {
                DAST._IPrimitive _3489___mcc_h1066 = _source121.dtor_Primitive_a0;
                {
                  RAST._IExpr _3490_recursiveGen;
                  DCOMP._IOwnership _3491_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3492_recIdents;
                  RAST._IExpr _out850;
                  DCOMP._IOwnership _out851;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out852;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out850, out _out851, out _out852);
                  _3490_recursiveGen = _out850;
                  _3491_recOwned = _out851;
                  _3492_recIdents = _out852;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3490_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3491_recOwned;
                  readIdents = _3492_recIdents;
                }
              } else if (_source121.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _3493___mcc_h1068 = _source121.dtor_Passthrough_a0;
                {
                  RAST._IExpr _3494_recursiveGen;
                  DCOMP._IOwnership _3495_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3496_recIdents;
                  RAST._IExpr _out853;
                  DCOMP._IOwnership _out854;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out855;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out853, out _out854, out _out855);
                  _3494_recursiveGen = _out853;
                  _3495_recOwned = _out854;
                  _3496_recIdents = _out855;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3494_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3495_recOwned;
                  readIdents = _3496_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3497___mcc_h1070 = _source121.dtor_TypeArg_a0;
                {
                  RAST._IExpr _3498_recursiveGen;
                  DCOMP._IOwnership _3499_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3500_recIdents;
                  RAST._IExpr _out856;
                  DCOMP._IOwnership _out857;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out858;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out856, out _out857, out _out858);
                  _3498_recursiveGen = _out856;
                  _3499_recOwned = _out857;
                  _3500_recIdents = _out858;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3498_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3499_recOwned;
                  readIdents = _3500_recIdents;
                }
              }
            } else if (_source87.is_Arrow) {
              Dafny.ISequence<DAST._IType> _3501___mcc_h1072 = _source87.dtor_args;
              DAST._IType _3502___mcc_h1073 = _source87.dtor_result;
              DAST._IType _source124 = _2458___mcc_h339;
              if (_source124.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3503___mcc_h1080 = _source124.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _3504___mcc_h1081 = _source124.dtor_typeArgs;
                DAST._IResolvedType _3505___mcc_h1082 = _source124.dtor_resolved;
                DAST._IResolvedType _source125 = _3505___mcc_h1082;
                if (_source125.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3506___mcc_h1086 = _source125.dtor_path;
                  {
                    RAST._IExpr _3507_recursiveGen;
                    DCOMP._IOwnership _3508_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3509_recIdents;
                    RAST._IExpr _out859;
                    DCOMP._IOwnership _out860;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out861;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out859, out _out860, out _out861);
                    _3507_recursiveGen = _out859;
                    _3508_recOwned = _out860;
                    _3509_recIdents = _out861;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3507_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3508_recOwned;
                    readIdents = _3509_recIdents;
                  }
                } else if (_source125.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3510___mcc_h1088 = _source125.dtor_path;
                  {
                    RAST._IExpr _3511_recursiveGen;
                    DCOMP._IOwnership _3512_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3513_recIdents;
                    RAST._IExpr _out862;
                    DCOMP._IOwnership _out863;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out864;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out862, out _out863, out _out864);
                    _3511_recursiveGen = _out862;
                    _3512_recOwned = _out863;
                    _3513_recIdents = _out864;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3511_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3512_recOwned;
                    readIdents = _3513_recIdents;
                  }
                } else {
                  DAST._IType _3514___mcc_h1090 = _source125.dtor_baseType;
                  DAST._INewtypeRange _3515___mcc_h1091 = _source125.dtor_range;
                  bool _3516___mcc_h1092 = _source125.dtor_erase;
                  bool _3517_erase = _3516___mcc_h1092;
                  DAST._INewtypeRange _3518_range = _3515___mcc_h1091;
                  DAST._IType _3519_b = _3514___mcc_h1090;
                  {
                    if (object.Equals(_2452_fromTpe, _3519_b)) {
                      RAST._IExpr _3520_recursiveGen;
                      DCOMP._IOwnership _3521_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3522_recIdents;
                      RAST._IExpr _out865;
                      DCOMP._IOwnership _out866;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out867;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out865, out _out866, out _out867);
                      _3520_recursiveGen = _out865;
                      _3521_recOwned = _out866;
                      _3522_recIdents = _out867;
                      Std.Wrappers._IOption<RAST._IType> _3523_potentialRhsType;
                      _3523_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3519_b, _3518_range);
                      Std.Wrappers._IOption<RAST._IType> _source126 = _3523_potentialRhsType;
                      if (_source126.is_None) {
                        if (_3517_erase) {
                          r = _3520_recursiveGen;
                        } else {
                          RAST._IType _3524_rhsType;
                          RAST._IType _out868;
                          _out868 = DCOMP.COMP.GenType(_2451_toTpe, true, false);
                          _3524_rhsType = _out868;
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3524_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3520_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                        }
                        resultingOwnership = _3521_recOwned;
                      } else {
                        RAST._IType _3525___mcc_h1503 = _source126.dtor_value;
                        RAST._IType _3526_v = _3525___mcc_h1503;
                        r = RAST.Expr.create_ConversionNum(_3526_v, _3520_recursiveGen);
                        resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                      }
                      readIdents = _3522_recIdents;
                    } else {
                      RAST._IExpr _out869;
                      DCOMP._IOwnership _out870;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out871;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2453_expr, _2452_fromTpe, _3519_b), _3519_b, _2451_toTpe), selfIdent, @params, expectedOwnership, out _out869, out _out870, out _out871);
                      r = _out869;
                      resultingOwnership = _out870;
                      readIdents = _out871;
                    }
                  }
                }
              } else if (_source124.is_Nullable) {
                DAST._IType _3527___mcc_h1096 = _source124.dtor_Nullable_a0;
                {
                  RAST._IExpr _3528_recursiveGen;
                  DCOMP._IOwnership _3529_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3530_recIdents;
                  RAST._IExpr _out872;
                  DCOMP._IOwnership _out873;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out874;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out872, out _out873, out _out874);
                  _3528_recursiveGen = _out872;
                  _3529_recOwned = _out873;
                  _3530_recIdents = _out874;
                  Dafny.ISequence<Dafny.Rune> _3531_s;
                  _3531_s = (_3528_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (object.Equals(_3529_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                    _3531_s = Dafny.Sequence<Dafny.Rune>.Concat(_3531_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  _3531_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3531_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  r = RAST.Expr.create_RawExpr(_3531_s);
                  resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                  readIdents = _3530_recIdents;
                }
              } else if (_source124.is_Tuple) {
                Dafny.ISequence<DAST._IType> _3532___mcc_h1098 = _source124.dtor_Tuple_a0;
                {
                  RAST._IExpr _3533_recursiveGen;
                  DCOMP._IOwnership _3534_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3535_recIdents;
                  RAST._IExpr _out875;
                  DCOMP._IOwnership _out876;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out877;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out875, out _out876, out _out877);
                  _3533_recursiveGen = _out875;
                  _3534_recOwned = _out876;
                  _3535_recIdents = _out877;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3533_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3534_recOwned;
                  readIdents = _3535_recIdents;
                }
              } else if (_source124.is_Array) {
                DAST._IType _3536___mcc_h1100 = _source124.dtor_element;
                BigInteger _3537___mcc_h1101 = _source124.dtor_dims;
                {
                  RAST._IExpr _3538_recursiveGen;
                  DCOMP._IOwnership _3539_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3540_recIdents;
                  RAST._IExpr _out878;
                  DCOMP._IOwnership _out879;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out880;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out878, out _out879, out _out880);
                  _3538_recursiveGen = _out878;
                  _3539_recOwned = _out879;
                  _3540_recIdents = _out880;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3538_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3539_recOwned;
                  readIdents = _3540_recIdents;
                }
              } else if (_source124.is_Seq) {
                DAST._IType _3541___mcc_h1104 = _source124.dtor_element;
                {
                  RAST._IExpr _3542_recursiveGen;
                  DCOMP._IOwnership _3543_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3544_recIdents;
                  RAST._IExpr _out881;
                  DCOMP._IOwnership _out882;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out883;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out881, out _out882, out _out883);
                  _3542_recursiveGen = _out881;
                  _3543_recOwned = _out882;
                  _3544_recIdents = _out883;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3542_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3543_recOwned;
                  readIdents = _3544_recIdents;
                }
              } else if (_source124.is_Set) {
                DAST._IType _3545___mcc_h1106 = _source124.dtor_element;
                {
                  RAST._IExpr _3546_recursiveGen;
                  DCOMP._IOwnership _3547_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3548_recIdents;
                  RAST._IExpr _out884;
                  DCOMP._IOwnership _out885;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out886;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out884, out _out885, out _out886);
                  _3546_recursiveGen = _out884;
                  _3547_recOwned = _out885;
                  _3548_recIdents = _out886;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3546_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3547_recOwned;
                  readIdents = _3548_recIdents;
                }
              } else if (_source124.is_Multiset) {
                DAST._IType _3549___mcc_h1108 = _source124.dtor_element;
                {
                  RAST._IExpr _3550_recursiveGen;
                  DCOMP._IOwnership _3551_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3552_recIdents;
                  RAST._IExpr _out887;
                  DCOMP._IOwnership _out888;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out889;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out887, out _out888, out _out889);
                  _3550_recursiveGen = _out887;
                  _3551_recOwned = _out888;
                  _3552_recIdents = _out889;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3550_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3551_recOwned;
                  readIdents = _3552_recIdents;
                }
              } else if (_source124.is_Map) {
                DAST._IType _3553___mcc_h1110 = _source124.dtor_key;
                DAST._IType _3554___mcc_h1111 = _source124.dtor_value;
                {
                  RAST._IExpr _3555_recursiveGen;
                  DCOMP._IOwnership _3556_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3557_recIdents;
                  RAST._IExpr _out890;
                  DCOMP._IOwnership _out891;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out892;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out890, out _out891, out _out892);
                  _3555_recursiveGen = _out890;
                  _3556_recOwned = _out891;
                  _3557_recIdents = _out892;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3555_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3556_recOwned;
                  readIdents = _3557_recIdents;
                }
              } else if (_source124.is_SetBuilder) {
                DAST._IType _3558___mcc_h1114 = _source124.dtor_element;
                {
                  RAST._IExpr _3559_recursiveGen;
                  DCOMP._IOwnership _3560_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3561_recIdents;
                  RAST._IExpr _out893;
                  DCOMP._IOwnership _out894;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out895;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out893, out _out894, out _out895);
                  _3559_recursiveGen = _out893;
                  _3560_recOwned = _out894;
                  _3561_recIdents = _out895;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3559_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3560_recOwned;
                  readIdents = _3561_recIdents;
                }
              } else if (_source124.is_MapBuilder) {
                DAST._IType _3562___mcc_h1116 = _source124.dtor_key;
                DAST._IType _3563___mcc_h1117 = _source124.dtor_value;
                {
                  RAST._IExpr _3564_recursiveGen;
                  DCOMP._IOwnership _3565_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3566_recIdents;
                  RAST._IExpr _out896;
                  DCOMP._IOwnership _out897;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out898;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out896, out _out897, out _out898);
                  _3564_recursiveGen = _out896;
                  _3565_recOwned = _out897;
                  _3566_recIdents = _out898;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3564_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3565_recOwned;
                  readIdents = _3566_recIdents;
                }
              } else if (_source124.is_Arrow) {
                Dafny.ISequence<DAST._IType> _3567___mcc_h1120 = _source124.dtor_args;
                DAST._IType _3568___mcc_h1121 = _source124.dtor_result;
                {
                  RAST._IExpr _3569_recursiveGen;
                  DCOMP._IOwnership _3570_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3571_recIdents;
                  RAST._IExpr _out899;
                  DCOMP._IOwnership _out900;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out901;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out899, out _out900, out _out901);
                  _3569_recursiveGen = _out899;
                  _3570_recOwned = _out900;
                  _3571_recIdents = _out901;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3569_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3570_recOwned;
                  readIdents = _3571_recIdents;
                }
              } else if (_source124.is_Primitive) {
                DAST._IPrimitive _3572___mcc_h1124 = _source124.dtor_Primitive_a0;
                {
                  RAST._IExpr _3573_recursiveGen;
                  DCOMP._IOwnership _3574_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3575_recIdents;
                  RAST._IExpr _out902;
                  DCOMP._IOwnership _out903;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out904;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out902, out _out903, out _out904);
                  _3573_recursiveGen = _out902;
                  _3574_recOwned = _out903;
                  _3575_recIdents = _out904;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3573_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3574_recOwned;
                  readIdents = _3575_recIdents;
                }
              } else if (_source124.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _3576___mcc_h1126 = _source124.dtor_Passthrough_a0;
                {
                  RAST._IExpr _3577_recursiveGen;
                  DCOMP._IOwnership _3578_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3579_recIdents;
                  RAST._IExpr _out905;
                  DCOMP._IOwnership _out906;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out907;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out905, out _out906, out _out907);
                  _3577_recursiveGen = _out905;
                  _3578_recOwned = _out906;
                  _3579_recIdents = _out907;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3577_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3578_recOwned;
                  readIdents = _3579_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3580___mcc_h1128 = _source124.dtor_TypeArg_a0;
                {
                  RAST._IExpr _3581_recursiveGen;
                  DCOMP._IOwnership _3582_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3583_recIdents;
                  RAST._IExpr _out908;
                  DCOMP._IOwnership _out909;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out910;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out908, out _out909, out _out910);
                  _3581_recursiveGen = _out908;
                  _3582_recOwned = _out909;
                  _3583_recIdents = _out910;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3581_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _3582_recOwned;
                  readIdents = _3583_recIdents;
                }
              }
            } else if (_source87.is_Primitive) {
              DAST._IPrimitive _3584___mcc_h1130 = _source87.dtor_Primitive_a0;
              DAST._IPrimitive _source127 = _3584___mcc_h1130;
              if (_source127.is_Int) {
                DAST._IType _source128 = _2458___mcc_h339;
                if (_source128.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3585___mcc_h1134 = _source128.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _3586___mcc_h1135 = _source128.dtor_typeArgs;
                  DAST._IResolvedType _3587___mcc_h1136 = _source128.dtor_resolved;
                  DAST._IResolvedType _source129 = _3587___mcc_h1136;
                  if (_source129.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3588___mcc_h1140 = _source129.dtor_path;
                    {
                      RAST._IExpr _3589_recursiveGen;
                      DCOMP._IOwnership _3590_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3591_recIdents;
                      RAST._IExpr _out911;
                      DCOMP._IOwnership _out912;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out913;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out911, out _out912, out _out913);
                      _3589_recursiveGen = _out911;
                      _3590_recOwned = _out912;
                      _3591_recIdents = _out913;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3589_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      resultingOwnership = _3590_recOwned;
                      readIdents = _3591_recIdents;
                    }
                  } else if (_source129.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3592___mcc_h1142 = _source129.dtor_path;
                    {
                      RAST._IExpr _3593_recursiveGen;
                      DCOMP._IOwnership _3594_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3595_recIdents;
                      RAST._IExpr _out914;
                      DCOMP._IOwnership _out915;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out916;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out914, out _out915, out _out916);
                      _3593_recursiveGen = _out914;
                      _3594_recOwned = _out915;
                      _3595_recIdents = _out916;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3593_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      resultingOwnership = _3594_recOwned;
                      readIdents = _3595_recIdents;
                    }
                  } else {
                    DAST._IType _3596___mcc_h1144 = _source129.dtor_baseType;
                    DAST._INewtypeRange _3597___mcc_h1145 = _source129.dtor_range;
                    bool _3598___mcc_h1146 = _source129.dtor_erase;
                    bool _3599_erase = _3598___mcc_h1146;
                    DAST._INewtypeRange _3600_range = _3597___mcc_h1145;
                    DAST._IType _3601_b = _3596___mcc_h1144;
                    {
                      if (object.Equals(_2452_fromTpe, _3601_b)) {
                        RAST._IExpr _3602_recursiveGen;
                        DCOMP._IOwnership _3603_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3604_recIdents;
                        RAST._IExpr _out917;
                        DCOMP._IOwnership _out918;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out919;
                        DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out917, out _out918, out _out919);
                        _3602_recursiveGen = _out917;
                        _3603_recOwned = _out918;
                        _3604_recIdents = _out919;
                        Std.Wrappers._IOption<RAST._IType> _3605_potentialRhsType;
                        _3605_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3601_b, _3600_range);
                        Std.Wrappers._IOption<RAST._IType> _source130 = _3605_potentialRhsType;
                        if (_source130.is_None) {
                          if (_3599_erase) {
                            r = _3602_recursiveGen;
                          } else {
                            RAST._IType _3606_rhsType;
                            RAST._IType _out920;
                            _out920 = DCOMP.COMP.GenType(_2451_toTpe, true, false);
                            _3606_rhsType = _out920;
                            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3606_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3602_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                          }
                          resultingOwnership = _3603_recOwned;
                        } else {
                          RAST._IType _3607___mcc_h1504 = _source130.dtor_value;
                          RAST._IType _3608_v = _3607___mcc_h1504;
                          r = RAST.Expr.create_ConversionNum(_3608_v, _3602_recursiveGen);
                          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                        }
                        readIdents = _3604_recIdents;
                      } else {
                        RAST._IExpr _out921;
                        DCOMP._IOwnership _out922;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out923;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2453_expr, _2452_fromTpe, _3601_b), _3601_b, _2451_toTpe), selfIdent, @params, expectedOwnership, out _out921, out _out922, out _out923);
                        r = _out921;
                        resultingOwnership = _out922;
                        readIdents = _out923;
                      }
                    }
                  }
                } else if (_source128.is_Nullable) {
                  DAST._IType _3609___mcc_h1150 = _source128.dtor_Nullable_a0;
                  {
                    RAST._IExpr _3610_recursiveGen;
                    DCOMP._IOwnership _3611_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3612_recIdents;
                    RAST._IExpr _out924;
                    DCOMP._IOwnership _out925;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out926;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out924, out _out925, out _out926);
                    _3610_recursiveGen = _out924;
                    _3611_recOwned = _out925;
                    _3612_recIdents = _out926;
                    Dafny.ISequence<Dafny.Rune> _3613_s;
                    _3613_s = (_3610_recursiveGen)._ToString(DCOMP.__default.IND);
                    if (object.Equals(_3611_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                      _3613_s = Dafny.Sequence<Dafny.Rune>.Concat(_3613_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    _3613_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3613_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    r = RAST.Expr.create_RawExpr(_3613_s);
                    resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                    readIdents = _3612_recIdents;
                  }
                } else if (_source128.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _3614___mcc_h1152 = _source128.dtor_Tuple_a0;
                  {
                    RAST._IExpr _3615_recursiveGen;
                    DCOMP._IOwnership _3616_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3617_recIdents;
                    RAST._IExpr _out927;
                    DCOMP._IOwnership _out928;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out929;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out927, out _out928, out _out929);
                    _3615_recursiveGen = _out927;
                    _3616_recOwned = _out928;
                    _3617_recIdents = _out929;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3615_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3616_recOwned;
                    readIdents = _3617_recIdents;
                  }
                } else if (_source128.is_Array) {
                  DAST._IType _3618___mcc_h1154 = _source128.dtor_element;
                  BigInteger _3619___mcc_h1155 = _source128.dtor_dims;
                  {
                    RAST._IExpr _3620_recursiveGen;
                    DCOMP._IOwnership _3621_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3622_recIdents;
                    RAST._IExpr _out930;
                    DCOMP._IOwnership _out931;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out932;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out930, out _out931, out _out932);
                    _3620_recursiveGen = _out930;
                    _3621_recOwned = _out931;
                    _3622_recIdents = _out932;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3620_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3621_recOwned;
                    readIdents = _3622_recIdents;
                  }
                } else if (_source128.is_Seq) {
                  DAST._IType _3623___mcc_h1158 = _source128.dtor_element;
                  {
                    RAST._IExpr _3624_recursiveGen;
                    DCOMP._IOwnership _3625_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3626_recIdents;
                    RAST._IExpr _out933;
                    DCOMP._IOwnership _out934;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out935;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out933, out _out934, out _out935);
                    _3624_recursiveGen = _out933;
                    _3625_recOwned = _out934;
                    _3626_recIdents = _out935;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3624_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3625_recOwned;
                    readIdents = _3626_recIdents;
                  }
                } else if (_source128.is_Set) {
                  DAST._IType _3627___mcc_h1160 = _source128.dtor_element;
                  {
                    RAST._IExpr _3628_recursiveGen;
                    DCOMP._IOwnership _3629_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3630_recIdents;
                    RAST._IExpr _out936;
                    DCOMP._IOwnership _out937;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out938;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out936, out _out937, out _out938);
                    _3628_recursiveGen = _out936;
                    _3629_recOwned = _out937;
                    _3630_recIdents = _out938;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3628_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3629_recOwned;
                    readIdents = _3630_recIdents;
                  }
                } else if (_source128.is_Multiset) {
                  DAST._IType _3631___mcc_h1162 = _source128.dtor_element;
                  {
                    RAST._IExpr _3632_recursiveGen;
                    DCOMP._IOwnership _3633_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3634_recIdents;
                    RAST._IExpr _out939;
                    DCOMP._IOwnership _out940;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out941;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out939, out _out940, out _out941);
                    _3632_recursiveGen = _out939;
                    _3633_recOwned = _out940;
                    _3634_recIdents = _out941;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3632_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3633_recOwned;
                    readIdents = _3634_recIdents;
                  }
                } else if (_source128.is_Map) {
                  DAST._IType _3635___mcc_h1164 = _source128.dtor_key;
                  DAST._IType _3636___mcc_h1165 = _source128.dtor_value;
                  {
                    RAST._IExpr _3637_recursiveGen;
                    DCOMP._IOwnership _3638_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3639_recIdents;
                    RAST._IExpr _out942;
                    DCOMP._IOwnership _out943;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out944;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out942, out _out943, out _out944);
                    _3637_recursiveGen = _out942;
                    _3638_recOwned = _out943;
                    _3639_recIdents = _out944;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3637_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3638_recOwned;
                    readIdents = _3639_recIdents;
                  }
                } else if (_source128.is_SetBuilder) {
                  DAST._IType _3640___mcc_h1168 = _source128.dtor_element;
                  {
                    RAST._IExpr _3641_recursiveGen;
                    DCOMP._IOwnership _3642_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3643_recIdents;
                    RAST._IExpr _out945;
                    DCOMP._IOwnership _out946;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out947;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out945, out _out946, out _out947);
                    _3641_recursiveGen = _out945;
                    _3642_recOwned = _out946;
                    _3643_recIdents = _out947;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3641_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3642_recOwned;
                    readIdents = _3643_recIdents;
                  }
                } else if (_source128.is_MapBuilder) {
                  DAST._IType _3644___mcc_h1170 = _source128.dtor_key;
                  DAST._IType _3645___mcc_h1171 = _source128.dtor_value;
                  {
                    RAST._IExpr _3646_recursiveGen;
                    DCOMP._IOwnership _3647_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3648_recIdents;
                    RAST._IExpr _out948;
                    DCOMP._IOwnership _out949;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out950;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out948, out _out949, out _out950);
                    _3646_recursiveGen = _out948;
                    _3647_recOwned = _out949;
                    _3648_recIdents = _out950;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3646_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3647_recOwned;
                    readIdents = _3648_recIdents;
                  }
                } else if (_source128.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _3649___mcc_h1174 = _source128.dtor_args;
                  DAST._IType _3650___mcc_h1175 = _source128.dtor_result;
                  {
                    RAST._IExpr _3651_recursiveGen;
                    DCOMP._IOwnership _3652_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3653_recIdents;
                    RAST._IExpr _out951;
                    DCOMP._IOwnership _out952;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out953;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out951, out _out952, out _out953);
                    _3651_recursiveGen = _out951;
                    _3652_recOwned = _out952;
                    _3653_recIdents = _out953;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3651_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3652_recOwned;
                    readIdents = _3653_recIdents;
                  }
                } else if (_source128.is_Primitive) {
                  DAST._IPrimitive _3654___mcc_h1178 = _source128.dtor_Primitive_a0;
                  DAST._IPrimitive _source131 = _3654___mcc_h1178;
                  if (_source131.is_Int) {
                    {
                      RAST._IExpr _3655_recursiveGen;
                      DCOMP._IOwnership _3656_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3657_recIdents;
                      RAST._IExpr _out954;
                      DCOMP._IOwnership _out955;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out956;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out954, out _out955, out _out956);
                      _3655_recursiveGen = _out954;
                      _3656_recOwned = _out955;
                      _3657_recIdents = _out956;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3655_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      resultingOwnership = _3656_recOwned;
                      readIdents = _3657_recIdents;
                    }
                  } else if (_source131.is_Real) {
                    {
                      RAST._IExpr _3658_recursiveGen;
                      DCOMP._IOwnership _3659___v60;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3660_recIdents;
                      RAST._IExpr _out957;
                      DCOMP._IOwnership _out958;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out959;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out957, out _out958, out _out959);
                      _3658_recursiveGen = _out957;
                      _3659___v60 = _out958;
                      _3660_recIdents = _out959;
                      r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), (_3658_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))));
                      resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                      readIdents = _3660_recIdents;
                    }
                  } else if (_source131.is_String) {
                    {
                      RAST._IExpr _3661_recursiveGen;
                      DCOMP._IOwnership _3662_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3663_recIdents;
                      RAST._IExpr _out960;
                      DCOMP._IOwnership _out961;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out962;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out960, out _out961, out _out962);
                      _3661_recursiveGen = _out960;
                      _3662_recOwned = _out961;
                      _3663_recIdents = _out962;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3661_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      resultingOwnership = _3662_recOwned;
                      readIdents = _3663_recIdents;
                    }
                  } else if (_source131.is_Bool) {
                    {
                      RAST._IExpr _3664_recursiveGen;
                      DCOMP._IOwnership _3665_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3666_recIdents;
                      RAST._IExpr _out963;
                      DCOMP._IOwnership _out964;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out965;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out963, out _out964, out _out965);
                      _3664_recursiveGen = _out963;
                      _3665_recOwned = _out964;
                      _3666_recIdents = _out965;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3664_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      resultingOwnership = _3665_recOwned;
                      readIdents = _3666_recIdents;
                    }
                  } else {
                    {
                      RAST._IType _3667_rhsType;
                      RAST._IType _out966;
                      _out966 = DCOMP.COMP.GenType(_2451_toTpe, true, false);
                      _3667_rhsType = _out966;
                      RAST._IExpr _3668_recursiveGen;
                      DCOMP._IOwnership _3669___v66;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3670_recIdents;
                      RAST._IExpr _out967;
                      DCOMP._IOwnership _out968;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out969;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out967, out _out968, out _out969);
                      _3668_recursiveGen = _out967;
                      _3669___v66 = _out968;
                      _3670_recIdents = _out969;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), (_3668_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()")));
                      resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                      readIdents = _3670_recIdents;
                    }
                  }
                } else if (_source128.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _3671___mcc_h1180 = _source128.dtor_Passthrough_a0;
                  {
                    RAST._IType _3672_rhsType;
                    RAST._IType _out970;
                    _out970 = DCOMP.COMP.GenType(_2451_toTpe, true, false);
                    _3672_rhsType = _out970;
                    RAST._IExpr _3673_recursiveGen;
                    DCOMP._IOwnership _3674___v63;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3675_recIdents;
                    RAST._IExpr _out971;
                    DCOMP._IOwnership _out972;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out973;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out971, out _out972, out _out973);
                    _3673_recursiveGen = _out971;
                    _3674___v63 = _out972;
                    _3675_recIdents = _out973;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_3672_rhsType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), (_3673_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()")));
                    resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                    readIdents = _3675_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3676___mcc_h1182 = _source128.dtor_TypeArg_a0;
                  {
                    RAST._IExpr _3677_recursiveGen;
                    DCOMP._IOwnership _3678_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3679_recIdents;
                    RAST._IExpr _out974;
                    DCOMP._IOwnership _out975;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out976;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out974, out _out975, out _out976);
                    _3677_recursiveGen = _out974;
                    _3678_recOwned = _out975;
                    _3679_recIdents = _out976;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3677_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3678_recOwned;
                    readIdents = _3679_recIdents;
                  }
                }
              } else if (_source127.is_Real) {
                DAST._IType _source132 = _2458___mcc_h339;
                if (_source132.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3680___mcc_h1184 = _source132.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _3681___mcc_h1185 = _source132.dtor_typeArgs;
                  DAST._IResolvedType _3682___mcc_h1186 = _source132.dtor_resolved;
                  DAST._IResolvedType _source133 = _3682___mcc_h1186;
                  if (_source133.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3683___mcc_h1190 = _source133.dtor_path;
                    {
                      RAST._IExpr _3684_recursiveGen;
                      DCOMP._IOwnership _3685_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3686_recIdents;
                      RAST._IExpr _out977;
                      DCOMP._IOwnership _out978;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out979;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out977, out _out978, out _out979);
                      _3684_recursiveGen = _out977;
                      _3685_recOwned = _out978;
                      _3686_recIdents = _out979;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3684_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      resultingOwnership = _3685_recOwned;
                      readIdents = _3686_recIdents;
                    }
                  } else if (_source133.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3687___mcc_h1192 = _source133.dtor_path;
                    {
                      RAST._IExpr _3688_recursiveGen;
                      DCOMP._IOwnership _3689_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3690_recIdents;
                      RAST._IExpr _out980;
                      DCOMP._IOwnership _out981;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out982;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out980, out _out981, out _out982);
                      _3688_recursiveGen = _out980;
                      _3689_recOwned = _out981;
                      _3690_recIdents = _out982;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3688_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      resultingOwnership = _3689_recOwned;
                      readIdents = _3690_recIdents;
                    }
                  } else {
                    DAST._IType _3691___mcc_h1194 = _source133.dtor_baseType;
                    DAST._INewtypeRange _3692___mcc_h1195 = _source133.dtor_range;
                    bool _3693___mcc_h1196 = _source133.dtor_erase;
                    bool _3694_erase = _3693___mcc_h1196;
                    DAST._INewtypeRange _3695_range = _3692___mcc_h1195;
                    DAST._IType _3696_b = _3691___mcc_h1194;
                    {
                      if (object.Equals(_2452_fromTpe, _3696_b)) {
                        RAST._IExpr _3697_recursiveGen;
                        DCOMP._IOwnership _3698_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3699_recIdents;
                        RAST._IExpr _out983;
                        DCOMP._IOwnership _out984;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out985;
                        DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out983, out _out984, out _out985);
                        _3697_recursiveGen = _out983;
                        _3698_recOwned = _out984;
                        _3699_recIdents = _out985;
                        Std.Wrappers._IOption<RAST._IType> _3700_potentialRhsType;
                        _3700_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3696_b, _3695_range);
                        Std.Wrappers._IOption<RAST._IType> _source134 = _3700_potentialRhsType;
                        if (_source134.is_None) {
                          if (_3694_erase) {
                            r = _3697_recursiveGen;
                          } else {
                            RAST._IType _3701_rhsType;
                            RAST._IType _out986;
                            _out986 = DCOMP.COMP.GenType(_2451_toTpe, true, false);
                            _3701_rhsType = _out986;
                            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3701_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3697_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                          }
                          resultingOwnership = _3698_recOwned;
                        } else {
                          RAST._IType _3702___mcc_h1505 = _source134.dtor_value;
                          RAST._IType _3703_v = _3702___mcc_h1505;
                          r = RAST.Expr.create_ConversionNum(_3703_v, _3697_recursiveGen);
                          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                        }
                        readIdents = _3699_recIdents;
                      } else {
                        RAST._IExpr _out987;
                        DCOMP._IOwnership _out988;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out989;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2453_expr, _2452_fromTpe, _3696_b), _3696_b, _2451_toTpe), selfIdent, @params, expectedOwnership, out _out987, out _out988, out _out989);
                        r = _out987;
                        resultingOwnership = _out988;
                        readIdents = _out989;
                      }
                    }
                  }
                } else if (_source132.is_Nullable) {
                  DAST._IType _3704___mcc_h1200 = _source132.dtor_Nullable_a0;
                  {
                    RAST._IExpr _3705_recursiveGen;
                    DCOMP._IOwnership _3706_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3707_recIdents;
                    RAST._IExpr _out990;
                    DCOMP._IOwnership _out991;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out992;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out990, out _out991, out _out992);
                    _3705_recursiveGen = _out990;
                    _3706_recOwned = _out991;
                    _3707_recIdents = _out992;
                    Dafny.ISequence<Dafny.Rune> _3708_s;
                    _3708_s = (_3705_recursiveGen)._ToString(DCOMP.__default.IND);
                    if (object.Equals(_3706_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                      _3708_s = Dafny.Sequence<Dafny.Rune>.Concat(_3708_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    _3708_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3708_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    r = RAST.Expr.create_RawExpr(_3708_s);
                    resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                    readIdents = _3707_recIdents;
                  }
                } else if (_source132.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _3709___mcc_h1202 = _source132.dtor_Tuple_a0;
                  {
                    RAST._IExpr _3710_recursiveGen;
                    DCOMP._IOwnership _3711_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3712_recIdents;
                    RAST._IExpr _out993;
                    DCOMP._IOwnership _out994;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out995;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out993, out _out994, out _out995);
                    _3710_recursiveGen = _out993;
                    _3711_recOwned = _out994;
                    _3712_recIdents = _out995;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3710_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3711_recOwned;
                    readIdents = _3712_recIdents;
                  }
                } else if (_source132.is_Array) {
                  DAST._IType _3713___mcc_h1204 = _source132.dtor_element;
                  BigInteger _3714___mcc_h1205 = _source132.dtor_dims;
                  {
                    RAST._IExpr _3715_recursiveGen;
                    DCOMP._IOwnership _3716_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3717_recIdents;
                    RAST._IExpr _out996;
                    DCOMP._IOwnership _out997;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out998;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out996, out _out997, out _out998);
                    _3715_recursiveGen = _out996;
                    _3716_recOwned = _out997;
                    _3717_recIdents = _out998;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3715_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3716_recOwned;
                    readIdents = _3717_recIdents;
                  }
                } else if (_source132.is_Seq) {
                  DAST._IType _3718___mcc_h1208 = _source132.dtor_element;
                  {
                    RAST._IExpr _3719_recursiveGen;
                    DCOMP._IOwnership _3720_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3721_recIdents;
                    RAST._IExpr _out999;
                    DCOMP._IOwnership _out1000;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1001;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out999, out _out1000, out _out1001);
                    _3719_recursiveGen = _out999;
                    _3720_recOwned = _out1000;
                    _3721_recIdents = _out1001;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3719_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3720_recOwned;
                    readIdents = _3721_recIdents;
                  }
                } else if (_source132.is_Set) {
                  DAST._IType _3722___mcc_h1210 = _source132.dtor_element;
                  {
                    RAST._IExpr _3723_recursiveGen;
                    DCOMP._IOwnership _3724_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3725_recIdents;
                    RAST._IExpr _out1002;
                    DCOMP._IOwnership _out1003;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1004;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1002, out _out1003, out _out1004);
                    _3723_recursiveGen = _out1002;
                    _3724_recOwned = _out1003;
                    _3725_recIdents = _out1004;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3723_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3724_recOwned;
                    readIdents = _3725_recIdents;
                  }
                } else if (_source132.is_Multiset) {
                  DAST._IType _3726___mcc_h1212 = _source132.dtor_element;
                  {
                    RAST._IExpr _3727_recursiveGen;
                    DCOMP._IOwnership _3728_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3729_recIdents;
                    RAST._IExpr _out1005;
                    DCOMP._IOwnership _out1006;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1007;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1005, out _out1006, out _out1007);
                    _3727_recursiveGen = _out1005;
                    _3728_recOwned = _out1006;
                    _3729_recIdents = _out1007;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3727_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3728_recOwned;
                    readIdents = _3729_recIdents;
                  }
                } else if (_source132.is_Map) {
                  DAST._IType _3730___mcc_h1214 = _source132.dtor_key;
                  DAST._IType _3731___mcc_h1215 = _source132.dtor_value;
                  {
                    RAST._IExpr _3732_recursiveGen;
                    DCOMP._IOwnership _3733_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3734_recIdents;
                    RAST._IExpr _out1008;
                    DCOMP._IOwnership _out1009;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1010;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1008, out _out1009, out _out1010);
                    _3732_recursiveGen = _out1008;
                    _3733_recOwned = _out1009;
                    _3734_recIdents = _out1010;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3732_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3733_recOwned;
                    readIdents = _3734_recIdents;
                  }
                } else if (_source132.is_SetBuilder) {
                  DAST._IType _3735___mcc_h1218 = _source132.dtor_element;
                  {
                    RAST._IExpr _3736_recursiveGen;
                    DCOMP._IOwnership _3737_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3738_recIdents;
                    RAST._IExpr _out1011;
                    DCOMP._IOwnership _out1012;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1013;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1011, out _out1012, out _out1013);
                    _3736_recursiveGen = _out1011;
                    _3737_recOwned = _out1012;
                    _3738_recIdents = _out1013;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3736_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3737_recOwned;
                    readIdents = _3738_recIdents;
                  }
                } else if (_source132.is_MapBuilder) {
                  DAST._IType _3739___mcc_h1220 = _source132.dtor_key;
                  DAST._IType _3740___mcc_h1221 = _source132.dtor_value;
                  {
                    RAST._IExpr _3741_recursiveGen;
                    DCOMP._IOwnership _3742_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3743_recIdents;
                    RAST._IExpr _out1014;
                    DCOMP._IOwnership _out1015;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1016;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1014, out _out1015, out _out1016);
                    _3741_recursiveGen = _out1014;
                    _3742_recOwned = _out1015;
                    _3743_recIdents = _out1016;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3741_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3742_recOwned;
                    readIdents = _3743_recIdents;
                  }
                } else if (_source132.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _3744___mcc_h1224 = _source132.dtor_args;
                  DAST._IType _3745___mcc_h1225 = _source132.dtor_result;
                  {
                    RAST._IExpr _3746_recursiveGen;
                    DCOMP._IOwnership _3747_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3748_recIdents;
                    RAST._IExpr _out1017;
                    DCOMP._IOwnership _out1018;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1019;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1017, out _out1018, out _out1019);
                    _3746_recursiveGen = _out1017;
                    _3747_recOwned = _out1018;
                    _3748_recIdents = _out1019;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3746_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3747_recOwned;
                    readIdents = _3748_recIdents;
                  }
                } else if (_source132.is_Primitive) {
                  DAST._IPrimitive _3749___mcc_h1228 = _source132.dtor_Primitive_a0;
                  DAST._IPrimitive _source135 = _3749___mcc_h1228;
                  if (_source135.is_Int) {
                    {
                      RAST._IExpr _3750_recursiveGen;
                      DCOMP._IOwnership _3751___v61;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3752_recIdents;
                      RAST._IExpr _out1020;
                      DCOMP._IOwnership _out1021;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1022;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1020, out _out1021, out _out1022);
                      _3750_recursiveGen = _out1020;
                      _3751___v61 = _out1021;
                      _3752_recIdents = _out1022;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), (_3750_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                      readIdents = _3752_recIdents;
                    }
                  } else if (_source135.is_Real) {
                    {
                      RAST._IExpr _3753_recursiveGen;
                      DCOMP._IOwnership _3754_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3755_recIdents;
                      RAST._IExpr _out1023;
                      DCOMP._IOwnership _out1024;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1025;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1023, out _out1024, out _out1025);
                      _3753_recursiveGen = _out1023;
                      _3754_recOwned = _out1024;
                      _3755_recIdents = _out1025;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3753_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      resultingOwnership = _3754_recOwned;
                      readIdents = _3755_recIdents;
                    }
                  } else if (_source135.is_String) {
                    {
                      RAST._IExpr _3756_recursiveGen;
                      DCOMP._IOwnership _3757_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3758_recIdents;
                      RAST._IExpr _out1026;
                      DCOMP._IOwnership _out1027;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1028;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1026, out _out1027, out _out1028);
                      _3756_recursiveGen = _out1026;
                      _3757_recOwned = _out1027;
                      _3758_recIdents = _out1028;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3756_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      resultingOwnership = _3757_recOwned;
                      readIdents = _3758_recIdents;
                    }
                  } else if (_source135.is_Bool) {
                    {
                      RAST._IExpr _3759_recursiveGen;
                      DCOMP._IOwnership _3760_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3761_recIdents;
                      RAST._IExpr _out1029;
                      DCOMP._IOwnership _out1030;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1031;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1029, out _out1030, out _out1031);
                      _3759_recursiveGen = _out1029;
                      _3760_recOwned = _out1030;
                      _3761_recIdents = _out1031;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3759_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      resultingOwnership = _3760_recOwned;
                      readIdents = _3761_recIdents;
                    }
                  } else {
                    {
                      RAST._IExpr _3762_recursiveGen;
                      DCOMP._IOwnership _3763_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3764_recIdents;
                      RAST._IExpr _out1032;
                      DCOMP._IOwnership _out1033;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1034;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1032, out _out1033, out _out1034);
                      _3762_recursiveGen = _out1032;
                      _3763_recOwned = _out1033;
                      _3764_recIdents = _out1034;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3762_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      resultingOwnership = _3763_recOwned;
                      readIdents = _3764_recIdents;
                    }
                  }
                } else if (_source132.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _3765___mcc_h1230 = _source132.dtor_Passthrough_a0;
                  {
                    RAST._IExpr _3766_recursiveGen;
                    DCOMP._IOwnership _3767_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3768_recIdents;
                    RAST._IExpr _out1035;
                    DCOMP._IOwnership _out1036;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1037;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1035, out _out1036, out _out1037);
                    _3766_recursiveGen = _out1035;
                    _3767_recOwned = _out1036;
                    _3768_recIdents = _out1037;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3766_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3767_recOwned;
                    readIdents = _3768_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3769___mcc_h1232 = _source132.dtor_TypeArg_a0;
                  {
                    RAST._IExpr _3770_recursiveGen;
                    DCOMP._IOwnership _3771_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3772_recIdents;
                    RAST._IExpr _out1038;
                    DCOMP._IOwnership _out1039;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1040;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1038, out _out1039, out _out1040);
                    _3770_recursiveGen = _out1038;
                    _3771_recOwned = _out1039;
                    _3772_recIdents = _out1040;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3770_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3771_recOwned;
                    readIdents = _3772_recIdents;
                  }
                }
              } else if (_source127.is_String) {
                DAST._IType _source136 = _2458___mcc_h339;
                if (_source136.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3773___mcc_h1234 = _source136.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _3774___mcc_h1235 = _source136.dtor_typeArgs;
                  DAST._IResolvedType _3775___mcc_h1236 = _source136.dtor_resolved;
                  DAST._IResolvedType _source137 = _3775___mcc_h1236;
                  if (_source137.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3776___mcc_h1240 = _source137.dtor_path;
                    {
                      RAST._IExpr _3777_recursiveGen;
                      DCOMP._IOwnership _3778_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3779_recIdents;
                      RAST._IExpr _out1041;
                      DCOMP._IOwnership _out1042;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1043;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1041, out _out1042, out _out1043);
                      _3777_recursiveGen = _out1041;
                      _3778_recOwned = _out1042;
                      _3779_recIdents = _out1043;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3777_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      resultingOwnership = _3778_recOwned;
                      readIdents = _3779_recIdents;
                    }
                  } else if (_source137.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3780___mcc_h1242 = _source137.dtor_path;
                    {
                      RAST._IExpr _3781_recursiveGen;
                      DCOMP._IOwnership _3782_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3783_recIdents;
                      RAST._IExpr _out1044;
                      DCOMP._IOwnership _out1045;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1046;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1044, out _out1045, out _out1046);
                      _3781_recursiveGen = _out1044;
                      _3782_recOwned = _out1045;
                      _3783_recIdents = _out1046;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3781_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      resultingOwnership = _3782_recOwned;
                      readIdents = _3783_recIdents;
                    }
                  } else {
                    DAST._IType _3784___mcc_h1244 = _source137.dtor_baseType;
                    DAST._INewtypeRange _3785___mcc_h1245 = _source137.dtor_range;
                    bool _3786___mcc_h1246 = _source137.dtor_erase;
                    bool _3787_erase = _3786___mcc_h1246;
                    DAST._INewtypeRange _3788_range = _3785___mcc_h1245;
                    DAST._IType _3789_b = _3784___mcc_h1244;
                    {
                      if (object.Equals(_2452_fromTpe, _3789_b)) {
                        RAST._IExpr _3790_recursiveGen;
                        DCOMP._IOwnership _3791_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3792_recIdents;
                        RAST._IExpr _out1047;
                        DCOMP._IOwnership _out1048;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1049;
                        DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1047, out _out1048, out _out1049);
                        _3790_recursiveGen = _out1047;
                        _3791_recOwned = _out1048;
                        _3792_recIdents = _out1049;
                        Std.Wrappers._IOption<RAST._IType> _3793_potentialRhsType;
                        _3793_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3789_b, _3788_range);
                        Std.Wrappers._IOption<RAST._IType> _source138 = _3793_potentialRhsType;
                        if (_source138.is_None) {
                          if (_3787_erase) {
                            r = _3790_recursiveGen;
                          } else {
                            RAST._IType _3794_rhsType;
                            RAST._IType _out1050;
                            _out1050 = DCOMP.COMP.GenType(_2451_toTpe, true, false);
                            _3794_rhsType = _out1050;
                            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3794_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3790_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                          }
                          resultingOwnership = _3791_recOwned;
                        } else {
                          RAST._IType _3795___mcc_h1506 = _source138.dtor_value;
                          RAST._IType _3796_v = _3795___mcc_h1506;
                          r = RAST.Expr.create_ConversionNum(_3796_v, _3790_recursiveGen);
                          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                        }
                        readIdents = _3792_recIdents;
                      } else {
                        RAST._IExpr _out1051;
                        DCOMP._IOwnership _out1052;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1053;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2453_expr, _2452_fromTpe, _3789_b), _3789_b, _2451_toTpe), selfIdent, @params, expectedOwnership, out _out1051, out _out1052, out _out1053);
                        r = _out1051;
                        resultingOwnership = _out1052;
                        readIdents = _out1053;
                      }
                    }
                  }
                } else if (_source136.is_Nullable) {
                  DAST._IType _3797___mcc_h1250 = _source136.dtor_Nullable_a0;
                  {
                    RAST._IExpr _3798_recursiveGen;
                    DCOMP._IOwnership _3799_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3800_recIdents;
                    RAST._IExpr _out1054;
                    DCOMP._IOwnership _out1055;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1056;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1054, out _out1055, out _out1056);
                    _3798_recursiveGen = _out1054;
                    _3799_recOwned = _out1055;
                    _3800_recIdents = _out1056;
                    Dafny.ISequence<Dafny.Rune> _3801_s;
                    _3801_s = (_3798_recursiveGen)._ToString(DCOMP.__default.IND);
                    if (object.Equals(_3799_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                      _3801_s = Dafny.Sequence<Dafny.Rune>.Concat(_3801_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    _3801_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3801_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    r = RAST.Expr.create_RawExpr(_3801_s);
                    resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                    readIdents = _3800_recIdents;
                  }
                } else if (_source136.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _3802___mcc_h1252 = _source136.dtor_Tuple_a0;
                  {
                    RAST._IExpr _3803_recursiveGen;
                    DCOMP._IOwnership _3804_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3805_recIdents;
                    RAST._IExpr _out1057;
                    DCOMP._IOwnership _out1058;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1059;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1057, out _out1058, out _out1059);
                    _3803_recursiveGen = _out1057;
                    _3804_recOwned = _out1058;
                    _3805_recIdents = _out1059;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3803_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3804_recOwned;
                    readIdents = _3805_recIdents;
                  }
                } else if (_source136.is_Array) {
                  DAST._IType _3806___mcc_h1254 = _source136.dtor_element;
                  BigInteger _3807___mcc_h1255 = _source136.dtor_dims;
                  {
                    RAST._IExpr _3808_recursiveGen;
                    DCOMP._IOwnership _3809_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3810_recIdents;
                    RAST._IExpr _out1060;
                    DCOMP._IOwnership _out1061;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1062;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1060, out _out1061, out _out1062);
                    _3808_recursiveGen = _out1060;
                    _3809_recOwned = _out1061;
                    _3810_recIdents = _out1062;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3808_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3809_recOwned;
                    readIdents = _3810_recIdents;
                  }
                } else if (_source136.is_Seq) {
                  DAST._IType _3811___mcc_h1258 = _source136.dtor_element;
                  {
                    RAST._IExpr _3812_recursiveGen;
                    DCOMP._IOwnership _3813_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3814_recIdents;
                    RAST._IExpr _out1063;
                    DCOMP._IOwnership _out1064;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1065;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1063, out _out1064, out _out1065);
                    _3812_recursiveGen = _out1063;
                    _3813_recOwned = _out1064;
                    _3814_recIdents = _out1065;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3812_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3813_recOwned;
                    readIdents = _3814_recIdents;
                  }
                } else if (_source136.is_Set) {
                  DAST._IType _3815___mcc_h1260 = _source136.dtor_element;
                  {
                    RAST._IExpr _3816_recursiveGen;
                    DCOMP._IOwnership _3817_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3818_recIdents;
                    RAST._IExpr _out1066;
                    DCOMP._IOwnership _out1067;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1068;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1066, out _out1067, out _out1068);
                    _3816_recursiveGen = _out1066;
                    _3817_recOwned = _out1067;
                    _3818_recIdents = _out1068;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3816_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3817_recOwned;
                    readIdents = _3818_recIdents;
                  }
                } else if (_source136.is_Multiset) {
                  DAST._IType _3819___mcc_h1262 = _source136.dtor_element;
                  {
                    RAST._IExpr _3820_recursiveGen;
                    DCOMP._IOwnership _3821_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3822_recIdents;
                    RAST._IExpr _out1069;
                    DCOMP._IOwnership _out1070;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1071;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1069, out _out1070, out _out1071);
                    _3820_recursiveGen = _out1069;
                    _3821_recOwned = _out1070;
                    _3822_recIdents = _out1071;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3820_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3821_recOwned;
                    readIdents = _3822_recIdents;
                  }
                } else if (_source136.is_Map) {
                  DAST._IType _3823___mcc_h1264 = _source136.dtor_key;
                  DAST._IType _3824___mcc_h1265 = _source136.dtor_value;
                  {
                    RAST._IExpr _3825_recursiveGen;
                    DCOMP._IOwnership _3826_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3827_recIdents;
                    RAST._IExpr _out1072;
                    DCOMP._IOwnership _out1073;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1074;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1072, out _out1073, out _out1074);
                    _3825_recursiveGen = _out1072;
                    _3826_recOwned = _out1073;
                    _3827_recIdents = _out1074;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3825_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3826_recOwned;
                    readIdents = _3827_recIdents;
                  }
                } else if (_source136.is_SetBuilder) {
                  DAST._IType _3828___mcc_h1268 = _source136.dtor_element;
                  {
                    RAST._IExpr _3829_recursiveGen;
                    DCOMP._IOwnership _3830_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3831_recIdents;
                    RAST._IExpr _out1075;
                    DCOMP._IOwnership _out1076;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1077;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1075, out _out1076, out _out1077);
                    _3829_recursiveGen = _out1075;
                    _3830_recOwned = _out1076;
                    _3831_recIdents = _out1077;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3829_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3830_recOwned;
                    readIdents = _3831_recIdents;
                  }
                } else if (_source136.is_MapBuilder) {
                  DAST._IType _3832___mcc_h1270 = _source136.dtor_key;
                  DAST._IType _3833___mcc_h1271 = _source136.dtor_value;
                  {
                    RAST._IExpr _3834_recursiveGen;
                    DCOMP._IOwnership _3835_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3836_recIdents;
                    RAST._IExpr _out1078;
                    DCOMP._IOwnership _out1079;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1080;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1078, out _out1079, out _out1080);
                    _3834_recursiveGen = _out1078;
                    _3835_recOwned = _out1079;
                    _3836_recIdents = _out1080;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3834_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3835_recOwned;
                    readIdents = _3836_recIdents;
                  }
                } else if (_source136.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _3837___mcc_h1274 = _source136.dtor_args;
                  DAST._IType _3838___mcc_h1275 = _source136.dtor_result;
                  {
                    RAST._IExpr _3839_recursiveGen;
                    DCOMP._IOwnership _3840_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3841_recIdents;
                    RAST._IExpr _out1081;
                    DCOMP._IOwnership _out1082;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1083;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1081, out _out1082, out _out1083);
                    _3839_recursiveGen = _out1081;
                    _3840_recOwned = _out1082;
                    _3841_recIdents = _out1083;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3839_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3840_recOwned;
                    readIdents = _3841_recIdents;
                  }
                } else if (_source136.is_Primitive) {
                  DAST._IPrimitive _3842___mcc_h1278 = _source136.dtor_Primitive_a0;
                  {
                    RAST._IExpr _3843_recursiveGen;
                    DCOMP._IOwnership _3844_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3845_recIdents;
                    RAST._IExpr _out1084;
                    DCOMP._IOwnership _out1085;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1086;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1084, out _out1085, out _out1086);
                    _3843_recursiveGen = _out1084;
                    _3844_recOwned = _out1085;
                    _3845_recIdents = _out1086;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3843_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3844_recOwned;
                    readIdents = _3845_recIdents;
                  }
                } else if (_source136.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _3846___mcc_h1280 = _source136.dtor_Passthrough_a0;
                  {
                    RAST._IExpr _3847_recursiveGen;
                    DCOMP._IOwnership _3848_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3849_recIdents;
                    RAST._IExpr _out1087;
                    DCOMP._IOwnership _out1088;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1089;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1087, out _out1088, out _out1089);
                    _3847_recursiveGen = _out1087;
                    _3848_recOwned = _out1088;
                    _3849_recIdents = _out1089;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3847_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3848_recOwned;
                    readIdents = _3849_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3850___mcc_h1282 = _source136.dtor_TypeArg_a0;
                  {
                    RAST._IExpr _3851_recursiveGen;
                    DCOMP._IOwnership _3852_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3853_recIdents;
                    RAST._IExpr _out1090;
                    DCOMP._IOwnership _out1091;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1092;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1090, out _out1091, out _out1092);
                    _3851_recursiveGen = _out1090;
                    _3852_recOwned = _out1091;
                    _3853_recIdents = _out1092;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3851_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3852_recOwned;
                    readIdents = _3853_recIdents;
                  }
                }
              } else if (_source127.is_Bool) {
                DAST._IType _source139 = _2458___mcc_h339;
                if (_source139.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3854___mcc_h1284 = _source139.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _3855___mcc_h1285 = _source139.dtor_typeArgs;
                  DAST._IResolvedType _3856___mcc_h1286 = _source139.dtor_resolved;
                  DAST._IResolvedType _source140 = _3856___mcc_h1286;
                  if (_source140.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3857___mcc_h1290 = _source140.dtor_path;
                    {
                      RAST._IExpr _3858_recursiveGen;
                      DCOMP._IOwnership _3859_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3860_recIdents;
                      RAST._IExpr _out1093;
                      DCOMP._IOwnership _out1094;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1095;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1093, out _out1094, out _out1095);
                      _3858_recursiveGen = _out1093;
                      _3859_recOwned = _out1094;
                      _3860_recIdents = _out1095;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3858_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      resultingOwnership = _3859_recOwned;
                      readIdents = _3860_recIdents;
                    }
                  } else if (_source140.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3861___mcc_h1292 = _source140.dtor_path;
                    {
                      RAST._IExpr _3862_recursiveGen;
                      DCOMP._IOwnership _3863_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3864_recIdents;
                      RAST._IExpr _out1096;
                      DCOMP._IOwnership _out1097;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1098;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1096, out _out1097, out _out1098);
                      _3862_recursiveGen = _out1096;
                      _3863_recOwned = _out1097;
                      _3864_recIdents = _out1098;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3862_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      resultingOwnership = _3863_recOwned;
                      readIdents = _3864_recIdents;
                    }
                  } else {
                    DAST._IType _3865___mcc_h1294 = _source140.dtor_baseType;
                    DAST._INewtypeRange _3866___mcc_h1295 = _source140.dtor_range;
                    bool _3867___mcc_h1296 = _source140.dtor_erase;
                    bool _3868_erase = _3867___mcc_h1296;
                    DAST._INewtypeRange _3869_range = _3866___mcc_h1295;
                    DAST._IType _3870_b = _3865___mcc_h1294;
                    {
                      if (object.Equals(_2452_fromTpe, _3870_b)) {
                        RAST._IExpr _3871_recursiveGen;
                        DCOMP._IOwnership _3872_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3873_recIdents;
                        RAST._IExpr _out1099;
                        DCOMP._IOwnership _out1100;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1101;
                        DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1099, out _out1100, out _out1101);
                        _3871_recursiveGen = _out1099;
                        _3872_recOwned = _out1100;
                        _3873_recIdents = _out1101;
                        Std.Wrappers._IOption<RAST._IType> _3874_potentialRhsType;
                        _3874_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3870_b, _3869_range);
                        Std.Wrappers._IOption<RAST._IType> _source141 = _3874_potentialRhsType;
                        if (_source141.is_None) {
                          if (_3868_erase) {
                            r = _3871_recursiveGen;
                          } else {
                            RAST._IType _3875_rhsType;
                            RAST._IType _out1102;
                            _out1102 = DCOMP.COMP.GenType(_2451_toTpe, true, false);
                            _3875_rhsType = _out1102;
                            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3875_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3871_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                          }
                          resultingOwnership = _3872_recOwned;
                        } else {
                          RAST._IType _3876___mcc_h1507 = _source141.dtor_value;
                          RAST._IType _3877_v = _3876___mcc_h1507;
                          r = RAST.Expr.create_ConversionNum(_3877_v, _3871_recursiveGen);
                          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                        }
                        readIdents = _3873_recIdents;
                      } else {
                        RAST._IExpr _out1103;
                        DCOMP._IOwnership _out1104;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1105;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2453_expr, _2452_fromTpe, _3870_b), _3870_b, _2451_toTpe), selfIdent, @params, expectedOwnership, out _out1103, out _out1104, out _out1105);
                        r = _out1103;
                        resultingOwnership = _out1104;
                        readIdents = _out1105;
                      }
                    }
                  }
                } else if (_source139.is_Nullable) {
                  DAST._IType _3878___mcc_h1300 = _source139.dtor_Nullable_a0;
                  {
                    RAST._IExpr _3879_recursiveGen;
                    DCOMP._IOwnership _3880_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3881_recIdents;
                    RAST._IExpr _out1106;
                    DCOMP._IOwnership _out1107;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1108;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1106, out _out1107, out _out1108);
                    _3879_recursiveGen = _out1106;
                    _3880_recOwned = _out1107;
                    _3881_recIdents = _out1108;
                    Dafny.ISequence<Dafny.Rune> _3882_s;
                    _3882_s = (_3879_recursiveGen)._ToString(DCOMP.__default.IND);
                    if (object.Equals(_3880_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                      _3882_s = Dafny.Sequence<Dafny.Rune>.Concat(_3882_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    _3882_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3882_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    r = RAST.Expr.create_RawExpr(_3882_s);
                    resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                    readIdents = _3881_recIdents;
                  }
                } else if (_source139.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _3883___mcc_h1302 = _source139.dtor_Tuple_a0;
                  {
                    RAST._IExpr _3884_recursiveGen;
                    DCOMP._IOwnership _3885_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3886_recIdents;
                    RAST._IExpr _out1109;
                    DCOMP._IOwnership _out1110;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1111;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1109, out _out1110, out _out1111);
                    _3884_recursiveGen = _out1109;
                    _3885_recOwned = _out1110;
                    _3886_recIdents = _out1111;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3884_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3885_recOwned;
                    readIdents = _3886_recIdents;
                  }
                } else if (_source139.is_Array) {
                  DAST._IType _3887___mcc_h1304 = _source139.dtor_element;
                  BigInteger _3888___mcc_h1305 = _source139.dtor_dims;
                  {
                    RAST._IExpr _3889_recursiveGen;
                    DCOMP._IOwnership _3890_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3891_recIdents;
                    RAST._IExpr _out1112;
                    DCOMP._IOwnership _out1113;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1114;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1112, out _out1113, out _out1114);
                    _3889_recursiveGen = _out1112;
                    _3890_recOwned = _out1113;
                    _3891_recIdents = _out1114;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3889_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3890_recOwned;
                    readIdents = _3891_recIdents;
                  }
                } else if (_source139.is_Seq) {
                  DAST._IType _3892___mcc_h1308 = _source139.dtor_element;
                  {
                    RAST._IExpr _3893_recursiveGen;
                    DCOMP._IOwnership _3894_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3895_recIdents;
                    RAST._IExpr _out1115;
                    DCOMP._IOwnership _out1116;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1117;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1115, out _out1116, out _out1117);
                    _3893_recursiveGen = _out1115;
                    _3894_recOwned = _out1116;
                    _3895_recIdents = _out1117;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3893_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3894_recOwned;
                    readIdents = _3895_recIdents;
                  }
                } else if (_source139.is_Set) {
                  DAST._IType _3896___mcc_h1310 = _source139.dtor_element;
                  {
                    RAST._IExpr _3897_recursiveGen;
                    DCOMP._IOwnership _3898_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3899_recIdents;
                    RAST._IExpr _out1118;
                    DCOMP._IOwnership _out1119;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1120;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1118, out _out1119, out _out1120);
                    _3897_recursiveGen = _out1118;
                    _3898_recOwned = _out1119;
                    _3899_recIdents = _out1120;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3897_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3898_recOwned;
                    readIdents = _3899_recIdents;
                  }
                } else if (_source139.is_Multiset) {
                  DAST._IType _3900___mcc_h1312 = _source139.dtor_element;
                  {
                    RAST._IExpr _3901_recursiveGen;
                    DCOMP._IOwnership _3902_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3903_recIdents;
                    RAST._IExpr _out1121;
                    DCOMP._IOwnership _out1122;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1123;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1121, out _out1122, out _out1123);
                    _3901_recursiveGen = _out1121;
                    _3902_recOwned = _out1122;
                    _3903_recIdents = _out1123;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3901_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3902_recOwned;
                    readIdents = _3903_recIdents;
                  }
                } else if (_source139.is_Map) {
                  DAST._IType _3904___mcc_h1314 = _source139.dtor_key;
                  DAST._IType _3905___mcc_h1315 = _source139.dtor_value;
                  {
                    RAST._IExpr _3906_recursiveGen;
                    DCOMP._IOwnership _3907_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3908_recIdents;
                    RAST._IExpr _out1124;
                    DCOMP._IOwnership _out1125;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1126;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1124, out _out1125, out _out1126);
                    _3906_recursiveGen = _out1124;
                    _3907_recOwned = _out1125;
                    _3908_recIdents = _out1126;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3906_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3907_recOwned;
                    readIdents = _3908_recIdents;
                  }
                } else if (_source139.is_SetBuilder) {
                  DAST._IType _3909___mcc_h1318 = _source139.dtor_element;
                  {
                    RAST._IExpr _3910_recursiveGen;
                    DCOMP._IOwnership _3911_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3912_recIdents;
                    RAST._IExpr _out1127;
                    DCOMP._IOwnership _out1128;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1129;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1127, out _out1128, out _out1129);
                    _3910_recursiveGen = _out1127;
                    _3911_recOwned = _out1128;
                    _3912_recIdents = _out1129;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3910_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3911_recOwned;
                    readIdents = _3912_recIdents;
                  }
                } else if (_source139.is_MapBuilder) {
                  DAST._IType _3913___mcc_h1320 = _source139.dtor_key;
                  DAST._IType _3914___mcc_h1321 = _source139.dtor_value;
                  {
                    RAST._IExpr _3915_recursiveGen;
                    DCOMP._IOwnership _3916_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3917_recIdents;
                    RAST._IExpr _out1130;
                    DCOMP._IOwnership _out1131;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1132;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1130, out _out1131, out _out1132);
                    _3915_recursiveGen = _out1130;
                    _3916_recOwned = _out1131;
                    _3917_recIdents = _out1132;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3915_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3916_recOwned;
                    readIdents = _3917_recIdents;
                  }
                } else if (_source139.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _3918___mcc_h1324 = _source139.dtor_args;
                  DAST._IType _3919___mcc_h1325 = _source139.dtor_result;
                  {
                    RAST._IExpr _3920_recursiveGen;
                    DCOMP._IOwnership _3921_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3922_recIdents;
                    RAST._IExpr _out1133;
                    DCOMP._IOwnership _out1134;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1135;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1133, out _out1134, out _out1135);
                    _3920_recursiveGen = _out1133;
                    _3921_recOwned = _out1134;
                    _3922_recIdents = _out1135;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3920_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3921_recOwned;
                    readIdents = _3922_recIdents;
                  }
                } else if (_source139.is_Primitive) {
                  DAST._IPrimitive _3923___mcc_h1328 = _source139.dtor_Primitive_a0;
                  {
                    RAST._IExpr _3924_recursiveGen;
                    DCOMP._IOwnership _3925_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3926_recIdents;
                    RAST._IExpr _out1136;
                    DCOMP._IOwnership _out1137;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1138;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1136, out _out1137, out _out1138);
                    _3924_recursiveGen = _out1136;
                    _3925_recOwned = _out1137;
                    _3926_recIdents = _out1138;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3924_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3925_recOwned;
                    readIdents = _3926_recIdents;
                  }
                } else if (_source139.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _3927___mcc_h1330 = _source139.dtor_Passthrough_a0;
                  {
                    RAST._IExpr _3928_recursiveGen;
                    DCOMP._IOwnership _3929_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3930_recIdents;
                    RAST._IExpr _out1139;
                    DCOMP._IOwnership _out1140;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1141;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1139, out _out1140, out _out1141);
                    _3928_recursiveGen = _out1139;
                    _3929_recOwned = _out1140;
                    _3930_recIdents = _out1141;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3928_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3929_recOwned;
                    readIdents = _3930_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3931___mcc_h1332 = _source139.dtor_TypeArg_a0;
                  {
                    RAST._IExpr _3932_recursiveGen;
                    DCOMP._IOwnership _3933_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3934_recIdents;
                    RAST._IExpr _out1142;
                    DCOMP._IOwnership _out1143;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1144;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1142, out _out1143, out _out1144);
                    _3932_recursiveGen = _out1142;
                    _3933_recOwned = _out1143;
                    _3934_recIdents = _out1144;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3932_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3933_recOwned;
                    readIdents = _3934_recIdents;
                  }
                }
              } else {
                DAST._IType _source142 = _2458___mcc_h339;
                if (_source142.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3935___mcc_h1334 = _source142.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _3936___mcc_h1335 = _source142.dtor_typeArgs;
                  DAST._IResolvedType _3937___mcc_h1336 = _source142.dtor_resolved;
                  DAST._IResolvedType _source143 = _3937___mcc_h1336;
                  if (_source143.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3938___mcc_h1340 = _source143.dtor_path;
                    {
                      RAST._IExpr _3939_recursiveGen;
                      DCOMP._IOwnership _3940_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3941_recIdents;
                      RAST._IExpr _out1145;
                      DCOMP._IOwnership _out1146;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1147;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1145, out _out1146, out _out1147);
                      _3939_recursiveGen = _out1145;
                      _3940_recOwned = _out1146;
                      _3941_recIdents = _out1147;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3939_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      resultingOwnership = _3940_recOwned;
                      readIdents = _3941_recIdents;
                    }
                  } else if (_source143.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3942___mcc_h1342 = _source143.dtor_path;
                    {
                      RAST._IExpr _3943_recursiveGen;
                      DCOMP._IOwnership _3944_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3945_recIdents;
                      RAST._IExpr _out1148;
                      DCOMP._IOwnership _out1149;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1150;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1148, out _out1149, out _out1150);
                      _3943_recursiveGen = _out1148;
                      _3944_recOwned = _out1149;
                      _3945_recIdents = _out1150;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3943_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      resultingOwnership = _3944_recOwned;
                      readIdents = _3945_recIdents;
                    }
                  } else {
                    DAST._IType _3946___mcc_h1344 = _source143.dtor_baseType;
                    DAST._INewtypeRange _3947___mcc_h1345 = _source143.dtor_range;
                    bool _3948___mcc_h1346 = _source143.dtor_erase;
                    bool _3949_erase = _3948___mcc_h1346;
                    DAST._INewtypeRange _3950_range = _3947___mcc_h1345;
                    DAST._IType _3951_b = _3946___mcc_h1344;
                    {
                      if (object.Equals(_2452_fromTpe, _3951_b)) {
                        RAST._IExpr _3952_recursiveGen;
                        DCOMP._IOwnership _3953_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3954_recIdents;
                        RAST._IExpr _out1151;
                        DCOMP._IOwnership _out1152;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1153;
                        DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1151, out _out1152, out _out1153);
                        _3952_recursiveGen = _out1151;
                        _3953_recOwned = _out1152;
                        _3954_recIdents = _out1153;
                        Std.Wrappers._IOption<RAST._IType> _3955_potentialRhsType;
                        _3955_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3951_b, _3950_range);
                        Std.Wrappers._IOption<RAST._IType> _source144 = _3955_potentialRhsType;
                        if (_source144.is_None) {
                          if (_3949_erase) {
                            r = _3952_recursiveGen;
                          } else {
                            RAST._IType _3956_rhsType;
                            RAST._IType _out1154;
                            _out1154 = DCOMP.COMP.GenType(_2451_toTpe, true, false);
                            _3956_rhsType = _out1154;
                            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3956_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3952_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                          }
                          resultingOwnership = _3953_recOwned;
                        } else {
                          RAST._IType _3957___mcc_h1508 = _source144.dtor_value;
                          RAST._IType _3958_v = _3957___mcc_h1508;
                          r = RAST.Expr.create_ConversionNum(_3958_v, _3952_recursiveGen);
                          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                        }
                        readIdents = _3954_recIdents;
                      } else {
                        RAST._IExpr _out1155;
                        DCOMP._IOwnership _out1156;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1157;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2453_expr, _2452_fromTpe, _3951_b), _3951_b, _2451_toTpe), selfIdent, @params, expectedOwnership, out _out1155, out _out1156, out _out1157);
                        r = _out1155;
                        resultingOwnership = _out1156;
                        readIdents = _out1157;
                      }
                    }
                  }
                } else if (_source142.is_Nullable) {
                  DAST._IType _3959___mcc_h1350 = _source142.dtor_Nullable_a0;
                  {
                    RAST._IExpr _3960_recursiveGen;
                    DCOMP._IOwnership _3961_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3962_recIdents;
                    RAST._IExpr _out1158;
                    DCOMP._IOwnership _out1159;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1160;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1158, out _out1159, out _out1160);
                    _3960_recursiveGen = _out1158;
                    _3961_recOwned = _out1159;
                    _3962_recIdents = _out1160;
                    Dafny.ISequence<Dafny.Rune> _3963_s;
                    _3963_s = (_3960_recursiveGen)._ToString(DCOMP.__default.IND);
                    if (object.Equals(_3961_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                      _3963_s = Dafny.Sequence<Dafny.Rune>.Concat(_3963_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    _3963_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3963_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    r = RAST.Expr.create_RawExpr(_3963_s);
                    resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                    readIdents = _3962_recIdents;
                  }
                } else if (_source142.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _3964___mcc_h1352 = _source142.dtor_Tuple_a0;
                  {
                    RAST._IExpr _3965_recursiveGen;
                    DCOMP._IOwnership _3966_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3967_recIdents;
                    RAST._IExpr _out1161;
                    DCOMP._IOwnership _out1162;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1163;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1161, out _out1162, out _out1163);
                    _3965_recursiveGen = _out1161;
                    _3966_recOwned = _out1162;
                    _3967_recIdents = _out1163;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3965_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3966_recOwned;
                    readIdents = _3967_recIdents;
                  }
                } else if (_source142.is_Array) {
                  DAST._IType _3968___mcc_h1354 = _source142.dtor_element;
                  BigInteger _3969___mcc_h1355 = _source142.dtor_dims;
                  {
                    RAST._IExpr _3970_recursiveGen;
                    DCOMP._IOwnership _3971_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3972_recIdents;
                    RAST._IExpr _out1164;
                    DCOMP._IOwnership _out1165;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1166;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1164, out _out1165, out _out1166);
                    _3970_recursiveGen = _out1164;
                    _3971_recOwned = _out1165;
                    _3972_recIdents = _out1166;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3970_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3971_recOwned;
                    readIdents = _3972_recIdents;
                  }
                } else if (_source142.is_Seq) {
                  DAST._IType _3973___mcc_h1358 = _source142.dtor_element;
                  {
                    RAST._IExpr _3974_recursiveGen;
                    DCOMP._IOwnership _3975_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3976_recIdents;
                    RAST._IExpr _out1167;
                    DCOMP._IOwnership _out1168;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1169;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1167, out _out1168, out _out1169);
                    _3974_recursiveGen = _out1167;
                    _3975_recOwned = _out1168;
                    _3976_recIdents = _out1169;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3974_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3975_recOwned;
                    readIdents = _3976_recIdents;
                  }
                } else if (_source142.is_Set) {
                  DAST._IType _3977___mcc_h1360 = _source142.dtor_element;
                  {
                    RAST._IExpr _3978_recursiveGen;
                    DCOMP._IOwnership _3979_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3980_recIdents;
                    RAST._IExpr _out1170;
                    DCOMP._IOwnership _out1171;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1172;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1170, out _out1171, out _out1172);
                    _3978_recursiveGen = _out1170;
                    _3979_recOwned = _out1171;
                    _3980_recIdents = _out1172;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3978_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3979_recOwned;
                    readIdents = _3980_recIdents;
                  }
                } else if (_source142.is_Multiset) {
                  DAST._IType _3981___mcc_h1362 = _source142.dtor_element;
                  {
                    RAST._IExpr _3982_recursiveGen;
                    DCOMP._IOwnership _3983_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3984_recIdents;
                    RAST._IExpr _out1173;
                    DCOMP._IOwnership _out1174;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1175;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1173, out _out1174, out _out1175);
                    _3982_recursiveGen = _out1173;
                    _3983_recOwned = _out1174;
                    _3984_recIdents = _out1175;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3982_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3983_recOwned;
                    readIdents = _3984_recIdents;
                  }
                } else if (_source142.is_Map) {
                  DAST._IType _3985___mcc_h1364 = _source142.dtor_key;
                  DAST._IType _3986___mcc_h1365 = _source142.dtor_value;
                  {
                    RAST._IExpr _3987_recursiveGen;
                    DCOMP._IOwnership _3988_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3989_recIdents;
                    RAST._IExpr _out1176;
                    DCOMP._IOwnership _out1177;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1178;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1176, out _out1177, out _out1178);
                    _3987_recursiveGen = _out1176;
                    _3988_recOwned = _out1177;
                    _3989_recIdents = _out1178;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3987_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3988_recOwned;
                    readIdents = _3989_recIdents;
                  }
                } else if (_source142.is_SetBuilder) {
                  DAST._IType _3990___mcc_h1368 = _source142.dtor_element;
                  {
                    RAST._IExpr _3991_recursiveGen;
                    DCOMP._IOwnership _3992_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3993_recIdents;
                    RAST._IExpr _out1179;
                    DCOMP._IOwnership _out1180;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1181;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1179, out _out1180, out _out1181);
                    _3991_recursiveGen = _out1179;
                    _3992_recOwned = _out1180;
                    _3993_recIdents = _out1181;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3991_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3992_recOwned;
                    readIdents = _3993_recIdents;
                  }
                } else if (_source142.is_MapBuilder) {
                  DAST._IType _3994___mcc_h1370 = _source142.dtor_key;
                  DAST._IType _3995___mcc_h1371 = _source142.dtor_value;
                  {
                    RAST._IExpr _3996_recursiveGen;
                    DCOMP._IOwnership _3997_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3998_recIdents;
                    RAST._IExpr _out1182;
                    DCOMP._IOwnership _out1183;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1184;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1182, out _out1183, out _out1184);
                    _3996_recursiveGen = _out1182;
                    _3997_recOwned = _out1183;
                    _3998_recIdents = _out1184;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3996_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _3997_recOwned;
                    readIdents = _3998_recIdents;
                  }
                } else if (_source142.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _3999___mcc_h1374 = _source142.dtor_args;
                  DAST._IType _4000___mcc_h1375 = _source142.dtor_result;
                  {
                    RAST._IExpr _4001_recursiveGen;
                    DCOMP._IOwnership _4002_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4003_recIdents;
                    RAST._IExpr _out1185;
                    DCOMP._IOwnership _out1186;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1187;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1185, out _out1186, out _out1187);
                    _4001_recursiveGen = _out1185;
                    _4002_recOwned = _out1186;
                    _4003_recIdents = _out1187;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4001_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _4002_recOwned;
                    readIdents = _4003_recIdents;
                  }
                } else if (_source142.is_Primitive) {
                  DAST._IPrimitive _4004___mcc_h1378 = _source142.dtor_Primitive_a0;
                  DAST._IPrimitive _source145 = _4004___mcc_h1378;
                  if (_source145.is_Int) {
                    {
                      RAST._IType _4005_rhsType;
                      RAST._IType _out1188;
                      _out1188 = DCOMP.COMP.GenType(_2452_fromTpe, true, false);
                      _4005_rhsType = _out1188;
                      RAST._IExpr _4006_recursiveGen;
                      DCOMP._IOwnership _4007___v67;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4008_recIdents;
                      RAST._IExpr _out1189;
                      DCOMP._IOwnership _out1190;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1191;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1189, out _out1190, out _out1191);
                      _4006_recursiveGen = _out1189;
                      _4007___v67 = _out1190;
                      _4008_recIdents = _out1191;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyInt{data: ::BigInt::from("), (_4006_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u32)}")));
                      resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                      readIdents = _4008_recIdents;
                    }
                  } else if (_source145.is_Real) {
                    {
                      RAST._IExpr _4009_recursiveGen;
                      DCOMP._IOwnership _4010_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4011_recIdents;
                      RAST._IExpr _out1192;
                      DCOMP._IOwnership _out1193;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1194;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1192, out _out1193, out _out1194);
                      _4009_recursiveGen = _out1192;
                      _4010_recOwned = _out1193;
                      _4011_recIdents = _out1194;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4009_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      resultingOwnership = _4010_recOwned;
                      readIdents = _4011_recIdents;
                    }
                  } else if (_source145.is_String) {
                    {
                      RAST._IExpr _4012_recursiveGen;
                      DCOMP._IOwnership _4013_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4014_recIdents;
                      RAST._IExpr _out1195;
                      DCOMP._IOwnership _out1196;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1197;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1195, out _out1196, out _out1197);
                      _4012_recursiveGen = _out1195;
                      _4013_recOwned = _out1196;
                      _4014_recIdents = _out1197;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4012_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      resultingOwnership = _4013_recOwned;
                      readIdents = _4014_recIdents;
                    }
                  } else if (_source145.is_Bool) {
                    {
                      RAST._IExpr _4015_recursiveGen;
                      DCOMP._IOwnership _4016_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4017_recIdents;
                      RAST._IExpr _out1198;
                      DCOMP._IOwnership _out1199;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1200;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1198, out _out1199, out _out1200);
                      _4015_recursiveGen = _out1198;
                      _4016_recOwned = _out1199;
                      _4017_recIdents = _out1200;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4015_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      resultingOwnership = _4016_recOwned;
                      readIdents = _4017_recIdents;
                    }
                  } else {
                    {
                      RAST._IExpr _4018_recursiveGen;
                      DCOMP._IOwnership _4019_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4020_recIdents;
                      RAST._IExpr _out1201;
                      DCOMP._IOwnership _out1202;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1203;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1201, out _out1202, out _out1203);
                      _4018_recursiveGen = _out1201;
                      _4019_recOwned = _out1202;
                      _4020_recIdents = _out1203;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4018_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      resultingOwnership = _4019_recOwned;
                      readIdents = _4020_recIdents;
                    }
                  }
                } else if (_source142.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _4021___mcc_h1380 = _source142.dtor_Passthrough_a0;
                  {
                    RAST._IExpr _4022_recursiveGen;
                    DCOMP._IOwnership _4023_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4024_recIdents;
                    RAST._IExpr _out1204;
                    DCOMP._IOwnership _out1205;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1206;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1204, out _out1205, out _out1206);
                    _4022_recursiveGen = _out1204;
                    _4023_recOwned = _out1205;
                    _4024_recIdents = _out1206;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4022_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _4023_recOwned;
                    readIdents = _4024_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _4025___mcc_h1382 = _source142.dtor_TypeArg_a0;
                  {
                    RAST._IExpr _4026_recursiveGen;
                    DCOMP._IOwnership _4027_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4028_recIdents;
                    RAST._IExpr _out1207;
                    DCOMP._IOwnership _out1208;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1209;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1207, out _out1208, out _out1209);
                    _4026_recursiveGen = _out1207;
                    _4027_recOwned = _out1208;
                    _4028_recIdents = _out1209;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4026_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _4027_recOwned;
                    readIdents = _4028_recIdents;
                  }
                }
              }
            } else if (_source87.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _4029___mcc_h1384 = _source87.dtor_Passthrough_a0;
              DAST._IType _source146 = _2458___mcc_h339;
              if (_source146.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4030___mcc_h1388 = _source146.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _4031___mcc_h1389 = _source146.dtor_typeArgs;
                DAST._IResolvedType _4032___mcc_h1390 = _source146.dtor_resolved;
                DAST._IResolvedType _source147 = _4032___mcc_h1390;
                if (_source147.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4033___mcc_h1394 = _source147.dtor_path;
                  {
                    RAST._IExpr _4034_recursiveGen;
                    DCOMP._IOwnership _4035_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4036_recIdents;
                    RAST._IExpr _out1210;
                    DCOMP._IOwnership _out1211;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1212;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1210, out _out1211, out _out1212);
                    _4034_recursiveGen = _out1210;
                    _4035_recOwned = _out1211;
                    _4036_recIdents = _out1212;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4034_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _4035_recOwned;
                    readIdents = _4036_recIdents;
                  }
                } else if (_source147.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4037___mcc_h1396 = _source147.dtor_path;
                  {
                    RAST._IExpr _4038_recursiveGen;
                    DCOMP._IOwnership _4039_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4040_recIdents;
                    RAST._IExpr _out1213;
                    DCOMP._IOwnership _out1214;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1215;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1213, out _out1214, out _out1215);
                    _4038_recursiveGen = _out1213;
                    _4039_recOwned = _out1214;
                    _4040_recIdents = _out1215;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4038_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _4039_recOwned;
                    readIdents = _4040_recIdents;
                  }
                } else {
                  DAST._IType _4041___mcc_h1398 = _source147.dtor_baseType;
                  DAST._INewtypeRange _4042___mcc_h1399 = _source147.dtor_range;
                  bool _4043___mcc_h1400 = _source147.dtor_erase;
                  bool _4044_erase = _4043___mcc_h1400;
                  DAST._INewtypeRange _4045_range = _4042___mcc_h1399;
                  DAST._IType _4046_b = _4041___mcc_h1398;
                  {
                    if (object.Equals(_2452_fromTpe, _4046_b)) {
                      RAST._IExpr _4047_recursiveGen;
                      DCOMP._IOwnership _4048_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4049_recIdents;
                      RAST._IExpr _out1216;
                      DCOMP._IOwnership _out1217;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1218;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1216, out _out1217, out _out1218);
                      _4047_recursiveGen = _out1216;
                      _4048_recOwned = _out1217;
                      _4049_recIdents = _out1218;
                      Std.Wrappers._IOption<RAST._IType> _4050_potentialRhsType;
                      _4050_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_4046_b, _4045_range);
                      Std.Wrappers._IOption<RAST._IType> _source148 = _4050_potentialRhsType;
                      if (_source148.is_None) {
                        if (_4044_erase) {
                          r = _4047_recursiveGen;
                        } else {
                          RAST._IType _4051_rhsType;
                          RAST._IType _out1219;
                          _out1219 = DCOMP.COMP.GenType(_2451_toTpe, true, false);
                          _4051_rhsType = _out1219;
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4051_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4047_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                        }
                        resultingOwnership = _4048_recOwned;
                      } else {
                        RAST._IType _4052___mcc_h1509 = _source148.dtor_value;
                        RAST._IType _4053_v = _4052___mcc_h1509;
                        r = RAST.Expr.create_ConversionNum(_4053_v, _4047_recursiveGen);
                        resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                      }
                      readIdents = _4049_recIdents;
                    } else {
                      RAST._IExpr _out1220;
                      DCOMP._IOwnership _out1221;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1222;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2453_expr, _2452_fromTpe, _4046_b), _4046_b, _2451_toTpe), selfIdent, @params, expectedOwnership, out _out1220, out _out1221, out _out1222);
                      r = _out1220;
                      resultingOwnership = _out1221;
                      readIdents = _out1222;
                    }
                  }
                }
              } else if (_source146.is_Nullable) {
                DAST._IType _4054___mcc_h1404 = _source146.dtor_Nullable_a0;
                {
                  RAST._IExpr _4055_recursiveGen;
                  DCOMP._IOwnership _4056_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4057_recIdents;
                  RAST._IExpr _out1223;
                  DCOMP._IOwnership _out1224;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1225;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1223, out _out1224, out _out1225);
                  _4055_recursiveGen = _out1223;
                  _4056_recOwned = _out1224;
                  _4057_recIdents = _out1225;
                  Dafny.ISequence<Dafny.Rune> _4058_s;
                  _4058_s = (_4055_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (object.Equals(_4056_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                    _4058_s = Dafny.Sequence<Dafny.Rune>.Concat(_4058_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  _4058_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _4058_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  r = RAST.Expr.create_RawExpr(_4058_s);
                  resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                  readIdents = _4057_recIdents;
                }
              } else if (_source146.is_Tuple) {
                Dafny.ISequence<DAST._IType> _4059___mcc_h1406 = _source146.dtor_Tuple_a0;
                {
                  RAST._IExpr _4060_recursiveGen;
                  DCOMP._IOwnership _4061_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4062_recIdents;
                  RAST._IExpr _out1226;
                  DCOMP._IOwnership _out1227;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1228;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1226, out _out1227, out _out1228);
                  _4060_recursiveGen = _out1226;
                  _4061_recOwned = _out1227;
                  _4062_recIdents = _out1228;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4060_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _4061_recOwned;
                  readIdents = _4062_recIdents;
                }
              } else if (_source146.is_Array) {
                DAST._IType _4063___mcc_h1408 = _source146.dtor_element;
                BigInteger _4064___mcc_h1409 = _source146.dtor_dims;
                {
                  RAST._IExpr _4065_recursiveGen;
                  DCOMP._IOwnership _4066_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4067_recIdents;
                  RAST._IExpr _out1229;
                  DCOMP._IOwnership _out1230;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1231;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1229, out _out1230, out _out1231);
                  _4065_recursiveGen = _out1229;
                  _4066_recOwned = _out1230;
                  _4067_recIdents = _out1231;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4065_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _4066_recOwned;
                  readIdents = _4067_recIdents;
                }
              } else if (_source146.is_Seq) {
                DAST._IType _4068___mcc_h1412 = _source146.dtor_element;
                {
                  RAST._IExpr _4069_recursiveGen;
                  DCOMP._IOwnership _4070_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4071_recIdents;
                  RAST._IExpr _out1232;
                  DCOMP._IOwnership _out1233;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1234;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1232, out _out1233, out _out1234);
                  _4069_recursiveGen = _out1232;
                  _4070_recOwned = _out1233;
                  _4071_recIdents = _out1234;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4069_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _4070_recOwned;
                  readIdents = _4071_recIdents;
                }
              } else if (_source146.is_Set) {
                DAST._IType _4072___mcc_h1414 = _source146.dtor_element;
                {
                  RAST._IExpr _4073_recursiveGen;
                  DCOMP._IOwnership _4074_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4075_recIdents;
                  RAST._IExpr _out1235;
                  DCOMP._IOwnership _out1236;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1237;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1235, out _out1236, out _out1237);
                  _4073_recursiveGen = _out1235;
                  _4074_recOwned = _out1236;
                  _4075_recIdents = _out1237;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4073_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _4074_recOwned;
                  readIdents = _4075_recIdents;
                }
              } else if (_source146.is_Multiset) {
                DAST._IType _4076___mcc_h1416 = _source146.dtor_element;
                {
                  RAST._IExpr _4077_recursiveGen;
                  DCOMP._IOwnership _4078_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4079_recIdents;
                  RAST._IExpr _out1238;
                  DCOMP._IOwnership _out1239;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1240;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1238, out _out1239, out _out1240);
                  _4077_recursiveGen = _out1238;
                  _4078_recOwned = _out1239;
                  _4079_recIdents = _out1240;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4077_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _4078_recOwned;
                  readIdents = _4079_recIdents;
                }
              } else if (_source146.is_Map) {
                DAST._IType _4080___mcc_h1418 = _source146.dtor_key;
                DAST._IType _4081___mcc_h1419 = _source146.dtor_value;
                {
                  RAST._IExpr _4082_recursiveGen;
                  DCOMP._IOwnership _4083_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4084_recIdents;
                  RAST._IExpr _out1241;
                  DCOMP._IOwnership _out1242;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1243;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1241, out _out1242, out _out1243);
                  _4082_recursiveGen = _out1241;
                  _4083_recOwned = _out1242;
                  _4084_recIdents = _out1243;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4082_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _4083_recOwned;
                  readIdents = _4084_recIdents;
                }
              } else if (_source146.is_SetBuilder) {
                DAST._IType _4085___mcc_h1422 = _source146.dtor_element;
                {
                  RAST._IExpr _4086_recursiveGen;
                  DCOMP._IOwnership _4087_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4088_recIdents;
                  RAST._IExpr _out1244;
                  DCOMP._IOwnership _out1245;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1246;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1244, out _out1245, out _out1246);
                  _4086_recursiveGen = _out1244;
                  _4087_recOwned = _out1245;
                  _4088_recIdents = _out1246;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4086_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _4087_recOwned;
                  readIdents = _4088_recIdents;
                }
              } else if (_source146.is_MapBuilder) {
                DAST._IType _4089___mcc_h1424 = _source146.dtor_key;
                DAST._IType _4090___mcc_h1425 = _source146.dtor_value;
                {
                  RAST._IExpr _4091_recursiveGen;
                  DCOMP._IOwnership _4092_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4093_recIdents;
                  RAST._IExpr _out1247;
                  DCOMP._IOwnership _out1248;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1249;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1247, out _out1248, out _out1249);
                  _4091_recursiveGen = _out1247;
                  _4092_recOwned = _out1248;
                  _4093_recIdents = _out1249;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4091_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _4092_recOwned;
                  readIdents = _4093_recIdents;
                }
              } else if (_source146.is_Arrow) {
                Dafny.ISequence<DAST._IType> _4094___mcc_h1428 = _source146.dtor_args;
                DAST._IType _4095___mcc_h1429 = _source146.dtor_result;
                {
                  RAST._IExpr _4096_recursiveGen;
                  DCOMP._IOwnership _4097_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4098_recIdents;
                  RAST._IExpr _out1250;
                  DCOMP._IOwnership _out1251;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1252;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1250, out _out1251, out _out1252);
                  _4096_recursiveGen = _out1250;
                  _4097_recOwned = _out1251;
                  _4098_recIdents = _out1252;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4096_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _4097_recOwned;
                  readIdents = _4098_recIdents;
                }
              } else if (_source146.is_Primitive) {
                DAST._IPrimitive _4099___mcc_h1432 = _source146.dtor_Primitive_a0;
                DAST._IPrimitive _source149 = _4099___mcc_h1432;
                if (_source149.is_Int) {
                  {
                    RAST._IType _4100_rhsType;
                    RAST._IType _out1253;
                    _out1253 = DCOMP.COMP.GenType(_2452_fromTpe, true, false);
                    _4100_rhsType = _out1253;
                    RAST._IExpr _4101_recursiveGen;
                    DCOMP._IOwnership _4102___v65;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4103_recIdents;
                    RAST._IExpr _out1254;
                    DCOMP._IOwnership _out1255;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1256;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1254, out _out1255, out _out1256);
                    _4101_recursiveGen = _out1254;
                    _4102___v65 = _out1255;
                    _4103_recIdents = _out1256;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyInt{data: ::dafny_runtime::BigInt::from("), (_4101_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")}")));
                    resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                    readIdents = _4103_recIdents;
                  }
                } else if (_source149.is_Real) {
                  {
                    RAST._IExpr _4104_recursiveGen;
                    DCOMP._IOwnership _4105_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4106_recIdents;
                    RAST._IExpr _out1257;
                    DCOMP._IOwnership _out1258;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1259;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1257, out _out1258, out _out1259);
                    _4104_recursiveGen = _out1257;
                    _4105_recOwned = _out1258;
                    _4106_recIdents = _out1259;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4104_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _4105_recOwned;
                    readIdents = _4106_recIdents;
                  }
                } else if (_source149.is_String) {
                  {
                    RAST._IExpr _4107_recursiveGen;
                    DCOMP._IOwnership _4108_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4109_recIdents;
                    RAST._IExpr _out1260;
                    DCOMP._IOwnership _out1261;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1262;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1260, out _out1261, out _out1262);
                    _4107_recursiveGen = _out1260;
                    _4108_recOwned = _out1261;
                    _4109_recIdents = _out1262;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4107_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _4108_recOwned;
                    readIdents = _4109_recIdents;
                  }
                } else if (_source149.is_Bool) {
                  {
                    RAST._IExpr _4110_recursiveGen;
                    DCOMP._IOwnership _4111_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4112_recIdents;
                    RAST._IExpr _out1263;
                    DCOMP._IOwnership _out1264;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1265;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1263, out _out1264, out _out1265);
                    _4110_recursiveGen = _out1263;
                    _4111_recOwned = _out1264;
                    _4112_recIdents = _out1265;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4110_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _4111_recOwned;
                    readIdents = _4112_recIdents;
                  }
                } else {
                  {
                    RAST._IExpr _4113_recursiveGen;
                    DCOMP._IOwnership _4114_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4115_recIdents;
                    RAST._IExpr _out1266;
                    DCOMP._IOwnership _out1267;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1268;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1266, out _out1267, out _out1268);
                    _4113_recursiveGen = _out1266;
                    _4114_recOwned = _out1267;
                    _4115_recIdents = _out1268;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4113_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _4114_recOwned;
                    readIdents = _4115_recIdents;
                  }
                }
              } else if (_source146.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _4116___mcc_h1434 = _source146.dtor_Passthrough_a0;
                {
                  RAST._IExpr _4117_recursiveGen;
                  DCOMP._IOwnership _4118___v70;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4119_recIdents;
                  RAST._IExpr _out1269;
                  DCOMP._IOwnership _out1270;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1271;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1269, out _out1270, out _out1271);
                  _4117_recursiveGen = _out1269;
                  _4118___v70 = _out1270;
                  _4119_recIdents = _out1271;
                  RAST._IType _4120_toTpeGen;
                  RAST._IType _out1272;
                  _out1272 = DCOMP.COMP.GenType(_2451_toTpe, true, false);
                  _4120_toTpeGen = _out1272;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), (_4117_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_4120_toTpeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                  readIdents = _4119_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _4121___mcc_h1436 = _source146.dtor_TypeArg_a0;
                {
                  RAST._IExpr _4122_recursiveGen;
                  DCOMP._IOwnership _4123_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4124_recIdents;
                  RAST._IExpr _out1273;
                  DCOMP._IOwnership _out1274;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1275;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1273, out _out1274, out _out1275);
                  _4122_recursiveGen = _out1273;
                  _4123_recOwned = _out1274;
                  _4124_recIdents = _out1275;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4122_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _4123_recOwned;
                  readIdents = _4124_recIdents;
                }
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4125___mcc_h1438 = _source87.dtor_TypeArg_a0;
              DAST._IType _source150 = _2458___mcc_h339;
              if (_source150.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4126___mcc_h1442 = _source150.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _4127___mcc_h1443 = _source150.dtor_typeArgs;
                DAST._IResolvedType _4128___mcc_h1444 = _source150.dtor_resolved;
                DAST._IResolvedType _source151 = _4128___mcc_h1444;
                if (_source151.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4129___mcc_h1448 = _source151.dtor_path;
                  {
                    RAST._IExpr _4130_recursiveGen;
                    DCOMP._IOwnership _4131_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4132_recIdents;
                    RAST._IExpr _out1276;
                    DCOMP._IOwnership _out1277;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1278;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1276, out _out1277, out _out1278);
                    _4130_recursiveGen = _out1276;
                    _4131_recOwned = _out1277;
                    _4132_recIdents = _out1278;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4130_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _4131_recOwned;
                    readIdents = _4132_recIdents;
                  }
                } else if (_source151.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4133___mcc_h1450 = _source151.dtor_path;
                  {
                    RAST._IExpr _4134_recursiveGen;
                    DCOMP._IOwnership _4135_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4136_recIdents;
                    RAST._IExpr _out1279;
                    DCOMP._IOwnership _out1280;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1281;
                    DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1279, out _out1280, out _out1281);
                    _4134_recursiveGen = _out1279;
                    _4135_recOwned = _out1280;
                    _4136_recIdents = _out1281;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4134_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    resultingOwnership = _4135_recOwned;
                    readIdents = _4136_recIdents;
                  }
                } else {
                  DAST._IType _4137___mcc_h1452 = _source151.dtor_baseType;
                  DAST._INewtypeRange _4138___mcc_h1453 = _source151.dtor_range;
                  bool _4139___mcc_h1454 = _source151.dtor_erase;
                  bool _4140_erase = _4139___mcc_h1454;
                  DAST._INewtypeRange _4141_range = _4138___mcc_h1453;
                  DAST._IType _4142_b = _4137___mcc_h1452;
                  {
                    if (object.Equals(_2452_fromTpe, _4142_b)) {
                      RAST._IExpr _4143_recursiveGen;
                      DCOMP._IOwnership _4144_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4145_recIdents;
                      RAST._IExpr _out1282;
                      DCOMP._IOwnership _out1283;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1284;
                      DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1282, out _out1283, out _out1284);
                      _4143_recursiveGen = _out1282;
                      _4144_recOwned = _out1283;
                      _4145_recIdents = _out1284;
                      Std.Wrappers._IOption<RAST._IType> _4146_potentialRhsType;
                      _4146_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_4142_b, _4141_range);
                      Std.Wrappers._IOption<RAST._IType> _source152 = _4146_potentialRhsType;
                      if (_source152.is_None) {
                        if (_4140_erase) {
                          r = _4143_recursiveGen;
                        } else {
                          RAST._IType _4147_rhsType;
                          RAST._IType _out1285;
                          _out1285 = DCOMP.COMP.GenType(_2451_toTpe, true, false);
                          _4147_rhsType = _out1285;
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4147_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4143_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                        }
                        resultingOwnership = _4144_recOwned;
                      } else {
                        RAST._IType _4148___mcc_h1510 = _source152.dtor_value;
                        RAST._IType _4149_v = _4148___mcc_h1510;
                        r = RAST.Expr.create_ConversionNum(_4149_v, _4143_recursiveGen);
                        resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                      }
                      readIdents = _4145_recIdents;
                    } else {
                      RAST._IExpr _out1286;
                      DCOMP._IOwnership _out1287;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1288;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2453_expr, _2452_fromTpe, _4142_b), _4142_b, _2451_toTpe), selfIdent, @params, expectedOwnership, out _out1286, out _out1287, out _out1288);
                      r = _out1286;
                      resultingOwnership = _out1287;
                      readIdents = _out1288;
                    }
                  }
                }
              } else if (_source150.is_Nullable) {
                DAST._IType _4150___mcc_h1458 = _source150.dtor_Nullable_a0;
                {
                  RAST._IExpr _4151_recursiveGen;
                  DCOMP._IOwnership _4152_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4153_recIdents;
                  RAST._IExpr _out1289;
                  DCOMP._IOwnership _out1290;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1291;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1289, out _out1290, out _out1291);
                  _4151_recursiveGen = _out1289;
                  _4152_recOwned = _out1290;
                  _4153_recIdents = _out1291;
                  Dafny.ISequence<Dafny.Rune> _4154_s;
                  _4154_s = (_4151_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (object.Equals(_4152_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                    _4154_s = Dafny.Sequence<Dafny.Rune>.Concat(_4154_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  _4154_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _4154_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  r = RAST.Expr.create_RawExpr(_4154_s);
                  resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
                  readIdents = _4153_recIdents;
                }
              } else if (_source150.is_Tuple) {
                Dafny.ISequence<DAST._IType> _4155___mcc_h1460 = _source150.dtor_Tuple_a0;
                {
                  RAST._IExpr _4156_recursiveGen;
                  DCOMP._IOwnership _4157_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4158_recIdents;
                  RAST._IExpr _out1292;
                  DCOMP._IOwnership _out1293;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1294;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1292, out _out1293, out _out1294);
                  _4156_recursiveGen = _out1292;
                  _4157_recOwned = _out1293;
                  _4158_recIdents = _out1294;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4156_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _4157_recOwned;
                  readIdents = _4158_recIdents;
                }
              } else if (_source150.is_Array) {
                DAST._IType _4159___mcc_h1462 = _source150.dtor_element;
                BigInteger _4160___mcc_h1463 = _source150.dtor_dims;
                {
                  RAST._IExpr _4161_recursiveGen;
                  DCOMP._IOwnership _4162_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4163_recIdents;
                  RAST._IExpr _out1295;
                  DCOMP._IOwnership _out1296;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1297;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1295, out _out1296, out _out1297);
                  _4161_recursiveGen = _out1295;
                  _4162_recOwned = _out1296;
                  _4163_recIdents = _out1297;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4161_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _4162_recOwned;
                  readIdents = _4163_recIdents;
                }
              } else if (_source150.is_Seq) {
                DAST._IType _4164___mcc_h1466 = _source150.dtor_element;
                {
                  RAST._IExpr _4165_recursiveGen;
                  DCOMP._IOwnership _4166_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4167_recIdents;
                  RAST._IExpr _out1298;
                  DCOMP._IOwnership _out1299;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1300;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1298, out _out1299, out _out1300);
                  _4165_recursiveGen = _out1298;
                  _4166_recOwned = _out1299;
                  _4167_recIdents = _out1300;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4165_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _4166_recOwned;
                  readIdents = _4167_recIdents;
                }
              } else if (_source150.is_Set) {
                DAST._IType _4168___mcc_h1468 = _source150.dtor_element;
                {
                  RAST._IExpr _4169_recursiveGen;
                  DCOMP._IOwnership _4170_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4171_recIdents;
                  RAST._IExpr _out1301;
                  DCOMP._IOwnership _out1302;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1303;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1301, out _out1302, out _out1303);
                  _4169_recursiveGen = _out1301;
                  _4170_recOwned = _out1302;
                  _4171_recIdents = _out1303;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4169_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _4170_recOwned;
                  readIdents = _4171_recIdents;
                }
              } else if (_source150.is_Multiset) {
                DAST._IType _4172___mcc_h1470 = _source150.dtor_element;
                {
                  RAST._IExpr _4173_recursiveGen;
                  DCOMP._IOwnership _4174_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4175_recIdents;
                  RAST._IExpr _out1304;
                  DCOMP._IOwnership _out1305;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1306;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1304, out _out1305, out _out1306);
                  _4173_recursiveGen = _out1304;
                  _4174_recOwned = _out1305;
                  _4175_recIdents = _out1306;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4173_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _4174_recOwned;
                  readIdents = _4175_recIdents;
                }
              } else if (_source150.is_Map) {
                DAST._IType _4176___mcc_h1472 = _source150.dtor_key;
                DAST._IType _4177___mcc_h1473 = _source150.dtor_value;
                {
                  RAST._IExpr _4178_recursiveGen;
                  DCOMP._IOwnership _4179_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4180_recIdents;
                  RAST._IExpr _out1307;
                  DCOMP._IOwnership _out1308;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1309;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1307, out _out1308, out _out1309);
                  _4178_recursiveGen = _out1307;
                  _4179_recOwned = _out1308;
                  _4180_recIdents = _out1309;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4178_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _4179_recOwned;
                  readIdents = _4180_recIdents;
                }
              } else if (_source150.is_SetBuilder) {
                DAST._IType _4181___mcc_h1476 = _source150.dtor_element;
                {
                  RAST._IExpr _4182_recursiveGen;
                  DCOMP._IOwnership _4183_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4184_recIdents;
                  RAST._IExpr _out1310;
                  DCOMP._IOwnership _out1311;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1312;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1310, out _out1311, out _out1312);
                  _4182_recursiveGen = _out1310;
                  _4183_recOwned = _out1311;
                  _4184_recIdents = _out1312;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4182_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _4183_recOwned;
                  readIdents = _4184_recIdents;
                }
              } else if (_source150.is_MapBuilder) {
                DAST._IType _4185___mcc_h1478 = _source150.dtor_key;
                DAST._IType _4186___mcc_h1479 = _source150.dtor_value;
                {
                  RAST._IExpr _4187_recursiveGen;
                  DCOMP._IOwnership _4188_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4189_recIdents;
                  RAST._IExpr _out1313;
                  DCOMP._IOwnership _out1314;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1315;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1313, out _out1314, out _out1315);
                  _4187_recursiveGen = _out1313;
                  _4188_recOwned = _out1314;
                  _4189_recIdents = _out1315;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4187_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _4188_recOwned;
                  readIdents = _4189_recIdents;
                }
              } else if (_source150.is_Arrow) {
                Dafny.ISequence<DAST._IType> _4190___mcc_h1482 = _source150.dtor_args;
                DAST._IType _4191___mcc_h1483 = _source150.dtor_result;
                {
                  RAST._IExpr _4192_recursiveGen;
                  DCOMP._IOwnership _4193_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4194_recIdents;
                  RAST._IExpr _out1316;
                  DCOMP._IOwnership _out1317;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1318;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1316, out _out1317, out _out1318);
                  _4192_recursiveGen = _out1316;
                  _4193_recOwned = _out1317;
                  _4194_recIdents = _out1318;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4192_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _4193_recOwned;
                  readIdents = _4194_recIdents;
                }
              } else if (_source150.is_Primitive) {
                DAST._IPrimitive _4195___mcc_h1486 = _source150.dtor_Primitive_a0;
                {
                  RAST._IExpr _4196_recursiveGen;
                  DCOMP._IOwnership _4197_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4198_recIdents;
                  RAST._IExpr _out1319;
                  DCOMP._IOwnership _out1320;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1321;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1319, out _out1320, out _out1321);
                  _4196_recursiveGen = _out1319;
                  _4197_recOwned = _out1320;
                  _4198_recIdents = _out1321;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4196_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _4197_recOwned;
                  readIdents = _4198_recIdents;
                }
              } else if (_source150.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _4199___mcc_h1488 = _source150.dtor_Passthrough_a0;
                {
                  RAST._IExpr _4200_recursiveGen;
                  DCOMP._IOwnership _4201_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4202_recIdents;
                  RAST._IExpr _out1322;
                  DCOMP._IOwnership _out1323;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1324;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1322, out _out1323, out _out1324);
                  _4200_recursiveGen = _out1322;
                  _4201_recOwned = _out1323;
                  _4202_recIdents = _out1324;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4200_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _4201_recOwned;
                  readIdents = _4202_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _4203___mcc_h1490 = _source150.dtor_TypeArg_a0;
                {
                  RAST._IExpr _4204_recursiveGen;
                  DCOMP._IOwnership _4205_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4206_recIdents;
                  RAST._IExpr _out1325;
                  DCOMP._IOwnership _out1326;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1327;
                  DCOMP.COMP.GenExpr(_2453_expr, selfIdent, @params, expectedOwnership, out _out1325, out _out1326, out _out1327);
                  _4204_recursiveGen = _out1325;
                  _4205_recOwned = _out1326;
                  _4206_recIdents = _out1327;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4204_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  resultingOwnership = _4205_recOwned;
                  readIdents = _4206_recIdents;
                }
              }
            }
          }
        }
      } else if (_source80.is_SeqConstruct) {
        DAST._IExpression _4207___mcc_h26 = _source80.dtor_length;
        DAST._IExpression _4208___mcc_h27 = _source80.dtor_elem;
        DAST._IExpression _4209_expr = _4208___mcc_h27;
        DAST._IExpression _4210_length = _4207___mcc_h26;
        {
          RAST._IExpr _4211_recursiveGen;
          DCOMP._IOwnership _4212___v72;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4213_recIdents;
          RAST._IExpr _out1328;
          DCOMP._IOwnership _out1329;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1330;
          DCOMP.COMP.GenExpr(_4209_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1328, out _out1329, out _out1330);
          _4211_recursiveGen = _out1328;
          _4212___v72 = _out1329;
          _4213_recIdents = _out1330;
          RAST._IExpr _4214_lengthGen;
          DCOMP._IOwnership _4215___v73;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4216_lengthIdents;
          RAST._IExpr _out1331;
          DCOMP._IOwnership _out1332;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1333;
          DCOMP.COMP.GenExpr(_4210_length, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1331, out _out1332, out _out1333);
          _4214_lengthGen = _out1331;
          _4215___v73 = _out1332;
          _4216_lengthIdents = _out1333;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), (_4211_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), (_4214_lengthGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer.0(&i)).collect::<Vec<_>>()\n}")));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_4213_recIdents, _4216_lengthIdents);
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
        }
      } else if (_source80.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _4217___mcc_h28 = _source80.dtor_elements;
        DAST._IType _4218___mcc_h29 = _source80.dtor_typ;
        DAST._IType _4219_typ = _4218___mcc_h29;
        Dafny.ISequence<DAST._IExpression> _4220_exprs = _4217___mcc_h28;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          RAST._IType _4221_genTpe;
          RAST._IType _out1334;
          _out1334 = DCOMP.COMP.GenType(_4219_typ, false, false);
          _4221_genTpe = _out1334;
          BigInteger _4222_i;
          _4222_i = BigInteger.Zero;
          Dafny.ISequence<Dafny.Rune> _4223_s;
          _4223_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(vec![");
          _4222_i = BigInteger.Zero;
          while ((_4222_i) < (new BigInteger((_4220_exprs).Count))) {
            if ((_4222_i).Sign == 1) {
              _4223_s = Dafny.Sequence<Dafny.Rune>.Concat(_4223_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _4224_recursiveGen;
            DCOMP._IOwnership _4225___v74;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4226_recIdents;
            RAST._IExpr _out1335;
            DCOMP._IOwnership _out1336;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1337;
            DCOMP.COMP.GenExpr((_4220_exprs).Select(_4222_i), selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1335, out _out1336, out _out1337);
            _4224_recursiveGen = _out1335;
            _4225___v74 = _out1336;
            _4226_recIdents = _out1337;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4226_recIdents);
            _4223_s = Dafny.Sequence<Dafny.Rune>.Concat(_4223_s, (_4224_recursiveGen)._ToString(DCOMP.__default.IND));
            _4222_i = (_4222_i) + (BigInteger.One);
          }
          _4223_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4223_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("] as Vec<")), (_4221_genTpe)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          r = RAST.Expr.create_RawExpr(_4223_s);
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
        }
      } else if (_source80.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _4227___mcc_h30 = _source80.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _4228_exprs = _4227___mcc_h30;
        {
          Dafny.ISequence<RAST._IExpr> _4229_generatedValues;
          _4229_generatedValues = Dafny.Sequence<RAST._IExpr>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _4230_i;
          _4230_i = BigInteger.Zero;
          while ((_4230_i) < (new BigInteger((_4228_exprs).Count))) {
            RAST._IExpr _4231_recursiveGen;
            DCOMP._IOwnership _4232___v75;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4233_recIdents;
            RAST._IExpr _out1338;
            DCOMP._IOwnership _out1339;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1340;
            DCOMP.COMP.GenExpr((_4228_exprs).Select(_4230_i), selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1338, out _out1339, out _out1340);
            _4231_recursiveGen = _out1338;
            _4232___v75 = _out1339;
            _4233_recIdents = _out1340;
            _4229_generatedValues = Dafny.Sequence<RAST._IExpr>.Concat(_4229_generatedValues, Dafny.Sequence<RAST._IExpr>.FromElements(_4231_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4233_recIdents);
            _4230_i = (_4230_i) + (BigInteger.One);
          }
          r = RAST.Expr.create_Call(RAST.__default.dafny__runtime__Set__from__array, Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.__default.Borrow(RAST.__default.NewVec(_4229_generatedValues))));
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
        }
      } else if (_source80.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _4234___mcc_h31 = _source80.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _4235_mapElems = _4234___mcc_h31;
        {
          Dafny.ISequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>> _4236_generatedValues;
          _4236_generatedValues = Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _4237_i;
          _4237_i = BigInteger.Zero;
          while ((_4237_i) < (new BigInteger((_4235_mapElems).Count))) {
            RAST._IExpr _4238_recursiveGenKey;
            DCOMP._IOwnership _4239___v76;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4240_recIdentsKey;
            RAST._IExpr _out1341;
            DCOMP._IOwnership _out1342;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1343;
            DCOMP.COMP.GenExpr(((_4235_mapElems).Select(_4237_i)).dtor__0, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1341, out _out1342, out _out1343);
            _4238_recursiveGenKey = _out1341;
            _4239___v76 = _out1342;
            _4240_recIdentsKey = _out1343;
            RAST._IExpr _4241_recursiveGenValue;
            DCOMP._IOwnership _4242___v77;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4243_recIdentsValue;
            RAST._IExpr _out1344;
            DCOMP._IOwnership _out1345;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1346;
            DCOMP.COMP.GenExpr(((_4235_mapElems).Select(_4237_i)).dtor__1, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1344, out _out1345, out _out1346);
            _4241_recursiveGenValue = _out1344;
            _4242___v77 = _out1345;
            _4243_recIdentsValue = _out1346;
            _4236_generatedValues = Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.Concat(_4236_generatedValues, Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.FromElements(_System.Tuple2<RAST._IExpr, RAST._IExpr>.create(_4238_recursiveGenKey, _4241_recursiveGenValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4240_recIdentsKey), _4243_recIdentsValue);
            _4237_i = (_4237_i) + (BigInteger.One);
          }
          _4237_i = BigInteger.Zero;
          Dafny.ISequence<RAST._IExpr> _4244_arguments;
          _4244_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          while ((_4237_i) < (new BigInteger((_4236_generatedValues).Count))) {
            RAST._IExpr _4245_genKey;
            _4245_genKey = ((_4236_generatedValues).Select(_4237_i)).dtor__0;
            RAST._IExpr _4246_genValue;
            _4246_genValue = ((_4236_generatedValues).Select(_4237_i)).dtor__1;
            _4244_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_4244_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Tuple(Dafny.Sequence<RAST._IExpr>.FromElements(_4245_genKey, _4246_genValue))));
            _4237_i = (_4237_i) + (BigInteger.One);
          }
          r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::Map::from_array_owned")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.__default.NewVec(_4244_arguments)));
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
        }
      } else if (_source80.is_MapBuilder) {
        DAST._IType _4247___mcc_h32 = _source80.dtor_keyType;
        DAST._IType _4248___mcc_h33 = _source80.dtor_valueType;
        DAST._IType _4249_valueType = _4248___mcc_h33;
        DAST._IType _4250_keyType = _4247___mcc_h32;
        {
          RAST._IType _4251_kType;
          RAST._IType _out1347;
          _out1347 = DCOMP.COMP.GenType(_4250_keyType, false, false);
          _4251_kType = _out1347;
          RAST._IType _4252_vType;
          RAST._IType _out1348;
          _out1348 = DCOMP.COMP.GenType(_4249_valueType, false, false);
          _4252_vType = _out1348;
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::MapBuilder::<"), (_4251_kType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_4252_vType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::new()")));
        }
      } else if (_source80.is_SetBuilder) {
        DAST._IType _4253___mcc_h34 = _source80.dtor_elemType;
        DAST._IType _4254_elemType = _4253___mcc_h34;
        {
          RAST._IType _4255_eType;
          RAST._IType _out1349;
          _out1349 = DCOMP.COMP.GenType(_4254_elemType, false, false);
          _4255_eType = _out1349;
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::SetBuilder::<"), (_4255_eType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::new()")));
        }
      } else if (_source80.is_This) {
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source153 = selfIdent;
          if (_source153.is_None) {
            {
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4256___mcc_h1511 = _source153.dtor_value;
            Dafny.ISequence<Dafny.Rune> _4257_id = _4256___mcc_h1511;
            {
              r = RAST.Expr.create_RawExpr(_4257_id);
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                if (!(_4257_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  r = RAST.__default.Borrow(r);
                }
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_4257_id);
            }
          }
        }
      } else if (_source80.is_Ite) {
        DAST._IExpression _4258___mcc_h35 = _source80.dtor_cond;
        DAST._IExpression _4259___mcc_h36 = _source80.dtor_thn;
        DAST._IExpression _4260___mcc_h37 = _source80.dtor_els;
        DAST._IExpression _4261_f = _4260___mcc_h37;
        DAST._IExpression _4262_t = _4259___mcc_h36;
        DAST._IExpression _4263_cond = _4258___mcc_h35;
        {
          RAST._IExpr _4264_cond;
          DCOMP._IOwnership _4265___v78;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4266_recIdentsCond;
          RAST._IExpr _out1350;
          DCOMP._IOwnership _out1351;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1352;
          DCOMP.COMP.GenExpr(_4263_cond, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1350, out _out1351, out _out1352);
          _4264_cond = _out1350;
          _4265___v78 = _out1351;
          _4266_recIdentsCond = _out1352;
          Dafny.ISequence<Dafny.Rune> _4267_condString;
          _4267_condString = (_4264_cond)._ToString(DCOMP.__default.IND);
          RAST._IExpr _4268___v79;
          DCOMP._IOwnership _4269_tHasToBeOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4270___v80;
          RAST._IExpr _out1353;
          DCOMP._IOwnership _out1354;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1355;
          DCOMP.COMP.GenExpr(_4262_t, selfIdent, @params, expectedOwnership, out _out1353, out _out1354, out _out1355);
          _4268___v79 = _out1353;
          _4269_tHasToBeOwned = _out1354;
          _4270___v80 = _out1355;
          RAST._IExpr _4271_fExpr;
          DCOMP._IOwnership _4272_fOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4273_recIdentsF;
          RAST._IExpr _out1356;
          DCOMP._IOwnership _out1357;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1358;
          DCOMP.COMP.GenExpr(_4261_f, selfIdent, @params, _4269_tHasToBeOwned, out _out1356, out _out1357, out _out1358);
          _4271_fExpr = _out1356;
          _4272_fOwned = _out1357;
          _4273_recIdentsF = _out1358;
          Dafny.ISequence<Dafny.Rune> _4274_fString;
          _4274_fString = (_4271_fExpr)._ToString(DCOMP.__default.IND);
          RAST._IExpr _4275_tExpr;
          DCOMP._IOwnership _4276___v81;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4277_recIdentsT;
          RAST._IExpr _out1359;
          DCOMP._IOwnership _out1360;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1361;
          DCOMP.COMP.GenExpr(_4262_t, selfIdent, @params, _4272_fOwned, out _out1359, out _out1360, out _out1361);
          _4275_tExpr = _out1359;
          _4276___v81 = _out1360;
          _4277_recIdentsT = _out1361;
          Dafny.ISequence<Dafny.Rune> _4278_tString;
          _4278_tString = (_4275_tExpr)._ToString(DCOMP.__default.IND);
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _4267_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _4278_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _4274_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})")));
          resultingOwnership = _4272_fOwned;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_4266_recIdentsCond, _4277_recIdentsT), _4273_recIdentsF);
        }
      } else if (_source80.is_UnOp) {
        DAST._IUnaryOp _4279___mcc_h38 = _source80.dtor_unOp;
        DAST._IExpression _4280___mcc_h39 = _source80.dtor_expr;
        DAST.Format._IUnOpFormat _4281___mcc_h40 = _source80.dtor_format1;
        DAST._IUnaryOp _source154 = _4279___mcc_h38;
        if (_source154.is_Not) {
          DAST.Format._IUnOpFormat _4282_format = _4281___mcc_h40;
          DAST._IExpression _4283_e = _4280___mcc_h39;
          {
            RAST._IExpr _4284_recursiveGen;
            DCOMP._IOwnership _4285___v82;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4286_recIdents;
            RAST._IExpr _out1362;
            DCOMP._IOwnership _out1363;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1364;
            DCOMP.COMP.GenExpr(_4283_e, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1362, out _out1363, out _out1364);
            _4284_recursiveGen = _out1362;
            _4285___v82 = _out1363;
            _4286_recIdents = _out1364;
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), (_4284_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
            resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
            readIdents = _4286_recIdents;
          }
        } else if (_source154.is_BitwiseNot) {
          DAST.Format._IUnOpFormat _4287_format = _4281___mcc_h40;
          DAST._IExpression _4288_e = _4280___mcc_h39;
          {
            RAST._IExpr _4289_recursiveGen;
            DCOMP._IOwnership _4290___v83;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4291_recIdents;
            RAST._IExpr _out1365;
            DCOMP._IOwnership _out1366;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1367;
            DCOMP.COMP.GenExpr(_4288_e, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1365, out _out1366, out _out1367);
            _4289_recursiveGen = _out1365;
            _4290___v83 = _out1366;
            _4291_recIdents = _out1367;
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~("), (_4289_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
            resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
            readIdents = _4291_recIdents;
          }
        } else {
          DAST.Format._IUnOpFormat _4292_format = _4281___mcc_h40;
          DAST._IExpression _4293_e = _4280___mcc_h39;
          {
            RAST._IExpr _4294_recursiveGen;
            DCOMP._IOwnership _4295_recOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4296_recIdents;
            RAST._IExpr _out1368;
            DCOMP._IOwnership _out1369;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1370;
            DCOMP.COMP.GenExpr(_4293_e, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1368, out _out1369, out _out1370);
            _4294_recursiveGen = _out1368;
            _4295_recOwned = _out1369;
            _4296_recIdents = _out1370;
            r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4294_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cardinality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
            resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
            readIdents = _4296_recIdents;
          }
        }
      } else if (_source80.is_BinOp) {
        DAST._IBinOp _4297___mcc_h41 = _source80.dtor_op;
        DAST._IExpression _4298___mcc_h42 = _source80.dtor_left;
        DAST._IExpression _4299___mcc_h43 = _source80.dtor_right;
        DAST.Format._IBinOpFormat _4300___mcc_h44 = _source80.dtor_format2;
        DAST.Format._IBinOpFormat _4301_format = _4300___mcc_h44;
        DAST._IExpression _4302_rExpr = _4299___mcc_h43;
        DAST._IExpression _4303_lExpr = _4298___mcc_h42;
        DAST._IBinOp _4304_op = _4297___mcc_h41;
        {
          RAST._IExpr _4305_left;
          DCOMP._IOwnership _4306___v84;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4307_recIdentsL;
          RAST._IExpr _out1371;
          DCOMP._IOwnership _out1372;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1373;
          DCOMP.COMP.GenExpr(_4303_lExpr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1371, out _out1372, out _out1373);
          _4305_left = _out1371;
          _4306___v84 = _out1372;
          _4307_recIdentsL = _out1373;
          RAST._IExpr _4308_right;
          DCOMP._IOwnership _4309___v85;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4310_recIdentsR;
          RAST._IExpr _out1374;
          DCOMP._IOwnership _out1375;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1376;
          DCOMP.COMP.GenExpr(_4302_rExpr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1374, out _out1375, out _out1376);
          _4308_right = _out1374;
          _4309___v85 = _out1375;
          _4310_recIdentsR = _out1376;
          DAST._IBinOp _source155 = _4304_op;
          if (_source155.is_Eq) {
            bool _4311___mcc_h1512 = _source155.dtor_referential;
            bool _4312___mcc_h1513 = _source155.dtor_nullable;
            {
              if ((DCOMP.COMP.OpTable).Contains(_4304_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_4304_op), _4305_left, _4308_right, _4301_format);
              } else {
                DAST._IBinOp _source156 = _4304_op;
                if (_source156.is_Eq) {
                  bool _4313___mcc_h1518 = _source156.dtor_referential;
                  bool _4314___mcc_h1519 = _source156.dtor_nullable;
                  bool _4315_nullable = _4314___mcc_h1519;
                  bool _4316_referential = _4313___mcc_h1518;
                  {
                    if (_4316_referential) {
                      if (_4315_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.__default.Borrow(_4305_left), RAST.__default.Borrow(_4308_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _4305_left, _4308_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source156.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source156.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source156.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _4317___mcc_h1520 = _source156.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _4318_op = _4317___mcc_h1520;
                  {
                    r = RAST.Expr.create_BinaryOp(_4318_op, _4305_left, _4308_right, _4301_format);
                  }
                }
              }
            }
          } else if (_source155.is_Div) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_4304_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_4304_op), _4305_left, _4308_right, _4301_format);
              } else {
                DAST._IBinOp _source157 = _4304_op;
                if (_source157.is_Eq) {
                  bool _4319___mcc_h1521 = _source157.dtor_referential;
                  bool _4320___mcc_h1522 = _source157.dtor_nullable;
                  bool _4321_nullable = _4320___mcc_h1522;
                  bool _4322_referential = _4319___mcc_h1521;
                  {
                    if (_4322_referential) {
                      if (_4321_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.__default.Borrow(_4305_left), RAST.__default.Borrow(_4308_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _4305_left, _4308_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source157.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source157.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source157.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _4323___mcc_h1523 = _source157.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _4324_op = _4323___mcc_h1523;
                  {
                    r = RAST.Expr.create_BinaryOp(_4324_op, _4305_left, _4308_right, _4301_format);
                  }
                }
              }
            }
          } else if (_source155.is_EuclidianDiv) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_4304_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_4304_op), _4305_left, _4308_right, _4301_format);
              } else {
                DAST._IBinOp _source158 = _4304_op;
                if (_source158.is_Eq) {
                  bool _4325___mcc_h1524 = _source158.dtor_referential;
                  bool _4326___mcc_h1525 = _source158.dtor_nullable;
                  bool _4327_nullable = _4326___mcc_h1525;
                  bool _4328_referential = _4325___mcc_h1524;
                  {
                    if (_4328_referential) {
                      if (_4327_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.__default.Borrow(_4305_left), RAST.__default.Borrow(_4308_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _4305_left, _4308_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source158.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source158.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source158.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _4329___mcc_h1526 = _source158.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _4330_op = _4329___mcc_h1526;
                  {
                    r = RAST.Expr.create_BinaryOp(_4330_op, _4305_left, _4308_right, _4301_format);
                  }
                }
              }
            }
          } else if (_source155.is_Mod) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_4304_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_4304_op), _4305_left, _4308_right, _4301_format);
              } else {
                DAST._IBinOp _source159 = _4304_op;
                if (_source159.is_Eq) {
                  bool _4331___mcc_h1527 = _source159.dtor_referential;
                  bool _4332___mcc_h1528 = _source159.dtor_nullable;
                  bool _4333_nullable = _4332___mcc_h1528;
                  bool _4334_referential = _4331___mcc_h1527;
                  {
                    if (_4334_referential) {
                      if (_4333_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.__default.Borrow(_4305_left), RAST.__default.Borrow(_4308_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _4305_left, _4308_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source159.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source159.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source159.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _4335___mcc_h1529 = _source159.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _4336_op = _4335___mcc_h1529;
                  {
                    r = RAST.Expr.create_BinaryOp(_4336_op, _4305_left, _4308_right, _4301_format);
                  }
                }
              }
            }
          } else if (_source155.is_EuclidianMod) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_4304_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_4304_op), _4305_left, _4308_right, _4301_format);
              } else {
                DAST._IBinOp _source160 = _4304_op;
                if (_source160.is_Eq) {
                  bool _4337___mcc_h1530 = _source160.dtor_referential;
                  bool _4338___mcc_h1531 = _source160.dtor_nullable;
                  bool _4339_nullable = _4338___mcc_h1531;
                  bool _4340_referential = _4337___mcc_h1530;
                  {
                    if (_4340_referential) {
                      if (_4339_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.__default.Borrow(_4305_left), RAST.__default.Borrow(_4308_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _4305_left, _4308_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source160.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source160.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source160.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _4341___mcc_h1532 = _source160.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _4342_op = _4341___mcc_h1532;
                  {
                    r = RAST.Expr.create_BinaryOp(_4342_op, _4305_left, _4308_right, _4301_format);
                  }
                }
              }
            }
          } else if (_source155.is_Lt) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_4304_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_4304_op), _4305_left, _4308_right, _4301_format);
              } else {
                DAST._IBinOp _source161 = _4304_op;
                if (_source161.is_Eq) {
                  bool _4343___mcc_h1533 = _source161.dtor_referential;
                  bool _4344___mcc_h1534 = _source161.dtor_nullable;
                  bool _4345_nullable = _4344___mcc_h1534;
                  bool _4346_referential = _4343___mcc_h1533;
                  {
                    if (_4346_referential) {
                      if (_4345_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.__default.Borrow(_4305_left), RAST.__default.Borrow(_4308_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _4305_left, _4308_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source161.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source161.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source161.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _4347___mcc_h1535 = _source161.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _4348_op = _4347___mcc_h1535;
                  {
                    r = RAST.Expr.create_BinaryOp(_4348_op, _4305_left, _4308_right, _4301_format);
                  }
                }
              }
            }
          } else if (_source155.is_LtChar) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_4304_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_4304_op), _4305_left, _4308_right, _4301_format);
              } else {
                DAST._IBinOp _source162 = _4304_op;
                if (_source162.is_Eq) {
                  bool _4349___mcc_h1536 = _source162.dtor_referential;
                  bool _4350___mcc_h1537 = _source162.dtor_nullable;
                  bool _4351_nullable = _4350___mcc_h1537;
                  bool _4352_referential = _4349___mcc_h1536;
                  {
                    if (_4352_referential) {
                      if (_4351_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.__default.Borrow(_4305_left), RAST.__default.Borrow(_4308_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _4305_left, _4308_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source162.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source162.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source162.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _4353___mcc_h1538 = _source162.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _4354_op = _4353___mcc_h1538;
                  {
                    r = RAST.Expr.create_BinaryOp(_4354_op, _4305_left, _4308_right, _4301_format);
                  }
                }
              }
            }
          } else if (_source155.is_Plus) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_4304_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_4304_op), _4305_left, _4308_right, _4301_format);
              } else {
                DAST._IBinOp _source163 = _4304_op;
                if (_source163.is_Eq) {
                  bool _4355___mcc_h1539 = _source163.dtor_referential;
                  bool _4356___mcc_h1540 = _source163.dtor_nullable;
                  bool _4357_nullable = _4356___mcc_h1540;
                  bool _4358_referential = _4355___mcc_h1539;
                  {
                    if (_4358_referential) {
                      if (_4357_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.__default.Borrow(_4305_left), RAST.__default.Borrow(_4308_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _4305_left, _4308_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source163.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source163.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source163.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _4359___mcc_h1541 = _source163.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _4360_op = _4359___mcc_h1541;
                  {
                    r = RAST.Expr.create_BinaryOp(_4360_op, _4305_left, _4308_right, _4301_format);
                  }
                }
              }
            }
          } else if (_source155.is_Minus) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_4304_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_4304_op), _4305_left, _4308_right, _4301_format);
              } else {
                DAST._IBinOp _source164 = _4304_op;
                if (_source164.is_Eq) {
                  bool _4361___mcc_h1542 = _source164.dtor_referential;
                  bool _4362___mcc_h1543 = _source164.dtor_nullable;
                  bool _4363_nullable = _4362___mcc_h1543;
                  bool _4364_referential = _4361___mcc_h1542;
                  {
                    if (_4364_referential) {
                      if (_4363_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.__default.Borrow(_4305_left), RAST.__default.Borrow(_4308_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _4305_left, _4308_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source164.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source164.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source164.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _4365___mcc_h1544 = _source164.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _4366_op = _4365___mcc_h1544;
                  {
                    r = RAST.Expr.create_BinaryOp(_4366_op, _4305_left, _4308_right, _4301_format);
                  }
                }
              }
            }
          } else if (_source155.is_Times) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_4304_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_4304_op), _4305_left, _4308_right, _4301_format);
              } else {
                DAST._IBinOp _source165 = _4304_op;
                if (_source165.is_Eq) {
                  bool _4367___mcc_h1545 = _source165.dtor_referential;
                  bool _4368___mcc_h1546 = _source165.dtor_nullable;
                  bool _4369_nullable = _4368___mcc_h1546;
                  bool _4370_referential = _4367___mcc_h1545;
                  {
                    if (_4370_referential) {
                      if (_4369_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.__default.Borrow(_4305_left), RAST.__default.Borrow(_4308_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _4305_left, _4308_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source165.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source165.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source165.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _4371___mcc_h1547 = _source165.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _4372_op = _4371___mcc_h1547;
                  {
                    r = RAST.Expr.create_BinaryOp(_4372_op, _4305_left, _4308_right, _4301_format);
                  }
                }
              }
            }
          } else if (_source155.is_BitwiseAnd) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_4304_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_4304_op), _4305_left, _4308_right, _4301_format);
              } else {
                DAST._IBinOp _source166 = _4304_op;
                if (_source166.is_Eq) {
                  bool _4373___mcc_h1548 = _source166.dtor_referential;
                  bool _4374___mcc_h1549 = _source166.dtor_nullable;
                  bool _4375_nullable = _4374___mcc_h1549;
                  bool _4376_referential = _4373___mcc_h1548;
                  {
                    if (_4376_referential) {
                      if (_4375_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.__default.Borrow(_4305_left), RAST.__default.Borrow(_4308_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _4305_left, _4308_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source166.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source166.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source166.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _4377___mcc_h1550 = _source166.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _4378_op = _4377___mcc_h1550;
                  {
                    r = RAST.Expr.create_BinaryOp(_4378_op, _4305_left, _4308_right, _4301_format);
                  }
                }
              }
            }
          } else if (_source155.is_BitwiseOr) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_4304_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_4304_op), _4305_left, _4308_right, _4301_format);
              } else {
                DAST._IBinOp _source167 = _4304_op;
                if (_source167.is_Eq) {
                  bool _4379___mcc_h1551 = _source167.dtor_referential;
                  bool _4380___mcc_h1552 = _source167.dtor_nullable;
                  bool _4381_nullable = _4380___mcc_h1552;
                  bool _4382_referential = _4379___mcc_h1551;
                  {
                    if (_4382_referential) {
                      if (_4381_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.__default.Borrow(_4305_left), RAST.__default.Borrow(_4308_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _4305_left, _4308_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source167.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source167.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source167.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _4383___mcc_h1553 = _source167.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _4384_op = _4383___mcc_h1553;
                  {
                    r = RAST.Expr.create_BinaryOp(_4384_op, _4305_left, _4308_right, _4301_format);
                  }
                }
              }
            }
          } else if (_source155.is_BitwiseXor) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_4304_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_4304_op), _4305_left, _4308_right, _4301_format);
              } else {
                DAST._IBinOp _source168 = _4304_op;
                if (_source168.is_Eq) {
                  bool _4385___mcc_h1554 = _source168.dtor_referential;
                  bool _4386___mcc_h1555 = _source168.dtor_nullable;
                  bool _4387_nullable = _4386___mcc_h1555;
                  bool _4388_referential = _4385___mcc_h1554;
                  {
                    if (_4388_referential) {
                      if (_4387_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.__default.Borrow(_4305_left), RAST.__default.Borrow(_4308_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _4305_left, _4308_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source168.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source168.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source168.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _4389___mcc_h1556 = _source168.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _4390_op = _4389___mcc_h1556;
                  {
                    r = RAST.Expr.create_BinaryOp(_4390_op, _4305_left, _4308_right, _4301_format);
                  }
                }
              }
            }
          } else if (_source155.is_BitwiseShiftRight) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_4304_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_4304_op), _4305_left, _4308_right, _4301_format);
              } else {
                DAST._IBinOp _source169 = _4304_op;
                if (_source169.is_Eq) {
                  bool _4391___mcc_h1557 = _source169.dtor_referential;
                  bool _4392___mcc_h1558 = _source169.dtor_nullable;
                  bool _4393_nullable = _4392___mcc_h1558;
                  bool _4394_referential = _4391___mcc_h1557;
                  {
                    if (_4394_referential) {
                      if (_4393_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.__default.Borrow(_4305_left), RAST.__default.Borrow(_4308_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _4305_left, _4308_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source169.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source169.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source169.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _4395___mcc_h1559 = _source169.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _4396_op = _4395___mcc_h1559;
                  {
                    r = RAST.Expr.create_BinaryOp(_4396_op, _4305_left, _4308_right, _4301_format);
                  }
                }
              }
            }
          } else if (_source155.is_BitwiseShiftLeft) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_4304_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_4304_op), _4305_left, _4308_right, _4301_format);
              } else {
                DAST._IBinOp _source170 = _4304_op;
                if (_source170.is_Eq) {
                  bool _4397___mcc_h1560 = _source170.dtor_referential;
                  bool _4398___mcc_h1561 = _source170.dtor_nullable;
                  bool _4399_nullable = _4398___mcc_h1561;
                  bool _4400_referential = _4397___mcc_h1560;
                  {
                    if (_4400_referential) {
                      if (_4399_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.__default.Borrow(_4305_left), RAST.__default.Borrow(_4308_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _4305_left, _4308_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source170.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source170.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source170.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _4401___mcc_h1562 = _source170.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _4402_op = _4401___mcc_h1562;
                  {
                    r = RAST.Expr.create_BinaryOp(_4402_op, _4305_left, _4308_right, _4301_format);
                  }
                }
              }
            }
          } else if (_source155.is_And) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_4304_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_4304_op), _4305_left, _4308_right, _4301_format);
              } else {
                DAST._IBinOp _source171 = _4304_op;
                if (_source171.is_Eq) {
                  bool _4403___mcc_h1563 = _source171.dtor_referential;
                  bool _4404___mcc_h1564 = _source171.dtor_nullable;
                  bool _4405_nullable = _4404___mcc_h1564;
                  bool _4406_referential = _4403___mcc_h1563;
                  {
                    if (_4406_referential) {
                      if (_4405_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.__default.Borrow(_4305_left), RAST.__default.Borrow(_4308_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _4305_left, _4308_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source171.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source171.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source171.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _4407___mcc_h1565 = _source171.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _4408_op = _4407___mcc_h1565;
                  {
                    r = RAST.Expr.create_BinaryOp(_4408_op, _4305_left, _4308_right, _4301_format);
                  }
                }
              }
            }
          } else if (_source155.is_Or) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_4304_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_4304_op), _4305_left, _4308_right, _4301_format);
              } else {
                DAST._IBinOp _source172 = _4304_op;
                if (_source172.is_Eq) {
                  bool _4409___mcc_h1566 = _source172.dtor_referential;
                  bool _4410___mcc_h1567 = _source172.dtor_nullable;
                  bool _4411_nullable = _4410___mcc_h1567;
                  bool _4412_referential = _4409___mcc_h1566;
                  {
                    if (_4412_referential) {
                      if (_4411_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.__default.Borrow(_4305_left), RAST.__default.Borrow(_4308_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _4305_left, _4308_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source172.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source172.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source172.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _4413___mcc_h1568 = _source172.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _4414_op = _4413___mcc_h1568;
                  {
                    r = RAST.Expr.create_BinaryOp(_4414_op, _4305_left, _4308_right, _4301_format);
                  }
                }
              }
            }
          } else if (_source155.is_In) {
            {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4308_right, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("contains")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.__default.Borrow(_4305_left)));
            }
          } else if (_source155.is_SetMerge) {
            {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4305_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.__default.Borrow(_4308_right)));
            }
          } else if (_source155.is_SetSubtraction) {
            {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4305_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.__default.Borrow(_4308_right)));
            }
          } else if (_source155.is_SetIntersection) {
            {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4305_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("intersect")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.__default.Borrow(_4308_right)));
            }
          } else if (_source155.is_MapMerge) {
            {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4305_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.__default.Borrow(_4308_right)));
            }
          } else if (_source155.is_MapSubtraction) {
            {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4305_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.__default.Borrow(_4308_right)));
            }
          } else if (_source155.is_Concat) {
            {
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), (_4305_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_4308_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].concat()")));
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4415___mcc_h1516 = _source155.dtor_Passthrough_a0;
            {
              if ((DCOMP.COMP.OpTable).Contains(_4304_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_4304_op), _4305_left, _4308_right, _4301_format);
              } else {
                DAST._IBinOp _source173 = _4304_op;
                if (_source173.is_Eq) {
                  bool _4416___mcc_h1569 = _source173.dtor_referential;
                  bool _4417___mcc_h1570 = _source173.dtor_nullable;
                  bool _4418_nullable = _4417___mcc_h1570;
                  bool _4419_referential = _4416___mcc_h1569;
                  {
                    if (_4419_referential) {
                      if (_4418_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.__default.Borrow(_4305_left), RAST.__default.Borrow(_4308_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _4305_left, _4308_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source173.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source173.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else if (_source173.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_4305_left, _4308_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _4420___mcc_h1571 = _source173.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _4421_op = _4420___mcc_h1571;
                  {
                    r = RAST.Expr.create_BinaryOp(_4421_op, _4305_left, _4308_right, _4301_format);
                  }
                }
              }
            }
          }
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_4307_recIdentsL, _4310_recIdentsR);
        }
      } else if (_source80.is_ArrayLen) {
        DAST._IExpression _4422___mcc_h45 = _source80.dtor_expr;
        BigInteger _4423___mcc_h46 = _source80.dtor_dim;
        BigInteger _4424_dim = _4423___mcc_h46;
        DAST._IExpression _4425_expr = _4422___mcc_h45;
        {
          RAST._IExpr _4426_recursiveGen;
          DCOMP._IOwnership _4427___v87;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4428_recIdents;
          RAST._IExpr _out1377;
          DCOMP._IOwnership _out1378;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1379;
          DCOMP.COMP.GenExpr(_4425_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1377, out _out1378, out _out1379);
          _4426_recursiveGen = _out1377;
          _4427___v87 = _out1378;
          _4428_recIdents = _out1379;
          if ((_4424_dim).Sign == 0) {
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), (_4426_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow().len())")));
          } else {
            Dafny.ISequence<Dafny.Rune> _4429_s;
            _4429_s = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(m.borrow().len())")))._ToString(DCOMP.__default.IND);
            BigInteger _4430_i;
            _4430_i = BigInteger.One;
            while ((_4430_i) < (_4424_dim)) {
              _4429_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("m.borrow().get(0).map(|m| "), _4429_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
              _4430_i = (_4430_i) + (BigInteger.One);
            }
            r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4426_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow().get(0).map(|m| ")), _4429_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"))));
          }
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          readIdents = _4428_recIdents;
        }
      } else if (_source80.is_MapKeys) {
        DAST._IExpression _4431___mcc_h47 = _source80.dtor_expr;
        DAST._IExpression _4432_expr = _4431___mcc_h47;
        {
          RAST._IExpr _4433_recursiveGen;
          DCOMP._IOwnership _4434___v88;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4435_recIdents;
          RAST._IExpr _out1380;
          DCOMP._IOwnership _out1381;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1382;
          DCOMP.COMP.GenExpr(_4432_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1380, out _out1381, out _out1382);
          _4433_recursiveGen = _out1380;
          _4434___v88 = _out1381;
          _4435_recIdents = _out1382;
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          readIdents = _4435_recIdents;
          r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4433_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("keys")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
        }
      } else if (_source80.is_MapValues) {
        DAST._IExpression _4436___mcc_h48 = _source80.dtor_expr;
        DAST._IExpression _4437_expr = _4436___mcc_h48;
        {
          RAST._IExpr _4438_recursiveGen;
          DCOMP._IOwnership _4439___v89;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4440_recIdents;
          RAST._IExpr _out1383;
          DCOMP._IOwnership _out1384;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1385;
          DCOMP.COMP.GenExpr(_4437_expr, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1383, out _out1384, out _out1385);
          _4438_recursiveGen = _out1383;
          _4439___v89 = _out1384;
          _4440_recIdents = _out1385;
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          readIdents = _4440_recIdents;
          r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4438_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("values")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
        }
      } else if (_source80.is_Select) {
        DAST._IExpression _4441___mcc_h49 = _source80.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _4442___mcc_h50 = _source80.dtor_field;
        bool _4443___mcc_h51 = _source80.dtor_isConstant;
        bool _4444___mcc_h52 = _source80.dtor_onDatatype;
        DAST._IExpression _source174 = _4441___mcc_h49;
        if (_source174.is_Literal) {
          DAST._ILiteral _4445___mcc_h53 = _source174.dtor_Literal_a0;
          bool _4446_isDatatype = _4444___mcc_h52;
          bool _4447_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4448_field = _4442___mcc_h50;
          DAST._IExpression _4449_on = _4441___mcc_h49;
          {
            RAST._IExpr _4450_onExpr;
            DCOMP._IOwnership _4451_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4452_recIdents;
            RAST._IExpr _out1386;
            DCOMP._IOwnership _out1387;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1388;
            DCOMP.COMP.GenExpr(_4449_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1386, out _out1387, out _out1388);
            _4450_onExpr = _out1386;
            _4451_onOwned = _out1387;
            _4452_recIdents = _out1388;
            if ((_4446_isDatatype) || (_4447_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4450_onExpr, DCOMP.__default.escapeIdent(_4448_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4447_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4453_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4453_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4450_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4448_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4453_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4453_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4453_s);
            }
            readIdents = _4452_recIdents;
          }
        } else if (_source174.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _4454___mcc_h55 = _source174.dtor_Ident_a0;
          bool _4455_isDatatype = _4444___mcc_h52;
          bool _4456_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4457_field = _4442___mcc_h50;
          DAST._IExpression _4458_on = _4441___mcc_h49;
          {
            RAST._IExpr _4459_onExpr;
            DCOMP._IOwnership _4460_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4461_recIdents;
            RAST._IExpr _out1389;
            DCOMP._IOwnership _out1390;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1391;
            DCOMP.COMP.GenExpr(_4458_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1389, out _out1390, out _out1391);
            _4459_onExpr = _out1389;
            _4460_onOwned = _out1390;
            _4461_recIdents = _out1391;
            if ((_4455_isDatatype) || (_4456_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4459_onExpr, DCOMP.__default.escapeIdent(_4457_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4456_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4462_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4462_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4459_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4457_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4462_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4462_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4462_s);
            }
            readIdents = _4461_recIdents;
          }
        } else if (_source174.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4463___mcc_h57 = _source174.dtor_Companion_a0;
          bool _4464_isDatatype = _4444___mcc_h52;
          bool _4465_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4466_field = _4442___mcc_h50;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4467_c = _4463___mcc_h57;
          {
            RAST._IExpr _4468_onExpr;
            DCOMP._IOwnership _4469_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4470_recIdents;
            RAST._IExpr _out1392;
            DCOMP._IOwnership _out1393;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1394;
            DCOMP.COMP.GenExpr(DAST.Expression.create_Companion(_4467_c), selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1392, out _out1393, out _out1394);
            _4468_onExpr = _out1392;
            _4469_onOwned = _out1393;
            _4470_recIdents = _out1394;
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4468_onExpr)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_4466_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()")));
            resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
            readIdents = _4470_recIdents;
          }
        } else if (_source174.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _4471___mcc_h59 = _source174.dtor_Tuple_a0;
          bool _4472_isDatatype = _4444___mcc_h52;
          bool _4473_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4474_field = _4442___mcc_h50;
          DAST._IExpression _4475_on = _4441___mcc_h49;
          {
            RAST._IExpr _4476_onExpr;
            DCOMP._IOwnership _4477_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4478_recIdents;
            RAST._IExpr _out1395;
            DCOMP._IOwnership _out1396;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1397;
            DCOMP.COMP.GenExpr(_4475_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1395, out _out1396, out _out1397);
            _4476_onExpr = _out1395;
            _4477_onOwned = _out1396;
            _4478_recIdents = _out1397;
            if ((_4472_isDatatype) || (_4473_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4476_onExpr, DCOMP.__default.escapeIdent(_4474_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4473_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4479_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4479_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4476_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4474_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4479_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4479_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4479_s);
            }
            readIdents = _4478_recIdents;
          }
        } else if (_source174.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4480___mcc_h61 = _source174.dtor_path;
          Dafny.ISequence<DAST._IType> _4481___mcc_h62 = _source174.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _4482___mcc_h63 = _source174.dtor_args;
          bool _4483_isDatatype = _4444___mcc_h52;
          bool _4484_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4485_field = _4442___mcc_h50;
          DAST._IExpression _4486_on = _4441___mcc_h49;
          {
            RAST._IExpr _4487_onExpr;
            DCOMP._IOwnership _4488_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4489_recIdents;
            RAST._IExpr _out1398;
            DCOMP._IOwnership _out1399;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1400;
            DCOMP.COMP.GenExpr(_4486_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1398, out _out1399, out _out1400);
            _4487_onExpr = _out1398;
            _4488_onOwned = _out1399;
            _4489_recIdents = _out1400;
            if ((_4483_isDatatype) || (_4484_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4487_onExpr, DCOMP.__default.escapeIdent(_4485_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4484_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4490_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4490_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4487_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4485_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4490_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4490_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4490_s);
            }
            readIdents = _4489_recIdents;
          }
        } else if (_source174.is_NewArray) {
          Dafny.ISequence<DAST._IExpression> _4491___mcc_h67 = _source174.dtor_dims;
          DAST._IType _4492___mcc_h68 = _source174.dtor_typ;
          bool _4493_isDatatype = _4444___mcc_h52;
          bool _4494_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4495_field = _4442___mcc_h50;
          DAST._IExpression _4496_on = _4441___mcc_h49;
          {
            RAST._IExpr _4497_onExpr;
            DCOMP._IOwnership _4498_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4499_recIdents;
            RAST._IExpr _out1401;
            DCOMP._IOwnership _out1402;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1403;
            DCOMP.COMP.GenExpr(_4496_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1401, out _out1402, out _out1403);
            _4497_onExpr = _out1401;
            _4498_onOwned = _out1402;
            _4499_recIdents = _out1403;
            if ((_4493_isDatatype) || (_4494_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4497_onExpr, DCOMP.__default.escapeIdent(_4495_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4494_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4500_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4500_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4497_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4495_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4500_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4500_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4500_s);
            }
            readIdents = _4499_recIdents;
          }
        } else if (_source174.is_DatatypeValue) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4501___mcc_h71 = _source174.dtor_path;
          Dafny.ISequence<DAST._IType> _4502___mcc_h72 = _source174.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _4503___mcc_h73 = _source174.dtor_variant;
          bool _4504___mcc_h74 = _source174.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _4505___mcc_h75 = _source174.dtor_contents;
          bool _4506_isDatatype = _4444___mcc_h52;
          bool _4507_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4508_field = _4442___mcc_h50;
          DAST._IExpression _4509_on = _4441___mcc_h49;
          {
            RAST._IExpr _4510_onExpr;
            DCOMP._IOwnership _4511_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4512_recIdents;
            RAST._IExpr _out1404;
            DCOMP._IOwnership _out1405;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1406;
            DCOMP.COMP.GenExpr(_4509_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1404, out _out1405, out _out1406);
            _4510_onExpr = _out1404;
            _4511_onOwned = _out1405;
            _4512_recIdents = _out1406;
            if ((_4506_isDatatype) || (_4507_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4510_onExpr, DCOMP.__default.escapeIdent(_4508_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4507_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4513_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4513_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4510_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4508_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4513_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4513_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4513_s);
            }
            readIdents = _4512_recIdents;
          }
        } else if (_source174.is_Convert) {
          DAST._IExpression _4514___mcc_h81 = _source174.dtor_value;
          DAST._IType _4515___mcc_h82 = _source174.dtor_from;
          DAST._IType _4516___mcc_h83 = _source174.dtor_typ;
          bool _4517_isDatatype = _4444___mcc_h52;
          bool _4518_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4519_field = _4442___mcc_h50;
          DAST._IExpression _4520_on = _4441___mcc_h49;
          {
            RAST._IExpr _4521_onExpr;
            DCOMP._IOwnership _4522_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4523_recIdents;
            RAST._IExpr _out1407;
            DCOMP._IOwnership _out1408;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1409;
            DCOMP.COMP.GenExpr(_4520_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1407, out _out1408, out _out1409);
            _4521_onExpr = _out1407;
            _4522_onOwned = _out1408;
            _4523_recIdents = _out1409;
            if ((_4517_isDatatype) || (_4518_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4521_onExpr, DCOMP.__default.escapeIdent(_4519_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4518_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4524_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4524_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4521_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4519_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4524_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4524_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4524_s);
            }
            readIdents = _4523_recIdents;
          }
        } else if (_source174.is_SeqConstruct) {
          DAST._IExpression _4525___mcc_h87 = _source174.dtor_length;
          DAST._IExpression _4526___mcc_h88 = _source174.dtor_elem;
          bool _4527_isDatatype = _4444___mcc_h52;
          bool _4528_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4529_field = _4442___mcc_h50;
          DAST._IExpression _4530_on = _4441___mcc_h49;
          {
            RAST._IExpr _4531_onExpr;
            DCOMP._IOwnership _4532_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4533_recIdents;
            RAST._IExpr _out1410;
            DCOMP._IOwnership _out1411;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1412;
            DCOMP.COMP.GenExpr(_4530_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1410, out _out1411, out _out1412);
            _4531_onExpr = _out1410;
            _4532_onOwned = _out1411;
            _4533_recIdents = _out1412;
            if ((_4527_isDatatype) || (_4528_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4531_onExpr, DCOMP.__default.escapeIdent(_4529_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4528_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4534_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4534_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4531_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4529_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4534_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4534_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4534_s);
            }
            readIdents = _4533_recIdents;
          }
        } else if (_source174.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _4535___mcc_h91 = _source174.dtor_elements;
          DAST._IType _4536___mcc_h92 = _source174.dtor_typ;
          bool _4537_isDatatype = _4444___mcc_h52;
          bool _4538_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4539_field = _4442___mcc_h50;
          DAST._IExpression _4540_on = _4441___mcc_h49;
          {
            RAST._IExpr _4541_onExpr;
            DCOMP._IOwnership _4542_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4543_recIdents;
            RAST._IExpr _out1413;
            DCOMP._IOwnership _out1414;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1415;
            DCOMP.COMP.GenExpr(_4540_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1413, out _out1414, out _out1415);
            _4541_onExpr = _out1413;
            _4542_onOwned = _out1414;
            _4543_recIdents = _out1415;
            if ((_4537_isDatatype) || (_4538_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4541_onExpr, DCOMP.__default.escapeIdent(_4539_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4538_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4544_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4544_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4541_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4539_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4544_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4544_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4544_s);
            }
            readIdents = _4543_recIdents;
          }
        } else if (_source174.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _4545___mcc_h95 = _source174.dtor_elements;
          bool _4546_isDatatype = _4444___mcc_h52;
          bool _4547_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4548_field = _4442___mcc_h50;
          DAST._IExpression _4549_on = _4441___mcc_h49;
          {
            RAST._IExpr _4550_onExpr;
            DCOMP._IOwnership _4551_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4552_recIdents;
            RAST._IExpr _out1416;
            DCOMP._IOwnership _out1417;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1418;
            DCOMP.COMP.GenExpr(_4549_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1416, out _out1417, out _out1418);
            _4550_onExpr = _out1416;
            _4551_onOwned = _out1417;
            _4552_recIdents = _out1418;
            if ((_4546_isDatatype) || (_4547_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4550_onExpr, DCOMP.__default.escapeIdent(_4548_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4547_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4553_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4553_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4550_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4548_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4553_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4553_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4553_s);
            }
            readIdents = _4552_recIdents;
          }
        } else if (_source174.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _4554___mcc_h97 = _source174.dtor_mapElems;
          bool _4555_isDatatype = _4444___mcc_h52;
          bool _4556_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4557_field = _4442___mcc_h50;
          DAST._IExpression _4558_on = _4441___mcc_h49;
          {
            RAST._IExpr _4559_onExpr;
            DCOMP._IOwnership _4560_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4561_recIdents;
            RAST._IExpr _out1419;
            DCOMP._IOwnership _out1420;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1421;
            DCOMP.COMP.GenExpr(_4558_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1419, out _out1420, out _out1421);
            _4559_onExpr = _out1419;
            _4560_onOwned = _out1420;
            _4561_recIdents = _out1421;
            if ((_4555_isDatatype) || (_4556_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4559_onExpr, DCOMP.__default.escapeIdent(_4557_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4556_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4562_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4562_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4559_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4557_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4562_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4562_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4562_s);
            }
            readIdents = _4561_recIdents;
          }
        } else if (_source174.is_MapBuilder) {
          DAST._IType _4563___mcc_h99 = _source174.dtor_keyType;
          DAST._IType _4564___mcc_h100 = _source174.dtor_valueType;
          bool _4565_isDatatype = _4444___mcc_h52;
          bool _4566_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4567_field = _4442___mcc_h50;
          DAST._IExpression _4568_on = _4441___mcc_h49;
          {
            RAST._IExpr _4569_onExpr;
            DCOMP._IOwnership _4570_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4571_recIdents;
            RAST._IExpr _out1422;
            DCOMP._IOwnership _out1423;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1424;
            DCOMP.COMP.GenExpr(_4568_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1422, out _out1423, out _out1424);
            _4569_onExpr = _out1422;
            _4570_onOwned = _out1423;
            _4571_recIdents = _out1424;
            if ((_4565_isDatatype) || (_4566_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4569_onExpr, DCOMP.__default.escapeIdent(_4567_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4566_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4572_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4572_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4569_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4567_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4572_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4572_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4572_s);
            }
            readIdents = _4571_recIdents;
          }
        } else if (_source174.is_SetBuilder) {
          DAST._IType _4573___mcc_h103 = _source174.dtor_elemType;
          bool _4574_isDatatype = _4444___mcc_h52;
          bool _4575_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4576_field = _4442___mcc_h50;
          DAST._IExpression _4577_on = _4441___mcc_h49;
          {
            RAST._IExpr _4578_onExpr;
            DCOMP._IOwnership _4579_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4580_recIdents;
            RAST._IExpr _out1425;
            DCOMP._IOwnership _out1426;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1427;
            DCOMP.COMP.GenExpr(_4577_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1425, out _out1426, out _out1427);
            _4578_onExpr = _out1425;
            _4579_onOwned = _out1426;
            _4580_recIdents = _out1427;
            if ((_4574_isDatatype) || (_4575_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4578_onExpr, DCOMP.__default.escapeIdent(_4576_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4575_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4581_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4581_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4578_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4576_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4581_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4581_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4581_s);
            }
            readIdents = _4580_recIdents;
          }
        } else if (_source174.is_This) {
          bool _4582_isDatatype = _4444___mcc_h52;
          bool _4583_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4584_field = _4442___mcc_h50;
          DAST._IExpression _4585_on = _4441___mcc_h49;
          {
            RAST._IExpr _4586_onExpr;
            DCOMP._IOwnership _4587_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4588_recIdents;
            RAST._IExpr _out1428;
            DCOMP._IOwnership _out1429;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1430;
            DCOMP.COMP.GenExpr(_4585_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1428, out _out1429, out _out1430);
            _4586_onExpr = _out1428;
            _4587_onOwned = _out1429;
            _4588_recIdents = _out1430;
            if ((_4582_isDatatype) || (_4583_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4586_onExpr, DCOMP.__default.escapeIdent(_4584_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4583_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4589_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4589_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4586_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4584_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4589_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4589_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4589_s);
            }
            readIdents = _4588_recIdents;
          }
        } else if (_source174.is_Ite) {
          DAST._IExpression _4590___mcc_h105 = _source174.dtor_cond;
          DAST._IExpression _4591___mcc_h106 = _source174.dtor_thn;
          DAST._IExpression _4592___mcc_h107 = _source174.dtor_els;
          bool _4593_isDatatype = _4444___mcc_h52;
          bool _4594_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4595_field = _4442___mcc_h50;
          DAST._IExpression _4596_on = _4441___mcc_h49;
          {
            RAST._IExpr _4597_onExpr;
            DCOMP._IOwnership _4598_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4599_recIdents;
            RAST._IExpr _out1431;
            DCOMP._IOwnership _out1432;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1433;
            DCOMP.COMP.GenExpr(_4596_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1431, out _out1432, out _out1433);
            _4597_onExpr = _out1431;
            _4598_onOwned = _out1432;
            _4599_recIdents = _out1433;
            if ((_4593_isDatatype) || (_4594_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4597_onExpr, DCOMP.__default.escapeIdent(_4595_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4594_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4600_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4600_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4597_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4595_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4600_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4600_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4600_s);
            }
            readIdents = _4599_recIdents;
          }
        } else if (_source174.is_UnOp) {
          DAST._IUnaryOp _4601___mcc_h111 = _source174.dtor_unOp;
          DAST._IExpression _4602___mcc_h112 = _source174.dtor_expr;
          DAST.Format._IUnOpFormat _4603___mcc_h113 = _source174.dtor_format1;
          bool _4604_isDatatype = _4444___mcc_h52;
          bool _4605_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4606_field = _4442___mcc_h50;
          DAST._IExpression _4607_on = _4441___mcc_h49;
          {
            RAST._IExpr _4608_onExpr;
            DCOMP._IOwnership _4609_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4610_recIdents;
            RAST._IExpr _out1434;
            DCOMP._IOwnership _out1435;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1436;
            DCOMP.COMP.GenExpr(_4607_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1434, out _out1435, out _out1436);
            _4608_onExpr = _out1434;
            _4609_onOwned = _out1435;
            _4610_recIdents = _out1436;
            if ((_4604_isDatatype) || (_4605_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4608_onExpr, DCOMP.__default.escapeIdent(_4606_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4605_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4611_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4611_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4608_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4606_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4611_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4611_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4611_s);
            }
            readIdents = _4610_recIdents;
          }
        } else if (_source174.is_BinOp) {
          DAST._IBinOp _4612___mcc_h117 = _source174.dtor_op;
          DAST._IExpression _4613___mcc_h118 = _source174.dtor_left;
          DAST._IExpression _4614___mcc_h119 = _source174.dtor_right;
          DAST.Format._IBinOpFormat _4615___mcc_h120 = _source174.dtor_format2;
          bool _4616_isDatatype = _4444___mcc_h52;
          bool _4617_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4618_field = _4442___mcc_h50;
          DAST._IExpression _4619_on = _4441___mcc_h49;
          {
            RAST._IExpr _4620_onExpr;
            DCOMP._IOwnership _4621_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4622_recIdents;
            RAST._IExpr _out1437;
            DCOMP._IOwnership _out1438;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1439;
            DCOMP.COMP.GenExpr(_4619_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1437, out _out1438, out _out1439);
            _4620_onExpr = _out1437;
            _4621_onOwned = _out1438;
            _4622_recIdents = _out1439;
            if ((_4616_isDatatype) || (_4617_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4620_onExpr, DCOMP.__default.escapeIdent(_4618_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4617_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4623_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4623_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4620_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4618_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4623_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4623_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4623_s);
            }
            readIdents = _4622_recIdents;
          }
        } else if (_source174.is_ArrayLen) {
          DAST._IExpression _4624___mcc_h125 = _source174.dtor_expr;
          BigInteger _4625___mcc_h126 = _source174.dtor_dim;
          bool _4626_isDatatype = _4444___mcc_h52;
          bool _4627_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4628_field = _4442___mcc_h50;
          DAST._IExpression _4629_on = _4441___mcc_h49;
          {
            RAST._IExpr _4630_onExpr;
            DCOMP._IOwnership _4631_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4632_recIdents;
            RAST._IExpr _out1440;
            DCOMP._IOwnership _out1441;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1442;
            DCOMP.COMP.GenExpr(_4629_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1440, out _out1441, out _out1442);
            _4630_onExpr = _out1440;
            _4631_onOwned = _out1441;
            _4632_recIdents = _out1442;
            if ((_4626_isDatatype) || (_4627_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4630_onExpr, DCOMP.__default.escapeIdent(_4628_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4627_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4633_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4633_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4630_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4628_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4633_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4633_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4633_s);
            }
            readIdents = _4632_recIdents;
          }
        } else if (_source174.is_MapKeys) {
          DAST._IExpression _4634___mcc_h129 = _source174.dtor_expr;
          bool _4635_isDatatype = _4444___mcc_h52;
          bool _4636_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4637_field = _4442___mcc_h50;
          DAST._IExpression _4638_on = _4441___mcc_h49;
          {
            RAST._IExpr _4639_onExpr;
            DCOMP._IOwnership _4640_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4641_recIdents;
            RAST._IExpr _out1443;
            DCOMP._IOwnership _out1444;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1445;
            DCOMP.COMP.GenExpr(_4638_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1443, out _out1444, out _out1445);
            _4639_onExpr = _out1443;
            _4640_onOwned = _out1444;
            _4641_recIdents = _out1445;
            if ((_4635_isDatatype) || (_4636_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4639_onExpr, DCOMP.__default.escapeIdent(_4637_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4636_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4642_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4642_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4639_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4637_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4642_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4642_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4642_s);
            }
            readIdents = _4641_recIdents;
          }
        } else if (_source174.is_MapValues) {
          DAST._IExpression _4643___mcc_h131 = _source174.dtor_expr;
          bool _4644_isDatatype = _4444___mcc_h52;
          bool _4645_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4646_field = _4442___mcc_h50;
          DAST._IExpression _4647_on = _4441___mcc_h49;
          {
            RAST._IExpr _4648_onExpr;
            DCOMP._IOwnership _4649_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4650_recIdents;
            RAST._IExpr _out1446;
            DCOMP._IOwnership _out1447;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1448;
            DCOMP.COMP.GenExpr(_4647_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1446, out _out1447, out _out1448);
            _4648_onExpr = _out1446;
            _4649_onOwned = _out1447;
            _4650_recIdents = _out1448;
            if ((_4644_isDatatype) || (_4645_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4648_onExpr, DCOMP.__default.escapeIdent(_4646_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4645_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4651_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4651_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4648_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4646_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4651_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4651_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4651_s);
            }
            readIdents = _4650_recIdents;
          }
        } else if (_source174.is_Select) {
          DAST._IExpression _4652___mcc_h133 = _source174.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _4653___mcc_h134 = _source174.dtor_field;
          bool _4654___mcc_h135 = _source174.dtor_isConstant;
          bool _4655___mcc_h136 = _source174.dtor_onDatatype;
          bool _4656_isDatatype = _4444___mcc_h52;
          bool _4657_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4658_field = _4442___mcc_h50;
          DAST._IExpression _4659_on = _4441___mcc_h49;
          {
            RAST._IExpr _4660_onExpr;
            DCOMP._IOwnership _4661_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4662_recIdents;
            RAST._IExpr _out1449;
            DCOMP._IOwnership _out1450;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1451;
            DCOMP.COMP.GenExpr(_4659_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1449, out _out1450, out _out1451);
            _4660_onExpr = _out1449;
            _4661_onOwned = _out1450;
            _4662_recIdents = _out1451;
            if ((_4656_isDatatype) || (_4657_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4660_onExpr, DCOMP.__default.escapeIdent(_4658_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4657_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4663_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4663_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4660_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4658_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4663_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4663_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4663_s);
            }
            readIdents = _4662_recIdents;
          }
        } else if (_source174.is_SelectFn) {
          DAST._IExpression _4664___mcc_h141 = _source174.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _4665___mcc_h142 = _source174.dtor_field;
          bool _4666___mcc_h143 = _source174.dtor_onDatatype;
          bool _4667___mcc_h144 = _source174.dtor_isStatic;
          BigInteger _4668___mcc_h145 = _source174.dtor_arity;
          bool _4669_isDatatype = _4444___mcc_h52;
          bool _4670_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4671_field = _4442___mcc_h50;
          DAST._IExpression _4672_on = _4441___mcc_h49;
          {
            RAST._IExpr _4673_onExpr;
            DCOMP._IOwnership _4674_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4675_recIdents;
            RAST._IExpr _out1452;
            DCOMP._IOwnership _out1453;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1454;
            DCOMP.COMP.GenExpr(_4672_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1452, out _out1453, out _out1454);
            _4673_onExpr = _out1452;
            _4674_onOwned = _out1453;
            _4675_recIdents = _out1454;
            if ((_4669_isDatatype) || (_4670_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4673_onExpr, DCOMP.__default.escapeIdent(_4671_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4670_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4676_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4676_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4673_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4671_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4676_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4676_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4676_s);
            }
            readIdents = _4675_recIdents;
          }
        } else if (_source174.is_Index) {
          DAST._IExpression _4677___mcc_h151 = _source174.dtor_expr;
          DAST._ICollKind _4678___mcc_h152 = _source174.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _4679___mcc_h153 = _source174.dtor_indices;
          bool _4680_isDatatype = _4444___mcc_h52;
          bool _4681_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4682_field = _4442___mcc_h50;
          DAST._IExpression _4683_on = _4441___mcc_h49;
          {
            RAST._IExpr _4684_onExpr;
            DCOMP._IOwnership _4685_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4686_recIdents;
            RAST._IExpr _out1455;
            DCOMP._IOwnership _out1456;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1457;
            DCOMP.COMP.GenExpr(_4683_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1455, out _out1456, out _out1457);
            _4684_onExpr = _out1455;
            _4685_onOwned = _out1456;
            _4686_recIdents = _out1457;
            if ((_4680_isDatatype) || (_4681_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4684_onExpr, DCOMP.__default.escapeIdent(_4682_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4681_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4687_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4687_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4684_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4682_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4687_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4687_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4687_s);
            }
            readIdents = _4686_recIdents;
          }
        } else if (_source174.is_IndexRange) {
          DAST._IExpression _4688___mcc_h157 = _source174.dtor_expr;
          bool _4689___mcc_h158 = _source174.dtor_isArray;
          Std.Wrappers._IOption<DAST._IExpression> _4690___mcc_h159 = _source174.dtor_low;
          Std.Wrappers._IOption<DAST._IExpression> _4691___mcc_h160 = _source174.dtor_high;
          bool _4692_isDatatype = _4444___mcc_h52;
          bool _4693_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4694_field = _4442___mcc_h50;
          DAST._IExpression _4695_on = _4441___mcc_h49;
          {
            RAST._IExpr _4696_onExpr;
            DCOMP._IOwnership _4697_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4698_recIdents;
            RAST._IExpr _out1458;
            DCOMP._IOwnership _out1459;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1460;
            DCOMP.COMP.GenExpr(_4695_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1458, out _out1459, out _out1460);
            _4696_onExpr = _out1458;
            _4697_onOwned = _out1459;
            _4698_recIdents = _out1460;
            if ((_4692_isDatatype) || (_4693_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4696_onExpr, DCOMP.__default.escapeIdent(_4694_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4693_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4699_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4699_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4696_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4694_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4699_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4699_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4699_s);
            }
            readIdents = _4698_recIdents;
          }
        } else if (_source174.is_TupleSelect) {
          DAST._IExpression _4700___mcc_h165 = _source174.dtor_expr;
          BigInteger _4701___mcc_h166 = _source174.dtor_index;
          bool _4702_isDatatype = _4444___mcc_h52;
          bool _4703_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4704_field = _4442___mcc_h50;
          DAST._IExpression _4705_on = _4441___mcc_h49;
          {
            RAST._IExpr _4706_onExpr;
            DCOMP._IOwnership _4707_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4708_recIdents;
            RAST._IExpr _out1461;
            DCOMP._IOwnership _out1462;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1463;
            DCOMP.COMP.GenExpr(_4705_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1461, out _out1462, out _out1463);
            _4706_onExpr = _out1461;
            _4707_onOwned = _out1462;
            _4708_recIdents = _out1463;
            if ((_4702_isDatatype) || (_4703_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4706_onExpr, DCOMP.__default.escapeIdent(_4704_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4703_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4709_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4709_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4706_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4704_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4709_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4709_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4709_s);
            }
            readIdents = _4708_recIdents;
          }
        } else if (_source174.is_Call) {
          DAST._IExpression _4710___mcc_h169 = _source174.dtor_on;
          DAST._ICallName _4711___mcc_h170 = _source174.dtor_callName;
          Dafny.ISequence<DAST._IType> _4712___mcc_h171 = _source174.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _4713___mcc_h172 = _source174.dtor_args;
          bool _4714_isDatatype = _4444___mcc_h52;
          bool _4715_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4716_field = _4442___mcc_h50;
          DAST._IExpression _4717_on = _4441___mcc_h49;
          {
            RAST._IExpr _4718_onExpr;
            DCOMP._IOwnership _4719_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4720_recIdents;
            RAST._IExpr _out1464;
            DCOMP._IOwnership _out1465;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1466;
            DCOMP.COMP.GenExpr(_4717_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1464, out _out1465, out _out1466);
            _4718_onExpr = _out1464;
            _4719_onOwned = _out1465;
            _4720_recIdents = _out1466;
            if ((_4714_isDatatype) || (_4715_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4718_onExpr, DCOMP.__default.escapeIdent(_4716_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4715_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4721_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4721_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4718_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4716_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4721_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4721_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4721_s);
            }
            readIdents = _4720_recIdents;
          }
        } else if (_source174.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _4722___mcc_h177 = _source174.dtor_params;
          DAST._IType _4723___mcc_h178 = _source174.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _4724___mcc_h179 = _source174.dtor_body;
          bool _4725_isDatatype = _4444___mcc_h52;
          bool _4726_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4727_field = _4442___mcc_h50;
          DAST._IExpression _4728_on = _4441___mcc_h49;
          {
            RAST._IExpr _4729_onExpr;
            DCOMP._IOwnership _4730_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4731_recIdents;
            RAST._IExpr _out1467;
            DCOMP._IOwnership _out1468;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1469;
            DCOMP.COMP.GenExpr(_4728_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1467, out _out1468, out _out1469);
            _4729_onExpr = _out1467;
            _4730_onOwned = _out1468;
            _4731_recIdents = _out1469;
            if ((_4725_isDatatype) || (_4726_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4729_onExpr, DCOMP.__default.escapeIdent(_4727_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4726_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4732_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4732_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4729_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4727_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4732_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4732_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4732_s);
            }
            readIdents = _4731_recIdents;
          }
        } else if (_source174.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _4733___mcc_h183 = _source174.dtor_values;
          DAST._IType _4734___mcc_h184 = _source174.dtor_retType;
          DAST._IExpression _4735___mcc_h185 = _source174.dtor_expr;
          bool _4736_isDatatype = _4444___mcc_h52;
          bool _4737_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4738_field = _4442___mcc_h50;
          DAST._IExpression _4739_on = _4441___mcc_h49;
          {
            RAST._IExpr _4740_onExpr;
            DCOMP._IOwnership _4741_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4742_recIdents;
            RAST._IExpr _out1470;
            DCOMP._IOwnership _out1471;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1472;
            DCOMP.COMP.GenExpr(_4739_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1470, out _out1471, out _out1472);
            _4740_onExpr = _out1470;
            _4741_onOwned = _out1471;
            _4742_recIdents = _out1472;
            if ((_4736_isDatatype) || (_4737_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4740_onExpr, DCOMP.__default.escapeIdent(_4738_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4737_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4743_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4743_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4740_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4738_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4743_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4743_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4743_s);
            }
            readIdents = _4742_recIdents;
          }
        } else if (_source174.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _4744___mcc_h189 = _source174.dtor_name;
          DAST._IType _4745___mcc_h190 = _source174.dtor_typ;
          DAST._IExpression _4746___mcc_h191 = _source174.dtor_value;
          DAST._IExpression _4747___mcc_h192 = _source174.dtor_iifeBody;
          bool _4748_isDatatype = _4444___mcc_h52;
          bool _4749_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4750_field = _4442___mcc_h50;
          DAST._IExpression _4751_on = _4441___mcc_h49;
          {
            RAST._IExpr _4752_onExpr;
            DCOMP._IOwnership _4753_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4754_recIdents;
            RAST._IExpr _out1473;
            DCOMP._IOwnership _out1474;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1475;
            DCOMP.COMP.GenExpr(_4751_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1473, out _out1474, out _out1475);
            _4752_onExpr = _out1473;
            _4753_onOwned = _out1474;
            _4754_recIdents = _out1475;
            if ((_4748_isDatatype) || (_4749_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4752_onExpr, DCOMP.__default.escapeIdent(_4750_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4749_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4755_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4755_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4752_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4750_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4755_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4755_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4755_s);
            }
            readIdents = _4754_recIdents;
          }
        } else if (_source174.is_Apply) {
          DAST._IExpression _4756___mcc_h197 = _source174.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _4757___mcc_h198 = _source174.dtor_args;
          bool _4758_isDatatype = _4444___mcc_h52;
          bool _4759_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4760_field = _4442___mcc_h50;
          DAST._IExpression _4761_on = _4441___mcc_h49;
          {
            RAST._IExpr _4762_onExpr;
            DCOMP._IOwnership _4763_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4764_recIdents;
            RAST._IExpr _out1476;
            DCOMP._IOwnership _out1477;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1478;
            DCOMP.COMP.GenExpr(_4761_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1476, out _out1477, out _out1478);
            _4762_onExpr = _out1476;
            _4763_onOwned = _out1477;
            _4764_recIdents = _out1478;
            if ((_4758_isDatatype) || (_4759_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4762_onExpr, DCOMP.__default.escapeIdent(_4760_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4759_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4765_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4765_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4762_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4760_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4765_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4765_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4765_s);
            }
            readIdents = _4764_recIdents;
          }
        } else if (_source174.is_TypeTest) {
          DAST._IExpression _4766___mcc_h201 = _source174.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4767___mcc_h202 = _source174.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _4768___mcc_h203 = _source174.dtor_variant;
          bool _4769_isDatatype = _4444___mcc_h52;
          bool _4770_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4771_field = _4442___mcc_h50;
          DAST._IExpression _4772_on = _4441___mcc_h49;
          {
            RAST._IExpr _4773_onExpr;
            DCOMP._IOwnership _4774_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4775_recIdents;
            RAST._IExpr _out1479;
            DCOMP._IOwnership _out1480;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1481;
            DCOMP.COMP.GenExpr(_4772_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1479, out _out1480, out _out1481);
            _4773_onExpr = _out1479;
            _4774_onOwned = _out1480;
            _4775_recIdents = _out1481;
            if ((_4769_isDatatype) || (_4770_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4773_onExpr, DCOMP.__default.escapeIdent(_4771_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4770_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4776_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4776_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4773_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4771_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4776_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4776_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4776_s);
            }
            readIdents = _4775_recIdents;
          }
        } else if (_source174.is_InitializationValue) {
          DAST._IType _4777___mcc_h207 = _source174.dtor_typ;
          bool _4778_isDatatype = _4444___mcc_h52;
          bool _4779_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4780_field = _4442___mcc_h50;
          DAST._IExpression _4781_on = _4441___mcc_h49;
          {
            RAST._IExpr _4782_onExpr;
            DCOMP._IOwnership _4783_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4784_recIdents;
            RAST._IExpr _out1482;
            DCOMP._IOwnership _out1483;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1484;
            DCOMP.COMP.GenExpr(_4781_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1482, out _out1483, out _out1484);
            _4782_onExpr = _out1482;
            _4783_onOwned = _out1483;
            _4784_recIdents = _out1484;
            if ((_4778_isDatatype) || (_4779_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4782_onExpr, DCOMP.__default.escapeIdent(_4780_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4779_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4785_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4785_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4782_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4780_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4785_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4785_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4785_s);
            }
            readIdents = _4784_recIdents;
          }
        } else if (_source174.is_BoolBoundedPool) {
          bool _4786_isDatatype = _4444___mcc_h52;
          bool _4787_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4788_field = _4442___mcc_h50;
          DAST._IExpression _4789_on = _4441___mcc_h49;
          {
            RAST._IExpr _4790_onExpr;
            DCOMP._IOwnership _4791_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4792_recIdents;
            RAST._IExpr _out1485;
            DCOMP._IOwnership _out1486;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1487;
            DCOMP.COMP.GenExpr(_4789_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1485, out _out1486, out _out1487);
            _4790_onExpr = _out1485;
            _4791_onOwned = _out1486;
            _4792_recIdents = _out1487;
            if ((_4786_isDatatype) || (_4787_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4790_onExpr, DCOMP.__default.escapeIdent(_4788_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4787_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4793_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4793_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4790_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4788_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4793_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4793_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4793_s);
            }
            readIdents = _4792_recIdents;
          }
        } else if (_source174.is_SetBoundedPool) {
          DAST._IExpression _4794___mcc_h209 = _source174.dtor_of;
          bool _4795_isDatatype = _4444___mcc_h52;
          bool _4796_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4797_field = _4442___mcc_h50;
          DAST._IExpression _4798_on = _4441___mcc_h49;
          {
            RAST._IExpr _4799_onExpr;
            DCOMP._IOwnership _4800_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4801_recIdents;
            RAST._IExpr _out1488;
            DCOMP._IOwnership _out1489;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1490;
            DCOMP.COMP.GenExpr(_4798_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1488, out _out1489, out _out1490);
            _4799_onExpr = _out1488;
            _4800_onOwned = _out1489;
            _4801_recIdents = _out1490;
            if ((_4795_isDatatype) || (_4796_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4799_onExpr, DCOMP.__default.escapeIdent(_4797_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4796_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4802_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4802_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4799_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4797_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4802_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4802_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4802_s);
            }
            readIdents = _4801_recIdents;
          }
        } else if (_source174.is_SeqBoundedPool) {
          DAST._IExpression _4803___mcc_h211 = _source174.dtor_of;
          bool _4804___mcc_h212 = _source174.dtor_includeDuplicates;
          bool _4805_isDatatype = _4444___mcc_h52;
          bool _4806_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4807_field = _4442___mcc_h50;
          DAST._IExpression _4808_on = _4441___mcc_h49;
          {
            RAST._IExpr _4809_onExpr;
            DCOMP._IOwnership _4810_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4811_recIdents;
            RAST._IExpr _out1491;
            DCOMP._IOwnership _out1492;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1493;
            DCOMP.COMP.GenExpr(_4808_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1491, out _out1492, out _out1493);
            _4809_onExpr = _out1491;
            _4810_onOwned = _out1492;
            _4811_recIdents = _out1493;
            if ((_4805_isDatatype) || (_4806_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4809_onExpr, DCOMP.__default.escapeIdent(_4807_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4806_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4812_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4812_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4809_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4807_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4812_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4812_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4812_s);
            }
            readIdents = _4811_recIdents;
          }
        } else {
          DAST._IExpression _4813___mcc_h215 = _source174.dtor_lo;
          DAST._IExpression _4814___mcc_h216 = _source174.dtor_hi;
          bool _4815_isDatatype = _4444___mcc_h52;
          bool _4816_isConstant = _4443___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4817_field = _4442___mcc_h50;
          DAST._IExpression _4818_on = _4441___mcc_h49;
          {
            RAST._IExpr _4819_onExpr;
            DCOMP._IOwnership _4820_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4821_recIdents;
            RAST._IExpr _out1494;
            DCOMP._IOwnership _out1495;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1496;
            DCOMP.COMP.GenExpr(_4818_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1494, out _out1495, out _out1496);
            _4819_onExpr = _out1494;
            _4820_onOwned = _out1495;
            _4821_recIdents = _out1496;
            if ((_4815_isDatatype) || (_4816_isConstant)) {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_4819_onExpr, DCOMP.__default.escapeIdent(_4817_field)), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
              if (_4816_isConstant) {
                r = RAST.__default.Borrow(r);
              }
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else {
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4822_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _4822_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4819_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4817_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4822_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4822_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              r = RAST.Expr.create_RawExpr(_4822_s);
            }
            readIdents = _4821_recIdents;
          }
        }
      } else if (_source80.is_SelectFn) {
        DAST._IExpression _4823___mcc_h219 = _source80.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _4824___mcc_h220 = _source80.dtor_field;
        bool _4825___mcc_h221 = _source80.dtor_onDatatype;
        bool _4826___mcc_h222 = _source80.dtor_isStatic;
        BigInteger _4827___mcc_h223 = _source80.dtor_arity;
        BigInteger _4828_arity = _4827___mcc_h223;
        bool _4829_isStatic = _4826___mcc_h222;
        bool _4830_isDatatype = _4825___mcc_h221;
        Dafny.ISequence<Dafny.Rune> _4831_field = _4824___mcc_h220;
        DAST._IExpression _4832_on = _4823___mcc_h219;
        {
          RAST._IExpr _4833_onExpr;
          DCOMP._IOwnership _4834_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4835_recIdents;
          RAST._IExpr _out1497;
          DCOMP._IOwnership _out1498;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1499;
          DCOMP.COMP.GenExpr(_4832_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1497, out _out1498, out _out1499);
          _4833_onExpr = _out1497;
          _4834_onOwned = _out1498;
          _4835_recIdents = _out1499;
          Dafny.ISequence<Dafny.Rune> _4836_s = Dafny.Sequence<Dafny.Rune>.Empty;
          Dafny.ISequence<Dafny.Rune> _4837_onString;
          _4837_onString = (_4833_onExpr)._ToString(DCOMP.__default.IND);
          if (_4829_isStatic) {
            _4836_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4837_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_4831_field));
          } else {
            _4836_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            _4836_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4836_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _4837_onString), ((object.Equals(_4834_onOwned, DCOMP.Ownership.create_OwnershipOwned())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _4838_args;
            _4838_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _4839_i;
            _4839_i = BigInteger.Zero;
            while ((_4839_i) < (_4828_arity)) {
              if ((_4839_i).Sign == 1) {
                _4838_args = Dafny.Sequence<Dafny.Rune>.Concat(_4838_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _4838_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4838_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), Std.Strings.__default.OfNat(_4839_i));
              _4839_i = (_4839_i) + (BigInteger.One);
            }
            _4836_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4836_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _4838_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            _4836_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4836_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), _4831_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _4838_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            _4836_s = Dafny.Sequence<Dafny.Rune>.Concat(_4836_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            _4836_s = Dafny.Sequence<Dafny.Rune>.Concat(_4836_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _4840_typeShape;
          _4840_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _4841_i;
          _4841_i = BigInteger.Zero;
          while ((_4841_i) < (_4828_arity)) {
            if ((_4841_i).Sign == 1) {
              _4840_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_4840_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _4840_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_4840_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _4841_i = (_4841_i) + (BigInteger.One);
          }
          _4840_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_4840_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          _4836_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper(::std::rc::Rc::new("), _4836_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _4840_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          r = RAST.Expr.create_RawExpr(_4836_s);
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          readIdents = _4835_recIdents;
        }
      } else if (_source80.is_Index) {
        DAST._IExpression _4842___mcc_h224 = _source80.dtor_expr;
        DAST._ICollKind _4843___mcc_h225 = _source80.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _4844___mcc_h226 = _source80.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _4845_indices = _4844___mcc_h226;
        DAST._ICollKind _4846_collKind = _4843___mcc_h225;
        DAST._IExpression _4847_on = _4842___mcc_h224;
        {
          RAST._IExpr _4848_onExpr;
          DCOMP._IOwnership _4849_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4850_recIdents;
          RAST._IExpr _out1500;
          DCOMP._IOwnership _out1501;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1502;
          DCOMP.COMP.GenExpr(_4847_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1500, out _out1501, out _out1502);
          _4848_onExpr = _out1500;
          _4849_onOwned = _out1501;
          _4850_recIdents = _out1502;
          readIdents = _4850_recIdents;
          Dafny.ISequence<Dafny.Rune> _4851_s;
          _4851_s = (_4848_onExpr)._ToString(DCOMP.__default.IND);
          BigInteger _4852_i;
          _4852_i = BigInteger.Zero;
          while ((_4852_i) < (new BigInteger((_4845_indices).Count))) {
            if (object.Equals(_4846_collKind, DAST.CollKind.create_Array())) {
              _4851_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4851_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
            }
            if (object.Equals(_4846_collKind, DAST.CollKind.create_Map())) {
              RAST._IExpr _4853_idx;
              DCOMP._IOwnership _4854_idxOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4855_recIdentsIdx;
              RAST._IExpr _out1503;
              DCOMP._IOwnership _out1504;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1505;
              DCOMP.COMP.GenExpr((_4845_indices).Select(_4852_i), selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1503, out _out1504, out _out1505);
              _4853_idx = _out1503;
              _4854_idxOwned = _out1504;
              _4855_recIdentsIdx = _out1505;
              _4851_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4851_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").get(")), ((object.Equals(_4854_idxOwned, DCOMP.Ownership.create_OwnershipOwned())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), (_4853_idx)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4855_recIdentsIdx);
            } else {
              RAST._IExpr _4856_idx;
              DCOMP._IOwnership _4857_idxOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4858_recIdentsIdx;
              RAST._IExpr _out1506;
              DCOMP._IOwnership _out1507;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1508;
              DCOMP.COMP.GenExpr((_4845_indices).Select(_4852_i), selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1506, out _out1507, out _out1508);
              _4856_idx = _out1506;
              _4857_idxOwned = _out1507;
              _4858_recIdentsIdx = _out1508;
              _4851_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4851_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").get(")), ((object.Equals(_4857_idxOwned, DCOMP.Ownership.create_OwnershipOwned())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), (_4856_idx)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4858_recIdentsIdx);
            }
            _4852_i = (_4852_i) + (BigInteger.One);
          }
          r = RAST.Expr.create_RawExpr(_4851_s);
          if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
            r = RAST.__default.Clone(r);
            resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          } else {
            r = RAST.__default.Borrow(r);
            resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
          }
        }
      } else if (_source80.is_IndexRange) {
        DAST._IExpression _4859___mcc_h227 = _source80.dtor_expr;
        bool _4860___mcc_h228 = _source80.dtor_isArray;
        Std.Wrappers._IOption<DAST._IExpression> _4861___mcc_h229 = _source80.dtor_low;
        Std.Wrappers._IOption<DAST._IExpression> _4862___mcc_h230 = _source80.dtor_high;
        Std.Wrappers._IOption<DAST._IExpression> _4863_high = _4862___mcc_h230;
        Std.Wrappers._IOption<DAST._IExpression> _4864_low = _4861___mcc_h229;
        bool _4865_isArray = _4860___mcc_h228;
        DAST._IExpression _4866_on = _4859___mcc_h227;
        {
          RAST._IExpr _4867_onExpr;
          DCOMP._IOwnership _4868_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4869_recIdents;
          RAST._IExpr _out1509;
          DCOMP._IOwnership _out1510;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1511;
          DCOMP.COMP.GenExpr(_4866_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1509, out _out1510, out _out1511);
          _4867_onExpr = _out1509;
          _4868_onOwned = _out1510;
          _4869_recIdents = _out1511;
          readIdents = _4869_recIdents;
          Dafny.ISequence<Dafny.Rune> _4870_s;
          _4870_s = (_4867_onExpr)._ToString(DCOMP.__default.IND);
          Std.Wrappers._IOption<RAST._IExpr> _4871_lowString;
          _4871_lowString = Std.Wrappers.Option<RAST._IExpr>.create_None();
          Std.Wrappers._IOption<DAST._IExpression> _source175 = _4864_low;
          if (_source175.is_None) {
          } else {
            DAST._IExpression _4872___mcc_h1572 = _source175.dtor_value;
            DAST._IExpression _4873_l = _4872___mcc_h1572;
            {
              RAST._IExpr _4874_lString;
              DCOMP._IOwnership _4875___v90;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4876_recIdentsL;
              RAST._IExpr _out1512;
              DCOMP._IOwnership _out1513;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1514;
              DCOMP.COMP.GenExpr(_4873_l, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1512, out _out1513, out _out1514);
              _4874_lString = _out1512;
              _4875___v90 = _out1513;
              _4876_recIdentsL = _out1514;
              _4871_lowString = Std.Wrappers.Option<RAST._IExpr>.create_Some(_4874_lString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4876_recIdentsL);
            }
          }
          Std.Wrappers._IOption<RAST._IExpr> _4877_highString;
          _4877_highString = Std.Wrappers.Option<RAST._IExpr>.create_None();
          Std.Wrappers._IOption<DAST._IExpression> _source176 = _4863_high;
          if (_source176.is_None) {
          } else {
            DAST._IExpression _4878___mcc_h1573 = _source176.dtor_value;
            DAST._IExpression _4879_h = _4878___mcc_h1573;
            {
              RAST._IExpr _4880_hString;
              DCOMP._IOwnership _4881___v91;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4882_recIdentsH;
              RAST._IExpr _out1515;
              DCOMP._IOwnership _out1516;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1517;
              DCOMP.COMP.GenExpr(_4879_h, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1515, out _out1516, out _out1517);
              _4880_hString = _out1515;
              _4881___v91 = _out1516;
              _4882_recIdentsH = _out1517;
              _4877_highString = Std.Wrappers.Option<RAST._IExpr>.create_Some(_4880_hString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4882_recIdentsH);
            }
          }
          if (_4865_isArray) {
            _4870_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4870_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
          }
          _4870_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4870_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[")), ((System.Func<Std.Wrappers._IOption<RAST._IExpr>, Dafny.ISequence<Dafny.Rune>>)((_source177) => {
            if (_source177.is_None) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            } else {
              RAST._IExpr _4883___mcc_h1574 = _source177.dtor_value;
              RAST._IExpr _4884_l = _4883___mcc_h1574;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), (_4884_l)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            }
          }))(_4871_lowString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("..")), ((System.Func<Std.Wrappers._IOption<RAST._IExpr>, Dafny.ISequence<Dafny.Rune>>)((_source178) => {
            if (_source178.is_None) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            } else {
              RAST._IExpr _4885___mcc_h1575 = _source178.dtor_value;
              RAST._IExpr _4886_h = _4885___mcc_h1575;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), (_4886_h)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            }
          }))(_4877_highString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
          _4870_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4870_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".to_vec())"));
          r = RAST.Expr.create_RawExpr(_4870_s);
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
        }
      } else if (_source80.is_TupleSelect) {
        DAST._IExpression _4887___mcc_h231 = _source80.dtor_expr;
        BigInteger _4888___mcc_h232 = _source80.dtor_index;
        BigInteger _4889_idx = _4888___mcc_h232;
        DAST._IExpression _4890_on = _4887___mcc_h231;
        {
          RAST._IExpr _4891_onExpr;
          DCOMP._IOwnership _4892___v92;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4893_recIdents;
          RAST._IExpr _out1518;
          DCOMP._IOwnership _out1519;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1520;
          DCOMP.COMP.GenExpr(_4890_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1518, out _out1519, out _out1520);
          _4891_onExpr = _out1518;
          _4892___v92 = _out1519;
          _4893_recIdents = _out1520;
          r = RAST.Expr.create_Select(_4891_onExpr, Std.Strings.__default.OfNat(_4889_idx));
          if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
            r = RAST.__default.Clone(r);
            resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          } else {
            r = RAST.__default.Borrow(r);
            resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
          }
          readIdents = _4893_recIdents;
        }
      } else if (_source80.is_Call) {
        DAST._IExpression _4894___mcc_h233 = _source80.dtor_on;
        DAST._ICallName _4895___mcc_h234 = _source80.dtor_callName;
        Dafny.ISequence<DAST._IType> _4896___mcc_h235 = _source80.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _4897___mcc_h236 = _source80.dtor_args;
        Dafny.ISequence<DAST._IExpression> _4898_args = _4897___mcc_h236;
        Dafny.ISequence<DAST._IType> _4899_typeArgs = _4896___mcc_h235;
        DAST._ICallName _4900_name = _4895___mcc_h234;
        DAST._IExpression _4901_on = _4894___mcc_h233;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IType> _4902_typeExprs;
          _4902_typeExprs = Dafny.Sequence<RAST._IType>.FromElements();
          if ((new BigInteger((_4899_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _4903_typeI;
            _4903_typeI = BigInteger.Zero;
            while ((_4903_typeI) < (new BigInteger((_4899_typeArgs).Count))) {
              RAST._IType _4904_typeExpr;
              RAST._IType _out1521;
              _out1521 = DCOMP.COMP.GenType((_4899_typeArgs).Select(_4903_typeI), false, false);
              _4904_typeExpr = _out1521;
              _4902_typeExprs = Dafny.Sequence<RAST._IType>.Concat(_4902_typeExprs, Dafny.Sequence<RAST._IType>.FromElements(_4904_typeExpr));
              _4903_typeI = (_4903_typeI) + (BigInteger.One);
            }
          }
          Dafny.ISequence<RAST._IExpr> _4905_argExprs;
          _4905_argExprs = Dafny.Sequence<RAST._IExpr>.FromElements();
          BigInteger _4906_i;
          _4906_i = BigInteger.Zero;
          while ((_4906_i) < (new BigInteger((_4898_args).Count))) {
            RAST._IExpr _4907_argExpr;
            DCOMP._IOwnership _4908_argOwnership;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4909_argIdents;
            RAST._IExpr _out1522;
            DCOMP._IOwnership _out1523;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1524;
            DCOMP.COMP.GenExpr((_4898_args).Select(_4906_i), selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1522, out _out1523, out _out1524);
            _4907_argExpr = _out1522;
            _4908_argOwnership = _out1523;
            _4909_argIdents = _out1524;
            if (object.Equals(_4908_argOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
              _4907_argExpr = RAST.__default.Borrow(_4907_argExpr);
            }
            _4905_argExprs = Dafny.Sequence<RAST._IExpr>.Concat(_4905_argExprs, Dafny.Sequence<RAST._IExpr>.FromElements(_4907_argExpr));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4909_argIdents);
            _4906_i = (_4906_i) + (BigInteger.One);
          }
          RAST._IExpr _4910_onExpr;
          DCOMP._IOwnership _4911___v93;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4912_recIdents;
          RAST._IExpr _out1525;
          DCOMP._IOwnership _out1526;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1527;
          DCOMP.COMP.GenExpr(_4901_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipAny(), out _out1525, out _out1526, out _out1527);
          _4910_onExpr = _out1525;
          _4911___v93 = _out1526;
          _4912_recIdents = _out1527;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4912_recIdents);
          Dafny.ISequence<Dafny.Rune> _4913_renderedName;
          _4913_renderedName = ((System.Func<DAST._ICallName, Dafny.ISequence<Dafny.Rune>>)((_source179) => {
            if (_source179.is_Name) {
              Dafny.ISequence<Dafny.Rune> _4914___mcc_h1576 = _source179.dtor_name;
              Dafny.ISequence<Dafny.Rune> _4915_ident = _4914___mcc_h1576;
              return DCOMP.__default.escapeIdent(_4915_ident);
            } else if (_source179.is_MapBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else if (_source179.is_MapBuilderBuild) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            } else if (_source179.is_SetBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            }
          }))(_4900_name);
          DAST._IExpression _source180 = _4901_on;
          if (_source180.is_Literal) {
            DAST._ILiteral _4916___mcc_h1577 = _source180.dtor_Literal_a0;
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _4917___mcc_h1579 = _source180.dtor_Ident_a0;
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4918___mcc_h1581 = _source180.dtor_Companion_a0;
            {
              _4910_onExpr = RAST.Expr.create_MemberSelect(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _4919___mcc_h1583 = _source180.dtor_Tuple_a0;
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4920___mcc_h1585 = _source180.dtor_path;
            Dafny.ISequence<DAST._IType> _4921___mcc_h1586 = _source180.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _4922___mcc_h1587 = _source180.dtor_args;
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _4923___mcc_h1591 = _source180.dtor_dims;
            DAST._IType _4924___mcc_h1592 = _source180.dtor_typ;
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4925___mcc_h1595 = _source180.dtor_path;
            Dafny.ISequence<DAST._IType> _4926___mcc_h1596 = _source180.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _4927___mcc_h1597 = _source180.dtor_variant;
            bool _4928___mcc_h1598 = _source180.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _4929___mcc_h1599 = _source180.dtor_contents;
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_Convert) {
            DAST._IExpression _4930___mcc_h1605 = _source180.dtor_value;
            DAST._IType _4931___mcc_h1606 = _source180.dtor_from;
            DAST._IType _4932___mcc_h1607 = _source180.dtor_typ;
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_SeqConstruct) {
            DAST._IExpression _4933___mcc_h1611 = _source180.dtor_length;
            DAST._IExpression _4934___mcc_h1612 = _source180.dtor_elem;
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _4935___mcc_h1615 = _source180.dtor_elements;
            DAST._IType _4936___mcc_h1616 = _source180.dtor_typ;
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _4937___mcc_h1619 = _source180.dtor_elements;
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _4938___mcc_h1621 = _source180.dtor_mapElems;
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_MapBuilder) {
            DAST._IType _4939___mcc_h1623 = _source180.dtor_keyType;
            DAST._IType _4940___mcc_h1624 = _source180.dtor_valueType;
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_SetBuilder) {
            DAST._IType _4941___mcc_h1627 = _source180.dtor_elemType;
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_This) {
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_Ite) {
            DAST._IExpression _4942___mcc_h1629 = _source180.dtor_cond;
            DAST._IExpression _4943___mcc_h1630 = _source180.dtor_thn;
            DAST._IExpression _4944___mcc_h1631 = _source180.dtor_els;
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_UnOp) {
            DAST._IUnaryOp _4945___mcc_h1635 = _source180.dtor_unOp;
            DAST._IExpression _4946___mcc_h1636 = _source180.dtor_expr;
            DAST.Format._IUnOpFormat _4947___mcc_h1637 = _source180.dtor_format1;
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_BinOp) {
            DAST._IBinOp _4948___mcc_h1641 = _source180.dtor_op;
            DAST._IExpression _4949___mcc_h1642 = _source180.dtor_left;
            DAST._IExpression _4950___mcc_h1643 = _source180.dtor_right;
            DAST.Format._IBinOpFormat _4951___mcc_h1644 = _source180.dtor_format2;
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_ArrayLen) {
            DAST._IExpression _4952___mcc_h1649 = _source180.dtor_expr;
            BigInteger _4953___mcc_h1650 = _source180.dtor_dim;
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_MapKeys) {
            DAST._IExpression _4954___mcc_h1653 = _source180.dtor_expr;
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_MapValues) {
            DAST._IExpression _4955___mcc_h1655 = _source180.dtor_expr;
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_Select) {
            DAST._IExpression _4956___mcc_h1657 = _source180.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _4957___mcc_h1658 = _source180.dtor_field;
            bool _4958___mcc_h1659 = _source180.dtor_isConstant;
            bool _4959___mcc_h1660 = _source180.dtor_onDatatype;
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_SelectFn) {
            DAST._IExpression _4960___mcc_h1665 = _source180.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _4961___mcc_h1666 = _source180.dtor_field;
            bool _4962___mcc_h1667 = _source180.dtor_onDatatype;
            bool _4963___mcc_h1668 = _source180.dtor_isStatic;
            BigInteger _4964___mcc_h1669 = _source180.dtor_arity;
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_Index) {
            DAST._IExpression _4965___mcc_h1675 = _source180.dtor_expr;
            DAST._ICollKind _4966___mcc_h1676 = _source180.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _4967___mcc_h1677 = _source180.dtor_indices;
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_IndexRange) {
            DAST._IExpression _4968___mcc_h1681 = _source180.dtor_expr;
            bool _4969___mcc_h1682 = _source180.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _4970___mcc_h1683 = _source180.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _4971___mcc_h1684 = _source180.dtor_high;
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_TupleSelect) {
            DAST._IExpression _4972___mcc_h1689 = _source180.dtor_expr;
            BigInteger _4973___mcc_h1690 = _source180.dtor_index;
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_Call) {
            DAST._IExpression _4974___mcc_h1693 = _source180.dtor_on;
            DAST._ICallName _4975___mcc_h1694 = _source180.dtor_callName;
            Dafny.ISequence<DAST._IType> _4976___mcc_h1695 = _source180.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _4977___mcc_h1696 = _source180.dtor_args;
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _4978___mcc_h1701 = _source180.dtor_params;
            DAST._IType _4979___mcc_h1702 = _source180.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _4980___mcc_h1703 = _source180.dtor_body;
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _4981___mcc_h1707 = _source180.dtor_values;
            DAST._IType _4982___mcc_h1708 = _source180.dtor_retType;
            DAST._IExpression _4983___mcc_h1709 = _source180.dtor_expr;
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _4984___mcc_h1713 = _source180.dtor_name;
            DAST._IType _4985___mcc_h1714 = _source180.dtor_typ;
            DAST._IExpression _4986___mcc_h1715 = _source180.dtor_value;
            DAST._IExpression _4987___mcc_h1716 = _source180.dtor_iifeBody;
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_Apply) {
            DAST._IExpression _4988___mcc_h1721 = _source180.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _4989___mcc_h1722 = _source180.dtor_args;
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_TypeTest) {
            DAST._IExpression _4990___mcc_h1725 = _source180.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4991___mcc_h1726 = _source180.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _4992___mcc_h1727 = _source180.dtor_variant;
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_InitializationValue) {
            DAST._IType _4993___mcc_h1731 = _source180.dtor_typ;
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_BoolBoundedPool) {
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_SetBoundedPool) {
            DAST._IExpression _4994___mcc_h1733 = _source180.dtor_of;
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else if (_source180.is_SeqBoundedPool) {
            DAST._IExpression _4995___mcc_h1735 = _source180.dtor_of;
            bool _4996___mcc_h1736 = _source180.dtor_includeDuplicates;
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          } else {
            DAST._IExpression _4997___mcc_h1739 = _source180.dtor_lo;
            DAST._IExpression _4998___mcc_h1740 = _source180.dtor_hi;
            {
              _4910_onExpr = RAST.Expr.create_Select(_4910_onExpr, _4913_renderedName);
            }
          }
          r = RAST.Expr.create_Call(_4910_onExpr, _4902_typeExprs, _4905_argExprs);
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
        }
      } else if (_source80.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _4999___mcc_h237 = _source80.dtor_params;
        DAST._IType _5000___mcc_h238 = _source80.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _5001___mcc_h239 = _source80.dtor_body;
        Dafny.ISequence<DAST._IStatement> _5002_body = _5001___mcc_h239;
        DAST._IType _5003_retType = _5000___mcc_h238;
        Dafny.ISequence<DAST._IFormal> _5004_params = _4999___mcc_h237;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5005_paramNames;
          _5005_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _5006_i;
          _5006_i = BigInteger.Zero;
          while ((_5006_i) < (new BigInteger((_5004_params).Count))) {
            _5005_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_5005_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(((_5004_params).Select(_5006_i)).dtor_name));
            _5006_i = (_5006_i) + (BigInteger.One);
          }
          RAST._IExpr _5007_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5008_recIdents;
          RAST._IExpr _out1528;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1529;
          DCOMP.COMP.GenStmts(_5002_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), _5005_paramNames, true, RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")), out _out1528, out _out1529);
          _5007_recursiveGen = _out1528;
          _5008_recIdents = _out1529;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _5009_allReadCloned;
          _5009_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          while (!(_5008_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _5010_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_3 in (_5008_recIdents).Elements) {
              _5010_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_3;
              if ((_5008_recIdents).Contains(_5010_next)) {
                goto after__ASSIGN_SUCH_THAT_3;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 2906)");
          after__ASSIGN_SUCH_THAT_3: ;
            if ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) && ((_5010_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
                _5009_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(_5009_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let _this = self.clone();\n"));
              }
            } else if (!((_5005_paramNames).Contains(_5010_next))) {
              _5009_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5009_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_5010_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_5010_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_5010_next));
            }
            _5008_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_5008_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_5010_next));
          }
          Dafny.ISequence<Dafny.Rune> _5011_paramsString;
          _5011_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Dafny.ISequence<Dafny.Rune> _5012_paramTypes;
          _5012_paramTypes = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _5006_i = BigInteger.Zero;
          while ((_5006_i) < (new BigInteger((_5004_params).Count))) {
            if ((_5006_i).Sign == 1) {
              _5011_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_5011_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              _5012_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_5012_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IType _5013_typStr;
            RAST._IType _out1530;
            _out1530 = DCOMP.COMP.GenType(((_5004_params).Select(_5006_i)).dtor_typ, false, true);
            _5013_typStr = _out1530;
            _5011_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5011_paramsString, DCOMP.__default.escapeIdent(((_5004_params).Select(_5006_i)).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (RAST.Type.create_Borrowed(_5013_typStr))._ToString(DCOMP.__default.IND));
            _5012_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_5012_paramTypes, (RAST.Type.create_Borrowed(_5013_typStr))._ToString(DCOMP.__default.IND));
            _5006_i = (_5006_i) + (BigInteger.One);
          }
          RAST._IType _5014_retTypeGen;
          RAST._IType _out1531;
          _out1531 = DCOMP.COMP.GenType(_5003_retType, false, true);
          _5014_retTypeGen = _out1531;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper::<::std::rc::Rc<dyn ::std::ops::Fn("), _5012_paramTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), (_5014_retTypeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>({\n")), _5009_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(move |")), _5011_paramsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| -> ")), (_5014_retTypeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), (_5007_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})})")));
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
        }
      } else if (_source80.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _5015___mcc_h240 = _source80.dtor_values;
        DAST._IType _5016___mcc_h241 = _source80.dtor_retType;
        DAST._IExpression _5017___mcc_h242 = _source80.dtor_expr;
        DAST._IExpression _5018_expr = _5017___mcc_h242;
        DAST._IType _5019_retType = _5016___mcc_h241;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _5020_values = _5015___mcc_h240;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5021_paramNames;
          _5021_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5022_paramNamesSet;
          _5022_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _5023_i;
          _5023_i = BigInteger.Zero;
          while ((_5023_i) < (new BigInteger((_5020_values).Count))) {
            _5021_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_5021_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((_5020_values).Select(_5023_i)).dtor__0).dtor_name));
            _5022_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_5022_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((((_5020_values).Select(_5023_i)).dtor__0).dtor_name));
            _5023_i = (_5023_i) + (BigInteger.One);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _5024_s;
          _5024_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          Dafny.ISequence<Dafny.Rune> _5025_paramsString;
          _5025_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _5023_i = BigInteger.Zero;
          while ((_5023_i) < (new BigInteger((_5020_values).Count))) {
            if ((_5023_i).Sign == 1) {
              _5025_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_5025_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IType _5026_typStr;
            RAST._IType _out1532;
            _out1532 = DCOMP.COMP.GenType((((_5020_values).Select(_5023_i)).dtor__0).dtor_typ, false, true);
            _5026_typStr = _out1532;
            RAST._IExpr _5027_valueGen;
            DCOMP._IOwnership _5028___v96;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5029_recIdents;
            RAST._IExpr _out1533;
            DCOMP._IOwnership _out1534;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1535;
            DCOMP.COMP.GenExpr(((_5020_values).Select(_5023_i)).dtor__1, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1533, out _out1534, out _out1535);
            _5027_valueGen = _out1533;
            _5028___v96 = _out1534;
            _5029_recIdents = _out1535;
            _5024_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5024_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent((((_5020_values).Select(_5023_i)).dtor__0).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_5026_typStr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5029_recIdents);
            _5024_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5024_s, (_5027_valueGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            _5023_i = (_5023_i) + (BigInteger.One);
          }
          RAST._IExpr _5030_recGen;
          DCOMP._IOwnership _5031_recOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5032_recIdents;
          RAST._IExpr _out1536;
          DCOMP._IOwnership _out1537;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1538;
          DCOMP.COMP.GenExpr(_5018_expr, selfIdent, _5021_paramNames, expectedOwnership, out _out1536, out _out1537, out _out1538);
          _5030_recGen = _out1536;
          _5031_recOwned = _out1537;
          _5032_recIdents = _out1538;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_5032_recIdents, _5022_paramNamesSet);
          _5024_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5024_s, (_5030_recGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          r = RAST.Expr.create_RawExpr(_5024_s);
          resultingOwnership = _5031_recOwned;
        }
      } else if (_source80.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _5033___mcc_h243 = _source80.dtor_name;
        DAST._IType _5034___mcc_h244 = _source80.dtor_typ;
        DAST._IExpression _5035___mcc_h245 = _source80.dtor_value;
        DAST._IExpression _5036___mcc_h246 = _source80.dtor_iifeBody;
        DAST._IExpression _5037_iifeBody = _5036___mcc_h246;
        DAST._IExpression _5038_value = _5035___mcc_h245;
        DAST._IType _5039_tpe = _5034___mcc_h244;
        Dafny.ISequence<Dafny.Rune> _5040_name = _5033___mcc_h243;
        {
          RAST._IExpr _5041_valueGen;
          DCOMP._IOwnership _5042___v97;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5043_recIdents;
          RAST._IExpr _out1539;
          DCOMP._IOwnership _out1540;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1541;
          DCOMP.COMP.GenExpr(_5038_value, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1539, out _out1540, out _out1541);
          _5041_valueGen = _out1539;
          _5042___v97 = _out1540;
          _5043_recIdents = _out1541;
          readIdents = _5043_recIdents;
          RAST._IType _5044_valueTypeGen;
          RAST._IType _out1542;
          _out1542 = DCOMP.COMP.GenType(_5039_tpe, false, true);
          _5044_valueTypeGen = _out1542;
          RAST._IExpr _5045_bodyGen;
          DCOMP._IOwnership _5046___v98;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5047_bodyIdents;
          RAST._IExpr _out1543;
          DCOMP._IOwnership _out1544;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1545;
          DCOMP.COMP.GenExpr(_5037_iifeBody, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1543, out _out1544, out _out1545);
          _5045_bodyGen = _out1543;
          _5046___v98 = _out1544;
          _5047_bodyIdents = _out1545;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_5047_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_5040_name))));
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet "), DCOMP.__default.escapeIdent((_5040_name))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_5044_valueTypeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), (_5041_valueGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), (_5045_bodyGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}")));
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
        }
      } else if (_source80.is_Apply) {
        DAST._IExpression _5048___mcc_h247 = _source80.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _5049___mcc_h248 = _source80.dtor_args;
        Dafny.ISequence<DAST._IExpression> _5050_args = _5049___mcc_h248;
        DAST._IExpression _5051_func = _5048___mcc_h247;
        {
          RAST._IExpr _5052_funcExpr;
          DCOMP._IOwnership _5053___v99;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5054_recIdents;
          RAST._IExpr _out1546;
          DCOMP._IOwnership _out1547;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1548;
          DCOMP.COMP.GenExpr(_5051_func, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1546, out _out1547, out _out1548);
          _5052_funcExpr = _out1546;
          _5053___v99 = _out1547;
          _5054_recIdents = _out1548;
          readIdents = _5054_recIdents;
          Dafny.ISequence<Dafny.Rune> _5055_argString;
          _5055_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _5056_i;
          _5056_i = BigInteger.Zero;
          while ((_5056_i) < (new BigInteger((_5050_args).Count))) {
            if ((_5056_i).Sign == 1) {
              _5055_argString = Dafny.Sequence<Dafny.Rune>.Concat(_5055_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _5057_argExpr;
            DCOMP._IOwnership _5058_argOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5059_argIdents;
            RAST._IExpr _out1549;
            DCOMP._IOwnership _out1550;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1551;
            DCOMP.COMP.GenExpr((_5050_args).Select(_5056_i), selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1549, out _out1550, out _out1551);
            _5057_argExpr = _out1549;
            _5058_argOwned = _out1550;
            _5059_argIdents = _out1551;
            Dafny.ISequence<Dafny.Rune> _5060_argExprString;
            _5060_argExprString = (_5057_argExpr)._ToString(DCOMP.__default.IND);
            if (object.Equals(_5058_argOwned, DCOMP.Ownership.create_OwnershipOwned())) {
              _5060_argExprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _5060_argExprString);
            }
            _5055_argString = Dafny.Sequence<Dafny.Rune>.Concat(_5055_argString, _5060_argExprString);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5059_argIdents);
            _5056_i = (_5056_i) + (BigInteger.One);
          }
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), (_5052_funcExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _5055_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))")));
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
        }
      } else if (_source80.is_TypeTest) {
        DAST._IExpression _5061___mcc_h249 = _source80.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5062___mcc_h250 = _source80.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _5063___mcc_h251 = _source80.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _5064_variant = _5063___mcc_h251;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5065_dType = _5062___mcc_h250;
        DAST._IExpression _5066_on = _5061___mcc_h249;
        {
          RAST._IExpr _5067_exprGen;
          DCOMP._IOwnership _5068___v100;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5069_recIdents;
          RAST._IExpr _out1552;
          DCOMP._IOwnership _out1553;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1554;
          DCOMP.COMP.GenExpr(_5066_on, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1552, out _out1553, out _out1554);
          _5067_exprGen = _out1552;
          _5068___v100 = _out1553;
          _5069_recIdents = _out1554;
          Dafny.ISequence<Dafny.Rune> _5070_dTypePath;
          Dafny.ISequence<Dafny.Rune> _out1555;
          _out1555 = DCOMP.COMP.GenPath(_5065_dType);
          _5070_dTypePath = _out1555;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!("), (_5067_exprGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref(), ")), _5070_dTypePath), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_5064_variant)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. })")));
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          readIdents = _5069_recIdents;
        }
      } else if (_source80.is_InitializationValue) {
        DAST._IType _5071___mcc_h252 = _source80.dtor_typ;
        DAST._IType _5072_typ = _5071___mcc_h252;
        {
          RAST._IType _5073_typExpr;
          RAST._IType _out1556;
          _out1556 = DCOMP.COMP.GenType(_5072_typ, false, false);
          _5073_typExpr = _out1556;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_5073_typExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()")));
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source80.is_BoolBoundedPool) {
        {
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]"));
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source80.is_SetBoundedPool) {
        DAST._IExpression _5074___mcc_h253 = _source80.dtor_of;
        DAST._IExpression _5075_of = _5074___mcc_h253;
        {
          RAST._IExpr _5076_exprGen;
          DCOMP._IOwnership _5077___v101;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5078_recIdents;
          RAST._IExpr _out1557;
          DCOMP._IOwnership _out1558;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1559;
          DCOMP.COMP.GenExpr(_5075_of, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1557, out _out1558, out _out1559);
          _5076_exprGen = _out1557;
          _5077___v101 = _out1558;
          _5078_recIdents = _out1559;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5076_exprGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()")));
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          readIdents = _5078_recIdents;
        }
      } else if (_source80.is_SeqBoundedPool) {
        DAST._IExpression _5079___mcc_h254 = _source80.dtor_of;
        bool _5080___mcc_h255 = _source80.dtor_includeDuplicates;
        bool _5081_includeDuplicates = _5080___mcc_h255;
        DAST._IExpression _5082_of = _5079___mcc_h254;
        {
          RAST._IExpr _5083_exprGen;
          DCOMP._IOwnership _5084___v102;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5085_recIdents;
          RAST._IExpr _out1560;
          DCOMP._IOwnership _out1561;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1562;
          DCOMP.COMP.GenExpr(_5082_of, selfIdent, @params, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1560, out _out1561, out _out1562);
          _5083_exprGen = _out1560;
          _5084___v102 = _out1561;
          _5085_recIdents = _out1562;
          Dafny.ISequence<Dafny.Rune> _5086_s;
          _5086_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5083_exprGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          if (!(_5081_includeDuplicates)) {
            _5086_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::itertools::Itertools::unique("), _5086_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          r = RAST.Expr.create_RawExpr(_5086_s);
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          readIdents = _5085_recIdents;
        }
      } else {
        DAST._IExpression _5087___mcc_h256 = _source80.dtor_lo;
        DAST._IExpression _5088___mcc_h257 = _source80.dtor_hi;
        DAST._IExpression _5089_hi = _5088___mcc_h257;
        DAST._IExpression _5090_lo = _5087___mcc_h256;
        {
          RAST._IExpr _5091_lo;
          DCOMP._IOwnership _5092___v103;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5093_recIdentsLo;
          RAST._IExpr _out1563;
          DCOMP._IOwnership _out1564;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1565;
          DCOMP.COMP.GenExpr(_5090_lo, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1563, out _out1564, out _out1565);
          _5091_lo = _out1563;
          _5092___v103 = _out1564;
          _5093_recIdentsLo = _out1565;
          RAST._IExpr _5094_hi;
          DCOMP._IOwnership _5095___v104;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5096_recIdentsHi;
          RAST._IExpr _out1566;
          DCOMP._IOwnership _out1567;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1568;
          DCOMP.COMP.GenExpr(_5089_hi, selfIdent, @params, DCOMP.Ownership.create_OwnershipOwned(), out _out1566, out _out1567, out _out1568);
          _5094_hi = _out1566;
          _5095___v104 = _out1567;
          _5096_recIdentsHi = _out1568;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::integer_range("), (_5091_lo)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_5094_hi)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_5093_recIdentsLo, _5096_recIdentsHi);
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(nonstandard_style)]\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern crate dafny_runtime;\n"));
      BigInteger _5097_i;
      _5097_i = BigInteger.Zero;
      while ((_5097_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _5098_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        RAST._IMod _5099_m;
        RAST._IMod _out1569;
        _out1569 = DCOMP.COMP.GenModule((p).Select(_5097_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _5099_m = _out1569;
        _5098_generated = (_5099_m)._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        if ((_5097_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _5098_generated);
        _5097_i = (_5097_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _5100_i;
      _5100_i = BigInteger.Zero;
      while ((_5100_i) < (new BigInteger((fullName).Count))) {
        if ((_5100_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((fullName).Select(_5100_i)));
        _5100_i = (_5100_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
    public static Dafny.IMap<DAST._IBinOp,Dafny.ISequence<Dafny.Rune>> OpTable { get {
      return Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Mod(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("%")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_And(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&&")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Or(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("||")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Div(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Lt(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Plus(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Minus(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Times(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseAnd(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseOr(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseXor(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("^")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseShiftRight(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseShiftLeft(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<<")));
    } }
  }
} // end of namespace DCOMP

