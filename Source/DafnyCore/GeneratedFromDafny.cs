// Dafny program the_program compiled into C#
// To recompile, you will need the libraries
//     System.Runtime.Numerics.dll System.Collections.Immutable.dll
// but the 'dotnet' tool in net6.0 should pick those up automatically.
// Optionally, you may want to include compiler switches like
//     /debug /nowarn:162,164,168,183,219,436,1717,1718

using System;
using System.Numerics;
using System.Collections;
namespace Formatting {

  public partial class __default {
    public static System.String ReindentProgramFromFirstToken(Microsoft.Dafny.IToken firstToken, Formatting.IIndentationFormatter reindent) {
      System.String s = default(System.String);
      Microsoft.Dafny.IToken token;
      token = firstToken;
      System.Text.StringBuilder sb;
      System.Text.StringBuilder _nw0 = new System.Text.StringBuilder();
      sb = _nw0;
      while ((token) != (object)((Microsoft.Dafny.IToken)null)) {
        System.String newLeadingTrivia;
        newLeadingTrivia = (reindent).GetNewLeadingTrivia(token);
        System.String newTrailingTrivia;
        newTrailingTrivia = (reindent).GetNewTrailingTrivia(token);
        (sb).Append(newLeadingTrivia);
        (sb).Append(token.val);
        (sb).Append(newTrailingTrivia);
        token = token.Next;
      }
      System.String _out0;
      _out0 = (sb).ToString().ToString();
      s = _out0;
      return s;
    }
  }

  public interface IIndentationFormatter {
    System.String GetNewLeadingTrivia(Microsoft.Dafny.IToken token);
    System.String GetNewTrailingTrivia(Microsoft.Dafny.IToken token);
  }
  public class _Companion_IIndentationFormatter {
  }
} // end of namespace Formatting


namespace DAST {


  public interface _IModule {
    bool is_Module { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    bool dtor_isExtern { get; }
    Dafny.ISequence<DAST._IModuleItem> dtor_body { get; }
    _IModule DowncastClone();
  }
  public class Module : _IModule {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly bool _isExtern;
    public readonly Dafny.ISequence<DAST._IModuleItem> _body;
    public Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      this._name = name;
      this._isExtern = isExtern;
      this._body = body;
    }
    public _IModule DowncastClone() {
      if (this is _IModule dt) { return dt; }
      return new Module(_name, _isExtern, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Module;
      return oth != null && object.Equals(this._name, oth._name) && this._isExtern == oth._isExtern && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isExtern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Module.Module";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isExtern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IModule theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, false, Dafny.Sequence<DAST._IModuleItem>.Empty);
    public static DAST._IModule Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModule> _TYPE = new Dafny.TypeDescriptor<DAST._IModule>(DAST.Module.Default());
    public static Dafny.TypeDescriptor<DAST._IModule> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModule create(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return new Module(name, isExtern, body);
    }
    public static _IModule create_Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return create(name, isExtern, body);
    }
    public bool is_Module { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public bool dtor_isExtern {
      get {
        return this._isExtern;
      }
    }
    public Dafny.ISequence<DAST._IModuleItem> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IModuleItem {
    bool is_Module { get; }
    bool is_Class { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    bool is_Datatype { get; }
    DAST._IModule dtor_Module_a0 { get; }
    DAST._IClass dtor_Class_a0 { get; }
    DAST._ITrait dtor_Trait_a0 { get; }
    DAST._INewtype dtor_Newtype_a0 { get; }
    DAST._IDatatype dtor_Datatype_a0 { get; }
    _IModuleItem DowncastClone();
  }
  public abstract class ModuleItem : _IModuleItem {
    public ModuleItem() {
    }
    private static readonly DAST._IModuleItem theDefault = create_Module(DAST.Module.Default());
    public static DAST._IModuleItem Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModuleItem> _TYPE = new Dafny.TypeDescriptor<DAST._IModuleItem>(DAST.ModuleItem.Default());
    public static Dafny.TypeDescriptor<DAST._IModuleItem> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModuleItem create_Module(DAST._IModule _a0) {
      return new ModuleItem_Module(_a0);
    }
    public static _IModuleItem create_Class(DAST._IClass _a0) {
      return new ModuleItem_Class(_a0);
    }
    public static _IModuleItem create_Trait(DAST._ITrait _a0) {
      return new ModuleItem_Trait(_a0);
    }
    public static _IModuleItem create_Newtype(DAST._INewtype _a0) {
      return new ModuleItem_Newtype(_a0);
    }
    public static _IModuleItem create_Datatype(DAST._IDatatype _a0) {
      return new ModuleItem_Datatype(_a0);
    }
    public bool is_Module { get { return this is ModuleItem_Module; } }
    public bool is_Class { get { return this is ModuleItem_Class; } }
    public bool is_Trait { get { return this is ModuleItem_Trait; } }
    public bool is_Newtype { get { return this is ModuleItem_Newtype; } }
    public bool is_Datatype { get { return this is ModuleItem_Datatype; } }
    public DAST._IModule dtor_Module_a0 {
      get {
        var d = this;
        return ((ModuleItem_Module)d)._a0;
      }
    }
    public DAST._IClass dtor_Class_a0 {
      get {
        var d = this;
        return ((ModuleItem_Class)d)._a0;
      }
    }
    public DAST._ITrait dtor_Trait_a0 {
      get {
        var d = this;
        return ((ModuleItem_Trait)d)._a0;
      }
    }
    public DAST._INewtype dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Newtype)d)._a0;
      }
    }
    public DAST._IDatatype dtor_Datatype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Datatype)d)._a0;
      }
    }
    public abstract _IModuleItem DowncastClone();
  }
  public class ModuleItem_Module : ModuleItem {
    public readonly DAST._IModule _a0;
    public ModuleItem_Module(DAST._IModule _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Module(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Module;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Module";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Class : ModuleItem {
    public readonly DAST._IClass _a0;
    public ModuleItem_Class(DAST._IClass _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Class(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Class;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Class";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Trait : ModuleItem {
    public readonly DAST._ITrait _a0;
    public ModuleItem_Trait(DAST._ITrait _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Trait(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Trait;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Newtype : ModuleItem {
    public readonly DAST._INewtype _a0;
    public ModuleItem_Newtype(DAST._INewtype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Datatype : ModuleItem {
    public readonly DAST._IDatatype _a0;
    public ModuleItem_Datatype(DAST._IDatatype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Datatype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Datatype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IType {
    bool is_Path { get; }
    bool is_Nullable { get; }
    bool is_Tuple { get; }
    bool is_Array { get; }
    bool is_Seq { get; }
    bool is_Set { get; }
    bool is_Multiset { get; }
    bool is_Map { get; }
    bool is_Arrow { get; }
    bool is_Primitive { get; }
    bool is_Passthrough { get; }
    bool is_TypeArg { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    DAST._IResolvedType dtor_resolved { get; }
    DAST._IType dtor_Nullable_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_Tuple_a0 { get; }
    DAST._IType dtor_element { get; }
    BigInteger dtor_dims { get; }
    DAST._IType dtor_key { get; }
    DAST._IType dtor_value { get; }
    Dafny.ISequence<DAST._IType> dtor_args { get; }
    DAST._IType dtor_result { get; }
    DAST._IPrimitive dtor_Primitive_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 { get; }
    _IType DowncastClone();
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly DAST._IType theDefault = create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.ResolvedType.Default());
    public static DAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IType> _TYPE = new Dafny.TypeDescriptor<DAST._IType>(DAST.Type.Default());
    public static Dafny.TypeDescriptor<DAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) {
      return new Type_Path(_a0, typeArgs, resolved);
    }
    public static _IType create_Nullable(DAST._IType _a0) {
      return new Type_Nullable(_a0);
    }
    public static _IType create_Tuple(Dafny.ISequence<DAST._IType> _a0) {
      return new Type_Tuple(_a0);
    }
    public static _IType create_Array(DAST._IType element, BigInteger dims) {
      return new Type_Array(element, dims);
    }
    public static _IType create_Seq(DAST._IType element) {
      return new Type_Seq(element);
    }
    public static _IType create_Set(DAST._IType element) {
      return new Type_Set(element);
    }
    public static _IType create_Multiset(DAST._IType element) {
      return new Type_Multiset(element);
    }
    public static _IType create_Map(DAST._IType key, DAST._IType @value) {
      return new Type_Map(key, @value);
    }
    public static _IType create_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) {
      return new Type_Arrow(args, result);
    }
    public static _IType create_Primitive(DAST._IPrimitive _a0) {
      return new Type_Primitive(_a0);
    }
    public static _IType create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_Passthrough(_a0);
    }
    public static _IType create_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_TypeArg(_a0);
    }
    public bool is_Path { get { return this is Type_Path; } }
    public bool is_Nullable { get { return this is Type_Nullable; } }
    public bool is_Tuple { get { return this is Type_Tuple; } }
    public bool is_Array { get { return this is Type_Array; } }
    public bool is_Seq { get { return this is Type_Seq; } }
    public bool is_Set { get { return this is Type_Set; } }
    public bool is_Multiset { get { return this is Type_Multiset; } }
    public bool is_Map { get { return this is Type_Map; } }
    public bool is_Arrow { get { return this is Type_Arrow; } }
    public bool is_Primitive { get { return this is Type_Primitive; } }
    public bool is_Passthrough { get { return this is Type_Passthrough; } }
    public bool is_TypeArg { get { return this is Type_TypeArg; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 {
      get {
        var d = this;
        return ((Type_Path)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Type_Path)d)._typeArgs;
      }
    }
    public DAST._IResolvedType dtor_resolved {
      get {
        var d = this;
        return ((Type_Path)d)._resolved;
      }
    }
    public DAST._IType dtor_Nullable_a0 {
      get {
        var d = this;
        return ((Type_Nullable)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Type_Tuple)d)._a0;
      }
    }
    public DAST._IType dtor_element {
      get {
        var d = this;
        if (d is Type_Array) { return ((Type_Array)d)._element; }
        if (d is Type_Seq) { return ((Type_Seq)d)._element; }
        if (d is Type_Set) { return ((Type_Set)d)._element; }
        return ((Type_Multiset)d)._element;
      }
    }
    public BigInteger dtor_dims {
      get {
        var d = this;
        return ((Type_Array)d)._dims;
      }
    }
    public DAST._IType dtor_key {
      get {
        var d = this;
        return ((Type_Map)d)._key;
      }
    }
    public DAST._IType dtor_value {
      get {
        var d = this;
        return ((Type_Map)d)._value;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_args {
      get {
        var d = this;
        return ((Type_Arrow)d)._args;
      }
    }
    public DAST._IType dtor_result {
      get {
        var d = this;
        return ((Type_Arrow)d)._result;
      }
    }
    public DAST._IPrimitive dtor_Primitive_a0 {
      get {
        var d = this;
        return ((Type_Primitive)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((Type_Passthrough)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 {
      get {
        var d = this;
        return ((Type_TypeArg)d)._a0;
      }
    }
    public abstract _IType DowncastClone();
  }
  public class Type_Path : Type {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly DAST._IResolvedType _resolved;
    public Type_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) : base() {
      this._a0 = _a0;
      this._typeArgs = typeArgs;
      this._resolved = resolved;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Path(_a0, _typeArgs, _resolved);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Path;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._resolved, oth._resolved);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._resolved));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Path";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._resolved);
      s += ")";
      return s;
    }
  }
  public class Type_Nullable : Type {
    public readonly DAST._IType _a0;
    public Type_Nullable(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Nullable(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Nullable;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Nullable";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Tuple : Type {
    public readonly Dafny.ISequence<DAST._IType> _a0;
    public Type_Tuple(Dafny.ISequence<DAST._IType> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Array : Type {
    public readonly DAST._IType _element;
    public readonly BigInteger _dims;
    public Type_Array(DAST._IType element, BigInteger dims) : base() {
      this._element = element;
      this._dims = dims;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Array(_element, _dims);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Array;
      return oth != null && object.Equals(this._element, oth._element) && this._dims == oth._dims;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Array";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dims);
      s += ")";
      return s;
    }
  }
  public class Type_Seq : Type {
    public readonly DAST._IType _element;
    public Type_Seq(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Seq(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Seq;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Seq";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Set : Type {
    public readonly DAST._IType _element;
    public Type_Set(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Set(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Set;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Set";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Multiset : Type {
    public readonly DAST._IType _element;
    public Type_Multiset(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Multiset(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Multiset;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Multiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Map : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_Map(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Map(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Map;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Map";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_Arrow : Type {
    public readonly Dafny.ISequence<DAST._IType> _args;
    public readonly DAST._IType _result;
    public Type_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) : base() {
      this._args = args;
      this._result = result;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Arrow(_args, _result);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Arrow;
      return oth != null && object.Equals(this._args, oth._args) && object.Equals(this._result, oth._result);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._result));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Arrow";
      s += "(";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._result);
      s += ")";
      return s;
    }
  }
  public class Type_Primitive : Type {
    public readonly DAST._IPrimitive _a0;
    public Type_Primitive(DAST._IPrimitive _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Primitive(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Primitive;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Primitive";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Passthrough : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeArg : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeArg(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_TypeArg;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.TypeArg";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IPrimitive {
    bool is_Int { get; }
    bool is_Real { get; }
    bool is_String { get; }
    bool is_Bool { get; }
    bool is_Char { get; }
    _IPrimitive DowncastClone();
  }
  public abstract class Primitive : _IPrimitive {
    public Primitive() {
    }
    private static readonly DAST._IPrimitive theDefault = create_Int();
    public static DAST._IPrimitive Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IPrimitive> _TYPE = new Dafny.TypeDescriptor<DAST._IPrimitive>(DAST.Primitive.Default());
    public static Dafny.TypeDescriptor<DAST._IPrimitive> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrimitive create_Int() {
      return new Primitive_Int();
    }
    public static _IPrimitive create_Real() {
      return new Primitive_Real();
    }
    public static _IPrimitive create_String() {
      return new Primitive_String();
    }
    public static _IPrimitive create_Bool() {
      return new Primitive_Bool();
    }
    public static _IPrimitive create_Char() {
      return new Primitive_Char();
    }
    public bool is_Int { get { return this is Primitive_Int; } }
    public bool is_Real { get { return this is Primitive_Real; } }
    public bool is_String { get { return this is Primitive_String; } }
    public bool is_Bool { get { return this is Primitive_Bool; } }
    public bool is_Char { get { return this is Primitive_Char; } }
    public static System.Collections.Generic.IEnumerable<_IPrimitive> AllSingletonConstructors {
      get {
        yield return Primitive.create_Int();
        yield return Primitive.create_Real();
        yield return Primitive.create_String();
        yield return Primitive.create_Bool();
        yield return Primitive.create_Char();
      }
    }
    public abstract _IPrimitive DowncastClone();
  }
  public class Primitive_Int : Primitive {
    public Primitive_Int() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Int";
      return s;
    }
  }
  public class Primitive_Real : Primitive {
    public Primitive_Real() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Real();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Real;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Real";
      return s;
    }
  }
  public class Primitive_String : Primitive {
    public Primitive_String() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_String();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_String;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.String";
      return s;
    }
  }
  public class Primitive_Bool : Primitive {
    public Primitive_Bool() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Bool";
      return s;
    }
  }
  public class Primitive_Char : Primitive {
    public Primitive_Char() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Char();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Char;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Char";
      return s;
    }
  }

  public interface _IResolvedType {
    bool is_Datatype { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    DAST._IType dtor_Newtype_a0 { get; }
    _IResolvedType DowncastClone();
  }
  public abstract class ResolvedType : _IResolvedType {
    public ResolvedType() {
    }
    private static readonly DAST._IResolvedType theDefault = create_Datatype(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty);
    public static DAST._IResolvedType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IResolvedType> _TYPE = new Dafny.TypeDescriptor<DAST._IResolvedType>(DAST.ResolvedType.Default());
    public static Dafny.TypeDescriptor<DAST._IResolvedType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IResolvedType create_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Datatype(path);
    }
    public static _IResolvedType create_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Trait(path);
    }
    public static _IResolvedType create_Newtype(DAST._IType _a0) {
      return new ResolvedType_Newtype(_a0);
    }
    public bool is_Datatype { get { return this is ResolvedType_Datatype; } }
    public bool is_Trait { get { return this is ResolvedType_Trait; } }
    public bool is_Newtype { get { return this is ResolvedType_Newtype; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is ResolvedType_Datatype) { return ((ResolvedType_Datatype)d)._path; }
        return ((ResolvedType_Trait)d)._path;
      }
    }
    public DAST._IType dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._a0;
      }
    }
    public abstract _IResolvedType DowncastClone();
  }
  public class ResolvedType_Datatype : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Datatype(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Datatype;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Trait : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Trait(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Trait;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Newtype : ResolvedType {
    public readonly DAST._IType _a0;
    public ResolvedType_Newtype(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IIdent {
    bool is_Ident { get; }
    Dafny.ISequence<Dafny.Rune> dtor_id { get; }
  }
  public class Ident : _IIdent {
    public readonly Dafny.ISequence<Dafny.Rune> _id;
    public Ident(Dafny.ISequence<Dafny.Rune> id) {
      this._id = id;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Ident;
      return oth != null && object.Equals(this._id, oth._id);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._id));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Ident.Ident";
      s += "(";
      s += this._id.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IIdent create(Dafny.ISequence<Dafny.Rune> id) {
      return new Ident(id);
    }
    public static _IIdent create_Ident(Dafny.ISequence<Dafny.Rune> id) {
      return create(id);
    }
    public bool is_Ident { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_id {
      get {
        return this._id;
      }
    }
  }

  public interface _IClass {
    bool is_Class { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IType> dtor_superClasses { get; }
    Dafny.ISequence<DAST._IField> dtor_fields { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _IClass DowncastClone();
  }
  public class Class : _IClass {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IType> _superClasses;
    public readonly Dafny.ISequence<DAST._IField> _fields;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._superClasses = superClasses;
      this._fields = fields;
      this._body = body;
    }
    public _IClass DowncastClone() {
      if (this is _IClass dt) { return dt; }
      return new Class(_name, _enclosingModule, _typeParams, _superClasses, _fields, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Class;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._superClasses, oth._superClasses) && object.Equals(this._fields, oth._fields) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._superClasses));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Class.Class";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._superClasses);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IClass theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IField>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._IClass Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IClass> _TYPE = new Dafny.TypeDescriptor<DAST._IClass>(DAST.Class.Default());
    public static Dafny.TypeDescriptor<DAST._IClass> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClass create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return new Class(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public static _IClass create_Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public bool is_Class { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_superClasses {
      get {
        return this._superClasses;
      }
    }
    public Dafny.ISequence<DAST._IField> dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _ITrait DowncastClone();
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_name, _typeParams, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Trait;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Trait.Trait";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._ITrait theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ITrait> _TYPE = new Dafny.TypeDescriptor<DAST._ITrait>(DAST.Trait.Default());
    public static Dafny.TypeDescriptor<DAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return new Trait(name, typeParams, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, typeParams, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IDatatype {
    bool is_Datatype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    bool dtor_isCo { get; }
    _IDatatype DowncastClone();
  }
  public class Datatype : _IDatatype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IDatatypeCtor> _ctors;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly bool _isCo;
    public Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._ctors = ctors;
      this._body = body;
      this._isCo = isCo;
    }
    public _IDatatype DowncastClone() {
      if (this is _IDatatype dt) { return dt; }
      return new Datatype(_name, _enclosingModule, _typeParams, _ctors, _body, _isCo);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Datatype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._ctors, oth._ctors) && object.Equals(this._body, oth._body) && this._isCo == oth._isCo;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ctors));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Datatype.Datatype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ctors);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IDatatypeCtor>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, false);
    public static DAST._IDatatype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatype> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatype>(DAST.Datatype.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return new Datatype(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public static _IDatatype create_Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return create(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public bool is_Datatype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors {
      get {
        return this._ctors;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public bool dtor_isCo {
      get {
        return this._isCo;
      }
    }
  }

  public interface _IDatatypeCtor {
    bool is_DatatypeCtor { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_args { get; }
    bool dtor_hasAnyArgs { get; }
    _IDatatypeCtor DowncastClone();
  }
  public class DatatypeCtor : _IDatatypeCtor {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IFormal> _args;
    public readonly bool _hasAnyArgs;
    public DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      this._name = name;
      this._args = args;
      this._hasAnyArgs = hasAnyArgs;
    }
    public _IDatatypeCtor DowncastClone() {
      if (this is _IDatatypeCtor dt) { return dt; }
      return new DatatypeCtor(_name, _args, _hasAnyArgs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.DatatypeCtor;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._args, oth._args) && this._hasAnyArgs == oth._hasAnyArgs;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasAnyArgs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.DatatypeCtor.DatatypeCtor";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasAnyArgs);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatypeCtor theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, false);
    public static DAST._IDatatypeCtor Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatypeCtor>(DAST.DatatypeCtor.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatypeCtor create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return new DatatypeCtor(name, args, hasAnyArgs);
    }
    public static _IDatatypeCtor create_DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return create(name, args, hasAnyArgs);
    }
    public bool is_DatatypeCtor { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_args {
      get {
        return this._args;
      }
    }
    public bool dtor_hasAnyArgs {
      get {
        return this._hasAnyArgs;
      }
    }
  }

  public interface _INewtype {
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    DAST._IType dtor_base { get; }
    Dafny.ISequence<DAST._IStatement> dtor_witnessStmts { get; }
    DAST._IOptional<DAST._IExpression> dtor_witnessExpr { get; }
    _INewtype DowncastClone();
  }
  public class Newtype : _INewtype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly DAST._IType _base;
    public readonly Dafny.ISequence<DAST._IStatement> _witnessStmts;
    public readonly DAST._IOptional<DAST._IExpression> _witnessExpr;
    public Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      this._name = name;
      this._typeParams = typeParams;
      this._base = @base;
      this._witnessStmts = witnessStmts;
      this._witnessExpr = witnessExpr;
    }
    public _INewtype DowncastClone() {
      if (this is _INewtype dt) { return dt; }
      return new Newtype(_name, _typeParams, _base, _witnessStmts, _witnessExpr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Newtype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._base, oth._base) && object.Equals(this._witnessStmts, oth._witnessStmts) && object.Equals(this._witnessExpr, oth._witnessExpr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessStmts));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessExpr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Newtype.Newtype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessStmts);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessExpr);
      s += ")";
      return s;
    }
    private static readonly DAST._INewtype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Type.Default(), Dafny.Sequence<DAST._IStatement>.Empty, DAST.Optional<DAST._IExpression>.Default());
    public static DAST._INewtype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtype> _TYPE = new Dafny.TypeDescriptor<DAST._INewtype>(DAST.Newtype.Default());
    public static Dafny.TypeDescriptor<DAST._INewtype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      return new Newtype(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public static _INewtype create_Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      return create(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public bool is_Newtype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public DAST._IType dtor_base {
      get {
        return this._base;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_witnessStmts {
      get {
        return this._witnessStmts;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_witnessExpr {
      get {
        return this._witnessExpr;
      }
    }
  }

  public interface _IClassItem {
    bool is_Method { get; }
    DAST._IMethod dtor_Method_a0 { get; }
  }
  public class ClassItem : _IClassItem {
    public readonly DAST._IMethod _a0;
    public ClassItem(DAST._IMethod _a0) {
      this._a0 = _a0;
    }
    public static DAST._IMethod DowncastClone(DAST._IMethod _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ClassItem;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ClassItem.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = DAST.Method.Default();
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClassItem create(DAST._IMethod _a0) {
      return new ClassItem(_a0);
    }
    public static _IClassItem create_Method(DAST._IMethod _a0) {
      return create(_a0);
    }
    public bool is_Method { get { return true; } }
    public DAST._IMethod dtor_Method_a0 {
      get {
        return this._a0;
      }
    }
  }

  public interface _IField {
    bool is_Field { get; }
    DAST._IFormal dtor_formal { get; }
    DAST._IOptional<DAST._IExpression> dtor_defaultValue { get; }
    _IField DowncastClone();
  }
  public class Field : _IField {
    public readonly DAST._IFormal _formal;
    public readonly DAST._IOptional<DAST._IExpression> _defaultValue;
    public Field(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      this._formal = formal;
      this._defaultValue = defaultValue;
    }
    public _IField DowncastClone() {
      if (this is _IField dt) { return dt; }
      return new Field(_formal, _defaultValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Field;
      return oth != null && object.Equals(this._formal, oth._formal) && object.Equals(this._defaultValue, oth._defaultValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formal));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._defaultValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Field.Field";
      s += "(";
      s += Dafny.Helpers.ToString(this._formal);
      s += ", ";
      s += Dafny.Helpers.ToString(this._defaultValue);
      s += ")";
      return s;
    }
    private static readonly DAST._IField theDefault = create(DAST.Formal.Default(), DAST.Optional<DAST._IExpression>.Default());
    public static DAST._IField Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IField> _TYPE = new Dafny.TypeDescriptor<DAST._IField>(DAST.Field.Default());
    public static Dafny.TypeDescriptor<DAST._IField> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IField create(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      return new Field(formal, defaultValue);
    }
    public static _IField create_Field(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      return create(formal, defaultValue);
    }
    public bool is_Field { get { return true; } }
    public DAST._IFormal dtor_formal {
      get {
        return this._formal;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_defaultValue {
      get {
        return this._defaultValue;
      }
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    _IFormal DowncastClone();
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      this._name = name;
      this._typ = typ;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
    private static readonly DAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default());
    public static DAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IFormal> _TYPE = new Dafny.TypeDescriptor<DAST._IFormal>(DAST.Formal.Default());
    public static Dafny.TypeDescriptor<DAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return new Formal(name, typ);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return create(name, typ);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        return this._typ;
      }
    }
  }

  public interface _IMethod {
    bool is_Method { get; }
    bool dtor_isStatic { get; }
    bool dtor_hasBody { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<DAST._IType> dtor_outTypes { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars { get; }
    _IMethod DowncastClone();
  }
  public class Method : _IMethod {
    public readonly bool _isStatic;
    public readonly bool _hasBody;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _overridingPath;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public readonly Dafny.ISequence<DAST._IType> _outTypes;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outVars;
    public Method(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      this._isStatic = isStatic;
      this._hasBody = hasBody;
      this._overridingPath = overridingPath;
      this._name = name;
      this._typeParams = typeParams;
      this._params = @params;
      this._body = body;
      this._outTypes = outTypes;
      this._outVars = outVars;
    }
    public _IMethod DowncastClone() {
      if (this is _IMethod dt) { return dt; }
      return new Method(_isStatic, _hasBody, _overridingPath, _name, _typeParams, _params, _body, _outTypes, _outVars);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Method;
      return oth != null && this._isStatic == oth._isStatic && this._hasBody == oth._hasBody && object.Equals(this._overridingPath, oth._overridingPath) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._params, oth._params) && object.Equals(this._body, oth._body) && object.Equals(this._outTypes, oth._outTypes) && object.Equals(this._outVars, oth._outVars);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasBody));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._overridingPath));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outTypes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outVars));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Method.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasBody);
      s += ", ";
      s += Dafny.Helpers.ToString(this._overridingPath);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outTypes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outVars);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = create(false, false, DAST.Optional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, Dafny.Sequence<DAST._IStatement>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Optional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default());
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMethod create(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return new Method(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public static _IMethod create_Method(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return create(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public bool is_Method { get { return true; } }
    public bool dtor_isStatic {
      get {
        return this._isStatic;
      }
    }
    public bool dtor_hasBody {
      get {
        return this._hasBody;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath {
      get {
        return this._overridingPath;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        return this._params;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_outTypes {
      get {
        return this._outTypes;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars {
      get {
        return this._outVars;
      }
    }
  }

  public interface _IOptional<T> {
    bool is_Some { get; }
    bool is_None { get; }
    T dtor_Some_a0 { get; }
    _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public abstract class Optional<T> : _IOptional<T> {
    public Optional() {
    }
    public static DAST._IOptional<T> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<DAST._IOptional<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<DAST._IOptional<T>>(DAST.Optional<T>.Default());
    }
    public static _IOptional<T> create_Some(T _a0) {
      return new Optional_Some<T>(_a0);
    }
    public static _IOptional<T> create_None() {
      return new Optional_None<T>();
    }
    public bool is_Some { get { return this is Optional_Some<T>; } }
    public bool is_None { get { return this is Optional_None<T>; } }
    public T dtor_Some_a0 {
      get {
        var d = this;
        return ((Optional_Some<T>)d)._a0;
      }
    }
    public abstract _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public class Optional_Some<T> : Optional<T> {
    public readonly T _a0;
    public Optional_Some(T _a0) : base() {
      this._a0 = _a0;
    }
    public override _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOptional<__T> dt) { return dt; }
      return new Optional_Some<__T>(converter0(_a0));
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Optional_Some<T>;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Optional.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Optional_None<T> : Optional<T> {
    public Optional_None() : base() {
    }
    public override _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOptional<__T> dt) { return dt; }
      return new Optional_None<__T>();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Optional_None<T>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Optional.None";
      return s;
    }
  }

  public interface _IStatement {
    bool is_DeclareVar { get; }
    bool is_Assign { get; }
    bool is_If { get; }
    bool is_Labeled { get; }
    bool is_While { get; }
    bool is_Foreach { get; }
    bool is_Call { get; }
    bool is_Return { get; }
    bool is_EarlyReturn { get; }
    bool is_Break { get; }
    bool is_TailRecursive { get; }
    bool is_JumpTailCallStart { get; }
    bool is_Halt { get; }
    bool is_Print { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    DAST._IOptional<DAST._IExpression> dtor_maybeValue { get; }
    DAST._IAssignLhs dtor_lhs { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IExpression dtor_cond { get; }
    Dafny.ISequence<DAST._IStatement> dtor_thn { get; }
    Dafny.ISequence<DAST._IStatement> dtor_els { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_boundName { get; }
    DAST._IType dtor_boundType { get; }
    DAST._IExpression dtor_over { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.Rune>> dtor_toLabel { get; }
    DAST._IExpression dtor_Print_a0 { get; }
    _IStatement DowncastClone();
  }
  public abstract class Statement : _IStatement {
    public Statement() {
    }
    private static readonly DAST._IStatement theDefault = create_DeclareVar(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default(), DAST.Optional<DAST._IExpression>.Default());
    public static DAST._IStatement Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IStatement> _TYPE = new Dafny.TypeDescriptor<DAST._IStatement>(DAST.Statement.Default());
    public static Dafny.TypeDescriptor<DAST._IStatement> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStatement create_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IOptional<DAST._IExpression> maybeValue) {
      return new Statement_DeclareVar(name, typ, maybeValue);
    }
    public static _IStatement create_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) {
      return new Statement_Assign(lhs, @value);
    }
    public static _IStatement create_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) {
      return new Statement_If(cond, thn, els);
    }
    public static _IStatement create_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Labeled(lbl, body);
    }
    public static _IStatement create_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_While(cond, body);
    }
    public static _IStatement create_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Foreach(boundName, boundType, over, body);
    }
    public static _IStatement create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) {
      return new Statement_Call(@on, name, typeArgs, args, outs);
    }
    public static _IStatement create_Return(DAST._IExpression expr) {
      return new Statement_Return(expr);
    }
    public static _IStatement create_EarlyReturn() {
      return new Statement_EarlyReturn();
    }
    public static _IStatement create_Break(DAST._IOptional<Dafny.ISequence<Dafny.Rune>> toLabel) {
      return new Statement_Break(toLabel);
    }
    public static _IStatement create_TailRecursive(Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_TailRecursive(body);
    }
    public static _IStatement create_JumpTailCallStart() {
      return new Statement_JumpTailCallStart();
    }
    public static _IStatement create_Halt() {
      return new Statement_Halt();
    }
    public static _IStatement create_Print(DAST._IExpression _a0) {
      return new Statement_Print(_a0);
    }
    public bool is_DeclareVar { get { return this is Statement_DeclareVar; } }
    public bool is_Assign { get { return this is Statement_Assign; } }
    public bool is_If { get { return this is Statement_If; } }
    public bool is_Labeled { get { return this is Statement_Labeled; } }
    public bool is_While { get { return this is Statement_While; } }
    public bool is_Foreach { get { return this is Statement_Foreach; } }
    public bool is_Call { get { return this is Statement_Call; } }
    public bool is_Return { get { return this is Statement_Return; } }
    public bool is_EarlyReturn { get { return this is Statement_EarlyReturn; } }
    public bool is_Break { get { return this is Statement_Break; } }
    public bool is_TailRecursive { get { return this is Statement_TailRecursive; } }
    public bool is_JumpTailCallStart { get { return this is Statement_JumpTailCallStart; } }
    public bool is_Halt { get { return this is Statement_Halt; } }
    public bool is_Print { get { return this is Statement_Print; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Statement_DeclareVar) { return ((Statement_DeclareVar)d)._name; }
        return ((Statement_Call)d)._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._typ;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_maybeValue {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._maybeValue;
      }
    }
    public DAST._IAssignLhs dtor_lhs {
      get {
        var d = this;
        return ((Statement_Assign)d)._lhs;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        return ((Statement_Assign)d)._value;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        if (d is Statement_If) { return ((Statement_If)d)._cond; }
        return ((Statement_While)d)._cond;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_thn {
      get {
        var d = this;
        return ((Statement_If)d)._thn;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_els {
      get {
        var d = this;
        return ((Statement_If)d)._els;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Statement_Labeled)d)._lbl;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        if (d is Statement_Labeled) { return ((Statement_Labeled)d)._body; }
        if (d is Statement_While) { return ((Statement_While)d)._body; }
        if (d is Statement_Foreach) { return ((Statement_Foreach)d)._body; }
        return ((Statement_TailRecursive)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_boundName {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundName;
      }
    }
    public DAST._IType dtor_boundType {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundType;
      }
    }
    public DAST._IExpression dtor_over {
      get {
        var d = this;
        return ((Statement_Foreach)d)._over;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        return ((Statement_Call)d)._on;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Statement_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        return ((Statement_Call)d)._args;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs {
      get {
        var d = this;
        return ((Statement_Call)d)._outs;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        return ((Statement_Return)d)._expr;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.Rune>> dtor_toLabel {
      get {
        var d = this;
        return ((Statement_Break)d)._toLabel;
      }
    }
    public DAST._IExpression dtor_Print_a0 {
      get {
        var d = this;
        return ((Statement_Print)d)._a0;
      }
    }
    public abstract _IStatement DowncastClone();
  }
  public class Statement_DeclareVar : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IOptional<DAST._IExpression> _maybeValue;
    public Statement_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IOptional<DAST._IExpression> maybeValue) : base() {
      this._name = name;
      this._typ = typ;
      this._maybeValue = maybeValue;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_DeclareVar(_name, _typ, _maybeValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_DeclareVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._maybeValue, oth._maybeValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._maybeValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.DeclareVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._maybeValue);
      s += ")";
      return s;
    }
  }
  public class Statement_Assign : Statement {
    public readonly DAST._IAssignLhs _lhs;
    public readonly DAST._IExpression _value;
    public Statement_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) : base() {
      this._lhs = lhs;
      this._value = @value;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Assign(_lhs, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Assign;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Assign";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Statement_If : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _thn;
    public readonly Dafny.ISequence<DAST._IStatement> _els;
    public Statement_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_If(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_If;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.If";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Statement_Labeled : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._lbl = lbl;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Labeled(_lbl, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Labeled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Labeled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_While : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._cond = cond;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_While(_cond, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_While;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.While";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Foreach : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _boundName;
    public readonly DAST._IType _boundType;
    public readonly DAST._IExpression _over;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._boundName = boundName;
      this._boundType = boundType;
      this._over = over;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Foreach(_boundName, _boundType, _over, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Foreach;
      return oth != null && object.Equals(this._boundName, oth._boundName) && object.Equals(this._boundType, oth._boundType) && object.Equals(this._over, oth._over) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._over));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Foreach";
      s += "(";
      s += this._boundName.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._boundType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._over);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Call : Statement {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outs;
    public Statement_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
      this._outs = outs;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Call(_on, _name, _typeArgs, _args, _outs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args) && object.Equals(this._outs, oth._outs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outs);
      s += ")";
      return s;
    }
  }
  public class Statement_Return : Statement {
    public readonly DAST._IExpression _expr;
    public Statement_Return(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Return(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Return;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Statement_EarlyReturn : Statement {
    public Statement_EarlyReturn() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_EarlyReturn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_EarlyReturn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.EarlyReturn";
      return s;
    }
  }
  public class Statement_Break : Statement {
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _toLabel;
    public Statement_Break(DAST._IOptional<Dafny.ISequence<Dafny.Rune>> toLabel) : base() {
      this._toLabel = toLabel;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Break(_toLabel);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Break;
      return oth != null && object.Equals(this._toLabel, oth._toLabel);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._toLabel));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._toLabel);
      s += ")";
      return s;
    }
  }
  public class Statement_TailRecursive : Statement {
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_TailRecursive(Dafny.ISequence<DAST._IStatement> body) : base() {
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_TailRecursive(_body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_TailRecursive;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.TailRecursive";
      s += "(";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_JumpTailCallStart : Statement {
    public Statement_JumpTailCallStart() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_JumpTailCallStart();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_JumpTailCallStart;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.JumpTailCallStart";
      return s;
    }
  }
  public class Statement_Halt : Statement {
    public Statement_Halt() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Halt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Halt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Halt";
      return s;
    }
  }
  public class Statement_Print : Statement {
    public readonly DAST._IExpression _a0;
    public Statement_Print(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IAssignLhs {
    bool is_Ident { get; }
    bool is_Select { get; }
    bool is_Index { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    DAST._IExpression dtor_expr { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    _IAssignLhs DowncastClone();
  }
  public abstract class AssignLhs : _IAssignLhs {
    public AssignLhs() {
    }
    private static readonly DAST._IAssignLhs theDefault = create_Ident(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._IAssignLhs Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IAssignLhs> _TYPE = new Dafny.TypeDescriptor<DAST._IAssignLhs>(DAST.AssignLhs.Default());
    public static Dafny.TypeDescriptor<DAST._IAssignLhs> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignLhs create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new AssignLhs_Ident(_a0);
    }
    public static _IAssignLhs create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) {
      return new AssignLhs_Select(expr, field);
    }
    public static _IAssignLhs create_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) {
      return new AssignLhs_Index(expr, indices);
    }
    public bool is_Ident { get { return this is AssignLhs_Ident; } }
    public bool is_Select { get { return this is AssignLhs_Select; } }
    public bool is_Index { get { return this is AssignLhs_Index; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((AssignLhs_Ident)d)._a0;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is AssignLhs_Select) { return ((AssignLhs_Select)d)._expr; }
        return ((AssignLhs_Index)d)._expr;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((AssignLhs_Select)d)._field;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((AssignLhs_Index)d)._indices;
      }
    }
    public abstract _IAssignLhs DowncastClone();
  }
  public class AssignLhs_Ident : AssignLhs {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public AssignLhs_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Ident";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Select : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public AssignLhs_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._expr = expr;
      this._field = field;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Select(_expr, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Index : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public AssignLhs_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._indices = indices;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Index(_expr, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }

  public interface _ICollKind {
    bool is_Seq { get; }
    bool is_Array { get; }
    bool is_Map { get; }
    _ICollKind DowncastClone();
  }
  public abstract class CollKind : _ICollKind {
    public CollKind() {
    }
    private static readonly DAST._ICollKind theDefault = create_Seq();
    public static DAST._ICollKind Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICollKind> _TYPE = new Dafny.TypeDescriptor<DAST._ICollKind>(DAST.CollKind.Default());
    public static Dafny.TypeDescriptor<DAST._ICollKind> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICollKind create_Seq() {
      return new CollKind_Seq();
    }
    public static _ICollKind create_Array() {
      return new CollKind_Array();
    }
    public static _ICollKind create_Map() {
      return new CollKind_Map();
    }
    public bool is_Seq { get { return this is CollKind_Seq; } }
    public bool is_Array { get { return this is CollKind_Array; } }
    public bool is_Map { get { return this is CollKind_Map; } }
    public static System.Collections.Generic.IEnumerable<_ICollKind> AllSingletonConstructors {
      get {
        yield return CollKind.create_Seq();
        yield return CollKind.create_Array();
        yield return CollKind.create_Map();
      }
    }
    public abstract _ICollKind DowncastClone();
  }
  public class CollKind_Seq : CollKind {
    public CollKind_Seq() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Seq();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Seq;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Seq";
      return s;
    }
  }
  public class CollKind_Array : CollKind {
    public CollKind_Array() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Array();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Array;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Array";
      return s;
    }
  }
  public class CollKind_Map : CollKind {
    public CollKind_Map() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Map();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Map;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Map";
      return s;
    }
  }

  public interface _IBinOp {
    bool is_Eq { get; }
    bool is_Neq { get; }
    bool is_Div { get; }
    bool is_EuclidianDiv { get; }
    bool is_Mod { get; }
    bool is_EuclidianMod { get; }
    bool is_Implies { get; }
    bool is_In { get; }
    bool is_NotIn { get; }
    bool is_SetDifference { get; }
    bool is_Concat { get; }
    bool is_Passthrough { get; }
    bool dtor_referential { get; }
    bool dtor_nullable { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    _IBinOp DowncastClone();
  }
  public abstract class BinOp : _IBinOp {
    public BinOp() {
    }
    private static readonly DAST._IBinOp theDefault = create_Eq(false, false);
    public static DAST._IBinOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IBinOp> _TYPE = new Dafny.TypeDescriptor<DAST._IBinOp>(DAST.BinOp.Default());
    public static Dafny.TypeDescriptor<DAST._IBinOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOp create_Eq(bool referential, bool nullable) {
      return new BinOp_Eq(referential, nullable);
    }
    public static _IBinOp create_Neq(bool referential, bool nullable) {
      return new BinOp_Neq(referential, nullable);
    }
    public static _IBinOp create_Div() {
      return new BinOp_Div();
    }
    public static _IBinOp create_EuclidianDiv() {
      return new BinOp_EuclidianDiv();
    }
    public static _IBinOp create_Mod() {
      return new BinOp_Mod();
    }
    public static _IBinOp create_EuclidianMod() {
      return new BinOp_EuclidianMod();
    }
    public static _IBinOp create_Implies() {
      return new BinOp_Implies();
    }
    public static _IBinOp create_In() {
      return new BinOp_In();
    }
    public static _IBinOp create_NotIn() {
      return new BinOp_NotIn();
    }
    public static _IBinOp create_SetDifference() {
      return new BinOp_SetDifference();
    }
    public static _IBinOp create_Concat() {
      return new BinOp_Concat();
    }
    public static _IBinOp create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new BinOp_Passthrough(_a0);
    }
    public bool is_Eq { get { return this is BinOp_Eq; } }
    public bool is_Neq { get { return this is BinOp_Neq; } }
    public bool is_Div { get { return this is BinOp_Div; } }
    public bool is_EuclidianDiv { get { return this is BinOp_EuclidianDiv; } }
    public bool is_Mod { get { return this is BinOp_Mod; } }
    public bool is_EuclidianMod { get { return this is BinOp_EuclidianMod; } }
    public bool is_Implies { get { return this is BinOp_Implies; } }
    public bool is_In { get { return this is BinOp_In; } }
    public bool is_NotIn { get { return this is BinOp_NotIn; } }
    public bool is_SetDifference { get { return this is BinOp_SetDifference; } }
    public bool is_Concat { get { return this is BinOp_Concat; } }
    public bool is_Passthrough { get { return this is BinOp_Passthrough; } }
    public bool dtor_referential {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._referential; }
        return ((BinOp_Neq)d)._referential;
      }
    }
    public bool dtor_nullable {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._nullable; }
        return ((BinOp_Neq)d)._nullable;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((BinOp_Passthrough)d)._a0;
      }
    }
    public abstract _IBinOp DowncastClone();
  }
  public class BinOp_Eq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Eq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Eq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Eq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Eq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Neq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Neq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Neq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Neq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Neq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Div : BinOp {
    public BinOp_Div() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Div();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Div;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Div";
      return s;
    }
  }
  public class BinOp_EuclidianDiv : BinOp {
    public BinOp_EuclidianDiv() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianDiv();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianDiv;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianDiv";
      return s;
    }
  }
  public class BinOp_Mod : BinOp {
    public BinOp_Mod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Mod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Mod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Mod";
      return s;
    }
  }
  public class BinOp_EuclidianMod : BinOp {
    public BinOp_EuclidianMod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianMod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianMod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianMod";
      return s;
    }
  }
  public class BinOp_Implies : BinOp {
    public BinOp_Implies() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Implies();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Implies;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Implies";
      return s;
    }
  }
  public class BinOp_In : BinOp {
    public BinOp_In() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_In();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_In;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.In";
      return s;
    }
  }
  public class BinOp_NotIn : BinOp {
    public BinOp_NotIn() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_NotIn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_NotIn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.NotIn";
      return s;
    }
  }
  public class BinOp_SetDifference : BinOp {
    public BinOp_SetDifference() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetDifference();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetDifference;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetDifference";
      return s;
    }
  }
  public class BinOp_Concat : BinOp {
    public BinOp_Concat() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Concat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Concat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Concat";
      return s;
    }
  }
  public class BinOp_Passthrough : BinOp {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public BinOp_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IExpression {
    bool is_Literal { get; }
    bool is_Ident { get; }
    bool is_Companion { get; }
    bool is_Tuple { get; }
    bool is_New { get; }
    bool is_NewArray { get; }
    bool is_DatatypeValue { get; }
    bool is_Convert { get; }
    bool is_SeqConstruct { get; }
    bool is_SeqValue { get; }
    bool is_SetValue { get; }
    bool is_MapValue { get; }
    bool is_This { get; }
    bool is_Ite { get; }
    bool is_UnOp { get; }
    bool is_BinOp { get; }
    bool is_ArrayLen { get; }
    bool is_Select { get; }
    bool is_SelectFn { get; }
    bool is_Index { get; }
    bool is_IndexRange { get; }
    bool is_TupleSelect { get; }
    bool is_Call { get; }
    bool is_Lambda { get; }
    bool is_BetaRedex { get; }
    bool is_IIFE { get; }
    bool is_Apply { get; }
    bool is_TypeTest { get; }
    bool is_InitializationValue { get; }
    bool is_BoolBoundedPool { get; }
    bool is_SetBoundedPool { get; }
    bool is_SeqBoundedPool { get; }
    bool is_IntRange { get; }
    DAST._ILiteral dtor_Literal_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 { get; }
    Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Dafny.ISequence<DAST._IExpression> dtor_dims { get; }
    DAST._IType dtor_typ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_variant { get; }
    bool dtor_isCo { get; }
    Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IType dtor_from { get; }
    DAST._IExpression dtor_length { get; }
    DAST._IExpression dtor_elem { get; }
    Dafny.ISequence<DAST._IExpression> dtor_elements { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems { get; }
    DAST._IExpression dtor_cond { get; }
    DAST._IExpression dtor_thn { get; }
    DAST._IExpression dtor_els { get; }
    DAST._IUnaryOp dtor_unOp { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IBinOp dtor_op { get; }
    DAST._IExpression dtor_left { get; }
    DAST._IExpression dtor_right { get; }
    BigInteger dtor_dim { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    bool dtor_isConstant { get; }
    bool dtor_onDatatype { get; }
    bool dtor_isStatic { get; }
    BigInteger dtor_arity { get; }
    DAST._ICollKind dtor_collKind { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    bool dtor_isArray { get; }
    DAST._IOptional<DAST._IExpression> dtor_low { get; }
    DAST._IOptional<DAST._IExpression> dtor_high { get; }
    BigInteger dtor_index { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    DAST._IType dtor_retType { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values { get; }
    DAST._IExpression dtor_iifeBody { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType { get; }
    DAST._IExpression dtor_of { get; }
    bool dtor_includeDuplicates { get; }
    DAST._IExpression dtor_lo { get; }
    DAST._IExpression dtor_hi { get; }
    _IExpression DowncastClone();
  }
  public abstract class Expression : _IExpression {
    public Expression() {
    }
    private static readonly DAST._IExpression theDefault = create_Literal(DAST.Literal.Default());
    public static DAST._IExpression Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IExpression> _TYPE = new Dafny.TypeDescriptor<DAST._IExpression>(DAST.Expression.Default());
    public static Dafny.TypeDescriptor<DAST._IExpression> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpression create_Literal(DAST._ILiteral _a0) {
      return new Expression_Literal(_a0);
    }
    public static _IExpression create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expression_Ident(_a0);
    }
    public static _IExpression create_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) {
      return new Expression_Companion(_a0);
    }
    public static _IExpression create_Tuple(Dafny.ISequence<DAST._IExpression> _a0) {
      return new Expression_Tuple(_a0);
    }
    public static _IExpression create_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_New(path, typeArgs, args);
    }
    public static _IExpression create_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) {
      return new Expression_NewArray(dims, typ);
    }
    public static _IExpression create_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) {
      return new Expression_DatatypeValue(path, typeArgs, variant, isCo, contents);
    }
    public static _IExpression create_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) {
      return new Expression_Convert(@value, @from, typ);
    }
    public static _IExpression create_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) {
      return new Expression_SeqConstruct(length, elem);
    }
    public static _IExpression create_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) {
      return new Expression_SeqValue(elements, typ);
    }
    public static _IExpression create_SetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_SetValue(elements);
    }
    public static _IExpression create_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) {
      return new Expression_MapValue(mapElems);
    }
    public static _IExpression create_This() {
      return new Expression_This();
    }
    public static _IExpression create_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) {
      return new Expression_Ite(cond, thn, els);
    }
    public static _IExpression create_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) {
      return new Expression_UnOp(unOp, expr);
    }
    public static _IExpression create_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) {
      return new Expression_BinOp(op, left, right);
    }
    public static _IExpression create_ArrayLen(DAST._IExpression expr, BigInteger dim) {
      return new Expression_ArrayLen(expr, dim);
    }
    public static _IExpression create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) {
      return new Expression_Select(expr, field, isConstant, onDatatype);
    }
    public static _IExpression create_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) {
      return new Expression_SelectFn(expr, field, onDatatype, isStatic, arity);
    }
    public static _IExpression create_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) {
      return new Expression_Index(expr, collKind, indices);
    }
    public static _IExpression create_IndexRange(DAST._IExpression expr, bool isArray, DAST._IOptional<DAST._IExpression> low, DAST._IOptional<DAST._IExpression> high) {
      return new Expression_IndexRange(expr, isArray, low, high);
    }
    public static _IExpression create_TupleSelect(DAST._IExpression expr, BigInteger index) {
      return new Expression_TupleSelect(expr, index);
    }
    public static _IExpression create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Call(@on, name, typeArgs, args);
    }
    public static _IExpression create_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) {
      return new Expression_Lambda(@params, retType, body);
    }
    public static _IExpression create_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) {
      return new Expression_BetaRedex(values, retType, expr);
    }
    public static _IExpression create_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) {
      return new Expression_IIFE(name, typ, @value, iifeBody);
    }
    public static _IExpression create_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Apply(expr, args);
    }
    public static _IExpression create_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) {
      return new Expression_TypeTest(@on, dType, variant);
    }
    public static _IExpression create_InitializationValue(DAST._IType typ) {
      return new Expression_InitializationValue(typ);
    }
    public static _IExpression create_BoolBoundedPool() {
      return new Expression_BoolBoundedPool();
    }
    public static _IExpression create_SetBoundedPool(DAST._IExpression of) {
      return new Expression_SetBoundedPool(of);
    }
    public static _IExpression create_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) {
      return new Expression_SeqBoundedPool(of, includeDuplicates);
    }
    public static _IExpression create_IntRange(DAST._IExpression lo, DAST._IExpression hi) {
      return new Expression_IntRange(lo, hi);
    }
    public bool is_Literal { get { return this is Expression_Literal; } }
    public bool is_Ident { get { return this is Expression_Ident; } }
    public bool is_Companion { get { return this is Expression_Companion; } }
    public bool is_Tuple { get { return this is Expression_Tuple; } }
    public bool is_New { get { return this is Expression_New; } }
    public bool is_NewArray { get { return this is Expression_NewArray; } }
    public bool is_DatatypeValue { get { return this is Expression_DatatypeValue; } }
    public bool is_Convert { get { return this is Expression_Convert; } }
    public bool is_SeqConstruct { get { return this is Expression_SeqConstruct; } }
    public bool is_SeqValue { get { return this is Expression_SeqValue; } }
    public bool is_SetValue { get { return this is Expression_SetValue; } }
    public bool is_MapValue { get { return this is Expression_MapValue; } }
    public bool is_This { get { return this is Expression_This; } }
    public bool is_Ite { get { return this is Expression_Ite; } }
    public bool is_UnOp { get { return this is Expression_UnOp; } }
    public bool is_BinOp { get { return this is Expression_BinOp; } }
    public bool is_ArrayLen { get { return this is Expression_ArrayLen; } }
    public bool is_Select { get { return this is Expression_Select; } }
    public bool is_SelectFn { get { return this is Expression_SelectFn; } }
    public bool is_Index { get { return this is Expression_Index; } }
    public bool is_IndexRange { get { return this is Expression_IndexRange; } }
    public bool is_TupleSelect { get { return this is Expression_TupleSelect; } }
    public bool is_Call { get { return this is Expression_Call; } }
    public bool is_Lambda { get { return this is Expression_Lambda; } }
    public bool is_BetaRedex { get { return this is Expression_BetaRedex; } }
    public bool is_IIFE { get { return this is Expression_IIFE; } }
    public bool is_Apply { get { return this is Expression_Apply; } }
    public bool is_TypeTest { get { return this is Expression_TypeTest; } }
    public bool is_InitializationValue { get { return this is Expression_InitializationValue; } }
    public bool is_BoolBoundedPool { get { return this is Expression_BoolBoundedPool; } }
    public bool is_SetBoundedPool { get { return this is Expression_SetBoundedPool; } }
    public bool is_SeqBoundedPool { get { return this is Expression_SeqBoundedPool; } }
    public bool is_IntRange { get { return this is Expression_IntRange; } }
    public DAST._ILiteral dtor_Literal_a0 {
      get {
        var d = this;
        return ((Expression_Literal)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((Expression_Ident)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 {
      get {
        var d = this;
        return ((Expression_Companion)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Expression_Tuple)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._path; }
        return ((Expression_DatatypeValue)d)._path;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._typeArgs; }
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._typeArgs; }
        return ((Expression_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._args; }
        if (d is Expression_Call) { return ((Expression_Call)d)._args; }
        return ((Expression_Apply)d)._args;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_dims {
      get {
        var d = this;
        return ((Expression_NewArray)d)._dims;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        if (d is Expression_NewArray) { return ((Expression_NewArray)d)._typ; }
        if (d is Expression_Convert) { return ((Expression_Convert)d)._typ; }
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._typ; }
        if (d is Expression_IIFE) { return ((Expression_IIFE)d)._typ; }
        return ((Expression_InitializationValue)d)._typ;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_variant {
      get {
        var d = this;
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._variant; }
        return ((Expression_TypeTest)d)._variant;
      }
    }
    public bool dtor_isCo {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._isCo;
      }
    }
    public Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._contents;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        if (d is Expression_Convert) { return ((Expression_Convert)d)._value; }
        return ((Expression_IIFE)d)._value;
      }
    }
    public DAST._IType dtor_from {
      get {
        var d = this;
        return ((Expression_Convert)d)._from;
      }
    }
    public DAST._IExpression dtor_length {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._length;
      }
    }
    public DAST._IExpression dtor_elem {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._elem;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_elements {
      get {
        var d = this;
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._elements; }
        return ((Expression_SetValue)d)._elements;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems {
      get {
        var d = this;
        return ((Expression_MapValue)d)._mapElems;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        return ((Expression_Ite)d)._cond;
      }
    }
    public DAST._IExpression dtor_thn {
      get {
        var d = this;
        return ((Expression_Ite)d)._thn;
      }
    }
    public DAST._IExpression dtor_els {
      get {
        var d = this;
        return ((Expression_Ite)d)._els;
      }
    }
    public DAST._IUnaryOp dtor_unOp {
      get {
        var d = this;
        return ((Expression_UnOp)d)._unOp;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is Expression_UnOp) { return ((Expression_UnOp)d)._expr; }
        if (d is Expression_ArrayLen) { return ((Expression_ArrayLen)d)._expr; }
        if (d is Expression_Select) { return ((Expression_Select)d)._expr; }
        if (d is Expression_SelectFn) { return ((Expression_SelectFn)d)._expr; }
        if (d is Expression_Index) { return ((Expression_Index)d)._expr; }
        if (d is Expression_IndexRange) { return ((Expression_IndexRange)d)._expr; }
        if (d is Expression_TupleSelect) { return ((Expression_TupleSelect)d)._expr; }
        if (d is Expression_BetaRedex) { return ((Expression_BetaRedex)d)._expr; }
        return ((Expression_Apply)d)._expr;
      }
    }
    public DAST._IBinOp dtor_op {
      get {
        var d = this;
        return ((Expression_BinOp)d)._op;
      }
    }
    public DAST._IExpression dtor_left {
      get {
        var d = this;
        return ((Expression_BinOp)d)._left;
      }
    }
    public DAST._IExpression dtor_right {
      get {
        var d = this;
        return ((Expression_BinOp)d)._right;
      }
    }
    public BigInteger dtor_dim {
      get {
        var d = this;
        return ((Expression_ArrayLen)d)._dim;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._field; }
        return ((Expression_SelectFn)d)._field;
      }
    }
    public bool dtor_isConstant {
      get {
        var d = this;
        return ((Expression_Select)d)._isConstant;
      }
    }
    public bool dtor_onDatatype {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._onDatatype; }
        return ((Expression_SelectFn)d)._onDatatype;
      }
    }
    public bool dtor_isStatic {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._isStatic;
      }
    }
    public BigInteger dtor_arity {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._arity;
      }
    }
    public DAST._ICollKind dtor_collKind {
      get {
        var d = this;
        return ((Expression_Index)d)._collKind;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((Expression_Index)d)._indices;
      }
    }
    public bool dtor_isArray {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._isArray;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_low {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._low;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_high {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._high;
      }
    }
    public BigInteger dtor_index {
      get {
        var d = this;
        return ((Expression_TupleSelect)d)._index;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._on; }
        return ((Expression_TypeTest)d)._on;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._name; }
        return ((Expression_IIFE)d)._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        var d = this;
        return ((Expression_Lambda)d)._params;
      }
    }
    public DAST._IType dtor_retType {
      get {
        var d = this;
        if (d is Expression_Lambda) { return ((Expression_Lambda)d)._retType; }
        return ((Expression_BetaRedex)d)._retType;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        return ((Expression_Lambda)d)._body;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values {
      get {
        var d = this;
        return ((Expression_BetaRedex)d)._values;
      }
    }
    public DAST._IExpression dtor_iifeBody {
      get {
        var d = this;
        return ((Expression_IIFE)d)._iifeBody;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType {
      get {
        var d = this;
        return ((Expression_TypeTest)d)._dType;
      }
    }
    public DAST._IExpression dtor_of {
      get {
        var d = this;
        if (d is Expression_SetBoundedPool) { return ((Expression_SetBoundedPool)d)._of; }
        return ((Expression_SeqBoundedPool)d)._of;
      }
    }
    public bool dtor_includeDuplicates {
      get {
        var d = this;
        return ((Expression_SeqBoundedPool)d)._includeDuplicates;
      }
    }
    public DAST._IExpression dtor_lo {
      get {
        var d = this;
        return ((Expression_IntRange)d)._lo;
      }
    }
    public DAST._IExpression dtor_hi {
      get {
        var d = this;
        return ((Expression_IntRange)d)._hi;
      }
    }
    public abstract _IExpression DowncastClone();
  }
  public class Expression_Literal : Expression {
    public readonly DAST._ILiteral _a0;
    public Expression_Literal(DAST._ILiteral _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Literal(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Literal;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Literal";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Ident : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expression_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ident";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_Companion : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public Expression_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Companion(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Companion;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Companion";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Tuple : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _a0;
    public Expression_Tuple(Dafny.ISequence<DAST._IExpression> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_New : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_New(_path, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_New;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_NewArray : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _dims;
    public readonly DAST._IType _typ;
    public Expression_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) : base() {
      this._dims = dims;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_NewArray(_dims, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_NewArray;
      return oth != null && object.Equals(this._dims, oth._dims) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.NewArray";
      s += "(";
      s += Dafny.Helpers.ToString(this._dims);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_DatatypeValue : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public readonly bool _isCo;
    public readonly Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _contents;
    public Expression_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._variant = variant;
      this._isCo = isCo;
      this._contents = contents;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_DatatypeValue(_path, _typeArgs, _variant, _isCo, _contents);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_DatatypeValue;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._variant, oth._variant) && this._isCo == oth._isCo && object.Equals(this._contents, oth._contents);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._contents));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.DatatypeValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._contents);
      s += ")";
      return s;
    }
  }
  public class Expression_Convert : Expression {
    public readonly DAST._IExpression _value;
    public readonly DAST._IType _from;
    public readonly DAST._IType _typ;
    public Expression_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) : base() {
      this._value = @value;
      this._from = @from;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Convert(_value, _from, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Convert;
      return oth != null && object.Equals(this._value, oth._value) && object.Equals(this._from, oth._from) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._from));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Convert";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._from);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqConstruct : Expression {
    public readonly DAST._IExpression _length;
    public readonly DAST._IExpression _elem;
    public Expression_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) : base() {
      this._length = length;
      this._elem = elem;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqConstruct(_length, _elem);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqConstruct;
      return oth != null && object.Equals(this._length, oth._length) && object.Equals(this._elem, oth._elem);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._length));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elem));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqConstruct";
      s += "(";
      s += Dafny.Helpers.ToString(this._length);
      s += ", ";
      s += Dafny.Helpers.ToString(this._elem);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public readonly DAST._IType _typ;
    public Expression_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) : base() {
      this._elements = elements;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqValue(_elements, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqValue;
      return oth != null && object.Equals(this._elements, oth._elements) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_SetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValue : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _mapElems;
    public Expression_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) : base() {
      this._mapElems = mapElems;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValue(_mapElems);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValue;
      return oth != null && object.Equals(this._mapElems, oth._mapElems);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mapElems));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._mapElems);
      s += ")";
      return s;
    }
  }
  public class Expression_This : Expression {
    public Expression_This() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_This();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_This;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.This";
      return s;
    }
  }
  public class Expression_Ite : Expression {
    public readonly DAST._IExpression _cond;
    public readonly DAST._IExpression _thn;
    public readonly DAST._IExpression _els;
    public Expression_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ite(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ite;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expression_UnOp : Expression {
    public readonly DAST._IUnaryOp _unOp;
    public readonly DAST._IExpression _expr;
    public Expression_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) : base() {
      this._unOp = unOp;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_UnOp(_unOp, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_UnOp;
      return oth != null && object.Equals(this._unOp, oth._unOp) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._unOp));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.UnOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._unOp);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_BinOp : Expression {
    public readonly DAST._IBinOp _op;
    public readonly DAST._IExpression _left;
    public readonly DAST._IExpression _right;
    public Expression_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) : base() {
      this._op = op;
      this._left = left;
      this._right = right;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BinOp(_op, _left, _right);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BinOp;
      return oth != null && object.Equals(this._op, oth._op) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BinOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._op);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ")";
      return s;
    }
  }
  public class Expression_ArrayLen : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _dim;
    public Expression_ArrayLen(DAST._IExpression expr, BigInteger dim) : base() {
      this._expr = expr;
      this._dim = dim;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ArrayLen(_expr, _dim);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ArrayLen;
      return oth != null && object.Equals(this._expr, oth._expr) && this._dim == oth._dim;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dim));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ArrayLen";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dim);
      s += ")";
      return s;
    }
  }
  public class Expression_Select : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _isConstant;
    public readonly bool _onDatatype;
    public Expression_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) : base() {
      this._expr = expr;
      this._field = field;
      this._isConstant = isConstant;
      this._onDatatype = onDatatype;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Select(_expr, _field, _isConstant, _onDatatype);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._isConstant == oth._isConstant && this._onDatatype == oth._onDatatype;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isConstant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isConstant);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ")";
      return s;
    }
  }
  public class Expression_SelectFn : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _onDatatype;
    public readonly bool _isStatic;
    public readonly BigInteger _arity;
    public Expression_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) : base() {
      this._expr = expr;
      this._field = field;
      this._onDatatype = onDatatype;
      this._isStatic = isStatic;
      this._arity = arity;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SelectFn(_expr, _field, _onDatatype, _isStatic, _arity);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SelectFn;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._onDatatype == oth._onDatatype && this._isStatic == oth._isStatic && this._arity == oth._arity;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arity));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SelectFn";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arity);
      s += ")";
      return s;
    }
  }
  public class Expression_Index : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._ICollKind _collKind;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public Expression_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._collKind = collKind;
      this._indices = indices;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Index(_expr, _collKind, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._collKind, oth._collKind) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._collKind));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._collKind);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }
  public class Expression_IndexRange : Expression {
    public readonly DAST._IExpression _expr;
    public readonly bool _isArray;
    public readonly DAST._IOptional<DAST._IExpression> _low;
    public readonly DAST._IOptional<DAST._IExpression> _high;
    public Expression_IndexRange(DAST._IExpression expr, bool isArray, DAST._IOptional<DAST._IExpression> low, DAST._IOptional<DAST._IExpression> high) : base() {
      this._expr = expr;
      this._isArray = isArray;
      this._low = low;
      this._high = high;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IndexRange(_expr, _isArray, _low, _high);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IndexRange;
      return oth != null && object.Equals(this._expr, oth._expr) && this._isArray == oth._isArray && object.Equals(this._low, oth._low) && object.Equals(this._high, oth._high);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isArray));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._low));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._high));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IndexRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isArray);
      s += ", ";
      s += Dafny.Helpers.ToString(this._low);
      s += ", ";
      s += Dafny.Helpers.ToString(this._high);
      s += ")";
      return s;
    }
  }
  public class Expression_TupleSelect : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _index;
    public Expression_TupleSelect(DAST._IExpression expr, BigInteger index) : base() {
      this._expr = expr;
      this._index = index;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TupleSelect(_expr, _index);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TupleSelect;
      return oth != null && object.Equals(this._expr, oth._expr) && this._index == oth._index;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._index));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TupleSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._index);
      s += ")";
      return s;
    }
  }
  public class Expression_Call : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Call(_on, _name, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_Lambda : Expression {
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly DAST._IType _retType;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Expression_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._params = @params;
      this._retType = retType;
      this._body = body;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Lambda(_params, _retType, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Lambda;
      return oth != null && object.Equals(this._params, oth._params) && object.Equals(this._retType, oth._retType) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Lambda";
      s += "(";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expression_BetaRedex : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _values;
    public readonly DAST._IType _retType;
    public readonly DAST._IExpression _expr;
    public Expression_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) : base() {
      this._values = values;
      this._retType = retType;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BetaRedex(_values, _retType, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BetaRedex;
      return oth != null && object.Equals(this._values, oth._values) && object.Equals(this._retType, oth._retType) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._values));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BetaRedex";
      s += "(";
      s += Dafny.Helpers.ToString(this._values);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_IIFE : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IExpression _value;
    public readonly DAST._IExpression _iifeBody;
    public Expression_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) : base() {
      this._name = name;
      this._typ = typ;
      this._value = @value;
      this._iifeBody = iifeBody;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IIFE(_name, _typ, _value, _iifeBody);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IIFE;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._value, oth._value) && object.Equals(this._iifeBody, oth._iifeBody);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._iifeBody));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IIFE";
      s += "(";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._iifeBody);
      s += ")";
      return s;
    }
  }
  public class Expression_Apply : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._expr = expr;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Apply(_expr, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Apply;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Apply";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_TypeTest : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _dType;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public Expression_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) : base() {
      this._on = @on;
      this._dType = dType;
      this._variant = variant;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TypeTest(_on, _dType, _variant);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TypeTest;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._dType, oth._dType) && object.Equals(this._variant, oth._variant);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TypeTest";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dType);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_InitializationValue : Expression {
    public readonly DAST._IType _typ;
    public Expression_InitializationValue(DAST._IType typ) : base() {
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_InitializationValue(_typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_InitializationValue;
      return oth != null && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.InitializationValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_BoolBoundedPool : Expression {
    public Expression_BoolBoundedPool() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BoolBoundedPool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BoolBoundedPool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BoolBoundedPool";
      return s;
    }
  }
  public class Expression_SetBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public Expression_SetBoundedPool(DAST._IExpression of) : base() {
      this._of = of;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBoundedPool(_of);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBoundedPool;
      return oth != null && object.Equals(this._of, oth._of);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public readonly bool _includeDuplicates;
    public Expression_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) : base() {
      this._of = of;
      this._includeDuplicates = includeDuplicates;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqBoundedPool(_of, _includeDuplicates);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqBoundedPool;
      return oth != null && object.Equals(this._of, oth._of) && this._includeDuplicates == oth._includeDuplicates;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._includeDuplicates));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ", ";
      s += Dafny.Helpers.ToString(this._includeDuplicates);
      s += ")";
      return s;
    }
  }
  public class Expression_IntRange : Expression {
    public readonly DAST._IExpression _lo;
    public readonly DAST._IExpression _hi;
    public Expression_IntRange(DAST._IExpression lo, DAST._IExpression hi) : base() {
      this._lo = lo;
      this._hi = hi;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IntRange(_lo, _hi);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IntRange;
      return oth != null && object.Equals(this._lo, oth._lo) && object.Equals(this._hi, oth._hi);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hi));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IntRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._lo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hi);
      s += ")";
      return s;
    }
  }

  public interface _IUnaryOp {
    bool is_Not { get; }
    bool is_BitwiseNot { get; }
    bool is_Cardinality { get; }
    _IUnaryOp DowncastClone();
  }
  public abstract class UnaryOp : _IUnaryOp {
    public UnaryOp() {
    }
    private static readonly DAST._IUnaryOp theDefault = create_Not();
    public static DAST._IUnaryOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IUnaryOp> _TYPE = new Dafny.TypeDescriptor<DAST._IUnaryOp>(DAST.UnaryOp.Default());
    public static Dafny.TypeDescriptor<DAST._IUnaryOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnaryOp create_Not() {
      return new UnaryOp_Not();
    }
    public static _IUnaryOp create_BitwiseNot() {
      return new UnaryOp_BitwiseNot();
    }
    public static _IUnaryOp create_Cardinality() {
      return new UnaryOp_Cardinality();
    }
    public bool is_Not { get { return this is UnaryOp_Not; } }
    public bool is_BitwiseNot { get { return this is UnaryOp_BitwiseNot; } }
    public bool is_Cardinality { get { return this is UnaryOp_Cardinality; } }
    public static System.Collections.Generic.IEnumerable<_IUnaryOp> AllSingletonConstructors {
      get {
        yield return UnaryOp.create_Not();
        yield return UnaryOp.create_BitwiseNot();
        yield return UnaryOp.create_Cardinality();
      }
    }
    public abstract _IUnaryOp DowncastClone();
  }
  public class UnaryOp_Not : UnaryOp {
    public UnaryOp_Not() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Not();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Not;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Not";
      return s;
    }
  }
  public class UnaryOp_BitwiseNot : UnaryOp {
    public UnaryOp_BitwiseNot() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_BitwiseNot();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_BitwiseNot;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.BitwiseNot";
      return s;
    }
  }
  public class UnaryOp_Cardinality : UnaryOp {
    public UnaryOp_Cardinality() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Cardinality();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Cardinality;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Cardinality";
      return s;
    }
  }

  public interface _ILiteral {
    bool is_BoolLiteral { get; }
    bool is_IntLiteral { get; }
    bool is_DecLiteral { get; }
    bool is_StringLiteral { get; }
    bool is_CharLiteral { get; }
    bool is_Null { get; }
    bool dtor_BoolLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 { get; }
    DAST._IType dtor_IntLiteral_a1 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 { get; }
    DAST._IType dtor_DecLiteral_a2 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 { get; }
    Dafny.Rune dtor_CharLiteral_a0 { get; }
    DAST._IType dtor_Null_a0 { get; }
    _ILiteral DowncastClone();
  }
  public abstract class Literal : _ILiteral {
    public Literal() {
    }
    private static readonly DAST._ILiteral theDefault = create_BoolLiteral(false);
    public static DAST._ILiteral Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ILiteral> _TYPE = new Dafny.TypeDescriptor<DAST._ILiteral>(DAST.Literal.Default());
    public static Dafny.TypeDescriptor<DAST._ILiteral> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ILiteral create_BoolLiteral(bool _a0) {
      return new Literal_BoolLiteral(_a0);
    }
    public static _ILiteral create_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) {
      return new Literal_IntLiteral(_a0, _a1);
    }
    public static _ILiteral create_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) {
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public static _ILiteral create_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Literal_StringLiteral(_a0);
    }
    public static _ILiteral create_CharLiteral(Dafny.Rune _a0) {
      return new Literal_CharLiteral(_a0);
    }
    public static _ILiteral create_Null(DAST._IType _a0) {
      return new Literal_Null(_a0);
    }
    public bool is_BoolLiteral { get { return this is Literal_BoolLiteral; } }
    public bool is_IntLiteral { get { return this is Literal_IntLiteral; } }
    public bool is_DecLiteral { get { return this is Literal_DecLiteral; } }
    public bool is_StringLiteral { get { return this is Literal_StringLiteral; } }
    public bool is_CharLiteral { get { return this is Literal_CharLiteral; } }
    public bool is_Null { get { return this is Literal_Null; } }
    public bool dtor_BoolLiteral_a0 {
      get {
        var d = this;
        return ((Literal_BoolLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_IntLiteral_a1 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a1;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a1;
      }
    }
    public DAST._IType dtor_DecLiteral_a2 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a2;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 {
      get {
        var d = this;
        return ((Literal_StringLiteral)d)._a0;
      }
    }
    public Dafny.Rune dtor_CharLiteral_a0 {
      get {
        var d = this;
        return ((Literal_CharLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_Null_a0 {
      get {
        var d = this;
        return ((Literal_Null)d)._a0;
      }
    }
    public abstract _ILiteral DowncastClone();
  }
  public class Literal_BoolLiteral : Literal {
    public readonly bool _a0;
    public Literal_BoolLiteral(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_BoolLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_BoolLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.BoolLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_IntLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly DAST._IType _a1;
    public Literal_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_IntLiteral(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_IntLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.IntLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Literal_DecLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly Dafny.ISequence<Dafny.Rune> _a1;
    public readonly DAST._IType _a2;
    public Literal_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
      this._a2 = _a2;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_DecLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1) && object.Equals(this._a2, oth._a2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a2));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.DecLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += this._a1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a2);
      s += ")";
      return s;
    }
  }
  public class Literal_StringLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Literal_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_StringLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_StringLiteral;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.StringLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Literal_CharLiteral : Literal {
    public readonly Dafny.Rune _a0;
    public Literal_CharLiteral(Dafny.Rune _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_CharLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_CharLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.CharLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_Null : Literal {
    public readonly DAST._IType _a0;
    public Literal_Null(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_Null(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_Null;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.Null";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
} // end of namespace DAST
namespace DAM.Utils {

  public partial class __default {
    public static DAM.Utils._IOption<__A> SeqGet<__A>(Dafny.ISequence<__A> s, BigInteger idx) {
      if ((idx) < (new BigInteger((s).Count))) {
        return DAM.Utils.Option<__A>.create_Some((s).Select(idx));
      } else {
        return DAM.Utils.Option<__A>.create_None();
      }
    }
    public static _System._ITuple2<BigInteger, Dafny.ISequence<__A>> Extend<__A>(Dafny.ISequence<__A> s, __A elt) {
      return _System.Tuple2<BigInteger, Dafny.ISequence<__A>>.create(new BigInteger((s).Count), Dafny.Sequence<__A>.Concat(s, Dafny.Sequence<__A>.FromElements(elt)));
    }
    public static DAM.Utils._IOption<__V> mapGet<__K, __V>(Dafny.IMap<__K, __V> m, __K k) {
      if ((m).Contains(k)) {
        return DAM.Utils.Option<__V>.create_Some(Dafny.Map<__K, __V>.Select(m, k));
      } else {
        return DAM.Utils.Option<__V>.create_None();
      }
    }
    public static DAM.Utils._IOption<Dafny.IMap<__K, __V>> mapOption<__K, __V>(Dafny.IMap<__K, DAM.Utils._IOption<__V>> m) {
      if (Dafny.Helpers.Id<Func<Dafny.IMap<__K, DAM.Utils._IOption<__V>>, bool>>((m) => Dafny.Helpers.Quantifier<__K>((m).Keys.Elements, true, (((_forall_var_0) => {
        __K k = (__K)_forall_var_0;
        return !((m).Contains(k)) || ((Dafny.Map<__K, DAM.Utils._IOption<__V>>.Select(m, k)).is_Some);
      }))))(m)) {
        return DAM.Utils.Option<Dafny.IMap<__K, __V>>.create_Some(Dafny.Helpers.Id<Func<Dafny.IMap<__K, DAM.Utils._IOption<__V>>, Dafny.IMap<__K, __V>>>((m) => ((System.Func<Dafny.IMap<__K, __V>>)(() => {
          var _coll0 = new System.Collections.Generic.List<Dafny.Pair<__K, __V>>();
          foreach (__K _compr_0 in (m).Keys.Elements) {
            __K k = (__K)_compr_0;
            if ((m).Contains(k)) {
              _coll0.Add(new Dafny.Pair<__K, __V>(k, (Dafny.Map<__K, DAM.Utils._IOption<__V>>.Select(m, k)).Extract()));
            }
          }
          return Dafny.Map<__K, __V>.FromCollection(_coll0);
        }))())(m));
      } else {
        return DAM.Utils.Option<Dafny.IMap<__K, __V>>.create_None();
      }
    }
  }

  public interface _IOption<A> {
    bool is_None { get; }
    bool is_Some { get; }
    A dtor_value { get; }
    _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0);
    bool IsFailure();
    DAM.Utils._IOption<__B> PropagateFailure<__B>();
    A Extract();
    A GetOr(A @default);
  }
  public abstract class Option<A> : _IOption<A> {
    public Option() {
    }
    public static DAM.Utils._IOption<A> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<DAM.Utils._IOption<A>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<DAM.Utils._IOption<A>>(DAM.Utils.Option<A>.Default());
    }
    public static _IOption<A> create_None() {
      return new Option_None<A>();
    }
    public static _IOption<A> create_Some(A @value) {
      return new Option_Some<A>(@value);
    }
    public bool is_None { get { return this is Option_None<A>; } }
    public bool is_Some { get { return this is Option_Some<A>; } }
    public A dtor_value {
      get {
        var d = this;
        return ((Option_Some<A>)d)._value;
      }
    }
    public abstract _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0);
    public bool IsFailure() {
      return (this).is_None;
    }
    public DAM.Utils._IOption<__B> PropagateFailure<__B>() {
      return DAM.Utils.Option<__B>.create_None();
    }
    public A Extract() {
      return (this).dtor_value;
    }
    public A GetOr(A @default) {
      DAM.Utils._IOption<A> _source0 = this;
      if (_source0.is_None) {
        return @default;
      } else {
        A __mcc_h0 = _source0.dtor_value;
        A v = __mcc_h0;
        return v;
      }
    }
  }
  public class Option_None<A> : Option<A> {
    public Option_None() : base() {
    }
    public override _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0) {
      if (this is _IOption<__A> dt) { return dt; }
      return new Option_None<__A>();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Utils.Option_None<A>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Utils.Option.None";
      return s;
    }
  }
  public class Option_Some<A> : Option<A> {
    public readonly A _value;
    public Option_Some(A @value) : base() {
      this._value = @value;
    }
    public override _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0) {
      if (this is _IOption<__A> dt) { return dt; }
      return new Option_Some<__A>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Utils.Option_Some<A>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Utils.Option.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
} // end of namespace DAM.Utils
namespace DAM.Syntax {

  public partial class __default {
    public static DAM.Syntax._IStmt Let(DAM.Syntax._IExpr lhs, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IPos ty, DAM.Syntax._IStmt rhs) {
      return DAM.Syntax.Stmt.create_Call(DAM.Syntax.Stmt.create_Func(var__, ty, rhs), lhs);
    }
    public static DAM.Syntax._INeg Command() {
      return DAM.Syntax.Neg.create_Value(DAM.Syntax.Pos.create_Unit());
    }
    public static DAM.Syntax._IStmt Then(DAM.Syntax._IStmt lhs, DAM.Syntax._IStmt rhs) {
      return DAM.Syntax.Stmt.create_Bind(lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"), rhs);
    }
    public static DAM.Syntax._IStmt Skip() {
      return DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Unit());
    }
    public static DAM.Syntax._IStmt While(DAM.Syntax._IStmt guard, DAM.Syntax._IStmt body, DAM.Syntax._IStmt next) {
      return DAM.Syntax.Stmt.create_Rec(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while"), DAM.Syntax.__default.Command(), DAM.Syntax.Stmt.create_Bind(guard, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), DAM.Syntax.Stmt.create_Ite(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if")), DAM.Syntax.__default.Then(body, DAM.Syntax.Stmt.create_Force(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while")))), next)));
    }
  }

  public interface _IPos {
    bool is_Unit { get; }
    bool is_Bool { get; }
    bool is_Int { get; }
    bool is_Thunk { get; }
    bool is_Ref { get; }
    bool is_Stack { get; }
    DAM.Syntax._INeg dtor_neg { get; }
    DAM.Syntax._IPos dtor_ref { get; }
    DAM.Syntax._INeg dtor_start { get; }
    _IPos DowncastClone();
  }
  public abstract class Pos : _IPos {
    public Pos() {
    }
    private static readonly DAM.Syntax._IPos theDefault = create_Unit();
    public static DAM.Syntax._IPos Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Syntax._IPos> _TYPE = new Dafny.TypeDescriptor<DAM.Syntax._IPos>(DAM.Syntax.Pos.Default());
    public static Dafny.TypeDescriptor<DAM.Syntax._IPos> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPos create_Unit() {
      return new Pos_Unit();
    }
    public static _IPos create_Bool() {
      return new Pos_Bool();
    }
    public static _IPos create_Int() {
      return new Pos_Int();
    }
    public static _IPos create_Thunk(DAM.Syntax._INeg neg) {
      return new Pos_Thunk(neg);
    }
    public static _IPos create_Ref(DAM.Syntax._IPos @ref) {
      return new Pos_Ref(@ref);
    }
    public static _IPos create_Stack(DAM.Syntax._INeg start) {
      return new Pos_Stack(start);
    }
    public bool is_Unit { get { return this is Pos_Unit; } }
    public bool is_Bool { get { return this is Pos_Bool; } }
    public bool is_Int { get { return this is Pos_Int; } }
    public bool is_Thunk { get { return this is Pos_Thunk; } }
    public bool is_Ref { get { return this is Pos_Ref; } }
    public bool is_Stack { get { return this is Pos_Stack; } }
    public DAM.Syntax._INeg dtor_neg {
      get {
        var d = this;
        return ((Pos_Thunk)d)._neg;
      }
    }
    public DAM.Syntax._IPos dtor_ref {
      get {
        var d = this;
        return ((Pos_Ref)d)._ref;
      }
    }
    public DAM.Syntax._INeg dtor_start {
      get {
        var d = this;
        return ((Pos_Stack)d)._start;
      }
    }
    public abstract _IPos DowncastClone();
  }
  public class Pos_Unit : Pos {
    public Pos_Unit() : base() {
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Unit();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Unit;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Unit";
      return s;
    }
  }
  public class Pos_Bool : Pos {
    public Pos_Bool() : base() {
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Bool";
      return s;
    }
  }
  public class Pos_Int : Pos {
    public Pos_Int() : base() {
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Int";
      return s;
    }
  }
  public class Pos_Thunk : Pos {
    public readonly DAM.Syntax._INeg _neg;
    public Pos_Thunk(DAM.Syntax._INeg neg) : base() {
      this._neg = neg;
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Thunk(_neg);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Thunk;
      return oth != null && object.Equals(this._neg, oth._neg);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._neg));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Thunk";
      s += "(";
      s += Dafny.Helpers.ToString(this._neg);
      s += ")";
      return s;
    }
  }
  public class Pos_Ref : Pos {
    public readonly DAM.Syntax._IPos _ref;
    public Pos_Ref(DAM.Syntax._IPos @ref) : base() {
      this._ref = @ref;
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Ref(_ref);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Ref;
      return oth != null && object.Equals(this._ref, oth._ref);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ref));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Ref";
      s += "(";
      s += Dafny.Helpers.ToString(this._ref);
      s += ")";
      return s;
    }
  }
  public class Pos_Stack : Pos {
    public readonly DAM.Syntax._INeg _start;
    public Pos_Stack(DAM.Syntax._INeg start) : base() {
      this._start = start;
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Stack(_start);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Stack;
      return oth != null && object.Equals(this._start, oth._start);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._start));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Stack";
      s += "(";
      s += Dafny.Helpers.ToString(this._start);
      s += ")";
      return s;
    }
  }

  public interface _INeg {
    bool is_Value { get; }
    bool is_Function { get; }
    bool is_Record { get; }
    DAM.Syntax._IPos dtor_pos { get; }
    DAM.Syntax._IPos dtor_dom { get; }
    DAM.Syntax._INeg dtor_cod { get; }
    Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> dtor_fields { get; }
    _INeg DowncastClone();
  }
  public abstract class Neg : _INeg {
    public Neg() {
    }
    private static readonly DAM.Syntax._INeg theDefault = create_Record(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>.Empty);
    public static DAM.Syntax._INeg Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Syntax._INeg> _TYPE = new Dafny.TypeDescriptor<DAM.Syntax._INeg>(DAM.Syntax.Neg.Default());
    public static Dafny.TypeDescriptor<DAM.Syntax._INeg> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INeg create_Value(DAM.Syntax._IPos pos) {
      return new Neg_Value(pos);
    }
    public static _INeg create_Function(DAM.Syntax._IPos dom, DAM.Syntax._INeg cod) {
      return new Neg_Function(dom, cod);
    }
    public static _INeg create_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> fields) {
      return new Neg_Record(fields);
    }
    public bool is_Value { get { return this is Neg_Value; } }
    public bool is_Function { get { return this is Neg_Function; } }
    public bool is_Record { get { return this is Neg_Record; } }
    public DAM.Syntax._IPos dtor_pos {
      get {
        var d = this;
        return ((Neg_Value)d)._pos;
      }
    }
    public DAM.Syntax._IPos dtor_dom {
      get {
        var d = this;
        return ((Neg_Function)d)._dom;
      }
    }
    public DAM.Syntax._INeg dtor_cod {
      get {
        var d = this;
        return ((Neg_Function)d)._cod;
      }
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> dtor_fields {
      get {
        var d = this;
        return ((Neg_Record)d)._fields;
      }
    }
    public abstract _INeg DowncastClone();
  }
  public class Neg_Value : Neg {
    public readonly DAM.Syntax._IPos _pos;
    public Neg_Value(DAM.Syntax._IPos pos) : base() {
      this._pos = pos;
    }
    public override _INeg DowncastClone() {
      if (this is _INeg dt) { return dt; }
      return new Neg_Value(_pos);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Neg_Value;
      return oth != null && object.Equals(this._pos, oth._pos);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pos));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Neg.Value";
      s += "(";
      s += Dafny.Helpers.ToString(this._pos);
      s += ")";
      return s;
    }
  }
  public class Neg_Function : Neg {
    public readonly DAM.Syntax._IPos _dom;
    public readonly DAM.Syntax._INeg _cod;
    public Neg_Function(DAM.Syntax._IPos dom, DAM.Syntax._INeg cod) : base() {
      this._dom = dom;
      this._cod = cod;
    }
    public override _INeg DowncastClone() {
      if (this is _INeg dt) { return dt; }
      return new Neg_Function(_dom, _cod);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Neg_Function;
      return oth != null && object.Equals(this._dom, oth._dom) && object.Equals(this._cod, oth._cod);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dom));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cod));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Neg.Function";
      s += "(";
      s += Dafny.Helpers.ToString(this._dom);
      s += ", ";
      s += Dafny.Helpers.ToString(this._cod);
      s += ")";
      return s;
    }
  }
  public class Neg_Record : Neg {
    public readonly Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _fields;
    public Neg_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> fields) : base() {
      this._fields = fields;
    }
    public override _INeg DowncastClone() {
      if (this is _INeg dt) { return dt; }
      return new Neg_Record(_fields);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Neg_Record;
      return oth != null && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Neg.Record";
      s += "(";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
  }

  public interface _IExpr {
    bool is_Var { get; }
    bool is_Unit { get; }
    bool is_Bool { get; }
    bool is_Int { get; }
    bool is_LT { get; }
    bool is_Plus { get; }
    bool is_Thunk { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Var_a0 { get; }
    bool dtor_Bool_a0 { get; }
    BigInteger dtor_Int_a0 { get; }
    DAM.Syntax._IExpr dtor_LT_a0 { get; }
    DAM.Syntax._IExpr dtor_LT_a1 { get; }
    DAM.Syntax._IExpr dtor_Plus_a0 { get; }
    DAM.Syntax._IExpr dtor_Plus_a1 { get; }
    DAM.Syntax._IStmt dtor_Thunk_a0 { get; }
    _IExpr DowncastClone();
  }
  public abstract class Expr : _IExpr {
    public Expr() {
    }
    private static readonly DAM.Syntax._IExpr theDefault = create_Var(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAM.Syntax._IExpr Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Syntax._IExpr> _TYPE = new Dafny.TypeDescriptor<DAM.Syntax._IExpr>(DAM.Syntax.Expr.Default());
    public static Dafny.TypeDescriptor<DAM.Syntax._IExpr> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpr create_Var(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expr_Var(_a0);
    }
    public static _IExpr create_Unit() {
      return new Expr_Unit();
    }
    public static _IExpr create_Bool(bool _a0) {
      return new Expr_Bool(_a0);
    }
    public static _IExpr create_Int(BigInteger _a0) {
      return new Expr_Int(_a0);
    }
    public static _IExpr create_LT(DAM.Syntax._IExpr _a0, DAM.Syntax._IExpr _a1) {
      return new Expr_LT(_a0, _a1);
    }
    public static _IExpr create_Plus(DAM.Syntax._IExpr _a0, DAM.Syntax._IExpr _a1) {
      return new Expr_Plus(_a0, _a1);
    }
    public static _IExpr create_Thunk(DAM.Syntax._IStmt _a0) {
      return new Expr_Thunk(_a0);
    }
    public bool is_Var { get { return this is Expr_Var; } }
    public bool is_Unit { get { return this is Expr_Unit; } }
    public bool is_Bool { get { return this is Expr_Bool; } }
    public bool is_Int { get { return this is Expr_Int; } }
    public bool is_LT { get { return this is Expr_LT; } }
    public bool is_Plus { get { return this is Expr_Plus; } }
    public bool is_Thunk { get { return this is Expr_Thunk; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Var_a0 {
      get {
        var d = this;
        return ((Expr_Var)d)._a0;
      }
    }
    public bool dtor_Bool_a0 {
      get {
        var d = this;
        return ((Expr_Bool)d)._a0;
      }
    }
    public BigInteger dtor_Int_a0 {
      get {
        var d = this;
        return ((Expr_Int)d)._a0;
      }
    }
    public DAM.Syntax._IExpr dtor_LT_a0 {
      get {
        var d = this;
        return ((Expr_LT)d)._a0;
      }
    }
    public DAM.Syntax._IExpr dtor_LT_a1 {
      get {
        var d = this;
        return ((Expr_LT)d)._a1;
      }
    }
    public DAM.Syntax._IExpr dtor_Plus_a0 {
      get {
        var d = this;
        return ((Expr_Plus)d)._a0;
      }
    }
    public DAM.Syntax._IExpr dtor_Plus_a1 {
      get {
        var d = this;
        return ((Expr_Plus)d)._a1;
      }
    }
    public DAM.Syntax._IStmt dtor_Thunk_a0 {
      get {
        var d = this;
        return ((Expr_Thunk)d)._a0;
      }
    }
    public abstract _IExpr DowncastClone();
  }
  public class Expr_Var : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expr_Var(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Var(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Var;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Var";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_Unit : Expr {
    public Expr_Unit() : base() {
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Unit();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Unit;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Unit";
      return s;
    }
  }
  public class Expr_Bool : Expr {
    public readonly bool _a0;
    public Expr_Bool(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Bool(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Bool;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Bool";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expr_Int : Expr {
    public readonly BigInteger _a0;
    public Expr_Int(BigInteger _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Int(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Int;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Int";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expr_LT : Expr {
    public readonly DAM.Syntax._IExpr _a0;
    public readonly DAM.Syntax._IExpr _a1;
    public Expr_LT(DAM.Syntax._IExpr _a0, DAM.Syntax._IExpr _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_LT(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_LT;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.LT";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Expr_Plus : Expr {
    public readonly DAM.Syntax._IExpr _a0;
    public readonly DAM.Syntax._IExpr _a1;
    public Expr_Plus(DAM.Syntax._IExpr _a0, DAM.Syntax._IExpr _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Plus(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Plus;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Plus";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Expr_Thunk : Expr {
    public readonly DAM.Syntax._IStmt _a0;
    public Expr_Thunk(DAM.Syntax._IStmt _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Thunk(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Thunk;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Thunk";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IStmt {
    bool is_Pure { get; }
    bool is_Bind { get; }
    bool is_Ite { get; }
    bool is_Func { get; }
    bool is_Call { get; }
    bool is_Record { get; }
    bool is_Select { get; }
    bool is_Force { get; }
    bool is_New { get; }
    bool is_Read { get; }
    bool is_Write { get; }
    bool is_Print { get; }
    bool is_Rec { get; }
    bool is_LetCS { get; }
    bool is_Throw { get; }
    DAM.Syntax._IExpr dtor_Pure_a0 { get; }
    DAM.Syntax._IStmt dtor_lhs { get; }
    Dafny.ISequence<Dafny.Rune> dtor_var__ { get; }
    DAM.Syntax._IStmt dtor_rhs { get; }
    DAM.Syntax._IExpr dtor_guard { get; }
    DAM.Syntax._IStmt dtor_then__ { get; }
    DAM.Syntax._IStmt dtor_else__ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_bound { get; }
    DAM.Syntax._IPos dtor_dom { get; }
    DAM.Syntax._IStmt dtor_body { get; }
    DAM.Syntax._IStmt dtor_func { get; }
    DAM.Syntax._IExpr dtor_arg { get; }
    Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> dtor_fields { get; }
    DAM.Syntax._IStmt dtor_record { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    DAM.Syntax._IExpr dtor_Force_a0 { get; }
    DAM.Syntax._IExpr dtor_init { get; }
    DAM.Syntax._IStmt dtor_next { get; }
    DAM.Syntax._IExpr dtor_ref { get; }
    DAM.Syntax._IExpr dtor_lvalue { get; }
    DAM.Syntax._IExpr dtor_rvalue { get; }
    DAM.Syntax._IExpr dtor_Print_a0 { get; }
    DAM.Syntax._INeg dtor_fix { get; }
    DAM.Syntax._INeg dtor_start { get; }
    DAM.Syntax._IExpr dtor_stack { get; }
    DAM.Syntax._INeg dtor_oldstart { get; }
    _IStmt DowncastClone();
  }
  public abstract class Stmt : _IStmt {
    public Stmt() {
    }
    private static readonly DAM.Syntax._IStmt theDefault = create_Record(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Empty);
    public static DAM.Syntax._IStmt Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Syntax._IStmt> _TYPE = new Dafny.TypeDescriptor<DAM.Syntax._IStmt>(DAM.Syntax.Stmt.Default());
    public static Dafny.TypeDescriptor<DAM.Syntax._IStmt> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStmt create_Pure(DAM.Syntax._IExpr _a0) {
      return new Stmt_Pure(_a0);
    }
    public static _IStmt create_Bind(DAM.Syntax._IStmt lhs, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt rhs) {
      return new Stmt_Bind(lhs, var__, rhs);
    }
    public static _IStmt create_Ite(DAM.Syntax._IExpr guard, DAM.Syntax._IStmt then__, DAM.Syntax._IStmt else__) {
      return new Stmt_Ite(guard, then__, else__);
    }
    public static _IStmt create_Func(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._IPos dom, DAM.Syntax._IStmt body) {
      return new Stmt_Func(bound, dom, body);
    }
    public static _IStmt create_Call(DAM.Syntax._IStmt func, DAM.Syntax._IExpr arg) {
      return new Stmt_Call(func, arg);
    }
    public static _IStmt create_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> fields) {
      return new Stmt_Record(fields);
    }
    public static _IStmt create_Select(DAM.Syntax._IStmt record, Dafny.ISequence<Dafny.Rune> field) {
      return new Stmt_Select(record, field);
    }
    public static _IStmt create_Force(DAM.Syntax._IExpr _a0) {
      return new Stmt_Force(_a0);
    }
    public static _IStmt create_New(DAM.Syntax._IExpr init, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt next) {
      return new Stmt_New(init, var__, next);
    }
    public static _IStmt create_Read(DAM.Syntax._IExpr @ref, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt next) {
      return new Stmt_Read(@ref, var__, next);
    }
    public static _IStmt create_Write(DAM.Syntax._IExpr lvalue, DAM.Syntax._IExpr rvalue, DAM.Syntax._IStmt next) {
      return new Stmt_Write(lvalue, rvalue, next);
    }
    public static _IStmt create_Print(DAM.Syntax._IExpr _a0, DAM.Syntax._IStmt next) {
      return new Stmt_Print(_a0, next);
    }
    public static _IStmt create_Rec(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._INeg fix, DAM.Syntax._IStmt body) {
      return new Stmt_Rec(bound, fix, body);
    }
    public static _IStmt create_LetCS(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._INeg start, DAM.Syntax._IStmt body) {
      return new Stmt_LetCS(bound, start, body);
    }
    public static _IStmt create_Throw(DAM.Syntax._IExpr stack, DAM.Syntax._INeg oldstart, DAM.Syntax._IStmt next) {
      return new Stmt_Throw(stack, oldstart, next);
    }
    public bool is_Pure { get { return this is Stmt_Pure; } }
    public bool is_Bind { get { return this is Stmt_Bind; } }
    public bool is_Ite { get { return this is Stmt_Ite; } }
    public bool is_Func { get { return this is Stmt_Func; } }
    public bool is_Call { get { return this is Stmt_Call; } }
    public bool is_Record { get { return this is Stmt_Record; } }
    public bool is_Select { get { return this is Stmt_Select; } }
    public bool is_Force { get { return this is Stmt_Force; } }
    public bool is_New { get { return this is Stmt_New; } }
    public bool is_Read { get { return this is Stmt_Read; } }
    public bool is_Write { get { return this is Stmt_Write; } }
    public bool is_Print { get { return this is Stmt_Print; } }
    public bool is_Rec { get { return this is Stmt_Rec; } }
    public bool is_LetCS { get { return this is Stmt_LetCS; } }
    public bool is_Throw { get { return this is Stmt_Throw; } }
    public DAM.Syntax._IExpr dtor_Pure_a0 {
      get {
        var d = this;
        return ((Stmt_Pure)d)._a0;
      }
    }
    public DAM.Syntax._IStmt dtor_lhs {
      get {
        var d = this;
        return ((Stmt_Bind)d)._lhs;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_var__ {
      get {
        var d = this;
        if (d is Stmt_Bind) { return ((Stmt_Bind)d)._var__; }
        if (d is Stmt_New) { return ((Stmt_New)d)._var__; }
        return ((Stmt_Read)d)._var__;
      }
    }
    public DAM.Syntax._IStmt dtor_rhs {
      get {
        var d = this;
        return ((Stmt_Bind)d)._rhs;
      }
    }
    public DAM.Syntax._IExpr dtor_guard {
      get {
        var d = this;
        return ((Stmt_Ite)d)._guard;
      }
    }
    public DAM.Syntax._IStmt dtor_then__ {
      get {
        var d = this;
        return ((Stmt_Ite)d)._then__;
      }
    }
    public DAM.Syntax._IStmt dtor_else__ {
      get {
        var d = this;
        return ((Stmt_Ite)d)._else__;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_bound {
      get {
        var d = this;
        if (d is Stmt_Func) { return ((Stmt_Func)d)._bound; }
        if (d is Stmt_Rec) { return ((Stmt_Rec)d)._bound; }
        return ((Stmt_LetCS)d)._bound;
      }
    }
    public DAM.Syntax._IPos dtor_dom {
      get {
        var d = this;
        return ((Stmt_Func)d)._dom;
      }
    }
    public DAM.Syntax._IStmt dtor_body {
      get {
        var d = this;
        if (d is Stmt_Func) { return ((Stmt_Func)d)._body; }
        if (d is Stmt_Rec) { return ((Stmt_Rec)d)._body; }
        return ((Stmt_LetCS)d)._body;
      }
    }
    public DAM.Syntax._IStmt dtor_func {
      get {
        var d = this;
        return ((Stmt_Call)d)._func;
      }
    }
    public DAM.Syntax._IExpr dtor_arg {
      get {
        var d = this;
        return ((Stmt_Call)d)._arg;
      }
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> dtor_fields {
      get {
        var d = this;
        return ((Stmt_Record)d)._fields;
      }
    }
    public DAM.Syntax._IStmt dtor_record {
      get {
        var d = this;
        return ((Stmt_Select)d)._record;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((Stmt_Select)d)._field;
      }
    }
    public DAM.Syntax._IExpr dtor_Force_a0 {
      get {
        var d = this;
        return ((Stmt_Force)d)._a0;
      }
    }
    public DAM.Syntax._IExpr dtor_init {
      get {
        var d = this;
        return ((Stmt_New)d)._init;
      }
    }
    public DAM.Syntax._IStmt dtor_next {
      get {
        var d = this;
        if (d is Stmt_New) { return ((Stmt_New)d)._next; }
        if (d is Stmt_Read) { return ((Stmt_Read)d)._next; }
        if (d is Stmt_Write) { return ((Stmt_Write)d)._next; }
        if (d is Stmt_Print) { return ((Stmt_Print)d)._next; }
        return ((Stmt_Throw)d)._next;
      }
    }
    public DAM.Syntax._IExpr dtor_ref {
      get {
        var d = this;
        return ((Stmt_Read)d)._ref;
      }
    }
    public DAM.Syntax._IExpr dtor_lvalue {
      get {
        var d = this;
        return ((Stmt_Write)d)._lvalue;
      }
    }
    public DAM.Syntax._IExpr dtor_rvalue {
      get {
        var d = this;
        return ((Stmt_Write)d)._rvalue;
      }
    }
    public DAM.Syntax._IExpr dtor_Print_a0 {
      get {
        var d = this;
        return ((Stmt_Print)d)._a0;
      }
    }
    public DAM.Syntax._INeg dtor_fix {
      get {
        var d = this;
        return ((Stmt_Rec)d)._fix;
      }
    }
    public DAM.Syntax._INeg dtor_start {
      get {
        var d = this;
        return ((Stmt_LetCS)d)._start;
      }
    }
    public DAM.Syntax._IExpr dtor_stack {
      get {
        var d = this;
        return ((Stmt_Throw)d)._stack;
      }
    }
    public DAM.Syntax._INeg dtor_oldstart {
      get {
        var d = this;
        return ((Stmt_Throw)d)._oldstart;
      }
    }
    public abstract _IStmt DowncastClone();
  }
  public class Stmt_Pure : Stmt {
    public readonly DAM.Syntax._IExpr _a0;
    public Stmt_Pure(DAM.Syntax._IExpr _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Pure(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Pure;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Pure";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Stmt_Bind : Stmt {
    public readonly DAM.Syntax._IStmt _lhs;
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly DAM.Syntax._IStmt _rhs;
    public Stmt_Bind(DAM.Syntax._IStmt lhs, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt rhs) : base() {
      this._lhs = lhs;
      this._var__ = var__;
      this._rhs = rhs;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Bind(_lhs, _var__, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Bind;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._var__, oth._var__) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Bind";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Stmt_Ite : Stmt {
    public readonly DAM.Syntax._IExpr _guard;
    public readonly DAM.Syntax._IStmt _then__;
    public readonly DAM.Syntax._IStmt _else__;
    public Stmt_Ite(DAM.Syntax._IExpr guard, DAM.Syntax._IStmt then__, DAM.Syntax._IStmt else__) : base() {
      this._guard = guard;
      this._then__ = then__;
      this._else__ = else__;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Ite(_guard, _then__, _else__);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Ite;
      return oth != null && object.Equals(this._guard, oth._guard) && object.Equals(this._then__, oth._then__) && object.Equals(this._else__, oth._else__);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._guard));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._then__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._else__));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._guard);
      s += ", ";
      s += Dafny.Helpers.ToString(this._then__);
      s += ", ";
      s += Dafny.Helpers.ToString(this._else__);
      s += ")";
      return s;
    }
  }
  public class Stmt_Func : Stmt {
    public readonly Dafny.ISequence<Dafny.Rune> _bound;
    public readonly DAM.Syntax._IPos _dom;
    public readonly DAM.Syntax._IStmt _body;
    public Stmt_Func(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._IPos dom, DAM.Syntax._IStmt body) : base() {
      this._bound = bound;
      this._dom = dom;
      this._body = body;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Func(_bound, _dom, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Func;
      return oth != null && object.Equals(this._bound, oth._bound) && object.Equals(this._dom, oth._dom) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._bound));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dom));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Func";
      s += "(";
      s += this._bound.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dom);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Stmt_Call : Stmt {
    public readonly DAM.Syntax._IStmt _func;
    public readonly DAM.Syntax._IExpr _arg;
    public Stmt_Call(DAM.Syntax._IStmt func, DAM.Syntax._IExpr arg) : base() {
      this._func = func;
      this._arg = arg;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Call(_func, _arg);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Call;
      return oth != null && object.Equals(this._func, oth._func) && object.Equals(this._arg, oth._arg);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._func));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arg));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._func);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arg);
      s += ")";
      return s;
    }
  }
  public class Stmt_Record : Stmt {
    public readonly Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _fields;
    public Stmt_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> fields) : base() {
      this._fields = fields;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Record(_fields);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Record;
      return oth != null && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Record";
      s += "(";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
  }
  public class Stmt_Select : Stmt {
    public readonly DAM.Syntax._IStmt _record;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public Stmt_Select(DAM.Syntax._IStmt record, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._record = record;
      this._field = field;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Select(_record, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Select;
      return oth != null && object.Equals(this._record, oth._record) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._record));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._record);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Stmt_Force : Stmt {
    public readonly DAM.Syntax._IExpr _a0;
    public Stmt_Force(DAM.Syntax._IExpr _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Force(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Force;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Force";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Stmt_New : Stmt {
    public readonly DAM.Syntax._IExpr _init;
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_New(DAM.Syntax._IExpr init, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt next) : base() {
      this._init = init;
      this._var__ = var__;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_New(_init, _var__, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_New;
      return oth != null && object.Equals(this._init, oth._init) && object.Equals(this._var__, oth._var__) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._init));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._init);
      s += ", ";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Stmt_Read : Stmt {
    public readonly DAM.Syntax._IExpr _ref;
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_Read(DAM.Syntax._IExpr @ref, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt next) : base() {
      this._ref = @ref;
      this._var__ = var__;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Read(_ref, _var__, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Read;
      return oth != null && object.Equals(this._ref, oth._ref) && object.Equals(this._var__, oth._var__) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ref));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Read";
      s += "(";
      s += Dafny.Helpers.ToString(this._ref);
      s += ", ";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Stmt_Write : Stmt {
    public readonly DAM.Syntax._IExpr _lvalue;
    public readonly DAM.Syntax._IExpr _rvalue;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_Write(DAM.Syntax._IExpr lvalue, DAM.Syntax._IExpr rvalue, DAM.Syntax._IStmt next) : base() {
      this._lvalue = lvalue;
      this._rvalue = rvalue;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Write(_lvalue, _rvalue, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Write;
      return oth != null && object.Equals(this._lvalue, oth._lvalue) && object.Equals(this._rvalue, oth._rvalue) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lvalue));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rvalue));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Write";
      s += "(";
      s += Dafny.Helpers.ToString(this._lvalue);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rvalue);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Stmt_Print : Stmt {
    public readonly DAM.Syntax._IExpr _a0;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_Print(DAM.Syntax._IExpr _a0, DAM.Syntax._IStmt next) : base() {
      this._a0 = _a0;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Print(_a0, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Print;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Stmt_Rec : Stmt {
    public readonly Dafny.ISequence<Dafny.Rune> _bound;
    public readonly DAM.Syntax._INeg _fix;
    public readonly DAM.Syntax._IStmt _body;
    public Stmt_Rec(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._INeg fix, DAM.Syntax._IStmt body) : base() {
      this._bound = bound;
      this._fix = fix;
      this._body = body;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Rec(_bound, _fix, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Rec;
      return oth != null && object.Equals(this._bound, oth._bound) && object.Equals(this._fix, oth._fix) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._bound));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fix));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Rec";
      s += "(";
      s += this._bound.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fix);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Stmt_LetCS : Stmt {
    public readonly Dafny.ISequence<Dafny.Rune> _bound;
    public readonly DAM.Syntax._INeg _start;
    public readonly DAM.Syntax._IStmt _body;
    public Stmt_LetCS(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._INeg start, DAM.Syntax._IStmt body) : base() {
      this._bound = bound;
      this._start = start;
      this._body = body;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_LetCS(_bound, _start, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_LetCS;
      return oth != null && object.Equals(this._bound, oth._bound) && object.Equals(this._start, oth._start) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._bound));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._start));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.LetCS";
      s += "(";
      s += this._bound.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._start);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Stmt_Throw : Stmt {
    public readonly DAM.Syntax._IExpr _stack;
    public readonly DAM.Syntax._INeg _oldstart;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_Throw(DAM.Syntax._IExpr stack, DAM.Syntax._INeg oldstart, DAM.Syntax._IStmt next) : base() {
      this._stack = stack;
      this._oldstart = oldstart;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Throw(_stack, _oldstart, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Throw;
      return oth != null && object.Equals(this._stack, oth._stack) && object.Equals(this._oldstart, oth._oldstart) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._stack));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._oldstart));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Throw";
      s += "(";
      s += Dafny.Helpers.ToString(this._stack);
      s += ", ";
      s += Dafny.Helpers.ToString(this._oldstart);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
} // end of namespace DAM.Syntax
namespace DAM.Machine {

  public partial class __default {
    public static DAM.Machine._IOutput Next(_System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> next) {
      return DAM.Machine.Output.create_Raise(DAM.Machine.Event.create_Silent(), next);
    }
  }

  public interface _IVal {
    bool is_Unit { get; }
    bool is_Bool { get; }
    bool is_Int { get; }
    bool is_Thunk { get; }
    bool is_Ref { get; }
    bool is_Stack { get; }
    bool dtor_answer { get; }
    BigInteger dtor_number { get; }
    _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> dtor_closure { get; }
    BigInteger dtor_addr { get; }
    DAM.Syntax._INeg dtor_start { get; }
    DAM.Machine._IStack dtor_stack { get; }
    _IVal DowncastClone();
  }
  public abstract class Val : _IVal {
    public Val() {
    }
    private static readonly DAM.Machine._IVal theDefault = create_Unit();
    public static DAM.Machine._IVal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Machine._IVal> _TYPE = new Dafny.TypeDescriptor<DAM.Machine._IVal>(DAM.Machine.Val.Default());
    public static Dafny.TypeDescriptor<DAM.Machine._IVal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IVal create_Unit() {
      return new Val_Unit();
    }
    public static _IVal create_Bool(bool answer) {
      return new Val_Bool(answer);
    }
    public static _IVal create_Int(BigInteger number) {
      return new Val_Int(number);
    }
    public static _IVal create_Thunk(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> closure) {
      return new Val_Thunk(closure);
    }
    public static _IVal create_Ref(BigInteger addr) {
      return new Val_Ref(addr);
    }
    public static _IVal create_Stack(DAM.Syntax._INeg start, DAM.Machine._IStack stack) {
      return new Val_Stack(start, stack);
    }
    public bool is_Unit { get { return this is Val_Unit; } }
    public bool is_Bool { get { return this is Val_Bool; } }
    public bool is_Int { get { return this is Val_Int; } }
    public bool is_Thunk { get { return this is Val_Thunk; } }
    public bool is_Ref { get { return this is Val_Ref; } }
    public bool is_Stack { get { return this is Val_Stack; } }
    public bool dtor_answer {
      get {
        var d = this;
        return ((Val_Bool)d)._answer;
      }
    }
    public BigInteger dtor_number {
      get {
        var d = this;
        return ((Val_Int)d)._number;
      }
    }
    public _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> dtor_closure {
      get {
        var d = this;
        return ((Val_Thunk)d)._closure;
      }
    }
    public BigInteger dtor_addr {
      get {
        var d = this;
        return ((Val_Ref)d)._addr;
      }
    }
    public DAM.Syntax._INeg dtor_start {
      get {
        var d = this;
        return ((Val_Stack)d)._start;
      }
    }
    public DAM.Machine._IStack dtor_stack {
      get {
        var d = this;
        return ((Val_Stack)d)._stack;
      }
    }
    public abstract _IVal DowncastClone();
  }
  public class Val_Unit : Val {
    public Val_Unit() : base() {
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Unit();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Unit;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Unit";
      return s;
    }
  }
  public class Val_Bool : Val {
    public readonly bool _answer;
    public Val_Bool(bool answer) : base() {
      this._answer = answer;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Bool(_answer);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Bool;
      return oth != null && this._answer == oth._answer;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._answer));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Bool";
      s += "(";
      s += Dafny.Helpers.ToString(this._answer);
      s += ")";
      return s;
    }
  }
  public class Val_Int : Val {
    public readonly BigInteger _number;
    public Val_Int(BigInteger number) : base() {
      this._number = number;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Int(_number);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Int;
      return oth != null && this._number == oth._number;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._number));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Int";
      s += "(";
      s += Dafny.Helpers.ToString(this._number);
      s += ")";
      return s;
    }
  }
  public class Val_Thunk : Val {
    public readonly _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _closure;
    public Val_Thunk(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> closure) : base() {
      this._closure = closure;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Thunk(_closure);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Thunk;
      return oth != null && object.Equals(this._closure, oth._closure);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._closure));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Thunk";
      s += "(";
      s += Dafny.Helpers.ToString(this._closure);
      s += ")";
      return s;
    }
  }
  public class Val_Ref : Val {
    public readonly BigInteger _addr;
    public Val_Ref(BigInteger addr) : base() {
      this._addr = addr;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Ref(_addr);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Ref;
      return oth != null && this._addr == oth._addr;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._addr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Ref";
      s += "(";
      s += Dafny.Helpers.ToString(this._addr);
      s += ")";
      return s;
    }
  }
  public class Val_Stack : Val {
    public readonly DAM.Syntax._INeg _start;
    public readonly DAM.Machine._IStack _stack;
    public Val_Stack(DAM.Syntax._INeg start, DAM.Machine._IStack stack) : base() {
      this._start = start;
      this._stack = stack;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Stack(_start, _stack);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Stack;
      return oth != null && object.Equals(this._start, oth._start) && object.Equals(this._stack, oth._stack);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._start));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._stack));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Stack";
      s += "(";
      s += Dafny.Helpers.ToString(this._start);
      s += ", ";
      s += Dafny.Helpers.ToString(this._stack);
      s += ")";
      return s;
    }
  }

  public interface _IStack {
    bool is_Empty { get; }
    bool is_Push { get; }
    DAM.Machine._IFrame dtor_top { get; }
    DAM.Machine._IStack dtor_rest { get; }
    _IStack DowncastClone();
    DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> Pop();
  }
  public abstract class Stack : _IStack {
    public Stack() {
    }
    private static readonly DAM.Machine._IStack theDefault = create_Empty();
    public static DAM.Machine._IStack Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Machine._IStack> _TYPE = new Dafny.TypeDescriptor<DAM.Machine._IStack>(DAM.Machine.Stack.Default());
    public static Dafny.TypeDescriptor<DAM.Machine._IStack> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStack create_Empty() {
      return new Stack_Empty();
    }
    public static _IStack create_Push(DAM.Machine._IFrame top, DAM.Machine._IStack rest) {
      return new Stack_Push(top, rest);
    }
    public bool is_Empty { get { return this is Stack_Empty; } }
    public bool is_Push { get { return this is Stack_Push; } }
    public DAM.Machine._IFrame dtor_top {
      get {
        var d = this;
        return ((Stack_Push)d)._top;
      }
    }
    public DAM.Machine._IStack dtor_rest {
      get {
        var d = this;
        return ((Stack_Push)d)._rest;
      }
    }
    public abstract _IStack DowncastClone();
    public DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> Pop() {
      DAM.Machine._IStack _source1 = this;
      if (_source1.is_Empty) {
        return DAM.Utils.Option<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>>.create_None();
      } else {
        DAM.Machine._IFrame _10___mcc_h0 = _source1.dtor_top;
        DAM.Machine._IStack _11___mcc_h1 = _source1.dtor_rest;
        DAM.Machine._IStack _12_r = _11___mcc_h1;
        DAM.Machine._IFrame _13_t = _10___mcc_h0;
        return DAM.Utils.Option<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>>.create_Some(_System.Tuple2<DAM.Machine._IFrame, DAM.Machine._IStack>.create(_13_t, _12_r));
      }
    }
  }
  public class Stack_Empty : Stack {
    public Stack_Empty() : base() {
    }
    public override _IStack DowncastClone() {
      if (this is _IStack dt) { return dt; }
      return new Stack_Empty();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Stack_Empty;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Stack.Empty";
      return s;
    }
  }
  public class Stack_Push : Stack {
    public readonly DAM.Machine._IFrame _top;
    public readonly DAM.Machine._IStack _rest;
    public Stack_Push(DAM.Machine._IFrame top, DAM.Machine._IStack rest) : base() {
      this._top = top;
      this._rest = rest;
    }
    public override _IStack DowncastClone() {
      if (this is _IStack dt) { return dt; }
      return new Stack_Push(_top, _rest);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Stack_Push;
      return oth != null && object.Equals(this._top, oth._top) && object.Equals(this._rest, oth._rest);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._top));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rest));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Stack.Push";
      s += "(";
      s += Dafny.Helpers.ToString(this._top);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rest);
      s += ")";
      return s;
    }
  }

  public interface _IFrame {
    bool is_Bind { get; }
    bool is_Call { get; }
    bool is_Select { get; }
    Dafny.ISequence<Dafny.Rune> dtor_var__ { get; }
    _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> dtor_rhs { get; }
    _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> dtor_arg { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    _IFrame DowncastClone();
  }
  public abstract class Frame : _IFrame {
    public Frame() {
    }
    private static readonly DAM.Machine._IFrame theDefault = create_Bind(Dafny.Sequence<Dafny.Rune>.Empty, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.Default(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Empty, DAM.Syntax.Stmt.Default()));
    public static DAM.Machine._IFrame Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Machine._IFrame> _TYPE = new Dafny.TypeDescriptor<DAM.Machine._IFrame>(DAM.Machine.Frame.Default());
    public static Dafny.TypeDescriptor<DAM.Machine._IFrame> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFrame create_Bind(Dafny.ISequence<Dafny.Rune> var__, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> rhs) {
      return new Frame_Bind(var__, rhs);
    }
    public static _IFrame create_Call(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> arg) {
      return new Frame_Call(arg);
    }
    public static _IFrame create_Select(Dafny.ISequence<Dafny.Rune> field) {
      return new Frame_Select(field);
    }
    public bool is_Bind { get { return this is Frame_Bind; } }
    public bool is_Call { get { return this is Frame_Call; } }
    public bool is_Select { get { return this is Frame_Select; } }
    public Dafny.ISequence<Dafny.Rune> dtor_var__ {
      get {
        var d = this;
        return ((Frame_Bind)d)._var__;
      }
    }
    public _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> dtor_rhs {
      get {
        var d = this;
        return ((Frame_Bind)d)._rhs;
      }
    }
    public _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> dtor_arg {
      get {
        var d = this;
        return ((Frame_Call)d)._arg;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((Frame_Select)d)._field;
      }
    }
    public abstract _IFrame DowncastClone();
  }
  public class Frame_Bind : Frame {
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _rhs;
    public Frame_Bind(Dafny.ISequence<Dafny.Rune> var__, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> rhs) : base() {
      this._var__ = var__;
      this._rhs = rhs;
    }
    public override _IFrame DowncastClone() {
      if (this is _IFrame dt) { return dt; }
      return new Frame_Bind(_var__, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Frame_Bind;
      return oth != null && object.Equals(this._var__, oth._var__) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Frame.Bind";
      s += "(";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Frame_Call : Frame {
    public readonly _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _arg;
    public Frame_Call(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> arg) : base() {
      this._arg = arg;
    }
    public override _IFrame DowncastClone() {
      if (this is _IFrame dt) { return dt; }
      return new Frame_Call(_arg);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Frame_Call;
      return oth != null && object.Equals(this._arg, oth._arg);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arg));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Frame.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._arg);
      s += ")";
      return s;
    }
  }
  public class Frame_Select : Frame {
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public Frame_Select(Dafny.ISequence<Dafny.Rune> field) : base() {
      this._field = field;
    }
    public override _IFrame DowncastClone() {
      if (this is _IFrame dt) { return dt; }
      return new Frame_Select(_field);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Frame_Select;
      return oth != null && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Frame.Select";
      s += "(";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IEvent {
    bool is_Silent { get; }
    bool is_Print { get; }
    DAM.Machine._IVal dtor_Print_a0 { get; }
    _IEvent DowncastClone();
  }
  public abstract class Event : _IEvent {
    public Event() {
    }
    private static readonly DAM.Machine._IEvent theDefault = create_Silent();
    public static DAM.Machine._IEvent Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Machine._IEvent> _TYPE = new Dafny.TypeDescriptor<DAM.Machine._IEvent>(DAM.Machine.Event.Default());
    public static Dafny.TypeDescriptor<DAM.Machine._IEvent> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEvent create_Silent() {
      return new Event_Silent();
    }
    public static _IEvent create_Print(DAM.Machine._IVal _a0) {
      return new Event_Print(_a0);
    }
    public bool is_Silent { get { return this is Event_Silent; } }
    public bool is_Print { get { return this is Event_Print; } }
    public DAM.Machine._IVal dtor_Print_a0 {
      get {
        var d = this;
        return ((Event_Print)d)._a0;
      }
    }
    public abstract _IEvent DowncastClone();
  }
  public class Event_Silent : Event {
    public Event_Silent() : base() {
    }
    public override _IEvent DowncastClone() {
      if (this is _IEvent dt) { return dt; }
      return new Event_Silent();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Event_Silent;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Event.Silent";
      return s;
    }
  }
  public class Event_Print : Event {
    public readonly DAM.Machine._IVal _a0;
    public Event_Print(DAM.Machine._IVal _a0) : base() {
      this._a0 = _a0;
    }
    public override _IEvent DowncastClone() {
      if (this is _IEvent dt) { return dt; }
      return new Event_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Event_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Event.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IOutput {
    bool is_Raise { get; }
    bool is_Terminal { get; }
    DAM.Machine._IEvent dtor_event { get; }
    _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> dtor_next { get; }
    _IOutput DowncastClone();
  }
  public abstract class Output : _IOutput {
    public Output() {
    }
    private static readonly DAM.Machine._IOutput theDefault = create_Raise(DAM.Machine.Event.Default(), _System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.Default(Dafny.Sequence<DAM.Machine._IVal>.Empty, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.Default(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Empty, DAM.Syntax.Stmt.Default()), DAM.Machine.Stack.Default()));
    public static DAM.Machine._IOutput Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Machine._IOutput> _TYPE = new Dafny.TypeDescriptor<DAM.Machine._IOutput>(DAM.Machine.Output.Default());
    public static Dafny.TypeDescriptor<DAM.Machine._IOutput> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IOutput create_Raise(DAM.Machine._IEvent @event, _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> next) {
      return new Output_Raise(@event, next);
    }
    public static _IOutput create_Terminal() {
      return new Output_Terminal();
    }
    public bool is_Raise { get { return this is Output_Raise; } }
    public bool is_Terminal { get { return this is Output_Terminal; } }
    public DAM.Machine._IEvent dtor_event {
      get {
        var d = this;
        return ((Output_Raise)d)._event;
      }
    }
    public _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> dtor_next {
      get {
        var d = this;
        return ((Output_Raise)d)._next;
      }
    }
    public abstract _IOutput DowncastClone();
  }
  public class Output_Raise : Output {
    public readonly DAM.Machine._IEvent _event;
    public readonly _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _next;
    public Output_Raise(DAM.Machine._IEvent @event, _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> next) : base() {
      this._event = @event;
      this._next = next;
    }
    public override _IOutput DowncastClone() {
      if (this is _IOutput dt) { return dt; }
      return new Output_Raise(_event, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Output_Raise;
      return oth != null && object.Equals(this._event, oth._event) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._event));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Output.Raise";
      s += "(";
      s += Dafny.Helpers.ToString(this._event);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Output_Terminal : Output {
    public Output_Terminal() : base() {
    }
    public override _IOutput DowncastClone() {
      if (this is _IOutput dt) { return dt; }
      return new Output_Terminal();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Output_Terminal;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Output.Terminal";
      return s;
    }
  }
} // end of namespace DAM.Machine
namespace DAM.Statics {

  public partial class __default {
    public static DAM.Utils._IOption<DAM.Syntax._IPos> SynthExpr(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g, DAM.Syntax._IExpr expr) {
      DAM.Syntax._IExpr _source2 = expr;
      if (_source2.is_Var) {
        Dafny.ISequence<Dafny.Rune> _14___mcc_h0 = _source2.dtor_Var_a0;
        Dafny.ISequence<Dafny.Rune> _15_x = _14___mcc_h0;
        return DAM.Utils.__default.mapGet<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>(g, _15_x);
      } else if (_source2.is_Unit) {
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Unit());
      } else if (_source2.is_Bool) {
        bool _16___mcc_h1 = _source2.dtor_Bool_a0;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Bool());
      } else if (_source2.is_Int) {
        BigInteger _17___mcc_h2 = _source2.dtor_Int_a0;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Int());
      } else if (_source2.is_LT) {
        DAM.Syntax._IExpr _18___mcc_h3 = _source2.dtor_LT_a0;
        DAM.Syntax._IExpr _19___mcc_h4 = _source2.dtor_LT_a1;
        DAM.Syntax._IExpr _20_rhs = _19___mcc_h4;
        DAM.Syntax._IExpr _21_lhs = _18___mcc_h3;
        if ((DAM.Statics.__default.CheckExpr(g, _21_lhs, DAM.Syntax.Pos.create_Int())) && (DAM.Statics.__default.CheckExpr(g, _20_rhs, DAM.Syntax.Pos.create_Int()))) {
          return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Bool());
        } else {
          return DAM.Utils.Option<DAM.Syntax._IPos>.create_None();
        }
      } else if (_source2.is_Plus) {
        DAM.Syntax._IExpr _22___mcc_h5 = _source2.dtor_Plus_a0;
        DAM.Syntax._IExpr _23___mcc_h6 = _source2.dtor_Plus_a1;
        DAM.Syntax._IExpr _24_rhs = _23___mcc_h6;
        DAM.Syntax._IExpr _25_lhs = _22___mcc_h5;
        if ((DAM.Statics.__default.CheckExpr(g, _25_lhs, DAM.Syntax.Pos.create_Int())) && (DAM.Statics.__default.CheckExpr(g, _24_rhs, DAM.Syntax.Pos.create_Int()))) {
          return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Int());
        } else {
          return DAM.Utils.Option<DAM.Syntax._IPos>.create_None();
        }
      } else {
        DAM.Syntax._IStmt _26___mcc_h7 = _source2.dtor_Thunk_a0;
        DAM.Syntax._IStmt _27_s = _26___mcc_h7;
        DAM.Utils._IOption<DAM.Syntax._INeg> _28_valueOrError0 = DAM.Statics.__default.SynthStmt(g, _27_s);
        if ((_28_valueOrError0).IsFailure()) {
          return (_28_valueOrError0).PropagateFailure<DAM.Syntax._IPos>();
        } else {
          DAM.Syntax._INeg _29_t = (_28_valueOrError0).Extract();
          return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Thunk(_29_t));
        }
      }
    }
    public static bool CheckExpr(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g, DAM.Syntax._IExpr e, DAM.Syntax._IPos t) {
      return object.Equals(DAM.Statics.__default.SynthExpr(g, e), DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(t));
    }
    public static DAM.Utils._IOption<DAM.Syntax._INeg> SynthStmt(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g, DAM.Syntax._IStmt stmt) {
      DAM.Syntax._IStmt _source3 = stmt;
      if (_source3.is_Pure) {
        DAM.Syntax._IExpr _30___mcc_h0 = _source3.dtor_Pure_a0;
        DAM.Syntax._IExpr _31_e = _30___mcc_h0;
        DAM.Utils._IOption<DAM.Syntax._IPos> _32_valueOrError0 = DAM.Statics.__default.SynthExpr(g, _31_e);
        if ((_32_valueOrError0).IsFailure()) {
          return (_32_valueOrError0).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._IPos _33_t = (_32_valueOrError0).Extract();
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(DAM.Syntax.Neg.create_Value(_33_t));
        }
      } else if (_source3.is_Bind) {
        DAM.Syntax._IStmt _34___mcc_h1 = _source3.dtor_lhs;
        Dafny.ISequence<Dafny.Rune> _35___mcc_h2 = _source3.dtor_var__;
        DAM.Syntax._IStmt _36___mcc_h3 = _source3.dtor_rhs;
        DAM.Syntax._IStmt _37_rhs = _36___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _38_var__ = _35___mcc_h2;
        DAM.Syntax._IStmt _39_lhs = _34___mcc_h1;
        DAM.Utils._IOption<DAM.Syntax._INeg> _source4 = DAM.Statics.__default.SynthStmt(g, _39_lhs);
        if (_source4.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._INeg _40___mcc_h36 = _source4.dtor_value;
          DAM.Syntax._INeg _source5 = _40___mcc_h36;
          if (_source5.is_Value) {
            DAM.Syntax._IPos _41___mcc_h38 = _source5.dtor_pos;
            DAM.Syntax._IPos _42_t = _41___mcc_h38;
            return DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _38_var__, _42_t), _37_rhs);
          } else if (_source5.is_Function) {
            DAM.Syntax._IPos _43___mcc_h40 = _source5.dtor_dom;
            DAM.Syntax._INeg _44___mcc_h41 = _source5.dtor_cod;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _45___mcc_h44 = _source5.dtor_fields;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_Ite) {
        DAM.Syntax._IExpr _46___mcc_h4 = _source3.dtor_guard;
        DAM.Syntax._IStmt _47___mcc_h5 = _source3.dtor_then__;
        DAM.Syntax._IStmt _48___mcc_h6 = _source3.dtor_else__;
        DAM.Syntax._IStmt _49_else__ = _48___mcc_h6;
        DAM.Syntax._IStmt _50_then__ = _47___mcc_h5;
        DAM.Syntax._IExpr _51_guard = _46___mcc_h4;
        if (DAM.Statics.__default.CheckExpr(g, _51_guard, DAM.Syntax.Pos.create_Bool())) {
          DAM.Utils._IOption<DAM.Syntax._INeg> _52_valueOrError1 = DAM.Statics.__default.SynthStmt(g, _50_then__);
          if ((_52_valueOrError1).IsFailure()) {
            return (_52_valueOrError1).PropagateFailure<DAM.Syntax._INeg>();
          } else {
            DAM.Syntax._INeg _53_t = (_52_valueOrError1).Extract();
            if (DAM.Statics.__default.CheckStmt(g, _49_else__, _53_t)) {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_53_t);
            } else {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
            }
          }
        } else {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        }
      } else if (_source3.is_Func) {
        Dafny.ISequence<Dafny.Rune> _54___mcc_h7 = _source3.dtor_bound;
        DAM.Syntax._IPos _55___mcc_h8 = _source3.dtor_dom;
        DAM.Syntax._IStmt _56___mcc_h9 = _source3.dtor_body;
        DAM.Syntax._IStmt _57_body = _56___mcc_h9;
        DAM.Syntax._IPos _58_dom = _55___mcc_h8;
        Dafny.ISequence<Dafny.Rune> _59_bound = _54___mcc_h7;
        DAM.Utils._IOption<DAM.Syntax._INeg> _60_valueOrError2 = DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _59_bound, _58_dom), _57_body);
        if ((_60_valueOrError2).IsFailure()) {
          return (_60_valueOrError2).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._INeg _61_cod = (_60_valueOrError2).Extract();
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(DAM.Syntax.Neg.create_Function(_58_dom, _61_cod));
        }
      } else if (_source3.is_Call) {
        DAM.Syntax._IStmt _62___mcc_h10 = _source3.dtor_func;
        DAM.Syntax._IExpr _63___mcc_h11 = _source3.dtor_arg;
        DAM.Syntax._IExpr _64_arg = _63___mcc_h11;
        DAM.Syntax._IStmt _65_func = _62___mcc_h10;
        DAM.Utils._IOption<DAM.Syntax._INeg> _source6 = DAM.Statics.__default.SynthStmt(g, _65_func);
        if (_source6.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._INeg _66___mcc_h46 = _source6.dtor_value;
          DAM.Syntax._INeg _source7 = _66___mcc_h46;
          if (_source7.is_Value) {
            DAM.Syntax._IPos _67___mcc_h48 = _source7.dtor_pos;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source7.is_Function) {
            DAM.Syntax._IPos _68___mcc_h50 = _source7.dtor_dom;
            DAM.Syntax._INeg _69___mcc_h51 = _source7.dtor_cod;
            DAM.Syntax._INeg _70_cod = _69___mcc_h51;
            DAM.Syntax._IPos _71_dom = _68___mcc_h50;
            if (DAM.Statics.__default.CheckExpr(g, _64_arg, _71_dom)) {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_70_cod);
            } else {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
            }
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _72___mcc_h54 = _source7.dtor_fields;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_Record) {
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _73___mcc_h12 = _source3.dtor_fields;
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _74_fields = _73___mcc_h12;
        DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>> _75_valueOrError4 = DAM.Utils.__default.mapOption<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>(Dafny.Helpers.Id<Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>>>((_76_fields, _77_g) => ((System.Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>>)(() => {
          var _coll1 = new System.Collections.Generic.List<Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>>();
          foreach (Dafny.ISequence<Dafny.Rune> _compr_1 in (_76_fields).Keys.Elements) {
            Dafny.ISequence<Dafny.Rune> _78_lbl = (Dafny.ISequence<Dafny.Rune>)_compr_1;
            if ((_76_fields).Contains(_78_lbl)) {
              _coll1.Add(new Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>(_78_lbl, DAM.Statics.__default.SynthStmt(_77_g, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Select(_76_fields, _78_lbl))));
            }
          }
          return Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>.FromCollection(_coll1);
        }))())(_74_fields, g));
        if ((_75_valueOrError4).IsFailure()) {
          return (_75_valueOrError4).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _79_fields = (_75_valueOrError4).Extract();
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(DAM.Syntax.Neg.create_Record(_79_fields));
        }
      } else if (_source3.is_Select) {
        DAM.Syntax._IStmt _80___mcc_h13 = _source3.dtor_record;
        Dafny.ISequence<Dafny.Rune> _81___mcc_h14 = _source3.dtor_field;
        Dafny.ISequence<Dafny.Rune> _82_lbl = _81___mcc_h14;
        DAM.Syntax._IStmt _83_record = _80___mcc_h13;
        DAM.Utils._IOption<DAM.Syntax._INeg> _source8 = DAM.Statics.__default.SynthStmt(g, _83_record);
        if (_source8.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._INeg _84___mcc_h56 = _source8.dtor_value;
          DAM.Syntax._INeg _source9 = _84___mcc_h56;
          if (_source9.is_Value) {
            DAM.Syntax._IPos _85___mcc_h58 = _source9.dtor_pos;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source9.is_Function) {
            DAM.Syntax._IPos _86___mcc_h60 = _source9.dtor_dom;
            DAM.Syntax._INeg _87___mcc_h61 = _source9.dtor_cod;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _88___mcc_h64 = _source9.dtor_fields;
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _89_fields = _88___mcc_h64;
            return DAM.Utils.__default.mapGet<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>(_89_fields, _82_lbl);
          }
        }
      } else if (_source3.is_Force) {
        DAM.Syntax._IExpr _90___mcc_h15 = _source3.dtor_Force_a0;
        DAM.Syntax._IExpr _91_expr = _90___mcc_h15;
        DAM.Utils._IOption<DAM.Syntax._IPos> _source10 = DAM.Statics.__default.SynthExpr(g, _91_expr);
        if (_source10.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._IPos _92___mcc_h66 = _source10.dtor_value;
          DAM.Syntax._IPos _source11 = _92___mcc_h66;
          if (_source11.is_Unit) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source11.is_Bool) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source11.is_Int) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source11.is_Thunk) {
            DAM.Syntax._INeg _93___mcc_h68 = _source11.dtor_neg;
            DAM.Syntax._INeg _94_t = _93___mcc_h68;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_94_t);
          } else if (_source11.is_Ref) {
            DAM.Syntax._IPos _95___mcc_h70 = _source11.dtor_ref;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            DAM.Syntax._INeg _96___mcc_h72 = _source11.dtor_start;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_New) {
        DAM.Syntax._IExpr _97___mcc_h16 = _source3.dtor_init;
        Dafny.ISequence<Dafny.Rune> _98___mcc_h17 = _source3.dtor_var__;
        DAM.Syntax._IStmt _99___mcc_h18 = _source3.dtor_next;
        DAM.Syntax._IStmt _100_next = _99___mcc_h18;
        Dafny.ISequence<Dafny.Rune> _101_var__ = _98___mcc_h17;
        DAM.Syntax._IExpr _102_init = _97___mcc_h16;
        DAM.Utils._IOption<DAM.Syntax._IPos> _103_valueOrError5 = DAM.Statics.__default.SynthExpr(g, _102_init);
        if ((_103_valueOrError5).IsFailure()) {
          return (_103_valueOrError5).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._IPos _104_t = (_103_valueOrError5).Extract();
          return DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _101_var__, DAM.Syntax.Pos.create_Ref(_104_t)), _100_next);
        }
      } else if (_source3.is_Read) {
        DAM.Syntax._IExpr _105___mcc_h19 = _source3.dtor_ref;
        Dafny.ISequence<Dafny.Rune> _106___mcc_h20 = _source3.dtor_var__;
        DAM.Syntax._IStmt _107___mcc_h21 = _source3.dtor_next;
        DAM.Syntax._IStmt _108_next = _107___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _109_var__ = _106___mcc_h20;
        DAM.Syntax._IExpr _110_ref = _105___mcc_h19;
        DAM.Utils._IOption<DAM.Syntax._IPos> _source12 = DAM.Statics.__default.SynthExpr(g, _110_ref);
        if (_source12.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._IPos _111___mcc_h74 = _source12.dtor_value;
          DAM.Syntax._IPos _source13 = _111___mcc_h74;
          if (_source13.is_Unit) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source13.is_Bool) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source13.is_Int) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source13.is_Thunk) {
            DAM.Syntax._INeg _112___mcc_h76 = _source13.dtor_neg;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source13.is_Ref) {
            DAM.Syntax._IPos _113___mcc_h78 = _source13.dtor_ref;
            DAM.Syntax._IPos _114_t = _113___mcc_h78;
            return DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _109_var__, _114_t), _108_next);
          } else {
            DAM.Syntax._INeg _115___mcc_h80 = _source13.dtor_start;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_Write) {
        DAM.Syntax._IExpr _116___mcc_h22 = _source3.dtor_lvalue;
        DAM.Syntax._IExpr _117___mcc_h23 = _source3.dtor_rvalue;
        DAM.Syntax._IStmt _118___mcc_h24 = _source3.dtor_next;
        DAM.Syntax._IStmt _119_next = _118___mcc_h24;
        DAM.Syntax._IExpr _120_rhs = _117___mcc_h23;
        DAM.Syntax._IExpr _121_lhs = _116___mcc_h22;
        DAM.Utils._IOption<DAM.Syntax._IPos> _source14 = DAM.Statics.__default.SynthExpr(g, _121_lhs);
        if (_source14.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._IPos _122___mcc_h82 = _source14.dtor_value;
          DAM.Syntax._IPos _source15 = _122___mcc_h82;
          if (_source15.is_Unit) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source15.is_Bool) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source15.is_Int) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source15.is_Thunk) {
            DAM.Syntax._INeg _123___mcc_h84 = _source15.dtor_neg;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source15.is_Ref) {
            DAM.Syntax._IPos _124___mcc_h86 = _source15.dtor_ref;
            DAM.Syntax._IPos _125_t = _124___mcc_h86;
            if (DAM.Statics.__default.CheckExpr(g, _120_rhs, _125_t)) {
              return DAM.Statics.__default.SynthStmt(g, _119_next);
            } else {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
            }
          } else {
            DAM.Syntax._INeg _126___mcc_h88 = _source15.dtor_start;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_Print) {
        DAM.Syntax._IExpr _127___mcc_h25 = _source3.dtor_Print_a0;
        DAM.Syntax._IStmt _128___mcc_h26 = _source3.dtor_next;
        DAM.Syntax._IStmt _129_next = _128___mcc_h26;
        DAM.Syntax._IExpr _130_expr = _127___mcc_h25;
        DAM.Utils._IOption<DAM.Syntax._IPos> _131_valueOrError3 = DAM.Statics.__default.SynthExpr(g, _130_expr);
        if ((_131_valueOrError3).IsFailure()) {
          return (_131_valueOrError3).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._IPos _132___v17 = (_131_valueOrError3).Extract();
          return DAM.Statics.__default.SynthStmt(g, _129_next);
        }
      } else if (_source3.is_Rec) {
        Dafny.ISequence<Dafny.Rune> _133___mcc_h27 = _source3.dtor_bound;
        DAM.Syntax._INeg _134___mcc_h28 = _source3.dtor_fix;
        DAM.Syntax._IStmt _135___mcc_h29 = _source3.dtor_body;
        DAM.Syntax._IStmt _136_body = _135___mcc_h29;
        DAM.Syntax._INeg _137_fix = _134___mcc_h28;
        Dafny.ISequence<Dafny.Rune> _138_self = _133___mcc_h27;
        if (DAM.Statics.__default.CheckStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _138_self, DAM.Syntax.Pos.create_Thunk(_137_fix)), _136_body, _137_fix)) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_137_fix);
        } else {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        }
      } else if (_source3.is_LetCS) {
        Dafny.ISequence<Dafny.Rune> _139___mcc_h30 = _source3.dtor_bound;
        DAM.Syntax._INeg _140___mcc_h31 = _source3.dtor_start;
        DAM.Syntax._IStmt _141___mcc_h32 = _source3.dtor_body;
        DAM.Syntax._IStmt _142_body = _141___mcc_h32;
        DAM.Syntax._INeg _143_start = _140___mcc_h31;
        Dafny.ISequence<Dafny.Rune> _144_bound = _139___mcc_h30;
        return DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _144_bound, DAM.Syntax.Pos.create_Stack(_143_start)), _142_body);
      } else {
        DAM.Syntax._IExpr _145___mcc_h33 = _source3.dtor_stack;
        DAM.Syntax._INeg _146___mcc_h34 = _source3.dtor_oldstart;
        DAM.Syntax._IStmt _147___mcc_h35 = _source3.dtor_next;
        DAM.Syntax._IStmt _148_next = _147___mcc_h35;
        DAM.Syntax._INeg _149_oldstart = _146___mcc_h34;
        DAM.Syntax._IExpr _150_stack = _145___mcc_h33;
        DAM.Utils._IOption<DAM.Syntax._IPos> _source16 = DAM.Statics.__default.SynthExpr(g, _150_stack);
        if (_source16.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._IPos _151___mcc_h90 = _source16.dtor_value;
          DAM.Syntax._IPos _source17 = _151___mcc_h90;
          if (_source17.is_Unit) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source17.is_Bool) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source17.is_Int) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source17.is_Thunk) {
            DAM.Syntax._INeg _152___mcc_h92 = _source17.dtor_neg;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source17.is_Ref) {
            DAM.Syntax._IPos _153___mcc_h94 = _source17.dtor_ref;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            DAM.Syntax._INeg _154___mcc_h96 = _source17.dtor_start;
            DAM.Syntax._INeg _155_start = _154___mcc_h96;
            if (DAM.Statics.__default.CheckStmt(g, _148_next, _155_start)) {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_149_oldstart);
            } else {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
            }
          }
        }
      }
    }
    public static bool CheckStmt(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g, DAM.Syntax._IStmt stmt, DAM.Syntax._INeg t) {
      return object.Equals(DAM.Statics.__default.SynthStmt(g, stmt), DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(t));
    }
    public static DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> SynthEnv(Dafny.ISequence<DAM.Syntax._IPos> s, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> env) {
      return DAM.Utils.__default.mapOption<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>(Dafny.Helpers.Id<Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, Dafny.ISequence<DAM.Syntax._IPos>, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>>((_156_env, _157_s) => ((System.Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>)(() => {
        var _coll2 = new System.Collections.Generic.List<Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>();
        foreach (Dafny.ISequence<Dafny.Rune> _compr_2 in (_156_env).Keys.Elements) {
          Dafny.ISequence<Dafny.Rune> _158_var__ = (Dafny.ISequence<Dafny.Rune>)_compr_2;
          if ((_156_env).Contains(_158_var__)) {
            _coll2.Add(new Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>(_158_var__, DAM.Statics.__default.SynthVal(_157_s, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Select(_156_env, _158_var__))));
          }
        }
        return Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>.FromCollection(_coll2);
      }))())(env, s));
    }
    public static bool CheckEnv(Dafny.ISequence<DAM.Syntax._IPos> s, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> env, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g) {
      return object.Equals(DAM.Statics.__default.SynthEnv(s, env), DAM.Utils.Option<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>>.create_Some(g));
    }
    public static DAM.Utils._IOption<DAM.Syntax._IPos> SynthClosedExpr(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> expr) {
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _let_tmp_rhs0 = expr;
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _159_env = _let_tmp_rhs0.dtor__0;
      DAM.Syntax._IExpr _160_expr = _let_tmp_rhs0.dtor__1;
      DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> _161_valueOrError0 = DAM.Statics.__default.SynthEnv(s, _159_env);
      if ((_161_valueOrError0).IsFailure()) {
        return (_161_valueOrError0).PropagateFailure<DAM.Syntax._IPos>();
      } else {
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> _162_g = (_161_valueOrError0).Extract();
        return DAM.Statics.__default.SynthExpr(_162_g, _160_expr);
      }
    }
    public static bool CheckClosedExpr(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> expr, DAM.Syntax._IPos t) {
      return object.Equals(DAM.Statics.__default.SynthClosedExpr(s, expr), DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(t));
    }
    public static DAM.Utils._IOption<DAM.Syntax._INeg> SynthClosedStmt(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> stmt) {
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _let_tmp_rhs1 = stmt;
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _163_env = _let_tmp_rhs1.dtor__0;
      DAM.Syntax._IStmt _164_stmt = _let_tmp_rhs1.dtor__1;
      DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> _165_valueOrError0 = DAM.Statics.__default.SynthEnv(s, _163_env);
      if ((_165_valueOrError0).IsFailure()) {
        return (_165_valueOrError0).PropagateFailure<DAM.Syntax._INeg>();
      } else {
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> _166_g = (_165_valueOrError0).Extract();
        return DAM.Statics.__default.SynthStmt(_166_g, _164_stmt);
      }
    }
    public static DAM.Utils._IOption<DAM.Syntax._INeg> SynthStack(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Syntax._INeg start, DAM.Machine._IStack stack) {
    TAIL_CALL_START:;
      DAM.Machine._IStack _source18 = stack;
      if (_source18.is_Empty) {
        return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(start);
      } else {
        DAM.Machine._IFrame _167___mcc_h0 = _source18.dtor_top;
        DAM.Machine._IStack _168___mcc_h1 = _source18.dtor_rest;
        DAM.Machine._IFrame _source19 = _167___mcc_h0;
        if (_source19.is_Bind) {
          Dafny.ISequence<Dafny.Rune> _169___mcc_h2 = _source19.dtor_var__;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _170___mcc_h3 = _source19.dtor_rhs;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _source20 = _170___mcc_h3;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _171___mcc_h4 = _source20.dtor__0;
          DAM.Syntax._IStmt _172___mcc_h5 = _source20.dtor__1;
          DAM.Machine._IStack _173_stack = _168___mcc_h1;
          DAM.Syntax._IStmt _174_rhs = _172___mcc_h5;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _175_env = _171___mcc_h4;
          Dafny.ISequence<Dafny.Rune> _176_var__ = _169___mcc_h2;
          DAM.Syntax._INeg _source21 = start;
          if (_source21.is_Value) {
            DAM.Syntax._IPos _177___mcc_h8 = _source21.dtor_pos;
            DAM.Syntax._IPos _178_t = _177___mcc_h8;
            DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> _179_valueOrError0 = DAM.Statics.__default.SynthEnv(s, _175_env);
            if ((_179_valueOrError0).IsFailure()) {
              return (_179_valueOrError0).PropagateFailure<DAM.Syntax._INeg>();
            } else {
              Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> _180_g = (_179_valueOrError0).Extract();
              DAM.Utils._IOption<DAM.Syntax._INeg> _181_valueOrError1 = DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(_180_g, _176_var__, _178_t), _174_rhs);
              if ((_181_valueOrError1).IsFailure()) {
                return (_181_valueOrError1).PropagateFailure<DAM.Syntax._INeg>();
              } else {
                DAM.Syntax._INeg _182_start = (_181_valueOrError1).Extract();
                Dafny.ISequence<DAM.Syntax._IPos> _in0 = s;
                DAM.Syntax._INeg _in1 = _182_start;
                DAM.Machine._IStack _in2 = _173_stack;
                s = _in0;
                start = _in1;
                stack = _in2;
                goto TAIL_CALL_START;
              }
            }
          } else if (_source21.is_Function) {
            DAM.Syntax._IPos _183___mcc_h10 = _source21.dtor_dom;
            DAM.Syntax._INeg _184___mcc_h11 = _source21.dtor_cod;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _185___mcc_h14 = _source21.dtor_fields;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        } else if (_source19.is_Call) {
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _186___mcc_h6 = _source19.dtor_arg;
          DAM.Machine._IStack _187_stack = _168___mcc_h1;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _188_arg = _186___mcc_h6;
          DAM.Syntax._INeg _source22 = start;
          if (_source22.is_Value) {
            DAM.Syntax._IPos _189___mcc_h16 = _source22.dtor_pos;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source22.is_Function) {
            DAM.Syntax._IPos _190___mcc_h18 = _source22.dtor_dom;
            DAM.Syntax._INeg _191___mcc_h19 = _source22.dtor_cod;
            DAM.Syntax._INeg _192_cod = _191___mcc_h19;
            DAM.Syntax._IPos _193_dom = _190___mcc_h18;
            if (DAM.Statics.__default.CheckClosedExpr(s, _188_arg, _193_dom)) {
              Dafny.ISequence<DAM.Syntax._IPos> _in3 = s;
              DAM.Syntax._INeg _in4 = _192_cod;
              DAM.Machine._IStack _in5 = _187_stack;
              s = _in3;
              start = _in4;
              stack = _in5;
              goto TAIL_CALL_START;
            } else {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
            }
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _194___mcc_h22 = _source22.dtor_fields;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        } else {
          Dafny.ISequence<Dafny.Rune> _195___mcc_h7 = _source19.dtor_field;
          DAM.Machine._IStack _196_stack = _168___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _197_lbl = _195___mcc_h7;
          DAM.Syntax._INeg _source23 = start;
          if (_source23.is_Value) {
            DAM.Syntax._IPos _198___mcc_h24 = _source23.dtor_pos;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source23.is_Function) {
            DAM.Syntax._IPos _199___mcc_h26 = _source23.dtor_dom;
            DAM.Syntax._INeg _200___mcc_h27 = _source23.dtor_cod;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _201___mcc_h30 = _source23.dtor_fields;
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _202_fields = _201___mcc_h30;
            DAM.Utils._IOption<DAM.Syntax._INeg> _203_valueOrError2 = DAM.Utils.__default.mapGet<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>(_202_fields, _197_lbl);
            if ((_203_valueOrError2).IsFailure()) {
              return (_203_valueOrError2).PropagateFailure<DAM.Syntax._INeg>();
            } else {
              DAM.Syntax._INeg _204_start = (_203_valueOrError2).Extract();
              Dafny.ISequence<DAM.Syntax._IPos> _in6 = s;
              DAM.Syntax._INeg _in7 = _204_start;
              DAM.Machine._IStack _in8 = _196_stack;
              s = _in6;
              start = _in7;
              stack = _in8;
              goto TAIL_CALL_START;
            }
          }
        }
      }
    }
    public static bool CheckStack(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Syntax._INeg start, DAM.Machine._IStack stack, DAM.Syntax._INeg end) {
      return object.Equals(DAM.Statics.__default.SynthStack(s, start, stack), DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(end));
    }
    public static DAM.Utils._IOption<DAM.Syntax._IPos> SynthVal(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Machine._IVal val) {
      DAM.Machine._IVal _source24 = val;
      if (_source24.is_Unit) {
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Unit());
      } else if (_source24.is_Bool) {
        bool _205___mcc_h0 = _source24.dtor_answer;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Bool());
      } else if (_source24.is_Int) {
        BigInteger _206___mcc_h1 = _source24.dtor_number;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Int());
      } else if (_source24.is_Thunk) {
        _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _207___mcc_h2 = _source24.dtor_closure;
        _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _source25 = _207___mcc_h2;
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _208___mcc_h3 = _source25.dtor__0;
        DAM.Syntax._IStmt _209___mcc_h4 = _source25.dtor__1;
        DAM.Syntax._IStmt _210_stmt = _209___mcc_h4;
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _211_env = _208___mcc_h3;
        DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> _212_valueOrError0 = DAM.Utils.__default.mapOption<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>(Dafny.Helpers.Id<Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, Dafny.ISequence<DAM.Syntax._IPos>, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>>((_213_env, _214_s) => ((System.Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>)(() => {
          var _coll3 = new System.Collections.Generic.List<Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>();
          foreach (Dafny.ISequence<Dafny.Rune> _compr_3 in (_213_env).Keys.Elements) {
            Dafny.ISequence<Dafny.Rune> _215_var__ = (Dafny.ISequence<Dafny.Rune>)_compr_3;
            if ((_213_env).Contains(_215_var__)) {
              _coll3.Add(new Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>(_215_var__, DAM.Statics.__default.SynthVal(_214_s, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Select(_213_env, _215_var__))));
            }
          }
          return Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>.FromCollection(_coll3);
        }))())(_211_env, s));
        if ((_212_valueOrError0).IsFailure()) {
          return (_212_valueOrError0).PropagateFailure<DAM.Syntax._IPos>();
        } else {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> _216_g = (_212_valueOrError0).Extract();
          DAM.Utils._IOption<DAM.Syntax._INeg> _217_valueOrError1 = DAM.Statics.__default.SynthStmt(_216_g, _210_stmt);
          if ((_217_valueOrError1).IsFailure()) {
            return (_217_valueOrError1).PropagateFailure<DAM.Syntax._IPos>();
          } else {
            DAM.Syntax._INeg _218_t = (_217_valueOrError1).Extract();
            return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Thunk(_218_t));
          }
        }
      } else if (_source24.is_Ref) {
        BigInteger _219___mcc_h5 = _source24.dtor_addr;
        BigInteger _220_addr = _219___mcc_h5;
        DAM.Utils._IOption<DAM.Syntax._IPos> _221_valueOrError2 = DAM.Utils.__default.SeqGet<DAM.Syntax._IPos>(s, _220_addr);
        if ((_221_valueOrError2).IsFailure()) {
          return (_221_valueOrError2).PropagateFailure<DAM.Syntax._IPos>();
        } else {
          DAM.Syntax._IPos _222_t = (_221_valueOrError2).Extract();
          return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Ref(_222_t));
        }
      } else {
        DAM.Syntax._INeg _223___mcc_h6 = _source24.dtor_start;
        DAM.Machine._IStack _224___mcc_h7 = _source24.dtor_stack;
        DAM.Machine._IStack _225_stack = _224___mcc_h7;
        DAM.Syntax._INeg _226_start = _223___mcc_h6;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_None();
      }
    }
    public static bool CheckVal(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Machine._IVal val, DAM.Syntax._IPos t) {
      return object.Equals(DAM.Statics.__default.SynthVal(s, val), DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(t));
    }
    public static bool CheckStore(Dafny.ISequence<DAM.Syntax._IPos> s, Dafny.ISequence<DAM.Machine._IVal> store) {
      return ((new BigInteger((store).Count)) == (new BigInteger((s).Count))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<DAM.Machine._IVal>, Dafny.ISequence<DAM.Syntax._IPos>, bool>>((_227_store, _228_s) => Dafny.Helpers.Quantifier<BigInteger>(Dafny.Helpers.IntegerRange(BigInteger.Zero, new BigInteger((_227_store).Count)), true, (((_forall_var_1) => {
        BigInteger _229_addr = (BigInteger)_forall_var_1;
        return !(((_229_addr).Sign != -1) && ((_229_addr) < (new BigInteger((_227_store).Count)))) || (DAM.Statics.__default.CheckVal(_228_s, (_227_store).Select(_229_addr), (_228_s).Select(_229_addr)));
      }))))(store, s));
    }
    public static DAM.Utils._IOption<DAM.Syntax._INeg> SynthInput(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> input) {
      _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _let_tmp_rhs2 = input;
      Dafny.ISequence<DAM.Machine._IVal> _230_sto = _let_tmp_rhs2.dtor__0;
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _231_stmt = _let_tmp_rhs2.dtor__1;
      DAM.Machine._IStack _232_stack = _let_tmp_rhs2.dtor__2;
      if (DAM.Statics.__default.CheckStore(s, _230_sto)) {
        DAM.Utils._IOption<DAM.Syntax._INeg> _233_valueOrError0 = DAM.Statics.__default.SynthClosedStmt(s, _231_stmt);
        if ((_233_valueOrError0).IsFailure()) {
          return (_233_valueOrError0).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._INeg _234_start = (_233_valueOrError0).Extract();
          DAM.Utils._IOption<DAM.Syntax._INeg> _235_valueOrError1 = DAM.Statics.__default.SynthStack(s, _234_start, _232_stack);
          if ((_235_valueOrError1).IsFailure()) {
            return (_235_valueOrError1).PropagateFailure<DAM.Syntax._INeg>();
          } else {
            DAM.Syntax._INeg _236_end = (_235_valueOrError1).Extract();
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_236_end);
          }
        }
      } else {
        return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
      }
    }
    public static bool CheckInput(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> input, DAM.Syntax._INeg end) {
      return object.Equals(DAM.Statics.__default.SynthInput(s, input), DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(end));
    }
    public static bool CheckOutput(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Machine._IOutput @out, DAM.Syntax._INeg end) {
      DAM.Machine._IOutput _source26 = @out;
      if (_source26.is_Raise) {
        DAM.Machine._IEvent _237___mcc_h0 = _source26.dtor_event;
        _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _238___mcc_h1 = _source26.dtor_next;
        _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _239_next = _238___mcc_h1;
        return DAM.Statics.__default.CheckInput(s, _239_next, end);
      } else {
        return true;
      }
    }
  }
} // end of namespace DAM.Statics
namespace DAM.Dynamics {

  public partial class __default {
    public static DAM.Machine._IVal Eval(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> expr) {
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _let_tmp_rhs3 = expr;
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _240_env = _let_tmp_rhs3.dtor__0;
      DAM.Syntax._IExpr _241_expr = _let_tmp_rhs3.dtor__1;
      DAM.Syntax._IExpr _source27 = _241_expr;
      if (_source27.is_Var) {
        Dafny.ISequence<Dafny.Rune> _242___mcc_h0 = _source27.dtor_Var_a0;
        Dafny.ISequence<Dafny.Rune> _243_x = _242___mcc_h0;
        return Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Select(_240_env, _243_x);
      } else if (_source27.is_Unit) {
        return DAM.Machine.Val.create_Unit();
      } else if (_source27.is_Bool) {
        bool _244___mcc_h1 = _source27.dtor_Bool_a0;
        bool _245_b = _244___mcc_h1;
        return DAM.Machine.Val.create_Bool(_245_b);
      } else if (_source27.is_Int) {
        BigInteger _246___mcc_h2 = _source27.dtor_Int_a0;
        BigInteger _247_i = _246___mcc_h2;
        return DAM.Machine.Val.create_Int(_247_i);
      } else if (_source27.is_LT) {
        DAM.Syntax._IExpr _248___mcc_h3 = _source27.dtor_LT_a0;
        DAM.Syntax._IExpr _249___mcc_h4 = _source27.dtor_LT_a1;
        DAM.Syntax._IExpr _250_rhs = _249___mcc_h4;
        DAM.Syntax._IExpr _251_lhs = _248___mcc_h3;
        BigInteger _252_lhs = (DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_240_env, _251_lhs))).dtor_number;
        BigInteger _253_rhs = (DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_240_env, _250_rhs))).dtor_number;
        return DAM.Machine.Val.create_Bool(false);
      } else if (_source27.is_Plus) {
        DAM.Syntax._IExpr _254___mcc_h5 = _source27.dtor_Plus_a0;
        DAM.Syntax._IExpr _255___mcc_h6 = _source27.dtor_Plus_a1;
        DAM.Syntax._IExpr _256_rhs = _255___mcc_h6;
        DAM.Syntax._IExpr _257_lhs = _254___mcc_h5;
        BigInteger _258_lhs = (DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_240_env, _257_lhs))).dtor_number;
        BigInteger _259_rhs = (DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_240_env, _256_rhs))).dtor_number;
        return DAM.Machine.Val.create_Int(BigInteger.Zero);
      } else {
        DAM.Syntax._IStmt _260___mcc_h7 = _source27.dtor_Thunk_a0;
        DAM.Syntax._IStmt _261_stmt = _260___mcc_h7;
        return DAM.Machine.Val.create_Thunk(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_240_env, _261_stmt));
      }
    }
    public static DAM.Machine._IOutput Step(_System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> input) {
      _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _let_tmp_rhs4 = input;
      Dafny.ISequence<DAM.Machine._IVal> _262_store = _let_tmp_rhs4.dtor__0;
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _let_tmp_rhs5 = _let_tmp_rhs4.dtor__1;
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _263_env = _let_tmp_rhs5.dtor__0;
      DAM.Syntax._IStmt _264_stmt = _let_tmp_rhs5.dtor__1;
      DAM.Machine._IStack _265_stack = _let_tmp_rhs4.dtor__2;
      DAM.Syntax._IStmt _source28 = _264_stmt;
      if (_source28.is_Pure) {
        DAM.Syntax._IExpr _266___mcc_h0 = _source28.dtor_Pure_a0;
        DAM.Syntax._IExpr _267_expr = _266___mcc_h0;
        DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> _source29 = (_265_stack).Pop();
        if (_source29.is_None) {
          DAM.Machine._IOutput _268_output = DAM.Machine.Output.create_Terminal();
          return _268_output;
        } else {
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _269___mcc_h36 = _source29.dtor_value;
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _source30 = _269___mcc_h36;
          DAM.Machine._IFrame _270___mcc_h37 = _source30.dtor__0;
          DAM.Machine._IStack _271___mcc_h38 = _source30.dtor__1;
          DAM.Machine._IFrame _source31 = _270___mcc_h37;
          Dafny.ISequence<Dafny.Rune> _272___mcc_h39 = _source31.dtor_var__;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _273___mcc_h40 = _source31.dtor_rhs;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _source32 = _273___mcc_h40;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _274___mcc_h41 = _source32.dtor__0;
          DAM.Syntax._IStmt _275___mcc_h42 = _source32.dtor__1;
          DAM.Machine._IStack _276_stack = _271___mcc_h38;
          DAM.Syntax._IStmt _277_rhs = _275___mcc_h42;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _278_env_k = _274___mcc_h41;
          Dafny.ISequence<Dafny.Rune> _279_var__ = _272___mcc_h39;
          DAM.Machine._IVal _280_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_263_env, _267_expr));
          DAM.Machine._IOutput _281_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_262_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_278_env_k, _279_var__, _280_val), _277_rhs), _276_stack));
          return _281_output;
        }
      } else if (_source28.is_Bind) {
        DAM.Syntax._IStmt _282___mcc_h1 = _source28.dtor_lhs;
        Dafny.ISequence<Dafny.Rune> _283___mcc_h2 = _source28.dtor_var__;
        DAM.Syntax._IStmt _284___mcc_h3 = _source28.dtor_rhs;
        DAM.Syntax._IStmt _285_rhs = _284___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _286_var__ = _283___mcc_h2;
        DAM.Syntax._IStmt _287_lhs = _282___mcc_h1;
        DAM.Machine._IOutput _288_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_262_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_263_env, _287_lhs), DAM.Machine.Stack.create_Push(DAM.Machine.Frame.create_Bind(_286_var__, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_263_env, _285_rhs)), _265_stack)));
        return _288_output;
      } else if (_source28.is_Ite) {
        DAM.Syntax._IExpr _289___mcc_h4 = _source28.dtor_guard;
        DAM.Syntax._IStmt _290___mcc_h5 = _source28.dtor_then__;
        DAM.Syntax._IStmt _291___mcc_h6 = _source28.dtor_else__;
        DAM.Syntax._IStmt _292_else__ = _291___mcc_h6;
        DAM.Syntax._IStmt _293_then__ = _290___mcc_h5;
        DAM.Syntax._IExpr _294_guard = _289___mcc_h4;
        DAM.Machine._IVal _295_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_263_env, _294_guard));
        DAM.Machine._IOutput _296_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_262_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_263_env, (((_295_val).dtor_answer) ? (_293_then__) : (_292_else__))), _265_stack));
        return _296_output;
      } else if (_source28.is_Func) {
        Dafny.ISequence<Dafny.Rune> _297___mcc_h7 = _source28.dtor_bound;
        DAM.Syntax._IPos _298___mcc_h8 = _source28.dtor_dom;
        DAM.Syntax._IStmt _299___mcc_h9 = _source28.dtor_body;
        DAM.Syntax._IStmt _300_body = _299___mcc_h9;
        Dafny.ISequence<Dafny.Rune> _301_bound = _297___mcc_h7;
        DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> _source33 = (_265_stack).Pop();
        if (_source33.is_None) {
          DAM.Machine._IOutput _302_output = DAM.Machine.Output.create_Terminal();
          return _302_output;
        } else {
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _303___mcc_h45 = _source33.dtor_value;
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _source34 = _303___mcc_h45;
          DAM.Machine._IFrame _304___mcc_h46 = _source34.dtor__0;
          DAM.Machine._IStack _305___mcc_h47 = _source34.dtor__1;
          DAM.Machine._IFrame _source35 = _304___mcc_h46;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _306___mcc_h50 = _source35.dtor_arg;
          DAM.Machine._IStack _307_stack = _305___mcc_h47;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _308_arg = _306___mcc_h50;
          DAM.Machine._IVal _309_val = DAM.Dynamics.__default.Eval(_308_arg);
          DAM.Machine._IOutput _310_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_262_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_263_env, _301_bound, _309_val), _300_body), _307_stack));
          return _310_output;
        }
      } else if (_source28.is_Call) {
        DAM.Syntax._IStmt _311___mcc_h10 = _source28.dtor_func;
        DAM.Syntax._IExpr _312___mcc_h11 = _source28.dtor_arg;
        DAM.Syntax._IExpr _313_arg = _312___mcc_h11;
        DAM.Syntax._IStmt _314_func = _311___mcc_h10;
        DAM.Machine._IOutput _315_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_262_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_263_env, _314_func), DAM.Machine.Stack.create_Push(DAM.Machine.Frame.create_Call(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_263_env, _313_arg)), _265_stack)));
        return _315_output;
      } else if (_source28.is_Record) {
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _316___mcc_h12 = _source28.dtor_fields;
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _317_fields = _316___mcc_h12;
        DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> _source36 = (_265_stack).Pop();
        if (_source36.is_None) {
          DAM.Machine._IOutput _318_output = DAM.Machine.Output.create_Terminal();
          return _318_output;
        } else {
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _319___mcc_h52 = _source36.dtor_value;
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _source37 = _319___mcc_h52;
          DAM.Machine._IFrame _320___mcc_h53 = _source37.dtor__0;
          DAM.Machine._IStack _321___mcc_h54 = _source37.dtor__1;
          DAM.Machine._IFrame _source38 = _320___mcc_h53;
          Dafny.ISequence<Dafny.Rune> _322___mcc_h58 = _source38.dtor_field;
          DAM.Machine._IStack _323_stack = _321___mcc_h54;
          Dafny.ISequence<Dafny.Rune> _324_lbl = _322___mcc_h58;
          DAM.Machine._IOutput _325_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_262_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_263_env, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Select(_317_fields, _324_lbl)), _323_stack));
          return _325_output;
        }
      } else if (_source28.is_Select) {
        DAM.Syntax._IStmt _326___mcc_h13 = _source28.dtor_record;
        Dafny.ISequence<Dafny.Rune> _327___mcc_h14 = _source28.dtor_field;
        Dafny.ISequence<Dafny.Rune> _328_field = _327___mcc_h14;
        DAM.Syntax._IStmt _329_record = _326___mcc_h13;
        DAM.Machine._IOutput _330_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_262_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_263_env, _329_record), DAM.Machine.Stack.create_Push(DAM.Machine.Frame.create_Select(_328_field), _265_stack)));
        return _330_output;
      } else if (_source28.is_Force) {
        DAM.Syntax._IExpr _331___mcc_h15 = _source28.dtor_Force_a0;
        DAM.Syntax._IExpr _332_thunk = _331___mcc_h15;
        DAM.Machine._IVal _333_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_263_env, _332_thunk));
        DAM.Machine._IOutput _334_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_262_store, (_333_val).dtor_closure, _265_stack));
        return _334_output;
      } else if (_source28.is_New) {
        DAM.Syntax._IExpr _335___mcc_h16 = _source28.dtor_init;
        Dafny.ISequence<Dafny.Rune> _336___mcc_h17 = _source28.dtor_var__;
        DAM.Syntax._IStmt _337___mcc_h18 = _source28.dtor_next;
        DAM.Syntax._IStmt _338_next = _337___mcc_h18;
        Dafny.ISequence<Dafny.Rune> _339_var__ = _336___mcc_h17;
        DAM.Syntax._IExpr _340_init = _335___mcc_h16;
        DAM.Machine._IVal _341_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_263_env, _340_init));
        _System._ITuple2<BigInteger, Dafny.ISequence<DAM.Machine._IVal>> _let_tmp_rhs6 = DAM.Utils.__default.Extend<DAM.Machine._IVal>(_262_store, _341_val);
        BigInteger _342_addr = _let_tmp_rhs6.dtor__0;
        Dafny.ISequence<DAM.Machine._IVal> _343_store_k = _let_tmp_rhs6.dtor__1;
        DAM.Machine._IOutput _344_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_343_store_k, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_263_env, _339_var__, DAM.Machine.Val.create_Ref(_342_addr)), _338_next), _265_stack));
        return _344_output;
      } else if (_source28.is_Read) {
        DAM.Syntax._IExpr _345___mcc_h19 = _source28.dtor_ref;
        Dafny.ISequence<Dafny.Rune> _346___mcc_h20 = _source28.dtor_var__;
        DAM.Syntax._IStmt _347___mcc_h21 = _source28.dtor_next;
        DAM.Syntax._IStmt _348_next = _347___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _349_var__ = _346___mcc_h20;
        DAM.Syntax._IExpr _350_ref = _345___mcc_h19;
        DAM.Machine._IVal _351_val = (_262_store).Select((DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_263_env, _350_ref))).dtor_addr);
        DAM.Machine._IOutput _352_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_262_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_263_env, _349_var__, _351_val), _348_next), _265_stack));
        return _352_output;
      } else if (_source28.is_Write) {
        DAM.Syntax._IExpr _353___mcc_h22 = _source28.dtor_lvalue;
        DAM.Syntax._IExpr _354___mcc_h23 = _source28.dtor_rvalue;
        DAM.Syntax._IStmt _355___mcc_h24 = _source28.dtor_next;
        DAM.Syntax._IStmt _356_next = _355___mcc_h24;
        DAM.Syntax._IExpr _357_rhs = _354___mcc_h23;
        DAM.Syntax._IExpr _358_lhs = _353___mcc_h22;
        BigInteger _359_lval = (DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_263_env, _358_lhs))).dtor_addr;
        DAM.Machine._IVal _360_rval = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_263_env, _357_rhs));
        DAM.Machine._IOutput _361_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(Dafny.Sequence<DAM.Machine._IVal>.Update(_262_store, _359_lval, _360_rval), _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_263_env, _356_next), _265_stack));
        return _361_output;
      } else if (_source28.is_Print) {
        DAM.Syntax._IExpr _362___mcc_h25 = _source28.dtor_Print_a0;
        DAM.Syntax._IStmt _363___mcc_h26 = _source28.dtor_next;
        DAM.Syntax._IStmt _364_next = _363___mcc_h26;
        DAM.Syntax._IExpr _365_expr = _362___mcc_h25;
        DAM.Machine._IVal _366_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_263_env, _365_expr));
        DAM.Machine._IOutput _367_output = DAM.Machine.Output.create_Raise(DAM.Machine.Event.create_Print(_366_val), _System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_262_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_263_env, _364_next), _265_stack));
        return _367_output;
      } else if (_source28.is_Rec) {
        Dafny.ISequence<Dafny.Rune> _368___mcc_h27 = _source28.dtor_bound;
        DAM.Syntax._INeg _369___mcc_h28 = _source28.dtor_fix;
        DAM.Syntax._IStmt _370___mcc_h29 = _source28.dtor_body;
        DAM.Syntax._IStmt _371_body = _370___mcc_h29;
        DAM.Syntax._INeg _372_fix = _369___mcc_h28;
        Dafny.ISequence<Dafny.Rune> _373_self = _368___mcc_h27;
        DAM.Machine._IVal _374_val = DAM.Machine.Val.create_Thunk(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_263_env, _264_stmt));
        DAM.Machine._IOutput _375_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_262_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_263_env, _373_self, _374_val), _371_body), _265_stack));
        return _375_output;
      } else if (_source28.is_LetCS) {
        Dafny.ISequence<Dafny.Rune> _376___mcc_h30 = _source28.dtor_bound;
        DAM.Syntax._INeg _377___mcc_h31 = _source28.dtor_start;
        DAM.Syntax._IStmt _378___mcc_h32 = _source28.dtor_body;
        DAM.Syntax._IStmt _379_body = _378___mcc_h32;
        DAM.Syntax._INeg _380_start = _377___mcc_h31;
        Dafny.ISequence<Dafny.Rune> _381_bound = _376___mcc_h30;
        DAM.Machine._IOutput _382_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_262_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_263_env, _381_bound, DAM.Machine.Val.create_Stack(_380_start, _265_stack)), _379_body), _265_stack));
        return _382_output;
      } else {
        DAM.Syntax._IExpr _383___mcc_h33 = _source28.dtor_stack;
        DAM.Syntax._INeg _384___mcc_h34 = _source28.dtor_oldstart;
        DAM.Syntax._IStmt _385___mcc_h35 = _source28.dtor_next;
        DAM.Syntax._IStmt _386_next = _385___mcc_h35;
        DAM.Syntax._IExpr _387_expr = _383___mcc_h33;
        DAM.Machine._IVal _388_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_263_env, _387_expr));
        DAM.Machine._IOutput _389_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_262_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_263_env, _386_next), (_388_val).dtor_stack));
        return _389_output;
      }
    }
    public static _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> Initial(DAM.Syntax._IStmt stmt) {
      return _System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(Dafny.Sequence<DAM.Machine._IVal>.FromElements(), _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.FromElements(), stmt), DAM.Machine.Stack.create_Empty());
    }
    public static DAM.Dynamics._ITrace Run(_System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> input) {
      DAM.Machine._IOutput _source39 = DAM.Dynamics.__default.Step(input);
      if (_source39.is_Raise) {
        DAM.Machine._IEvent _390___mcc_h0 = _source39.dtor_event;
        _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _391___mcc_h1 = _source39.dtor_next;
        _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _392_next = _391___mcc_h1;
        DAM.Machine._IEvent _393_evt = _390___mcc_h0;
        return new DAM.Dynamics.Trace__Lazy(() => { return new DAM.Dynamics.Trace_Stepping(_393_evt, _392_next, DAM.Dynamics.__default.Run(_392_next)); });
      } else {
        return DAM.Dynamics.Trace.create_Done();
      }
    }
    public static DAM.Utils._IOption<DAM.Dynamics._ITrace> RunSafe(DAM.Syntax._IStmt stmt) {
      DAM.Utils._IOption<DAM.Syntax._INeg> _394_valueOrError0 = DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.FromElements(), stmt);
      if ((_394_valueOrError0).IsFailure()) {
        return (_394_valueOrError0).PropagateFailure<DAM.Dynamics._ITrace>();
      } else {
        DAM.Syntax._INeg _395_end = (_394_valueOrError0).Extract();
        return DAM.Utils.Option<DAM.Dynamics._ITrace>.create_Some(DAM.Dynamics.__default.Run(DAM.Dynamics.__default.Initial(stmt)));
      }
    }
    public static DAM.Dynamics._ITrace RunUnsafe(DAM.Syntax._IStmt stmt) {
      return DAM.Dynamics.__default.Run(DAM.Dynamics.__default.Initial(stmt));
    }
    public static void PrintVal(DAM.Machine._IVal val) {
      DAM.Machine._IVal _source40 = val;
      if (_source40.is_Unit) {
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()\n")).ToVerbatimString(false));
      } else if (_source40.is_Bool) {
        bool _396___mcc_h0 = _source40.dtor_answer;
        bool _397_b = _396___mcc_h0;
        Dafny.Helpers.Print((_397_b));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      } else if (_source40.is_Int) {
        BigInteger _398___mcc_h2 = _source40.dtor_number;
        BigInteger _399_i = _398___mcc_h2;
        Dafny.Helpers.Print((_399_i));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      } else if (_source40.is_Thunk) {
        _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _400___mcc_h4 = _source40.dtor_closure;
        Dafny.Helpers.Print((val));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      } else if (_source40.is_Ref) {
        BigInteger _401___mcc_h6 = _source40.dtor_addr;
        Dafny.Helpers.Print((val));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      } else {
        DAM.Syntax._INeg _402___mcc_h8 = _source40.dtor_start;
        DAM.Machine._IStack _403___mcc_h9 = _source40.dtor_stack;
        Dafny.Helpers.Print((val));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      }
    }
    public static void Interpret(DAM.Syntax._IStmt stmt, bool traced) {
      DAM.Utils._IOption<DAM.Syntax._INeg> _404_endOption;
      _404_endOption = DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.FromElements(), stmt);
      if ((_404_endOption).is_None) {
        if (traced) {
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Statement fails to typecheck.\n")).ToVerbatimString(false));
        }
        return;
      }
      DAM.Syntax._INeg _405_end;
      _405_end = (_404_endOption).Extract();
      _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _406_input;
      _406_input = DAM.Dynamics.__default.Initial(stmt);
      while (true) {
        DAM.Machine._IOutput _source41 = DAM.Dynamics.__default.Step(_406_input);
        if (_source41.is_Raise) {
          DAM.Machine._IEvent _407___mcc_h0 = _source41.dtor_event;
          _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _408___mcc_h1 = _source41.dtor_next;
          _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _409_output = _408___mcc_h1;
          DAM.Machine._IEvent _410_evt = _407___mcc_h0;
          if (traced) {
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("event: ")).ToVerbatimString(false));
            Dafny.Helpers.Print((_410_evt));
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", state: ")).ToVerbatimString(false));
            Dafny.Helpers.Print((_409_output));
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n\n")).ToVerbatimString(false));
          } else {
            DAM.Machine._IEvent _source42 = _410_evt;
            if (_source42.is_Silent) {
            } else {
              DAM.Machine._IVal _411___mcc_h2 = _source42.dtor_Print_a0;
              DAM.Machine._IVal _412_val = _411___mcc_h2;
              DAM.Dynamics.__default.PrintVal(_412_val);
            }
          }
          _406_input = _409_output;
        } else {
          if (traced) {
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("done.\n")).ToVerbatimString(false));
          }
          goto after_0;
        }
      continue_0:;
      }
    after_0:;
    }
    public static void Test() {
      DAM.Syntax._IExpr _413_fc;
      _413_fc = DAM.Syntax.Expr.create_Thunk(DAM.Syntax.Stmt.create_Func(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("y"), DAM.Syntax.Pos.create_Int(), DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("x")))));
      DAM.Syntax._IStmt _414_fv;
      _414_fv = DAM.Syntax.Stmt.create_Force(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("f")));
      DAM.Syntax._IExpr _415_x1;
      _415_x1 = DAM.Syntax.Expr.create_Int(BigInteger.One);
      DAM.Syntax._IExpr _416_x2;
      _416_x2 = DAM.Syntax.Expr.create_Int(new BigInteger(2));
      DAM.Syntax._IExpr _417_z;
      _417_z = DAM.Syntax.Expr.create_Int(BigInteger.Zero);
      DAM.Syntax._IStmt _418_term;
      _418_term = DAM.Syntax.__default.Let(_415_x1, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("x"), DAM.Syntax.Pos.create_Int(), DAM.Syntax.__default.Let(_413_fc, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("f"), DAM.Syntax.Pos.create_Int(), DAM.Syntax.__default.Let(_416_x2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("x"), DAM.Syntax.Pos.create_Int(), DAM.Syntax.Stmt.create_Call(_414_fv, _417_z))));
    }
  }

  public interface _ITrace {
    _ITrace _Get();
    bool is_Stepping { get; }
    bool is_Done { get; }
    DAM.Machine._IEvent dtor_Stepping_a0 { get; }
    _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> dtor_Stepping_a1 { get; }
    DAM.Dynamics._ITrace dtor_Stepping_a2 { get; }
    _ITrace DowncastClone();
  }
  public abstract class Trace : _ITrace {
    public Trace() {
    }
    private static readonly DAM.Dynamics._ITrace theDefault = new DAM.Dynamics.Trace__Lazy(() => { return create_Stepping(DAM.Machine.Event.Default(), _System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.Default(Dafny.Sequence<DAM.Machine._IVal>.Empty, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.Default(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Empty, DAM.Syntax.Stmt.Default()), DAM.Machine.Stack.Default()), DAM.Dynamics.Trace.Default()); });
    public static DAM.Dynamics._ITrace Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Dynamics._ITrace> _TYPE = new Dafny.TypeDescriptor<DAM.Dynamics._ITrace>(DAM.Dynamics.Trace.Default());
    public static Dafny.TypeDescriptor<DAM.Dynamics._ITrace> _TypeDescriptor() {
      return _TYPE;
    }
    public abstract _ITrace _Get();
    public static _ITrace create_Stepping(DAM.Machine._IEvent _a0, _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _a1, DAM.Dynamics._ITrace _a2) {
      return new Trace_Stepping(_a0, _a1, _a2);
    }
    public static _ITrace create_Done() {
      return new Trace_Done();
    }
    public bool is_Stepping { get { return this is Trace_Stepping; } }
    public bool is_Done { get { return this is Trace_Done; } }
    public DAM.Machine._IEvent dtor_Stepping_a0 {
      get {
        var d = this._Get();
        return ((Trace_Stepping)d)._a0;
      }
    }
    public _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> dtor_Stepping_a1 {
      get {
        var d = this._Get();
        return ((Trace_Stepping)d)._a1;
      }
    }
    public DAM.Dynamics._ITrace dtor_Stepping_a2 {
      get {
        var d = this._Get();
        return ((Trace_Stepping)d)._a2;
      }
    }
    public abstract _ITrace DowncastClone();
  }
  public class Trace__Lazy : Trace {
    public delegate _ITrace Computer();
    Computer c;
    _ITrace d;
    public Trace__Lazy(Computer c) : base() {
      this.c = c;
    }
    public override _ITrace DowncastClone() {
      if (this is _ITrace dt) { return dt; }
      return new DAM.Dynamics.Trace__Lazy(() => _Get().DowncastClone());
    }
    public override _ITrace _Get() { if (c != null) { d = c(); c = null; } return d; }
    public override string ToString() { return _Get().ToString(); }
  }
  public class Trace_Stepping : Trace {
    public readonly DAM.Machine._IEvent _a0;
    public readonly _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _a1;
    public readonly DAM.Dynamics._ITrace _a2;
    public Trace_Stepping(DAM.Machine._IEvent _a0, _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _a1, DAM.Dynamics._ITrace _a2) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
      this._a2 = _a2;
    }
    public override _ITrace _Get() { return this; }
    public override _ITrace DowncastClone() {
      if (this is _ITrace dt) { return dt; }
      return new Trace_Stepping(_a0, _a1, _a2);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Dynamics.Trace_Stepping;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1) && object.Equals(this._a2, oth._a2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a2));
      return (int)hash;
    }
    public override string ToString() {
      return "Dynamics.Trace.Stepping";
    }
  }
  public class Trace_Done : Trace {
    public Trace_Done() : base() {
    }
    public override _ITrace _Get() { return this; }
    public override _ITrace DowncastClone() {
      if (this is _ITrace dt) { return dt; }
      return new Trace_Done();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Dynamics.Trace_Done;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      return "Dynamics.Trace.Done";
    }
  }
} // end of namespace DAM.Dynamics


namespace D2DPrettyPrinter {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> PrettyPrint(Dafny.ISequence<DAST._IModule> d) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _hi0 = new BigInteger((d).Count);
      for (BigInteger _419_i = BigInteger.Zero; _419_i < _hi0; _419_i++) {
        Dafny.ISequence<Dafny.Rune> _420_s_k;
        Dafny.ISequence<Dafny.Rune> _out1;
        _out1 = D2DPrettyPrinter.__default.PModule((d).Select(_419_i));
        _420_s_k = _out1;
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _420_s_k);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PModule(DAST._IModule mod) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("module "), (mod).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      BigInteger _hi1 = new BigInteger(((mod).dtor_body).Count);
      for (BigInteger _421_i = BigInteger.Zero; _421_i < _hi1; _421_i++) {
        DAST._IModuleItem _source43 = ((mod).dtor_body).Select(_421_i);
        if (_source43.is_Module) {
          DAST._IModule _422___mcc_h0 = _source43.dtor_Module_a0;
          DAST._IModule _423_m = _422___mcc_h0;
          Dafny.ISequence<Dafny.Rune> _424_s_k;
          Dafny.ISequence<Dafny.Rune> _out2;
          _out2 = D2DPrettyPrinter.__default.PModule(_423_m);
          _424_s_k = _out2;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _424_s_k);
        } else if (_source43.is_Class) {
          DAST._IClass _425___mcc_h1 = _source43.dtor_Class_a0;
          DAST._IClass _426_c = _425___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _427_s_k;
          Dafny.ISequence<Dafny.Rune> _out3;
          _out3 = D2DPrettyPrinter.__default.PClass(_426_c);
          _427_s_k = _out3;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _427_s_k);
        } else if (_source43.is_Trait) {
          DAST._ITrait _428___mcc_h2 = _source43.dtor_Trait_a0;
          DAST._ITrait _429_c = _428___mcc_h2;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        } else if (_source43.is_Newtype) {
          DAST._INewtype _430___mcc_h3 = _source43.dtor_Newtype_a0;
          DAST._INewtype _431_n = _430___mcc_h3;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        } else {
          DAST._IDatatype _432___mcc_h4 = _source43.dtor_Datatype_a0;
          DAST._IDatatype _433_d = _432___mcc_h4;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        }
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PClass(DAST._IClass c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("class "), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      BigInteger _hi2 = new BigInteger(((c).dtor_body).Count);
      for (BigInteger _434_i = BigInteger.Zero; _434_i < _hi2; _434_i++) {
        DAST._IMethod _source44 = ((c).dtor_body).Select(_434_i);
        DAST._IMethod _435___mcc_h0 = _source44;
        DAST._IMethod _436_m = _435___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _437_s_k;
        Dafny.ISequence<Dafny.Rune> _out4;
        _out4 = D2DPrettyPrinter.__default.PMethod(_436_m);
        _437_s_k = _out4;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _437_s_k), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PMethod(DAST._IMethod meth) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("method "), (meth).dtor_name);
      Dafny.ISequence<Dafny.Rune> _438_s_k;
      Dafny.ISequence<Dafny.Rune> _out5;
      _out5 = D2DPrettyPrinter.__default.PFormals((meth).dtor_params, (meth).dtor_typeParams);
      _438_s_k = _out5;
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, _438_s_k);
      Dafny.ISequence<Dafny.Rune> _out6;
      _out6 = D2DPrettyPrinter.__default.PBlock((meth).dtor_body);
      _438_s_k = _out6;
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, _438_s_k);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PFormals(Dafny.ISequence<DAST._IFormal> names, Dafny.ISequence<DAST._IType> types) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
      BigInteger _hi3 = new BigInteger((names).Count);
      for (BigInteger _439_i = BigInteger.Zero; _439_i < _hi3; _439_i++) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, ((names).Select(_439_i)).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": _,"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PBlock(Dafny.ISequence<DAST._IStatement> stmt) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((stmt).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
      }
      BigInteger _hi4 = new BigInteger((stmt).Count);
      for (BigInteger _440_i = BigInteger.Zero; _440_i < _hi4; _440_i++) {
        Dafny.ISequence<Dafny.Rune> _441_s_k;
        Dafny.ISequence<Dafny.Rune> _out7;
        _out7 = D2DPrettyPrinter.__default.PStatement((stmt).Select(_440_i));
        _441_s_k = _out7;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _441_s_k), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      }
      if ((new BigInteger((stmt).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PStatement(DAST._IStatement st) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IStatement _source45 = st;
      if (_source45.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _442___mcc_h0 = _source45.dtor_name;
        DAST._IType _443___mcc_h1 = _source45.dtor_typ;
        DAST._IOptional<DAST._IExpression> _444___mcc_h2 = _source45.dtor_maybeValue;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_Assign) {
        DAST._IAssignLhs _445___mcc_h6 = _source45.dtor_lhs;
        DAST._IExpression _446___mcc_h7 = _source45.dtor_value;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_If) {
        DAST._IExpression _447___mcc_h10 = _source45.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _448___mcc_h11 = _source45.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _449___mcc_h12 = _source45.dtor_els;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _450___mcc_h16 = _source45.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _451___mcc_h17 = _source45.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_While) {
        DAST._IExpression _452___mcc_h20 = _source45.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _453___mcc_h21 = _source45.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _454___mcc_h24 = _source45.dtor_boundName;
        DAST._IType _455___mcc_h25 = _source45.dtor_boundType;
        DAST._IExpression _456___mcc_h26 = _source45.dtor_over;
        Dafny.ISequence<DAST._IStatement> _457___mcc_h27 = _source45.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_Call) {
        DAST._IExpression _458___mcc_h32 = _source45.dtor_on;
        Dafny.ISequence<Dafny.Rune> _459___mcc_h33 = _source45.dtor_name;
        Dafny.ISequence<DAST._IType> _460___mcc_h34 = _source45.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _461___mcc_h35 = _source45.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _462___mcc_h36 = _source45.dtor_outs;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_Return) {
        DAST._IExpression _463___mcc_h42 = _source45.dtor_expr;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_EarlyReturn) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return");
      } else if (_source45.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _464___mcc_h44 = _source45.dtor_toLabel;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _465___mcc_h46 = _source45.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_JumpTailCallStart) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_Halt) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else {
        DAST._IExpression _466___mcc_h48 = _source45.dtor_Print_a0;
        DAST._IExpression _467_e = _466___mcc_h48;
        Dafny.ISequence<Dafny.Rune> _468_s_k;
        Dafny.ISequence<Dafny.Rune> _out8;
        _out8 = D2DPrettyPrinter.__default.PExpression(_467_e);
        _468_s_k = _out8;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print "), _468_s_k);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PExpression(DAST._IExpression e) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IExpression _source46 = e;
      if (_source46.is_Literal) {
        DAST._ILiteral _469___mcc_h0 = _source46.dtor_Literal_a0;
        DAST._ILiteral _470_l = _469___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _out9;
        _out9 = D2DPrettyPrinter.__default.PLiteral(_470_l);
        s = _out9;
      } else if (_source46.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _471___mcc_h2 = _source46.dtor_Ident_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _472___mcc_h4 = _source46.dtor_Companion_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _473___mcc_h6 = _source46.dtor_Tuple_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _474___mcc_h8 = _source46.dtor_path;
        Dafny.ISequence<DAST._IType> _475___mcc_h9 = _source46.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _476___mcc_h10 = _source46.dtor_args;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _477___mcc_h14 = _source46.dtor_dims;
        DAST._IType _478___mcc_h15 = _source46.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _479___mcc_h18 = _source46.dtor_path;
        Dafny.ISequence<DAST._IType> _480___mcc_h19 = _source46.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _481___mcc_h20 = _source46.dtor_variant;
        bool _482___mcc_h21 = _source46.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _483___mcc_h22 = _source46.dtor_contents;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_Convert) {
        DAST._IExpression _484___mcc_h28 = _source46.dtor_value;
        DAST._IType _485___mcc_h29 = _source46.dtor_from;
        DAST._IType _486___mcc_h30 = _source46.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_SeqConstruct) {
        DAST._IExpression _487___mcc_h34 = _source46.dtor_length;
        DAST._IExpression _488___mcc_h35 = _source46.dtor_elem;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _489___mcc_h38 = _source46.dtor_elements;
        DAST._IType _490___mcc_h39 = _source46.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _491___mcc_h42 = _source46.dtor_elements;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _492___mcc_h44 = _source46.dtor_mapElems;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_This) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_Ite) {
        DAST._IExpression _493___mcc_h46 = _source46.dtor_cond;
        DAST._IExpression _494___mcc_h47 = _source46.dtor_thn;
        DAST._IExpression _495___mcc_h48 = _source46.dtor_els;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_UnOp) {
        DAST._IUnaryOp _496___mcc_h52 = _source46.dtor_unOp;
        DAST._IExpression _497___mcc_h53 = _source46.dtor_expr;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_BinOp) {
        DAST._IBinOp _498___mcc_h56 = _source46.dtor_op;
        DAST._IExpression _499___mcc_h57 = _source46.dtor_left;
        DAST._IExpression _500___mcc_h58 = _source46.dtor_right;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_ArrayLen) {
        DAST._IExpression _501___mcc_h62 = _source46.dtor_expr;
        BigInteger _502___mcc_h63 = _source46.dtor_dim;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_Select) {
        DAST._IExpression _503___mcc_h66 = _source46.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _504___mcc_h67 = _source46.dtor_field;
        bool _505___mcc_h68 = _source46.dtor_isConstant;
        bool _506___mcc_h69 = _source46.dtor_onDatatype;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_SelectFn) {
        DAST._IExpression _507___mcc_h74 = _source46.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _508___mcc_h75 = _source46.dtor_field;
        bool _509___mcc_h76 = _source46.dtor_onDatatype;
        bool _510___mcc_h77 = _source46.dtor_isStatic;
        BigInteger _511___mcc_h78 = _source46.dtor_arity;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_Index) {
        DAST._IExpression _512___mcc_h84 = _source46.dtor_expr;
        DAST._ICollKind _513___mcc_h85 = _source46.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _514___mcc_h86 = _source46.dtor_indices;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_IndexRange) {
        DAST._IExpression _515___mcc_h90 = _source46.dtor_expr;
        bool _516___mcc_h91 = _source46.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _517___mcc_h92 = _source46.dtor_low;
        DAST._IOptional<DAST._IExpression> _518___mcc_h93 = _source46.dtor_high;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_TupleSelect) {
        DAST._IExpression _519___mcc_h98 = _source46.dtor_expr;
        BigInteger _520___mcc_h99 = _source46.dtor_index;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_Call) {
        DAST._IExpression _521___mcc_h102 = _source46.dtor_on;
        Dafny.ISequence<Dafny.Rune> _522___mcc_h103 = _source46.dtor_name;
        Dafny.ISequence<DAST._IType> _523___mcc_h104 = _source46.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _524___mcc_h105 = _source46.dtor_args;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _525___mcc_h110 = _source46.dtor_params;
        DAST._IType _526___mcc_h111 = _source46.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _527___mcc_h112 = _source46.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _528___mcc_h116 = _source46.dtor_values;
        DAST._IType _529___mcc_h117 = _source46.dtor_retType;
        DAST._IExpression _530___mcc_h118 = _source46.dtor_expr;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _531___mcc_h122 = _source46.dtor_name;
        DAST._IType _532___mcc_h123 = _source46.dtor_typ;
        DAST._IExpression _533___mcc_h124 = _source46.dtor_value;
        DAST._IExpression _534___mcc_h125 = _source46.dtor_iifeBody;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_Apply) {
        DAST._IExpression _535___mcc_h130 = _source46.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _536___mcc_h131 = _source46.dtor_args;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_TypeTest) {
        DAST._IExpression _537___mcc_h134 = _source46.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _538___mcc_h135 = _source46.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _539___mcc_h136 = _source46.dtor_variant;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_InitializationValue) {
        DAST._IType _540___mcc_h140 = _source46.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_BoolBoundedPool) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_SetBoundedPool) {
        DAST._IExpression _541___mcc_h142 = _source46.dtor_of;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_SeqBoundedPool) {
        DAST._IExpression _542___mcc_h144 = _source46.dtor_of;
        bool _543___mcc_h145 = _source46.dtor_includeDuplicates;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else {
        DAST._IExpression _544___mcc_h148 = _source46.dtor_lo;
        DAST._IExpression _545___mcc_h149 = _source46.dtor_hi;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PLiteral(DAST._ILiteral l) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._ILiteral _source47 = l;
      if (_source47.is_BoolLiteral) {
        bool _546___mcc_h0 = _source47.dtor_BoolLiteral_a0;
        bool _547_b = _546___mcc_h0;
        s = ((_547_b) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")));
      } else if (_source47.is_IntLiteral) {
        Dafny.ISequence<Dafny.Rune> _548___mcc_h1 = _source47.dtor_IntLiteral_a0;
        DAST._IType _549___mcc_h2 = _source47.dtor_IntLiteral_a1;
        Dafny.ISequence<Dafny.Rune> _550_i = _548___mcc_h1;
        s = _550_i;
      } else if (_source47.is_DecLiteral) {
        Dafny.ISequence<Dafny.Rune> _551___mcc_h3 = _source47.dtor_DecLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _552___mcc_h4 = _source47.dtor_DecLiteral_a1;
        DAST._IType _553___mcc_h5 = _source47.dtor_DecLiteral_a2;
        Dafny.ISequence<Dafny.Rune> _554_r = _552___mcc_h4;
        Dafny.ISequence<Dafny.Rune> _555_l = _551___mcc_h3;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_555_l, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _554_r);
      } else if (_source47.is_StringLiteral) {
        Dafny.ISequence<Dafny.Rune> _556___mcc_h6 = _source47.dtor_StringLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _557_s_k = _556___mcc_h6;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""), _557_s_k), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""));
      } else if (_source47.is_CharLiteral) {
        Dafny.Rune _558___mcc_h7 = _source47.dtor_CharLiteral_a0;
        Dafny.Rune _559_c = _558___mcc_h7;
        s = Dafny.Sequence<Dafny.Rune>.FromElements(_559_c);
      } else {
        DAST._IType _560___mcc_h8 = _source47.dtor_Null_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("null");
      }
      return s;
    }
  }
} // end of namespace D2DPrettyPrinter
namespace Std.Wrappers {

  public partial class __default {
    public static Std.Wrappers._IOutcomeResult<__E> Need<__E>(bool condition, __E error) {
      if (condition) {
        return Std.Wrappers.OutcomeResult<__E>.create_Pass_k();
      } else {
        return Std.Wrappers.OutcomeResult<__E>.create_Fail_k(error);
      }
    }
  }

  public interface _IOption<out T> {
    bool is_None { get; }
    bool is_Some { get; }
    T dtor_value { get; }
    _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0);
    bool IsFailure();
    Std.Wrappers._IOption<__U> PropagateFailure<__U>();
    T Extract();
    Std.Wrappers._IResult<T, __E> ToResult<__E>(__E error);
    Std.Wrappers._IOutcome<__E> ToOutcome<__E>(__E error);
  }
  public abstract class Option<T> : _IOption<T> {
    public Option() {
    }
    public static Std.Wrappers._IOption<T> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOption<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOption<T>>(Std.Wrappers.Option<T>.Default());
    }
    public static _IOption<T> create_None() {
      return new Option_None<T>();
    }
    public static _IOption<T> create_Some(T @value) {
      return new Option_Some<T>(@value);
    }
    public bool is_None { get { return this is Option_None<T>; } }
    public bool is_Some { get { return this is Option_Some<T>; } }
    public T dtor_value {
      get {
        var d = this;
        return ((Option_Some<T>)d)._value;
      }
    }
    public abstract _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0);
    public bool IsFailure() {
      return (this).is_None;
    }
    public Std.Wrappers._IOption<__U> PropagateFailure<__U>() {
      return Std.Wrappers.Option<__U>.create_None();
    }
    public T Extract() {
      return (this).dtor_value;
    }
    public static T GetOr(Std.Wrappers._IOption<T> _this, T @default) {
      Std.Wrappers._IOption<T> _source48 = _this;
      if (_source48.is_None) {
        return @default;
      } else {
        T _561___mcc_h0 = _source48.dtor_value;
        T _562_v = _561___mcc_h0;
        return _562_v;
      }
    }
    public Std.Wrappers._IResult<T, __E> ToResult<__E>(__E error) {
      Std.Wrappers._IOption<T> _source49 = this;
      if (_source49.is_None) {
        return Std.Wrappers.Result<T, __E>.create_Failure(error);
      } else {
        T _563___mcc_h0 = _source49.dtor_value;
        T _564_v = _563___mcc_h0;
        return Std.Wrappers.Result<T, __E>.create_Success(_564_v);
      }
    }
    public Std.Wrappers._IOutcome<__E> ToOutcome<__E>(__E error) {
      Std.Wrappers._IOption<T> _source50 = this;
      if (_source50.is_None) {
        return Std.Wrappers.Outcome<__E>.create_Fail(error);
      } else {
        T _565___mcc_h0 = _source50.dtor_value;
        T _566_v = _565___mcc_h0;
        return Std.Wrappers.Outcome<__E>.create_Pass();
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IOption<T> _this, Func<Std.Wrappers._IOption<T>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IOption<T>, __FC>>(rewrap)(_this);
    }
  }
  public class Option_None<T> : Option<T> {
    public Option_None() : base() {
    }
    public override _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOption<__T> dt) { return dt; }
      return new Option_None<__T>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Option_None<T>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Option.None";
      return s;
    }
  }
  public class Option_Some<T> : Option<T> {
    public readonly T _value;
    public Option_Some(T @value) : base() {
      this._value = @value;
    }
    public override _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOption<__T> dt) { return dt; }
      return new Option_Some<__T>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Option_Some<T>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Option.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }

  public interface _IResult<out R, out E> {
    bool is_Success { get; }
    bool is_Failure { get; }
    R dtor_value { get; }
    E dtor_error { get; }
    _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1);
    bool IsFailure();
    Std.Wrappers._IResult<__U, E> PropagateFailure<__U>();
    R Extract();
    Std.Wrappers._IOption<R> ToOption();
    Std.Wrappers._IOutcome<E> ToOutcome();
  }
  public abstract class Result<R, E> : _IResult<R, E> {
    public Result() {
    }
    public static Std.Wrappers._IResult<R, E> Default(R _default_R) {
      return create_Success(_default_R);
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IResult<R, E>> _TypeDescriptor(Dafny.TypeDescriptor<R> _td_R) {
      return new Dafny.TypeDescriptor<Std.Wrappers._IResult<R, E>>(Std.Wrappers.Result<R, E>.Default(_td_R.Default()));
    }
    public static _IResult<R, E> create_Success(R @value) {
      return new Result_Success<R, E>(@value);
    }
    public static _IResult<R, E> create_Failure(E error) {
      return new Result_Failure<R, E>(error);
    }
    public bool is_Success { get { return this is Result_Success<R, E>; } }
    public bool is_Failure { get { return this is Result_Failure<R, E>; } }
    public R dtor_value {
      get {
        var d = this;
        return ((Result_Success<R, E>)d)._value;
      }
    }
    public E dtor_error {
      get {
        var d = this;
        return ((Result_Failure<R, E>)d)._error;
      }
    }
    public abstract _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1);
    public bool IsFailure() {
      return (this).is_Failure;
    }
    public Std.Wrappers._IResult<__U, E> PropagateFailure<__U>() {
      return Std.Wrappers.Result<__U, E>.create_Failure((this).dtor_error);
    }
    public R Extract() {
      return (this).dtor_value;
    }
    public static R GetOr(Std.Wrappers._IResult<R, E> _this, R @default) {
      Std.Wrappers._IResult<R, E> _source51 = _this;
      if (_source51.is_Success) {
        R _567___mcc_h0 = _source51.dtor_value;
        R _568_s = _567___mcc_h0;
        return _568_s;
      } else {
        E _569___mcc_h1 = _source51.dtor_error;
        E _570_e = _569___mcc_h1;
        return @default;
      }
    }
    public Std.Wrappers._IOption<R> ToOption() {
      Std.Wrappers._IResult<R, E> _source52 = this;
      if (_source52.is_Success) {
        R _571___mcc_h0 = _source52.dtor_value;
        R _572_s = _571___mcc_h0;
        return Std.Wrappers.Option<R>.create_Some(_572_s);
      } else {
        E _573___mcc_h1 = _source52.dtor_error;
        E _574_e = _573___mcc_h1;
        return Std.Wrappers.Option<R>.create_None();
      }
    }
    public Std.Wrappers._IOutcome<E> ToOutcome() {
      Std.Wrappers._IResult<R, E> _source53 = this;
      if (_source53.is_Success) {
        R _575___mcc_h0 = _source53.dtor_value;
        R _576_s = _575___mcc_h0;
        return Std.Wrappers.Outcome<E>.create_Pass();
      } else {
        E _577___mcc_h1 = _source53.dtor_error;
        E _578_e = _577___mcc_h1;
        return Std.Wrappers.Outcome<E>.create_Fail(_578_e);
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IResult<R, E> _this, Func<Std.Wrappers._IResult<R, E>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IResult<R, E>, __FC>>(rewrap)(_this);
    }
    public static Std.Wrappers._IResult<R, __NewE> MapFailure<__NewE>(Std.Wrappers._IResult<R, E> _this, Func<E, __NewE> reWrap) {
      Std.Wrappers._IResult<R, E> _source54 = _this;
      if (_source54.is_Success) {
        R _579___mcc_h0 = _source54.dtor_value;
        R _580_s = _579___mcc_h0;
        return Std.Wrappers.Result<R, __NewE>.create_Success(_580_s);
      } else {
        E _581___mcc_h1 = _source54.dtor_error;
        E _582_e = _581___mcc_h1;
        return Std.Wrappers.Result<R, __NewE>.create_Failure(Dafny.Helpers.Id<Func<E, __NewE>>(reWrap)(_582_e));
      }
    }
  }
  public class Result_Success<R, E> : Result<R, E> {
    public readonly R _value;
    public Result_Success(R @value) : base() {
      this._value = @value;
    }
    public override _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1) {
      if (this is _IResult<__R, __E> dt) { return dt; }
      return new Result_Success<__R, __E>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Result_Success<R, E>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Result.Success";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Result_Failure<R, E> : Result<R, E> {
    public readonly E _error;
    public Result_Failure(E error) : base() {
      this._error = error;
    }
    public override _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1) {
      if (this is _IResult<__R, __E> dt) { return dt; }
      return new Result_Failure<__R, __E>(converter1(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Result_Failure<R, E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Result.Failure";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }

  public interface _IOutcome<out E> {
    bool is_Pass { get; }
    bool is_Fail { get; }
    E dtor_error { get; }
    _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0);
    bool IsFailure();
    Std.Wrappers._IOutcome<E> PropagateFailure();
    Std.Wrappers._IOption<__R> ToOption<__R>(__R r);
    Std.Wrappers._IResult<__R, E> ToResult<__R>(__R r);
  }
  public abstract class Outcome<E> : _IOutcome<E> {
    public Outcome() {
    }
    public static Std.Wrappers._IOutcome<E> Default() {
      return create_Pass();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOutcome<E>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOutcome<E>>(Std.Wrappers.Outcome<E>.Default());
    }
    public static _IOutcome<E> create_Pass() {
      return new Outcome_Pass<E>();
    }
    public static _IOutcome<E> create_Fail(E error) {
      return new Outcome_Fail<E>(error);
    }
    public bool is_Pass { get { return this is Outcome_Pass<E>; } }
    public bool is_Fail { get { return this is Outcome_Fail<E>; } }
    public E dtor_error {
      get {
        var d = this;
        return ((Outcome_Fail<E>)d)._error;
      }
    }
    public abstract _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0);
    public bool IsFailure() {
      return (this).is_Fail;
    }
    public Std.Wrappers._IOutcome<E> PropagateFailure() {
      return this;
    }
    public Std.Wrappers._IOption<__R> ToOption<__R>(__R r) {
      Std.Wrappers._IOutcome<E> _source55 = this;
      if (_source55.is_Pass) {
        return Std.Wrappers.Option<__R>.create_Some(r);
      } else {
        E _583___mcc_h0 = _source55.dtor_error;
        E _584_e = _583___mcc_h0;
        return Std.Wrappers.Option<__R>.create_None();
      }
    }
    public Std.Wrappers._IResult<__R, E> ToResult<__R>(__R r) {
      Std.Wrappers._IOutcome<E> _source56 = this;
      if (_source56.is_Pass) {
        return Std.Wrappers.Result<__R, E>.create_Success(r);
      } else {
        E _585___mcc_h0 = _source56.dtor_error;
        E _586_e = _585___mcc_h0;
        return Std.Wrappers.Result<__R, E>.create_Failure(_586_e);
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IOutcome<E> _this, Func<Std.Wrappers._IOutcome<E>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IOutcome<E>, __FC>>(rewrap)(_this);
    }
    public static Std.Wrappers._IResult<__T, __NewE> MapFailure<__T, __NewE>(Std.Wrappers._IOutcome<E> _this, Func<E, __NewE> rewrap, __T @default) {
      Std.Wrappers._IOutcome<E> _source57 = _this;
      if (_source57.is_Pass) {
        return Std.Wrappers.Result<__T, __NewE>.create_Success(@default);
      } else {
        E _587___mcc_h0 = _source57.dtor_error;
        E _588_e = _587___mcc_h0;
        return Std.Wrappers.Result<__T, __NewE>.create_Failure(Dafny.Helpers.Id<Func<E, __NewE>>(rewrap)(_588_e));
      }
    }
    public static Std.Wrappers._IOutcome<E> Need(bool condition, E error) {
      if (condition) {
        return Std.Wrappers.Outcome<E>.create_Pass();
      } else {
        return Std.Wrappers.Outcome<E>.create_Fail(error);
      }
    }
  }
  public class Outcome_Pass<E> : Outcome<E> {
    public Outcome_Pass() : base() {
    }
    public override _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcome<__E> dt) { return dt; }
      return new Outcome_Pass<__E>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Outcome_Pass<E>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Outcome.Pass";
      return s;
    }
  }
  public class Outcome_Fail<E> : Outcome<E> {
    public readonly E _error;
    public Outcome_Fail(E error) : base() {
      this._error = error;
    }
    public override _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcome<__E> dt) { return dt; }
      return new Outcome_Fail<__E>(converter0(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Outcome_Fail<E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Outcome.Fail";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }

  public interface _IOutcomeResult<out E> {
    bool is_Pass_k { get; }
    bool is_Fail_k { get; }
    E dtor_error { get; }
    _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0);
    bool IsFailure();
    Std.Wrappers._IResult<__U, E> PropagateFailure<__U>();
  }
  public abstract class OutcomeResult<E> : _IOutcomeResult<E> {
    public OutcomeResult() {
    }
    public static Std.Wrappers._IOutcomeResult<E> Default() {
      return create_Pass_k();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOutcomeResult<E>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOutcomeResult<E>>(Std.Wrappers.OutcomeResult<E>.Default());
    }
    public static _IOutcomeResult<E> create_Pass_k() {
      return new OutcomeResult_Pass_k<E>();
    }
    public static _IOutcomeResult<E> create_Fail_k(E error) {
      return new OutcomeResult_Fail_k<E>(error);
    }
    public bool is_Pass_k { get { return this is OutcomeResult_Pass_k<E>; } }
    public bool is_Fail_k { get { return this is OutcomeResult_Fail_k<E>; } }
    public E dtor_error {
      get {
        var d = this;
        return ((OutcomeResult_Fail_k<E>)d)._error;
      }
    }
    public abstract _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0);
    public bool IsFailure() {
      return (this).is_Fail_k;
    }
    public Std.Wrappers._IResult<__U, E> PropagateFailure<__U>() {
      return Std.Wrappers.Result<__U, E>.create_Failure((this).dtor_error);
    }
  }
  public class OutcomeResult_Pass_k<E> : OutcomeResult<E> {
    public OutcomeResult_Pass_k() : base() {
    }
    public override _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcomeResult<__E> dt) { return dt; }
      return new OutcomeResult_Pass_k<__E>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.OutcomeResult_Pass_k<E>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.OutcomeResult.Pass'";
      return s;
    }
  }
  public class OutcomeResult_Fail_k<E> : OutcomeResult<E> {
    public readonly E _error;
    public OutcomeResult_Fail_k(E error) : base() {
      this._error = error;
    }
    public override _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcomeResult<__E> dt) { return dt; }
      return new OutcomeResult_Fail_k<__E>(converter0(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.OutcomeResult_Fail_k<E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.OutcomeResult.Fail'";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }
} // end of namespace Std.Wrappers
namespace Std.FileIOInternalExterns {

} // end of namespace Std.FileIOInternalExterns
namespace Std.FileIO {

  public partial class __default {
    public static Std.Wrappers._IResult<Dafny.ISequence<byte>, Dafny.ISequence<Dafny.Rune>> ReadBytesFromFile(Dafny.ISequence<Dafny.Rune> path) {
      Std.Wrappers._IResult<Dafny.ISequence<byte>, Dafny.ISequence<Dafny.Rune>> res = Std.Wrappers.Result<Dafny.ISequence<byte>, Dafny.ISequence<Dafny.Rune>>.Default(Dafny.Sequence<byte>.Empty);
      bool _589_isError;
      Dafny.ISequence<byte> _590_bytesRead;
      Dafny.ISequence<Dafny.Rune> _591_errorMsg;
      bool _out10;
      Dafny.ISequence<byte> _out11;
      Dafny.ISequence<Dafny.Rune> _out12;
      Std.FileIOInternalExterns.__default.INTERNAL__ReadBytesFromFile(path, out _out10, out _out11, out _out12);
      _589_isError = _out10;
      _590_bytesRead = _out11;
      _591_errorMsg = _out12;
      res = ((_589_isError) ? (Std.Wrappers.Result<Dafny.ISequence<byte>, Dafny.ISequence<Dafny.Rune>>.create_Failure(_591_errorMsg)) : (Std.Wrappers.Result<Dafny.ISequence<byte>, Dafny.ISequence<Dafny.Rune>>.create_Success(_590_bytesRead)));
      return res;
      return res;
    }
    public static Std.Wrappers._IResult<_System._ITuple0, Dafny.ISequence<Dafny.Rune>> WriteBytesToFile(Dafny.ISequence<Dafny.Rune> path, Dafny.ISequence<byte> bytes) {
      Std.Wrappers._IResult<_System._ITuple0, Dafny.ISequence<Dafny.Rune>> res = Std.Wrappers.Result<_System._ITuple0, Dafny.ISequence<Dafny.Rune>>.Default(_System.Tuple0.Default());
      bool _592_isError;
      Dafny.ISequence<Dafny.Rune> _593_errorMsg;
      bool _out13;
      Dafny.ISequence<Dafny.Rune> _out14;
      Std.FileIOInternalExterns.__default.INTERNAL__WriteBytesToFile(path, bytes, out _out13, out _out14);
      _592_isError = _out13;
      _593_errorMsg = _out14;
      res = ((_592_isError) ? (Std.Wrappers.Result<_System._ITuple0, Dafny.ISequence<Dafny.Rune>>.create_Failure(_593_errorMsg)) : (Std.Wrappers.Result<_System._ITuple0, Dafny.ISequence<Dafny.Rune>>.create_Success(_System.Tuple0.create())));
      return res;
      return res;
    }
  }
} // end of namespace Std.FileIO
namespace Std.BoundedInts {

  public partial class __default {
    public static BigInteger TWO__TO__THE__8 {
      get {
        return new BigInteger(256);
      }
    }
    public static byte UINT8__MAX {
      get {
        return (byte)(255);
      }
    }
    public static BigInteger TWO__TO__THE__16 {
      get {
        return new BigInteger(65536);
      }
    }
    public static ushort UINT16__MAX {
      get {
        return (ushort)(65535);
      }
    }
    public static BigInteger TWO__TO__THE__32 {
      get {
        return new BigInteger(4294967296L);
      }
    }
    public static uint UINT32__MAX {
      get {
        return 4294967295U;
      }
    }
    public static BigInteger TWO__TO__THE__64 {
      get {
        return BigInteger.Parse("18446744073709551616");
      }
    }
    public static ulong UINT64__MAX {
      get {
        return 18446744073709551615UL;
      }
    }
    public static BigInteger TWO__TO__THE__7 {
      get {
        return new BigInteger(128);
      }
    }
    public static sbyte INT8__MIN {
      get {
        return (sbyte)(-128);
      }
    }
    public static sbyte INT8__MAX {
      get {
        return (sbyte)(127);
      }
    }
    public static BigInteger TWO__TO__THE__15 {
      get {
        return new BigInteger(32768);
      }
    }
    public static short INT16__MIN {
      get {
        return (short)(-32768);
      }
    }
    public static short INT16__MAX {
      get {
        return (short)(32767);
      }
    }
    public static BigInteger TWO__TO__THE__31 {
      get {
        return new BigInteger(2147483648L);
      }
    }
    public static int INT32__MIN {
      get {
        return -2147483648;
      }
    }
    public static int INT32__MAX {
      get {
        return 2147483647;
      }
    }
    public static BigInteger TWO__TO__THE__63 {
      get {
        return new BigInteger(9223372036854775808UL);
      }
    }
    public static long INT64__MIN {
      get {
        return -9223372036854775808L;
      }
    }
    public static long INT64__MAX {
      get {
        return 9223372036854775807L;
      }
    }
    public static byte NAT8__MAX {
      get {
        return (byte)(127);
      }
    }
    public static ushort NAT16__MAX {
      get {
        return (ushort)(32767);
      }
    }
    public static uint NAT32__MAX {
      get {
        return 2147483647U;
      }
    }
    public static ulong NAT64__MAX {
      get {
        return 9223372036854775807UL;
      }
    }
    public static BigInteger TWO__TO__THE__128 {
      get {
        return BigInteger.Parse("340282366920938463463374607431768211456");
      }
    }
    public static BigInteger TWO__TO__THE__127 {
      get {
        return BigInteger.Parse("170141183460469231731687303715884105728");
      }
    }
    public static BigInteger TWO__TO__THE__0 {
      get {
        return BigInteger.One;
      }
    }
    public static BigInteger TWO__TO__THE__1 {
      get {
        return new BigInteger(2);
      }
    }
    public static BigInteger TWO__TO__THE__2 {
      get {
        return new BigInteger(4);
      }
    }
    public static BigInteger TWO__TO__THE__4 {
      get {
        return new BigInteger(16);
      }
    }
    public static BigInteger TWO__TO__THE__5 {
      get {
        return new BigInteger(32);
      }
    }
    public static BigInteger TWO__TO__THE__24 {
      get {
        return new BigInteger(16777216);
      }
    }
    public static BigInteger TWO__TO__THE__40 {
      get {
        return new BigInteger(1099511627776L);
      }
    }
    public static BigInteger TWO__TO__THE__48 {
      get {
        return new BigInteger(281474976710656L);
      }
    }
    public static BigInteger TWO__TO__THE__56 {
      get {
        return new BigInteger(72057594037927936L);
      }
    }
    public static BigInteger TWO__TO__THE__256 {
      get {
        return BigInteger.Parse("115792089237316195423570985008687907853269984665640564039457584007913129639936");
      }
    }
    public static BigInteger TWO__TO__THE__512 {
      get {
        return BigInteger.Parse("13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084096");
      }
    }
  }

  public partial class uint8 {
    public static System.Collections.Generic.IEnumerable<byte> IntegerRange(BigInteger lo, BigInteger hi) {
      for (var j = lo; j < hi; j++) { yield return (byte)j; }
    }
    private static readonly Dafny.TypeDescriptor<byte> _TYPE = new Dafny.TypeDescriptor<byte>(0);
    public static Dafny.TypeDescriptor<byte> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class uint16 {
    public static System.Collections.Generic.IEnumerable<ushort> IntegerRange(BigInteger lo, BigInteger hi) {
      for (var j = lo; j < hi; j++) { yield return (ushort)j; }
    }
    private static readonly Dafny.TypeDescriptor<ushort> _TYPE = new Dafny.TypeDescriptor<ushort>(0);
    public static Dafny.TypeDescriptor<ushort> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class uint32 {
    public static System.Collections.Generic.IEnumerable<uint> IntegerRange(BigInteger lo, BigInteger hi) {
      for (var j = lo; j < hi; j++) { yield return (uint)j; }
    }
    private static readonly Dafny.TypeDescriptor<uint> _TYPE = new Dafny.TypeDescriptor<uint>(0);
    public static Dafny.TypeDescriptor<uint> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class uint64 {
    public static System.Collections.Generic.IEnumerable<ulong> IntegerRange(BigInteger lo, BigInteger hi) {
      for (var j = lo; j < hi; j++) { yield return (ulong)j; }
    }
    private static readonly Dafny.TypeDescriptor<ulong> _TYPE = new Dafny.TypeDescriptor<ulong>(0);
    public static Dafny.TypeDescriptor<ulong> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class uint128 {
    private static readonly Dafny.TypeDescriptor<BigInteger> _TYPE = new Dafny.TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static Dafny.TypeDescriptor<BigInteger> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class int8 {
    public static System.Collections.Generic.IEnumerable<sbyte> IntegerRange(BigInteger lo, BigInteger hi) {
      for (var j = lo; j < hi; j++) { yield return (sbyte)j; }
    }
    private static readonly Dafny.TypeDescriptor<sbyte> _TYPE = new Dafny.TypeDescriptor<sbyte>(0);
    public static Dafny.TypeDescriptor<sbyte> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class int16 {
    public static System.Collections.Generic.IEnumerable<short> IntegerRange(BigInteger lo, BigInteger hi) {
      for (var j = lo; j < hi; j++) { yield return (short)j; }
    }
    private static readonly Dafny.TypeDescriptor<short> _TYPE = new Dafny.TypeDescriptor<short>(0);
    public static Dafny.TypeDescriptor<short> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class int32 {
    public static System.Collections.Generic.IEnumerable<int> IntegerRange(BigInteger lo, BigInteger hi) {
      for (var j = lo; j < hi; j++) { yield return (int)j; }
    }
    private static readonly Dafny.TypeDescriptor<int> _TYPE = new Dafny.TypeDescriptor<int>(0);
    public static Dafny.TypeDescriptor<int> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class int64 {
    public static System.Collections.Generic.IEnumerable<long> IntegerRange(BigInteger lo, BigInteger hi) {
      for (var j = lo; j < hi; j++) { yield return (long)j; }
    }
    private static readonly Dafny.TypeDescriptor<long> _TYPE = new Dafny.TypeDescriptor<long>(0);
    public static Dafny.TypeDescriptor<long> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class int128 {
    private static readonly Dafny.TypeDescriptor<BigInteger> _TYPE = new Dafny.TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static Dafny.TypeDescriptor<BigInteger> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class nat8 {
    public static System.Collections.Generic.IEnumerable<byte> IntegerRange(BigInteger lo, BigInteger hi) {
      for (var j = lo; j < hi; j++) { yield return (byte)j; }
    }
    private static readonly Dafny.TypeDescriptor<byte> _TYPE = new Dafny.TypeDescriptor<byte>(0);
    public static Dafny.TypeDescriptor<byte> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class nat16 {
    public static System.Collections.Generic.IEnumerable<ushort> IntegerRange(BigInteger lo, BigInteger hi) {
      for (var j = lo; j < hi; j++) { yield return (ushort)j; }
    }
    private static readonly Dafny.TypeDescriptor<ushort> _TYPE = new Dafny.TypeDescriptor<ushort>(0);
    public static Dafny.TypeDescriptor<ushort> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class nat32 {
    public static System.Collections.Generic.IEnumerable<uint> IntegerRange(BigInteger lo, BigInteger hi) {
      for (var j = lo; j < hi; j++) { yield return (uint)j; }
    }
    private static readonly Dafny.TypeDescriptor<uint> _TYPE = new Dafny.TypeDescriptor<uint>(0);
    public static Dafny.TypeDescriptor<uint> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class nat64 {
    public static System.Collections.Generic.IEnumerable<ulong> IntegerRange(BigInteger lo, BigInteger hi) {
      for (var j = lo; j < hi; j++) { yield return (ulong)j; }
    }
    private static readonly Dafny.TypeDescriptor<ulong> _TYPE = new Dafny.TypeDescriptor<ulong>(0);
    public static Dafny.TypeDescriptor<ulong> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class nat128 {
    private static readonly Dafny.TypeDescriptor<BigInteger> _TYPE = new Dafny.TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static Dafny.TypeDescriptor<BigInteger> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class opt__byte {
    public static System.Collections.Generic.IEnumerable<short> IntegerRange(BigInteger lo, BigInteger hi) {
      for (var j = lo; j < hi; j++) { yield return (short)j; }
    }
    private static readonly Dafny.TypeDescriptor<short> _TYPE = new Dafny.TypeDescriptor<short>(0);
    public static Dafny.TypeDescriptor<short> _TypeDescriptor() {
      return _TYPE;
    }
  }
} // end of namespace Std.BoundedInts
namespace Std.Base64 {

  public partial class __default {
    public static bool IsBase64Char(Dafny.Rune c) {
      return (((((c) == (new Dafny.Rune('+'))) || ((c) == (new Dafny.Rune('/')))) || (((new Dafny.Rune('0')) <= (c)) && ((c) <= (new Dafny.Rune('9'))))) || (((new Dafny.Rune('A')) <= (c)) && ((c) <= (new Dafny.Rune('Z'))))) || (((new Dafny.Rune('a')) <= (c)) && ((c) <= (new Dafny.Rune('z'))));
    }
    public static bool IsUnpaddedBase64String(Dafny.ISequence<Dafny.Rune> s) {
      return ((Dafny.Helpers.EuclideanModulus(new BigInteger((s).Count), new BigInteger(4))).Sign == 0) && (Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, bool>>((_594_s) => Dafny.Helpers.Quantifier<Dafny.Rune>((_594_s).UniqueElements, true, (((_forall_var_2) => {
        Dafny.Rune _595_k = (Dafny.Rune)_forall_var_2;
        return !((_594_s).Contains(_595_k)) || (Std.Base64.__default.IsBase64Char(_595_k));
      }))))(s));
    }
    public static Dafny.Rune IndexToChar(byte i) {
      if ((i) == ((byte)(63))) {
        return new Dafny.Rune('/');
      } else if ((i) == ((byte)(62))) {
        return new Dafny.Rune('+');
      } else if ((((byte)(52)) <= (i)) && ((i) <= ((byte)(61)))) {
        return new Dafny.Rune((int)(unchecked((byte)(((byte)((i) - ((byte)(4)))) & (byte)0x3F))));
      } else if ((((byte)(26)) <= (i)) && ((i) <= ((byte)(51)))) {
        return Dafny.Helpers.AddRunes(new Dafny.Rune((int)(i)), new Dafny.Rune((int)(new BigInteger(71))));
      } else {
        return Dafny.Helpers.AddRunes(new Dafny.Rune((int)(i)), new Dafny.Rune((int)(new BigInteger(65))));
      }
    }
    public static byte CharToIndex(Dafny.Rune c) {
      if ((c) == (new Dafny.Rune('/'))) {
        return (byte)(63);
      } else if ((c) == (new Dafny.Rune('+'))) {
        return (byte)(62);
      } else if (((new Dafny.Rune('0')) <= (c)) && ((c) <= (new Dafny.Rune('9')))) {
        return (byte)((Dafny.Helpers.AddRunes(c, new Dafny.Rune((int)(new BigInteger(4))))).Value);
      } else if (((new Dafny.Rune('a')) <= (c)) && ((c) <= (new Dafny.Rune('z')))) {
        return (byte)((Dafny.Helpers.SubtractRunes(c, new Dafny.Rune((int)(new BigInteger(71))))).Value);
      } else {
        return (byte)((Dafny.Helpers.SubtractRunes(c, new Dafny.Rune((int)(new BigInteger(65))))).Value);
      }
    }
    public static Dafny.ISequence<byte> BV24ToSeq(uint x) {
      byte _596_b0 = (byte)(((x) >> ((int)((byte)(16)))) & (255U));
      byte _597_b1 = (byte)(((x) >> ((int)((byte)(8)))) & (255U));
      byte _598_b2 = (byte)((x) & (255U));
      return Dafny.Sequence<byte>.FromElements(_596_b0, _597_b1, _598_b2);
    }
    public static uint SeqToBV24(Dafny.ISequence<byte> x) {
      return ((unchecked((uint)((((uint)((x).Select(BigInteger.Zero))) << ((int)((byte)(16)))) & (uint)0xFFFFFFU))) | (unchecked((uint)((((uint)((x).Select(BigInteger.One))) << ((int)((byte)(8)))) & (uint)0xFFFFFFU)))) | ((uint)((x).Select(new BigInteger(2))));
    }
    public static Dafny.ISequence<byte> BV24ToIndexSeq(uint x) {
      byte _599_b0 = (byte)(((x) >> ((int)((byte)(18)))) & (63U));
      byte _600_b1 = (byte)(((x) >> ((int)((byte)(12)))) & (63U));
      byte _601_b2 = (byte)(((x) >> ((int)((byte)(6)))) & (63U));
      byte _602_b3 = (byte)((x) & (63U));
      return Dafny.Sequence<byte>.FromElements(_599_b0, _600_b1, _601_b2, _602_b3);
    }
    public static uint IndexSeqToBV24(Dafny.ISequence<byte> x) {
      return (((unchecked((uint)((((uint)((x).Select(BigInteger.Zero))) << ((int)((byte)(18)))) & (uint)0xFFFFFFU))) | (unchecked((uint)((((uint)((x).Select(BigInteger.One))) << ((int)((byte)(12)))) & (uint)0xFFFFFFU)))) | (unchecked((uint)((((uint)((x).Select(new BigInteger(2)))) << ((int)((byte)(6)))) & (uint)0xFFFFFFU)))) | ((uint)((x).Select(new BigInteger(3))));
    }
    public static Dafny.ISequence<byte> DecodeBlock(Dafny.ISequence<byte> s) {
      return Std.Base64.__default.BV24ToSeq(Std.Base64.__default.IndexSeqToBV24(s));
    }
    public static Dafny.ISequence<byte> EncodeBlock(Dafny.ISequence<byte> s) {
      return Std.Base64.__default.BV24ToIndexSeq(Std.Base64.__default.SeqToBV24(s));
    }
    public static Dafny.ISequence<byte> DecodeRecursively(Dafny.ISequence<byte> s) {
      Dafny.ISequence<byte> b = Dafny.Sequence<byte>.Empty;
      BigInteger _603_resultLength;
      _603_resultLength = (Dafny.Helpers.EuclideanDivision(new BigInteger((s).Count), new BigInteger(4))) * (new BigInteger(3));
      byte[] _604_result;
      Func<BigInteger, byte> _init0 = ((System.Func<BigInteger, byte>)((_605_i) => {
        return (byte)(0);
      }));
      byte[] _nw1 = new byte[Dafny.Helpers.ToIntChecked(_603_resultLength, "array size exceeds memory limit")];
      for (var _i0_0 = 0; _i0_0 < new BigInteger(_nw1.Length); _i0_0++) {
        _nw1[(int)(_i0_0)] = _init0(_i0_0);
      }
      _604_result = _nw1;
      BigInteger _606_i;
      _606_i = new BigInteger((s).Count);
      BigInteger _607_j;
      _607_j = _603_resultLength;
      while ((_606_i).Sign == 1) {
        _606_i = (_606_i) - (new BigInteger(4));
        _607_j = (_607_j) - (new BigInteger(3));
        Dafny.ISequence<byte> _608_block;
        _608_block = Std.Base64.__default.DecodeBlock((s).Subsequence(_606_i, (_606_i) + (new BigInteger(4))));
        (_604_result)[(int)((_607_j))] = (_608_block).Select(BigInteger.Zero);
        BigInteger _index0 = (_607_j) + (BigInteger.One);
        (_604_result)[(int)(_index0)] = (_608_block).Select(BigInteger.One);
        BigInteger _index1 = (_607_j) + (new BigInteger(2));
        (_604_result)[(int)(_index1)] = (_608_block).Select(new BigInteger(2));
      }
      b = Dafny.Helpers.SeqFromArray(_604_result);
      return b;
    }
    public static Dafny.ISequence<byte> EncodeRecursively(Dafny.ISequence<byte> b) {
      Dafny.ISequence<byte> s = Dafny.Sequence<byte>.Empty;
      BigInteger _609_resultLength;
      _609_resultLength = (Dafny.Helpers.EuclideanDivision(new BigInteger((b).Count), new BigInteger(3))) * (new BigInteger(4));
      byte[] _610_result;
      Func<BigInteger, byte> _init1 = ((System.Func<BigInteger, byte>)((_611_i) => {
        return (byte)(0);
      }));
      byte[] _nw2 = new byte[Dafny.Helpers.ToIntChecked(_609_resultLength, "array size exceeds memory limit")];
      for (var _i0_1 = 0; _i0_1 < new BigInteger(_nw2.Length); _i0_1++) {
        _nw2[(int)(_i0_1)] = _init1(_i0_1);
      }
      _610_result = _nw2;
      BigInteger _612_i;
      _612_i = new BigInteger((b).Count);
      BigInteger _613_j;
      _613_j = _609_resultLength;
      while ((_612_i).Sign == 1) {
        _612_i = (_612_i) - (new BigInteger(3));
        _613_j = (_613_j) - (new BigInteger(4));
        Dafny.ISequence<byte> _614_block;
        _614_block = Std.Base64.__default.EncodeBlock((b).Subsequence(_612_i, (_612_i) + (new BigInteger(3))));
        (_610_result)[(int)((_613_j))] = (_614_block).Select(BigInteger.Zero);
        BigInteger _index2 = (_613_j) + (BigInteger.One);
        (_610_result)[(int)(_index2)] = (_614_block).Select(BigInteger.One);
        BigInteger _index3 = (_613_j) + (new BigInteger(2));
        (_610_result)[(int)(_index3)] = (_614_block).Select(new BigInteger(2));
        BigInteger _index4 = (_613_j) + (new BigInteger(3));
        (_610_result)[(int)(_index4)] = (_614_block).Select(new BigInteger(3));
      }
      s = Dafny.Helpers.SeqFromArray(_610_result);
      return s;
    }
    public static Dafny.ISequence<byte> FromCharsToIndices(Dafny.ISequence<Dafny.Rune> s) {
      return ((System.Func<Dafny.ISequence<byte>>)(() => {
        BigInteger dim0 = new BigInteger((s).Count);
        var arr0 = new byte[Dafny.Helpers.ToIntChecked(dim0, "array size exceeds memory limit")];
        for (int i0 = 0; i0 < dim0; i0++) {
          var _615_i = (BigInteger)i0;
          arr0[(int)(_615_i)] = Std.Base64.__default.CharToIndex((s).Select(_615_i));
        }
        return Dafny.Sequence<byte>.FromArray(arr0);
      }))();
    }
    public static Dafny.ISequence<Dafny.Rune> FromIndicesToChars(Dafny.ISequence<byte> b) {
      return ((System.Func<Dafny.ISequence<Dafny.Rune>>)(() => {
        BigInteger dim1 = new BigInteger((b).Count);
        var arr1 = new Dafny.Rune[Dafny.Helpers.ToIntChecked(dim1, "array size exceeds memory limit")];
        for (int i1 = 0; i1 < dim1; i1++) {
          var _616_i = (BigInteger)i1;
          arr1[(int)(_616_i)] = Std.Base64.__default.IndexToChar((b).Select(_616_i));
        }
        return Dafny.Sequence<Dafny.Rune>.FromArray(arr1);
      }))();
    }
    public static Dafny.ISequence<byte> DecodeUnpadded(Dafny.ISequence<Dafny.Rune> s) {
      return Std.Base64.__default.DecodeRecursively(Std.Base64.__default.FromCharsToIndices(s));
    }
    public static Dafny.ISequence<Dafny.Rune> EncodeUnpadded(Dafny.ISequence<byte> b) {
      return Std.Base64.__default.FromIndicesToChars(Std.Base64.__default.EncodeRecursively(b));
    }
    public static bool Is1Padding(Dafny.ISequence<Dafny.Rune> s) {
      return ((((((new BigInteger((s).Count)) == (new BigInteger(4))) && (Std.Base64.__default.IsBase64Char((s).Select(BigInteger.Zero)))) && (Std.Base64.__default.IsBase64Char((s).Select(BigInteger.One)))) && (Std.Base64.__default.IsBase64Char((s).Select(new BigInteger(2))))) && (((byte)((Std.Base64.__default.CharToIndex((s).Select(new BigInteger(2)))) & ((byte)(3)))) == ((byte)(0)))) && (((s).Select(new BigInteger(3))) == (new Dafny.Rune('=')));
    }
    public static Dafny.ISequence<byte> Decode1Padding(Dafny.ISequence<Dafny.Rune> s) {
      Dafny.ISequence<byte> _617_d = Std.Base64.__default.DecodeBlock(Dafny.Sequence<byte>.FromElements(Std.Base64.__default.CharToIndex((s).Select(BigInteger.Zero)), Std.Base64.__default.CharToIndex((s).Select(BigInteger.One)), Std.Base64.__default.CharToIndex((s).Select(new BigInteger(2))), (byte)(0)));
      return Dafny.Sequence<byte>.FromElements((_617_d).Select(BigInteger.Zero), (_617_d).Select(BigInteger.One));
    }
    public static Dafny.ISequence<Dafny.Rune> Encode1Padding(Dafny.ISequence<byte> b) {
      Dafny.ISequence<byte> _618_e = Std.Base64.__default.EncodeBlock(Dafny.Sequence<byte>.FromElements((b).Select(BigInteger.Zero), (b).Select(BigInteger.One), (byte)(0)));
      return Dafny.Sequence<Dafny.Rune>.FromElements(Std.Base64.__default.IndexToChar((_618_e).Select(BigInteger.Zero)), Std.Base64.__default.IndexToChar((_618_e).Select(BigInteger.One)), Std.Base64.__default.IndexToChar((_618_e).Select(new BigInteger(2))), new Dafny.Rune('='));
    }
    public static bool Is2Padding(Dafny.ISequence<Dafny.Rune> s) {
      return ((((((new BigInteger((s).Count)) == (new BigInteger(4))) && (Std.Base64.__default.IsBase64Char((s).Select(BigInteger.Zero)))) && (Std.Base64.__default.IsBase64Char((s).Select(BigInteger.One)))) && (((byte)((Std.Base64.__default.CharToIndex((s).Select(BigInteger.One))) % ((byte)(16)))) == ((byte)(0)))) && (((s).Select(new BigInteger(2))) == (new Dafny.Rune('=')))) && (((s).Select(new BigInteger(3))) == (new Dafny.Rune('=')));
    }
    public static Dafny.ISequence<byte> Decode2Padding(Dafny.ISequence<Dafny.Rune> s) {
      Dafny.ISequence<byte> _619_d = Std.Base64.__default.DecodeBlock(Dafny.Sequence<byte>.FromElements(Std.Base64.__default.CharToIndex((s).Select(BigInteger.Zero)), Std.Base64.__default.CharToIndex((s).Select(BigInteger.One)), (byte)(0), (byte)(0)));
      return Dafny.Sequence<byte>.FromElements((_619_d).Select(BigInteger.Zero));
    }
    public static Dafny.ISequence<Dafny.Rune> Encode2Padding(Dafny.ISequence<byte> b) {
      Dafny.ISequence<byte> _620_e = Std.Base64.__default.EncodeBlock(Dafny.Sequence<byte>.FromElements((b).Select(BigInteger.Zero), (byte)(0), (byte)(0)));
      return Dafny.Sequence<Dafny.Rune>.FromElements(Std.Base64.__default.IndexToChar((_620_e).Select(BigInteger.Zero)), Std.Base64.__default.IndexToChar((_620_e).Select(BigInteger.One)), new Dafny.Rune('='), new Dafny.Rune('='));
    }
    public static bool IsBase64String(Dafny.ISequence<Dafny.Rune> s) {
      BigInteger _621_finalBlockStart = (new BigInteger((s).Count)) - (new BigInteger(4));
      return ((Dafny.Helpers.EuclideanModulus(new BigInteger((s).Count), new BigInteger(4))).Sign == 0) && ((Std.Base64.__default.IsUnpaddedBase64String(s)) || ((Std.Base64.__default.IsUnpaddedBase64String((s).Take(_621_finalBlockStart))) && ((Std.Base64.__default.Is1Padding((s).Drop(_621_finalBlockStart))) || (Std.Base64.__default.Is2Padding((s).Drop(_621_finalBlockStart))))));
    }
    public static Dafny.ISequence<byte> DecodeValid(Dafny.ISequence<Dafny.Rune> s) {
      if ((s).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return Dafny.Sequence<byte>.FromElements();
      } else {
        BigInteger _622_finalBlockStart = (new BigInteger((s).Count)) - (new BigInteger(4));
        Dafny.ISequence<Dafny.Rune> _623_prefix = (s).Take(_622_finalBlockStart);
        Dafny.ISequence<Dafny.Rune> _624_suffix = (s).Drop(_622_finalBlockStart);
        if (Std.Base64.__default.Is1Padding(_624_suffix)) {
          return Dafny.Sequence<byte>.Concat(Std.Base64.__default.DecodeUnpadded(_623_prefix), Std.Base64.__default.Decode1Padding(_624_suffix));
        } else if (Std.Base64.__default.Is2Padding(_624_suffix)) {
          return Dafny.Sequence<byte>.Concat(Std.Base64.__default.DecodeUnpadded(_623_prefix), Std.Base64.__default.Decode2Padding(_624_suffix));
        } else {
          return Std.Base64.__default.DecodeUnpadded(s);
        }
      }
    }
    public static Std.Wrappers._IResult<Dafny.ISequence<byte>, Dafny.ISequence<Dafny.Rune>> DecodeBV(Dafny.ISequence<Dafny.Rune> s) {
      if (Std.Base64.__default.IsBase64String(s)) {
        return Std.Wrappers.Result<Dafny.ISequence<byte>, Dafny.ISequence<Dafny.Rune>>.create_Success(Std.Base64.__default.DecodeValid(s));
      } else {
        return Std.Wrappers.Result<Dafny.ISequence<byte>, Dafny.ISequence<Dafny.Rune>>.create_Failure(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("The encoding is malformed"));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> EncodeBV(Dafny.ISequence<byte> b) {
      if ((Dafny.Helpers.EuclideanModulus(new BigInteger((b).Count), new BigInteger(3))).Sign == 0) {
        return Std.Base64.__default.EncodeUnpadded(b);
      } else if ((Dafny.Helpers.EuclideanModulus(new BigInteger((b).Count), new BigInteger(3))) == (BigInteger.One)) {
        Dafny.ISequence<Dafny.Rune> _625_s1 = Std.Base64.__default.EncodeUnpadded((b).Take((new BigInteger((b).Count)) - (BigInteger.One)));
        Dafny.ISequence<Dafny.Rune> _626_s2 = Std.Base64.__default.Encode2Padding((b).Drop((new BigInteger((b).Count)) - (BigInteger.One)));
        return Dafny.Sequence<Dafny.Rune>.Concat(_625_s1, _626_s2);
      } else {
        Dafny.ISequence<Dafny.Rune> _627_s1 = Std.Base64.__default.EncodeUnpadded((b).Take((new BigInteger((b).Count)) - (new BigInteger(2))));
        Dafny.ISequence<Dafny.Rune> _628_s2 = Std.Base64.__default.Encode1Padding((b).Drop((new BigInteger((b).Count)) - (new BigInteger(2))));
        return Dafny.Sequence<Dafny.Rune>.Concat(_627_s1, _628_s2);
      }
    }
    public static Dafny.ISequence<byte> UInt8sToBVs(Dafny.ISequence<byte> u) {
      return ((System.Func<Dafny.ISequence<byte>>)(() => {
        BigInteger dim2 = new BigInteger((u).Count);
        var arr2 = new byte[Dafny.Helpers.ToIntChecked(dim2, "array size exceeds memory limit")];
        for (int i2 = 0; i2 < dim2; i2++) {
          var _629_i = (BigInteger)i2;
          arr2[(int)(_629_i)] = (byte)((u).Select(_629_i));
        }
        return Dafny.Sequence<byte>.FromArray(arr2);
      }))();
    }
    public static Dafny.ISequence<byte> BVsToUInt8s(Dafny.ISequence<byte> b) {
      return ((System.Func<Dafny.ISequence<byte>>)(() => {
        BigInteger dim3 = new BigInteger((b).Count);
        var arr3 = new byte[Dafny.Helpers.ToIntChecked(dim3, "array size exceeds memory limit")];
        for (int i3 = 0; i3 < dim3; i3++) {
          var _630_i = (BigInteger)i3;
          arr3[(int)(_630_i)] = (byte)((b).Select(_630_i));
        }
        return Dafny.Sequence<byte>.FromArray(arr3);
      }))();
    }
    public static Dafny.ISequence<Dafny.Rune> Encode(Dafny.ISequence<byte> u) {
      return Std.Base64.__default.EncodeBV(Std.Base64.__default.UInt8sToBVs(u));
    }
    public static Std.Wrappers._IResult<Dafny.ISequence<byte>, Dafny.ISequence<Dafny.Rune>> Decode(Dafny.ISequence<Dafny.Rune> s) {
      if (Std.Base64.__default.IsBase64String(s)) {
        Dafny.ISequence<byte> _631_b = Std.Base64.__default.DecodeValid(s);
        return Std.Wrappers.Result<Dafny.ISequence<byte>, Dafny.ISequence<Dafny.Rune>>.create_Success(Std.Base64.__default.BVsToUInt8s(_631_b));
      } else {
        return Std.Wrappers.Result<Dafny.ISequence<byte>, Dafny.ISequence<Dafny.Rune>>.create_Failure(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("The encoding is malformed"));
      }
    }
  }
} // end of namespace Std.Base64
namespace Std.Relations {

} // end of namespace Std.Relations
namespace Std.Math {

  public partial class __default {
    public static BigInteger Min(BigInteger a, BigInteger b) {
      if ((a) < (b)) {
        return a;
      } else {
        return b;
      }
    }
    public static BigInteger Min3(BigInteger a, BigInteger b, BigInteger c) {
      return Std.Math.__default.Min(a, Std.Math.__default.Min(b, c));
    }
    public static BigInteger Max(BigInteger a, BigInteger b) {
      if ((a) < (b)) {
        return b;
      } else {
        return a;
      }
    }
    public static BigInteger Max3(BigInteger a, BigInteger b, BigInteger c) {
      return Std.Math.__default.Max(a, Std.Math.__default.Max(b, c));
    }
    public static BigInteger Abs(BigInteger a) {
      if ((a).Sign == -1) {
        return (BigInteger.Zero) - (a);
      } else {
        return a;
      }
    }
  }
} // end of namespace Std.Math
namespace Std.Collections.Seq {

  public partial class __default {
    public static __T First<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Select(BigInteger.Zero);
    }
    public static Dafny.ISequence<__T> DropFirst<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Drop(BigInteger.One);
    }
    public static __T Last<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Select((new BigInteger((xs).Count)) - (BigInteger.One));
    }
    public static Dafny.ISequence<__T> DropLast<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
    }
    public static __T[] ToArray<__T>(Dafny.ISequence<__T> xs) {
      __T[] a = new __T[0];
      Func<BigInteger, __T> _init2 = Dafny.Helpers.Id<Func<Dafny.ISequence<__T>, Func<BigInteger, __T>>>((_632_xs) => ((System.Func<BigInteger, __T>)((_633_i) => {
        return (_632_xs).Select(_633_i);
      })))(xs);
      __T[] _nw3 = new __T[Dafny.Helpers.ToIntChecked(new BigInteger((xs).Count), "array size exceeds memory limit")];
      for (var _i0_2 = 0; _i0_2 < new BigInteger(_nw3.Length); _i0_2++) {
        _nw3[(int)(_i0_2)] = _init2(_i0_2);
      }
      a = _nw3;
      return a;
    }
    public static Dafny.ISet<__T> ToSet<__T>(Dafny.ISequence<__T> xs) {
      return Dafny.Helpers.Id<Func<Dafny.ISequence<__T>, Dafny.ISet<__T>>>((_634_xs) => ((System.Func<Dafny.ISet<__T>>)(() => {
        var _coll4 = new System.Collections.Generic.List<__T>();
        foreach (__T _compr_4 in (_634_xs).Elements) {
          __T _635_x = (__T)_compr_4;
          if ((_634_xs).Contains(_635_x)) {
            _coll4.Add(_635_x);
          }
        }
        return Dafny.Set<__T>.FromCollection(_coll4);
      }))())(xs);
    }
    public static BigInteger IndexOf<__T>(Dafny.ISequence<__T> xs, __T v) {
      BigInteger _636___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if (object.Equals((xs).Select(BigInteger.Zero), v)) {
        return (BigInteger.Zero) + (_636___accumulator);
      } else {
        _636___accumulator = (_636___accumulator) + (BigInteger.One);
        Dafny.ISequence<__T> _in9 = (xs).Drop(BigInteger.One);
        __T _in10 = v;
        xs = _in9;
        v = _in10;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<BigInteger> IndexOfOption<__T>(Dafny.ISequence<__T> xs, __T v) {
      return Std.Collections.Seq.__default.IndexByOption<__T>(xs, Dafny.Helpers.Id<Func<__T, Func<__T, bool>>>((_637_v) => ((System.Func<__T, bool>)((_638_x) => {
        return object.Equals(_638_x, _637_v);
      })))(v));
    }
    public static Std.Wrappers._IOption<BigInteger> IndexByOption<__T>(Dafny.ISequence<__T> xs, Func<__T, bool> p) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Option<BigInteger>.create_None();
      } else if (Dafny.Helpers.Id<Func<__T, bool>>(p)((xs).Select(BigInteger.Zero))) {
        return Std.Wrappers.Option<BigInteger>.create_Some(BigInteger.Zero);
      } else {
        Std.Wrappers._IOption<BigInteger> _639_o_k = Std.Collections.Seq.__default.IndexByOption<__T>((xs).Drop(BigInteger.One), p);
        if ((_639_o_k).is_Some) {
          return Std.Wrappers.Option<BigInteger>.create_Some(((_639_o_k).dtor_value) + (BigInteger.One));
        } else {
          return Std.Wrappers.Option<BigInteger>.create_None();
        }
      }
    }
    public static BigInteger LastIndexOf<__T>(Dafny.ISequence<__T> xs, __T v) {
    TAIL_CALL_START:;
      if (object.Equals((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One)), v)) {
        return (new BigInteger((xs).Count)) - (BigInteger.One);
      } else {
        Dafny.ISequence<__T> _in11 = (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
        __T _in12 = v;
        xs = _in11;
        v = _in12;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<BigInteger> LastIndexOfOption<__T>(Dafny.ISequence<__T> xs, __T v) {
      return Std.Collections.Seq.__default.LastIndexByOption<__T>(xs, Dafny.Helpers.Id<Func<__T, Func<__T, bool>>>((_640_v) => ((System.Func<__T, bool>)((_641_x) => {
        return object.Equals(_641_x, _640_v);
      })))(v));
    }
    public static Std.Wrappers._IOption<BigInteger> LastIndexByOption<__T>(Dafny.ISequence<__T> xs, Func<__T, bool> p) {
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Option<BigInteger>.create_None();
      } else if (Dafny.Helpers.Id<Func<__T, bool>>(p)((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One)))) {
        return Std.Wrappers.Option<BigInteger>.create_Some((new BigInteger((xs).Count)) - (BigInteger.One));
      } else {
        Dafny.ISequence<__T> _in13 = (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
        Func<__T, bool> _in14 = p;
        xs = _in13;
        p = _in14;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Remove<__T>(Dafny.ISequence<__T> xs, BigInteger pos) {
      return Dafny.Sequence<__T>.Concat((xs).Take(pos), (xs).Drop((pos) + (BigInteger.One)));
    }
    public static Dafny.ISequence<__T> RemoveValue<__T>(Dafny.ISequence<__T> xs, __T v) {
      if (!(xs).Contains(v)) {
        return xs;
      } else {
        BigInteger _642_i = Std.Collections.Seq.__default.IndexOf<__T>(xs, v);
        return Dafny.Sequence<__T>.Concat((xs).Take(_642_i), (xs).Drop((_642_i) + (BigInteger.One)));
      }
    }
    public static Dafny.ISequence<__T> Insert<__T>(Dafny.ISequence<__T> xs, __T a, BigInteger pos) {
      return Dafny.Sequence<__T>.Concat(Dafny.Sequence<__T>.Concat((xs).Take(pos), Dafny.Sequence<__T>.FromElements(a)), (xs).Drop(pos));
    }
    public static Dafny.ISequence<__T> Reverse<__T>(Dafny.ISequence<__T> xs) {
      Dafny.ISequence<__T> _643___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((xs).Equals(Dafny.Sequence<__T>.FromElements())) {
        return Dafny.Sequence<__T>.Concat(_643___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _643___accumulator = Dafny.Sequence<__T>.Concat(_643___accumulator, Dafny.Sequence<__T>.FromElements((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One))));
        Dafny.ISequence<__T> _in15 = (xs).Subsequence(BigInteger.Zero, (new BigInteger((xs).Count)) - (BigInteger.One));
        xs = _in15;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Repeat<__T>(__T v, BigInteger length) {
      Dafny.ISequence<__T> _644___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((length).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_644___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _644___accumulator = Dafny.Sequence<__T>.Concat(_644___accumulator, Dafny.Sequence<__T>.FromElements(v));
        __T _in16 = v;
        BigInteger _in17 = (length) - (BigInteger.One);
        v = _in16;
        length = _in17;
        goto TAIL_CALL_START;
      }
    }
    public static _System._ITuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>> Unzip<__A, __B>(Dafny.ISequence<_System._ITuple2<__A, __B>> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>>.create(Dafny.Sequence<__A>.FromElements(), Dafny.Sequence<__B>.FromElements());
      } else {
        _System._ITuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>> _let_tmp_rhs7 = Std.Collections.Seq.__default.Unzip<__A, __B>(Std.Collections.Seq.__default.DropLast<_System._ITuple2<__A, __B>>(xs));
        Dafny.ISequence<__A> _645_a = _let_tmp_rhs7.dtor__0;
        Dafny.ISequence<__B> _646_b = _let_tmp_rhs7.dtor__1;
        return _System.Tuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>>.create(Dafny.Sequence<__A>.Concat(_645_a, Dafny.Sequence<__A>.FromElements((Std.Collections.Seq.__default.Last<_System._ITuple2<__A, __B>>(xs)).dtor__0)), Dafny.Sequence<__B>.Concat(_646_b, Dafny.Sequence<__B>.FromElements((Std.Collections.Seq.__default.Last<_System._ITuple2<__A, __B>>(xs)).dtor__1)));
      }
    }
    public static Dafny.ISequence<_System._ITuple2<__A, __B>> Zip<__A, __B>(Dafny.ISequence<__A> xs, Dafny.ISequence<__B> ys) {
      Dafny.ISequence<_System._ITuple2<__A, __B>> _647___accumulator = Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<_System._ITuple2<__A, __B>>.Concat(Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements(), _647___accumulator);
      } else {
        _647___accumulator = Dafny.Sequence<_System._ITuple2<__A, __B>>.Concat(Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements(_System.Tuple2<__A, __B>.create(Std.Collections.Seq.__default.Last<__A>(xs), Std.Collections.Seq.__default.Last<__B>(ys))), _647___accumulator);
        Dafny.ISequence<__A> _in18 = Std.Collections.Seq.__default.DropLast<__A>(xs);
        Dafny.ISequence<__B> _in19 = Std.Collections.Seq.__default.DropLast<__B>(ys);
        xs = _in18;
        ys = _in19;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger Max(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)) == (BigInteger.One)) {
        return (xs).Select(BigInteger.Zero);
      } else {
        return Std.Math.__default.Max((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.Max((xs).Drop(BigInteger.One)));
      }
    }
    public static BigInteger Min(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)) == (BigInteger.One)) {
        return (xs).Select(BigInteger.Zero);
      } else {
        return Std.Math.__default.Min((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.Min((xs).Drop(BigInteger.One)));
      }
    }
    public static Dafny.ISequence<__T> Flatten<__T>(Dafny.ISequence<Dafny.ISequence<__T>> xs) {
      Dafny.ISequence<__T> _648___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_648___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _648___accumulator = Dafny.Sequence<__T>.Concat(_648___accumulator, (xs).Select(BigInteger.Zero));
        Dafny.ISequence<Dafny.ISequence<__T>> _in20 = (xs).Drop(BigInteger.One);
        xs = _in20;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> FlattenReverse<__T>(Dafny.ISequence<Dafny.ISequence<__T>> xs) {
      Dafny.ISequence<__T> _649___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(Dafny.Sequence<__T>.FromElements(), _649___accumulator);
      } else {
        _649___accumulator = Dafny.Sequence<__T>.Concat(Std.Collections.Seq.__default.Last<Dafny.ISequence<__T>>(xs), _649___accumulator);
        Dafny.ISequence<Dafny.ISequence<__T>> _in21 = Std.Collections.Seq.__default.DropLast<Dafny.ISequence<__T>>(xs);
        xs = _in21;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Join<__T>(Dafny.ISequence<Dafny.ISequence<__T>> seqs, Dafny.ISequence<__T> separator) {
      Dafny.ISequence<__T> _650___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((seqs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_650___accumulator, Dafny.Sequence<__T>.FromElements());
      } else if ((new BigInteger((seqs).Count)) == (BigInteger.One)) {
        return Dafny.Sequence<__T>.Concat(_650___accumulator, (seqs).Select(BigInteger.Zero));
      } else {
        _650___accumulator = Dafny.Sequence<__T>.Concat(_650___accumulator, Dafny.Sequence<__T>.Concat((seqs).Select(BigInteger.Zero), separator));
        Dafny.ISequence<Dafny.ISequence<__T>> _in22 = (seqs).Drop(BigInteger.One);
        Dafny.ISequence<__T> _in23 = separator;
        seqs = _in22;
        separator = _in23;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.ISequence<__T>> Split<__T>(Dafny.ISequence<__T> s, __T delim) {
      Dafny.ISequence<Dafny.ISequence<__T>> _651___accumulator = Dafny.Sequence<Dafny.ISequence<__T>>.FromElements();
    TAIL_CALL_START:;
      Std.Wrappers._IOption<BigInteger> _652_i = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      if ((_652_i).is_Some) {
        _651___accumulator = Dafny.Sequence<Dafny.ISequence<__T>>.Concat(_651___accumulator, Dafny.Sequence<Dafny.ISequence<__T>>.FromElements((s).Take((_652_i).dtor_value)));
        Dafny.ISequence<__T> _in24 = (s).Drop(((_652_i).dtor_value) + (BigInteger.One));
        __T _in25 = delim;
        s = _in24;
        delim = _in25;
        goto TAIL_CALL_START;
      } else {
        return Dafny.Sequence<Dafny.ISequence<__T>>.Concat(_651___accumulator, Dafny.Sequence<Dafny.ISequence<__T>>.FromElements(s));
      }
    }
    public static _System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>> SplitOnce<__T>(Dafny.ISequence<__T> s, __T delim) {
      Std.Wrappers._IOption<BigInteger> _653_i = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      return _System.Tuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>.create((s).Take((_653_i).dtor_value), (s).Drop(((_653_i).dtor_value) + (BigInteger.One)));
    }
    public static Std.Wrappers._IOption<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>> SplitOnceOption<__T>(Dafny.ISequence<__T> s, __T delim) {
      Std.Wrappers._IOption<BigInteger> _654_valueOrError0 = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      if ((_654_valueOrError0).IsFailure()) {
        return (_654_valueOrError0).PropagateFailure<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>>();
      } else {
        BigInteger _655_i = (_654_valueOrError0).Extract();
        return Std.Wrappers.Option<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>>.create_Some(_System.Tuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>.create((s).Take(_655_i), (s).Drop((_655_i) + (BigInteger.One))));
      }
    }
    public static Dafny.ISequence<__R> Map<__T, __R>(Func<__T, __R> f, Dafny.ISequence<__T> xs) {
      Dafny.ISequence<__R> _656___accumulator = Dafny.Sequence<__R>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__R>.Concat(_656___accumulator, Dafny.Sequence<__R>.FromElements());
      } else {
        _656___accumulator = Dafny.Sequence<__R>.Concat(_656___accumulator, Dafny.Sequence<__R>.FromElements(Dafny.Helpers.Id<Func<__T, __R>>(f)((xs).Select(BigInteger.Zero))));
        Func<__T, __R> _in26 = f;
        Dafny.ISequence<__T> _in27 = (xs).Drop(BigInteger.One);
        f = _in26;
        xs = _in27;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IResult<Dafny.ISequence<__R>, __E> MapWithResult<__T, __R, __E>(Func<__T, Std.Wrappers._IResult<__R, __E>> f, Dafny.ISequence<__T> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Result<Dafny.ISequence<__R>, __E>.create_Success(Dafny.Sequence<__R>.FromElements());
      } else {
        Std.Wrappers._IResult<__R, __E> _657_valueOrError0 = Dafny.Helpers.Id<Func<__T, Std.Wrappers._IResult<__R, __E>>>(f)((xs).Select(BigInteger.Zero));
        if ((_657_valueOrError0).IsFailure()) {
          return (_657_valueOrError0).PropagateFailure<Dafny.ISequence<__R>>();
        } else {
          __R _658_head = (_657_valueOrError0).Extract();
          Std.Wrappers._IResult<Dafny.ISequence<__R>, __E> _659_valueOrError1 = Std.Collections.Seq.__default.MapWithResult<__T, __R, __E>(f, (xs).Drop(BigInteger.One));
          if ((_659_valueOrError1).IsFailure()) {
            return (_659_valueOrError1).PropagateFailure<Dafny.ISequence<__R>>();
          } else {
            Dafny.ISequence<__R> _660_tail = (_659_valueOrError1).Extract();
            return Std.Wrappers.Result<Dafny.ISequence<__R>, __E>.create_Success(Dafny.Sequence<__R>.Concat(Dafny.Sequence<__R>.FromElements(_658_head), _660_tail));
          }
        }
      }
    }
    public static Dafny.ISequence<__T> Filter<__T>(Func<__T, bool> f, Dafny.ISequence<__T> xs) {
      Dafny.ISequence<__T> _661___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_661___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _661___accumulator = Dafny.Sequence<__T>.Concat(_661___accumulator, ((Dafny.Helpers.Id<Func<__T, bool>>(f)((xs).Select(BigInteger.Zero))) ? (Dafny.Sequence<__T>.FromElements((xs).Select(BigInteger.Zero))) : (Dafny.Sequence<__T>.FromElements())));
        Func<__T, bool> _in28 = f;
        Dafny.ISequence<__T> _in29 = (xs).Drop(BigInteger.One);
        f = _in28;
        xs = _in29;
        goto TAIL_CALL_START;
      }
    }
    public static __A FoldLeft<__A, __T>(Func<__A, __T, __A> f, __A init, Dafny.ISequence<__T> xs) {
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return init;
      } else {
        Func<__A, __T, __A> _in30 = f;
        __A _in31 = Dafny.Helpers.Id<Func<__A, __T, __A>>(f)(init, (xs).Select(BigInteger.Zero));
        Dafny.ISequence<__T> _in32 = (xs).Drop(BigInteger.One);
        f = _in30;
        init = _in31;
        xs = _in32;
        goto TAIL_CALL_START;
      }
    }
    public static __A FoldRight<__A, __T>(Func<__T, __A, __A> f, Dafny.ISequence<__T> xs, __A init) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return init;
      } else {
        return Dafny.Helpers.Id<Func<__T, __A, __A>>(f)((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.FoldRight<__A, __T>(f, (xs).Drop(BigInteger.One), init));
      }
    }
    public static Dafny.ISequence<__T> SetToSeq<__T>(Dafny.ISet<__T> s) {
      Dafny.ISequence<__T> xs = Dafny.Sequence<__T>.Empty;
      xs = Dafny.Sequence<__T>.FromElements();
      Dafny.ISet<__T> _662_left;
      _662_left = s;
      while (!(_662_left).Equals(Dafny.Set<__T>.FromElements())) {
        __T _663_x;
        foreach (__T _assign_such_that_0 in (_662_left).Elements) {
          _663_x = (__T)_assign_such_that_0;
          if ((_662_left).Contains(_663_x)) {
            goto after__ASSIGN_SUCH_THAT_0;
          }
        }
        throw new System.Exception("assign-such-that search produced no value (line 7231)");
      after__ASSIGN_SUCH_THAT_0:;
        _662_left = Dafny.Set<__T>.Difference(_662_left, Dafny.Set<__T>.FromElements(_663_x));
        xs = Dafny.Sequence<__T>.Concat(xs, Dafny.Sequence<__T>.FromElements(_663_x));
      }
      return xs;
    }
    public static Dafny.ISequence<__T> SetToSortedSeq<__T>(Dafny.ISet<__T> s, Func<__T, __T, bool> R) {
      Dafny.ISequence<__T> xs = Dafny.Sequence<__T>.Empty;
      Dafny.ISequence<__T> _out15;
      _out15 = Std.Collections.Seq.__default.SetToSeq<__T>(s);
      xs = _out15;
      xs = Std.Collections.Seq.__default.MergeSortBy<__T>(R, xs);
      return xs;
    }
    public static Dafny.ISequence<__T> MergeSortBy<__T>(Func<__T, __T, bool> lessThanOrEq, Dafny.ISequence<__T> a) {
      if ((new BigInteger((a).Count)) <= (BigInteger.One)) {
        return a;
      } else {
        BigInteger _664_splitIndex = Dafny.Helpers.EuclideanDivision(new BigInteger((a).Count), new BigInteger(2));
        Dafny.ISequence<__T> _665_left = (a).Take(_664_splitIndex);
        Dafny.ISequence<__T> _666_right = (a).Drop(_664_splitIndex);
        Dafny.ISequence<__T> _667_leftSorted = Std.Collections.Seq.__default.MergeSortBy<__T>(lessThanOrEq, _665_left);
        Dafny.ISequence<__T> _668_rightSorted = Std.Collections.Seq.__default.MergeSortBy<__T>(lessThanOrEq, _666_right);
        return Std.Collections.Seq.__default.MergeSortedWith<__T>(_667_leftSorted, _668_rightSorted, lessThanOrEq);
      }
    }
    public static Dafny.ISequence<__T> MergeSortedWith<__T>(Dafny.ISequence<__T> left, Dafny.ISequence<__T> right, Func<__T, __T, bool> lessThanOrEq) {
      Dafny.ISequence<__T> _669___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((left).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_669___accumulator, right);
      } else if ((new BigInteger((right).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_669___accumulator, left);
      } else if (Dafny.Helpers.Id<Func<__T, __T, bool>>(lessThanOrEq)((left).Select(BigInteger.Zero), (right).Select(BigInteger.Zero))) {
        _669___accumulator = Dafny.Sequence<__T>.Concat(_669___accumulator, Dafny.Sequence<__T>.FromElements((left).Select(BigInteger.Zero)));
        Dafny.ISequence<__T> _in33 = (left).Drop(BigInteger.One);
        Dafny.ISequence<__T> _in34 = right;
        Func<__T, __T, bool> _in35 = lessThanOrEq;
        left = _in33;
        right = _in34;
        lessThanOrEq = _in35;
        goto TAIL_CALL_START;
      } else {
        _669___accumulator = Dafny.Sequence<__T>.Concat(_669___accumulator, Dafny.Sequence<__T>.FromElements((right).Select(BigInteger.Zero)));
        Dafny.ISequence<__T> _in36 = left;
        Dafny.ISequence<__T> _in37 = (right).Drop(BigInteger.One);
        Func<__T, __T, bool> _in38 = lessThanOrEq;
        left = _in36;
        right = _in37;
        lessThanOrEq = _in38;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Collections.Seq
namespace Std.Collections.Array {

  public partial class __default {
    public static Std.Wrappers._IOption<BigInteger> BinarySearch<__T>(__T[] a, __T key, Func<__T, __T, bool> less) {
      Std.Wrappers._IOption<BigInteger> r = Std.Wrappers.Option<BigInteger>.Default();
      BigInteger _670_lo;
      BigInteger _671_hi;
      BigInteger _rhs0 = BigInteger.Zero;
      BigInteger _rhs1 = new BigInteger((a).Length);
      _670_lo = _rhs0;
      _671_hi = _rhs1;
      while ((_670_lo) < (_671_hi)) {
        BigInteger _672_mid;
        _672_mid = Dafny.Helpers.EuclideanDivision((_670_lo) + (_671_hi), new BigInteger(2));
        if (Dafny.Helpers.Id<Func<__T, __T, bool>>(less)(key, (a)[(int)(_672_mid)])) {
          _671_hi = _672_mid;
        } else if (Dafny.Helpers.Id<Func<__T, __T, bool>>(less)((a)[(int)(_672_mid)], key)) {
          _670_lo = (_672_mid) + (BigInteger.One);
        } else {
          r = Std.Wrappers.Option<BigInteger>.create_Some(_672_mid);
          return r;
        }
      }
      r = Std.Wrappers.Option<BigInteger>.create_None();
      return r;
      return r;
    }
  }
} // end of namespace Std.Collections.Array
namespace Std.Collections.Imap {

  public partial class __default {
    public static Std.Wrappers._IOption<__Y> Get<__X, __Y>(Dafny.IMap<__X, __Y> m, __X x) {
      if ((m).Contains(x)) {
        return Std.Wrappers.Option<__Y>.create_Some(Dafny.Map<__X, __Y>.Select(m, x));
      } else {
        return Std.Wrappers.Option<__Y>.create_None();
      }
    }
  }
} // end of namespace Std.Collections.Imap
namespace Std.Functions {

} // end of namespace Std.Functions
namespace Std.Collections.Iset {

} // end of namespace Std.Collections.Iset
namespace Std.Collections.Map {

  public partial class __default {
    public static Std.Wrappers._IOption<__Y> Get<__X, __Y>(Dafny.IMap<__X, __Y> m, __X x) {
      if ((m).Contains(x)) {
        return Std.Wrappers.Option<__Y>.create_Some(Dafny.Map<__X, __Y>.Select(m, x));
      } else {
        return Std.Wrappers.Option<__Y>.create_None();
      }
    }
    public static Dafny.IMap<__X, __Y> ToImap<__X, __Y>(Dafny.IMap<__X, __Y> m) {
      return Dafny.Helpers.Id<Func<Dafny.IMap<__X, __Y>, Dafny.IMap<__X, __Y>>>((_673_m) => ((System.Func<Dafny.IMap<__X, __Y>>)(() => {
        var _coll5 = new System.Collections.Generic.List<Dafny.Pair<__X, __Y>>();
        foreach (__X _compr_5 in (_673_m).Keys.Elements) {
          __X _674_x = (__X)_compr_5;
          if ((_673_m).Contains(_674_x)) {
            _coll5.Add(new Dafny.Pair<__X, __Y>(_674_x, Dafny.Map<__X, __Y>.Select(_673_m, _674_x)));
          }
        }
        return Dafny.Map<__X, __Y>.FromCollection(_coll5);
      }))())(m);
    }
    public static Dafny.IMap<__X, __Y> RemoveKeys<__X, __Y>(Dafny.IMap<__X, __Y> m, Dafny.ISet<__X> xs) {
      return Dafny.Map<__X, __Y>.Subtract(m, xs);
    }
    public static Dafny.IMap<__X, __Y> Remove<__X, __Y>(Dafny.IMap<__X, __Y> m, __X x) {
      Dafny.IMap<__X, __Y> _675_m_k = Dafny.Helpers.Id<Func<Dafny.IMap<__X, __Y>, __X, Dafny.IMap<__X, __Y>>>((_676_m, _677_x) => ((System.Func<Dafny.IMap<__X, __Y>>)(() => {
        var _coll6 = new System.Collections.Generic.List<Dafny.Pair<__X, __Y>>();
        foreach (__X _compr_6 in (_676_m).Keys.Elements) {
          __X _678_x_k = (__X)_compr_6;
          if (((_676_m).Contains(_678_x_k)) && (!object.Equals(_678_x_k, _677_x))) {
            _coll6.Add(new Dafny.Pair<__X, __Y>(_678_x_k, Dafny.Map<__X, __Y>.Select(_676_m, _678_x_k)));
          }
        }
        return Dafny.Map<__X, __Y>.FromCollection(_coll6);
      }))())(m, x);
      return _675_m_k;
    }
    public static Dafny.IMap<__X, __Y> Restrict<__X, __Y>(Dafny.IMap<__X, __Y> m, Dafny.ISet<__X> xs) {
      return Dafny.Helpers.Id<Func<Dafny.ISet<__X>, Dafny.IMap<__X, __Y>, Dafny.IMap<__X, __Y>>>((_679_xs, _680_m) => ((System.Func<Dafny.IMap<__X, __Y>>)(() => {
        var _coll7 = new System.Collections.Generic.List<Dafny.Pair<__X, __Y>>();
        foreach (__X _compr_7 in (_679_xs).Elements) {
          __X _681_x = (__X)_compr_7;
          if (((_679_xs).Contains(_681_x)) && ((_680_m).Contains(_681_x))) {
            _coll7.Add(new Dafny.Pair<__X, __Y>(_681_x, Dafny.Map<__X, __Y>.Select(_680_m, _681_x)));
          }
        }
        return Dafny.Map<__X, __Y>.FromCollection(_coll7);
      }))())(xs, m);
    }
    public static Dafny.IMap<__X, __Y> Union<__X, __Y>(Dafny.IMap<__X, __Y> m, Dafny.IMap<__X, __Y> m_k) {
      return Dafny.Map<__X, __Y>.Merge(m, m_k);
    }
  }
} // end of namespace Std.Collections.Map
namespace Std.Collections.Set {

  public partial class __default {
    public static __T ExtractFromSingleton<__T>(Dafny.ISet<__T> s) {
      return Dafny.Helpers.Let<int, __T>(0, _let_dummy_0 => {
        __T _682_x = default(__T);
        foreach (__T _assign_such_that_1 in (s).Elements) {
          _682_x = (__T)_assign_such_that_1;
          if ((s).Contains(_682_x)) {
            goto after__ASSIGN_SUCH_THAT_1;
          }
        }
        throw new System.Exception("assign-such-that search produced no value (line 7408)");
      after__ASSIGN_SUCH_THAT_1:;
        return _682_x;
      }
      );
    }
    public static Dafny.ISet<__Y> Map<__X, __Y>(Func<__X, __Y> f, Dafny.ISet<__X> xs) {
      Dafny.ISet<__Y> _683_ys = Dafny.Helpers.Id<Func<Dafny.ISet<__X>, Func<__X, __Y>, Dafny.ISet<__Y>>>((_684_xs, _685_f) => ((System.Func<Dafny.ISet<__Y>>)(() => {
        var _coll8 = new System.Collections.Generic.List<__Y>();
        foreach (__X _compr_8 in (_684_xs).Elements) {
          __X _686_x = (__X)_compr_8;
          if ((_684_xs).Contains(_686_x)) {
            _coll8.Add(Dafny.Helpers.Id<Func<__X, __Y>>(_685_f)(_686_x));
          }
        }
        return Dafny.Set<__Y>.FromCollection(_coll8);
      }))())(xs, f);
      return _683_ys;
    }
    public static Dafny.ISet<__X> Filter<__X>(Func<__X, bool> f, Dafny.ISet<__X> xs) {
      Dafny.ISet<__X> _687_ys = Dafny.Helpers.Id<Func<Dafny.ISet<__X>, Func<__X, bool>, Dafny.ISet<__X>>>((_688_xs, _689_f) => ((System.Func<Dafny.ISet<__X>>)(() => {
        var _coll9 = new System.Collections.Generic.List<__X>();
        foreach (__X _compr_9 in (_688_xs).Elements) {
          __X _690_x = (__X)_compr_9;
          if (((_688_xs).Contains(_690_x)) && (Dafny.Helpers.Id<Func<__X, bool>>(_689_f)(_690_x))) {
            _coll9.Add(_690_x);
          }
        }
        return Dafny.Set<__X>.FromCollection(_coll9);
      }))())(xs, f);
      return _687_ys;
    }
    public static Dafny.ISet<BigInteger> SetRange(BigInteger a, BigInteger b) {
      Dafny.ISet<BigInteger> _691___accumulator = Dafny.Set<BigInteger>.FromElements();
    TAIL_CALL_START:;
      if ((a) == (b)) {
        return Dafny.Set<BigInteger>.Union(Dafny.Set<BigInteger>.FromElements(), _691___accumulator);
      } else {
        _691___accumulator = Dafny.Set<BigInteger>.Union(_691___accumulator, Dafny.Set<BigInteger>.FromElements(a));
        BigInteger _in39 = (a) + (BigInteger.One);
        BigInteger _in40 = b;
        a = _in39;
        b = _in40;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISet<BigInteger> SetRangeZeroBound(BigInteger n) {
      return Std.Collections.Set.__default.SetRange(BigInteger.Zero, n);
    }
  }
} // end of namespace Std.Collections.Set
namespace Std.Collections {

} // end of namespace Std.Collections
namespace Std.DynamicArray {


  public partial class DynamicArray<A> {
    public DynamicArray() {
      this.size = BigInteger.Zero;
      this.capacity = BigInteger.Zero;
      this.data = new A[0];
    }
    public BigInteger size { get; set; }
    public BigInteger capacity { get; set; }
    public A[] data { get; set; }
    public void __ctor() {
      (this).size = BigInteger.Zero;
      (this).capacity = BigInteger.Zero;
      A[] _nw4 = new A[Dafny.Helpers.ToIntChecked(BigInteger.Zero, "array size exceeds memory limit")];
      (this).data = _nw4;
    }
    public A At(BigInteger index) {
      return (this.data)[(int)(index)];
    }
    public void Put(BigInteger index, A element) {
      A[] _arr0 = this.data;
      _arr0[(int)((index))] = element;
    }
    public void Ensure(BigInteger reserved, A defaultValue) {
      BigInteger _692_newCapacity;
      _692_newCapacity = this.capacity;
      while ((reserved) > ((_692_newCapacity) - (this.size))) {
        _692_newCapacity = (this).DefaultNewCapacity(_692_newCapacity);
      }
      if ((_692_newCapacity) > (this.capacity)) {
        (this).Realloc(defaultValue, _692_newCapacity);
      }
    }
    public void PopFast() {
      (this).size = (this.size) - (BigInteger.One);
    }
    public void PushFast(A element) {
      A[] _arr1 = this.data;
      BigInteger _index5 = this.size;
      _arr1[(int)(_index5)] = element;
      (this).size = (this.size) + (BigInteger.One);
    }
    public void Push(A element) {
      if ((this.size) == (this.capacity)) {
        (this).ReallocDefault(element);
      }
      (this).PushFast(element);
    }
    public void Realloc(A defaultValue, BigInteger newCapacity) {
      A[] _693_oldData;
      BigInteger _694_oldCapacity;
      A[] _rhs2 = this.data;
      BigInteger _rhs3 = this.capacity;
      _693_oldData = _rhs2;
      _694_oldCapacity = _rhs3;
      Func<BigInteger, A> _init3 = Dafny.Helpers.Id<Func<A, Func<BigInteger, A>>>((_695_defaultValue) => ((System.Func<BigInteger, A>)((_696___v0) => {
        return _695_defaultValue;
      })))(defaultValue);
      A[] _nw5 = new A[Dafny.Helpers.ToIntChecked(newCapacity, "array size exceeds memory limit")];
      for (var _i0_3 = 0; _i0_3 < new BigInteger(_nw5.Length); _i0_3++) {
        _nw5[(int)(_i0_3)] = _init3(_i0_3);
      }
      A[] _rhs4 = _nw5;
      BigInteger _rhs5 = newCapacity;
      Std.DynamicArray.DynamicArray<A> _lhs0 = this;
      Std.DynamicArray.DynamicArray<A> _lhs1 = this;
      _lhs0.data = _rhs4;
      _lhs1.capacity = _rhs5;
      (this).CopyFrom(_693_oldData, _694_oldCapacity);
    }
    public BigInteger DefaultNewCapacity(BigInteger capacity) {
      if ((capacity).Sign == 0) {
        return new BigInteger(8);
      } else {
        return (new BigInteger(2)) * (capacity);
      }
    }
    public void ReallocDefault(A defaultValue) {
      (this).Realloc(defaultValue, (this).DefaultNewCapacity(this.capacity));
    }
    public void CopyFrom(A[] newData, BigInteger count) {
      foreach (BigInteger _guard_loop_0 in Dafny.Helpers.IntegerRange(BigInteger.Zero, count)) {
        BigInteger _697_index = (BigInteger)_guard_loop_0;
        if ((true) && (((_697_index).Sign != -1) && ((_697_index) < (count)))) {
          A[] _arr2 = this.data;
          _arr2[(int)((_697_index))] = (newData)[(int)(_697_index)];
        }
      }
    }
  }
} // end of namespace Std.DynamicArray
namespace Std.Arithmetic.GeneralInternals {

} // end of namespace Std.Arithmetic.GeneralInternals
namespace Std.Arithmetic.MulInternalsNonlinear {

} // end of namespace Std.Arithmetic.MulInternalsNonlinear
namespace Std.Arithmetic.MulInternals {

  public partial class __default {
    public static BigInteger MulPos(BigInteger x, BigInteger y) {
      BigInteger _698___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if ((x).Sign == 0) {
        return (BigInteger.Zero) + (_698___accumulator);
      } else {
        _698___accumulator = (_698___accumulator) + (y);
        BigInteger _in41 = (x) - (BigInteger.One);
        BigInteger _in42 = y;
        x = _in41;
        y = _in42;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger MulRecursive(BigInteger x, BigInteger y) {
      if ((x).Sign != -1) {
        return Std.Arithmetic.MulInternals.__default.MulPos(x, y);
      } else {
        return (new BigInteger(-1)) * (Std.Arithmetic.MulInternals.__default.MulPos((new BigInteger(-1)) * (x), y));
      }
    }
  }
} // end of namespace Std.Arithmetic.MulInternals
namespace Std.Arithmetic.Mul {

} // end of namespace Std.Arithmetic.Mul
namespace Std.Arithmetic.ModInternalsNonlinear {

} // end of namespace Std.Arithmetic.ModInternalsNonlinear
namespace Std.Arithmetic.DivInternalsNonlinear {

} // end of namespace Std.Arithmetic.DivInternalsNonlinear
namespace Std.Arithmetic.ModInternals {

  public partial class __default {
    public static BigInteger ModRecursive(BigInteger x, BigInteger d) {
    TAIL_CALL_START:;
      if ((x).Sign == -1) {
        BigInteger _in43 = (d) + (x);
        BigInteger _in44 = d;
        x = _in43;
        d = _in44;
        goto TAIL_CALL_START;
      } else if ((x) < (d)) {
        return x;
      } else {
        BigInteger _in45 = (x) - (d);
        BigInteger _in46 = d;
        x = _in45;
        d = _in46;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.ModInternals
namespace Std.Arithmetic.DivInternals {

  public partial class __default {
    public static BigInteger DivPos(BigInteger x, BigInteger d) {
      BigInteger _699___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if ((x).Sign == -1) {
        _699___accumulator = (_699___accumulator) + (new BigInteger(-1));
        BigInteger _in47 = (x) + (d);
        BigInteger _in48 = d;
        x = _in47;
        d = _in48;
        goto TAIL_CALL_START;
      } else if ((x) < (d)) {
        return (BigInteger.Zero) + (_699___accumulator);
      } else {
        _699___accumulator = (_699___accumulator) + (BigInteger.One);
        BigInteger _in49 = (x) - (d);
        BigInteger _in50 = d;
        x = _in49;
        d = _in50;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger DivRecursive(BigInteger x, BigInteger d) {
      if ((d).Sign == 1) {
        return Std.Arithmetic.DivInternals.__default.DivPos(x, d);
      } else {
        return (new BigInteger(-1)) * (Std.Arithmetic.DivInternals.__default.DivPos(x, (new BigInteger(-1)) * (d)));
      }
    }
  }
} // end of namespace Std.Arithmetic.DivInternals
namespace Std.Arithmetic.DivMod {

  public partial class __default {
    public static bool MultiplesVanish(BigInteger a, BigInteger b, BigInteger m) {
      return (Dafny.Helpers.EuclideanModulus(((m) * (a)) + (b), m)) == (Dafny.Helpers.EuclideanModulus(b, m));
    }
  }
} // end of namespace Std.Arithmetic.DivMod
namespace Std.Arithmetic.Power {

  public partial class __default {
    public static BigInteger Pow(BigInteger b, BigInteger e) {
      BigInteger _700___accumulator = BigInteger.One;
    TAIL_CALL_START:;
      if ((e).Sign == 0) {
        return (BigInteger.One) * (_700___accumulator);
      } else {
        _700___accumulator = (_700___accumulator) * (b);
        BigInteger _in51 = b;
        BigInteger _in52 = (e) - (BigInteger.One);
        b = _in51;
        e = _in52;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.Power
namespace Std.Arithmetic.Logarithm {

  public partial class __default {
    public static BigInteger Log(BigInteger @base, BigInteger pow) {
      BigInteger _701___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if ((pow) < (@base)) {
        return (BigInteger.Zero) + (_701___accumulator);
      } else {
        _701___accumulator = (_701___accumulator) + (BigInteger.One);
        BigInteger _in53 = @base;
        BigInteger _in54 = Dafny.Helpers.EuclideanDivision(pow, @base);
        @base = _in53;
        pow = _in54;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.Logarithm
namespace Std.Arithmetic.Power2 {

  public partial class __default {
    public static BigInteger Pow2(BigInteger e) {
      return Std.Arithmetic.Power.__default.Pow(new BigInteger(2), e);
    }
  }
} // end of namespace Std.Arithmetic.Power2
namespace Std.Arithmetic {

} // end of namespace Std.Arithmetic
namespace Std.Strings.HexConversion {

  public partial class __default {
    public static BigInteger BASE() {
      return Std.Strings.HexConversion.__default.@base;
    }
    public static bool IsDigitChar(Dafny.Rune c) {
      return (Std.Strings.HexConversion.__default.charToDigit).Contains(c);
    }
    public static Dafny.ISequence<Dafny.Rune> OfDigits(Dafny.ISequence<BigInteger> digits) {
      Dafny.ISequence<Dafny.Rune> _702___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((digits).Equals(Dafny.Sequence<BigInteger>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(), _702___accumulator);
      } else {
        _702___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.HexConversion.__default.chars).Select((digits).Select(BigInteger.Zero))), _702___accumulator);
        Dafny.ISequence<BigInteger> _in55 = (digits).Drop(BigInteger.One);
        digits = _in55;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.HexConversion.__default.chars).Select(BigInteger.Zero));
      } else {
        return Std.Strings.HexConversion.__default.OfDigits(Std.Strings.HexConversion.__default.FromNat(n));
      }
    }
    public static bool IsNumberStr(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus) {
      return !(!(str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) || (((((str).Select(BigInteger.Zero)) == (minus)) || ((Std.Strings.HexConversion.__default.charToDigit).Contains((str).Select(BigInteger.Zero)))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, bool>>((_703_str) => Dafny.Helpers.Quantifier<Dafny.Rune>(((_703_str).Drop(BigInteger.One)).UniqueElements, true, (((_forall_var_3) => {
        Dafny.Rune _704_c = (Dafny.Rune)_forall_var_3;
        return !(((_703_str).Drop(BigInteger.One)).Contains(_704_c)) || (Std.Strings.HexConversion.__default.IsDigitChar(_704_c));
      }))))(str)));
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n, Dafny.Rune minus) {
      if ((n).Sign != -1) {
        return Std.Strings.HexConversion.__default.OfNat(n);
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(minus), Std.Strings.HexConversion.__default.OfNat((BigInteger.Zero) - (n)));
      }
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return BigInteger.Zero;
      } else {
        Dafny.Rune _705_c = (str).Select((new BigInteger((str).Count)) - (BigInteger.One));
        return ((Std.Strings.HexConversion.__default.ToNat((str).Take((new BigInteger((str).Count)) - (BigInteger.One)))) * (Std.Strings.HexConversion.__default.@base)) + (Dafny.Map<Dafny.Rune, BigInteger>.Select(Std.Strings.HexConversion.__default.charToDigit, _705_c));
      }
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus) {
      if (Dafny.Sequence<Dafny.Rune>.IsPrefixOf(Dafny.Sequence<Dafny.Rune>.FromElements(minus), str)) {
        return (BigInteger.Zero) - (Std.Strings.HexConversion.__default.ToNat((str).Drop(BigInteger.One)));
      } else {
        return Std.Strings.HexConversion.__default.ToNat(str);
      }
    }
    public static BigInteger ToNatRight(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        return ((Std.Strings.HexConversion.__default.ToNatRight(Std.Collections.Seq.__default.DropFirst<BigInteger>(xs))) * (Std.Strings.HexConversion.__default.BASE())) + (Std.Collections.Seq.__default.First<BigInteger>(xs));
      }
    }
    public static BigInteger ToNatLeft(Dafny.ISequence<BigInteger> xs) {
      BigInteger _706___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return (BigInteger.Zero) + (_706___accumulator);
      } else {
        _706___accumulator = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) * (Std.Arithmetic.Power.__default.Pow(Std.Strings.HexConversion.__default.BASE(), (new BigInteger((xs).Count)) - (BigInteger.One)))) + (_706___accumulator);
        Dafny.ISequence<BigInteger> _in56 = Std.Collections.Seq.__default.DropLast<BigInteger>(xs);
        xs = _in56;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> FromNat(BigInteger n) {
      Dafny.ISequence<BigInteger> _707___accumulator = Dafny.Sequence<BigInteger>.FromElements();
    TAIL_CALL_START:;
      if ((n).Sign == 0) {
        return Dafny.Sequence<BigInteger>.Concat(_707___accumulator, Dafny.Sequence<BigInteger>.FromElements());
      } else {
        _707___accumulator = Dafny.Sequence<BigInteger>.Concat(_707___accumulator, Dafny.Sequence<BigInteger>.FromElements(Dafny.Helpers.EuclideanModulus(n, Std.Strings.HexConversion.__default.BASE())));
        BigInteger _in57 = Dafny.Helpers.EuclideanDivision(n, Std.Strings.HexConversion.__default.BASE());
        n = _in57;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtend(Dafny.ISequence<BigInteger> xs, BigInteger n) {
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)) >= (n)) {
        return xs;
      } else {
        Dafny.ISequence<BigInteger> _in58 = Dafny.Sequence<BigInteger>.Concat(xs, Dafny.Sequence<BigInteger>.FromElements(BigInteger.Zero));
        BigInteger _in59 = n;
        xs = _in58;
        n = _in59;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtendMultiple(Dafny.ISequence<BigInteger> xs, BigInteger n) {
      BigInteger _708_newLen = ((new BigInteger((xs).Count)) + (n)) - (Dafny.Helpers.EuclideanModulus(new BigInteger((xs).Count), n));
      return Std.Strings.HexConversion.__default.SeqExtend(xs, _708_newLen);
    }
    public static Dafny.ISequence<BigInteger> FromNatWithLen(BigInteger n, BigInteger len) {
      return Std.Strings.HexConversion.__default.SeqExtend(Std.Strings.HexConversion.__default.FromNat(n), len);
    }
    public static Dafny.ISequence<BigInteger> SeqZero(BigInteger len) {
      Dafny.ISequence<BigInteger> _709_xs = Std.Strings.HexConversion.__default.FromNatWithLen(BigInteger.Zero, len);
      return _709_xs;
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqAdd(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs8 = Std.Strings.HexConversion.__default.SeqAdd(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _710_zs_k = _let_tmp_rhs8.dtor__0;
        BigInteger _711_cin = _let_tmp_rhs8.dtor__1;
        BigInteger _712_sum = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) + (Std.Collections.Seq.__default.Last<BigInteger>(ys))) + (_711_cin);
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs9 = (((_712_sum) < (Std.Strings.HexConversion.__default.BASE())) ? (_System.Tuple2<BigInteger, BigInteger>.create(_712_sum, BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((_712_sum) - (Std.Strings.HexConversion.__default.BASE()), BigInteger.One)));
        BigInteger _713_sum__out = _let_tmp_rhs9.dtor__0;
        BigInteger _714_cout = _let_tmp_rhs9.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_710_zs_k, Dafny.Sequence<BigInteger>.FromElements(_713_sum__out)), _714_cout);
      }
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqSub(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs10 = Std.Strings.HexConversion.__default.SeqSub(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _715_zs = _let_tmp_rhs10.dtor__0;
        BigInteger _716_cin = _let_tmp_rhs10.dtor__1;
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs11 = (((Std.Collections.Seq.__default.Last<BigInteger>(xs)) >= ((Std.Collections.Seq.__default.Last<BigInteger>(ys)) + (_716_cin))) ? (_System.Tuple2<BigInteger, BigInteger>.create(((Std.Collections.Seq.__default.Last<BigInteger>(xs)) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_716_cin), BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((((Std.Strings.HexConversion.__default.BASE()) + (Std.Collections.Seq.__default.Last<BigInteger>(xs))) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_716_cin), BigInteger.One)));
        BigInteger _717_diff__out = _let_tmp_rhs11.dtor__0;
        BigInteger _718_cout = _let_tmp_rhs11.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_715_zs, Dafny.Sequence<BigInteger>.FromElements(_717_diff__out)), _718_cout);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> HEX__DIGITS {
      get {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789ABCDEF");
      }
    }
    public static Dafny.ISequence<Dafny.Rune> chars {
      get {
        return Std.Strings.HexConversion.__default.HEX__DIGITS;
      }
    }
    public static BigInteger @base {
      get {
        return new BigInteger((Std.Strings.HexConversion.__default.chars).Count);
      }
    }
    public static Dafny.IMap<Dafny.Rune, BigInteger> charToDigit {
      get {
        return Dafny.Map<Dafny.Rune, BigInteger>.FromElements(new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('0'), BigInteger.Zero), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('1'), BigInteger.One), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('2'), new BigInteger(2)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('3'), new BigInteger(3)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('4'), new BigInteger(4)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('5'), new BigInteger(5)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('6'), new BigInteger(6)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('7'), new BigInteger(7)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('8'), new BigInteger(8)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('9'), new BigInteger(9)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('a'), new BigInteger(10)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('b'), new BigInteger(11)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('c'), new BigInteger(12)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('d'), new BigInteger(13)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('e'), new BigInteger(14)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('f'), new BigInteger(15)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('A'), new BigInteger(10)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('B'), new BigInteger(11)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('C'), new BigInteger(12)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('D'), new BigInteger(13)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('E'), new BigInteger(14)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('F'), new BigInteger(15)));
      }
    }
  }

  public partial class CharSeq {
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class digit {
    private static readonly Dafny.TypeDescriptor<BigInteger> _TYPE = new Dafny.TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static Dafny.TypeDescriptor<BigInteger> _TypeDescriptor() {
      return _TYPE;
    }
  }
} // end of namespace Std.Strings.HexConversion
namespace Std.Strings.DecimalConversion {

  public partial class __default {
    public static BigInteger BASE() {
      return Std.Strings.DecimalConversion.__default.@base;
    }
    public static bool IsDigitChar(Dafny.Rune c) {
      return (Std.Strings.DecimalConversion.__default.charToDigit).Contains(c);
    }
    public static Dafny.ISequence<Dafny.Rune> OfDigits(Dafny.ISequence<BigInteger> digits) {
      Dafny.ISequence<Dafny.Rune> _719___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((digits).Equals(Dafny.Sequence<BigInteger>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(), _719___accumulator);
      } else {
        _719___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.DecimalConversion.__default.chars).Select((digits).Select(BigInteger.Zero))), _719___accumulator);
        Dafny.ISequence<BigInteger> _in60 = (digits).Drop(BigInteger.One);
        digits = _in60;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.DecimalConversion.__default.chars).Select(BigInteger.Zero));
      } else {
        return Std.Strings.DecimalConversion.__default.OfDigits(Std.Strings.DecimalConversion.__default.FromNat(n));
      }
    }
    public static bool IsNumberStr(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus) {
      return !(!(str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) || (((((str).Select(BigInteger.Zero)) == (minus)) || ((Std.Strings.DecimalConversion.__default.charToDigit).Contains((str).Select(BigInteger.Zero)))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, bool>>((_720_str) => Dafny.Helpers.Quantifier<Dafny.Rune>(((_720_str).Drop(BigInteger.One)).UniqueElements, true, (((_forall_var_4) => {
        Dafny.Rune _721_c = (Dafny.Rune)_forall_var_4;
        return !(((_720_str).Drop(BigInteger.One)).Contains(_721_c)) || (Std.Strings.DecimalConversion.__default.IsDigitChar(_721_c));
      }))))(str)));
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n, Dafny.Rune minus) {
      if ((n).Sign != -1) {
        return Std.Strings.DecimalConversion.__default.OfNat(n);
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(minus), Std.Strings.DecimalConversion.__default.OfNat((BigInteger.Zero) - (n)));
      }
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return BigInteger.Zero;
      } else {
        Dafny.Rune _722_c = (str).Select((new BigInteger((str).Count)) - (BigInteger.One));
        return ((Std.Strings.DecimalConversion.__default.ToNat((str).Take((new BigInteger((str).Count)) - (BigInteger.One)))) * (Std.Strings.DecimalConversion.__default.@base)) + (Dafny.Map<Dafny.Rune, BigInteger>.Select(Std.Strings.DecimalConversion.__default.charToDigit, _722_c));
      }
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus) {
      if (Dafny.Sequence<Dafny.Rune>.IsPrefixOf(Dafny.Sequence<Dafny.Rune>.FromElements(minus), str)) {
        return (BigInteger.Zero) - (Std.Strings.DecimalConversion.__default.ToNat((str).Drop(BigInteger.One)));
      } else {
        return Std.Strings.DecimalConversion.__default.ToNat(str);
      }
    }
    public static BigInteger ToNatRight(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        return ((Std.Strings.DecimalConversion.__default.ToNatRight(Std.Collections.Seq.__default.DropFirst<BigInteger>(xs))) * (Std.Strings.DecimalConversion.__default.BASE())) + (Std.Collections.Seq.__default.First<BigInteger>(xs));
      }
    }
    public static BigInteger ToNatLeft(Dafny.ISequence<BigInteger> xs) {
      BigInteger _723___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return (BigInteger.Zero) + (_723___accumulator);
      } else {
        _723___accumulator = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) * (Std.Arithmetic.Power.__default.Pow(Std.Strings.DecimalConversion.__default.BASE(), (new BigInteger((xs).Count)) - (BigInteger.One)))) + (_723___accumulator);
        Dafny.ISequence<BigInteger> _in61 = Std.Collections.Seq.__default.DropLast<BigInteger>(xs);
        xs = _in61;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> FromNat(BigInteger n) {
      Dafny.ISequence<BigInteger> _724___accumulator = Dafny.Sequence<BigInteger>.FromElements();
    TAIL_CALL_START:;
      if ((n).Sign == 0) {
        return Dafny.Sequence<BigInteger>.Concat(_724___accumulator, Dafny.Sequence<BigInteger>.FromElements());
      } else {
        _724___accumulator = Dafny.Sequence<BigInteger>.Concat(_724___accumulator, Dafny.Sequence<BigInteger>.FromElements(Dafny.Helpers.EuclideanModulus(n, Std.Strings.DecimalConversion.__default.BASE())));
        BigInteger _in62 = Dafny.Helpers.EuclideanDivision(n, Std.Strings.DecimalConversion.__default.BASE());
        n = _in62;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtend(Dafny.ISequence<BigInteger> xs, BigInteger n) {
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)) >= (n)) {
        return xs;
      } else {
        Dafny.ISequence<BigInteger> _in63 = Dafny.Sequence<BigInteger>.Concat(xs, Dafny.Sequence<BigInteger>.FromElements(BigInteger.Zero));
        BigInteger _in64 = n;
        xs = _in63;
        n = _in64;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtendMultiple(Dafny.ISequence<BigInteger> xs, BigInteger n) {
      BigInteger _725_newLen = ((new BigInteger((xs).Count)) + (n)) - (Dafny.Helpers.EuclideanModulus(new BigInteger((xs).Count), n));
      return Std.Strings.DecimalConversion.__default.SeqExtend(xs, _725_newLen);
    }
    public static Dafny.ISequence<BigInteger> FromNatWithLen(BigInteger n, BigInteger len) {
      return Std.Strings.DecimalConversion.__default.SeqExtend(Std.Strings.DecimalConversion.__default.FromNat(n), len);
    }
    public static Dafny.ISequence<BigInteger> SeqZero(BigInteger len) {
      Dafny.ISequence<BigInteger> _726_xs = Std.Strings.DecimalConversion.__default.FromNatWithLen(BigInteger.Zero, len);
      return _726_xs;
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqAdd(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs12 = Std.Strings.DecimalConversion.__default.SeqAdd(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _727_zs_k = _let_tmp_rhs12.dtor__0;
        BigInteger _728_cin = _let_tmp_rhs12.dtor__1;
        BigInteger _729_sum = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) + (Std.Collections.Seq.__default.Last<BigInteger>(ys))) + (_728_cin);
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs13 = (((_729_sum) < (Std.Strings.DecimalConversion.__default.BASE())) ? (_System.Tuple2<BigInteger, BigInteger>.create(_729_sum, BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((_729_sum) - (Std.Strings.DecimalConversion.__default.BASE()), BigInteger.One)));
        BigInteger _730_sum__out = _let_tmp_rhs13.dtor__0;
        BigInteger _731_cout = _let_tmp_rhs13.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_727_zs_k, Dafny.Sequence<BigInteger>.FromElements(_730_sum__out)), _731_cout);
      }
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqSub(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs14 = Std.Strings.DecimalConversion.__default.SeqSub(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _732_zs = _let_tmp_rhs14.dtor__0;
        BigInteger _733_cin = _let_tmp_rhs14.dtor__1;
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs15 = (((Std.Collections.Seq.__default.Last<BigInteger>(xs)) >= ((Std.Collections.Seq.__default.Last<BigInteger>(ys)) + (_733_cin))) ? (_System.Tuple2<BigInteger, BigInteger>.create(((Std.Collections.Seq.__default.Last<BigInteger>(xs)) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_733_cin), BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((((Std.Strings.DecimalConversion.__default.BASE()) + (Std.Collections.Seq.__default.Last<BigInteger>(xs))) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_733_cin), BigInteger.One)));
        BigInteger _734_diff__out = _let_tmp_rhs15.dtor__0;
        BigInteger _735_cout = _let_tmp_rhs15.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_732_zs, Dafny.Sequence<BigInteger>.FromElements(_734_diff__out)), _735_cout);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> DIGITS {
      get {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789");
      }
    }
    public static Dafny.ISequence<Dafny.Rune> chars {
      get {
        return Std.Strings.DecimalConversion.__default.DIGITS;
      }
    }
    public static BigInteger @base {
      get {
        return new BigInteger((Std.Strings.DecimalConversion.__default.chars).Count);
      }
    }
    public static Dafny.IMap<Dafny.Rune, BigInteger> charToDigit {
      get {
        return Dafny.Map<Dafny.Rune, BigInteger>.FromElements(new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('0'), BigInteger.Zero), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('1'), BigInteger.One), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('2'), new BigInteger(2)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('3'), new BigInteger(3)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('4'), new BigInteger(4)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('5'), new BigInteger(5)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('6'), new BigInteger(6)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('7'), new BigInteger(7)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('8'), new BigInteger(8)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('9'), new BigInteger(9)));
      }
    }
  }

  public partial class CharSeq {
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class digit {
    private static readonly Dafny.TypeDescriptor<BigInteger> _TYPE = new Dafny.TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static Dafny.TypeDescriptor<BigInteger> _TypeDescriptor() {
      return _TYPE;
    }
  }
} // end of namespace Std.Strings.DecimalConversion
namespace Std.Strings.CharStrEscaping {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> Escape(Dafny.ISequence<Dafny.Rune> str, Dafny.ISet<Dafny.Rune> mustEscape, Dafny.Rune escape) {
      Dafny.ISequence<Dafny.Rune> _736___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_736___accumulator, str);
      } else if ((mustEscape).Contains((str).Select(BigInteger.Zero))) {
        _736___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_736___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements(escape, (str).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in65 = (str).Drop(BigInteger.One);
        Dafny.ISet<Dafny.Rune> _in66 = mustEscape;
        Dafny.Rune _in67 = escape;
        str = _in65;
        mustEscape = _in66;
        escape = _in67;
        goto TAIL_CALL_START;
      } else {
        _736___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_736___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in68 = (str).Drop(BigInteger.One);
        Dafny.ISet<Dafny.Rune> _in69 = mustEscape;
        Dafny.Rune _in70 = escape;
        str = _in68;
        mustEscape = _in69;
        escape = _in70;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> Unescape(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune escape) {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(str);
      } else if (((str).Select(BigInteger.Zero)) == (escape)) {
        if ((new BigInteger((str).Count)) > (BigInteger.One)) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _737_valueOrError0 = Std.Strings.CharStrEscaping.__default.Unescape((str).Drop(new BigInteger(2)), escape);
          if ((_737_valueOrError0).IsFailure()) {
            return (_737_valueOrError0).PropagateFailure<Dafny.ISequence<Dafny.Rune>>();
          } else {
            Dafny.ISequence<Dafny.Rune> _738_tl = (_737_valueOrError0).Extract();
            return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.One)), _738_tl));
          }
        } else {
          return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
        }
      } else {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _739_valueOrError1 = Std.Strings.CharStrEscaping.__default.Unescape((str).Drop(BigInteger.One), escape);
        if ((_739_valueOrError1).IsFailure()) {
          return (_739_valueOrError1).PropagateFailure<Dafny.ISequence<Dafny.Rune>>();
        } else {
          Dafny.ISequence<Dafny.Rune> _740_tl = (_739_valueOrError1).Extract();
          return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.Zero)), _740_tl));
        }
      }
    }
  }
} // end of namespace Std.Strings.CharStrEscaping
namespace Std.Strings {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      return Std.Strings.DecimalConversion.__default.OfNat(n);
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n) {
      return Std.Strings.DecimalConversion.__default.OfInt(n, new Dafny.Rune('-'));
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.DecimalConversion.__default.ToNat(str);
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.DecimalConversion.__default.ToInt(str, new Dafny.Rune('-'));
    }
    public static Dafny.ISequence<Dafny.Rune> EscapeQuotes(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.CharStrEscaping.__default.Escape(str, Dafny.Set<Dafny.Rune>.FromElements(new Dafny.Rune('\"'), new Dafny.Rune('\'')), new Dafny.Rune('\\'));
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> UnescapeQuotes(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.CharStrEscaping.__default.Unescape(str, new Dafny.Rune('\\'));
    }
    public static Dafny.ISequence<Dafny.Rune> OfBool(bool b) {
      if (b) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false");
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfChar(Dafny.Rune c) {
      return Dafny.Sequence<Dafny.Rune>.FromElements(c);
    }
  }
} // end of namespace Std.Strings
namespace Std.Unicode.Base {

  public partial class __default {
    public static bool IsInAssignedPlane(uint i) {
      byte _741_plane = (byte)((i) >> ((int)((byte)(16))));
      return (Std.Unicode.Base.__default.ASSIGNED__PLANES).Contains(_741_plane);
    }
    public static uint HIGH__SURROGATE__MIN {
      get {
        return 55296U;
      }
    }
    public static uint HIGH__SURROGATE__MAX {
      get {
        return 56319U;
      }
    }
    public static uint LOW__SURROGATE__MIN {
      get {
        return 56320U;
      }
    }
    public static uint LOW__SURROGATE__MAX {
      get {
        return 57343U;
      }
    }
    public static Dafny.ISet<byte> ASSIGNED__PLANES {
      get {
        return Dafny.Set<byte>.FromElements((byte)(0), (byte)(1), (byte)(2), (byte)(3), (byte)(14), (byte)(15), (byte)(16));
      }
    }
  }

  public partial class CodePoint {
    private static readonly Dafny.TypeDescriptor<uint> _TYPE = new Dafny.TypeDescriptor<uint>(0);
    public static Dafny.TypeDescriptor<uint> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class HighSurrogateCodePoint {
    private static readonly uint Witness = Std.Unicode.Base.__default.HIGH__SURROGATE__MIN;
    public static uint Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<uint> _TYPE = new Dafny.TypeDescriptor<uint>(Std.Unicode.Base.HighSurrogateCodePoint.Default());
    public static Dafny.TypeDescriptor<uint> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class LowSurrogateCodePoint {
    private static readonly uint Witness = Std.Unicode.Base.__default.LOW__SURROGATE__MIN;
    public static uint Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<uint> _TYPE = new Dafny.TypeDescriptor<uint>(Std.Unicode.Base.LowSurrogateCodePoint.Default());
    public static Dafny.TypeDescriptor<uint> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class ScalarValue {
    private static readonly Dafny.TypeDescriptor<uint> _TYPE = new Dafny.TypeDescriptor<uint>(0);
    public static Dafny.TypeDescriptor<uint> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class AssignedCodePoint {
    private static readonly Dafny.TypeDescriptor<uint> _TYPE = new Dafny.TypeDescriptor<uint>(0);
    public static Dafny.TypeDescriptor<uint> _TypeDescriptor() {
      return _TYPE;
    }
  }
} // end of namespace Std.Unicode.Base
namespace Std.Unicode.Utf8EncodingForm {

  public partial class __default {
    public static bool IsMinimalWellFormedCodeUnitSubsequence(Dafny.ISequence<byte> s) {
      if ((new BigInteger((s).Count)) == (BigInteger.One)) {
        bool _742_b = Std.Unicode.Utf8EncodingForm.__default.IsWellFormedSingleCodeUnitSequence(s);
        return _742_b;
      } else if ((new BigInteger((s).Count)) == (new BigInteger(2))) {
        bool _743_b = Std.Unicode.Utf8EncodingForm.__default.IsWellFormedDoubleCodeUnitSequence(s);
        return _743_b;
      } else if ((new BigInteger((s).Count)) == (new BigInteger(3))) {
        bool _744_b = Std.Unicode.Utf8EncodingForm.__default.IsWellFormedTripleCodeUnitSequence(s);
        return _744_b;
      } else if ((new BigInteger((s).Count)) == (new BigInteger(4))) {
        bool _745_b = Std.Unicode.Utf8EncodingForm.__default.IsWellFormedQuadrupleCodeUnitSequence(s);
        return _745_b;
      } else {
        return false;
      }
    }
    public static bool IsWellFormedSingleCodeUnitSequence(Dafny.ISequence<byte> s) {
      byte _746_firstByte = (s).Select(BigInteger.Zero);
      return (true) && ((((byte)(0)) <= (_746_firstByte)) && ((_746_firstByte) <= ((byte)(127))));
    }
    public static bool IsWellFormedDoubleCodeUnitSequence(Dafny.ISequence<byte> s) {
      byte _747_firstByte = (s).Select(BigInteger.Zero);
      byte _748_secondByte = (s).Select(BigInteger.One);
      return ((((byte)(194)) <= (_747_firstByte)) && ((_747_firstByte) <= ((byte)(223)))) && ((((byte)(128)) <= (_748_secondByte)) && ((_748_secondByte) <= ((byte)(191))));
    }
    public static bool IsWellFormedTripleCodeUnitSequence(Dafny.ISequence<byte> s) {
      byte _749_firstByte = (s).Select(BigInteger.Zero);
      byte _750_secondByte = (s).Select(BigInteger.One);
      byte _751_thirdByte = (s).Select(new BigInteger(2));
      return ((((((_749_firstByte) == ((byte)(224))) && ((((byte)(160)) <= (_750_secondByte)) && ((_750_secondByte) <= ((byte)(191))))) || (((((byte)(225)) <= (_749_firstByte)) && ((_749_firstByte) <= ((byte)(236)))) && ((((byte)(128)) <= (_750_secondByte)) && ((_750_secondByte) <= ((byte)(191)))))) || (((_749_firstByte) == ((byte)(237))) && ((((byte)(128)) <= (_750_secondByte)) && ((_750_secondByte) <= ((byte)(159)))))) || (((((byte)(238)) <= (_749_firstByte)) && ((_749_firstByte) <= ((byte)(239)))) && ((((byte)(128)) <= (_750_secondByte)) && ((_750_secondByte) <= ((byte)(191)))))) && ((((byte)(128)) <= (_751_thirdByte)) && ((_751_thirdByte) <= ((byte)(191))));
    }
    public static bool IsWellFormedQuadrupleCodeUnitSequence(Dafny.ISequence<byte> s) {
      byte _752_firstByte = (s).Select(BigInteger.Zero);
      byte _753_secondByte = (s).Select(BigInteger.One);
      byte _754_thirdByte = (s).Select(new BigInteger(2));
      byte _755_fourthByte = (s).Select(new BigInteger(3));
      return ((((((_752_firstByte) == ((byte)(240))) && ((((byte)(144)) <= (_753_secondByte)) && ((_753_secondByte) <= ((byte)(191))))) || (((((byte)(241)) <= (_752_firstByte)) && ((_752_firstByte) <= ((byte)(243)))) && ((((byte)(128)) <= (_753_secondByte)) && ((_753_secondByte) <= ((byte)(191)))))) || (((_752_firstByte) == ((byte)(244))) && ((((byte)(128)) <= (_753_secondByte)) && ((_753_secondByte) <= ((byte)(143)))))) && ((((byte)(128)) <= (_754_thirdByte)) && ((_754_thirdByte) <= ((byte)(191))))) && ((((byte)(128)) <= (_755_fourthByte)) && ((_755_fourthByte) <= ((byte)(191))));
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<byte>> SplitPrefixMinimalWellFormedCodeUnitSubsequence(Dafny.ISequence<byte> s) {
      if (((new BigInteger((s).Count)) >= (BigInteger.One)) && (Std.Unicode.Utf8EncodingForm.__default.IsWellFormedSingleCodeUnitSequence((s).Take(BigInteger.One)))) {
        return Std.Wrappers.Option<Dafny.ISequence<byte>>.create_Some((s).Take(BigInteger.One));
      } else if (((new BigInteger((s).Count)) >= (new BigInteger(2))) && (Std.Unicode.Utf8EncodingForm.__default.IsWellFormedDoubleCodeUnitSequence((s).Take(new BigInteger(2))))) {
        return Std.Wrappers.Option<Dafny.ISequence<byte>>.create_Some((s).Take(new BigInteger(2)));
      } else if (((new BigInteger((s).Count)) >= (new BigInteger(3))) && (Std.Unicode.Utf8EncodingForm.__default.IsWellFormedTripleCodeUnitSequence((s).Take(new BigInteger(3))))) {
        return Std.Wrappers.Option<Dafny.ISequence<byte>>.create_Some((s).Take(new BigInteger(3)));
      } else if (((new BigInteger((s).Count)) >= (new BigInteger(4))) && (Std.Unicode.Utf8EncodingForm.__default.IsWellFormedQuadrupleCodeUnitSequence((s).Take(new BigInteger(4))))) {
        return Std.Wrappers.Option<Dafny.ISequence<byte>>.create_Some((s).Take(new BigInteger(4)));
      } else {
        return Std.Wrappers.Option<Dafny.ISequence<byte>>.create_None();
      }
    }
    public static Dafny.ISequence<byte> EncodeScalarValue(uint v) {
      if ((v) <= (127U)) {
        return Std.Unicode.Utf8EncodingForm.__default.EncodeScalarValueSingleByte(v);
      } else if ((v) <= (2047U)) {
        return Std.Unicode.Utf8EncodingForm.__default.EncodeScalarValueDoubleByte(v);
      } else if ((v) <= (65535U)) {
        return Std.Unicode.Utf8EncodingForm.__default.EncodeScalarValueTripleByte(v);
      } else {
        return Std.Unicode.Utf8EncodingForm.__default.EncodeScalarValueQuadrupleByte(v);
      }
    }
    public static Dafny.ISequence<byte> EncodeScalarValueSingleByte(uint v) {
      byte _756_x = (byte)((v) & (127U));
      byte _757_firstByte = (byte)(_756_x);
      return Dafny.Sequence<byte>.FromElements(_757_firstByte);
    }
    public static Dafny.ISequence<byte> EncodeScalarValueDoubleByte(uint v) {
      byte _758_x = (byte)((v) & (63U));
      byte _759_y = (byte)(((v) & (1984U)) >> ((int)((byte)(6))));
      byte _760_firstByte = (byte)(((byte)(192)) | ((byte)(_759_y)));
      byte _761_secondByte = (byte)(((byte)(128)) | ((byte)(_758_x)));
      return Dafny.Sequence<byte>.FromElements(_760_firstByte, _761_secondByte);
    }
    public static Dafny.ISequence<byte> EncodeScalarValueTripleByte(uint v) {
      byte _762_x = (byte)((v) & (63U));
      byte _763_y = (byte)(((v) & (4032U)) >> ((int)((byte)(6))));
      byte _764_z = (byte)(((v) & (61440U)) >> ((int)((byte)(12))));
      byte _765_firstByte = (byte)(((byte)(224)) | ((byte)(_764_z)));
      byte _766_secondByte = (byte)(((byte)(128)) | ((byte)(_763_y)));
      byte _767_thirdByte = (byte)(((byte)(128)) | ((byte)(_762_x)));
      return Dafny.Sequence<byte>.FromElements(_765_firstByte, _766_secondByte, _767_thirdByte);
    }
    public static Dafny.ISequence<byte> EncodeScalarValueQuadrupleByte(uint v) {
      byte _768_x = (byte)((v) & (63U));
      byte _769_y = (byte)(((v) & (4032U)) >> ((int)((byte)(6))));
      byte _770_z = (byte)(((v) & (61440U)) >> ((int)((byte)(12))));
      byte _771_u2 = (byte)(((v) & (196608U)) >> ((int)((byte)(16))));
      byte _772_u1 = (byte)(((v) & (1835008U)) >> ((int)((byte)(18))));
      byte _773_firstByte = (byte)(((byte)(240)) | ((byte)(_772_u1)));
      byte _774_secondByte = (byte)(((byte)(((byte)(128)) | (unchecked((byte)(((byte)(((byte)(_771_u2)) << ((int)((byte)(4)))))))))) | ((byte)(_770_z)));
      byte _775_thirdByte = (byte)(((byte)(128)) | ((byte)(_769_y)));
      byte _776_fourthByte = (byte)(((byte)(128)) | ((byte)(_768_x)));
      return Dafny.Sequence<byte>.FromElements(_773_firstByte, _774_secondByte, _775_thirdByte, _776_fourthByte);
    }
    public static uint DecodeMinimalWellFormedCodeUnitSubsequence(Dafny.ISequence<byte> m) {
      if ((new BigInteger((m).Count)) == (BigInteger.One)) {
        return Std.Unicode.Utf8EncodingForm.__default.DecodeMinimalWellFormedCodeUnitSubsequenceSingleByte(m);
      } else if ((new BigInteger((m).Count)) == (new BigInteger(2))) {
        return Std.Unicode.Utf8EncodingForm.__default.DecodeMinimalWellFormedCodeUnitSubsequenceDoubleByte(m);
      } else if ((new BigInteger((m).Count)) == (new BigInteger(3))) {
        return Std.Unicode.Utf8EncodingForm.__default.DecodeMinimalWellFormedCodeUnitSubsequenceTripleByte(m);
      } else {
        return Std.Unicode.Utf8EncodingForm.__default.DecodeMinimalWellFormedCodeUnitSubsequenceQuadrupleByte(m);
      }
    }
    public static uint DecodeMinimalWellFormedCodeUnitSubsequenceSingleByte(Dafny.ISequence<byte> m) {
      byte _777_firstByte = (m).Select(BigInteger.Zero);
      byte _778_x = (byte)(_777_firstByte);
      return (uint)(_778_x);
    }
    public static uint DecodeMinimalWellFormedCodeUnitSubsequenceDoubleByte(Dafny.ISequence<byte> m) {
      byte _779_firstByte = (m).Select(BigInteger.Zero);
      byte _780_secondByte = (m).Select(BigInteger.One);
      uint _781_y = (uint)((byte)((_779_firstByte) & ((byte)(31))));
      uint _782_x = (uint)((byte)((_780_secondByte) & ((byte)(63))));
      return (unchecked((uint)(((_781_y) << ((int)((byte)(6)))) & (uint)0xFFFFFFU))) | ((uint)(_782_x));
    }
    public static uint DecodeMinimalWellFormedCodeUnitSubsequenceTripleByte(Dafny.ISequence<byte> m) {
      byte _783_firstByte = (m).Select(BigInteger.Zero);
      byte _784_secondByte = (m).Select(BigInteger.One);
      byte _785_thirdByte = (m).Select(new BigInteger(2));
      uint _786_z = (uint)((byte)((_783_firstByte) & ((byte)(15))));
      uint _787_y = (uint)((byte)((_784_secondByte) & ((byte)(63))));
      uint _788_x = (uint)((byte)((_785_thirdByte) & ((byte)(63))));
      return ((unchecked((uint)(((_786_z) << ((int)((byte)(12)))) & (uint)0xFFFFFFU))) | (unchecked((uint)(((_787_y) << ((int)((byte)(6)))) & (uint)0xFFFFFFU)))) | ((uint)(_788_x));
    }
    public static uint DecodeMinimalWellFormedCodeUnitSubsequenceQuadrupleByte(Dafny.ISequence<byte> m) {
      byte _789_firstByte = (m).Select(BigInteger.Zero);
      byte _790_secondByte = (m).Select(BigInteger.One);
      byte _791_thirdByte = (m).Select(new BigInteger(2));
      byte _792_fourthByte = (m).Select(new BigInteger(3));
      uint _793_u1 = (uint)((byte)((_789_firstByte) & ((byte)(7))));
      uint _794_u2 = (uint)((byte)(((byte)((_790_secondByte) & ((byte)(48)))) >> ((int)((byte)(4)))));
      uint _795_z = (uint)((byte)((_790_secondByte) & ((byte)(15))));
      uint _796_y = (uint)((byte)((_791_thirdByte) & ((byte)(63))));
      uint _797_x = (uint)((byte)((_792_fourthByte) & ((byte)(63))));
      return ((((unchecked((uint)(((_793_u1) << ((int)((byte)(18)))) & (uint)0xFFFFFFU))) | (unchecked((uint)(((_794_u2) << ((int)((byte)(16)))) & (uint)0xFFFFFFU)))) | (unchecked((uint)(((_795_z) << ((int)((byte)(12)))) & (uint)0xFFFFFFU)))) | (unchecked((uint)(((_796_y) << ((int)((byte)(6)))) & (uint)0xFFFFFFU)))) | ((uint)(_797_x));
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<byte>>> PartitionCodeUnitSequenceChecked(Dafny.ISequence<byte> s) {
      Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<byte>>> maybeParts = Std.Wrappers.Option<Dafny.ISequence<Dafny.ISequence<byte>>>.Default();
      if ((s).Equals(Dafny.Sequence<byte>.FromElements())) {
        maybeParts = Std.Wrappers.Option<Dafny.ISequence<Dafny.ISequence<byte>>>.create_Some(Dafny.Sequence<Dafny.ISequence<byte>>.FromElements());
        return maybeParts;
      }
      Dafny.ISequence<Dafny.ISequence<byte>> _798_result;
      _798_result = Dafny.Sequence<Dafny.ISequence<byte>>.FromElements();
      Dafny.ISequence<byte> _799_rest;
      _799_rest = s;
      while ((new BigInteger((_799_rest).Count)).Sign == 1) {
        Dafny.ISequence<byte> _800_prefix;
        Std.Wrappers._IOption<Dafny.ISequence<byte>> _801_valueOrError0 = Std.Wrappers.Option<Dafny.ISequence<byte>>.Default();
        _801_valueOrError0 = Std.Unicode.Utf8EncodingForm.__default.SplitPrefixMinimalWellFormedCodeUnitSubsequence(_799_rest);
        if ((_801_valueOrError0).IsFailure()) {
          maybeParts = (_801_valueOrError0).PropagateFailure<Dafny.ISequence<Dafny.ISequence<byte>>>();
          return maybeParts;
        }
        _800_prefix = (_801_valueOrError0).Extract();
        _798_result = Dafny.Sequence<Dafny.ISequence<byte>>.Concat(_798_result, Dafny.Sequence<Dafny.ISequence<byte>>.FromElements(_800_prefix));
        _799_rest = (_799_rest).Drop(new BigInteger((_800_prefix).Count));
      }
      maybeParts = Std.Wrappers.Option<Dafny.ISequence<Dafny.ISequence<byte>>>.create_Some(_798_result);
      return maybeParts;
      return maybeParts;
    }
    public static Dafny.ISequence<Dafny.ISequence<byte>> PartitionCodeUnitSequence(Dafny.ISequence<byte> s) {
      return (Std.Unicode.Utf8EncodingForm.__default.PartitionCodeUnitSequenceChecked(s)).Extract();
    }
    public static bool IsWellFormedCodeUnitSequence(Dafny.ISequence<byte> s) {
      return (Std.Unicode.Utf8EncodingForm.__default.PartitionCodeUnitSequenceChecked(s)).is_Some;
    }
    public static Dafny.ISequence<byte> EncodeScalarSequence(Dafny.ISequence<uint> vs) {
      Dafny.ISequence<byte> s = Std.Unicode.Utf8EncodingForm.WellFormedCodeUnitSeq.Default();
      s = Dafny.Sequence<byte>.FromElements();
      BigInteger _lo0 = BigInteger.Zero;
      for (BigInteger _802_i = new BigInteger((vs).Count); _lo0 < _802_i;) {
        _802_i--;
        Dafny.ISequence<byte> _803_next;
        _803_next = Std.Unicode.Utf8EncodingForm.__default.EncodeScalarValue((vs).Select(_802_i));
        s = Dafny.Sequence<byte>.Concat(_803_next, s);
      }
      return s;
    }
    public static Dafny.ISequence<uint> DecodeCodeUnitSequence(Dafny.ISequence<byte> s) {
      Dafny.ISequence<Dafny.ISequence<byte>> _804_parts = Std.Unicode.Utf8EncodingForm.__default.PartitionCodeUnitSequence(s);
      Dafny.ISequence<uint> _805_vs = Std.Collections.Seq.__default.Map<Dafny.ISequence<byte>, uint>(Std.Unicode.Utf8EncodingForm.__default.DecodeMinimalWellFormedCodeUnitSubsequence, _804_parts);
      return _805_vs;
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<uint>> DecodeCodeUnitSequenceChecked(Dafny.ISequence<byte> s) {
      Std.Wrappers._IOption<Dafny.ISequence<uint>> maybeVs = Std.Wrappers.Option<Dafny.ISequence<uint>>.Default();
      Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<byte>>> _806_maybeParts;
      _806_maybeParts = Std.Unicode.Utf8EncodingForm.__default.PartitionCodeUnitSequenceChecked(s);
      if ((_806_maybeParts).is_None) {
        maybeVs = Std.Wrappers.Option<Dafny.ISequence<uint>>.create_None();
        return maybeVs;
      }
      Dafny.ISequence<Dafny.ISequence<byte>> _807_parts;
      _807_parts = (_806_maybeParts).dtor_value;
      Dafny.ISequence<uint> _808_vs;
      _808_vs = Std.Collections.Seq.__default.Map<Dafny.ISequence<byte>, uint>(Std.Unicode.Utf8EncodingForm.__default.DecodeMinimalWellFormedCodeUnitSubsequence, _807_parts);
      maybeVs = Std.Wrappers.Option<Dafny.ISequence<uint>>.create_Some(_808_vs);
      return maybeVs;
      return maybeVs;
    }
  }

  public partial class WellFormedCodeUnitSeq {
    private static readonly Dafny.ISequence<byte> Witness = Dafny.Sequence<byte>.FromElements();
    public static Dafny.ISequence<byte> Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<byte>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<byte>>(Std.Unicode.Utf8EncodingForm.WellFormedCodeUnitSeq.Default());
    public static Dafny.TypeDescriptor<Dafny.ISequence<byte>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class MinimalWellFormedCodeUnitSeq {
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<byte>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<byte>>(Dafny.Sequence<byte>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<byte>> _TypeDescriptor() {
      return _TYPE;
    }
  }
} // end of namespace Std.Unicode.Utf8EncodingForm
namespace Std.Unicode.Utf16EncodingForm {

  public partial class __default {
    public static bool IsMinimalWellFormedCodeUnitSubsequence(Dafny.ISequence<ushort> s) {
      if ((new BigInteger((s).Count)) == (BigInteger.One)) {
        return Std.Unicode.Utf16EncodingForm.__default.IsWellFormedSingleCodeUnitSequence(s);
      } else if ((new BigInteger((s).Count)) == (new BigInteger(2))) {
        bool _809_b = Std.Unicode.Utf16EncodingForm.__default.IsWellFormedDoubleCodeUnitSequence(s);
        return _809_b;
      } else {
        return false;
      }
    }
    public static bool IsWellFormedSingleCodeUnitSequence(Dafny.ISequence<ushort> s) {
      ushort _810_firstWord = (s).Select(BigInteger.Zero);
      return ((((ushort)(0)) <= (_810_firstWord)) && ((_810_firstWord) <= ((ushort)(55295)))) || ((((ushort)(57344)) <= (_810_firstWord)) && ((_810_firstWord) <= ((ushort)(65535))));
    }
    public static bool IsWellFormedDoubleCodeUnitSequence(Dafny.ISequence<ushort> s) {
      ushort _811_firstWord = (s).Select(BigInteger.Zero);
      ushort _812_secondWord = (s).Select(BigInteger.One);
      return ((((ushort)(55296)) <= (_811_firstWord)) && ((_811_firstWord) <= ((ushort)(56319)))) && ((((ushort)(56320)) <= (_812_secondWord)) && ((_812_secondWord) <= ((ushort)(57343))));
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<ushort>> SplitPrefixMinimalWellFormedCodeUnitSubsequence(Dafny.ISequence<ushort> s) {
      if (((new BigInteger((s).Count)) >= (BigInteger.One)) && (Std.Unicode.Utf16EncodingForm.__default.IsWellFormedSingleCodeUnitSequence((s).Take(BigInteger.One)))) {
        return Std.Wrappers.Option<Dafny.ISequence<ushort>>.create_Some((s).Take(BigInteger.One));
      } else if (((new BigInteger((s).Count)) >= (new BigInteger(2))) && (Std.Unicode.Utf16EncodingForm.__default.IsWellFormedDoubleCodeUnitSequence((s).Take(new BigInteger(2))))) {
        return Std.Wrappers.Option<Dafny.ISequence<ushort>>.create_Some((s).Take(new BigInteger(2)));
      } else {
        return Std.Wrappers.Option<Dafny.ISequence<ushort>>.create_None();
      }
    }
    public static Dafny.ISequence<ushort> EncodeScalarValue(uint v) {
      if ((((0U) <= (v)) && ((v) <= (55295U))) || (((57344U) <= (v)) && ((v) <= (65535U)))) {
        return Std.Unicode.Utf16EncodingForm.__default.EncodeScalarValueSingleWord(v);
      } else {
        return Std.Unicode.Utf16EncodingForm.__default.EncodeScalarValueDoubleWord(v);
      }
    }
    public static Dafny.ISequence<ushort> EncodeScalarValueSingleWord(uint v) {
      ushort _813_firstWord = (ushort)(v);
      return Dafny.Sequence<ushort>.FromElements(_813_firstWord);
    }
    public static Dafny.ISequence<ushort> EncodeScalarValueDoubleWord(uint v) {
      ushort _814_x2 = (ushort)((v) & (1023U));
      byte _815_x1 = (byte)(((v) & (64512U)) >> ((int)((byte)(10))));
      byte _816_u = (byte)(((v) & (2031616U)) >> ((int)((byte)(16))));
      byte _817_w = (byte)(unchecked((byte)(((byte)((_816_u) - ((byte)(1)))) & (byte)0x1F)));
      ushort _818_firstWord = (ushort)(((ushort)(((ushort)(55296)) | (unchecked((ushort)(((ushort)(((ushort)(_817_w)) << ((int)((byte)(6)))))))))) | ((ushort)(_815_x1)));
      ushort _819_secondWord = (ushort)(((ushort)(56320)) | ((ushort)(_814_x2)));
      return Dafny.Sequence<ushort>.FromElements(_818_firstWord, _819_secondWord);
    }
    public static uint DecodeMinimalWellFormedCodeUnitSubsequence(Dafny.ISequence<ushort> m) {
      if ((new BigInteger((m).Count)) == (BigInteger.One)) {
        return Std.Unicode.Utf16EncodingForm.__default.DecodeMinimalWellFormedCodeUnitSubsequenceSingleWord(m);
      } else {
        return Std.Unicode.Utf16EncodingForm.__default.DecodeMinimalWellFormedCodeUnitSubsequenceDoubleWord(m);
      }
    }
    public static uint DecodeMinimalWellFormedCodeUnitSubsequenceSingleWord(Dafny.ISequence<ushort> m) {
      ushort _820_firstWord = (m).Select(BigInteger.Zero);
      ushort _821_x = (ushort)(_820_firstWord);
      return (uint)(_821_x);
    }
    public static uint DecodeMinimalWellFormedCodeUnitSubsequenceDoubleWord(Dafny.ISequence<ushort> m) {
      ushort _822_firstWord = (m).Select(BigInteger.Zero);
      ushort _823_secondWord = (m).Select(BigInteger.One);
      uint _824_x2 = (uint)((ushort)((_823_secondWord) & ((ushort)(1023))));
      uint _825_x1 = (uint)((ushort)((_822_firstWord) & ((ushort)(63))));
      uint _826_w = (uint)((ushort)(((ushort)((_822_firstWord) & ((ushort)(960)))) >> ((int)((byte)(6)))));
      uint _827_u = (uint)(unchecked((uint)(((_826_w) + (1U)) & (uint)0xFFFFFFU)));
      uint _828_v = ((unchecked((uint)(((_827_u) << ((int)((byte)(16)))) & (uint)0xFFFFFFU))) | (unchecked((uint)(((_825_x1) << ((int)((byte)(10)))) & (uint)0xFFFFFFU)))) | ((uint)(_824_x2));
      return _828_v;
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<ushort>>> PartitionCodeUnitSequenceChecked(Dafny.ISequence<ushort> s) {
      Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<ushort>>> maybeParts = Std.Wrappers.Option<Dafny.ISequence<Dafny.ISequence<ushort>>>.Default();
      if ((s).Equals(Dafny.Sequence<ushort>.FromElements())) {
        maybeParts = Std.Wrappers.Option<Dafny.ISequence<Dafny.ISequence<ushort>>>.create_Some(Dafny.Sequence<Dafny.ISequence<ushort>>.FromElements());
        return maybeParts;
      }
      Dafny.ISequence<Dafny.ISequence<ushort>> _829_result;
      _829_result = Dafny.Sequence<Dafny.ISequence<ushort>>.FromElements();
      Dafny.ISequence<ushort> _830_rest;
      _830_rest = s;
      while ((new BigInteger((_830_rest).Count)).Sign == 1) {
        Dafny.ISequence<ushort> _831_prefix;
        Std.Wrappers._IOption<Dafny.ISequence<ushort>> _832_valueOrError0 = Std.Wrappers.Option<Dafny.ISequence<ushort>>.Default();
        _832_valueOrError0 = Std.Unicode.Utf16EncodingForm.__default.SplitPrefixMinimalWellFormedCodeUnitSubsequence(_830_rest);
        if ((_832_valueOrError0).IsFailure()) {
          maybeParts = (_832_valueOrError0).PropagateFailure<Dafny.ISequence<Dafny.ISequence<ushort>>>();
          return maybeParts;
        }
        _831_prefix = (_832_valueOrError0).Extract();
        _829_result = Dafny.Sequence<Dafny.ISequence<ushort>>.Concat(_829_result, Dafny.Sequence<Dafny.ISequence<ushort>>.FromElements(_831_prefix));
        _830_rest = (_830_rest).Drop(new BigInteger((_831_prefix).Count));
      }
      maybeParts = Std.Wrappers.Option<Dafny.ISequence<Dafny.ISequence<ushort>>>.create_Some(_829_result);
      return maybeParts;
      return maybeParts;
    }
    public static Dafny.ISequence<Dafny.ISequence<ushort>> PartitionCodeUnitSequence(Dafny.ISequence<ushort> s) {
      return (Std.Unicode.Utf16EncodingForm.__default.PartitionCodeUnitSequenceChecked(s)).Extract();
    }
    public static bool IsWellFormedCodeUnitSequence(Dafny.ISequence<ushort> s) {
      return (Std.Unicode.Utf16EncodingForm.__default.PartitionCodeUnitSequenceChecked(s)).is_Some;
    }
    public static Dafny.ISequence<ushort> EncodeScalarSequence(Dafny.ISequence<uint> vs) {
      Dafny.ISequence<ushort> s = Std.Unicode.Utf16EncodingForm.WellFormedCodeUnitSeq.Default();
      s = Dafny.Sequence<ushort>.FromElements();
      BigInteger _lo1 = BigInteger.Zero;
      for (BigInteger _833_i = new BigInteger((vs).Count); _lo1 < _833_i;) {
        _833_i--;
        Dafny.ISequence<ushort> _834_next;
        _834_next = Std.Unicode.Utf16EncodingForm.__default.EncodeScalarValue((vs).Select(_833_i));
        s = Dafny.Sequence<ushort>.Concat(_834_next, s);
      }
      return s;
    }
    public static Dafny.ISequence<uint> DecodeCodeUnitSequence(Dafny.ISequence<ushort> s) {
      Dafny.ISequence<Dafny.ISequence<ushort>> _835_parts = Std.Unicode.Utf16EncodingForm.__default.PartitionCodeUnitSequence(s);
      Dafny.ISequence<uint> _836_vs = Std.Collections.Seq.__default.Map<Dafny.ISequence<ushort>, uint>(Std.Unicode.Utf16EncodingForm.__default.DecodeMinimalWellFormedCodeUnitSubsequence, _835_parts);
      return _836_vs;
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<uint>> DecodeCodeUnitSequenceChecked(Dafny.ISequence<ushort> s) {
      Std.Wrappers._IOption<Dafny.ISequence<uint>> maybeVs = Std.Wrappers.Option<Dafny.ISequence<uint>>.Default();
      Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<ushort>>> _837_maybeParts;
      _837_maybeParts = Std.Unicode.Utf16EncodingForm.__default.PartitionCodeUnitSequenceChecked(s);
      if ((_837_maybeParts).is_None) {
        maybeVs = Std.Wrappers.Option<Dafny.ISequence<uint>>.create_None();
        return maybeVs;
      }
      Dafny.ISequence<Dafny.ISequence<ushort>> _838_parts;
      _838_parts = (_837_maybeParts).dtor_value;
      Dafny.ISequence<uint> _839_vs;
      _839_vs = Std.Collections.Seq.__default.Map<Dafny.ISequence<ushort>, uint>(Std.Unicode.Utf16EncodingForm.__default.DecodeMinimalWellFormedCodeUnitSubsequence, _838_parts);
      maybeVs = Std.Wrappers.Option<Dafny.ISequence<uint>>.create_Some(_839_vs);
      return maybeVs;
      return maybeVs;
    }
  }

  public partial class WellFormedCodeUnitSeq {
    private static readonly Dafny.ISequence<ushort> Witness = Dafny.Sequence<ushort>.FromElements();
    public static Dafny.ISequence<ushort> Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<ushort>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<ushort>>(Std.Unicode.Utf16EncodingForm.WellFormedCodeUnitSeq.Default());
    public static Dafny.TypeDescriptor<Dafny.ISequence<ushort>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class MinimalWellFormedCodeUnitSeq {
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<ushort>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<ushort>>(Dafny.Sequence<ushort>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<ushort>> _TypeDescriptor() {
      return _TYPE;
    }
  }
} // end of namespace Std.Unicode.Utf16EncodingForm
namespace Std.Unicode.UnicodeStringsWithUnicodeChar {

  public partial class __default {
    public static uint CharAsUnicodeScalarValue(Dafny.Rune c) {
      return (uint)((c).Value);
    }
    public static Dafny.Rune CharFromUnicodeScalarValue(uint sv) {
      return new Dafny.Rune((int)(new BigInteger(sv)));
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<byte>> ToUTF8Checked(Dafny.ISequence<Dafny.Rune> s) {
      Dafny.ISequence<uint> _840_asCodeUnits = Std.Collections.Seq.__default.Map<Dafny.Rune, uint>(Std.Unicode.UnicodeStringsWithUnicodeChar.__default.CharAsUnicodeScalarValue, s);
      Dafny.ISequence<byte> _841_asUtf8CodeUnits = Std.Unicode.Utf8EncodingForm.__default.EncodeScalarSequence(_840_asCodeUnits);
      Dafny.ISequence<byte> _842_asBytes = Std.Collections.Seq.__default.Map<byte, byte>(((System.Func<byte, byte>)((_843_cu) => {
        return (byte)(_843_cu);
      })), _841_asUtf8CodeUnits);
      return Std.Wrappers.Option<Dafny.ISequence<byte>>.create_Some(_842_asBytes);
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> FromUTF8Checked(Dafny.ISequence<byte> bs) {
      Dafny.ISequence<byte> _844_asCodeUnits = Std.Collections.Seq.__default.Map<byte, byte>(((System.Func<byte, byte>)((_845_c) => {
        return (byte)(_845_c);
      })), bs);
      Std.Wrappers._IOption<Dafny.ISequence<uint>> _846_valueOrError0 = Std.Unicode.Utf8EncodingForm.__default.DecodeCodeUnitSequenceChecked(_844_asCodeUnits);
      if ((_846_valueOrError0).IsFailure()) {
        return (_846_valueOrError0).PropagateFailure<Dafny.ISequence<Dafny.Rune>>();
      } else {
        Dafny.ISequence<uint> _847_utf32 = (_846_valueOrError0).Extract();
        Dafny.ISequence<Dafny.Rune> _848_asChars = Std.Collections.Seq.__default.Map<uint, Dafny.Rune>(Std.Unicode.UnicodeStringsWithUnicodeChar.__default.CharFromUnicodeScalarValue, _847_utf32);
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(_848_asChars);
      }
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<ushort>> ToUTF16Checked(Dafny.ISequence<Dafny.Rune> s) {
      Dafny.ISequence<uint> _849_asCodeUnits = Std.Collections.Seq.__default.Map<Dafny.Rune, uint>(Std.Unicode.UnicodeStringsWithUnicodeChar.__default.CharAsUnicodeScalarValue, s);
      Dafny.ISequence<ushort> _850_asUtf16CodeUnits = Std.Unicode.Utf16EncodingForm.__default.EncodeScalarSequence(_849_asCodeUnits);
      Dafny.ISequence<ushort> _851_asBytes = Std.Collections.Seq.__default.Map<ushort, ushort>(((System.Func<ushort, ushort>)((_852_cu) => {
        return (ushort)(_852_cu);
      })), _850_asUtf16CodeUnits);
      return Std.Wrappers.Option<Dafny.ISequence<ushort>>.create_Some(_851_asBytes);
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> FromUTF16Checked(Dafny.ISequence<ushort> bs) {
      Dafny.ISequence<ushort> _853_asCodeUnits = Std.Collections.Seq.__default.Map<ushort, ushort>(((System.Func<ushort, ushort>)((_854_c) => {
        return (ushort)(_854_c);
      })), bs);
      Std.Wrappers._IOption<Dafny.ISequence<uint>> _855_valueOrError0 = Std.Unicode.Utf16EncodingForm.__default.DecodeCodeUnitSequenceChecked(_853_asCodeUnits);
      if ((_855_valueOrError0).IsFailure()) {
        return (_855_valueOrError0).PropagateFailure<Dafny.ISequence<Dafny.Rune>>();
      } else {
        Dafny.ISequence<uint> _856_utf32 = (_855_valueOrError0).Extract();
        Dafny.ISequence<Dafny.Rune> _857_asChars = Std.Collections.Seq.__default.Map<uint, Dafny.Rune>(Std.Unicode.UnicodeStringsWithUnicodeChar.__default.CharFromUnicodeScalarValue, _856_utf32);
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(_857_asChars);
      }
    }
    public static Dafny.ISequence<byte> ASCIIToUTF8(Dafny.ISequence<Dafny.Rune> s) {
      return Std.Collections.Seq.__default.Map<Dafny.Rune, byte>(((System.Func<Dafny.Rune, byte>)((_858_c) => {
        return (byte)((_858_c).Value);
      })), s);
    }
    public static Dafny.ISequence<ushort> ASCIIToUTF16(Dafny.ISequence<Dafny.Rune> s) {
      return Std.Collections.Seq.__default.Map<Dafny.Rune, ushort>(((System.Func<Dafny.Rune, ushort>)((_859_c) => {
        return (ushort)((_859_c).Value);
      })), s);
    }
  }
} // end of namespace Std.Unicode.UnicodeStringsWithUnicodeChar
namespace Std.Unicode.Utf8EncodingScheme {

  public partial class __default {
    public static Dafny.ISequence<byte> Serialize(Dafny.ISequence<byte> s) {
      return Std.Collections.Seq.__default.Map<byte, byte>(((System.Func<byte, byte>)((_860_c) => {
        return (byte)(_860_c);
      })), s);
    }
    public static Dafny.ISequence<byte> Deserialize(Dafny.ISequence<byte> b) {
      return Std.Collections.Seq.__default.Map<byte, byte>(((System.Func<byte, byte>)((_861_b) => {
        return (byte)(_861_b);
      })), b);
    }
  }
} // end of namespace Std.Unicode.Utf8EncodingScheme
namespace Std.Unicode {

} // end of namespace Std.Unicode
namespace Std.JSON.Values {

  public partial class __default {
    public static Std.JSON.Values._IDecimal Int(BigInteger n) {
      return Std.JSON.Values.Decimal.create(n, BigInteger.Zero);
    }
  }

  public interface _IDecimal {
    bool is_Decimal { get; }
    BigInteger dtor_n { get; }
    BigInteger dtor_e10 { get; }
    _IDecimal DowncastClone();
  }
  public class Decimal : _IDecimal {
    public readonly BigInteger _n;
    public readonly BigInteger _e10;
    public Decimal(BigInteger n, BigInteger e10) {
      this._n = n;
      this._e10 = e10;
    }
    public _IDecimal DowncastClone() {
      if (this is _IDecimal dt) { return dt; }
      return new Decimal(_n, _e10);
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Values.Decimal;
      return oth != null && this._n == oth._n && this._e10 == oth._e10;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._n));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._e10));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Values.Decimal.Decimal";
      s += "(";
      s += Dafny.Helpers.ToString(this._n);
      s += ", ";
      s += Dafny.Helpers.ToString(this._e10);
      s += ")";
      return s;
    }
    private static readonly Std.JSON.Values._IDecimal theDefault = create(BigInteger.Zero, BigInteger.Zero);
    public static Std.JSON.Values._IDecimal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Values._IDecimal> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Values._IDecimal>(Std.JSON.Values.Decimal.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Values._IDecimal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDecimal create(BigInteger n, BigInteger e10) {
      return new Decimal(n, e10);
    }
    public static _IDecimal create_Decimal(BigInteger n, BigInteger e10) {
      return create(n, e10);
    }
    public bool is_Decimal { get { return true; } }
    public BigInteger dtor_n {
      get {
        return this._n;
      }
    }
    public BigInteger dtor_e10 {
      get {
        return this._e10;
      }
    }
  }

  public interface _IJSON {
    bool is_Null { get; }
    bool is_Bool { get; }
    bool is_String { get; }
    bool is_Number { get; }
    bool is_Object { get; }
    bool is_Array { get; }
    bool dtor_b { get; }
    Dafny.ISequence<Dafny.Rune> dtor_str { get; }
    Std.JSON.Values._IDecimal dtor_num { get; }
    Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, Std.JSON.Values._IJSON>> dtor_obj { get; }
    Dafny.ISequence<Std.JSON.Values._IJSON> dtor_arr { get; }
    _IJSON DowncastClone();
  }
  public abstract class JSON : _IJSON {
    public JSON() {
    }
    private static readonly Std.JSON.Values._IJSON theDefault = create_Null();
    public static Std.JSON.Values._IJSON Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Values._IJSON> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Values._IJSON>(Std.JSON.Values.JSON.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Values._IJSON> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IJSON create_Null() {
      return new JSON_Null();
    }
    public static _IJSON create_Bool(bool b) {
      return new JSON_Bool(b);
    }
    public static _IJSON create_String(Dafny.ISequence<Dafny.Rune> str) {
      return new JSON_String(str);
    }
    public static _IJSON create_Number(Std.JSON.Values._IDecimal num) {
      return new JSON_Number(num);
    }
    public static _IJSON create_Object(Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, Std.JSON.Values._IJSON>> obj) {
      return new JSON_Object(obj);
    }
    public static _IJSON create_Array(Dafny.ISequence<Std.JSON.Values._IJSON> arr) {
      return new JSON_Array(arr);
    }
    public bool is_Null { get { return this is JSON_Null; } }
    public bool is_Bool { get { return this is JSON_Bool; } }
    public bool is_String { get { return this is JSON_String; } }
    public bool is_Number { get { return this is JSON_Number; } }
    public bool is_Object { get { return this is JSON_Object; } }
    public bool is_Array { get { return this is JSON_Array; } }
    public bool dtor_b {
      get {
        var d = this;
        return ((JSON_Bool)d)._b;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_str {
      get {
        var d = this;
        return ((JSON_String)d)._str;
      }
    }
    public Std.JSON.Values._IDecimal dtor_num {
      get {
        var d = this;
        return ((JSON_Number)d)._num;
      }
    }
    public Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, Std.JSON.Values._IJSON>> dtor_obj {
      get {
        var d = this;
        return ((JSON_Object)d)._obj;
      }
    }
    public Dafny.ISequence<Std.JSON.Values._IJSON> dtor_arr {
      get {
        var d = this;
        return ((JSON_Array)d)._arr;
      }
    }
    public abstract _IJSON DowncastClone();
  }
  public class JSON_Null : JSON {
    public JSON_Null() : base() {
    }
    public override _IJSON DowncastClone() {
      if (this is _IJSON dt) { return dt; }
      return new JSON_Null();
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Values.JSON_Null;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Values.JSON.Null";
      return s;
    }
  }
  public class JSON_Bool : JSON {
    public readonly bool _b;
    public JSON_Bool(bool b) : base() {
      this._b = b;
    }
    public override _IJSON DowncastClone() {
      if (this is _IJSON dt) { return dt; }
      return new JSON_Bool(_b);
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Values.JSON_Bool;
      return oth != null && this._b == oth._b;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._b));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Values.JSON.Bool";
      s += "(";
      s += Dafny.Helpers.ToString(this._b);
      s += ")";
      return s;
    }
  }
  public class JSON_String : JSON {
    public readonly Dafny.ISequence<Dafny.Rune> _str;
    public JSON_String(Dafny.ISequence<Dafny.Rune> str) : base() {
      this._str = str;
    }
    public override _IJSON DowncastClone() {
      if (this is _IJSON dt) { return dt; }
      return new JSON_String(_str);
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Values.JSON_String;
      return oth != null && object.Equals(this._str, oth._str);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._str));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Values.JSON.String";
      s += "(";
      s += this._str.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class JSON_Number : JSON {
    public readonly Std.JSON.Values._IDecimal _num;
    public JSON_Number(Std.JSON.Values._IDecimal num) : base() {
      this._num = num;
    }
    public override _IJSON DowncastClone() {
      if (this is _IJSON dt) { return dt; }
      return new JSON_Number(_num);
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Values.JSON_Number;
      return oth != null && object.Equals(this._num, oth._num);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._num));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Values.JSON.Number";
      s += "(";
      s += Dafny.Helpers.ToString(this._num);
      s += ")";
      return s;
    }
  }
  public class JSON_Object : JSON {
    public readonly Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, Std.JSON.Values._IJSON>> _obj;
    public JSON_Object(Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, Std.JSON.Values._IJSON>> obj) : base() {
      this._obj = obj;
    }
    public override _IJSON DowncastClone() {
      if (this is _IJSON dt) { return dt; }
      return new JSON_Object(_obj);
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Values.JSON_Object;
      return oth != null && object.Equals(this._obj, oth._obj);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._obj));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Values.JSON.Object";
      s += "(";
      s += Dafny.Helpers.ToString(this._obj);
      s += ")";
      return s;
    }
  }
  public class JSON_Array : JSON {
    public readonly Dafny.ISequence<Std.JSON.Values._IJSON> _arr;
    public JSON_Array(Dafny.ISequence<Std.JSON.Values._IJSON> arr) : base() {
      this._arr = arr;
    }
    public override _IJSON DowncastClone() {
      if (this is _IJSON dt) { return dt; }
      return new JSON_Array(_arr);
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Values.JSON_Array;
      return oth != null && object.Equals(this._arr, oth._arr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Values.JSON.Array";
      s += "(";
      s += Dafny.Helpers.ToString(this._arr);
      s += ")";
      return s;
    }
  }
} // end of namespace Std.JSON.Values
namespace Std.JSON.Errors {


  public interface _IDeserializationError {
    bool is_UnterminatedSequence { get; }
    bool is_UnsupportedEscape { get; }
    bool is_EscapeAtEOS { get; }
    bool is_EmptyNumber { get; }
    bool is_ExpectingEOF { get; }
    bool is_IntOverflow { get; }
    bool is_ReachedEOF { get; }
    bool is_ExpectingByte { get; }
    bool is_ExpectingAnyByte { get; }
    bool is_InvalidUnicode { get; }
    Dafny.ISequence<Dafny.Rune> dtor_str { get; }
    byte dtor_expected { get; }
    short dtor_b { get; }
    Dafny.ISequence<byte> dtor_expected__sq { get; }
    _IDeserializationError DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString();
  }
  public abstract class DeserializationError : _IDeserializationError {
    public DeserializationError() {
    }
    private static readonly Std.JSON.Errors._IDeserializationError theDefault = create_UnterminatedSequence();
    public static Std.JSON.Errors._IDeserializationError Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Errors._IDeserializationError> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Errors._IDeserializationError>(Std.JSON.Errors.DeserializationError.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Errors._IDeserializationError> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDeserializationError create_UnterminatedSequence() {
      return new DeserializationError_UnterminatedSequence();
    }
    public static _IDeserializationError create_UnsupportedEscape(Dafny.ISequence<Dafny.Rune> str) {
      return new DeserializationError_UnsupportedEscape(str);
    }
    public static _IDeserializationError create_EscapeAtEOS() {
      return new DeserializationError_EscapeAtEOS();
    }
    public static _IDeserializationError create_EmptyNumber() {
      return new DeserializationError_EmptyNumber();
    }
    public static _IDeserializationError create_ExpectingEOF() {
      return new DeserializationError_ExpectingEOF();
    }
    public static _IDeserializationError create_IntOverflow() {
      return new DeserializationError_IntOverflow();
    }
    public static _IDeserializationError create_ReachedEOF() {
      return new DeserializationError_ReachedEOF();
    }
    public static _IDeserializationError create_ExpectingByte(byte expected, short b) {
      return new DeserializationError_ExpectingByte(expected, b);
    }
    public static _IDeserializationError create_ExpectingAnyByte(Dafny.ISequence<byte> expected__sq, short b) {
      return new DeserializationError_ExpectingAnyByte(expected__sq, b);
    }
    public static _IDeserializationError create_InvalidUnicode() {
      return new DeserializationError_InvalidUnicode();
    }
    public bool is_UnterminatedSequence { get { return this is DeserializationError_UnterminatedSequence; } }
    public bool is_UnsupportedEscape { get { return this is DeserializationError_UnsupportedEscape; } }
    public bool is_EscapeAtEOS { get { return this is DeserializationError_EscapeAtEOS; } }
    public bool is_EmptyNumber { get { return this is DeserializationError_EmptyNumber; } }
    public bool is_ExpectingEOF { get { return this is DeserializationError_ExpectingEOF; } }
    public bool is_IntOverflow { get { return this is DeserializationError_IntOverflow; } }
    public bool is_ReachedEOF { get { return this is DeserializationError_ReachedEOF; } }
    public bool is_ExpectingByte { get { return this is DeserializationError_ExpectingByte; } }
    public bool is_ExpectingAnyByte { get { return this is DeserializationError_ExpectingAnyByte; } }
    public bool is_InvalidUnicode { get { return this is DeserializationError_InvalidUnicode; } }
    public Dafny.ISequence<Dafny.Rune> dtor_str {
      get {
        var d = this;
        return ((DeserializationError_UnsupportedEscape)d)._str;
      }
    }
    public byte dtor_expected {
      get {
        var d = this;
        return ((DeserializationError_ExpectingByte)d)._expected;
      }
    }
    public short dtor_b {
      get {
        var d = this;
        if (d is DeserializationError_ExpectingByte) { return ((DeserializationError_ExpectingByte)d)._b; }
        return ((DeserializationError_ExpectingAnyByte)d)._b;
      }
    }
    public Dafny.ISequence<byte> dtor_expected__sq {
      get {
        var d = this;
        return ((DeserializationError_ExpectingAnyByte)d)._expected__sq;
      }
    }
    public abstract _IDeserializationError DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString() {
      Std.JSON.Errors._IDeserializationError _source58 = this;
      if (_source58.is_UnterminatedSequence) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Unterminated sequence");
      } else if (_source58.is_UnsupportedEscape) {
        Dafny.ISequence<Dafny.Rune> _862___mcc_h0 = _source58.dtor_str;
        Dafny.ISequence<Dafny.Rune> _863_str = _862___mcc_h0;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Unsupported escape sequence: "), _863_str);
      } else if (_source58.is_EscapeAtEOS) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Escape character at end of string");
      } else if (_source58.is_EmptyNumber) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Number must contain at least one digit");
      } else if (_source58.is_ExpectingEOF) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Expecting EOF");
      } else if (_source58.is_IntOverflow) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Input length does not fit in a 32-bit counter");
      } else if (_source58.is_ReachedEOF) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Reached EOF");
      } else if (_source58.is_ExpectingByte) {
        byte _864___mcc_h1 = _source58.dtor_expected;
        short _865___mcc_h2 = _source58.dtor_b;
        short _866_b = _865___mcc_h2;
        byte _867_b0 = _864___mcc_h1;
        Dafny.ISequence<Dafny.Rune> _868_c = (((_866_b) > ((short)(0))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'"), Dafny.Sequence<Dafny.Rune>.FromElements(new Dafny.Rune((int)(_866_b)))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'"))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("EOF")));
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Expecting '"), Dafny.Sequence<Dafny.Rune>.FromElements(new Dafny.Rune((int)(_867_b0)))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("', read ")), _868_c);
      } else if (_source58.is_ExpectingAnyByte) {
        Dafny.ISequence<byte> _869___mcc_h3 = _source58.dtor_expected__sq;
        short _870___mcc_h4 = _source58.dtor_b;
        short _871_b = _870___mcc_h4;
        Dafny.ISequence<byte> _872_bs0 = _869___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _873_c = (((_871_b) > ((short)(0))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'"), Dafny.Sequence<Dafny.Rune>.FromElements(new Dafny.Rune((int)(_871_b)))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'"))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("EOF")));
        Dafny.ISequence<Dafny.Rune> _874_c0s = ((System.Func<Dafny.ISequence<Dafny.Rune>>)(() => {
          BigInteger dim4 = new BigInteger((_872_bs0).Count);
          var arr4 = new Dafny.Rune[Dafny.Helpers.ToIntChecked(dim4, "array size exceeds memory limit")];
          for (int i4 = 0; i4 < dim4; i4++) {
            var _875_idx = (BigInteger)i4;
            arr4[(int)(_875_idx)] = new Dafny.Rune((int)((_872_bs0).Select(_875_idx)));
          }
          return Dafny.Sequence<Dafny.Rune>.FromArray(arr4);
        }))();
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Expecting one of '"), _874_c0s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("', read ")), _873_c);
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Invalid Unicode sequence");
      }
    }
  }
  public class DeserializationError_UnterminatedSequence : DeserializationError {
    public DeserializationError_UnterminatedSequence() : base() {
    }
    public override _IDeserializationError DowncastClone() {
      if (this is _IDeserializationError dt) { return dt; }
      return new DeserializationError_UnterminatedSequence();
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Errors.DeserializationError_UnterminatedSequence;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Errors.DeserializationError.UnterminatedSequence";
      return s;
    }
  }
  public class DeserializationError_UnsupportedEscape : DeserializationError {
    public readonly Dafny.ISequence<Dafny.Rune> _str;
    public DeserializationError_UnsupportedEscape(Dafny.ISequence<Dafny.Rune> str) : base() {
      this._str = str;
    }
    public override _IDeserializationError DowncastClone() {
      if (this is _IDeserializationError dt) { return dt; }
      return new DeserializationError_UnsupportedEscape(_str);
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Errors.DeserializationError_UnsupportedEscape;
      return oth != null && object.Equals(this._str, oth._str);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._str));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Errors.DeserializationError.UnsupportedEscape";
      s += "(";
      s += this._str.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class DeserializationError_EscapeAtEOS : DeserializationError {
    public DeserializationError_EscapeAtEOS() : base() {
    }
    public override _IDeserializationError DowncastClone() {
      if (this is _IDeserializationError dt) { return dt; }
      return new DeserializationError_EscapeAtEOS();
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Errors.DeserializationError_EscapeAtEOS;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Errors.DeserializationError.EscapeAtEOS";
      return s;
    }
  }
  public class DeserializationError_EmptyNumber : DeserializationError {
    public DeserializationError_EmptyNumber() : base() {
    }
    public override _IDeserializationError DowncastClone() {
      if (this is _IDeserializationError dt) { return dt; }
      return new DeserializationError_EmptyNumber();
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Errors.DeserializationError_EmptyNumber;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Errors.DeserializationError.EmptyNumber";
      return s;
    }
  }
  public class DeserializationError_ExpectingEOF : DeserializationError {
    public DeserializationError_ExpectingEOF() : base() {
    }
    public override _IDeserializationError DowncastClone() {
      if (this is _IDeserializationError dt) { return dt; }
      return new DeserializationError_ExpectingEOF();
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Errors.DeserializationError_ExpectingEOF;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Errors.DeserializationError.ExpectingEOF";
      return s;
    }
  }
  public class DeserializationError_IntOverflow : DeserializationError {
    public DeserializationError_IntOverflow() : base() {
    }
    public override _IDeserializationError DowncastClone() {
      if (this is _IDeserializationError dt) { return dt; }
      return new DeserializationError_IntOverflow();
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Errors.DeserializationError_IntOverflow;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Errors.DeserializationError.IntOverflow";
      return s;
    }
  }
  public class DeserializationError_ReachedEOF : DeserializationError {
    public DeserializationError_ReachedEOF() : base() {
    }
    public override _IDeserializationError DowncastClone() {
      if (this is _IDeserializationError dt) { return dt; }
      return new DeserializationError_ReachedEOF();
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Errors.DeserializationError_ReachedEOF;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Errors.DeserializationError.ReachedEOF";
      return s;
    }
  }
  public class DeserializationError_ExpectingByte : DeserializationError {
    public readonly byte _expected;
    public readonly short _b;
    public DeserializationError_ExpectingByte(byte expected, short b) : base() {
      this._expected = expected;
      this._b = b;
    }
    public override _IDeserializationError DowncastClone() {
      if (this is _IDeserializationError dt) { return dt; }
      return new DeserializationError_ExpectingByte(_expected, _b);
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Errors.DeserializationError_ExpectingByte;
      return oth != null && this._expected == oth._expected && this._b == oth._b;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expected));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._b));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Errors.DeserializationError.ExpectingByte";
      s += "(";
      s += Dafny.Helpers.ToString(this._expected);
      s += ", ";
      s += Dafny.Helpers.ToString(this._b);
      s += ")";
      return s;
    }
  }
  public class DeserializationError_ExpectingAnyByte : DeserializationError {
    public readonly Dafny.ISequence<byte> _expected__sq;
    public readonly short _b;
    public DeserializationError_ExpectingAnyByte(Dafny.ISequence<byte> expected__sq, short b) : base() {
      this._expected__sq = expected__sq;
      this._b = b;
    }
    public override _IDeserializationError DowncastClone() {
      if (this is _IDeserializationError dt) { return dt; }
      return new DeserializationError_ExpectingAnyByte(_expected__sq, _b);
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Errors.DeserializationError_ExpectingAnyByte;
      return oth != null && object.Equals(this._expected__sq, oth._expected__sq) && this._b == oth._b;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expected__sq));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._b));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Errors.DeserializationError.ExpectingAnyByte";
      s += "(";
      s += Dafny.Helpers.ToString(this._expected__sq);
      s += ", ";
      s += Dafny.Helpers.ToString(this._b);
      s += ")";
      return s;
    }
  }
  public class DeserializationError_InvalidUnicode : DeserializationError {
    public DeserializationError_InvalidUnicode() : base() {
    }
    public override _IDeserializationError DowncastClone() {
      if (this is _IDeserializationError dt) { return dt; }
      return new DeserializationError_InvalidUnicode();
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Errors.DeserializationError_InvalidUnicode;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Errors.DeserializationError.InvalidUnicode";
      return s;
    }
  }

  public interface _ISerializationError {
    bool is_OutOfMemory { get; }
    bool is_IntTooLarge { get; }
    bool is_StringTooLong { get; }
    bool is_InvalidUnicode { get; }
    BigInteger dtor_i { get; }
    Dafny.ISequence<Dafny.Rune> dtor_s { get; }
    _ISerializationError DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString();
  }
  public abstract class SerializationError : _ISerializationError {
    public SerializationError() {
    }
    private static readonly Std.JSON.Errors._ISerializationError theDefault = create_OutOfMemory();
    public static Std.JSON.Errors._ISerializationError Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Errors._ISerializationError> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Errors._ISerializationError>(Std.JSON.Errors.SerializationError.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Errors._ISerializationError> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ISerializationError create_OutOfMemory() {
      return new SerializationError_OutOfMemory();
    }
    public static _ISerializationError create_IntTooLarge(BigInteger i) {
      return new SerializationError_IntTooLarge(i);
    }
    public static _ISerializationError create_StringTooLong(Dafny.ISequence<Dafny.Rune> s) {
      return new SerializationError_StringTooLong(s);
    }
    public static _ISerializationError create_InvalidUnicode() {
      return new SerializationError_InvalidUnicode();
    }
    public bool is_OutOfMemory { get { return this is SerializationError_OutOfMemory; } }
    public bool is_IntTooLarge { get { return this is SerializationError_IntTooLarge; } }
    public bool is_StringTooLong { get { return this is SerializationError_StringTooLong; } }
    public bool is_InvalidUnicode { get { return this is SerializationError_InvalidUnicode; } }
    public BigInteger dtor_i {
      get {
        var d = this;
        return ((SerializationError_IntTooLarge)d)._i;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_s {
      get {
        var d = this;
        return ((SerializationError_StringTooLong)d)._s;
      }
    }
    public abstract _ISerializationError DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString() {
      Std.JSON.Errors._ISerializationError _source59 = this;
      if (_source59.is_OutOfMemory) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Out of memory");
      } else if (_source59.is_IntTooLarge) {
        BigInteger _876___mcc_h0 = _source59.dtor_i;
        BigInteger _877_i = _876___mcc_h0;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Integer too large: "), Std.Strings.__default.OfInt(_877_i));
      } else if (_source59.is_StringTooLong) {
        Dafny.ISequence<Dafny.Rune> _878___mcc_h1 = _source59.dtor_s;
        Dafny.ISequence<Dafny.Rune> _879_s = _878___mcc_h1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("String too long: "), _879_s);
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Invalid Unicode sequence");
      }
    }
  }
  public class SerializationError_OutOfMemory : SerializationError {
    public SerializationError_OutOfMemory() : base() {
    }
    public override _ISerializationError DowncastClone() {
      if (this is _ISerializationError dt) { return dt; }
      return new SerializationError_OutOfMemory();
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Errors.SerializationError_OutOfMemory;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Errors.SerializationError.OutOfMemory";
      return s;
    }
  }
  public class SerializationError_IntTooLarge : SerializationError {
    public readonly BigInteger _i;
    public SerializationError_IntTooLarge(BigInteger i) : base() {
      this._i = i;
    }
    public override _ISerializationError DowncastClone() {
      if (this is _ISerializationError dt) { return dt; }
      return new SerializationError_IntTooLarge(_i);
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Errors.SerializationError_IntTooLarge;
      return oth != null && this._i == oth._i;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._i));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Errors.SerializationError.IntTooLarge";
      s += "(";
      s += Dafny.Helpers.ToString(this._i);
      s += ")";
      return s;
    }
  }
  public class SerializationError_StringTooLong : SerializationError {
    public readonly Dafny.ISequence<Dafny.Rune> _s;
    public SerializationError_StringTooLong(Dafny.ISequence<Dafny.Rune> s) : base() {
      this._s = s;
    }
    public override _ISerializationError DowncastClone() {
      if (this is _ISerializationError dt) { return dt; }
      return new SerializationError_StringTooLong(_s);
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Errors.SerializationError_StringTooLong;
      return oth != null && object.Equals(this._s, oth._s);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._s));
      return (int)hash;
    }
    public override string ToString() {
      string ss = "Errors.SerializationError.StringTooLong";
      ss += "(";
      ss += this._s.ToVerbatimString(true);
      ss += ")";
      return ss;
    }
  }
  public class SerializationError_InvalidUnicode : SerializationError {
    public SerializationError_InvalidUnicode() : base() {
    }
    public override _ISerializationError DowncastClone() {
      if (this is _ISerializationError dt) { return dt; }
      return new SerializationError_InvalidUnicode();
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Errors.SerializationError_InvalidUnicode;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Errors.SerializationError.InvalidUnicode";
      return s;
    }
  }
} // end of namespace Std.JSON.Errors
namespace Std.JSON.Spec {

  public partial class __default {
    public static Dafny.ISequence<ushort> EscapeUnicode(ushort c) {
      Dafny.ISequence<Dafny.Rune> _880_sStr = Std.Strings.HexConversion.__default.OfNat(new BigInteger(c));
      Dafny.ISequence<ushort> _881_s = Std.Unicode.UnicodeStringsWithUnicodeChar.__default.ASCIIToUTF16(_880_sStr);
      return Dafny.Sequence<ushort>.Concat(_881_s, ((System.Func<Dafny.ISequence<ushort>>)(() => {
        BigInteger dim5 = (new BigInteger(4)) - (new BigInteger((_881_s).Count));
        var arr5 = new ushort[Dafny.Helpers.ToIntChecked(dim5, "array size exceeds memory limit")];
        for (int i5 = 0; i5 < dim5; i5++) {
          var _882___v8 = (BigInteger)i5;
          arr5[(int)(_882___v8)] = (ushort)((new Dafny.Rune(' ')).Value);
        }
        return Dafny.Sequence<ushort>.FromArray(arr5);
      }))());
    }
    public static Dafny.ISequence<ushort> Escape(Dafny.ISequence<ushort> str, BigInteger start) {
      Dafny.ISequence<ushort> _883___accumulator = Dafny.Sequence<ushort>.FromElements();
    TAIL_CALL_START:;
      var _pat_let_tv0 = str;
      var _pat_let_tv1 = start;
      if ((start) >= (new BigInteger((str).Count))) {
        return Dafny.Sequence<ushort>.Concat(_883___accumulator, Dafny.Sequence<ushort>.FromElements());
      } else {
        _883___accumulator = Dafny.Sequence<ushort>.Concat(_883___accumulator, ((((str).Select(start)) == ((ushort)(34))) ? (Std.Unicode.UnicodeStringsWithUnicodeChar.__default.ASCIIToUTF16(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\\\""))) : (((((str).Select(start)) == ((ushort)(92))) ? (Std.Unicode.UnicodeStringsWithUnicodeChar.__default.ASCIIToUTF16(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\\\\"))) : (((((str).Select(start)) == ((ushort)(8))) ? (Std.Unicode.UnicodeStringsWithUnicodeChar.__default.ASCIIToUTF16(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\\b"))) : (((((str).Select(start)) == ((ushort)(12))) ? (Std.Unicode.UnicodeStringsWithUnicodeChar.__default.ASCIIToUTF16(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\\f"))) : (((((str).Select(start)) == ((ushort)(10))) ? (Std.Unicode.UnicodeStringsWithUnicodeChar.__default.ASCIIToUTF16(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\\n"))) : (((((str).Select(start)) == ((ushort)(13))) ? (Std.Unicode.UnicodeStringsWithUnicodeChar.__default.ASCIIToUTF16(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\\r"))) : (((((str).Select(start)) == ((ushort)(9))) ? (Std.Unicode.UnicodeStringsWithUnicodeChar.__default.ASCIIToUTF16(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\\t"))) : (Dafny.Helpers.Let<ushort, Dafny.ISequence<ushort>>((str).Select(start), _pat_let1_0 => Dafny.Helpers.Let<ushort, Dafny.ISequence<ushort>>(_pat_let1_0, _884_c => (((_884_c) < ((ushort)(31))) ? (Dafny.Sequence<ushort>.Concat(Std.Unicode.UnicodeStringsWithUnicodeChar.__default.ASCIIToUTF16(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\\u")), Std.JSON.Spec.__default.EscapeUnicode(_884_c))) : (Dafny.Sequence<ushort>.FromElements((_pat_let_tv0).Select(_pat_let_tv1)))))))))))))))))))));
        Dafny.ISequence<ushort> _in71 = str;
        BigInteger _in72 = (start) + (BigInteger.One);
        str = _in71;
        start = _in72;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IResult<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError> EscapeToUTF8(Dafny.ISequence<Dafny.Rune> str, BigInteger start) {
      Std.Wrappers._IResult<Dafny.ISequence<ushort>, Std.JSON.Errors._ISerializationError> _885_valueOrError0 = (Std.Unicode.UnicodeStringsWithUnicodeChar.__default.ToUTF16Checked(str)).ToResult<Std.JSON.Errors._ISerializationError>(Std.JSON.Errors.SerializationError.create_InvalidUnicode());
      if ((_885_valueOrError0).IsFailure()) {
        return (_885_valueOrError0).PropagateFailure<Dafny.ISequence<byte>>();
      } else {
        Dafny.ISequence<ushort> _886_utf16 = (_885_valueOrError0).Extract();
        Dafny.ISequence<ushort> _887_escaped = Std.JSON.Spec.__default.Escape(_886_utf16, BigInteger.Zero);
        Std.Wrappers._IResult<Dafny.ISequence<Dafny.Rune>, Std.JSON.Errors._ISerializationError> _888_valueOrError1 = (Std.Unicode.UnicodeStringsWithUnicodeChar.__default.FromUTF16Checked(_887_escaped)).ToResult<Std.JSON.Errors._ISerializationError>(Std.JSON.Errors.SerializationError.create_InvalidUnicode());
        if ((_888_valueOrError1).IsFailure()) {
          return (_888_valueOrError1).PropagateFailure<Dafny.ISequence<byte>>();
        } else {
          Dafny.ISequence<Dafny.Rune> _889_utf32 = (_888_valueOrError1).Extract();
          return (Std.Unicode.UnicodeStringsWithUnicodeChar.__default.ToUTF8Checked(_889_utf32)).ToResult<Std.JSON.Errors._ISerializationError>(Std.JSON.Errors.SerializationError.create_InvalidUnicode());
        }
      }
    }
    public static Std.Wrappers._IResult<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError> String(Dafny.ISequence<Dafny.Rune> str) {
      Std.Wrappers._IResult<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError> _890_valueOrError0 = Std.JSON.Spec.__default.EscapeToUTF8(str, BigInteger.Zero);
      if ((_890_valueOrError0).IsFailure()) {
        return (_890_valueOrError0).PropagateFailure<Dafny.ISequence<byte>>();
      } else {
        Dafny.ISequence<byte> _891_inBytes = (_890_valueOrError0).Extract();
        return Std.Wrappers.Result<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError>.create_Success(Dafny.Sequence<byte>.Concat(Dafny.Sequence<byte>.Concat(Std.Unicode.UnicodeStringsWithUnicodeChar.__default.ASCIIToUTF8(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\"")), _891_inBytes), Std.Unicode.UnicodeStringsWithUnicodeChar.__default.ASCIIToUTF8(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""))));
      }
    }
    public static Dafny.ISequence<byte> IntToBytes(BigInteger n) {
      Dafny.ISequence<Dafny.Rune> _892_s = Std.Strings.__default.OfInt(n);
      return Std.Unicode.UnicodeStringsWithUnicodeChar.__default.ASCIIToUTF8(_892_s);
    }
    public static Std.Wrappers._IResult<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError> Number(Std.JSON.Values._IDecimal dec) {
      return Std.Wrappers.Result<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError>.create_Success(Dafny.Sequence<byte>.Concat(Std.JSON.Spec.__default.IntToBytes((dec).dtor_n), ((((dec).dtor_e10).Sign == 0) ? (Dafny.Sequence<byte>.FromElements()) : (Dafny.Sequence<byte>.Concat(Std.Unicode.UnicodeStringsWithUnicodeChar.__default.ASCIIToUTF8(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("e")), Std.JSON.Spec.__default.IntToBytes((dec).dtor_e10))))));
    }
    public static Std.Wrappers._IResult<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError> KeyValue(_System._ITuple2<Dafny.ISequence<Dafny.Rune>, Std.JSON.Values._IJSON> kv) {
      Std.Wrappers._IResult<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError> _893_valueOrError0 = Std.JSON.Spec.__default.String((kv).dtor__0);
      if ((_893_valueOrError0).IsFailure()) {
        return (_893_valueOrError0).PropagateFailure<Dafny.ISequence<byte>>();
      } else {
        Dafny.ISequence<byte> _894_key = (_893_valueOrError0).Extract();
        Std.Wrappers._IResult<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError> _895_valueOrError1 = Std.JSON.Spec.__default.JSON((kv).dtor__1);
        if ((_895_valueOrError1).IsFailure()) {
          return (_895_valueOrError1).PropagateFailure<Dafny.ISequence<byte>>();
        } else {
          Dafny.ISequence<byte> _896_value = (_895_valueOrError1).Extract();
          return Std.Wrappers.Result<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError>.create_Success(Dafny.Sequence<byte>.Concat(Dafny.Sequence<byte>.Concat(_894_key, Std.Unicode.UnicodeStringsWithUnicodeChar.__default.ASCIIToUTF8(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(":"))), _896_value));
        }
      }
    }
    public static Std.Wrappers._IResult<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError> Join(Dafny.ISequence<byte> sep, Dafny.ISequence<Std.Wrappers._IResult<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError>> items) {
      if ((new BigInteger((items).Count)).Sign == 0) {
        return Std.Wrappers.Result<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError>.create_Success(Dafny.Sequence<byte>.FromElements());
      } else {
        Std.Wrappers._IResult<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError> _897_valueOrError0 = (items).Select(BigInteger.Zero);
        if ((_897_valueOrError0).IsFailure()) {
          return (_897_valueOrError0).PropagateFailure<Dafny.ISequence<byte>>();
        } else {
          Dafny.ISequence<byte> _898_first = (_897_valueOrError0).Extract();
          if ((new BigInteger((items).Count)) == (BigInteger.One)) {
            return Std.Wrappers.Result<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError>.create_Success(_898_first);
          } else {
            Std.Wrappers._IResult<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError> _899_valueOrError1 = Std.JSON.Spec.__default.Join(sep, (items).Drop(BigInteger.One));
            if ((_899_valueOrError1).IsFailure()) {
              return (_899_valueOrError1).PropagateFailure<Dafny.ISequence<byte>>();
            } else {
              Dafny.ISequence<byte> _900_rest = (_899_valueOrError1).Extract();
              return Std.Wrappers.Result<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError>.create_Success(Dafny.Sequence<byte>.Concat(Dafny.Sequence<byte>.Concat(_898_first, sep), _900_rest));
            }
          }
        }
      }
    }
    public static Std.Wrappers._IResult<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError> Object(Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, Std.JSON.Values._IJSON>> obj) {
      Std.Wrappers._IResult<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError> _901_valueOrError0 = Std.JSON.Spec.__default.Join(Std.Unicode.UnicodeStringsWithUnicodeChar.__default.ASCIIToUTF8(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",")), ((System.Func<Dafny.ISequence<Std.Wrappers._IResult<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError>>>)(() => {
        BigInteger dim6 = new BigInteger((obj).Count);
        var arr6 = new Std.Wrappers._IResult<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError>[Dafny.Helpers.ToIntChecked(dim6, "array size exceeds memory limit")];
        for (int i6 = 0; i6 < dim6; i6++) {
          var _902_i = (BigInteger)i6;
          arr6[(int)(_902_i)] = Std.JSON.Spec.__default.KeyValue((obj).Select(_902_i));
        }
        return Dafny.Sequence<Std.Wrappers._IResult<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError>>.FromArray(arr6);
      }))());
      if ((_901_valueOrError0).IsFailure()) {
        return (_901_valueOrError0).PropagateFailure<Dafny.ISequence<byte>>();
      } else {
        Dafny.ISequence<byte> _903_middle = (_901_valueOrError0).Extract();
        return Std.Wrappers.Result<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError>.create_Success(Dafny.Sequence<byte>.Concat(Dafny.Sequence<byte>.Concat(Std.Unicode.UnicodeStringsWithUnicodeChar.__default.ASCIIToUTF8(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{")), _903_middle), Std.Unicode.UnicodeStringsWithUnicodeChar.__default.ASCIIToUTF8(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"))));
      }
    }
    public static Std.Wrappers._IResult<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError> Array(Dafny.ISequence<Std.JSON.Values._IJSON> arr) {
      Std.Wrappers._IResult<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError> _904_valueOrError0 = Std.JSON.Spec.__default.Join(Std.Unicode.UnicodeStringsWithUnicodeChar.__default.ASCIIToUTF8(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",")), ((System.Func<Dafny.ISequence<Std.Wrappers._IResult<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError>>>)(() => {
        BigInteger dim7 = new BigInteger((arr).Count);
        var arr7 = new Std.Wrappers._IResult<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError>[Dafny.Helpers.ToIntChecked(dim7, "array size exceeds memory limit")];
        for (int i7 = 0; i7 < dim7; i7++) {
          var _905_i = (BigInteger)i7;
          arr7[(int)(_905_i)] = Std.JSON.Spec.__default.JSON((arr).Select(_905_i));
        }
        return Dafny.Sequence<Std.Wrappers._IResult<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError>>.FromArray(arr7);
      }))());
      if ((_904_valueOrError0).IsFailure()) {
        return (_904_valueOrError0).PropagateFailure<Dafny.ISequence<byte>>();
      } else {
        Dafny.ISequence<byte> _906_middle = (_904_valueOrError0).Extract();
        return Std.Wrappers.Result<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError>.create_Success(Dafny.Sequence<byte>.Concat(Dafny.Sequence<byte>.Concat(Std.Unicode.UnicodeStringsWithUnicodeChar.__default.ASCIIToUTF8(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[")), _906_middle), Std.Unicode.UnicodeStringsWithUnicodeChar.__default.ASCIIToUTF8(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"))));
      }
    }
    public static Std.Wrappers._IResult<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError> JSON(Std.JSON.Values._IJSON js) {
      Std.JSON.Values._IJSON _source60 = js;
      if (_source60.is_Null) {
        return Std.Wrappers.Result<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError>.create_Success(Std.Unicode.UnicodeStringsWithUnicodeChar.__default.ASCIIToUTF8(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("null")));
      } else if (_source60.is_Bool) {
        bool _907___mcc_h0 = _source60.dtor_b;
        bool _908_b = _907___mcc_h0;
        return Std.Wrappers.Result<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError>.create_Success(((_908_b) ? (Std.Unicode.UnicodeStringsWithUnicodeChar.__default.ASCIIToUTF8(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true"))) : (Std.Unicode.UnicodeStringsWithUnicodeChar.__default.ASCIIToUTF8(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")))));
      } else if (_source60.is_String) {
        Dafny.ISequence<Dafny.Rune> _909___mcc_h1 = _source60.dtor_str;
        Dafny.ISequence<Dafny.Rune> _910_str = _909___mcc_h1;
        return Std.JSON.Spec.__default.String(_910_str);
      } else if (_source60.is_Number) {
        Std.JSON.Values._IDecimal _911___mcc_h2 = _source60.dtor_num;
        Std.JSON.Values._IDecimal _912_dec = _911___mcc_h2;
        return Std.JSON.Spec.__default.Number(_912_dec);
      } else if (_source60.is_Object) {
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, Std.JSON.Values._IJSON>> _913___mcc_h3 = _source60.dtor_obj;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, Std.JSON.Values._IJSON>> _914_obj = _913___mcc_h3;
        return Std.JSON.Spec.__default.Object(_914_obj);
      } else {
        Dafny.ISequence<Std.JSON.Values._IJSON> _915___mcc_h4 = _source60.dtor_arr;
        Dafny.ISequence<Std.JSON.Values._IJSON> _916_arr = _915___mcc_h4;
        return Std.JSON.Spec.__default.Array(_916_arr);
      }
    }
  }
} // end of namespace Std.JSON.Spec
namespace Std.JSON.Utils.Views.Core {

  public partial class __default {
    public static bool Adjacent(Std.JSON.Utils.Views.Core._IView__ lv, Std.JSON.Utils.Views.Core._IView__ rv) {
      return (((lv).dtor_end) == ((rv).dtor_beg)) && (((lv).dtor_s).Equals((rv).dtor_s));
    }
    public static Std.JSON.Utils.Views.Core._IView__ Merge(Std.JSON.Utils.Views.Core._IView__ lv, Std.JSON.Utils.Views.Core._IView__ rv) {
      Std.JSON.Utils.Views.Core._IView__ _917_dt__update__tmp_h0 = lv;
      uint _918_dt__update_hend_h0 = (rv).dtor_end;
      return Std.JSON.Utils.Views.Core.View__.create((_917_dt__update__tmp_h0).dtor_s, (_917_dt__update__tmp_h0).dtor_beg, _918_dt__update_hend_h0);
    }
  }

  public partial class View {
    private static readonly Std.JSON.Utils.Views.Core._IView__ Witness = Std.JSON.Utils.Views.Core.View__.create(Dafny.Sequence<byte>.FromElements(), 0U, 0U);
    public static Std.JSON.Utils.Views.Core._IView__ Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__>(Std.JSON.Utils.Views.Core.View.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public interface _IView__ {
    bool is_View { get; }
    Dafny.ISequence<byte> dtor_s { get; }
    uint dtor_beg { get; }
    uint dtor_end { get; }
    _IView__ DowncastClone();
    bool Empty_q { get; }
    uint Length();
    Dafny.ISequence<byte> Bytes();
    bool Byte_q(byte c);
    bool Char_q(Dafny.Rune c);
    byte At(uint idx);
    short Peek();
    void CopyTo(byte[] dest, uint start);
  }
  public class View__ : _IView__ {
    public readonly Dafny.ISequence<byte> _s;
    public readonly uint _beg;
    public readonly uint _end;
    public View__(Dafny.ISequence<byte> s, uint beg, uint end) {
      this._s = s;
      this._beg = beg;
      this._end = end;
    }
    public _IView__ DowncastClone() {
      if (this is _IView__ dt) { return dt; }
      return new View__(_s, _beg, _end);
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Utils.Views.Core.View__;
      return oth != null && object.Equals(this._s, oth._s) && this._beg == oth._beg && this._end == oth._end;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._s));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._beg));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._end));
      return (int)hash;
    }
    public override string ToString() {
      string ss = "Core.View_.View";
      ss += "(";
      ss += Dafny.Helpers.ToString(this._s);
      ss += ", ";
      ss += Dafny.Helpers.ToString(this._beg);
      ss += ", ";
      ss += Dafny.Helpers.ToString(this._end);
      ss += ")";
      return ss;
    }
    private static readonly Std.JSON.Utils.Views.Core._IView__ theDefault = create(Dafny.Sequence<byte>.Empty, 0, 0);
    public static Std.JSON.Utils.Views.Core._IView__ Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__>(Std.JSON.Utils.Views.Core.View__.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IView__ create(Dafny.ISequence<byte> s, uint beg, uint end) {
      return new View__(s, beg, end);
    }
    public static _IView__ create_View(Dafny.ISequence<byte> s, uint beg, uint end) {
      return create(s, beg, end);
    }
    public bool is_View { get { return true; } }
    public Dafny.ISequence<byte> dtor_s {
      get {
        return this._s;
      }
    }
    public uint dtor_beg {
      get {
        return this._beg;
      }
    }
    public uint dtor_end {
      get {
        return this._end;
      }
    }
    public uint Length() {
      return ((this).dtor_end) - ((this).dtor_beg);
    }
    public Dafny.ISequence<byte> Bytes() {
      return ((this).dtor_s).Subsequence((this).dtor_beg, (this).dtor_end);
    }
    public static Std.JSON.Utils.Views.Core._IView__ OfBytes(Dafny.ISequence<byte> bs) {
      return Std.JSON.Utils.Views.Core.View__.create(bs, (uint)(0U), (uint)(bs).LongCount);
    }
    public static Dafny.ISequence<byte> OfString(Dafny.ISequence<Dafny.Rune> s) {
      return ((System.Func<Dafny.ISequence<byte>>)(() => {
        BigInteger dim8 = new BigInteger((s).Count);
        var arr8 = new byte[Dafny.Helpers.ToIntChecked(dim8, "array size exceeds memory limit")];
        for (int i8 = 0; i8 < dim8; i8++) {
          var _919_i = (BigInteger)i8;
          arr8[(int)(_919_i)] = (byte)(((s).Select(_919_i)).Value);
        }
        return Dafny.Sequence<byte>.FromArray(arr8);
      }))();
    }
    public bool Byte_q(byte c) {
      bool _hresult = false;
      _hresult = (((this).Length()) == (1U)) && (((this).At(0U)) == (c));
      return _hresult;
      return _hresult;
    }
    public bool Char_q(Dafny.Rune c) {
      return (this).Byte_q((byte)((c).Value));
    }
    public byte At(uint idx) {
      return ((this).dtor_s).Select(((this).dtor_beg) + (idx));
    }
    public short Peek() {
      if ((this).Empty_q) {
        return (short)(-1);
      } else {
        return (short)((this).At(0U));
      }
    }
    public void CopyTo(byte[] dest, uint start) {
      uint _hi5 = (this).Length();
      for (uint _920_idx = 0U; _920_idx < _hi5; _920_idx++) {
        uint _index6 = (start) + (_920_idx);
        (dest)[(int)(_index6)] = ((this).dtor_s).Select(((this).dtor_beg) + (_920_idx));
      }
    }
    public static Std.JSON.Utils.Views.Core._IView__ Empty {
      get {
        return Std.JSON.Utils.Views.Core.View__.create(Dafny.Sequence<byte>.FromElements(), 0U, 0U);
      }
    }
    public bool Empty_q {
      get {
        return ((this).dtor_beg) == ((this).dtor_end);
      }
    }
  }
} // end of namespace Std.JSON.Utils.Views.Core
namespace Std.JSON.Utils.Views.Writers {


  public interface _IChain {
    bool is_Empty { get; }
    bool is_Chain { get; }
    Std.JSON.Utils.Views.Writers._IChain dtor_previous { get; }
    Std.JSON.Utils.Views.Core._IView__ dtor_v { get; }
    _IChain DowncastClone();
    BigInteger Length();
    BigInteger Count();
    Dafny.ISequence<byte> Bytes();
    Std.JSON.Utils.Views.Writers._IChain Append(Std.JSON.Utils.Views.Core._IView__ v_k);
    void CopyTo(byte[] dest, uint end);
  }
  public abstract class Chain : _IChain {
    public Chain() {
    }
    private static readonly Std.JSON.Utils.Views.Writers._IChain theDefault = create_Empty();
    public static Std.JSON.Utils.Views.Writers._IChain Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Utils.Views.Writers._IChain> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Utils.Views.Writers._IChain>(Std.JSON.Utils.Views.Writers.Chain.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Views.Writers._IChain> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IChain create_Empty() {
      return new Chain_Empty();
    }
    public static _IChain create_Chain(Std.JSON.Utils.Views.Writers._IChain previous, Std.JSON.Utils.Views.Core._IView__ v) {
      return new Chain_Chain(previous, v);
    }
    public bool is_Empty { get { return this is Chain_Empty; } }
    public bool is_Chain { get { return this is Chain_Chain; } }
    public Std.JSON.Utils.Views.Writers._IChain dtor_previous {
      get {
        var d = this;
        return ((Chain_Chain)d)._previous;
      }
    }
    public Std.JSON.Utils.Views.Core._IView__ dtor_v {
      get {
        var d = this;
        return ((Chain_Chain)d)._v;
      }
    }
    public abstract _IChain DowncastClone();
    public BigInteger Length() {
      BigInteger _921___accumulator = BigInteger.Zero;
      _IChain _this = this;
    TAIL_CALL_START:;
      if ((_this).is_Empty) {
        return (BigInteger.Zero) + (_921___accumulator);
      } else {
        _921___accumulator = (new BigInteger(((_this).dtor_v).Length())) + (_921___accumulator);
        Std.JSON.Utils.Views.Writers._IChain _in73 = (_this).dtor_previous;
        _this = _in73;
        ;
        goto TAIL_CALL_START;
      }
    }
    public BigInteger Count() {
      BigInteger _922___accumulator = BigInteger.Zero;
      _IChain _this = this;
    TAIL_CALL_START:;
      if ((_this).is_Empty) {
        return (BigInteger.Zero) + (_922___accumulator);
      } else {
        _922___accumulator = (BigInteger.One) + (_922___accumulator);
        Std.JSON.Utils.Views.Writers._IChain _in74 = (_this).dtor_previous;
        _this = _in74;
        ;
        goto TAIL_CALL_START;
      }
    }
    public Dafny.ISequence<byte> Bytes() {
      Dafny.ISequence<byte> _923___accumulator = Dafny.Sequence<byte>.FromElements();
      _IChain _this = this;
    TAIL_CALL_START:;
      if ((_this).is_Empty) {
        return Dafny.Sequence<byte>.Concat(Dafny.Sequence<byte>.FromElements(), _923___accumulator);
      } else {
        _923___accumulator = Dafny.Sequence<byte>.Concat(((_this).dtor_v).Bytes(), _923___accumulator);
        Std.JSON.Utils.Views.Writers._IChain _in75 = (_this).dtor_previous;
        _this = _in75;
        ;
        goto TAIL_CALL_START;
      }
    }
    public Std.JSON.Utils.Views.Writers._IChain Append(Std.JSON.Utils.Views.Core._IView__ v_k) {
      if (((this).is_Chain) && (Std.JSON.Utils.Views.Core.__default.Adjacent((this).dtor_v, v_k))) {
        return Std.JSON.Utils.Views.Writers.Chain.create_Chain((this).dtor_previous, Std.JSON.Utils.Views.Core.__default.Merge((this).dtor_v, v_k));
      } else {
        return Std.JSON.Utils.Views.Writers.Chain.create_Chain(this, v_k);
      }
    }
    public void CopyTo(byte[] dest, uint end) {
      _IChain _this = this;
    TAIL_CALL_START:;
      if ((_this).is_Chain) {
        uint _924_end;
        _924_end = (end) - (((_this).dtor_v).Length());
        ((_this).dtor_v).CopyTo(dest, _924_end);
        Std.JSON.Utils.Views.Writers._IChain _in76 = (_this).dtor_previous;
        byte[] _in77 = dest;
        uint _in78 = _924_end;
        _this = _in76;
        ;
        dest = _in77;
        end = _in78;
        goto TAIL_CALL_START;
      }
    }
  }
  public class Chain_Empty : Chain {
    public Chain_Empty() : base() {
    }
    public override _IChain DowncastClone() {
      if (this is _IChain dt) { return dt; }
      return new Chain_Empty();
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Utils.Views.Writers.Chain_Empty;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Writers.Chain.Empty";
      return s;
    }
  }
  public class Chain_Chain : Chain {
    public readonly Std.JSON.Utils.Views.Writers._IChain _previous;
    public readonly Std.JSON.Utils.Views.Core._IView__ _v;
    public Chain_Chain(Std.JSON.Utils.Views.Writers._IChain previous, Std.JSON.Utils.Views.Core._IView__ v) : base() {
      this._previous = previous;
      this._v = v;
    }
    public override _IChain DowncastClone() {
      if (this is _IChain dt) { return dt; }
      return new Chain_Chain(_previous, _v);
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Utils.Views.Writers.Chain_Chain;
      return oth != null && object.Equals(this._previous, oth._previous) && object.Equals(this._v, oth._v);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._previous));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._v));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Writers.Chain.Chain";
      s += "(";
      s += Dafny.Helpers.ToString(this._previous);
      s += ", ";
      s += Dafny.Helpers.ToString(this._v);
      s += ")";
      return s;
    }
  }

  public partial class Writer {
    private static readonly Std.JSON.Utils.Views.Writers._IWriter__ Witness = Std.JSON.Utils.Views.Writers.Writer__.create(0U, Std.JSON.Utils.Views.Writers.Chain.create_Empty());
    public static Std.JSON.Utils.Views.Writers._IWriter__ Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Utils.Views.Writers._IWriter__> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Utils.Views.Writers._IWriter__>(Std.JSON.Utils.Views.Writers.Writer.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Views.Writers._IWriter__> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public interface _IWriter__ {
    bool is_Writer { get; }
    uint dtor_length { get; }
    Std.JSON.Utils.Views.Writers._IChain dtor_chain { get; }
    _IWriter__ DowncastClone();
    bool Empty_q { get; }
    bool Unsaturated_q { get; }
    Dafny.ISequence<byte> Bytes();
    Std.JSON.Utils.Views.Writers._IWriter__ Append(Std.JSON.Utils.Views.Core._IView__ v_k);
    Std.JSON.Utils.Views.Writers._IWriter__ Then(Func<Std.JSON.Utils.Views.Writers._IWriter__, Std.JSON.Utils.Views.Writers._IWriter__> fn);
    void CopyTo(byte[] dest);
    byte[] ToArray();
  }
  public class Writer__ : _IWriter__ {
    public readonly uint _length;
    public readonly Std.JSON.Utils.Views.Writers._IChain _chain;
    public Writer__(uint length, Std.JSON.Utils.Views.Writers._IChain chain) {
      this._length = length;
      this._chain = chain;
    }
    public _IWriter__ DowncastClone() {
      if (this is _IWriter__ dt) { return dt; }
      return new Writer__(_length, _chain);
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Utils.Views.Writers.Writer__;
      return oth != null && this._length == oth._length && object.Equals(this._chain, oth._chain);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._length));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._chain));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Writers.Writer_.Writer";
      s += "(";
      s += Dafny.Helpers.ToString(this._length);
      s += ", ";
      s += Dafny.Helpers.ToString(this._chain);
      s += ")";
      return s;
    }
    private static readonly Std.JSON.Utils.Views.Writers._IWriter__ theDefault = create(0, Std.JSON.Utils.Views.Writers.Chain.Default());
    public static Std.JSON.Utils.Views.Writers._IWriter__ Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Utils.Views.Writers._IWriter__> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Utils.Views.Writers._IWriter__>(Std.JSON.Utils.Views.Writers.Writer__.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Views.Writers._IWriter__> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IWriter__ create(uint length, Std.JSON.Utils.Views.Writers._IChain chain) {
      return new Writer__(length, chain);
    }
    public static _IWriter__ create_Writer(uint length, Std.JSON.Utils.Views.Writers._IChain chain) {
      return create(length, chain);
    }
    public bool is_Writer { get { return true; } }
    public uint dtor_length {
      get {
        return this._length;
      }
    }
    public Std.JSON.Utils.Views.Writers._IChain dtor_chain {
      get {
        return this._chain;
      }
    }
    public Dafny.ISequence<byte> Bytes() {
      return ((this).dtor_chain).Bytes();
    }
    public static uint SaturatedAddU32(uint a, uint b) {
      if ((a) <= ((Std.BoundedInts.__default.UINT32__MAX) - (b))) {
        return (a) + (b);
      } else {
        return Std.BoundedInts.__default.UINT32__MAX;
      }
    }
    public Std.JSON.Utils.Views.Writers._IWriter__ Append(Std.JSON.Utils.Views.Core._IView__ v_k) {
      return Std.JSON.Utils.Views.Writers.Writer__.create(Std.JSON.Utils.Views.Writers.Writer__.SaturatedAddU32((this).dtor_length, (v_k).Length()), ((this).dtor_chain).Append(v_k));
    }
    public Std.JSON.Utils.Views.Writers._IWriter__ Then(Func<Std.JSON.Utils.Views.Writers._IWriter__, Std.JSON.Utils.Views.Writers._IWriter__> fn) {
      return Dafny.Helpers.Id<Func<Std.JSON.Utils.Views.Writers._IWriter__, Std.JSON.Utils.Views.Writers._IWriter__>>(fn)(this);
    }
    public void CopyTo(byte[] dest) {
      ((this).dtor_chain).CopyTo(dest, (this).dtor_length);
    }
    public byte[] ToArray() {
      byte[] bs = new byte[0];
      Func<BigInteger, byte> _init4 = ((System.Func<BigInteger, byte>)((_925_i) => {
        return (byte)(0);
      }));
      byte[] _nw6 = new byte[Dafny.Helpers.ToIntChecked((this).dtor_length, "array size exceeds memory limit")];
      for (var _i0_4 = 0; _i0_4 < new BigInteger(_nw6.Length); _i0_4++) {
        _nw6[(int)(_i0_4)] = _init4(_i0_4);
      }
      bs = _nw6;
      (this).CopyTo(bs);
      return bs;
    }
    public static Std.JSON.Utils.Views.Writers._IWriter__ Empty {
      get {
        return Std.JSON.Utils.Views.Writers.Writer__.create(0U, Std.JSON.Utils.Views.Writers.Chain.create_Empty());
      }
    }
    public bool Unsaturated_q {
      get {
        return ((this).dtor_length) != (Std.BoundedInts.__default.UINT32__MAX);
      }
    }
    public bool Empty_q {
      get {
        return ((this).dtor_chain).is_Empty;
      }
    }
  }
} // end of namespace Std.JSON.Utils.Views.Writers
namespace Std.JSON.Utils.Views {

} // end of namespace Std.JSON.Utils.Views
namespace Std.JSON.Utils.Lexers.Core {


  public interface _ILexerResult<out T, out R> {
    bool is_Accept { get; }
    bool is_Reject { get; }
    bool is_Partial { get; }
    R dtor_err { get; }
    T dtor_st { get; }
    _ILexerResult<__T, __R> DowncastClone<__T, __R>(Func<T, __T> converter0, Func<R, __R> converter1);
  }
  public abstract class LexerResult<T, R> : _ILexerResult<T, R> {
    public LexerResult() {
    }
    public static Std.JSON.Utils.Lexers.Core._ILexerResult<T, R> Default() {
      return create_Accept();
    }
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Lexers.Core._ILexerResult<T, R>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.JSON.Utils.Lexers.Core._ILexerResult<T, R>>(Std.JSON.Utils.Lexers.Core.LexerResult<T, R>.Default());
    }
    public static _ILexerResult<T, R> create_Accept() {
      return new LexerResult_Accept<T, R>();
    }
    public static _ILexerResult<T, R> create_Reject(R err) {
      return new LexerResult_Reject<T, R>(err);
    }
    public static _ILexerResult<T, R> create_Partial(T st) {
      return new LexerResult_Partial<T, R>(st);
    }
    public bool is_Accept { get { return this is LexerResult_Accept<T, R>; } }
    public bool is_Reject { get { return this is LexerResult_Reject<T, R>; } }
    public bool is_Partial { get { return this is LexerResult_Partial<T, R>; } }
    public R dtor_err {
      get {
        var d = this;
        return ((LexerResult_Reject<T, R>)d)._err;
      }
    }
    public T dtor_st {
      get {
        var d = this;
        return ((LexerResult_Partial<T, R>)d)._st;
      }
    }
    public abstract _ILexerResult<__T, __R> DowncastClone<__T, __R>(Func<T, __T> converter0, Func<R, __R> converter1);
  }
  public class LexerResult_Accept<T, R> : LexerResult<T, R> {
    public LexerResult_Accept() : base() {
    }
    public override _ILexerResult<__T, __R> DowncastClone<__T, __R>(Func<T, __T> converter0, Func<R, __R> converter1) {
      if (this is _ILexerResult<__T, __R> dt) { return dt; }
      return new LexerResult_Accept<__T, __R>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Utils.Lexers.Core.LexerResult_Accept<T, R>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Core.LexerResult.Accept";
      return s;
    }
  }
  public class LexerResult_Reject<T, R> : LexerResult<T, R> {
    public readonly R _err;
    public LexerResult_Reject(R err) : base() {
      this._err = err;
    }
    public override _ILexerResult<__T, __R> DowncastClone<__T, __R>(Func<T, __T> converter0, Func<R, __R> converter1) {
      if (this is _ILexerResult<__T, __R> dt) { return dt; }
      return new LexerResult_Reject<__T, __R>(converter1(_err));
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Utils.Lexers.Core.LexerResult_Reject<T, R>;
      return oth != null && object.Equals(this._err, oth._err);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._err));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Core.LexerResult.Reject";
      s += "(";
      s += Dafny.Helpers.ToString(this._err);
      s += ")";
      return s;
    }
  }
  public class LexerResult_Partial<T, R> : LexerResult<T, R> {
    public readonly T _st;
    public LexerResult_Partial(T st) : base() {
      this._st = st;
    }
    public override _ILexerResult<__T, __R> DowncastClone<__T, __R>(Func<T, __T> converter0, Func<R, __R> converter1) {
      if (this is _ILexerResult<__T, __R> dt) { return dt; }
      return new LexerResult_Partial<__T, __R>(converter0(_st));
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Utils.Lexers.Core.LexerResult_Partial<T, R>;
      return oth != null && object.Equals(this._st, oth._st);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._st));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Core.LexerResult.Partial";
      s += "(";
      s += Dafny.Helpers.ToString(this._st);
      s += ")";
      return s;
    }
  }
} // end of namespace Std.JSON.Utils.Lexers.Core
namespace Std.JSON.Utils.Lexers.Strings {

  public partial class __default {
    public static Std.JSON.Utils.Lexers.Core._ILexerResult<bool, __R> StringBody<__R>(bool escaped, short @byte) {
      if ((@byte) == ((short)((new Dafny.Rune('\\')).Value))) {
        return Std.JSON.Utils.Lexers.Core.LexerResult<bool, __R>.create_Partial(!(escaped));
      } else if (((@byte) == ((short)((new Dafny.Rune('\"')).Value))) && (!(escaped))) {
        return Std.JSON.Utils.Lexers.Core.LexerResult<bool, __R>.create_Accept();
      } else {
        return Std.JSON.Utils.Lexers.Core.LexerResult<bool, __R>.create_Partial(false);
      }
    }
    public static Std.JSON.Utils.Lexers.Core._ILexerResult<Std.JSON.Utils.Lexers.Strings._IStringLexerState, Dafny.ISequence<Dafny.Rune>> String(Std.JSON.Utils.Lexers.Strings._IStringLexerState st, short @byte) {
      Std.JSON.Utils.Lexers.Strings._IStringLexerState _source61 = st;
      if (_source61.is_Start) {
        if ((@byte) == ((short)((new Dafny.Rune('\"')).Value))) {
          return Std.JSON.Utils.Lexers.Core.LexerResult<Std.JSON.Utils.Lexers.Strings._IStringLexerState, Dafny.ISequence<Dafny.Rune>>.create_Partial(Std.JSON.Utils.Lexers.Strings.StringLexerState.create_Body(false));
        } else {
          return Std.JSON.Utils.Lexers.Core.LexerResult<Std.JSON.Utils.Lexers.Strings._IStringLexerState, Dafny.ISequence<Dafny.Rune>>.create_Reject(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("String must start with double quote"));
        }
      } else if (_source61.is_Body) {
        bool _926___mcc_h0 = _source61.dtor_escaped;
        bool _927_escaped = _926___mcc_h0;
        if ((@byte) == ((short)((new Dafny.Rune('\\')).Value))) {
          return Std.JSON.Utils.Lexers.Core.LexerResult<Std.JSON.Utils.Lexers.Strings._IStringLexerState, Dafny.ISequence<Dafny.Rune>>.create_Partial(Std.JSON.Utils.Lexers.Strings.StringLexerState.create_Body(!(_927_escaped)));
        } else if (((@byte) == ((short)((new Dafny.Rune('\"')).Value))) && (!(_927_escaped))) {
          return Std.JSON.Utils.Lexers.Core.LexerResult<Std.JSON.Utils.Lexers.Strings._IStringLexerState, Dafny.ISequence<Dafny.Rune>>.create_Partial(Std.JSON.Utils.Lexers.Strings.StringLexerState.create_End());
        } else {
          return Std.JSON.Utils.Lexers.Core.LexerResult<Std.JSON.Utils.Lexers.Strings._IStringLexerState, Dafny.ISequence<Dafny.Rune>>.create_Partial(Std.JSON.Utils.Lexers.Strings.StringLexerState.create_Body(false));
        }
      } else {
        return Std.JSON.Utils.Lexers.Core.LexerResult<Std.JSON.Utils.Lexers.Strings._IStringLexerState, Dafny.ISequence<Dafny.Rune>>.create_Accept();
      }
    }
    public static bool StringBodyLexerStart {
      get {
        return false;
      }
    }
    public static Std.JSON.Utils.Lexers.Strings._IStringLexerState StringLexerStart {
      get {
        return Std.JSON.Utils.Lexers.Strings.StringLexerState.create_Start();
      }
    }
  }

  public interface _IStringLexerState {
    bool is_Start { get; }
    bool is_Body { get; }
    bool is_End { get; }
    bool dtor_escaped { get; }
    _IStringLexerState DowncastClone();
  }
  public abstract class StringLexerState : _IStringLexerState {
    public StringLexerState() {
    }
    private static readonly Std.JSON.Utils.Lexers.Strings._IStringLexerState theDefault = create_Start();
    public static Std.JSON.Utils.Lexers.Strings._IStringLexerState Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Utils.Lexers.Strings._IStringLexerState> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Utils.Lexers.Strings._IStringLexerState>(Std.JSON.Utils.Lexers.Strings.StringLexerState.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Lexers.Strings._IStringLexerState> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStringLexerState create_Start() {
      return new StringLexerState_Start();
    }
    public static _IStringLexerState create_Body(bool escaped) {
      return new StringLexerState_Body(escaped);
    }
    public static _IStringLexerState create_End() {
      return new StringLexerState_End();
    }
    public bool is_Start { get { return this is StringLexerState_Start; } }
    public bool is_Body { get { return this is StringLexerState_Body; } }
    public bool is_End { get { return this is StringLexerState_End; } }
    public bool dtor_escaped {
      get {
        var d = this;
        return ((StringLexerState_Body)d)._escaped;
      }
    }
    public abstract _IStringLexerState DowncastClone();
  }
  public class StringLexerState_Start : StringLexerState {
    public StringLexerState_Start() : base() {
    }
    public override _IStringLexerState DowncastClone() {
      if (this is _IStringLexerState dt) { return dt; }
      return new StringLexerState_Start();
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Utils.Lexers.Strings.StringLexerState_Start;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Strings.StringLexerState.Start";
      return s;
    }
  }
  public class StringLexerState_Body : StringLexerState {
    public readonly bool _escaped;
    public StringLexerState_Body(bool escaped) : base() {
      this._escaped = escaped;
    }
    public override _IStringLexerState DowncastClone() {
      if (this is _IStringLexerState dt) { return dt; }
      return new StringLexerState_Body(_escaped);
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Utils.Lexers.Strings.StringLexerState_Body;
      return oth != null && this._escaped == oth._escaped;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._escaped));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Strings.StringLexerState.Body";
      s += "(";
      s += Dafny.Helpers.ToString(this._escaped);
      s += ")";
      return s;
    }
  }
  public class StringLexerState_End : StringLexerState {
    public StringLexerState_End() : base() {
    }
    public override _IStringLexerState DowncastClone() {
      if (this is _IStringLexerState dt) { return dt; }
      return new StringLexerState_End();
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Utils.Lexers.Strings.StringLexerState_End;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Strings.StringLexerState.End";
      return s;
    }
  }
} // end of namespace Std.JSON.Utils.Lexers.Strings
namespace Std.JSON.Utils.Lexers {

} // end of namespace Std.JSON.Utils.Lexers
namespace Std.JSON.Utils.Cursors {


  public interface _ISplit<out T> {
    bool is_SP { get; }
    T dtor_t { get; }
    Std.JSON.Utils.Cursors._ICursor__ dtor_cs { get; }
    _ISplit<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public class Split<T> : _ISplit<T> {
    public readonly T _t;
    public readonly Std.JSON.Utils.Cursors._ICursor__ _cs;
    public Split(T t, Std.JSON.Utils.Cursors._ICursor__ cs) {
      this._t = t;
      this._cs = cs;
    }
    public _ISplit<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _ISplit<__T> dt) { return dt; }
      return new Split<__T>(converter0(_t), _cs);
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Utils.Cursors.Split<T>;
      return oth != null && object.Equals(this._t, oth._t) && object.Equals(this._cs, oth._cs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._t));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Cursors.Split.SP";
      s += "(";
      s += Dafny.Helpers.ToString(this._t);
      s += ", ";
      s += Dafny.Helpers.ToString(this._cs);
      s += ")";
      return s;
    }
    public static Std.JSON.Utils.Cursors._ISplit<T> Default(T _default_T) {
      return create(_default_T, Std.JSON.Utils.Cursors.FreshCursor.Default());
    }
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Cursors._ISplit<T>> _TypeDescriptor(Dafny.TypeDescriptor<T> _td_T) {
      return new Dafny.TypeDescriptor<Std.JSON.Utils.Cursors._ISplit<T>>(Std.JSON.Utils.Cursors.Split<T>.Default(_td_T.Default()));
    }
    public static _ISplit<T> create(T t, Std.JSON.Utils.Cursors._ICursor__ cs) {
      return new Split<T>(t, cs);
    }
    public static _ISplit<T> create_SP(T t, Std.JSON.Utils.Cursors._ICursor__ cs) {
      return create(t, cs);
    }
    public bool is_SP { get { return true; } }
    public T dtor_t {
      get {
        return this._t;
      }
    }
    public Std.JSON.Utils.Cursors._ICursor__ dtor_cs {
      get {
        return this._cs;
      }
    }
  }

  public partial class Cursor {
    private static readonly Std.JSON.Utils.Cursors._ICursor__ Witness = Std.JSON.Utils.Cursors.Cursor__.create(Dafny.Sequence<byte>.FromElements(), 0U, 0U, 0U);
    public static Std.JSON.Utils.Cursors._ICursor__ Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Utils.Cursors._ICursor__> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Utils.Cursors._ICursor__>(Std.JSON.Utils.Cursors.Cursor.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Cursors._ICursor__> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class FreshCursor {
    private static readonly Std.JSON.Utils.Cursors._ICursor__ Witness = Std.JSON.Utils.Cursors.Cursor__.create(Dafny.Sequence<byte>.FromElements(), 0U, 0U, 0U);
    public static Std.JSON.Utils.Cursors._ICursor__ Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Utils.Cursors._ICursor__> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Utils.Cursors._ICursor__>(Std.JSON.Utils.Cursors.FreshCursor.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Cursors._ICursor__> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public interface _ICursorError<out R> {
    bool is_EOF { get; }
    bool is_ExpectingByte { get; }
    bool is_ExpectingAnyByte { get; }
    bool is_OtherError { get; }
    byte dtor_expected { get; }
    short dtor_b { get; }
    Dafny.ISequence<byte> dtor_expected__sq { get; }
    R dtor_err { get; }
    _ICursorError<__R> DowncastClone<__R>(Func<R, __R> converter0);
  }
  public abstract class CursorError<R> : _ICursorError<R> {
    public CursorError() {
    }
    public static Std.JSON.Utils.Cursors._ICursorError<R> Default() {
      return create_EOF();
    }
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Cursors._ICursorError<R>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.JSON.Utils.Cursors._ICursorError<R>>(Std.JSON.Utils.Cursors.CursorError<R>.Default());
    }
    public static _ICursorError<R> create_EOF() {
      return new CursorError_EOF<R>();
    }
    public static _ICursorError<R> create_ExpectingByte(byte expected, short b) {
      return new CursorError_ExpectingByte<R>(expected, b);
    }
    public static _ICursorError<R> create_ExpectingAnyByte(Dafny.ISequence<byte> expected__sq, short b) {
      return new CursorError_ExpectingAnyByte<R>(expected__sq, b);
    }
    public static _ICursorError<R> create_OtherError(R err) {
      return new CursorError_OtherError<R>(err);
    }
    public bool is_EOF { get { return this is CursorError_EOF<R>; } }
    public bool is_ExpectingByte { get { return this is CursorError_ExpectingByte<R>; } }
    public bool is_ExpectingAnyByte { get { return this is CursorError_ExpectingAnyByte<R>; } }
    public bool is_OtherError { get { return this is CursorError_OtherError<R>; } }
    public byte dtor_expected {
      get {
        var d = this;
        return ((CursorError_ExpectingByte<R>)d)._expected;
      }
    }
    public short dtor_b {
      get {
        var d = this;
        if (d is CursorError_ExpectingByte<R>) { return ((CursorError_ExpectingByte<R>)d)._b; }
        return ((CursorError_ExpectingAnyByte<R>)d)._b;
      }
    }
    public Dafny.ISequence<byte> dtor_expected__sq {
      get {
        var d = this;
        return ((CursorError_ExpectingAnyByte<R>)d)._expected__sq;
      }
    }
    public R dtor_err {
      get {
        var d = this;
        return ((CursorError_OtherError<R>)d)._err;
      }
    }
    public abstract _ICursorError<__R> DowncastClone<__R>(Func<R, __R> converter0);
    public static Dafny.ISequence<Dafny.Rune> _ToString(Std.JSON.Utils.Cursors._ICursorError<R> _this, Func<R, Dafny.ISequence<Dafny.Rune>> pr) {
      Std.JSON.Utils.Cursors._ICursorError<R> _source62 = _this;
      if (_source62.is_EOF) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Reached EOF");
      } else if (_source62.is_ExpectingByte) {
        byte _928___mcc_h0 = _source62.dtor_expected;
        short _929___mcc_h1 = _source62.dtor_b;
        short _930_b = _929___mcc_h1;
        byte _931_b0 = _928___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _932_c = (((_930_b) > ((short)(0))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'"), Dafny.Sequence<Dafny.Rune>.FromElements(new Dafny.Rune((int)(_930_b)))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'"))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("EOF")));
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Expecting '"), Dafny.Sequence<Dafny.Rune>.FromElements(new Dafny.Rune((int)(_931_b0)))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("', read ")), _932_c);
      } else if (_source62.is_ExpectingAnyByte) {
        Dafny.ISequence<byte> _933___mcc_h2 = _source62.dtor_expected__sq;
        short _934___mcc_h3 = _source62.dtor_b;
        short _935_b = _934___mcc_h3;
        Dafny.ISequence<byte> _936_bs0 = _933___mcc_h2;
        Dafny.ISequence<Dafny.Rune> _937_c = (((_935_b) > ((short)(0))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'"), Dafny.Sequence<Dafny.Rune>.FromElements(new Dafny.Rune((int)(_935_b)))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'"))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("EOF")));
        Dafny.ISequence<Dafny.Rune> _938_c0s = ((System.Func<Dafny.ISequence<Dafny.Rune>>)(() => {
          BigInteger dim9 = new BigInteger((_936_bs0).Count);
          var arr9 = new Dafny.Rune[Dafny.Helpers.ToIntChecked(dim9, "array size exceeds memory limit")];
          for (int i9 = 0; i9 < dim9; i9++) {
            var _939_idx = (BigInteger)i9;
            arr9[(int)(_939_idx)] = new Dafny.Rune((int)((_936_bs0).Select(_939_idx)));
          }
          return Dafny.Sequence<Dafny.Rune>.FromArray(arr9);
        }))();
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Expecting one of '"), _938_c0s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("', read ")), _937_c);
      } else {
        R _940___mcc_h4 = _source62.dtor_err;
        R _941_err = _940___mcc_h4;
        return Dafny.Helpers.Id<Func<R, Dafny.ISequence<Dafny.Rune>>>(pr)(_941_err);
      }
    }
  }
  public class CursorError_EOF<R> : CursorError<R> {
    public CursorError_EOF() : base() {
    }
    public override _ICursorError<__R> DowncastClone<__R>(Func<R, __R> converter0) {
      if (this is _ICursorError<__R> dt) { return dt; }
      return new CursorError_EOF<__R>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Utils.Cursors.CursorError_EOF<R>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Cursors.CursorError.EOF";
      return s;
    }
  }
  public class CursorError_ExpectingByte<R> : CursorError<R> {
    public readonly byte _expected;
    public readonly short _b;
    public CursorError_ExpectingByte(byte expected, short b) : base() {
      this._expected = expected;
      this._b = b;
    }
    public override _ICursorError<__R> DowncastClone<__R>(Func<R, __R> converter0) {
      if (this is _ICursorError<__R> dt) { return dt; }
      return new CursorError_ExpectingByte<__R>(_expected, _b);
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Utils.Cursors.CursorError_ExpectingByte<R>;
      return oth != null && this._expected == oth._expected && this._b == oth._b;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expected));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._b));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Cursors.CursorError.ExpectingByte";
      s += "(";
      s += Dafny.Helpers.ToString(this._expected);
      s += ", ";
      s += Dafny.Helpers.ToString(this._b);
      s += ")";
      return s;
    }
  }
  public class CursorError_ExpectingAnyByte<R> : CursorError<R> {
    public readonly Dafny.ISequence<byte> _expected__sq;
    public readonly short _b;
    public CursorError_ExpectingAnyByte(Dafny.ISequence<byte> expected__sq, short b) : base() {
      this._expected__sq = expected__sq;
      this._b = b;
    }
    public override _ICursorError<__R> DowncastClone<__R>(Func<R, __R> converter0) {
      if (this is _ICursorError<__R> dt) { return dt; }
      return new CursorError_ExpectingAnyByte<__R>(_expected__sq, _b);
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Utils.Cursors.CursorError_ExpectingAnyByte<R>;
      return oth != null && object.Equals(this._expected__sq, oth._expected__sq) && this._b == oth._b;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expected__sq));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._b));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Cursors.CursorError.ExpectingAnyByte";
      s += "(";
      s += Dafny.Helpers.ToString(this._expected__sq);
      s += ", ";
      s += Dafny.Helpers.ToString(this._b);
      s += ")";
      return s;
    }
  }
  public class CursorError_OtherError<R> : CursorError<R> {
    public readonly R _err;
    public CursorError_OtherError(R err) : base() {
      this._err = err;
    }
    public override _ICursorError<__R> DowncastClone<__R>(Func<R, __R> converter0) {
      if (this is _ICursorError<__R> dt) { return dt; }
      return new CursorError_OtherError<__R>(converter0(_err));
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Utils.Cursors.CursorError_OtherError<R>;
      return oth != null && object.Equals(this._err, oth._err);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._err));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Cursors.CursorError.OtherError";
      s += "(";
      s += Dafny.Helpers.ToString(this._err);
      s += ")";
      return s;
    }
  }

  public interface _ICursor__ {
    bool is_Cursor { get; }
    Dafny.ISequence<byte> dtor_s { get; }
    uint dtor_beg { get; }
    uint dtor_point { get; }
    uint dtor_end { get; }
    _ICursor__ DowncastClone();
    bool BOF_q { get; }
    bool EOF_q { get; }
    Dafny.ISequence<byte> Bytes();
    Std.JSON.Utils.Views.Core._IView__ Prefix();
    Std.JSON.Utils.Cursors._ICursor__ Suffix();
    Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__> Split();
    uint PrefixLength();
    uint SuffixLength();
    uint Length();
    byte At(uint idx);
    byte SuffixAt(uint idx);
    short Peek();
    bool LookingAt(Dafny.Rune c);
    Std.JSON.Utils.Cursors._ICursor__ Skip(uint n);
    Std.JSON.Utils.Cursors._ICursor__ Unskip(uint n);
    Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<__R>> Get<__R>(__R err);
    Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<__R>> AssertByte<__R>(byte b);
    Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<__R>> AssertBytes<__R>(Dafny.ISequence<byte> bs, uint offset);
    Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<__R>> AssertChar<__R>(Dafny.Rune c0);
    Std.JSON.Utils.Cursors._ICursor__ SkipByte();
    Std.JSON.Utils.Cursors._ICursor__ SkipIf(Func<byte, bool> p);
    Std.JSON.Utils.Cursors._ICursor__ SkipWhile(Func<byte, bool> p);
    Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<__R>> SkipWhileLexer<__A, __R>(Func<__A, short, Std.JSON.Utils.Lexers.Core._ILexerResult<__A, __R>> step, __A st);
  }
  public class Cursor__ : _ICursor__ {
    public readonly Dafny.ISequence<byte> _s;
    public readonly uint _beg;
    public readonly uint _point;
    public readonly uint _end;
    public Cursor__(Dafny.ISequence<byte> s, uint beg, uint point, uint end) {
      this._s = s;
      this._beg = beg;
      this._point = point;
      this._end = end;
    }
    public _ICursor__ DowncastClone() {
      if (this is _ICursor__ dt) { return dt; }
      return new Cursor__(_s, _beg, _point, _end);
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Utils.Cursors.Cursor__;
      return oth != null && object.Equals(this._s, oth._s) && this._beg == oth._beg && this._point == oth._point && this._end == oth._end;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._s));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._beg));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._point));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._end));
      return (int)hash;
    }
    public override string ToString() {
      string ss = "Cursors.Cursor_.Cursor";
      ss += "(";
      ss += Dafny.Helpers.ToString(this._s);
      ss += ", ";
      ss += Dafny.Helpers.ToString(this._beg);
      ss += ", ";
      ss += Dafny.Helpers.ToString(this._point);
      ss += ", ";
      ss += Dafny.Helpers.ToString(this._end);
      ss += ")";
      return ss;
    }
    private static readonly Std.JSON.Utils.Cursors._ICursor__ theDefault = create(Dafny.Sequence<byte>.Empty, 0, 0, 0);
    public static Std.JSON.Utils.Cursors._ICursor__ Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Utils.Cursors._ICursor__> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Utils.Cursors._ICursor__>(Std.JSON.Utils.Cursors.Cursor__.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Cursors._ICursor__> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICursor__ create(Dafny.ISequence<byte> s, uint beg, uint point, uint end) {
      return new Cursor__(s, beg, point, end);
    }
    public static _ICursor__ create_Cursor(Dafny.ISequence<byte> s, uint beg, uint point, uint end) {
      return create(s, beg, point, end);
    }
    public bool is_Cursor { get { return true; } }
    public Dafny.ISequence<byte> dtor_s {
      get {
        return this._s;
      }
    }
    public uint dtor_beg {
      get {
        return this._beg;
      }
    }
    public uint dtor_point {
      get {
        return this._point;
      }
    }
    public uint dtor_end {
      get {
        return this._end;
      }
    }
    public static Std.JSON.Utils.Cursors._ICursor__ OfView(Std.JSON.Utils.Views.Core._IView__ v) {
      return Std.JSON.Utils.Cursors.Cursor__.create((v).dtor_s, (v).dtor_beg, (v).dtor_beg, (v).dtor_end);
    }
    public static Std.JSON.Utils.Cursors._ICursor__ OfBytes(Dafny.ISequence<byte> bs) {
      return Std.JSON.Utils.Cursors.Cursor__.create(bs, 0U, 0U, (uint)(bs).LongCount);
    }
    public Dafny.ISequence<byte> Bytes() {
      return ((this).dtor_s).Subsequence((this).dtor_beg, (this).dtor_end);
    }
    public Std.JSON.Utils.Views.Core._IView__ Prefix() {
      return Std.JSON.Utils.Views.Core.View__.create((this).dtor_s, (this).dtor_beg, (this).dtor_point);
    }
    public Std.JSON.Utils.Cursors._ICursor__ Suffix() {
      Std.JSON.Utils.Cursors._ICursor__ _942_dt__update__tmp_h0 = this;
      uint _943_dt__update_hbeg_h0 = (this).dtor_point;
      return Std.JSON.Utils.Cursors.Cursor__.create((_942_dt__update__tmp_h0).dtor_s, _943_dt__update_hbeg_h0, (_942_dt__update__tmp_h0).dtor_point, (_942_dt__update__tmp_h0).dtor_end);
    }
    public Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__> Split() {
      return Std.JSON.Utils.Cursors.Split<Std.JSON.Utils.Views.Core._IView__>.create((this).Prefix(), (this).Suffix());
    }
    public uint PrefixLength() {
      return ((this).dtor_point) - ((this).dtor_beg);
    }
    public uint SuffixLength() {
      return ((this).dtor_end) - ((this).dtor_point);
    }
    public uint Length() {
      return ((this).dtor_end) - ((this).dtor_beg);
    }
    public byte At(uint idx) {
      return ((this).dtor_s).Select(((this).dtor_beg) + (idx));
    }
    public byte SuffixAt(uint idx) {
      return ((this).dtor_s).Select(((this).dtor_point) + (idx));
    }
    public short Peek() {
      if ((this).EOF_q) {
        return (short)(-1);
      } else {
        return (short)((this).SuffixAt(0U));
      }
    }
    public bool LookingAt(Dafny.Rune c) {
      return ((this).Peek()) == ((short)((c).Value));
    }
    public Std.JSON.Utils.Cursors._ICursor__ Skip(uint n) {
      Std.JSON.Utils.Cursors._ICursor__ _944_dt__update__tmp_h0 = this;
      uint _945_dt__update_hpoint_h0 = ((this).dtor_point) + (n);
      return Std.JSON.Utils.Cursors.Cursor__.create((_944_dt__update__tmp_h0).dtor_s, (_944_dt__update__tmp_h0).dtor_beg, _945_dt__update_hpoint_h0, (_944_dt__update__tmp_h0).dtor_end);
    }
    public Std.JSON.Utils.Cursors._ICursor__ Unskip(uint n) {
      Std.JSON.Utils.Cursors._ICursor__ _946_dt__update__tmp_h0 = this;
      uint _947_dt__update_hpoint_h0 = ((this).dtor_point) - (n);
      return Std.JSON.Utils.Cursors.Cursor__.create((_946_dt__update__tmp_h0).dtor_s, (_946_dt__update__tmp_h0).dtor_beg, _947_dt__update_hpoint_h0, (_946_dt__update__tmp_h0).dtor_end);
    }
    public Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<__R>> Get<__R>(__R err) {
      if ((this).EOF_q) {
        return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<__R>>.create_Failure(Std.JSON.Utils.Cursors.CursorError<__R>.create_OtherError(err));
      } else {
        return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<__R>>.create_Success((this).Skip(1U));
      }
    }
    public Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<__R>> AssertByte<__R>(byte b) {
      short _948_nxt = (this).Peek();
      if ((_948_nxt) == ((short)(b))) {
        return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<__R>>.create_Success((this).Skip(1U));
      } else {
        return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<__R>>.create_Failure(Std.JSON.Utils.Cursors.CursorError<__R>.create_ExpectingByte(b, _948_nxt));
      }
    }
    public Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<__R>> AssertBytes<__R>(Dafny.ISequence<byte> bs, uint offset) {
      _ICursor__ _this = this;
    TAIL_CALL_START:;
      if ((offset) == ((uint)(bs).LongCount)) {
        return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<__R>>.create_Success(_this);
      } else {
        Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<__R>> _949_valueOrError0 = (_this).AssertByte<__R>((byte)((bs).Select(offset)));
        if ((_949_valueOrError0).IsFailure()) {
          return (_949_valueOrError0).PropagateFailure<Std.JSON.Utils.Cursors._ICursor__>();
        } else {
          Std.JSON.Utils.Cursors._ICursor__ _950_ps = (_949_valueOrError0).Extract();
          Std.JSON.Utils.Cursors._ICursor__ _in79 = _950_ps;
          Dafny.ISequence<byte> _in80 = bs;
          uint _in81 = (offset) + (1U);
          _this = _in79;
          ;
          bs = _in80;
          offset = _in81;
          goto TAIL_CALL_START;
        }
      }
    }
    public Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<__R>> AssertChar<__R>(Dafny.Rune c0) {
      return (this).AssertByte<__R>((byte)((c0).Value));
    }
    public Std.JSON.Utils.Cursors._ICursor__ SkipByte() {
      if ((this).EOF_q) {
        return this;
      } else {
        return (this).Skip(1U);
      }
    }
    public Std.JSON.Utils.Cursors._ICursor__ SkipIf(Func<byte, bool> p) {
      if (((this).EOF_q) || (!(Dafny.Helpers.Id<Func<byte, bool>>(p)((this).SuffixAt(0U))))) {
        return this;
      } else {
        return (this).Skip(1U);
      }
    }
    public Std.JSON.Utils.Cursors._ICursor__ SkipWhile(Func<byte, bool> p) {
      Std.JSON.Utils.Cursors._ICursor__ ps = Std.JSON.Utils.Cursors.Cursor.Default();
      uint _951_point_k;
      _951_point_k = (this).dtor_point;
      uint _952_end;
      _952_end = (this).dtor_end;
      while (((_951_point_k) < (_952_end)) && (Dafny.Helpers.Id<Func<byte, bool>>(p)(((this).dtor_s).Select(_951_point_k)))) {
        _951_point_k = (_951_point_k) + (1U);
      }
      ps = Std.JSON.Utils.Cursors.Cursor__.create((this).dtor_s, (this).dtor_beg, _951_point_k, (this).dtor_end);
      return ps;
      return ps;
    }
    public Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<__R>> SkipWhileLexer<__A, __R>(Func<__A, short, Std.JSON.Utils.Lexers.Core._ILexerResult<__A, __R>> step, __A st) {
      Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<__R>> pr = Std.Wrappers.Result<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<__R>>.Default(Std.JSON.Utils.Cursors.Cursor.Default());
      uint _953_point_k;
      _953_point_k = (this).dtor_point;
      uint _954_end;
      _954_end = (this).dtor_end;
      __A _955_st_k;
      _955_st_k = st;
      while (true) {
        bool _956_eof;
        _956_eof = (_953_point_k) == (_954_end);
        short _957_minusone;
        _957_minusone = (short)(-1);
        short _958_c;
        _958_c = ((_956_eof) ? (_957_minusone) : ((short)(((this).dtor_s).Select(_953_point_k))));
        Std.JSON.Utils.Lexers.Core._ILexerResult<__A, __R> _source63 = Dafny.Helpers.Id<Func<__A, short, Std.JSON.Utils.Lexers.Core._ILexerResult<__A, __R>>>(step)(_955_st_k, _958_c);
        if (_source63.is_Accept) {
          pr = Std.Wrappers.Result<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<__R>>.create_Success(Std.JSON.Utils.Cursors.Cursor__.create((this).dtor_s, (this).dtor_beg, _953_point_k, (this).dtor_end));
          return pr;
        } else if (_source63.is_Reject) {
          __R _959___mcc_h0 = _source63.dtor_err;
          __R _960_err = _959___mcc_h0;
          pr = Std.Wrappers.Result<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<__R>>.create_Failure(Std.JSON.Utils.Cursors.CursorError<__R>.create_OtherError(_960_err));
          return pr;
        } else {
          __A _961___mcc_h1 = _source63.dtor_st;
          __A _962_st_k_k = _961___mcc_h1;
          if (_956_eof) {
            pr = Std.Wrappers.Result<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<__R>>.create_Failure(Std.JSON.Utils.Cursors.CursorError<__R>.create_EOF());
            return pr;
          } else {
            _955_st_k = _962_st_k_k;
            _953_point_k = (_953_point_k) + (1U);
          }
        }
      }
      return pr;
    }
    public bool BOF_q {
      get {
        return ((this).dtor_point) == ((this).dtor_beg);
      }
    }
    public bool EOF_q {
      get {
        return ((this).dtor_point) == ((this).dtor_end);
      }
    }
  }
} // end of namespace Std.JSON.Utils.Cursors
namespace Std.JSON.Utils.Parsers {

  public partial class __default {
    public static Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<__T>, Std.JSON.Utils.Cursors._ICursorError<__R>>> ParserWitness<__T, __R>() {
      return ((System.Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<__T>, Std.JSON.Utils.Cursors._ICursorError<__R>>>)((_963___v9) => {
        return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<__T>, Std.JSON.Utils.Cursors._ICursorError<__R>>.create_Failure(Std.JSON.Utils.Cursors.CursorError<__R>.create_EOF());
      }));
    }
    public static Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<__T>, Std.JSON.Utils.Cursors._ICursorError<__R>>> SubParserWitness<__T, __R>() {
      return ((System.Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<__T>, Std.JSON.Utils.Cursors._ICursorError<__R>>>)((_964_cs) => {
        return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<__T>, Std.JSON.Utils.Cursors._ICursorError<__R>>.create_Failure(Std.JSON.Utils.Cursors.CursorError<__R>.create_EOF());
      }));
    }
  }

  public partial class Parser<T, R> {
    public static Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<T>, Std.JSON.Utils.Cursors._ICursorError<R>>> Default() {
      return Std.JSON.Utils.Parsers.__default.ParserWitness<T, R>();
    }
    public static Dafny.TypeDescriptor<Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<T>, Std.JSON.Utils.Cursors._ICursorError<R>>>> _TypeDescriptor(Dafny.TypeDescriptor<T> _td_T, Dafny.TypeDescriptor<R> _td_R) {
      return new Dafny.TypeDescriptor<Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<T>, Std.JSON.Utils.Cursors._ICursorError<R>>>>(Std.JSON.Utils.Parsers.Parser<T, R>.Default());
    }
  }

  public interface _IParser__<T, out R> {
    bool is_Parser { get; }
    Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<T>, Std.JSON.Utils.Cursors._ICursorError<R>>> dtor_fn { get; }
  }
  public class Parser__<T, R> : _IParser__<T, R> {
    public readonly Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<T>, Std.JSON.Utils.Cursors._ICursorError<R>>> _fn;
    public Parser__(Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<T>, Std.JSON.Utils.Cursors._ICursorError<R>>> fn) {
      this._fn = fn;
    }
    public static Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<__T>, Std.JSON.Utils.Cursors._ICursorError<__R>>> DowncastClone<__T, __R>(Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<T>, Std.JSON.Utils.Cursors._ICursorError<R>>> _this, Func<T, __T> converter0, Func<R, __R> converter1) {
      return (_this).DowncastClone<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<T>, Std.JSON.Utils.Cursors._ICursorError<R>>, Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<__T>, Std.JSON.Utils.Cursors._ICursorError<__R>>>(Dafny.Helpers.Id<Std.JSON.Utils.Cursors._ICursor__>, Dafny.Helpers.CastConverter<Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<T>, Std.JSON.Utils.Cursors._ICursorError<R>>, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<__T>, Std.JSON.Utils.Cursors._ICursorError<__R>>>);
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Utils.Parsers.Parser__<T, R>;
      return oth != null && object.Equals(this._fn, oth._fn);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fn));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Parsers.Parser_.Parser";
      s += "(";
      s += Dafny.Helpers.ToString(this._fn);
      s += ")";
      return s;
    }
    public static Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<T>, Std.JSON.Utils.Cursors._ICursorError<R>>> Default(T _default_T) {
      return ((Std.JSON.Utils.Cursors._ICursor__ x0) => Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<T>, Std.JSON.Utils.Cursors._ICursorError<R>>.Default(Std.JSON.Utils.Cursors.Split<T>.Default(_default_T)));
    }
    public static Dafny.TypeDescriptor<Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<T>, Std.JSON.Utils.Cursors._ICursorError<R>>>> _TypeDescriptor(Dafny.TypeDescriptor<T> _td_T) {
      return new Dafny.TypeDescriptor<Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<T>, Std.JSON.Utils.Cursors._ICursorError<R>>>>(((Std.JSON.Utils.Cursors._ICursor__ x0) => Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<T>, Std.JSON.Utils.Cursors._ICursorError<R>>.Default(Std.JSON.Utils.Cursors.Split<T>.Default(_td_T.Default()))));
    }
    public static _IParser__<T, R> create(Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<T>, Std.JSON.Utils.Cursors._ICursorError<R>>> fn) {
      return new Parser__<T, R>(fn);
    }
    public static _IParser__<T, R> create_Parser(Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<T>, Std.JSON.Utils.Cursors._ICursorError<R>>> fn) {
      return create(fn);
    }
    public bool is_Parser { get { return true; } }
    public Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<T>, Std.JSON.Utils.Cursors._ICursorError<R>>> dtor_fn {
      get {
        return this._fn;
      }
    }
  }

  public interface _ISubParser__<T, out R> {
    bool is_SubParser { get; }
    Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<T>, Std.JSON.Utils.Cursors._ICursorError<R>>> dtor_fn { get; }
  }
  public class SubParser__<T, R> : _ISubParser__<T, R> {
    public readonly Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<T>, Std.JSON.Utils.Cursors._ICursorError<R>>> _fn;
    public SubParser__(Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<T>, Std.JSON.Utils.Cursors._ICursorError<R>>> fn) {
      this._fn = fn;
    }
    public static Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<__T>, Std.JSON.Utils.Cursors._ICursorError<__R>>> DowncastClone<__T, __R>(Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<T>, Std.JSON.Utils.Cursors._ICursorError<R>>> _this, Func<T, __T> converter0, Func<R, __R> converter1) {
      return (_this).DowncastClone<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<T>, Std.JSON.Utils.Cursors._ICursorError<R>>, Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<__T>, Std.JSON.Utils.Cursors._ICursorError<__R>>>(Dafny.Helpers.Id<Std.JSON.Utils.Cursors._ICursor__>, Dafny.Helpers.CastConverter<Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<T>, Std.JSON.Utils.Cursors._ICursorError<R>>, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<__T>, Std.JSON.Utils.Cursors._ICursorError<__R>>>);
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Utils.Parsers.SubParser__<T, R>;
      return oth != null && object.Equals(this._fn, oth._fn);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fn));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Parsers.SubParser_.SubParser";
      s += "(";
      s += Dafny.Helpers.ToString(this._fn);
      s += ")";
      return s;
    }
    public static Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<T>, Std.JSON.Utils.Cursors._ICursorError<R>>> Default() {
      return ((Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<T>, Std.JSON.Utils.Cursors._ICursorError<R>>>)null);
    }
    public static Dafny.TypeDescriptor<Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<T>, Std.JSON.Utils.Cursors._ICursorError<R>>>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<T>, Std.JSON.Utils.Cursors._ICursorError<R>>>>(((Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<T>, Std.JSON.Utils.Cursors._ICursorError<R>>>)null));
    }
    public static _ISubParser__<T, R> create(Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<T>, Std.JSON.Utils.Cursors._ICursorError<R>>> fn) {
      return new SubParser__<T, R>(fn);
    }
    public static _ISubParser__<T, R> create_SubParser(Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<T>, Std.JSON.Utils.Cursors._ICursorError<R>>> fn) {
      return create(fn);
    }
    public bool is_SubParser { get { return true; } }
    public Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<T>, Std.JSON.Utils.Cursors._ICursorError<R>>> dtor_fn {
      get {
        return this._fn;
      }
    }
  }

  public partial class SubParser<T, R> {
    public static Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<T>, Std.JSON.Utils.Cursors._ICursorError<R>>> Default() {
      return Std.JSON.Utils.Parsers.__default.SubParserWitness<T, R>();
    }
    public static Dafny.TypeDescriptor<Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<T>, Std.JSON.Utils.Cursors._ICursorError<R>>>> _TypeDescriptor(Dafny.TypeDescriptor<T> _td_T, Dafny.TypeDescriptor<R> _td_R) {
      return new Dafny.TypeDescriptor<Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<T>, Std.JSON.Utils.Cursors._ICursorError<R>>>>(Std.JSON.Utils.Parsers.SubParser<T, R>.Default());
    }
  }
} // end of namespace Std.JSON.Utils.Parsers
namespace Std.JSON.Utils {

} // end of namespace Std.JSON.Utils
namespace Std.JSON.Grammar {

  public partial class __default {
    public static bool Blank_q(byte b) {
      return ((((b) == ((byte)(32))) || ((b) == ((byte)(9)))) || ((b) == ((byte)(10)))) || ((b) == ((byte)(13)));
    }
    public static bool Digit_q(byte b) {
      return (((byte)((new Dafny.Rune('0')).Value)) <= (b)) && ((b) <= ((byte)((new Dafny.Rune('9')).Value)));
    }
    public static Dafny.ISequence<byte> NULL {
      get {
        return Dafny.Sequence<byte>.FromElements((byte)((new Dafny.Rune('n')).Value), (byte)((new Dafny.Rune('u')).Value), (byte)((new Dafny.Rune('l')).Value), (byte)((new Dafny.Rune('l')).Value));
      }
    }
    public static Dafny.ISequence<byte> TRUE {
      get {
        return Dafny.Sequence<byte>.FromElements((byte)((new Dafny.Rune('t')).Value), (byte)((new Dafny.Rune('r')).Value), (byte)((new Dafny.Rune('u')).Value), (byte)((new Dafny.Rune('e')).Value));
      }
    }
    public static Dafny.ISequence<byte> FALSE {
      get {
        return Dafny.Sequence<byte>.FromElements((byte)((new Dafny.Rune('f')).Value), (byte)((new Dafny.Rune('a')).Value), (byte)((new Dafny.Rune('l')).Value), (byte)((new Dafny.Rune('s')).Value), (byte)((new Dafny.Rune('e')).Value));
      }
    }
    public static Std.JSON.Utils.Views.Core._IView__ DOUBLEQUOTE {
      get {
        return Std.JSON.Utils.Views.Core.View__.OfBytes(Dafny.Sequence<byte>.FromElements((byte)((new Dafny.Rune('\"')).Value)));
      }
    }
    public static Std.JSON.Utils.Views.Core._IView__ PERIOD {
      get {
        return Std.JSON.Utils.Views.Core.View__.OfBytes(Dafny.Sequence<byte>.FromElements((byte)((new Dafny.Rune('.')).Value)));
      }
    }
    public static Std.JSON.Utils.Views.Core._IView__ E {
      get {
        return Std.JSON.Utils.Views.Core.View__.OfBytes(Dafny.Sequence<byte>.FromElements((byte)((new Dafny.Rune('e')).Value)));
      }
    }
    public static Std.JSON.Utils.Views.Core._IView__ COLON {
      get {
        return Std.JSON.Utils.Views.Core.View__.OfBytes(Dafny.Sequence<byte>.FromElements((byte)((new Dafny.Rune(':')).Value)));
      }
    }
    public static Std.JSON.Utils.Views.Core._IView__ COMMA {
      get {
        return Std.JSON.Utils.Views.Core.View__.OfBytes(Dafny.Sequence<byte>.FromElements((byte)((new Dafny.Rune(',')).Value)));
      }
    }
    public static Std.JSON.Utils.Views.Core._IView__ LBRACE {
      get {
        return Std.JSON.Utils.Views.Core.View__.OfBytes(Dafny.Sequence<byte>.FromElements((byte)((new Dafny.Rune('{')).Value)));
      }
    }
    public static Std.JSON.Utils.Views.Core._IView__ RBRACE {
      get {
        return Std.JSON.Utils.Views.Core.View__.OfBytes(Dafny.Sequence<byte>.FromElements((byte)((new Dafny.Rune('}')).Value)));
      }
    }
    public static Std.JSON.Utils.Views.Core._IView__ LBRACKET {
      get {
        return Std.JSON.Utils.Views.Core.View__.OfBytes(Dafny.Sequence<byte>.FromElements((byte)((new Dafny.Rune('[')).Value)));
      }
    }
    public static Std.JSON.Utils.Views.Core._IView__ RBRACKET {
      get {
        return Std.JSON.Utils.Views.Core.View__.OfBytes(Dafny.Sequence<byte>.FromElements((byte)((new Dafny.Rune(']')).Value)));
      }
    }
    public static Std.JSON.Utils.Views.Core._IView__ MINUS {
      get {
        return Std.JSON.Utils.Views.Core.View__.OfBytes(Dafny.Sequence<byte>.FromElements((byte)((new Dafny.Rune('-')).Value)));
      }
    }
    public static Std.JSON.Utils.Views.Core._IView__ EMPTY {
      get {
        return Std.JSON.Utils.Views.Core.View__.OfBytes(Dafny.Sequence<byte>.FromElements());
      }
    }
  }

  public partial class jchar {
    private static readonly Std.JSON.Utils.Views.Core._IView__ Witness = Std.JSON.Utils.Views.Core.View__.OfBytes(Dafny.Sequence<byte>.FromElements((byte)((new Dafny.Rune('b')).Value)));
    public static Std.JSON.Utils.Views.Core._IView__ Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__>(Std.JSON.Grammar.jchar.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class jquote {
    private static readonly Std.JSON.Utils.Views.Core._IView__ Witness = Std.JSON.Grammar.__default.DOUBLEQUOTE;
    public static Std.JSON.Utils.Views.Core._IView__ Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__>(Std.JSON.Grammar.jquote.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class jperiod {
    private static readonly Std.JSON.Utils.Views.Core._IView__ Witness = Std.JSON.Grammar.__default.PERIOD;
    public static Std.JSON.Utils.Views.Core._IView__ Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__>(Std.JSON.Grammar.jperiod.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class je {
    private static readonly Std.JSON.Utils.Views.Core._IView__ Witness = Std.JSON.Grammar.__default.E;
    public static Std.JSON.Utils.Views.Core._IView__ Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__>(Std.JSON.Grammar.je.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class jcolon {
    private static readonly Std.JSON.Utils.Views.Core._IView__ Witness = Std.JSON.Grammar.__default.COLON;
    public static Std.JSON.Utils.Views.Core._IView__ Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__>(Std.JSON.Grammar.jcolon.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class jcomma {
    private static readonly Std.JSON.Utils.Views.Core._IView__ Witness = Std.JSON.Grammar.__default.COMMA;
    public static Std.JSON.Utils.Views.Core._IView__ Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__>(Std.JSON.Grammar.jcomma.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class jlbrace {
    private static readonly Std.JSON.Utils.Views.Core._IView__ Witness = Std.JSON.Grammar.__default.LBRACE;
    public static Std.JSON.Utils.Views.Core._IView__ Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__>(Std.JSON.Grammar.jlbrace.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class jrbrace {
    private static readonly Std.JSON.Utils.Views.Core._IView__ Witness = Std.JSON.Grammar.__default.RBRACE;
    public static Std.JSON.Utils.Views.Core._IView__ Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__>(Std.JSON.Grammar.jrbrace.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class jlbracket {
    private static readonly Std.JSON.Utils.Views.Core._IView__ Witness = Std.JSON.Grammar.__default.LBRACKET;
    public static Std.JSON.Utils.Views.Core._IView__ Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__>(Std.JSON.Grammar.jlbracket.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class jrbracket {
    private static readonly Std.JSON.Utils.Views.Core._IView__ Witness = Std.JSON.Grammar.__default.RBRACKET;
    public static Std.JSON.Utils.Views.Core._IView__ Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__>(Std.JSON.Grammar.jrbracket.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class jminus {
    private static readonly Std.JSON.Utils.Views.Core._IView__ Witness = Std.JSON.Grammar.__default.MINUS;
    public static Std.JSON.Utils.Views.Core._IView__ Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__>(Std.JSON.Grammar.jminus.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class jsign {
    private static readonly Std.JSON.Utils.Views.Core._IView__ Witness = Std.JSON.Grammar.__default.EMPTY;
    public static Std.JSON.Utils.Views.Core._IView__ Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__>(Std.JSON.Grammar.jsign.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class jblanks {
    private static readonly Std.JSON.Utils.Views.Core._IView__ Witness = Std.JSON.Utils.Views.Core.View__.OfBytes(Dafny.Sequence<byte>.FromElements());
    public static Std.JSON.Utils.Views.Core._IView__ Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__>(Std.JSON.Grammar.jblanks.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public interface _IStructural<out T> {
    bool is_Structural { get; }
    Std.JSON.Utils.Views.Core._IView__ dtor_before { get; }
    T dtor_t { get; }
    Std.JSON.Utils.Views.Core._IView__ dtor_after { get; }
    _IStructural<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public class Structural<T> : _IStructural<T> {
    public readonly Std.JSON.Utils.Views.Core._IView__ _before;
    public readonly T _t;
    public readonly Std.JSON.Utils.Views.Core._IView__ _after;
    public Structural(Std.JSON.Utils.Views.Core._IView__ before, T t, Std.JSON.Utils.Views.Core._IView__ after) {
      this._before = before;
      this._t = t;
      this._after = after;
    }
    public _IStructural<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IStructural<__T> dt) { return dt; }
      return new Structural<__T>(_before, converter0(_t), _after);
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Grammar.Structural<T>;
      return oth != null && object.Equals(this._before, oth._before) && object.Equals(this._t, oth._t) && object.Equals(this._after, oth._after);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._before));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._t));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._after));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Grammar.Structural.Structural";
      s += "(";
      s += Dafny.Helpers.ToString(this._before);
      s += ", ";
      s += Dafny.Helpers.ToString(this._t);
      s += ", ";
      s += Dafny.Helpers.ToString(this._after);
      s += ")";
      return s;
    }
    public static Std.JSON.Grammar._IStructural<T> Default(T _default_T) {
      return create(Std.JSON.Grammar.jblanks.Default(), _default_T, Std.JSON.Grammar.jblanks.Default());
    }
    public static Dafny.TypeDescriptor<Std.JSON.Grammar._IStructural<T>> _TypeDescriptor(Dafny.TypeDescriptor<T> _td_T) {
      return new Dafny.TypeDescriptor<Std.JSON.Grammar._IStructural<T>>(Std.JSON.Grammar.Structural<T>.Default(_td_T.Default()));
    }
    public static _IStructural<T> create(Std.JSON.Utils.Views.Core._IView__ before, T t, Std.JSON.Utils.Views.Core._IView__ after) {
      return new Structural<T>(before, t, after);
    }
    public static _IStructural<T> create_Structural(Std.JSON.Utils.Views.Core._IView__ before, T t, Std.JSON.Utils.Views.Core._IView__ after) {
      return create(before, t, after);
    }
    public bool is_Structural { get { return true; } }
    public Std.JSON.Utils.Views.Core._IView__ dtor_before {
      get {
        return this._before;
      }
    }
    public T dtor_t {
      get {
        return this._t;
      }
    }
    public Std.JSON.Utils.Views.Core._IView__ dtor_after {
      get {
        return this._after;
      }
    }
  }

  public interface _IMaybe<out T> {
    bool is_Empty { get; }
    bool is_NonEmpty { get; }
    T dtor_t { get; }
    _IMaybe<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public abstract class Maybe<T> : _IMaybe<T> {
    public Maybe() {
    }
    public static Std.JSON.Grammar._IMaybe<T> Default() {
      return create_Empty();
    }
    public static Dafny.TypeDescriptor<Std.JSON.Grammar._IMaybe<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.JSON.Grammar._IMaybe<T>>(Std.JSON.Grammar.Maybe<T>.Default());
    }
    public static _IMaybe<T> create_Empty() {
      return new Maybe_Empty<T>();
    }
    public static _IMaybe<T> create_NonEmpty(T t) {
      return new Maybe_NonEmpty<T>(t);
    }
    public bool is_Empty { get { return this is Maybe_Empty<T>; } }
    public bool is_NonEmpty { get { return this is Maybe_NonEmpty<T>; } }
    public T dtor_t {
      get {
        var d = this;
        return ((Maybe_NonEmpty<T>)d)._t;
      }
    }
    public abstract _IMaybe<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public class Maybe_Empty<T> : Maybe<T> {
    public Maybe_Empty() : base() {
    }
    public override _IMaybe<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IMaybe<__T> dt) { return dt; }
      return new Maybe_Empty<__T>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Grammar.Maybe_Empty<T>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Grammar.Maybe.Empty";
      return s;
    }
  }
  public class Maybe_NonEmpty<T> : Maybe<T> {
    public readonly T _t;
    public Maybe_NonEmpty(T t) : base() {
      this._t = t;
    }
    public override _IMaybe<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IMaybe<__T> dt) { return dt; }
      return new Maybe_NonEmpty<__T>(converter0(_t));
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Grammar.Maybe_NonEmpty<T>;
      return oth != null && object.Equals(this._t, oth._t);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._t));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Grammar.Maybe.NonEmpty";
      s += "(";
      s += Dafny.Helpers.ToString(this._t);
      s += ")";
      return s;
    }
  }

  public interface _ISuffixed<out T, out S> {
    bool is_Suffixed { get; }
    T dtor_t { get; }
    Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._IStructural<S>> dtor_suffix { get; }
    _ISuffixed<__T, __S> DowncastClone<__T, __S>(Func<T, __T> converter0, Func<S, __S> converter1);
  }
  public class Suffixed<T, S> : _ISuffixed<T, S> {
    public readonly T _t;
    public readonly Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._IStructural<S>> _suffix;
    public Suffixed(T t, Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._IStructural<S>> suffix) {
      this._t = t;
      this._suffix = suffix;
    }
    public _ISuffixed<__T, __S> DowncastClone<__T, __S>(Func<T, __T> converter0, Func<S, __S> converter1) {
      if (this is _ISuffixed<__T, __S> dt) { return dt; }
      return new Suffixed<__T, __S>(converter0(_t), (_suffix).DowncastClone<Std.JSON.Grammar._IStructural<__S>>(Dafny.Helpers.CastConverter<Std.JSON.Grammar._IStructural<S>, Std.JSON.Grammar._IStructural<__S>>));
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Grammar.Suffixed<T, S>;
      return oth != null && object.Equals(this._t, oth._t) && object.Equals(this._suffix, oth._suffix);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._t));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._suffix));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Grammar.Suffixed.Suffixed";
      s += "(";
      s += Dafny.Helpers.ToString(this._t);
      s += ", ";
      s += Dafny.Helpers.ToString(this._suffix);
      s += ")";
      return s;
    }
    public static Std.JSON.Grammar._ISuffixed<T, S> Default(T _default_T) {
      return create(_default_T, Std.JSON.Grammar.Maybe<Std.JSON.Grammar._IStructural<S>>.Default());
    }
    public static Dafny.TypeDescriptor<Std.JSON.Grammar._ISuffixed<T, S>> _TypeDescriptor(Dafny.TypeDescriptor<T> _td_T) {
      return new Dafny.TypeDescriptor<Std.JSON.Grammar._ISuffixed<T, S>>(Std.JSON.Grammar.Suffixed<T, S>.Default(_td_T.Default()));
    }
    public static _ISuffixed<T, S> create(T t, Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._IStructural<S>> suffix) {
      return new Suffixed<T, S>(t, suffix);
    }
    public static _ISuffixed<T, S> create_Suffixed(T t, Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._IStructural<S>> suffix) {
      return create(t, suffix);
    }
    public bool is_Suffixed { get { return true; } }
    public T dtor_t {
      get {
        return this._t;
      }
    }
    public Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._IStructural<S>> dtor_suffix {
      get {
        return this._suffix;
      }
    }
  }

  public partial class SuffixedSequence<D, S> {
    public static Dafny.TypeDescriptor<Dafny.ISequence<Std.JSON.Grammar._ISuffixed<D, S>>> _TypeDescriptor(Dafny.TypeDescriptor<D> _td_D, Dafny.TypeDescriptor<S> _td_S) {
      return new Dafny.TypeDescriptor<Dafny.ISequence<Std.JSON.Grammar._ISuffixed<D, S>>>(Dafny.Sequence<Std.JSON.Grammar._ISuffixed<D, S>>.Empty);
    }
  }

  public interface _IBracketed<out L, out D, out S, out R> {
    bool is_Bracketed { get; }
    Std.JSON.Grammar._IStructural<L> dtor_l { get; }
    Dafny.ISequence<Std.JSON.Grammar._ISuffixed<D, S>> dtor_data { get; }
    Std.JSON.Grammar._IStructural<R> dtor_r { get; }
    _IBracketed<__L, __D, __S, __R> DowncastClone<__L, __D, __S, __R>(Func<L, __L> converter0, Func<D, __D> converter1, Func<S, __S> converter2, Func<R, __R> converter3);
  }
  public class Bracketed<L, D, S, R> : _IBracketed<L, D, S, R> {
    public readonly Std.JSON.Grammar._IStructural<L> _l;
    public readonly Dafny.ISequence<Std.JSON.Grammar._ISuffixed<D, S>> _data;
    public readonly Std.JSON.Grammar._IStructural<R> _r;
    public Bracketed(Std.JSON.Grammar._IStructural<L> l, Dafny.ISequence<Std.JSON.Grammar._ISuffixed<D, S>> data, Std.JSON.Grammar._IStructural<R> r) {
      this._l = l;
      this._data = data;
      this._r = r;
    }
    public _IBracketed<__L, __D, __S, __R> DowncastClone<__L, __D, __S, __R>(Func<L, __L> converter0, Func<D, __D> converter1, Func<S, __S> converter2, Func<R, __R> converter3) {
      if (this is _IBracketed<__L, __D, __S, __R> dt) { return dt; }
      return new Bracketed<__L, __D, __S, __R>((_l).DowncastClone<__L>(Dafny.Helpers.CastConverter<L, __L>), (_data).DowncastClone<Std.JSON.Grammar._ISuffixed<__D, __S>>(Dafny.Helpers.CastConverter<Std.JSON.Grammar._ISuffixed<D, S>, Std.JSON.Grammar._ISuffixed<__D, __S>>), (_r).DowncastClone<__R>(Dafny.Helpers.CastConverter<R, __R>));
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Grammar.Bracketed<L, D, S, R>;
      return oth != null && object.Equals(this._l, oth._l) && object.Equals(this._data, oth._data) && object.Equals(this._r, oth._r);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._l));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._data));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._r));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Grammar.Bracketed.Bracketed";
      s += "(";
      s += Dafny.Helpers.ToString(this._l);
      s += ", ";
      s += Dafny.Helpers.ToString(this._data);
      s += ", ";
      s += Dafny.Helpers.ToString(this._r);
      s += ")";
      return s;
    }
    public static Std.JSON.Grammar._IBracketed<L, D, S, R> Default(L _default_L, R _default_R) {
      return create(Std.JSON.Grammar.Structural<L>.Default(_default_L), Dafny.Sequence<Std.JSON.Grammar._ISuffixed<D, S>>.Empty, Std.JSON.Grammar.Structural<R>.Default(_default_R));
    }
    public static Dafny.TypeDescriptor<Std.JSON.Grammar._IBracketed<L, D, S, R>> _TypeDescriptor(Dafny.TypeDescriptor<L> _td_L, Dafny.TypeDescriptor<R> _td_R) {
      return new Dafny.TypeDescriptor<Std.JSON.Grammar._IBracketed<L, D, S, R>>(Std.JSON.Grammar.Bracketed<L, D, S, R>.Default(_td_L.Default(), _td_R.Default()));
    }
    public static _IBracketed<L, D, S, R> create(Std.JSON.Grammar._IStructural<L> l, Dafny.ISequence<Std.JSON.Grammar._ISuffixed<D, S>> data, Std.JSON.Grammar._IStructural<R> r) {
      return new Bracketed<L, D, S, R>(l, data, r);
    }
    public static _IBracketed<L, D, S, R> create_Bracketed(Std.JSON.Grammar._IStructural<L> l, Dafny.ISequence<Std.JSON.Grammar._ISuffixed<D, S>> data, Std.JSON.Grammar._IStructural<R> r) {
      return create(l, data, r);
    }
    public bool is_Bracketed { get { return true; } }
    public Std.JSON.Grammar._IStructural<L> dtor_l {
      get {
        return this._l;
      }
    }
    public Dafny.ISequence<Std.JSON.Grammar._ISuffixed<D, S>> dtor_data {
      get {
        return this._data;
      }
    }
    public Std.JSON.Grammar._IStructural<R> dtor_r {
      get {
        return this._r;
      }
    }
  }

  public partial class jnull {
    private static readonly Std.JSON.Utils.Views.Core._IView__ Witness = Std.JSON.Utils.Views.Core.View__.OfBytes(Std.JSON.Grammar.__default.NULL);
    public static Std.JSON.Utils.Views.Core._IView__ Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__>(Std.JSON.Grammar.jnull.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class jbool {
    private static readonly Std.JSON.Utils.Views.Core._IView__ Witness = Std.JSON.Utils.Views.Core.View__.OfBytes(Std.JSON.Grammar.__default.TRUE);
    public static Std.JSON.Utils.Views.Core._IView__ Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__>(Std.JSON.Grammar.jbool.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class jdigits {
    private static readonly Std.JSON.Utils.Views.Core._IView__ Witness = Std.JSON.Utils.Views.Core.View__.OfBytes(Dafny.Sequence<byte>.FromElements());
    public static Std.JSON.Utils.Views.Core._IView__ Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__>(Std.JSON.Grammar.jdigits.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class jnum {
    private static readonly Std.JSON.Utils.Views.Core._IView__ Witness = Std.JSON.Utils.Views.Core.View__.OfBytes(Dafny.Sequence<byte>.FromElements((byte)((new Dafny.Rune('0')).Value)));
    public static Std.JSON.Utils.Views.Core._IView__ Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__>(Std.JSON.Grammar.jnum.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class jint {
    private static readonly Std.JSON.Utils.Views.Core._IView__ Witness = Std.JSON.Utils.Views.Core.View__.OfBytes(Dafny.Sequence<byte>.FromElements((byte)((new Dafny.Rune('0')).Value)));
    public static Std.JSON.Utils.Views.Core._IView__ Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__>(Std.JSON.Grammar.jint.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class jstr {
    private static readonly Std.JSON.Utils.Views.Core._IView__ Witness = Std.JSON.Utils.Views.Core.View__.OfBytes(Dafny.Sequence<byte>.FromElements());
    public static Std.JSON.Utils.Views.Core._IView__ Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__>(Std.JSON.Grammar.jstr.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public interface _Ijstring {
    bool is_JString { get; }
    Std.JSON.Utils.Views.Core._IView__ dtor_lq { get; }
    Std.JSON.Utils.Views.Core._IView__ dtor_contents { get; }
    Std.JSON.Utils.Views.Core._IView__ dtor_rq { get; }
    _Ijstring DowncastClone();
  }
  public class jstring : _Ijstring {
    public readonly Std.JSON.Utils.Views.Core._IView__ _lq;
    public readonly Std.JSON.Utils.Views.Core._IView__ _contents;
    public readonly Std.JSON.Utils.Views.Core._IView__ _rq;
    public jstring(Std.JSON.Utils.Views.Core._IView__ lq, Std.JSON.Utils.Views.Core._IView__ contents, Std.JSON.Utils.Views.Core._IView__ rq) {
      this._lq = lq;
      this._contents = contents;
      this._rq = rq;
    }
    public _Ijstring DowncastClone() {
      if (this is _Ijstring dt) { return dt; }
      return new jstring(_lq, _contents, _rq);
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Grammar.jstring;
      return oth != null && object.Equals(this._lq, oth._lq) && object.Equals(this._contents, oth._contents) && object.Equals(this._rq, oth._rq);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lq));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._contents));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rq));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Grammar.jstring.JString";
      s += "(";
      s += Dafny.Helpers.ToString(this._lq);
      s += ", ";
      s += Dafny.Helpers.ToString(this._contents);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rq);
      s += ")";
      return s;
    }
    private static readonly Std.JSON.Grammar._Ijstring theDefault = create(Std.JSON.Grammar.jquote.Default(), Std.JSON.Grammar.jstr.Default(), Std.JSON.Grammar.jquote.Default());
    public static Std.JSON.Grammar._Ijstring Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Grammar._Ijstring> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Grammar._Ijstring>(Std.JSON.Grammar.jstring.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Grammar._Ijstring> _TypeDescriptor() {
      return _TYPE;
    }
    public static _Ijstring create(Std.JSON.Utils.Views.Core._IView__ lq, Std.JSON.Utils.Views.Core._IView__ contents, Std.JSON.Utils.Views.Core._IView__ rq) {
      return new jstring(lq, contents, rq);
    }
    public static _Ijstring create_JString(Std.JSON.Utils.Views.Core._IView__ lq, Std.JSON.Utils.Views.Core._IView__ contents, Std.JSON.Utils.Views.Core._IView__ rq) {
      return create(lq, contents, rq);
    }
    public bool is_JString { get { return true; } }
    public Std.JSON.Utils.Views.Core._IView__ dtor_lq {
      get {
        return this._lq;
      }
    }
    public Std.JSON.Utils.Views.Core._IView__ dtor_contents {
      get {
        return this._contents;
      }
    }
    public Std.JSON.Utils.Views.Core._IView__ dtor_rq {
      get {
        return this._rq;
      }
    }
  }

  public interface _IjKeyValue {
    bool is_KeyValue { get; }
    Std.JSON.Grammar._Ijstring dtor_k { get; }
    Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__> dtor_colon { get; }
    Std.JSON.Grammar._IValue dtor_v { get; }
    _IjKeyValue DowncastClone();
  }
  public class jKeyValue : _IjKeyValue {
    public readonly Std.JSON.Grammar._Ijstring _k;
    public readonly Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__> _colon;
    public readonly Std.JSON.Grammar._IValue _v;
    public jKeyValue(Std.JSON.Grammar._Ijstring k, Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__> colon, Std.JSON.Grammar._IValue v) {
      this._k = k;
      this._colon = colon;
      this._v = v;
    }
    public _IjKeyValue DowncastClone() {
      if (this is _IjKeyValue dt) { return dt; }
      return new jKeyValue(_k, _colon, _v);
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Grammar.jKeyValue;
      return oth != null && object.Equals(this._k, oth._k) && object.Equals(this._colon, oth._colon) && object.Equals(this._v, oth._v);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._k));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._colon));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._v));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Grammar.jKeyValue.KeyValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._k);
      s += ", ";
      s += Dafny.Helpers.ToString(this._colon);
      s += ", ";
      s += Dafny.Helpers.ToString(this._v);
      s += ")";
      return s;
    }
    private static readonly Std.JSON.Grammar._IjKeyValue theDefault = create(Std.JSON.Grammar.jstring.Default(), Std.JSON.Grammar.Structural<Std.JSON.Utils.Views.Core._IView__>.Default(Std.JSON.Grammar.jcolon.Default()), Std.JSON.Grammar.Value.Default());
    public static Std.JSON.Grammar._IjKeyValue Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Grammar._IjKeyValue> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Grammar._IjKeyValue>(Std.JSON.Grammar.jKeyValue.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Grammar._IjKeyValue> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IjKeyValue create(Std.JSON.Grammar._Ijstring k, Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__> colon, Std.JSON.Grammar._IValue v) {
      return new jKeyValue(k, colon, v);
    }
    public static _IjKeyValue create_KeyValue(Std.JSON.Grammar._Ijstring k, Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__> colon, Std.JSON.Grammar._IValue v) {
      return create(k, colon, v);
    }
    public bool is_KeyValue { get { return true; } }
    public Std.JSON.Grammar._Ijstring dtor_k {
      get {
        return this._k;
      }
    }
    public Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__> dtor_colon {
      get {
        return this._colon;
      }
    }
    public Std.JSON.Grammar._IValue dtor_v {
      get {
        return this._v;
      }
    }
  }

  public interface _Ijfrac {
    bool is_JFrac { get; }
    Std.JSON.Utils.Views.Core._IView__ dtor_period { get; }
    Std.JSON.Utils.Views.Core._IView__ dtor_num { get; }
    _Ijfrac DowncastClone();
  }
  public class jfrac : _Ijfrac {
    public readonly Std.JSON.Utils.Views.Core._IView__ _period;
    public readonly Std.JSON.Utils.Views.Core._IView__ _num;
    public jfrac(Std.JSON.Utils.Views.Core._IView__ period, Std.JSON.Utils.Views.Core._IView__ num) {
      this._period = period;
      this._num = num;
    }
    public _Ijfrac DowncastClone() {
      if (this is _Ijfrac dt) { return dt; }
      return new jfrac(_period, _num);
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Grammar.jfrac;
      return oth != null && object.Equals(this._period, oth._period) && object.Equals(this._num, oth._num);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._period));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._num));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Grammar.jfrac.JFrac";
      s += "(";
      s += Dafny.Helpers.ToString(this._period);
      s += ", ";
      s += Dafny.Helpers.ToString(this._num);
      s += ")";
      return s;
    }
    private static readonly Std.JSON.Grammar._Ijfrac theDefault = create(Std.JSON.Grammar.jperiod.Default(), Std.JSON.Grammar.jnum.Default());
    public static Std.JSON.Grammar._Ijfrac Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Grammar._Ijfrac> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Grammar._Ijfrac>(Std.JSON.Grammar.jfrac.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Grammar._Ijfrac> _TypeDescriptor() {
      return _TYPE;
    }
    public static _Ijfrac create(Std.JSON.Utils.Views.Core._IView__ period, Std.JSON.Utils.Views.Core._IView__ num) {
      return new jfrac(period, num);
    }
    public static _Ijfrac create_JFrac(Std.JSON.Utils.Views.Core._IView__ period, Std.JSON.Utils.Views.Core._IView__ num) {
      return create(period, num);
    }
    public bool is_JFrac { get { return true; } }
    public Std.JSON.Utils.Views.Core._IView__ dtor_period {
      get {
        return this._period;
      }
    }
    public Std.JSON.Utils.Views.Core._IView__ dtor_num {
      get {
        return this._num;
      }
    }
  }

  public interface _Ijexp {
    bool is_JExp { get; }
    Std.JSON.Utils.Views.Core._IView__ dtor_e { get; }
    Std.JSON.Utils.Views.Core._IView__ dtor_sign { get; }
    Std.JSON.Utils.Views.Core._IView__ dtor_num { get; }
    _Ijexp DowncastClone();
  }
  public class jexp : _Ijexp {
    public readonly Std.JSON.Utils.Views.Core._IView__ _e;
    public readonly Std.JSON.Utils.Views.Core._IView__ _sign;
    public readonly Std.JSON.Utils.Views.Core._IView__ _num;
    public jexp(Std.JSON.Utils.Views.Core._IView__ e, Std.JSON.Utils.Views.Core._IView__ sign, Std.JSON.Utils.Views.Core._IView__ num) {
      this._e = e;
      this._sign = sign;
      this._num = num;
    }
    public _Ijexp DowncastClone() {
      if (this is _Ijexp dt) { return dt; }
      return new jexp(_e, _sign, _num);
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Grammar.jexp;
      return oth != null && object.Equals(this._e, oth._e) && object.Equals(this._sign, oth._sign) && object.Equals(this._num, oth._num);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._e));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._sign));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._num));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Grammar.jexp.JExp";
      s += "(";
      s += Dafny.Helpers.ToString(this._e);
      s += ", ";
      s += Dafny.Helpers.ToString(this._sign);
      s += ", ";
      s += Dafny.Helpers.ToString(this._num);
      s += ")";
      return s;
    }
    private static readonly Std.JSON.Grammar._Ijexp theDefault = create(Std.JSON.Grammar.je.Default(), Std.JSON.Grammar.jsign.Default(), Std.JSON.Grammar.jnum.Default());
    public static Std.JSON.Grammar._Ijexp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Grammar._Ijexp> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Grammar._Ijexp>(Std.JSON.Grammar.jexp.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Grammar._Ijexp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _Ijexp create(Std.JSON.Utils.Views.Core._IView__ e, Std.JSON.Utils.Views.Core._IView__ sign, Std.JSON.Utils.Views.Core._IView__ num) {
      return new jexp(e, sign, num);
    }
    public static _Ijexp create_JExp(Std.JSON.Utils.Views.Core._IView__ e, Std.JSON.Utils.Views.Core._IView__ sign, Std.JSON.Utils.Views.Core._IView__ num) {
      return create(e, sign, num);
    }
    public bool is_JExp { get { return true; } }
    public Std.JSON.Utils.Views.Core._IView__ dtor_e {
      get {
        return this._e;
      }
    }
    public Std.JSON.Utils.Views.Core._IView__ dtor_sign {
      get {
        return this._sign;
      }
    }
    public Std.JSON.Utils.Views.Core._IView__ dtor_num {
      get {
        return this._num;
      }
    }
  }

  public interface _Ijnumber {
    bool is_JNumber { get; }
    Std.JSON.Utils.Views.Core._IView__ dtor_minus { get; }
    Std.JSON.Utils.Views.Core._IView__ dtor_num { get; }
    Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijfrac> dtor_frac { get; }
    Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijexp> dtor_exp { get; }
    _Ijnumber DowncastClone();
  }
  public class jnumber : _Ijnumber {
    public readonly Std.JSON.Utils.Views.Core._IView__ _minus;
    public readonly Std.JSON.Utils.Views.Core._IView__ _num;
    public readonly Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijfrac> _frac;
    public readonly Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijexp> _exp;
    public jnumber(Std.JSON.Utils.Views.Core._IView__ minus, Std.JSON.Utils.Views.Core._IView__ num, Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijfrac> frac, Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijexp> exp) {
      this._minus = minus;
      this._num = num;
      this._frac = frac;
      this._exp = exp;
    }
    public _Ijnumber DowncastClone() {
      if (this is _Ijnumber dt) { return dt; }
      return new jnumber(_minus, _num, _frac, _exp);
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Grammar.jnumber;
      return oth != null && object.Equals(this._minus, oth._minus) && object.Equals(this._num, oth._num) && object.Equals(this._frac, oth._frac) && object.Equals(this._exp, oth._exp);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._minus));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._num));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._frac));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._exp));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Grammar.jnumber.JNumber";
      s += "(";
      s += Dafny.Helpers.ToString(this._minus);
      s += ", ";
      s += Dafny.Helpers.ToString(this._num);
      s += ", ";
      s += Dafny.Helpers.ToString(this._frac);
      s += ", ";
      s += Dafny.Helpers.ToString(this._exp);
      s += ")";
      return s;
    }
    private static readonly Std.JSON.Grammar._Ijnumber theDefault = create(Std.JSON.Grammar.jminus.Default(), Std.JSON.Grammar.jnum.Default(), Std.JSON.Grammar.Maybe<Std.JSON.Grammar._Ijfrac>.Default(), Std.JSON.Grammar.Maybe<Std.JSON.Grammar._Ijexp>.Default());
    public static Std.JSON.Grammar._Ijnumber Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Grammar._Ijnumber> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Grammar._Ijnumber>(Std.JSON.Grammar.jnumber.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Grammar._Ijnumber> _TypeDescriptor() {
      return _TYPE;
    }
    public static _Ijnumber create(Std.JSON.Utils.Views.Core._IView__ minus, Std.JSON.Utils.Views.Core._IView__ num, Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijfrac> frac, Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijexp> exp) {
      return new jnumber(minus, num, frac, exp);
    }
    public static _Ijnumber create_JNumber(Std.JSON.Utils.Views.Core._IView__ minus, Std.JSON.Utils.Views.Core._IView__ num, Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijfrac> frac, Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijexp> exp) {
      return create(minus, num, frac, exp);
    }
    public bool is_JNumber { get { return true; } }
    public Std.JSON.Utils.Views.Core._IView__ dtor_minus {
      get {
        return this._minus;
      }
    }
    public Std.JSON.Utils.Views.Core._IView__ dtor_num {
      get {
        return this._num;
      }
    }
    public Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijfrac> dtor_frac {
      get {
        return this._frac;
      }
    }
    public Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijexp> dtor_exp {
      get {
        return this._exp;
      }
    }
  }

  public interface _IValue {
    bool is_Null { get; }
    bool is_Bool { get; }
    bool is_String { get; }
    bool is_Number { get; }
    bool is_Object { get; }
    bool is_Array { get; }
    Std.JSON.Utils.Views.Core._IView__ dtor_n { get; }
    Std.JSON.Utils.Views.Core._IView__ dtor_b { get; }
    Std.JSON.Grammar._Ijstring dtor_str { get; }
    Std.JSON.Grammar._Ijnumber dtor_num { get; }
    Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> dtor_obj { get; }
    Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> dtor_arr { get; }
    _IValue DowncastClone();
  }
  public abstract class Value : _IValue {
    public Value() {
    }
    private static readonly Std.JSON.Grammar._IValue theDefault = create_Null(Std.JSON.Grammar.jnull.Default());
    public static Std.JSON.Grammar._IValue Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Grammar._IValue> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Grammar._IValue>(Std.JSON.Grammar.Value.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Grammar._IValue> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IValue create_Null(Std.JSON.Utils.Views.Core._IView__ n) {
      return new Value_Null(n);
    }
    public static _IValue create_Bool(Std.JSON.Utils.Views.Core._IView__ b) {
      return new Value_Bool(b);
    }
    public static _IValue create_String(Std.JSON.Grammar._Ijstring str) {
      return new Value_String(str);
    }
    public static _IValue create_Number(Std.JSON.Grammar._Ijnumber num) {
      return new Value_Number(num);
    }
    public static _IValue create_Object(Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> obj) {
      return new Value_Object(obj);
    }
    public static _IValue create_Array(Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> arr) {
      return new Value_Array(arr);
    }
    public bool is_Null { get { return this is Value_Null; } }
    public bool is_Bool { get { return this is Value_Bool; } }
    public bool is_String { get { return this is Value_String; } }
    public bool is_Number { get { return this is Value_Number; } }
    public bool is_Object { get { return this is Value_Object; } }
    public bool is_Array { get { return this is Value_Array; } }
    public Std.JSON.Utils.Views.Core._IView__ dtor_n {
      get {
        var d = this;
        return ((Value_Null)d)._n;
      }
    }
    public Std.JSON.Utils.Views.Core._IView__ dtor_b {
      get {
        var d = this;
        return ((Value_Bool)d)._b;
      }
    }
    public Std.JSON.Grammar._Ijstring dtor_str {
      get {
        var d = this;
        return ((Value_String)d)._str;
      }
    }
    public Std.JSON.Grammar._Ijnumber dtor_num {
      get {
        var d = this;
        return ((Value_Number)d)._num;
      }
    }
    public Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> dtor_obj {
      get {
        var d = this;
        return ((Value_Object)d)._obj;
      }
    }
    public Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> dtor_arr {
      get {
        var d = this;
        return ((Value_Array)d)._arr;
      }
    }
    public abstract _IValue DowncastClone();
  }
  public class Value_Null : Value {
    public readonly Std.JSON.Utils.Views.Core._IView__ _n;
    public Value_Null(Std.JSON.Utils.Views.Core._IView__ n) : base() {
      this._n = n;
    }
    public override _IValue DowncastClone() {
      if (this is _IValue dt) { return dt; }
      return new Value_Null(_n);
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Grammar.Value_Null;
      return oth != null && object.Equals(this._n, oth._n);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._n));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Grammar.Value.Null";
      s += "(";
      s += Dafny.Helpers.ToString(this._n);
      s += ")";
      return s;
    }
  }
  public class Value_Bool : Value {
    public readonly Std.JSON.Utils.Views.Core._IView__ _b;
    public Value_Bool(Std.JSON.Utils.Views.Core._IView__ b) : base() {
      this._b = b;
    }
    public override _IValue DowncastClone() {
      if (this is _IValue dt) { return dt; }
      return new Value_Bool(_b);
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Grammar.Value_Bool;
      return oth != null && object.Equals(this._b, oth._b);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._b));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Grammar.Value.Bool";
      s += "(";
      s += Dafny.Helpers.ToString(this._b);
      s += ")";
      return s;
    }
  }
  public class Value_String : Value {
    public readonly Std.JSON.Grammar._Ijstring _str;
    public Value_String(Std.JSON.Grammar._Ijstring str) : base() {
      this._str = str;
    }
    public override _IValue DowncastClone() {
      if (this is _IValue dt) { return dt; }
      return new Value_String(_str);
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Grammar.Value_String;
      return oth != null && object.Equals(this._str, oth._str);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._str));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Grammar.Value.String";
      s += "(";
      s += Dafny.Helpers.ToString(this._str);
      s += ")";
      return s;
    }
  }
  public class Value_Number : Value {
    public readonly Std.JSON.Grammar._Ijnumber _num;
    public Value_Number(Std.JSON.Grammar._Ijnumber num) : base() {
      this._num = num;
    }
    public override _IValue DowncastClone() {
      if (this is _IValue dt) { return dt; }
      return new Value_Number(_num);
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Grammar.Value_Number;
      return oth != null && object.Equals(this._num, oth._num);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._num));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Grammar.Value.Number";
      s += "(";
      s += Dafny.Helpers.ToString(this._num);
      s += ")";
      return s;
    }
  }
  public class Value_Object : Value {
    public readonly Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> _obj;
    public Value_Object(Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> obj) : base() {
      this._obj = obj;
    }
    public override _IValue DowncastClone() {
      if (this is _IValue dt) { return dt; }
      return new Value_Object(_obj);
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Grammar.Value_Object;
      return oth != null && object.Equals(this._obj, oth._obj);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._obj));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Grammar.Value.Object";
      s += "(";
      s += Dafny.Helpers.ToString(this._obj);
      s += ")";
      return s;
    }
  }
  public class Value_Array : Value {
    public readonly Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> _arr;
    public Value_Array(Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> arr) : base() {
      this._arr = arr;
    }
    public override _IValue DowncastClone() {
      if (this is _IValue dt) { return dt; }
      return new Value_Array(_arr);
    }
    public override bool Equals(object other) {
      var oth = other as Std.JSON.Grammar.Value_Array;
      return oth != null && object.Equals(this._arr, oth._arr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Grammar.Value.Array";
      s += "(";
      s += Dafny.Helpers.ToString(this._arr);
      s += ")";
      return s;
    }
  }
} // end of namespace Std.JSON.Grammar
namespace Std.JSON.ByteStrConversion {

  public partial class __default {
    public static BigInteger BASE() {
      return Std.JSON.ByteStrConversion.__default.@base;
    }
    public static bool IsDigitChar(byte c) {
      return (Std.JSON.ByteStrConversion.__default.charToDigit).Contains(c);
    }
    public static Dafny.ISequence<byte> OfDigits(Dafny.ISequence<BigInteger> digits) {
      Dafny.ISequence<byte> _965___accumulator = Dafny.Sequence<byte>.FromElements();
    TAIL_CALL_START:;
      if ((digits).Equals(Dafny.Sequence<BigInteger>.FromElements())) {
        return Dafny.Sequence<byte>.Concat(Dafny.Sequence<byte>.FromElements(), _965___accumulator);
      } else {
        _965___accumulator = Dafny.Sequence<byte>.Concat(Dafny.Sequence<byte>.FromElements((Std.JSON.ByteStrConversion.__default.chars).Select((digits).Select(BigInteger.Zero))), _965___accumulator);
        Dafny.ISequence<BigInteger> _in82 = (digits).Drop(BigInteger.One);
        digits = _in82;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<byte> OfNat(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<byte>.FromElements((Std.JSON.ByteStrConversion.__default.chars).Select(BigInteger.Zero));
      } else {
        return Std.JSON.ByteStrConversion.__default.OfDigits(Std.JSON.ByteStrConversion.__default.FromNat(n));
      }
    }
    public static bool IsNumberStr(Dafny.ISequence<byte> str, byte minus) {
      return !(!(str).Equals(Dafny.Sequence<byte>.FromElements())) || (((((str).Select(BigInteger.Zero)) == (minus)) || ((Std.JSON.ByteStrConversion.__default.charToDigit).Contains((str).Select(BigInteger.Zero)))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<byte>, bool>>((_966_str) => Dafny.Helpers.Quantifier<byte>(((_966_str).Drop(BigInteger.One)).UniqueElements, true, (((_forall_var_5) => {
        byte _967_c = (byte)_forall_var_5;
        return !(((_966_str).Drop(BigInteger.One)).Contains(_967_c)) || (Std.JSON.ByteStrConversion.__default.IsDigitChar(_967_c));
      }))))(str)));
    }
    public static Dafny.ISequence<byte> OfInt(BigInteger n, byte minus) {
      if ((n).Sign != -1) {
        return Std.JSON.ByteStrConversion.__default.OfNat(n);
      } else {
        return Dafny.Sequence<byte>.Concat(Dafny.Sequence<byte>.FromElements(minus), Std.JSON.ByteStrConversion.__default.OfNat((BigInteger.Zero) - (n)));
      }
    }
    public static BigInteger ToNat(Dafny.ISequence<byte> str) {
      if ((str).Equals(Dafny.Sequence<byte>.FromElements())) {
        return BigInteger.Zero;
      } else {
        byte _968_c = (str).Select((new BigInteger((str).Count)) - (BigInteger.One));
        return ((Std.JSON.ByteStrConversion.__default.ToNat((str).Take((new BigInteger((str).Count)) - (BigInteger.One)))) * (Std.JSON.ByteStrConversion.__default.@base)) + (Dafny.Map<byte, BigInteger>.Select(Std.JSON.ByteStrConversion.__default.charToDigit, _968_c));
      }
    }
    public static BigInteger ToInt(Dafny.ISequence<byte> str, byte minus) {
      if (Dafny.Sequence<byte>.IsPrefixOf(Dafny.Sequence<byte>.FromElements(minus), str)) {
        return (BigInteger.Zero) - (Std.JSON.ByteStrConversion.__default.ToNat((str).Drop(BigInteger.One)));
      } else {
        return Std.JSON.ByteStrConversion.__default.ToNat(str);
      }
    }
    public static BigInteger ToNatRight(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        return ((Std.JSON.ByteStrConversion.__default.ToNatRight(Std.Collections.Seq.__default.DropFirst<BigInteger>(xs))) * (Std.JSON.ByteStrConversion.__default.BASE())) + (Std.Collections.Seq.__default.First<BigInteger>(xs));
      }
    }
    public static BigInteger ToNatLeft(Dafny.ISequence<BigInteger> xs) {
      BigInteger _969___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return (BigInteger.Zero) + (_969___accumulator);
      } else {
        _969___accumulator = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) * (Std.Arithmetic.Power.__default.Pow(Std.JSON.ByteStrConversion.__default.BASE(), (new BigInteger((xs).Count)) - (BigInteger.One)))) + (_969___accumulator);
        Dafny.ISequence<BigInteger> _in83 = Std.Collections.Seq.__default.DropLast<BigInteger>(xs);
        xs = _in83;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> FromNat(BigInteger n) {
      Dafny.ISequence<BigInteger> _970___accumulator = Dafny.Sequence<BigInteger>.FromElements();
    TAIL_CALL_START:;
      if ((n).Sign == 0) {
        return Dafny.Sequence<BigInteger>.Concat(_970___accumulator, Dafny.Sequence<BigInteger>.FromElements());
      } else {
        _970___accumulator = Dafny.Sequence<BigInteger>.Concat(_970___accumulator, Dafny.Sequence<BigInteger>.FromElements(Dafny.Helpers.EuclideanModulus(n, Std.JSON.ByteStrConversion.__default.BASE())));
        BigInteger _in84 = Dafny.Helpers.EuclideanDivision(n, Std.JSON.ByteStrConversion.__default.BASE());
        n = _in84;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtend(Dafny.ISequence<BigInteger> xs, BigInteger n) {
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)) >= (n)) {
        return xs;
      } else {
        Dafny.ISequence<BigInteger> _in85 = Dafny.Sequence<BigInteger>.Concat(xs, Dafny.Sequence<BigInteger>.FromElements(BigInteger.Zero));
        BigInteger _in86 = n;
        xs = _in85;
        n = _in86;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtendMultiple(Dafny.ISequence<BigInteger> xs, BigInteger n) {
      BigInteger _971_newLen = ((new BigInteger((xs).Count)) + (n)) - (Dafny.Helpers.EuclideanModulus(new BigInteger((xs).Count), n));
      return Std.JSON.ByteStrConversion.__default.SeqExtend(xs, _971_newLen);
    }
    public static Dafny.ISequence<BigInteger> FromNatWithLen(BigInteger n, BigInteger len) {
      return Std.JSON.ByteStrConversion.__default.SeqExtend(Std.JSON.ByteStrConversion.__default.FromNat(n), len);
    }
    public static Dafny.ISequence<BigInteger> SeqZero(BigInteger len) {
      Dafny.ISequence<BigInteger> _972_xs = Std.JSON.ByteStrConversion.__default.FromNatWithLen(BigInteger.Zero, len);
      return _972_xs;
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqAdd(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs16 = Std.JSON.ByteStrConversion.__default.SeqAdd(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _973_zs_k = _let_tmp_rhs16.dtor__0;
        BigInteger _974_cin = _let_tmp_rhs16.dtor__1;
        BigInteger _975_sum = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) + (Std.Collections.Seq.__default.Last<BigInteger>(ys))) + (_974_cin);
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs17 = (((_975_sum) < (Std.JSON.ByteStrConversion.__default.BASE())) ? (_System.Tuple2<BigInteger, BigInteger>.create(_975_sum, BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((_975_sum) - (Std.JSON.ByteStrConversion.__default.BASE()), BigInteger.One)));
        BigInteger _976_sum__out = _let_tmp_rhs17.dtor__0;
        BigInteger _977_cout = _let_tmp_rhs17.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_973_zs_k, Dafny.Sequence<BigInteger>.FromElements(_976_sum__out)), _977_cout);
      }
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqSub(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs18 = Std.JSON.ByteStrConversion.__default.SeqSub(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _978_zs = _let_tmp_rhs18.dtor__0;
        BigInteger _979_cin = _let_tmp_rhs18.dtor__1;
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs19 = (((Std.Collections.Seq.__default.Last<BigInteger>(xs)) >= ((Std.Collections.Seq.__default.Last<BigInteger>(ys)) + (_979_cin))) ? (_System.Tuple2<BigInteger, BigInteger>.create(((Std.Collections.Seq.__default.Last<BigInteger>(xs)) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_979_cin), BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((((Std.JSON.ByteStrConversion.__default.BASE()) + (Std.Collections.Seq.__default.Last<BigInteger>(xs))) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_979_cin), BigInteger.One)));
        BigInteger _980_diff__out = _let_tmp_rhs19.dtor__0;
        BigInteger _981_cout = _let_tmp_rhs19.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_978_zs, Dafny.Sequence<BigInteger>.FromElements(_980_diff__out)), _981_cout);
      }
    }
    public static Dafny.ISequence<byte> chars {
      get {
        return Dafny.Sequence<byte>.FromElements((byte)((new Dafny.Rune('0')).Value), (byte)((new Dafny.Rune('1')).Value), (byte)((new Dafny.Rune('2')).Value), (byte)((new Dafny.Rune('3')).Value), (byte)((new Dafny.Rune('4')).Value), (byte)((new Dafny.Rune('5')).Value), (byte)((new Dafny.Rune('6')).Value), (byte)((new Dafny.Rune('7')).Value), (byte)((new Dafny.Rune('8')).Value), (byte)((new Dafny.Rune('9')).Value));
      }
    }
    public static BigInteger @base {
      get {
        return new BigInteger((Std.JSON.ByteStrConversion.__default.chars).Count);
      }
    }
    public static Dafny.IMap<byte, BigInteger> charToDigit {
      get {
        return Dafny.Map<byte, BigInteger>.FromElements(new Dafny.Pair<byte, BigInteger>((byte)((new Dafny.Rune('0')).Value), BigInteger.Zero), new Dafny.Pair<byte, BigInteger>((byte)((new Dafny.Rune('1')).Value), BigInteger.One), new Dafny.Pair<byte, BigInteger>((byte)((new Dafny.Rune('2')).Value), new BigInteger(2)), new Dafny.Pair<byte, BigInteger>((byte)((new Dafny.Rune('3')).Value), new BigInteger(3)), new Dafny.Pair<byte, BigInteger>((byte)((new Dafny.Rune('4')).Value), new BigInteger(4)), new Dafny.Pair<byte, BigInteger>((byte)((new Dafny.Rune('5')).Value), new BigInteger(5)), new Dafny.Pair<byte, BigInteger>((byte)((new Dafny.Rune('6')).Value), new BigInteger(6)), new Dafny.Pair<byte, BigInteger>((byte)((new Dafny.Rune('7')).Value), new BigInteger(7)), new Dafny.Pair<byte, BigInteger>((byte)((new Dafny.Rune('8')).Value), new BigInteger(8)), new Dafny.Pair<byte, BigInteger>((byte)((new Dafny.Rune('9')).Value), new BigInteger(9)));
      }
    }
  }

  public partial class CharSeq {
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<byte>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<byte>>(Dafny.Sequence<byte>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<byte>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class digit {
    private static readonly Dafny.TypeDescriptor<BigInteger> _TYPE = new Dafny.TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static Dafny.TypeDescriptor<BigInteger> _TypeDescriptor() {
      return _TYPE;
    }
  }
} // end of namespace Std.JSON.ByteStrConversion
namespace Std.JSON.Serializer {

  public partial class __default {
    public static Std.JSON.Utils.Views.Core._IView__ Bool(bool b) {
      return Std.JSON.Utils.Views.Core.View__.OfBytes(((b) ? (Std.JSON.Grammar.__default.TRUE) : (Std.JSON.Grammar.__default.FALSE)));
    }
    public static Std.Wrappers._IOutcome<Std.JSON.Errors._ISerializationError> CheckLength<__T>(Dafny.ISequence<__T> s, Std.JSON.Errors._ISerializationError err) {
      return Std.Wrappers.Outcome<Std.JSON.Errors._ISerializationError>.Need((new BigInteger((s).Count)) < (Std.BoundedInts.__default.TWO__TO__THE__32), err);
    }
    public static Std.Wrappers._IResult<Std.JSON.Grammar._Ijstring, Std.JSON.Errors._ISerializationError> String(Dafny.ISequence<Dafny.Rune> str) {
      Std.Wrappers._IResult<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError> _982_valueOrError0 = Std.JSON.Spec.__default.EscapeToUTF8(str, BigInteger.Zero);
      if ((_982_valueOrError0).IsFailure()) {
        return (_982_valueOrError0).PropagateFailure<Std.JSON.Grammar._Ijstring>();
      } else {
        Dafny.ISequence<byte> _983_bs = (_982_valueOrError0).Extract();
        Std.Wrappers._IOutcome<Std.JSON.Errors._ISerializationError> _984_o = Std.JSON.Serializer.__default.CheckLength<byte>(_983_bs, Std.JSON.Errors.SerializationError.create_StringTooLong(str));
        if ((_984_o).is_Pass) {
          return Std.Wrappers.Result<Std.JSON.Grammar._Ijstring, Std.JSON.Errors._ISerializationError>.create_Success(Std.JSON.Grammar.jstring.create(Std.JSON.Grammar.__default.DOUBLEQUOTE, Std.JSON.Utils.Views.Core.View__.OfBytes(_983_bs), Std.JSON.Grammar.__default.DOUBLEQUOTE));
        } else {
          return Std.Wrappers.Result<Std.JSON.Grammar._Ijstring, Std.JSON.Errors._ISerializationError>.create_Failure((_984_o).dtor_error);
        }
      }
    }
    public static Std.JSON.Utils.Views.Core._IView__ Sign(BigInteger n) {
      return Std.JSON.Utils.Views.Core.View__.OfBytes((((n).Sign == -1) ? (Dafny.Sequence<byte>.FromElements((byte)((new Dafny.Rune('-')).Value))) : (Dafny.Sequence<byte>.FromElements())));
    }
    public static Dafny.ISequence<byte> Int_k(BigInteger n) {
      return Std.JSON.ByteStrConversion.__default.OfInt(n, Std.JSON.Serializer.__default.MINUS);
    }
    public static Std.Wrappers._IResult<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Errors._ISerializationError> Int(BigInteger n) {
      Dafny.ISequence<byte> _985_bs = Std.JSON.Serializer.__default.Int_k(n);
      Std.Wrappers._IOutcome<Std.JSON.Errors._ISerializationError> _986_o = Std.JSON.Serializer.__default.CheckLength<byte>(_985_bs, Std.JSON.Errors.SerializationError.create_IntTooLarge(n));
      if ((_986_o).is_Pass) {
        return Std.Wrappers.Result<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Errors._ISerializationError>.create_Success(Std.JSON.Utils.Views.Core.View__.OfBytes(_985_bs));
      } else {
        return Std.Wrappers.Result<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Errors._ISerializationError>.create_Failure((_986_o).dtor_error);
      }
    }
    public static Std.Wrappers._IResult<Std.JSON.Grammar._Ijnumber, Std.JSON.Errors._ISerializationError> Number(Std.JSON.Values._IDecimal dec) {
      var _pat_let_tv2 = dec;
      var _pat_let_tv3 = dec;
      Std.JSON.Utils.Views.Core._IView__ _987_minus = Std.JSON.Serializer.__default.Sign((dec).dtor_n);
      Std.Wrappers._IResult<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Errors._ISerializationError> _988_valueOrError0 = Std.JSON.Serializer.__default.Int(Std.Math.__default.Abs((dec).dtor_n));
      if ((_988_valueOrError0).IsFailure()) {
        return (_988_valueOrError0).PropagateFailure<Std.JSON.Grammar._Ijnumber>();
      } else {
        Std.JSON.Utils.Views.Core._IView__ _989_num = (_988_valueOrError0).Extract();
        Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijfrac> _990_frac = Std.JSON.Grammar.Maybe<Std.JSON.Grammar._Ijfrac>.create_Empty();
        Std.Wrappers._IResult<Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijexp>, Std.JSON.Errors._ISerializationError> _991_valueOrError1 = ((((dec).dtor_e10).Sign == 0) ? (Std.Wrappers.Result<Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijexp>, Std.JSON.Errors._ISerializationError>.create_Success(Std.JSON.Grammar.Maybe<Std.JSON.Grammar._Ijexp>.create_Empty())) : (Dafny.Helpers.Let<Std.JSON.Utils.Views.Core._IView__, Std.Wrappers._IResult<Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijexp>, Std.JSON.Errors._ISerializationError>>(Std.JSON.Utils.Views.Core.View__.OfBytes(Dafny.Sequence<byte>.FromElements((byte)((new Dafny.Rune('e')).Value))), _pat_let2_0 => Dafny.Helpers.Let<Std.JSON.Utils.Views.Core._IView__, Std.Wrappers._IResult<Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijexp>, Std.JSON.Errors._ISerializationError>>(_pat_let2_0, _992_e => Dafny.Helpers.Let<Std.JSON.Utils.Views.Core._IView__, Std.Wrappers._IResult<Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijexp>, Std.JSON.Errors._ISerializationError>>(Std.JSON.Serializer.__default.Sign((_pat_let_tv2).dtor_e10), _pat_let3_0 => Dafny.Helpers.Let<Std.JSON.Utils.Views.Core._IView__, Std.Wrappers._IResult<Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijexp>, Std.JSON.Errors._ISerializationError>>(_pat_let3_0, _993_sign => Dafny.Helpers.Let<Std.Wrappers._IResult<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Errors._ISerializationError>, Std.Wrappers._IResult<Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijexp>, Std.JSON.Errors._ISerializationError>>(Std.JSON.Serializer.__default.Int(Std.Math.__default.Abs((_pat_let_tv3).dtor_e10)), _pat_let4_0 => Dafny.Helpers.Let<Std.Wrappers._IResult<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Errors._ISerializationError>, Std.Wrappers._IResult<Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijexp>, Std.JSON.Errors._ISerializationError>>(_pat_let4_0, _994_valueOrError2 => (((_994_valueOrError2).IsFailure()) ? ((_994_valueOrError2).PropagateFailure<Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijexp>>()) : (Dafny.Helpers.Let<Std.JSON.Utils.Views.Core._IView__, Std.Wrappers._IResult<Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijexp>, Std.JSON.Errors._ISerializationError>>((_994_valueOrError2).Extract(), _pat_let5_0 => Dafny.Helpers.Let<Std.JSON.Utils.Views.Core._IView__, Std.Wrappers._IResult<Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijexp>, Std.JSON.Errors._ISerializationError>>(_pat_let5_0, _995_num => Std.Wrappers.Result<Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijexp>, Std.JSON.Errors._ISerializationError>.create_Success(Std.JSON.Grammar.Maybe<Std.JSON.Grammar._Ijexp>.create_NonEmpty(Std.JSON.Grammar.jexp.create(_992_e, _993_sign, _995_num)))))))))))))));
        if ((_991_valueOrError1).IsFailure()) {
          return (_991_valueOrError1).PropagateFailure<Std.JSON.Grammar._Ijnumber>();
        } else {
          Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijexp> _996_exp = (_991_valueOrError1).Extract();
          return Std.Wrappers.Result<Std.JSON.Grammar._Ijnumber, Std.JSON.Errors._ISerializationError>.create_Success(Std.JSON.Grammar.jnumber.create(_987_minus, _989_num, Std.JSON.Grammar.Maybe<Std.JSON.Grammar._Ijfrac>.create_Empty(), _996_exp));
        }
      }
    }
    public static Std.JSON.Grammar._IStructural<__T> MkStructural<__T>(__T v) {
      return Std.JSON.Grammar.Structural<__T>.create(Std.JSON.Grammar.__default.EMPTY, v, Std.JSON.Grammar.__default.EMPTY);
    }
    public static Std.Wrappers._IResult<Std.JSON.Grammar._IjKeyValue, Std.JSON.Errors._ISerializationError> KeyValue(_System._ITuple2<Dafny.ISequence<Dafny.Rune>, Std.JSON.Values._IJSON> kv) {
      Std.Wrappers._IResult<Std.JSON.Grammar._Ijstring, Std.JSON.Errors._ISerializationError> _997_valueOrError0 = Std.JSON.Serializer.__default.String((kv).dtor__0);
      if ((_997_valueOrError0).IsFailure()) {
        return (_997_valueOrError0).PropagateFailure<Std.JSON.Grammar._IjKeyValue>();
      } else {
        Std.JSON.Grammar._Ijstring _998_k = (_997_valueOrError0).Extract();
        Std.Wrappers._IResult<Std.JSON.Grammar._IValue, Std.JSON.Errors._ISerializationError> _999_valueOrError1 = Std.JSON.Serializer.__default.Value((kv).dtor__1);
        if ((_999_valueOrError1).IsFailure()) {
          return (_999_valueOrError1).PropagateFailure<Std.JSON.Grammar._IjKeyValue>();
        } else {
          Std.JSON.Grammar._IValue _1000_v = (_999_valueOrError1).Extract();
          return Std.Wrappers.Result<Std.JSON.Grammar._IjKeyValue, Std.JSON.Errors._ISerializationError>.create_Success(Std.JSON.Grammar.jKeyValue.create(_998_k, Std.JSON.Serializer.__default.COLON, _1000_v));
        }
      }
    }
    public static Dafny.ISequence<Std.JSON.Grammar._ISuffixed<__D, __S>> MkSuffixedSequence<__D, __S>(Dafny.ISequence<__D> ds, Std.JSON.Grammar._IStructural<__S> suffix, BigInteger start) {
      Dafny.ISequence<Std.JSON.Grammar._ISuffixed<__D, __S>> _1001___accumulator = Dafny.Sequence<Std.JSON.Grammar._ISuffixed<__D, __S>>.FromElements();
    TAIL_CALL_START:;
      if ((start) >= (new BigInteger((ds).Count))) {
        return Dafny.Sequence<Std.JSON.Grammar._ISuffixed<__D, __S>>.Concat(_1001___accumulator, Dafny.Sequence<Std.JSON.Grammar._ISuffixed<__D, __S>>.FromElements());
      } else if ((start) == ((new BigInteger((ds).Count)) - (BigInteger.One))) {
        return Dafny.Sequence<Std.JSON.Grammar._ISuffixed<__D, __S>>.Concat(_1001___accumulator, Dafny.Sequence<Std.JSON.Grammar._ISuffixed<__D, __S>>.FromElements(Std.JSON.Grammar.Suffixed<__D, __S>.create((ds).Select(start), Std.JSON.Grammar.Maybe<Std.JSON.Grammar._IStructural<__S>>.create_Empty())));
      } else {
        _1001___accumulator = Dafny.Sequence<Std.JSON.Grammar._ISuffixed<__D, __S>>.Concat(_1001___accumulator, Dafny.Sequence<Std.JSON.Grammar._ISuffixed<__D, __S>>.FromElements(Std.JSON.Grammar.Suffixed<__D, __S>.create((ds).Select(start), Std.JSON.Grammar.Maybe<Std.JSON.Grammar._IStructural<__S>>.create_NonEmpty(suffix))));
        Dafny.ISequence<__D> _in87 = ds;
        Std.JSON.Grammar._IStructural<__S> _in88 = suffix;
        BigInteger _in89 = (start) + (BigInteger.One);
        ds = _in87;
        suffix = _in88;
        start = _in89;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IResult<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Errors._ISerializationError> Object(Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, Std.JSON.Values._IJSON>> obj) {
      Std.Wrappers._IResult<Dafny.ISequence<Std.JSON.Grammar._IjKeyValue>, Std.JSON.Errors._ISerializationError> _1002_valueOrError0 = Std.Collections.Seq.__default.MapWithResult<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, Std.JSON.Values._IJSON>, Std.JSON.Grammar._IjKeyValue, Std.JSON.Errors._ISerializationError>(Dafny.Helpers.Id<Func<Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, Std.JSON.Values._IJSON>>, Func<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, Std.JSON.Values._IJSON>, Std.Wrappers._IResult<Std.JSON.Grammar._IjKeyValue, Std.JSON.Errors._ISerializationError>>>>((_1003_obj) => ((System.Func<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, Std.JSON.Values._IJSON>, Std.Wrappers._IResult<Std.JSON.Grammar._IjKeyValue, Std.JSON.Errors._ISerializationError>>)((_1004_v) => {
        return Std.JSON.Serializer.__default.KeyValue(_1004_v);
      })))(obj), obj);
      if ((_1002_valueOrError0).IsFailure()) {
        return (_1002_valueOrError0).PropagateFailure<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>>();
      } else {
        Dafny.ISequence<Std.JSON.Grammar._IjKeyValue> _1005_items = (_1002_valueOrError0).Extract();
        return Std.Wrappers.Result<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Errors._ISerializationError>.create_Success(Std.JSON.Grammar.Bracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>.create(Std.JSON.Serializer.__default.MkStructural<Std.JSON.Utils.Views.Core._IView__>(Std.JSON.Grammar.__default.LBRACE), Std.JSON.Serializer.__default.MkSuffixedSequence<Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__>(_1005_items, Std.JSON.Serializer.__default.COMMA, BigInteger.Zero), Std.JSON.Serializer.__default.MkStructural<Std.JSON.Utils.Views.Core._IView__>(Std.JSON.Grammar.__default.RBRACE)));
      }
    }
    public static Std.Wrappers._IResult<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Errors._ISerializationError> Array(Dafny.ISequence<Std.JSON.Values._IJSON> arr) {
      Std.Wrappers._IResult<Dafny.ISequence<Std.JSON.Grammar._IValue>, Std.JSON.Errors._ISerializationError> _1006_valueOrError0 = Std.Collections.Seq.__default.MapWithResult<Std.JSON.Values._IJSON, Std.JSON.Grammar._IValue, Std.JSON.Errors._ISerializationError>(Dafny.Helpers.Id<Func<Dafny.ISequence<Std.JSON.Values._IJSON>, Func<Std.JSON.Values._IJSON, Std.Wrappers._IResult<Std.JSON.Grammar._IValue, Std.JSON.Errors._ISerializationError>>>>((_1007_arr) => ((System.Func<Std.JSON.Values._IJSON, Std.Wrappers._IResult<Std.JSON.Grammar._IValue, Std.JSON.Errors._ISerializationError>>)((_1008_v) => {
        return Std.JSON.Serializer.__default.Value(_1008_v);
      })))(arr), arr);
      if ((_1006_valueOrError0).IsFailure()) {
        return (_1006_valueOrError0).PropagateFailure<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>>();
      } else {
        Dafny.ISequence<Std.JSON.Grammar._IValue> _1009_items = (_1006_valueOrError0).Extract();
        return Std.Wrappers.Result<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Errors._ISerializationError>.create_Success(Std.JSON.Grammar.Bracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>.create(Std.JSON.Serializer.__default.MkStructural<Std.JSON.Utils.Views.Core._IView__>(Std.JSON.Grammar.__default.LBRACKET), Std.JSON.Serializer.__default.MkSuffixedSequence<Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__>(_1009_items, Std.JSON.Serializer.__default.COMMA, BigInteger.Zero), Std.JSON.Serializer.__default.MkStructural<Std.JSON.Utils.Views.Core._IView__>(Std.JSON.Grammar.__default.RBRACKET)));
      }
    }
    public static Std.Wrappers._IResult<Std.JSON.Grammar._IValue, Std.JSON.Errors._ISerializationError> Value(Std.JSON.Values._IJSON js) {
      Std.JSON.Values._IJSON _source64 = js;
      if (_source64.is_Null) {
        return Std.Wrappers.Result<Std.JSON.Grammar._IValue, Std.JSON.Errors._ISerializationError>.create_Success(Std.JSON.Grammar.Value.create_Null(Std.JSON.Utils.Views.Core.View__.OfBytes(Std.JSON.Grammar.__default.NULL)));
      } else if (_source64.is_Bool) {
        bool _1010___mcc_h0 = _source64.dtor_b;
        bool _1011_b = _1010___mcc_h0;
        return Std.Wrappers.Result<Std.JSON.Grammar._IValue, Std.JSON.Errors._ISerializationError>.create_Success(Std.JSON.Grammar.Value.create_Bool(Std.JSON.Serializer.__default.Bool(_1011_b)));
      } else if (_source64.is_String) {
        Dafny.ISequence<Dafny.Rune> _1012___mcc_h1 = _source64.dtor_str;
        Dafny.ISequence<Dafny.Rune> _1013_str = _1012___mcc_h1;
        Std.Wrappers._IResult<Std.JSON.Grammar._Ijstring, Std.JSON.Errors._ISerializationError> _1014_valueOrError0 = Std.JSON.Serializer.__default.String(_1013_str);
        if ((_1014_valueOrError0).IsFailure()) {
          return (_1014_valueOrError0).PropagateFailure<Std.JSON.Grammar._IValue>();
        } else {
          Std.JSON.Grammar._Ijstring _1015_s = (_1014_valueOrError0).Extract();
          return Std.Wrappers.Result<Std.JSON.Grammar._IValue, Std.JSON.Errors._ISerializationError>.create_Success(Std.JSON.Grammar.Value.create_String(_1015_s));
        }
      } else if (_source64.is_Number) {
        Std.JSON.Values._IDecimal _1016___mcc_h2 = _source64.dtor_num;
        Std.JSON.Values._IDecimal _1017_dec = _1016___mcc_h2;
        Std.Wrappers._IResult<Std.JSON.Grammar._Ijnumber, Std.JSON.Errors._ISerializationError> _1018_valueOrError1 = Std.JSON.Serializer.__default.Number(_1017_dec);
        if ((_1018_valueOrError1).IsFailure()) {
          return (_1018_valueOrError1).PropagateFailure<Std.JSON.Grammar._IValue>();
        } else {
          Std.JSON.Grammar._Ijnumber _1019_n = (_1018_valueOrError1).Extract();
          return Std.Wrappers.Result<Std.JSON.Grammar._IValue, Std.JSON.Errors._ISerializationError>.create_Success(Std.JSON.Grammar.Value.create_Number(_1019_n));
        }
      } else if (_source64.is_Object) {
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, Std.JSON.Values._IJSON>> _1020___mcc_h3 = _source64.dtor_obj;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, Std.JSON.Values._IJSON>> _1021_obj = _1020___mcc_h3;
        Std.Wrappers._IResult<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Errors._ISerializationError> _1022_valueOrError2 = Std.JSON.Serializer.__default.Object(_1021_obj);
        if ((_1022_valueOrError2).IsFailure()) {
          return (_1022_valueOrError2).PropagateFailure<Std.JSON.Grammar._IValue>();
        } else {
          Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> _1023_o = (_1022_valueOrError2).Extract();
          return Std.Wrappers.Result<Std.JSON.Grammar._IValue, Std.JSON.Errors._ISerializationError>.create_Success(Std.JSON.Grammar.Value.create_Object(_1023_o));
        }
      } else {
        Dafny.ISequence<Std.JSON.Values._IJSON> _1024___mcc_h4 = _source64.dtor_arr;
        Dafny.ISequence<Std.JSON.Values._IJSON> _1025_arr = _1024___mcc_h4;
        Std.Wrappers._IResult<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Errors._ISerializationError> _1026_valueOrError3 = Std.JSON.Serializer.__default.Array(_1025_arr);
        if ((_1026_valueOrError3).IsFailure()) {
          return (_1026_valueOrError3).PropagateFailure<Std.JSON.Grammar._IValue>();
        } else {
          Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> _1027_a = (_1026_valueOrError3).Extract();
          return Std.Wrappers.Result<Std.JSON.Grammar._IValue, Std.JSON.Errors._ISerializationError>.create_Success(Std.JSON.Grammar.Value.create_Array(_1027_a));
        }
      }
    }
    public static Std.Wrappers._IResult<Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue>, Std.JSON.Errors._ISerializationError> JSON(Std.JSON.Values._IJSON js) {
      Std.Wrappers._IResult<Std.JSON.Grammar._IValue, Std.JSON.Errors._ISerializationError> _1028_valueOrError0 = Std.JSON.Serializer.__default.Value(js);
      if ((_1028_valueOrError0).IsFailure()) {
        return (_1028_valueOrError0).PropagateFailure<Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue>>();
      } else {
        Std.JSON.Grammar._IValue _1029_val = (_1028_valueOrError0).Extract();
        return Std.Wrappers.Result<Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue>, Std.JSON.Errors._ISerializationError>.create_Success(Std.JSON.Serializer.__default.MkStructural<Std.JSON.Grammar._IValue>(_1029_val));
      }
    }
    public static Dafny.ISequence<byte> DIGITS {
      get {
        return Std.JSON.ByteStrConversion.__default.chars;
      }
    }
    public static byte MINUS {
      get {
        return (byte)((new Dafny.Rune('-')).Value);
      }
    }
    public static Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__> COLON {
      get {
        return Std.JSON.Serializer.__default.MkStructural<Std.JSON.Utils.Views.Core._IView__>(Std.JSON.Grammar.__default.COLON);
      }
    }
    public static Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__> COMMA {
      get {
        return Std.JSON.Serializer.__default.MkStructural<Std.JSON.Utils.Views.Core._IView__>(Std.JSON.Grammar.__default.COMMA);
      }
    }
  }

  public partial class bytes32 {
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<byte>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<byte>>(Dafny.Sequence<byte>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<byte>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class string32 {
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }
} // end of namespace Std.JSON.Serializer
namespace Std.JSON.Deserializer.Uint16StrConversion {

  public partial class __default {
    public static BigInteger BASE() {
      return Std.JSON.Deserializer.Uint16StrConversion.__default.@base;
    }
    public static bool IsDigitChar(ushort c) {
      return (Std.JSON.Deserializer.Uint16StrConversion.__default.charToDigit).Contains(c);
    }
    public static Dafny.ISequence<ushort> OfDigits(Dafny.ISequence<BigInteger> digits) {
      Dafny.ISequence<ushort> _1030___accumulator = Dafny.Sequence<ushort>.FromElements();
    TAIL_CALL_START:;
      if ((digits).Equals(Dafny.Sequence<BigInteger>.FromElements())) {
        return Dafny.Sequence<ushort>.Concat(Dafny.Sequence<ushort>.FromElements(), _1030___accumulator);
      } else {
        _1030___accumulator = Dafny.Sequence<ushort>.Concat(Dafny.Sequence<ushort>.FromElements((Std.JSON.Deserializer.Uint16StrConversion.__default.chars).Select((digits).Select(BigInteger.Zero))), _1030___accumulator);
        Dafny.ISequence<BigInteger> _in90 = (digits).Drop(BigInteger.One);
        digits = _in90;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<ushort> OfNat(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<ushort>.FromElements((Std.JSON.Deserializer.Uint16StrConversion.__default.chars).Select(BigInteger.Zero));
      } else {
        return Std.JSON.Deserializer.Uint16StrConversion.__default.OfDigits(Std.JSON.Deserializer.Uint16StrConversion.__default.FromNat(n));
      }
    }
    public static bool IsNumberStr(Dafny.ISequence<ushort> str, ushort minus) {
      return !(!(str).Equals(Dafny.Sequence<ushort>.FromElements())) || (((((str).Select(BigInteger.Zero)) == (minus)) || ((Std.JSON.Deserializer.Uint16StrConversion.__default.charToDigit).Contains((str).Select(BigInteger.Zero)))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<ushort>, bool>>((_1031_str) => Dafny.Helpers.Quantifier<ushort>(((_1031_str).Drop(BigInteger.One)).UniqueElements, true, (((_forall_var_6) => {
        ushort _1032_c = (ushort)_forall_var_6;
        return !(((_1031_str).Drop(BigInteger.One)).Contains(_1032_c)) || (Std.JSON.Deserializer.Uint16StrConversion.__default.IsDigitChar(_1032_c));
      }))))(str)));
    }
    public static Dafny.ISequence<ushort> OfInt(BigInteger n, ushort minus) {
      if ((n).Sign != -1) {
        return Std.JSON.Deserializer.Uint16StrConversion.__default.OfNat(n);
      } else {
        return Dafny.Sequence<ushort>.Concat(Dafny.Sequence<ushort>.FromElements(minus), Std.JSON.Deserializer.Uint16StrConversion.__default.OfNat((BigInteger.Zero) - (n)));
      }
    }
    public static BigInteger ToNat(Dafny.ISequence<ushort> str) {
      if ((str).Equals(Dafny.Sequence<ushort>.FromElements())) {
        return BigInteger.Zero;
      } else {
        ushort _1033_c = (str).Select((new BigInteger((str).Count)) - (BigInteger.One));
        return ((Std.JSON.Deserializer.Uint16StrConversion.__default.ToNat((str).Take((new BigInteger((str).Count)) - (BigInteger.One)))) * (Std.JSON.Deserializer.Uint16StrConversion.__default.@base)) + (Dafny.Map<ushort, BigInteger>.Select(Std.JSON.Deserializer.Uint16StrConversion.__default.charToDigit, _1033_c));
      }
    }
    public static BigInteger ToInt(Dafny.ISequence<ushort> str, ushort minus) {
      if (Dafny.Sequence<ushort>.IsPrefixOf(Dafny.Sequence<ushort>.FromElements(minus), str)) {
        return (BigInteger.Zero) - (Std.JSON.Deserializer.Uint16StrConversion.__default.ToNat((str).Drop(BigInteger.One)));
      } else {
        return Std.JSON.Deserializer.Uint16StrConversion.__default.ToNat(str);
      }
    }
    public static BigInteger ToNatRight(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        return ((Std.JSON.Deserializer.Uint16StrConversion.__default.ToNatRight(Std.Collections.Seq.__default.DropFirst<BigInteger>(xs))) * (Std.JSON.Deserializer.Uint16StrConversion.__default.BASE())) + (Std.Collections.Seq.__default.First<BigInteger>(xs));
      }
    }
    public static BigInteger ToNatLeft(Dafny.ISequence<BigInteger> xs) {
      BigInteger _1034___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return (BigInteger.Zero) + (_1034___accumulator);
      } else {
        _1034___accumulator = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) * (Std.Arithmetic.Power.__default.Pow(Std.JSON.Deserializer.Uint16StrConversion.__default.BASE(), (new BigInteger((xs).Count)) - (BigInteger.One)))) + (_1034___accumulator);
        Dafny.ISequence<BigInteger> _in91 = Std.Collections.Seq.__default.DropLast<BigInteger>(xs);
        xs = _in91;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> FromNat(BigInteger n) {
      Dafny.ISequence<BigInteger> _1035___accumulator = Dafny.Sequence<BigInteger>.FromElements();
    TAIL_CALL_START:;
      if ((n).Sign == 0) {
        return Dafny.Sequence<BigInteger>.Concat(_1035___accumulator, Dafny.Sequence<BigInteger>.FromElements());
      } else {
        _1035___accumulator = Dafny.Sequence<BigInteger>.Concat(_1035___accumulator, Dafny.Sequence<BigInteger>.FromElements(Dafny.Helpers.EuclideanModulus(n, Std.JSON.Deserializer.Uint16StrConversion.__default.BASE())));
        BigInteger _in92 = Dafny.Helpers.EuclideanDivision(n, Std.JSON.Deserializer.Uint16StrConversion.__default.BASE());
        n = _in92;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtend(Dafny.ISequence<BigInteger> xs, BigInteger n) {
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)) >= (n)) {
        return xs;
      } else {
        Dafny.ISequence<BigInteger> _in93 = Dafny.Sequence<BigInteger>.Concat(xs, Dafny.Sequence<BigInteger>.FromElements(BigInteger.Zero));
        BigInteger _in94 = n;
        xs = _in93;
        n = _in94;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtendMultiple(Dafny.ISequence<BigInteger> xs, BigInteger n) {
      BigInteger _1036_newLen = ((new BigInteger((xs).Count)) + (n)) - (Dafny.Helpers.EuclideanModulus(new BigInteger((xs).Count), n));
      return Std.JSON.Deserializer.Uint16StrConversion.__default.SeqExtend(xs, _1036_newLen);
    }
    public static Dafny.ISequence<BigInteger> FromNatWithLen(BigInteger n, BigInteger len) {
      return Std.JSON.Deserializer.Uint16StrConversion.__default.SeqExtend(Std.JSON.Deserializer.Uint16StrConversion.__default.FromNat(n), len);
    }
    public static Dafny.ISequence<BigInteger> SeqZero(BigInteger len) {
      Dafny.ISequence<BigInteger> _1037_xs = Std.JSON.Deserializer.Uint16StrConversion.__default.FromNatWithLen(BigInteger.Zero, len);
      return _1037_xs;
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqAdd(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs20 = Std.JSON.Deserializer.Uint16StrConversion.__default.SeqAdd(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _1038_zs_k = _let_tmp_rhs20.dtor__0;
        BigInteger _1039_cin = _let_tmp_rhs20.dtor__1;
        BigInteger _1040_sum = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) + (Std.Collections.Seq.__default.Last<BigInteger>(ys))) + (_1039_cin);
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs21 = (((_1040_sum) < (Std.JSON.Deserializer.Uint16StrConversion.__default.BASE())) ? (_System.Tuple2<BigInteger, BigInteger>.create(_1040_sum, BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((_1040_sum) - (Std.JSON.Deserializer.Uint16StrConversion.__default.BASE()), BigInteger.One)));
        BigInteger _1041_sum__out = _let_tmp_rhs21.dtor__0;
        BigInteger _1042_cout = _let_tmp_rhs21.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_1038_zs_k, Dafny.Sequence<BigInteger>.FromElements(_1041_sum__out)), _1042_cout);
      }
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqSub(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs22 = Std.JSON.Deserializer.Uint16StrConversion.__default.SeqSub(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _1043_zs = _let_tmp_rhs22.dtor__0;
        BigInteger _1044_cin = _let_tmp_rhs22.dtor__1;
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs23 = (((Std.Collections.Seq.__default.Last<BigInteger>(xs)) >= ((Std.Collections.Seq.__default.Last<BigInteger>(ys)) + (_1044_cin))) ? (_System.Tuple2<BigInteger, BigInteger>.create(((Std.Collections.Seq.__default.Last<BigInteger>(xs)) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_1044_cin), BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((((Std.JSON.Deserializer.Uint16StrConversion.__default.BASE()) + (Std.Collections.Seq.__default.Last<BigInteger>(xs))) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_1044_cin), BigInteger.One)));
        BigInteger _1045_diff__out = _let_tmp_rhs23.dtor__0;
        BigInteger _1046_cout = _let_tmp_rhs23.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_1043_zs, Dafny.Sequence<BigInteger>.FromElements(_1045_diff__out)), _1046_cout);
      }
    }
    public static Dafny.ISequence<ushort> chars {
      get {
        return Dafny.Sequence<ushort>.FromElements((ushort)((new Dafny.Rune('0')).Value), (ushort)((new Dafny.Rune('1')).Value), (ushort)((new Dafny.Rune('2')).Value), (ushort)((new Dafny.Rune('3')).Value), (ushort)((new Dafny.Rune('4')).Value), (ushort)((new Dafny.Rune('5')).Value), (ushort)((new Dafny.Rune('6')).Value), (ushort)((new Dafny.Rune('7')).Value), (ushort)((new Dafny.Rune('8')).Value), (ushort)((new Dafny.Rune('9')).Value), (ushort)((new Dafny.Rune('a')).Value), (ushort)((new Dafny.Rune('b')).Value), (ushort)((new Dafny.Rune('c')).Value), (ushort)((new Dafny.Rune('d')).Value), (ushort)((new Dafny.Rune('e')).Value), (ushort)((new Dafny.Rune('f')).Value), (ushort)((new Dafny.Rune('A')).Value), (ushort)((new Dafny.Rune('B')).Value), (ushort)((new Dafny.Rune('C')).Value), (ushort)((new Dafny.Rune('D')).Value), (ushort)((new Dafny.Rune('E')).Value), (ushort)((new Dafny.Rune('F')).Value));
      }
    }
    public static BigInteger @base {
      get {
        return new BigInteger((Std.JSON.Deserializer.Uint16StrConversion.__default.chars).Count);
      }
    }
    public static Dafny.IMap<ushort, BigInteger> charToDigit {
      get {
        return Dafny.Map<ushort, BigInteger>.FromElements(new Dafny.Pair<ushort, BigInteger>((ushort)((new Dafny.Rune('0')).Value), BigInteger.Zero), new Dafny.Pair<ushort, BigInteger>((ushort)((new Dafny.Rune('1')).Value), BigInteger.One), new Dafny.Pair<ushort, BigInteger>((ushort)((new Dafny.Rune('2')).Value), new BigInteger(2)), new Dafny.Pair<ushort, BigInteger>((ushort)((new Dafny.Rune('3')).Value), new BigInteger(3)), new Dafny.Pair<ushort, BigInteger>((ushort)((new Dafny.Rune('4')).Value), new BigInteger(4)), new Dafny.Pair<ushort, BigInteger>((ushort)((new Dafny.Rune('5')).Value), new BigInteger(5)), new Dafny.Pair<ushort, BigInteger>((ushort)((new Dafny.Rune('6')).Value), new BigInteger(6)), new Dafny.Pair<ushort, BigInteger>((ushort)((new Dafny.Rune('7')).Value), new BigInteger(7)), new Dafny.Pair<ushort, BigInteger>((ushort)((new Dafny.Rune('8')).Value), new BigInteger(8)), new Dafny.Pair<ushort, BigInteger>((ushort)((new Dafny.Rune('9')).Value), new BigInteger(9)), new Dafny.Pair<ushort, BigInteger>((ushort)((new Dafny.Rune('a')).Value), new BigInteger(10)), new Dafny.Pair<ushort, BigInteger>((ushort)((new Dafny.Rune('b')).Value), new BigInteger(11)), new Dafny.Pair<ushort, BigInteger>((ushort)((new Dafny.Rune('c')).Value), new BigInteger(12)), new Dafny.Pair<ushort, BigInteger>((ushort)((new Dafny.Rune('d')).Value), new BigInteger(13)), new Dafny.Pair<ushort, BigInteger>((ushort)((new Dafny.Rune('e')).Value), new BigInteger(14)), new Dafny.Pair<ushort, BigInteger>((ushort)((new Dafny.Rune('f')).Value), new BigInteger(15)), new Dafny.Pair<ushort, BigInteger>((ushort)((new Dafny.Rune('A')).Value), new BigInteger(10)), new Dafny.Pair<ushort, BigInteger>((ushort)((new Dafny.Rune('B')).Value), new BigInteger(11)), new Dafny.Pair<ushort, BigInteger>((ushort)((new Dafny.Rune('C')).Value), new BigInteger(12)), new Dafny.Pair<ushort, BigInteger>((ushort)((new Dafny.Rune('D')).Value), new BigInteger(13)), new Dafny.Pair<ushort, BigInteger>((ushort)((new Dafny.Rune('E')).Value), new BigInteger(14)), new Dafny.Pair<ushort, BigInteger>((ushort)((new Dafny.Rune('F')).Value), new BigInteger(15)));
      }
    }
  }

  public partial class CharSeq {
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<ushort>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<ushort>>(Dafny.Sequence<ushort>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<ushort>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class digit {
    private static readonly Dafny.TypeDescriptor<BigInteger> _TYPE = new Dafny.TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static Dafny.TypeDescriptor<BigInteger> _TypeDescriptor() {
      return _TYPE;
    }
  }
} // end of namespace Std.JSON.Deserializer.Uint16StrConversion
namespace Std.JSON.Deserializer {

  public partial class __default {
    public static bool Bool(Std.JSON.Utils.Views.Core._IView__ js) {
      return ((js).At(0U)) == ((byte)((new Dafny.Rune('t')).Value));
    }
    public static Std.JSON.Errors._IDeserializationError UnsupportedEscape16(Dafny.ISequence<ushort> code) {
      return Std.JSON.Errors.DeserializationError.create_UnsupportedEscape(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.GetOr(Std.Unicode.UnicodeStringsWithUnicodeChar.__default.FromUTF16Checked(code), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Couldn't decode UTF-16")));
    }
    public static ushort ToNat16(Dafny.ISequence<ushort> str) {
      BigInteger _1047_hd = Std.JSON.Deserializer.Uint16StrConversion.__default.ToNat(str);
      return (ushort)(_1047_hd);
    }
    public static Std.Wrappers._IResult<Dafny.ISequence<ushort>, Std.JSON.Errors._IDeserializationError> Unescape(Dafny.ISequence<ushort> str, BigInteger start, Dafny.ISequence<ushort> prefix) {
    TAIL_CALL_START:;
      if ((start) >= (new BigInteger((str).Count))) {
        return Std.Wrappers.Result<Dafny.ISequence<ushort>, Std.JSON.Errors._IDeserializationError>.create_Success(prefix);
      } else if (((str).Select(start)) == ((ushort)((new Dafny.Rune('\\')).Value))) {
        if ((new BigInteger((str).Count)) == ((start) + (BigInteger.One))) {
          return Std.Wrappers.Result<Dafny.ISequence<ushort>, Std.JSON.Errors._IDeserializationError>.create_Failure(Std.JSON.Errors.DeserializationError.create_EscapeAtEOS());
        } else {
          ushort _1048_c = (str).Select((start) + (BigInteger.One));
          if ((_1048_c) == ((ushort)((new Dafny.Rune('u')).Value))) {
            if ((new BigInteger((str).Count)) <= ((start) + (new BigInteger(6)))) {
              return Std.Wrappers.Result<Dafny.ISequence<ushort>, Std.JSON.Errors._IDeserializationError>.create_Failure(Std.JSON.Errors.DeserializationError.create_EscapeAtEOS());
            } else {
              Dafny.ISequence<ushort> _1049_code = (str).Subsequence((start) + (new BigInteger(2)), (start) + (new BigInteger(6)));
              if (Dafny.Helpers.Id<Func<Dafny.ISequence<ushort>, bool>>((_1050_code) => Dafny.Helpers.Quantifier<ushort>((_1050_code).UniqueElements, false, (((_exists_var_0) => {
                ushort _1051_c = (ushort)_exists_var_0;
                return ((_1050_code).Contains(_1051_c)) && (!(Std.JSON.Deserializer.__default.HEX__TABLE__16).Contains(_1051_c));
              }))))(_1049_code)) {
                return Std.Wrappers.Result<Dafny.ISequence<ushort>, Std.JSON.Errors._IDeserializationError>.create_Failure(Std.JSON.Deserializer.__default.UnsupportedEscape16(_1049_code));
              } else {
                ushort _1052_hd = Std.JSON.Deserializer.__default.ToNat16(_1049_code);
                Dafny.ISequence<ushort> _in95 = str;
                BigInteger _in96 = (start) + (new BigInteger(6));
                Dafny.ISequence<ushort> _in97 = Dafny.Sequence<ushort>.Concat(prefix, Dafny.Sequence<ushort>.FromElements(_1052_hd));
                str = _in95;
                start = _in96;
                prefix = _in97;
                goto TAIL_CALL_START;
              }
            }
          } else {
            ushort _1053_unescaped = (((_1048_c) == ((ushort)(34))) ? ((ushort)(34)) : ((((_1048_c) == ((ushort)(92))) ? ((ushort)(92)) : ((((_1048_c) == ((ushort)(98))) ? ((ushort)(8)) : ((((_1048_c) == ((ushort)(102))) ? ((ushort)(12)) : ((((_1048_c) == ((ushort)(110))) ? ((ushort)(10)) : ((((_1048_c) == ((ushort)(114))) ? ((ushort)(13)) : ((((_1048_c) == ((ushort)(116))) ? ((ushort)(9)) : ((ushort)(0)))))))))))))));
            if ((new BigInteger(_1053_unescaped)).Sign == 0) {
              return Std.Wrappers.Result<Dafny.ISequence<ushort>, Std.JSON.Errors._IDeserializationError>.create_Failure(Std.JSON.Deserializer.__default.UnsupportedEscape16((str).Subsequence(start, (start) + (new BigInteger(2)))));
            } else {
              Dafny.ISequence<ushort> _in98 = str;
              BigInteger _in99 = (start) + (new BigInteger(2));
              Dafny.ISequence<ushort> _in100 = Dafny.Sequence<ushort>.Concat(prefix, Dafny.Sequence<ushort>.FromElements(_1053_unescaped));
              str = _in98;
              start = _in99;
              prefix = _in100;
              goto TAIL_CALL_START;
            }
          }
        }
      } else {
        Dafny.ISequence<ushort> _in101 = str;
        BigInteger _in102 = (start) + (BigInteger.One);
        Dafny.ISequence<ushort> _in103 = Dafny.Sequence<ushort>.Concat(prefix, Dafny.Sequence<ushort>.FromElements((str).Select(start)));
        str = _in101;
        start = _in102;
        prefix = _in103;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IResult<Dafny.ISequence<Dafny.Rune>, Std.JSON.Errors._IDeserializationError> String(Std.JSON.Grammar._Ijstring js) {
      Std.Wrappers._IResult<Dafny.ISequence<Dafny.Rune>, Std.JSON.Errors._IDeserializationError> _1054_valueOrError0 = (Std.Unicode.UnicodeStringsWithUnicodeChar.__default.FromUTF8Checked(((js).dtor_contents).Bytes())).ToResult<Std.JSON.Errors._IDeserializationError>(Std.JSON.Errors.DeserializationError.create_InvalidUnicode());
      if ((_1054_valueOrError0).IsFailure()) {
        return (_1054_valueOrError0).PropagateFailure<Dafny.ISequence<Dafny.Rune>>();
      } else {
        Dafny.ISequence<Dafny.Rune> _1055_asUtf32 = (_1054_valueOrError0).Extract();
        Std.Wrappers._IResult<Dafny.ISequence<ushort>, Std.JSON.Errors._IDeserializationError> _1056_valueOrError1 = (Std.Unicode.UnicodeStringsWithUnicodeChar.__default.ToUTF16Checked(_1055_asUtf32)).ToResult<Std.JSON.Errors._IDeserializationError>(Std.JSON.Errors.DeserializationError.create_InvalidUnicode());
        if ((_1056_valueOrError1).IsFailure()) {
          return (_1056_valueOrError1).PropagateFailure<Dafny.ISequence<Dafny.Rune>>();
        } else {
          Dafny.ISequence<ushort> _1057_asUint16 = (_1056_valueOrError1).Extract();
          Std.Wrappers._IResult<Dafny.ISequence<ushort>, Std.JSON.Errors._IDeserializationError> _1058_valueOrError2 = Std.JSON.Deserializer.__default.Unescape(_1057_asUint16, BigInteger.Zero, Dafny.Sequence<ushort>.FromElements());
          if ((_1058_valueOrError2).IsFailure()) {
            return (_1058_valueOrError2).PropagateFailure<Dafny.ISequence<Dafny.Rune>>();
          } else {
            Dafny.ISequence<ushort> _1059_unescaped = (_1058_valueOrError2).Extract();
            return (Std.Unicode.UnicodeStringsWithUnicodeChar.__default.FromUTF16Checked(_1059_unescaped)).ToResult<Std.JSON.Errors._IDeserializationError>(Std.JSON.Errors.DeserializationError.create_InvalidUnicode());
          }
        }
      }
    }
    public static Std.Wrappers._IResult<BigInteger, Std.JSON.Errors._IDeserializationError> ToInt(Std.JSON.Utils.Views.Core._IView__ sign, Std.JSON.Utils.Views.Core._IView__ n) {
      BigInteger _1060_n = Std.JSON.ByteStrConversion.__default.ToNat((n).Bytes());
      return Std.Wrappers.Result<BigInteger, Std.JSON.Errors._IDeserializationError>.create_Success((((sign).Char_q(new Dafny.Rune('-'))) ? ((BigInteger.Zero) - (_1060_n)) : (_1060_n)));
    }
    public static Std.Wrappers._IResult<Std.JSON.Values._IDecimal, Std.JSON.Errors._IDeserializationError> Number(Std.JSON.Grammar._Ijnumber js) {
      Std.JSON.Grammar._Ijnumber _let_tmp_rhs24 = js;
      Std.JSON.Utils.Views.Core._IView__ _1061_minus = _let_tmp_rhs24.dtor_minus;
      Std.JSON.Utils.Views.Core._IView__ _1062_num = _let_tmp_rhs24.dtor_num;
      Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijfrac> _1063_frac = _let_tmp_rhs24.dtor_frac;
      Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijexp> _1064_exp = _let_tmp_rhs24.dtor_exp;
      Std.Wrappers._IResult<BigInteger, Std.JSON.Errors._IDeserializationError> _1065_valueOrError0 = Std.JSON.Deserializer.__default.ToInt(_1061_minus, _1062_num);
      if ((_1065_valueOrError0).IsFailure()) {
        return (_1065_valueOrError0).PropagateFailure<Std.JSON.Values._IDecimal>();
      } else {
        BigInteger _1066_n = (_1065_valueOrError0).Extract();
        Std.Wrappers._IResult<BigInteger, Std.JSON.Errors._IDeserializationError> _1067_valueOrError1 = ((System.Func<Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijexp>, Std.Wrappers._IResult<BigInteger, Std.JSON.Errors._IDeserializationError>>)((_source65) => {
          if (_source65.is_Empty) {
            return Std.Wrappers.Result<BigInteger, Std.JSON.Errors._IDeserializationError>.create_Success(BigInteger.Zero);
          } else {
            Std.JSON.Grammar._Ijexp _1068___mcc_h0 = _source65.dtor_t;
            Std.JSON.Grammar._Ijexp _source66 = _1068___mcc_h0;
            Std.JSON.Utils.Views.Core._IView__ _1069___mcc_h1 = _source66.dtor_e;
            Std.JSON.Utils.Views.Core._IView__ _1070___mcc_h2 = _source66.dtor_sign;
            Std.JSON.Utils.Views.Core._IView__ _1071___mcc_h3 = _source66.dtor_num;
            Std.JSON.Utils.Views.Core._IView__ _1072_num = _1071___mcc_h3;
            Std.JSON.Utils.Views.Core._IView__ _1073_sign = _1070___mcc_h2;
            return Std.JSON.Deserializer.__default.ToInt(_1073_sign, _1072_num);
          }
        }))(_1064_exp);
        if ((_1067_valueOrError1).IsFailure()) {
          return (_1067_valueOrError1).PropagateFailure<Std.JSON.Values._IDecimal>();
        } else {
          BigInteger _1074_e10 = (_1067_valueOrError1).Extract();
          Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijfrac> _source67 = _1063_frac;
          if (_source67.is_Empty) {
            return Std.Wrappers.Result<Std.JSON.Values._IDecimal, Std.JSON.Errors._IDeserializationError>.create_Success(Std.JSON.Values.Decimal.create(_1066_n, _1074_e10));
          } else {
            Std.JSON.Grammar._Ijfrac _1075___mcc_h4 = _source67.dtor_t;
            Std.JSON.Grammar._Ijfrac _source68 = _1075___mcc_h4;
            Std.JSON.Utils.Views.Core._IView__ _1076___mcc_h5 = _source68.dtor_period;
            Std.JSON.Utils.Views.Core._IView__ _1077___mcc_h6 = _source68.dtor_num;
            Std.JSON.Utils.Views.Core._IView__ _1078_num = _1077___mcc_h6;
            BigInteger _1079_pow10 = new BigInteger((_1078_num).Length());
            Std.Wrappers._IResult<BigInteger, Std.JSON.Errors._IDeserializationError> _1080_valueOrError2 = Std.JSON.Deserializer.__default.ToInt(_1061_minus, _1078_num);
            if ((_1080_valueOrError2).IsFailure()) {
              return (_1080_valueOrError2).PropagateFailure<Std.JSON.Values._IDecimal>();
            } else {
              BigInteger _1081_frac = (_1080_valueOrError2).Extract();
              return Std.Wrappers.Result<Std.JSON.Values._IDecimal, Std.JSON.Errors._IDeserializationError>.create_Success(Std.JSON.Values.Decimal.create(((_1066_n) * (Std.Arithmetic.Power.__default.Pow(new BigInteger(10), _1079_pow10))) + (_1081_frac), (_1074_e10) - (_1079_pow10)));
            }
          }
        }
      }
    }
    public static Std.Wrappers._IResult<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, Std.JSON.Values._IJSON>, Std.JSON.Errors._IDeserializationError> KeyValue(Std.JSON.Grammar._IjKeyValue js) {
      Std.Wrappers._IResult<Dafny.ISequence<Dafny.Rune>, Std.JSON.Errors._IDeserializationError> _1082_valueOrError0 = Std.JSON.Deserializer.__default.String((js).dtor_k);
      if ((_1082_valueOrError0).IsFailure()) {
        return (_1082_valueOrError0).PropagateFailure<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, Std.JSON.Values._IJSON>>();
      } else {
        Dafny.ISequence<Dafny.Rune> _1083_k = (_1082_valueOrError0).Extract();
        Std.Wrappers._IResult<Std.JSON.Values._IJSON, Std.JSON.Errors._IDeserializationError> _1084_valueOrError1 = Std.JSON.Deserializer.__default.Value((js).dtor_v);
        if ((_1084_valueOrError1).IsFailure()) {
          return (_1084_valueOrError1).PropagateFailure<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, Std.JSON.Values._IJSON>>();
        } else {
          Std.JSON.Values._IJSON _1085_v = (_1084_valueOrError1).Extract();
          return Std.Wrappers.Result<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, Std.JSON.Values._IJSON>, Std.JSON.Errors._IDeserializationError>.create_Success(_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Std.JSON.Values._IJSON>.create(_1083_k, _1085_v));
        }
      }
    }
    public static Std.Wrappers._IResult<Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, Std.JSON.Values._IJSON>>, Std.JSON.Errors._IDeserializationError> Object(Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> js) {
      return Std.Collections.Seq.__default.MapWithResult<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__>, _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Std.JSON.Values._IJSON>, Std.JSON.Errors._IDeserializationError>(Dafny.Helpers.Id<Func<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>, Func<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__>, Std.Wrappers._IResult<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, Std.JSON.Values._IJSON>, Std.JSON.Errors._IDeserializationError>>>>((_1086_js) => ((System.Func<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__>, Std.Wrappers._IResult<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, Std.JSON.Values._IJSON>, Std.JSON.Errors._IDeserializationError>>)((_1087_d) => {
        return Std.JSON.Deserializer.__default.KeyValue((_1087_d).dtor_t);
      })))(js), (js).dtor_data);
    }
    public static Std.Wrappers._IResult<Dafny.ISequence<Std.JSON.Values._IJSON>, Std.JSON.Errors._IDeserializationError> Array(Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> js) {
      return Std.Collections.Seq.__default.MapWithResult<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Values._IJSON, Std.JSON.Errors._IDeserializationError>(Dafny.Helpers.Id<Func<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>, Func<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__>, Std.Wrappers._IResult<Std.JSON.Values._IJSON, Std.JSON.Errors._IDeserializationError>>>>((_1088_js) => ((System.Func<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__>, Std.Wrappers._IResult<Std.JSON.Values._IJSON, Std.JSON.Errors._IDeserializationError>>)((_1089_d) => {
        return Std.JSON.Deserializer.__default.Value((_1089_d).dtor_t);
      })))(js), (js).dtor_data);
    }
    public static Std.Wrappers._IResult<Std.JSON.Values._IJSON, Std.JSON.Errors._IDeserializationError> Value(Std.JSON.Grammar._IValue js) {
      Std.JSON.Grammar._IValue _source69 = js;
      if (_source69.is_Null) {
        Std.JSON.Utils.Views.Core._IView__ _1090___mcc_h0 = _source69.dtor_n;
        return Std.Wrappers.Result<Std.JSON.Values._IJSON, Std.JSON.Errors._IDeserializationError>.create_Success(Std.JSON.Values.JSON.create_Null());
      } else if (_source69.is_Bool) {
        Std.JSON.Utils.Views.Core._IView__ _1091___mcc_h1 = _source69.dtor_b;
        Std.JSON.Utils.Views.Core._IView__ _1092_b = _1091___mcc_h1;
        return Std.Wrappers.Result<Std.JSON.Values._IJSON, Std.JSON.Errors._IDeserializationError>.create_Success(Std.JSON.Values.JSON.create_Bool(Std.JSON.Deserializer.__default.Bool(_1092_b)));
      } else if (_source69.is_String) {
        Std.JSON.Grammar._Ijstring _1093___mcc_h2 = _source69.dtor_str;
        Std.JSON.Grammar._Ijstring _1094_str = _1093___mcc_h2;
        Std.Wrappers._IResult<Dafny.ISequence<Dafny.Rune>, Std.JSON.Errors._IDeserializationError> _1095_valueOrError0 = Std.JSON.Deserializer.__default.String(_1094_str);
        if ((_1095_valueOrError0).IsFailure()) {
          return (_1095_valueOrError0).PropagateFailure<Std.JSON.Values._IJSON>();
        } else {
          Dafny.ISequence<Dafny.Rune> _1096_s = (_1095_valueOrError0).Extract();
          return Std.Wrappers.Result<Std.JSON.Values._IJSON, Std.JSON.Errors._IDeserializationError>.create_Success(Std.JSON.Values.JSON.create_String(_1096_s));
        }
      } else if (_source69.is_Number) {
        Std.JSON.Grammar._Ijnumber _1097___mcc_h3 = _source69.dtor_num;
        Std.JSON.Grammar._Ijnumber _1098_dec = _1097___mcc_h3;
        Std.Wrappers._IResult<Std.JSON.Values._IDecimal, Std.JSON.Errors._IDeserializationError> _1099_valueOrError1 = Std.JSON.Deserializer.__default.Number(_1098_dec);
        if ((_1099_valueOrError1).IsFailure()) {
          return (_1099_valueOrError1).PropagateFailure<Std.JSON.Values._IJSON>();
        } else {
          Std.JSON.Values._IDecimal _1100_n = (_1099_valueOrError1).Extract();
          return Std.Wrappers.Result<Std.JSON.Values._IJSON, Std.JSON.Errors._IDeserializationError>.create_Success(Std.JSON.Values.JSON.create_Number(_1100_n));
        }
      } else if (_source69.is_Object) {
        Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> _1101___mcc_h4 = _source69.dtor_obj;
        Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> _1102_obj = _1101___mcc_h4;
        Std.Wrappers._IResult<Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, Std.JSON.Values._IJSON>>, Std.JSON.Errors._IDeserializationError> _1103_valueOrError2 = Std.JSON.Deserializer.__default.Object(_1102_obj);
        if ((_1103_valueOrError2).IsFailure()) {
          return (_1103_valueOrError2).PropagateFailure<Std.JSON.Values._IJSON>();
        } else {
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, Std.JSON.Values._IJSON>> _1104_o = (_1103_valueOrError2).Extract();
          return Std.Wrappers.Result<Std.JSON.Values._IJSON, Std.JSON.Errors._IDeserializationError>.create_Success(Std.JSON.Values.JSON.create_Object(_1104_o));
        }
      } else {
        Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> _1105___mcc_h5 = _source69.dtor_arr;
        Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> _1106_arr = _1105___mcc_h5;
        Std.Wrappers._IResult<Dafny.ISequence<Std.JSON.Values._IJSON>, Std.JSON.Errors._IDeserializationError> _1107_valueOrError3 = Std.JSON.Deserializer.__default.Array(_1106_arr);
        if ((_1107_valueOrError3).IsFailure()) {
          return (_1107_valueOrError3).PropagateFailure<Std.JSON.Values._IJSON>();
        } else {
          Dafny.ISequence<Std.JSON.Values._IJSON> _1108_a = (_1107_valueOrError3).Extract();
          return Std.Wrappers.Result<Std.JSON.Values._IJSON, Std.JSON.Errors._IDeserializationError>.create_Success(Std.JSON.Values.JSON.create_Array(_1108_a));
        }
      }
    }
    public static Std.Wrappers._IResult<Std.JSON.Values._IJSON, Std.JSON.Errors._IDeserializationError> JSON(Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue> js) {
      return Std.JSON.Deserializer.__default.Value((js).dtor_t);
    }
    public static Dafny.IMap<ushort, BigInteger> HEX__TABLE__16 {
      get {
        return Std.JSON.Deserializer.Uint16StrConversion.__default.charToDigit;
      }
    }
    public static Dafny.IMap<byte, BigInteger> DIGITS {
      get {
        return Std.JSON.ByteStrConversion.__default.charToDigit;
      }
    }
    public static byte MINUS {
      get {
        return (byte)((new Dafny.Rune('-')).Value);
      }
    }
  }
} // end of namespace Std.JSON.Deserializer
namespace Std.JSON.ConcreteSyntax.Spec {

  public partial class __default {
    public static Dafny.ISequence<byte> View(Std.JSON.Utils.Views.Core._IView__ v) {
      return (v).Bytes();
    }
    public static Dafny.ISequence<byte> Structural<__T>(Std.JSON.Grammar._IStructural<__T> self, Func<__T, Dafny.ISequence<byte>> fT) {
      return Dafny.Sequence<byte>.Concat(Dafny.Sequence<byte>.Concat(Std.JSON.ConcreteSyntax.Spec.__default.View((self).dtor_before), Dafny.Helpers.Id<Func<__T, Dafny.ISequence<byte>>>(fT)((self).dtor_t)), Std.JSON.ConcreteSyntax.Spec.__default.View((self).dtor_after));
    }
    public static Dafny.ISequence<byte> StructuralView(Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__> self) {
      return Std.JSON.ConcreteSyntax.Spec.__default.Structural<Std.JSON.Utils.Views.Core._IView__>(self, Std.JSON.ConcreteSyntax.Spec.__default.View);
    }
    public static Dafny.ISequence<byte> Maybe<__T>(Std.JSON.Grammar._IMaybe<__T> self, Func<__T, Dafny.ISequence<byte>> fT) {
      if ((self).is_Empty) {
        return Dafny.Sequence<byte>.FromElements();
      } else {
        return Dafny.Helpers.Id<Func<__T, Dafny.ISequence<byte>>>(fT)((self).dtor_t);
      }
    }
    public static Dafny.ISequence<byte> ConcatBytes<__T>(Dafny.ISequence<__T> ts, Func<__T, Dafny.ISequence<byte>> fT) {
      Dafny.ISequence<byte> _1109___accumulator = Dafny.Sequence<byte>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((ts).Count)).Sign == 0) {
        return Dafny.Sequence<byte>.Concat(_1109___accumulator, Dafny.Sequence<byte>.FromElements());
      } else {
        _1109___accumulator = Dafny.Sequence<byte>.Concat(_1109___accumulator, Dafny.Helpers.Id<Func<__T, Dafny.ISequence<byte>>>(fT)((ts).Select(BigInteger.Zero)));
        Dafny.ISequence<__T> _in104 = (ts).Drop(BigInteger.One);
        Func<__T, Dafny.ISequence<byte>> _in105 = fT;
        ts = _in104;
        fT = _in105;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<byte> Bracketed<__D, __S>(Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, __D, __S, Std.JSON.Utils.Views.Core._IView__> self, Func<Std.JSON.Grammar._ISuffixed<__D, __S>, Dafny.ISequence<byte>> fDatum) {
      return Dafny.Sequence<byte>.Concat(Dafny.Sequence<byte>.Concat(Std.JSON.ConcreteSyntax.Spec.__default.StructuralView((self).dtor_l), Std.JSON.ConcreteSyntax.Spec.__default.ConcatBytes<Std.JSON.Grammar._ISuffixed<__D, __S>>((self).dtor_data, fDatum)), Std.JSON.ConcreteSyntax.Spec.__default.StructuralView((self).dtor_r));
    }
    public static Dafny.ISequence<byte> KeyValue(Std.JSON.Grammar._IjKeyValue self) {
      return Dafny.Sequence<byte>.Concat(Dafny.Sequence<byte>.Concat(Std.JSON.ConcreteSyntax.Spec.__default.String((self).dtor_k), Std.JSON.ConcreteSyntax.Spec.__default.StructuralView((self).dtor_colon)), Std.JSON.ConcreteSyntax.Spec.__default.Value((self).dtor_v));
    }
    public static Dafny.ISequence<byte> Frac(Std.JSON.Grammar._Ijfrac self) {
      return Dafny.Sequence<byte>.Concat(Std.JSON.ConcreteSyntax.Spec.__default.View((self).dtor_period), Std.JSON.ConcreteSyntax.Spec.__default.View((self).dtor_num));
    }
    public static Dafny.ISequence<byte> Exp(Std.JSON.Grammar._Ijexp self) {
      return Dafny.Sequence<byte>.Concat(Dafny.Sequence<byte>.Concat(Std.JSON.ConcreteSyntax.Spec.__default.View((self).dtor_e), Std.JSON.ConcreteSyntax.Spec.__default.View((self).dtor_sign)), Std.JSON.ConcreteSyntax.Spec.__default.View((self).dtor_num));
    }
    public static Dafny.ISequence<byte> Number(Std.JSON.Grammar._Ijnumber self) {
      return Dafny.Sequence<byte>.Concat(Dafny.Sequence<byte>.Concat(Dafny.Sequence<byte>.Concat(Std.JSON.ConcreteSyntax.Spec.__default.View((self).dtor_minus), Std.JSON.ConcreteSyntax.Spec.__default.View((self).dtor_num)), Std.JSON.ConcreteSyntax.Spec.__default.Maybe<Std.JSON.Grammar._Ijfrac>((self).dtor_frac, Std.JSON.ConcreteSyntax.Spec.__default.Frac)), Std.JSON.ConcreteSyntax.Spec.__default.Maybe<Std.JSON.Grammar._Ijexp>((self).dtor_exp, Std.JSON.ConcreteSyntax.Spec.__default.Exp));
    }
    public static Dafny.ISequence<byte> String(Std.JSON.Grammar._Ijstring self) {
      return Dafny.Sequence<byte>.Concat(Dafny.Sequence<byte>.Concat(Std.JSON.ConcreteSyntax.Spec.__default.View((self).dtor_lq), Std.JSON.ConcreteSyntax.Spec.__default.View((self).dtor_contents)), Std.JSON.ConcreteSyntax.Spec.__default.View((self).dtor_rq));
    }
    public static Dafny.ISequence<byte> CommaSuffix(Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>> c) {
      return Std.JSON.ConcreteSyntax.Spec.__default.Maybe<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>>(c, Std.JSON.ConcreteSyntax.Spec.__default.StructuralView);
    }
    public static Dafny.ISequence<byte> Member(Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__> self) {
      return Dafny.Sequence<byte>.Concat(Std.JSON.ConcreteSyntax.Spec.__default.KeyValue((self).dtor_t), Std.JSON.ConcreteSyntax.Spec.__default.CommaSuffix((self).dtor_suffix));
    }
    public static Dafny.ISequence<byte> Item(Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__> self) {
      return Dafny.Sequence<byte>.Concat(Std.JSON.ConcreteSyntax.Spec.__default.Value((self).dtor_t), Std.JSON.ConcreteSyntax.Spec.__default.CommaSuffix((self).dtor_suffix));
    }
    public static Dafny.ISequence<byte> Object(Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> obj) {
      return Std.JSON.ConcreteSyntax.Spec.__default.Bracketed<Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__>(obj, Dafny.Helpers.Id<Func<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>, Func<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__>, Dafny.ISequence<byte>>>>((_1110_obj) => ((System.Func<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__>, Dafny.ISequence<byte>>)((_1111_d) => {
        return Std.JSON.ConcreteSyntax.Spec.__default.Member(_1111_d);
      })))(obj));
    }
    public static Dafny.ISequence<byte> Array(Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> arr) {
      return Std.JSON.ConcreteSyntax.Spec.__default.Bracketed<Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__>(arr, Dafny.Helpers.Id<Func<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>, Func<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__>, Dafny.ISequence<byte>>>>((_1112_arr) => ((System.Func<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__>, Dafny.ISequence<byte>>)((_1113_d) => {
        return Std.JSON.ConcreteSyntax.Spec.__default.Item(_1113_d);
      })))(arr));
    }
    public static Dafny.ISequence<byte> Value(Std.JSON.Grammar._IValue self) {
      Std.JSON.Grammar._IValue _source70 = self;
      if (_source70.is_Null) {
        Std.JSON.Utils.Views.Core._IView__ _1114___mcc_h0 = _source70.dtor_n;
        Std.JSON.Utils.Views.Core._IView__ _1115_n = _1114___mcc_h0;
        return Std.JSON.ConcreteSyntax.Spec.__default.View(_1115_n);
      } else if (_source70.is_Bool) {
        Std.JSON.Utils.Views.Core._IView__ _1116___mcc_h1 = _source70.dtor_b;
        Std.JSON.Utils.Views.Core._IView__ _1117_b = _1116___mcc_h1;
        return Std.JSON.ConcreteSyntax.Spec.__default.View(_1117_b);
      } else if (_source70.is_String) {
        Std.JSON.Grammar._Ijstring _1118___mcc_h2 = _source70.dtor_str;
        Std.JSON.Grammar._Ijstring _1119_str = _1118___mcc_h2;
        return Std.JSON.ConcreteSyntax.Spec.__default.String(_1119_str);
      } else if (_source70.is_Number) {
        Std.JSON.Grammar._Ijnumber _1120___mcc_h3 = _source70.dtor_num;
        Std.JSON.Grammar._Ijnumber _1121_num = _1120___mcc_h3;
        return Std.JSON.ConcreteSyntax.Spec.__default.Number(_1121_num);
      } else if (_source70.is_Object) {
        Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> _1122___mcc_h4 = _source70.dtor_obj;
        Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> _1123_obj = _1122___mcc_h4;
        return Std.JSON.ConcreteSyntax.Spec.__default.Object(_1123_obj);
      } else {
        Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> _1124___mcc_h5 = _source70.dtor_arr;
        Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> _1125_arr = _1124___mcc_h5;
        return Std.JSON.ConcreteSyntax.Spec.__default.Array(_1125_arr);
      }
    }
    public static Dafny.ISequence<byte> JSON(Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue> js) {
      return Std.JSON.ConcreteSyntax.Spec.__default.Structural<Std.JSON.Grammar._IValue>(js, Std.JSON.ConcreteSyntax.Spec.__default.Value);
    }
  }
} // end of namespace Std.JSON.ConcreteSyntax.Spec
namespace Std.JSON.ConcreteSyntax.SpecProperties {

} // end of namespace Std.JSON.ConcreteSyntax.SpecProperties
namespace Std.JSON.ConcreteSyntax {

} // end of namespace Std.JSON.ConcreteSyntax
namespace Std.JSON.ZeroCopy.Serializer {

  public partial class __default {
    public static Std.Wrappers._IResult<byte[], Std.JSON.Errors._ISerializationError> Serialize(Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue> js) {
      Std.Wrappers._IResult<byte[], Std.JSON.Errors._ISerializationError> rbs = Std.Wrappers.Result<byte[], Std.JSON.Errors._ISerializationError>.Default(new byte[0]);
      Std.JSON.Utils.Views.Writers._IWriter__ _1126_writer;
      _1126_writer = Std.JSON.ZeroCopy.Serializer.__default.Text(js);
      Std.Wrappers._IOutcomeResult<Std.JSON.Errors._ISerializationError> _1127_valueOrError0 = Std.Wrappers.OutcomeResult<Std.JSON.Errors._ISerializationError>.Default();
      _1127_valueOrError0 = Std.Wrappers.__default.Need<Std.JSON.Errors._ISerializationError>((_1126_writer).Unsaturated_q, Std.JSON.Errors.SerializationError.create_OutOfMemory());
      if ((_1127_valueOrError0).IsFailure()) {
        rbs = (_1127_valueOrError0).PropagateFailure<byte[]>();
        return rbs;
      }
      byte[] _1128_bs;
      byte[] _out16;
      _out16 = (_1126_writer).ToArray();
      _1128_bs = _out16;
      rbs = Std.Wrappers.Result<byte[], Std.JSON.Errors._ISerializationError>.create_Success(_1128_bs);
      return rbs;
      return rbs;
    }
    public static Std.Wrappers._IResult<uint, Std.JSON.Errors._ISerializationError> SerializeTo(Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue> js, byte[] dest) {
      Std.Wrappers._IResult<uint, Std.JSON.Errors._ISerializationError> len = Std.Wrappers.Result<uint, Std.JSON.Errors._ISerializationError>.Default(0);
      Std.JSON.Utils.Views.Writers._IWriter__ _1129_writer;
      _1129_writer = Std.JSON.ZeroCopy.Serializer.__default.Text(js);
      Std.Wrappers._IOutcomeResult<Std.JSON.Errors._ISerializationError> _1130_valueOrError0 = Std.Wrappers.OutcomeResult<Std.JSON.Errors._ISerializationError>.Default();
      _1130_valueOrError0 = Std.Wrappers.__default.Need<Std.JSON.Errors._ISerializationError>((_1129_writer).Unsaturated_q, Std.JSON.Errors.SerializationError.create_OutOfMemory());
      if ((_1130_valueOrError0).IsFailure()) {
        len = (_1130_valueOrError0).PropagateFailure<uint>();
        return len;
      }
      Std.Wrappers._IOutcomeResult<Std.JSON.Errors._ISerializationError> _1131_valueOrError1 = Std.Wrappers.OutcomeResult<Std.JSON.Errors._ISerializationError>.Default();
      _1131_valueOrError1 = Std.Wrappers.__default.Need<Std.JSON.Errors._ISerializationError>((new BigInteger((_1129_writer).dtor_length)) <= (new BigInteger((dest).Length)), Std.JSON.Errors.SerializationError.create_OutOfMemory());
      if ((_1131_valueOrError1).IsFailure()) {
        len = (_1131_valueOrError1).PropagateFailure<uint>();
        return len;
      }
      (_1129_writer).CopyTo(dest);
      len = Std.Wrappers.Result<uint, Std.JSON.Errors._ISerializationError>.create_Success((_1129_writer).dtor_length);
      return len;
      return len;
    }
    public static Std.JSON.Utils.Views.Writers._IWriter__ Text(Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue> js) {
      return Std.JSON.ZeroCopy.Serializer.__default.JSON(js, Std.JSON.Utils.Views.Writers.Writer__.Empty);
    }
    public static Std.JSON.Utils.Views.Writers._IWriter__ JSON(Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue> js, Std.JSON.Utils.Views.Writers._IWriter__ writer) {
      return (((writer).Append((js).dtor_before)).Then(Dafny.Helpers.Id<Func<Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue>, Func<Std.JSON.Utils.Views.Writers._IWriter__, Std.JSON.Utils.Views.Writers._IWriter__>>>((_1132_js) => ((System.Func<Std.JSON.Utils.Views.Writers._IWriter__, Std.JSON.Utils.Views.Writers._IWriter__>)((_1133_wr) => {
        return Std.JSON.ZeroCopy.Serializer.__default.Value((_1132_js).dtor_t, _1133_wr);
      })))(js))).Append((js).dtor_after);
    }
    public static Std.JSON.Utils.Views.Writers._IWriter__ Value(Std.JSON.Grammar._IValue v, Std.JSON.Utils.Views.Writers._IWriter__ writer) {
      Std.JSON.Grammar._IValue _source71 = v;
      if (_source71.is_Null) {
        Std.JSON.Utils.Views.Core._IView__ _1134___mcc_h0 = _source71.dtor_n;
        Std.JSON.Utils.Views.Core._IView__ _1135_n = _1134___mcc_h0;
        Std.JSON.Utils.Views.Writers._IWriter__ _1136_wr = (writer).Append(_1135_n);
        return _1136_wr;
      } else if (_source71.is_Bool) {
        Std.JSON.Utils.Views.Core._IView__ _1137___mcc_h1 = _source71.dtor_b;
        Std.JSON.Utils.Views.Core._IView__ _1138_b = _1137___mcc_h1;
        Std.JSON.Utils.Views.Writers._IWriter__ _1139_wr = (writer).Append(_1138_b);
        return _1139_wr;
      } else if (_source71.is_String) {
        Std.JSON.Grammar._Ijstring _1140___mcc_h2 = _source71.dtor_str;
        Std.JSON.Grammar._Ijstring _1141_str = _1140___mcc_h2;
        Std.JSON.Utils.Views.Writers._IWriter__ _1142_wr = Std.JSON.ZeroCopy.Serializer.__default.String(_1141_str, writer);
        return _1142_wr;
      } else if (_source71.is_Number) {
        Std.JSON.Grammar._Ijnumber _1143___mcc_h3 = _source71.dtor_num;
        Std.JSON.Grammar._Ijnumber _1144_num = _1143___mcc_h3;
        Std.JSON.Utils.Views.Writers._IWriter__ _1145_wr = Std.JSON.ZeroCopy.Serializer.__default.Number(_1144_num, writer);
        return _1145_wr;
      } else if (_source71.is_Object) {
        Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> _1146___mcc_h4 = _source71.dtor_obj;
        Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> _1147_obj = _1146___mcc_h4;
        Std.JSON.Utils.Views.Writers._IWriter__ _1148_wr = Std.JSON.ZeroCopy.Serializer.__default.Object(_1147_obj, writer);
        return _1148_wr;
      } else {
        Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> _1149___mcc_h5 = _source71.dtor_arr;
        Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> _1150_arr = _1149___mcc_h5;
        Std.JSON.Utils.Views.Writers._IWriter__ _1151_wr = Std.JSON.ZeroCopy.Serializer.__default.Array(_1150_arr, writer);
        return _1151_wr;
      }
    }
    public static Std.JSON.Utils.Views.Writers._IWriter__ String(Std.JSON.Grammar._Ijstring str, Std.JSON.Utils.Views.Writers._IWriter__ writer) {
      return (((writer).Append((str).dtor_lq)).Append((str).dtor_contents)).Append((str).dtor_rq);
    }
    public static Std.JSON.Utils.Views.Writers._IWriter__ Number(Std.JSON.Grammar._Ijnumber num, Std.JSON.Utils.Views.Writers._IWriter__ writer) {
      Std.JSON.Utils.Views.Writers._IWriter__ _1152_wr1 = ((writer).Append((num).dtor_minus)).Append((num).dtor_num);
      Std.JSON.Utils.Views.Writers._IWriter__ _1153_wr2 = ((((num).dtor_frac).is_NonEmpty) ? (((_1152_wr1).Append((((num).dtor_frac).dtor_t).dtor_period)).Append((((num).dtor_frac).dtor_t).dtor_num)) : (_1152_wr1));
      Std.JSON.Utils.Views.Writers._IWriter__ _1154_wr3 = ((((num).dtor_exp).is_NonEmpty) ? ((((_1153_wr2).Append((((num).dtor_exp).dtor_t).dtor_e)).Append((((num).dtor_exp).dtor_t).dtor_sign)).Append((((num).dtor_exp).dtor_t).dtor_num)) : (_1153_wr2));
      Std.JSON.Utils.Views.Writers._IWriter__ _1155_wr = _1154_wr3;
      return _1155_wr;
    }
    public static Std.JSON.Utils.Views.Writers._IWriter__ StructuralView(Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__> st, Std.JSON.Utils.Views.Writers._IWriter__ writer) {
      return (((writer).Append((st).dtor_before)).Append((st).dtor_t)).Append((st).dtor_after);
    }
    public static Std.JSON.Utils.Views.Writers._IWriter__ Object(Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> obj, Std.JSON.Utils.Views.Writers._IWriter__ writer) {
      Std.JSON.Utils.Views.Writers._IWriter__ _1156_wr = Std.JSON.ZeroCopy.Serializer.__default.StructuralView((obj).dtor_l, writer);
      Std.JSON.Utils.Views.Writers._IWriter__ _1157_wr = Std.JSON.ZeroCopy.Serializer.__default.Members(obj, _1156_wr);
      Std.JSON.Utils.Views.Writers._IWriter__ _1158_wr = Std.JSON.ZeroCopy.Serializer.__default.StructuralView((obj).dtor_r, _1157_wr);
      return _1158_wr;
    }
    public static Std.JSON.Utils.Views.Writers._IWriter__ Array(Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> arr, Std.JSON.Utils.Views.Writers._IWriter__ writer) {
      Std.JSON.Utils.Views.Writers._IWriter__ _1159_wr = Std.JSON.ZeroCopy.Serializer.__default.StructuralView((arr).dtor_l, writer);
      Std.JSON.Utils.Views.Writers._IWriter__ _1160_wr = Std.JSON.ZeroCopy.Serializer.__default.Items(arr, _1159_wr);
      Std.JSON.Utils.Views.Writers._IWriter__ _1161_wr = Std.JSON.ZeroCopy.Serializer.__default.StructuralView((arr).dtor_r, _1160_wr);
      return _1161_wr;
    }
    public static Std.JSON.Utils.Views.Writers._IWriter__ Members(Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> obj, Std.JSON.Utils.Views.Writers._IWriter__ writer) {
      Std.JSON.Utils.Views.Writers._IWriter__ wr = Std.JSON.Utils.Views.Writers.Writer.Default();
      Std.JSON.Utils.Views.Writers._IWriter__ _out17;
      _out17 = Std.JSON.ZeroCopy.Serializer.__default.MembersImpl(obj, writer);
      wr = _out17;
      return wr;
    }
    public static Std.JSON.Utils.Views.Writers._IWriter__ Items(Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> arr, Std.JSON.Utils.Views.Writers._IWriter__ writer) {
      Std.JSON.Utils.Views.Writers._IWriter__ wr = Std.JSON.Utils.Views.Writers.Writer.Default();
      Std.JSON.Utils.Views.Writers._IWriter__ _out18;
      _out18 = Std.JSON.ZeroCopy.Serializer.__default.ItemsImpl(arr, writer);
      wr = _out18;
      return wr;
    }
    public static Std.JSON.Utils.Views.Writers._IWriter__ MembersImpl(Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> obj, Std.JSON.Utils.Views.Writers._IWriter__ writer) {
      Std.JSON.Utils.Views.Writers._IWriter__ wr = Std.JSON.Utils.Views.Writers.Writer.Default();
      wr = writer;
      Dafny.ISequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__>> _1162_members;
      _1162_members = (obj).dtor_data;
      BigInteger _hi6 = new BigInteger((_1162_members).Count);
      for (BigInteger _1163_i = BigInteger.Zero; _1163_i < _hi6; _1163_i++) {
        wr = Std.JSON.ZeroCopy.Serializer.__default.Member((_1162_members).Select(_1163_i), wr);
      }
      return wr;
    }
    public static Std.JSON.Utils.Views.Writers._IWriter__ ItemsImpl(Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> arr, Std.JSON.Utils.Views.Writers._IWriter__ writer) {
      Std.JSON.Utils.Views.Writers._IWriter__ wr = Std.JSON.Utils.Views.Writers.Writer.Default();
      wr = writer;
      Dafny.ISequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__>> _1164_items;
      _1164_items = (arr).dtor_data;
      BigInteger _hi7 = new BigInteger((_1164_items).Count);
      for (BigInteger _1165_i = BigInteger.Zero; _1165_i < _hi7; _1165_i++) {
        wr = Std.JSON.ZeroCopy.Serializer.__default.Item((_1164_items).Select(_1165_i), wr);
      }
      return wr;
    }
    public static Std.JSON.Utils.Views.Writers._IWriter__ Member(Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__> m, Std.JSON.Utils.Views.Writers._IWriter__ writer) {
      Std.JSON.Utils.Views.Writers._IWriter__ _1166_wr = Std.JSON.ZeroCopy.Serializer.__default.String(((m).dtor_t).dtor_k, writer);
      Std.JSON.Utils.Views.Writers._IWriter__ _1167_wr = Std.JSON.ZeroCopy.Serializer.__default.StructuralView(((m).dtor_t).dtor_colon, _1166_wr);
      Std.JSON.Utils.Views.Writers._IWriter__ _1168_wr = Std.JSON.ZeroCopy.Serializer.__default.Value(((m).dtor_t).dtor_v, _1167_wr);
      Std.JSON.Utils.Views.Writers._IWriter__ _1169_wr = ((((m).dtor_suffix).is_Empty) ? (_1168_wr) : (Std.JSON.ZeroCopy.Serializer.__default.StructuralView(((m).dtor_suffix).dtor_t, _1168_wr)));
      return _1169_wr;
    }
    public static Std.JSON.Utils.Views.Writers._IWriter__ Item(Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__> m, Std.JSON.Utils.Views.Writers._IWriter__ writer) {
      Std.JSON.Utils.Views.Writers._IWriter__ _1170_wr = Std.JSON.ZeroCopy.Serializer.__default.Value((m).dtor_t, writer);
      Std.JSON.Utils.Views.Writers._IWriter__ _1171_wr = ((((m).dtor_suffix).is_Empty) ? (_1170_wr) : (Std.JSON.ZeroCopy.Serializer.__default.StructuralView(((m).dtor_suffix).dtor_t, _1170_wr)));
      return _1171_wr;
    }
  }
} // end of namespace Std.JSON.ZeroCopy.Serializer
namespace Std.JSON.ZeroCopy.Deserializer.Core {

  public partial class __default {
    public static Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> Get(Std.JSON.Utils.Cursors._ICursor__ cs, Std.JSON.Errors._IDeserializationError err) {
      Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1172_valueOrError0 = (cs).Get<Std.JSON.Errors._IDeserializationError>(err);
      if ((_1172_valueOrError0).IsFailure()) {
        return (_1172_valueOrError0).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>>();
      } else {
        Std.JSON.Utils.Cursors._ICursor__ _1173_cs = (_1172_valueOrError0).Extract();
        return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Success((_1173_cs).Split());
      }
    }
    public static Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__> WS(Std.JSON.Utils.Cursors._ICursor__ cs) {
      Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__> sp = Std.JSON.Utils.Cursors.Split<Std.JSON.Utils.Views.Core._IView__>.Default(Std.JSON.Grammar.jblanks.Default());
      uint _1174_point_k;
      _1174_point_k = (cs).dtor_point;
      uint _1175_end;
      _1175_end = (cs).dtor_end;
      while (((_1174_point_k) < (_1175_end)) && (Std.JSON.Grammar.__default.Blank_q(((cs).dtor_s).Select(_1174_point_k)))) {
        _1174_point_k = (_1174_point_k) + (1U);
      }
      sp = (Std.JSON.Utils.Cursors.Cursor__.create((cs).dtor_s, (cs).dtor_beg, _1174_point_k, (cs).dtor_end)).Split();
      return sp;
      return sp;
    }
    public static Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<__T>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> Structural<__T>(Std.JSON.Utils.Cursors._ICursor__ cs, Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<__T>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>> parser) {
      Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__> _let_tmp_rhs25 = Std.JSON.ZeroCopy.Deserializer.Core.__default.WS(cs);
      Std.JSON.Utils.Views.Core._IView__ _1176_before = _let_tmp_rhs25.dtor_t;
      Std.JSON.Utils.Cursors._ICursor__ _1177_cs = _let_tmp_rhs25.dtor_cs;
      Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<__T>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1178_valueOrError0 = Dafny.Helpers.Id<Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<__T>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>>>((parser))(_1177_cs);
      if ((_1178_valueOrError0).IsFailure()) {
        return (_1178_valueOrError0).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<__T>>>();
      } else {
        Std.JSON.Utils.Cursors._ISplit<__T> _let_tmp_rhs26 = (_1178_valueOrError0).Extract();
        __T _1179_val = _let_tmp_rhs26.dtor_t;
        Std.JSON.Utils.Cursors._ICursor__ _1180_cs = _let_tmp_rhs26.dtor_cs;
        Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__> _let_tmp_rhs27 = Std.JSON.ZeroCopy.Deserializer.Core.__default.WS(_1180_cs);
        Std.JSON.Utils.Views.Core._IView__ _1181_after = _let_tmp_rhs27.dtor_t;
        Std.JSON.Utils.Cursors._ICursor__ _1182_cs = _let_tmp_rhs27.dtor_cs;
        return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<__T>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Success(Std.JSON.Utils.Cursors.Split<Std.JSON.Grammar._IStructural<__T>>.create(Std.JSON.Grammar.Structural<__T>.create(_1176_before, _1179_val, _1181_after), _1182_cs));
      }
    }
    public static Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>> TryStructural(Std.JSON.Utils.Cursors._ICursor__ cs) {
      Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__> _let_tmp_rhs28 = Std.JSON.ZeroCopy.Deserializer.Core.__default.WS(cs);
      Std.JSON.Utils.Views.Core._IView__ _1183_before = _let_tmp_rhs28.dtor_t;
      Std.JSON.Utils.Cursors._ICursor__ _1184_cs = _let_tmp_rhs28.dtor_cs;
      Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__> _let_tmp_rhs29 = ((_1184_cs).SkipByte()).Split();
      Std.JSON.Utils.Views.Core._IView__ _1185_val = _let_tmp_rhs29.dtor_t;
      Std.JSON.Utils.Cursors._ICursor__ _1186_cs = _let_tmp_rhs29.dtor_cs;
      Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__> _let_tmp_rhs30 = Std.JSON.ZeroCopy.Deserializer.Core.__default.WS(_1186_cs);
      Std.JSON.Utils.Views.Core._IView__ _1187_after = _let_tmp_rhs30.dtor_t;
      Std.JSON.Utils.Cursors._ICursor__ _1188_cs = _let_tmp_rhs30.dtor_cs;
      return Std.JSON.Utils.Cursors.Split<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>>.create(Std.JSON.Grammar.Structural<Std.JSON.Utils.Views.Core._IView__>.create(_1183_before, _1185_val, _1187_after), _1188_cs);
    }
    public static Func<Std.JSON.Utils.Views.Core._IView__, Dafny.ISequence<byte>> SpecView {
      get {
        return ((System.Func<Std.JSON.Utils.Views.Core._IView__, Dafny.ISequence<byte>>)((_1189_v) => {
          return Std.JSON.ConcreteSyntax.Spec.__default.View(_1189_v);
        }));
      }
    }
  }

  public partial class jopt {
    private static readonly Std.JSON.Utils.Views.Core._IView__ Witness = Std.JSON.Utils.Views.Core.View__.OfBytes(Dafny.Sequence<byte>.FromElements());
    public static Std.JSON.Utils.Views.Core._IView__ Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__>(Std.JSON.ZeroCopy.Deserializer.Core.jopt.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class ValueParser {
    private static readonly Dafny.TypeDescriptor<Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>>> _TYPE = new Dafny.TypeDescriptor<Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>>>(Std.JSON.Utils.Parsers.SubParser<Std.JSON.Grammar._IValue, Std.JSON.Errors._IDeserializationError>.Default());
    public static Dafny.TypeDescriptor<Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>>> _TypeDescriptor() {
      return _TYPE;
    }
  }
} // end of namespace Std.JSON.ZeroCopy.Deserializer.Core
namespace Std.JSON.ZeroCopy.Deserializer.Strings {

  public partial class __default {
    public static Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> StringBody(Std.JSON.Utils.Cursors._ICursor__ cs) {
      Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> pr = Std.Wrappers.Result<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.Default(Std.JSON.Utils.Cursors.Cursor.Default());
      bool _1190_escaped;
      _1190_escaped = false;
      uint _hi8 = (cs).dtor_end;
      for (uint _1191_point_k = (cs).dtor_point; _1191_point_k < _hi8; _1191_point_k++) {
        byte _1192_byte;
        _1192_byte = ((cs).dtor_s).Select(_1191_point_k);
        if (((_1192_byte) == ((byte)((new Dafny.Rune('\"')).Value))) && (!(_1190_escaped))) {
          pr = Std.Wrappers.Result<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Success(Std.JSON.Utils.Cursors.Cursor__.create((cs).dtor_s, (cs).dtor_beg, _1191_point_k, (cs).dtor_end));
          return pr;
        } else if ((_1192_byte) == ((byte)((new Dafny.Rune('\\')).Value))) {
          _1190_escaped = !(_1190_escaped);
        } else {
          _1190_escaped = false;
        }
      }
      pr = Std.Wrappers.Result<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Failure(Std.JSON.Utils.Cursors.CursorError<Std.JSON.Errors._IDeserializationError>.create_EOF());
      return pr;
      return pr;
    }
    public static Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> Quote(Std.JSON.Utils.Cursors._ICursor__ cs) {
      Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1193_valueOrError0 = (cs).AssertChar<Std.JSON.Errors._IDeserializationError>(new Dafny.Rune('\"'));
      if ((_1193_valueOrError0).IsFailure()) {
        return (_1193_valueOrError0).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>>();
      } else {
        Std.JSON.Utils.Cursors._ICursor__ _1194_cs = (_1193_valueOrError0).Extract();
        return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Success((_1194_cs).Split());
      }
    }
    public static Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._Ijstring>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> String(Std.JSON.Utils.Cursors._ICursor__ cs) {
      Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1195_valueOrError0 = Std.JSON.ZeroCopy.Deserializer.Strings.__default.Quote(cs);
      if ((_1195_valueOrError0).IsFailure()) {
        return (_1195_valueOrError0).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._Ijstring>>();
      } else {
        Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__> _let_tmp_rhs31 = (_1195_valueOrError0).Extract();
        Std.JSON.Utils.Views.Core._IView__ _1196_lq = _let_tmp_rhs31.dtor_t;
        Std.JSON.Utils.Cursors._ICursor__ _1197_cs = _let_tmp_rhs31.dtor_cs;
        Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1198_valueOrError1 = Std.JSON.ZeroCopy.Deserializer.Strings.__default.StringBody(_1197_cs);
        if ((_1198_valueOrError1).IsFailure()) {
          return (_1198_valueOrError1).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._Ijstring>>();
        } else {
          Std.JSON.Utils.Cursors._ICursor__ _1199_contents = (_1198_valueOrError1).Extract();
          Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__> _let_tmp_rhs32 = (_1199_contents).Split();
          Std.JSON.Utils.Views.Core._IView__ _1200_contents = _let_tmp_rhs32.dtor_t;
          Std.JSON.Utils.Cursors._ICursor__ _1201_cs = _let_tmp_rhs32.dtor_cs;
          Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1202_valueOrError2 = Std.JSON.ZeroCopy.Deserializer.Strings.__default.Quote(_1201_cs);
          if ((_1202_valueOrError2).IsFailure()) {
            return (_1202_valueOrError2).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._Ijstring>>();
          } else {
            Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__> _let_tmp_rhs33 = (_1202_valueOrError2).Extract();
            Std.JSON.Utils.Views.Core._IView__ _1203_rq = _let_tmp_rhs33.dtor_t;
            Std.JSON.Utils.Cursors._ICursor__ _1204_cs = _let_tmp_rhs33.dtor_cs;
            return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._Ijstring>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Success(Std.JSON.Utils.Cursors.Split<Std.JSON.Grammar._Ijstring>.create(Std.JSON.Grammar.jstring.create(_1196_lq, _1200_contents, _1203_rq), _1204_cs));
          }
        }
      }
    }
  }
} // end of namespace Std.JSON.ZeroCopy.Deserializer.Strings
namespace Std.JSON.ZeroCopy.Deserializer.Numbers {

  public partial class __default {
    public static Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__> Digits(Std.JSON.Utils.Cursors._ICursor__ cs) {
      return ((cs).SkipWhile(Std.JSON.Grammar.__default.Digit_q)).Split();
    }
    public static Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> NonEmptyDigits(Std.JSON.Utils.Cursors._ICursor__ cs) {
      Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__> _1205_sp = Std.JSON.ZeroCopy.Deserializer.Numbers.__default.Digits(cs);
      if (((_1205_sp).dtor_t).Empty_q) {
        return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Failure(Std.JSON.Utils.Cursors.CursorError<Std.JSON.Errors._IDeserializationError>.create_OtherError(Std.JSON.Errors.DeserializationError.create_EmptyNumber()));
      } else {
        return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Success(_1205_sp);
      }
    }
    public static Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> NonZeroInt(Std.JSON.Utils.Cursors._ICursor__ cs) {
      return Std.JSON.ZeroCopy.Deserializer.Numbers.__default.NonEmptyDigits(cs);
    }
    public static Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__> OptionalMinus(Std.JSON.Utils.Cursors._ICursor__ cs) {
      return ((cs).SkipIf(((System.Func<byte, bool>)((_1206_c) => {
        return (_1206_c) == ((byte)((new Dafny.Rune('-')).Value));
      })))).Split();
    }
    public static Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__> OptionalSign(Std.JSON.Utils.Cursors._ICursor__ cs) {
      return ((cs).SkipIf(((System.Func<byte, bool>)((_1207_c) => {
        return ((_1207_c) == ((byte)((new Dafny.Rune('-')).Value))) || ((_1207_c) == ((byte)((new Dafny.Rune('+')).Value)));
      })))).Split();
    }
    public static Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> TrimmedInt(Std.JSON.Utils.Cursors._ICursor__ cs) {
      Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__> _1208_sp = ((cs).SkipIf(((System.Func<byte, bool>)((_1209_c) => {
        return (_1209_c) == ((byte)((new Dafny.Rune('0')).Value));
      })))).Split();
      if (((_1208_sp).dtor_t).Empty_q) {
        return Std.JSON.ZeroCopy.Deserializer.Numbers.__default.NonZeroInt((_1208_sp).dtor_cs);
      } else {
        return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Success(_1208_sp);
      }
    }
    public static Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijexp>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> Exp(Std.JSON.Utils.Cursors._ICursor__ cs) {
      Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__> _let_tmp_rhs34 = ((cs).SkipIf(((System.Func<byte, bool>)((_1210_c) => {
        return ((_1210_c) == ((byte)((new Dafny.Rune('e')).Value))) || ((_1210_c) == ((byte)((new Dafny.Rune('E')).Value)));
      })))).Split();
      Std.JSON.Utils.Views.Core._IView__ _1211_e = _let_tmp_rhs34.dtor_t;
      Std.JSON.Utils.Cursors._ICursor__ _1212_cs = _let_tmp_rhs34.dtor_cs;
      if ((_1211_e).Empty_q) {
        return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijexp>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Success(Std.JSON.Utils.Cursors.Split<Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijexp>>.create(Std.JSON.Grammar.Maybe<Std.JSON.Grammar._Ijexp>.create_Empty(), _1212_cs));
      } else {
        Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__> _let_tmp_rhs35 = Std.JSON.ZeroCopy.Deserializer.Numbers.__default.OptionalSign(_1212_cs);
        Std.JSON.Utils.Views.Core._IView__ _1213_sign = _let_tmp_rhs35.dtor_t;
        Std.JSON.Utils.Cursors._ICursor__ _1214_cs = _let_tmp_rhs35.dtor_cs;
        Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1215_valueOrError0 = Std.JSON.ZeroCopy.Deserializer.Numbers.__default.NonEmptyDigits(_1214_cs);
        if ((_1215_valueOrError0).IsFailure()) {
          return (_1215_valueOrError0).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijexp>>>();
        } else {
          Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__> _let_tmp_rhs36 = (_1215_valueOrError0).Extract();
          Std.JSON.Utils.Views.Core._IView__ _1216_num = _let_tmp_rhs36.dtor_t;
          Std.JSON.Utils.Cursors._ICursor__ _1217_cs = _let_tmp_rhs36.dtor_cs;
          return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijexp>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Success(Std.JSON.Utils.Cursors.Split<Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijexp>>.create(Std.JSON.Grammar.Maybe<Std.JSON.Grammar._Ijexp>.create_NonEmpty(Std.JSON.Grammar.jexp.create(_1211_e, _1213_sign, _1216_num)), _1217_cs));
        }
      }
    }
    public static Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijfrac>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> Frac(Std.JSON.Utils.Cursors._ICursor__ cs) {
      Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__> _let_tmp_rhs37 = ((cs).SkipIf(((System.Func<byte, bool>)((_1218_c) => {
        return (_1218_c) == ((byte)((new Dafny.Rune('.')).Value));
      })))).Split();
      Std.JSON.Utils.Views.Core._IView__ _1219_period = _let_tmp_rhs37.dtor_t;
      Std.JSON.Utils.Cursors._ICursor__ _1220_cs = _let_tmp_rhs37.dtor_cs;
      if ((_1219_period).Empty_q) {
        return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijfrac>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Success(Std.JSON.Utils.Cursors.Split<Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijfrac>>.create(Std.JSON.Grammar.Maybe<Std.JSON.Grammar._Ijfrac>.create_Empty(), _1220_cs));
      } else {
        Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1221_valueOrError0 = Std.JSON.ZeroCopy.Deserializer.Numbers.__default.NonEmptyDigits(_1220_cs);
        if ((_1221_valueOrError0).IsFailure()) {
          return (_1221_valueOrError0).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijfrac>>>();
        } else {
          Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__> _let_tmp_rhs38 = (_1221_valueOrError0).Extract();
          Std.JSON.Utils.Views.Core._IView__ _1222_num = _let_tmp_rhs38.dtor_t;
          Std.JSON.Utils.Cursors._ICursor__ _1223_cs = _let_tmp_rhs38.dtor_cs;
          return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijfrac>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Success(Std.JSON.Utils.Cursors.Split<Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijfrac>>.create(Std.JSON.Grammar.Maybe<Std.JSON.Grammar._Ijfrac>.create_NonEmpty(Std.JSON.Grammar.jfrac.create(_1219_period, _1222_num)), _1223_cs));
        }
      }
    }
    public static Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._Ijnumber> NumberFromParts(Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__> minus, Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__> num, Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijfrac>> frac, Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijexp>> exp) {
      Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._Ijnumber> _1224_sp = Std.JSON.Utils.Cursors.Split<Std.JSON.Grammar._Ijnumber>.create(Std.JSON.Grammar.jnumber.create((minus).dtor_t, (num).dtor_t, (frac).dtor_t, (exp).dtor_t), (exp).dtor_cs);
      return _1224_sp;
    }
    public static Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._Ijnumber>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> Number(Std.JSON.Utils.Cursors._ICursor__ cs) {
      Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__> _1225_minus = Std.JSON.ZeroCopy.Deserializer.Numbers.__default.OptionalMinus(cs);
      Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1226_valueOrError0 = Std.JSON.ZeroCopy.Deserializer.Numbers.__default.TrimmedInt((_1225_minus).dtor_cs);
      if ((_1226_valueOrError0).IsFailure()) {
        return (_1226_valueOrError0).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._Ijnumber>>();
      } else {
        Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__> _1227_num = (_1226_valueOrError0).Extract();
        Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijfrac>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1228_valueOrError1 = Std.JSON.ZeroCopy.Deserializer.Numbers.__default.Frac((_1227_num).dtor_cs);
        if ((_1228_valueOrError1).IsFailure()) {
          return (_1228_valueOrError1).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._Ijnumber>>();
        } else {
          Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijfrac>> _1229_frac = (_1228_valueOrError1).Extract();
          Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijexp>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1230_valueOrError2 = Std.JSON.ZeroCopy.Deserializer.Numbers.__default.Exp((_1229_frac).dtor_cs);
          if ((_1230_valueOrError2).IsFailure()) {
            return (_1230_valueOrError2).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._Ijnumber>>();
          } else {
            Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IMaybe<Std.JSON.Grammar._Ijexp>> _1231_exp = (_1230_valueOrError2).Extract();
            return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._Ijnumber>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Success(Std.JSON.ZeroCopy.Deserializer.Numbers.__default.NumberFromParts(_1225_minus, _1227_num, _1229_frac, _1231_exp));
          }
        }
      }
    }
  }
} // end of namespace Std.JSON.ZeroCopy.Deserializer.Numbers
namespace Std.JSON.ZeroCopy.Deserializer.ObjectParams {

  public partial class __default {
    public static Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> Colon(Std.JSON.Utils.Cursors._ICursor__ cs) {
      Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1232_valueOrError0 = (cs).AssertChar<Std.JSON.Errors._IDeserializationError>(new Dafny.Rune(':'));
      if ((_1232_valueOrError0).IsFailure()) {
        return (_1232_valueOrError0).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>>();
      } else {
        Std.JSON.Utils.Cursors._ICursor__ _1233_cs = (_1232_valueOrError0).Extract();
        return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Success((_1233_cs).Split());
      }
    }
    public static Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IjKeyValue> KeyValueFromParts(Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._Ijstring> k, Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>> colon, Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue> v) {
      Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IjKeyValue> _1234_sp = Std.JSON.Utils.Cursors.Split<Std.JSON.Grammar._IjKeyValue>.create(Std.JSON.Grammar.jKeyValue.create((k).dtor_t, (colon).dtor_t, (v).dtor_t), (v).dtor_cs);
      return _1234_sp;
    }
    public static Dafny.ISequence<byte> ElementSpec(Std.JSON.Grammar._IjKeyValue t) {
      return Std.JSON.ConcreteSyntax.Spec.__default.KeyValue(t);
    }
    public static Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IjKeyValue>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> Element(Std.JSON.Utils.Cursors._ICursor__ cs, Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>> json) {
      Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._Ijstring>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1235_valueOrError0 = Std.JSON.ZeroCopy.Deserializer.Strings.__default.String(cs);
      if ((_1235_valueOrError0).IsFailure()) {
        return (_1235_valueOrError0).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IjKeyValue>>();
      } else {
        Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._Ijstring> _1236_k = (_1235_valueOrError0).Extract();
        Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>> _1237_p = Std.JSON.ZeroCopy.Deserializer.ObjectParams.__default.Colon;
        Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1238_valueOrError1 = Std.JSON.ZeroCopy.Deserializer.Core.__default.Structural<Std.JSON.Utils.Views.Core._IView__>((_1236_k).dtor_cs, _1237_p);
        if ((_1238_valueOrError1).IsFailure()) {
          return (_1238_valueOrError1).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IjKeyValue>>();
        } else {
          Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>> _1239_colon = (_1238_valueOrError1).Extract();
          Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1240_valueOrError2 = Dafny.Helpers.Id<Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>>>((json))((_1239_colon).dtor_cs);
          if ((_1240_valueOrError2).IsFailure()) {
            return (_1240_valueOrError2).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IjKeyValue>>();
          } else {
            Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue> _1241_v = (_1240_valueOrError2).Extract();
            Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IjKeyValue> _1242_kv = Std.JSON.ZeroCopy.Deserializer.ObjectParams.__default.KeyValueFromParts(_1236_k, _1239_colon, _1241_v);
            return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IjKeyValue>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Success(_1242_kv);
          }
        }
      }
    }
    public static byte OPEN {
      get {
        return (byte)((new Dafny.Rune('{')).Value);
      }
    }
    public static byte CLOSE {
      get {
        return (byte)((new Dafny.Rune('}')).Value);
      }
    }
  }
} // end of namespace Std.JSON.ZeroCopy.Deserializer.ObjectParams
namespace Std.JSON.ZeroCopy.Deserializer.Objects {

  public partial class __default {
    public static Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> Object(Std.JSON.Utils.Cursors._ICursor__ cs, Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>> json) {
      Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1243_valueOrError0 = Std.JSON.ZeroCopy.Deserializer.Objects.__default.Bracketed(cs, json);
      if ((_1243_valueOrError0).IsFailure()) {
        return (_1243_valueOrError0).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>>>();
      } else {
        Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>> _1244_sp = (_1243_valueOrError0).Extract();
        return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Success(_1244_sp);
      }
    }
    public static Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> Open(Std.JSON.Utils.Cursors._ICursor__ cs) {
      Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1245_valueOrError0 = (cs).AssertByte<Std.JSON.Errors._IDeserializationError>(Std.JSON.ZeroCopy.Deserializer.ObjectParams.__default.OPEN);
      if ((_1245_valueOrError0).IsFailure()) {
        return (_1245_valueOrError0).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>>();
      } else {
        Std.JSON.Utils.Cursors._ICursor__ _1246_cs = (_1245_valueOrError0).Extract();
        return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Success((_1246_cs).Split());
      }
    }
    public static Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> Close(Std.JSON.Utils.Cursors._ICursor__ cs) {
      Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1247_valueOrError0 = (cs).AssertByte<Std.JSON.Errors._IDeserializationError>(Std.JSON.ZeroCopy.Deserializer.ObjectParams.__default.CLOSE);
      if ((_1247_valueOrError0).IsFailure()) {
        return (_1247_valueOrError0).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>>();
      } else {
        Std.JSON.Utils.Cursors._ICursor__ _1248_cs = (_1247_valueOrError0).Extract();
        return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Success((_1248_cs).Split());
      }
    }
    public static Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>> BracketedFromParts(Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>> open, Std.JSON.Utils.Cursors._ISplit<Dafny.ISequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__>>> elems, Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>> close) {
      Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>> _1249_sp = Std.JSON.Utils.Cursors.Split<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>>.create(Std.JSON.Grammar.Bracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>.create((open).dtor_t, (elems).dtor_t, (close).dtor_t), (close).dtor_cs);
      return _1249_sp;
    }
    public static Std.JSON.Utils.Cursors._ISplit<Dafny.ISequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__>>> AppendWithSuffix(Std.JSON.Utils.Cursors._ISplit<Dafny.ISequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__>>> elems, Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IjKeyValue> elem, Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>> sep) {
      Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__> _1250_suffixed = Std.JSON.Grammar.Suffixed<Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__>.create((elem).dtor_t, Std.JSON.Grammar.Maybe<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>>.create_NonEmpty((sep).dtor_t));
      Std.JSON.Utils.Cursors._ISplit<Dafny.ISequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__>>> _1251_elems_k = Std.JSON.Utils.Cursors.Split<Dafny.ISequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__>>>.create(Dafny.Sequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__>>.Concat((elems).dtor_t, Dafny.Sequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__>>.FromElements(_1250_suffixed)), (sep).dtor_cs);
      return _1251_elems_k;
    }
    public static Std.JSON.Utils.Cursors._ISplit<Dafny.ISequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__>>> AppendLast(Std.JSON.Utils.Cursors._ISplit<Dafny.ISequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__>>> elems, Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IjKeyValue> elem, Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>> sep) {
      Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__> _1252_suffixed = Std.JSON.Grammar.Suffixed<Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__>.create((elem).dtor_t, Std.JSON.Grammar.Maybe<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>>.create_Empty());
      Std.JSON.Utils.Cursors._ISplit<Dafny.ISequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__>>> _1253_elems_k = Std.JSON.Utils.Cursors.Split<Dafny.ISequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__>>>.create(Dafny.Sequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__>>.Concat((elems).dtor_t, Dafny.Sequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__>>.FromElements(_1252_suffixed)), (elem).dtor_cs);
      return _1253_elems_k;
    }
    public static Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> Elements(Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>> json, Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>> open, Std.JSON.Utils.Cursors._ISplit<Dafny.ISequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__>>> elems) {
    TAIL_CALL_START:;
      Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IjKeyValue>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1254_valueOrError0 = Std.JSON.ZeroCopy.Deserializer.ObjectParams.__default.Element((elems).dtor_cs, json);
      if ((_1254_valueOrError0).IsFailure()) {
        return (_1254_valueOrError0).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>>>();
      } else {
        Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IjKeyValue> _1255_elem = (_1254_valueOrError0).Extract();
        if (((_1255_elem).dtor_cs).EOF_q) {
          return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Failure(Std.JSON.Utils.Cursors.CursorError<Std.JSON.Errors._IDeserializationError>.create_EOF());
        } else {
          Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>> _1256_sep = Std.JSON.ZeroCopy.Deserializer.Core.__default.TryStructural((_1255_elem).dtor_cs);
          short _1257_s0 = (((_1256_sep).dtor_t).dtor_t).Peek();
          if (((_1257_s0) == ((short)(Std.JSON.ZeroCopy.Deserializer.Objects.__default.SEPARATOR))) && (((((_1256_sep).dtor_t).dtor_t).Length()) == (1U))) {
            Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>> _1258_sep = _1256_sep;
            Std.JSON.Utils.Cursors._ISplit<Dafny.ISequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__>>> _1259_elems = Std.JSON.ZeroCopy.Deserializer.Objects.__default.AppendWithSuffix(elems, _1255_elem, _1258_sep);
            Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>> _in106 = json;
            Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>> _in107 = open;
            Std.JSON.Utils.Cursors._ISplit<Dafny.ISequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__>>> _in108 = _1259_elems;
            json = _in106;
            open = _in107;
            elems = _in108;
            goto TAIL_CALL_START;
          } else if (((_1257_s0) == ((short)(Std.JSON.ZeroCopy.Deserializer.ObjectParams.__default.CLOSE))) && (((((_1256_sep).dtor_t).dtor_t).Length()) == (1U))) {
            Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>> _1260_sep = _1256_sep;
            Std.JSON.Utils.Cursors._ISplit<Dafny.ISequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__>>> _1261_elems_k = Std.JSON.ZeroCopy.Deserializer.Objects.__default.AppendLast(elems, _1255_elem, _1260_sep);
            Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>> _1262_bracketed = Std.JSON.ZeroCopy.Deserializer.Objects.__default.BracketedFromParts(open, _1261_elems_k, _1260_sep);
            return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Success(_1262_bracketed);
          } else {
            byte _1263_separator = Std.JSON.ZeroCopy.Deserializer.Objects.__default.SEPARATOR;
            Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1264_pr = Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Failure(Std.JSON.Utils.Cursors.CursorError<Std.JSON.Errors._IDeserializationError>.create_ExpectingAnyByte(Dafny.Sequence<byte>.FromElements(Std.JSON.ZeroCopy.Deserializer.ObjectParams.__default.CLOSE, _1263_separator), _1257_s0));
            return _1264_pr;
          }
        }
      }
    }
    public static Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> Bracketed(Std.JSON.Utils.Cursors._ICursor__ cs, Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>> json) {
      Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1265_valueOrError0 = Std.JSON.ZeroCopy.Deserializer.Core.__default.Structural<Std.JSON.Utils.Views.Core._IView__>(cs, Std.JSON.ZeroCopy.Deserializer.Objects.__default.Open);
      if ((_1265_valueOrError0).IsFailure()) {
        return (_1265_valueOrError0).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>>>();
      } else {
        Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>> _1266_open = (_1265_valueOrError0).Extract();
        Std.JSON.Utils.Cursors._ISplit<Dafny.ISequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__>>> _1267_elems = Std.JSON.Utils.Cursors.Split<Dafny.ISequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__>>>.create(Dafny.Sequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__>>.FromElements(), (_1266_open).dtor_cs);
        if ((((_1266_open).dtor_cs).Peek()) == ((short)(Std.JSON.ZeroCopy.Deserializer.ObjectParams.__default.CLOSE))) {
          Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>> _1268_p = Std.JSON.ZeroCopy.Deserializer.Objects.__default.Close;
          Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1269_valueOrError1 = Std.JSON.ZeroCopy.Deserializer.Core.__default.Structural<Std.JSON.Utils.Views.Core._IView__>((_1266_open).dtor_cs, _1268_p);
          if ((_1269_valueOrError1).IsFailure()) {
            return (_1269_valueOrError1).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>>>();
          } else {
            Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>> _1270_close = (_1269_valueOrError1).Extract();
            return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Success(Std.JSON.ZeroCopy.Deserializer.Objects.__default.BracketedFromParts(_1266_open, _1267_elems, _1270_close));
          }
        } else {
          return Std.JSON.ZeroCopy.Deserializer.Objects.__default.Elements(json, _1266_open, _1267_elems);
        }
      }
    }
    public static Func<Std.JSON.Utils.Views.Core._IView__, Dafny.ISequence<byte>> SpecViewOpen {
      get {
        return Std.JSON.ZeroCopy.Deserializer.Core.__default.SpecView;
      }
    }
    public static Func<Std.JSON.Utils.Views.Core._IView__, Dafny.ISequence<byte>> SpecViewClose {
      get {
        return Std.JSON.ZeroCopy.Deserializer.Core.__default.SpecView;
      }
    }
    public static byte SEPARATOR {
      get {
        return (byte)((new Dafny.Rune(',')).Value);
      }
    }
  }

  public partial class jopen {
    private static readonly Std.JSON.Utils.Views.Core._IView__ Witness = Std.JSON.Utils.Views.Core.View__.OfBytes(Dafny.Sequence<byte>.FromElements(Std.JSON.ZeroCopy.Deserializer.ObjectParams.__default.OPEN));
    public static Std.JSON.Utils.Views.Core._IView__ Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__>(Std.JSON.ZeroCopy.Deserializer.Objects.jopen.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class jclose {
    private static readonly Std.JSON.Utils.Views.Core._IView__ Witness = Std.JSON.Utils.Views.Core.View__.OfBytes(Dafny.Sequence<byte>.FromElements(Std.JSON.ZeroCopy.Deserializer.ObjectParams.__default.CLOSE));
    public static Std.JSON.Utils.Views.Core._IView__ Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__>(Std.JSON.ZeroCopy.Deserializer.Objects.jclose.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TypeDescriptor() {
      return _TYPE;
    }
  }
} // end of namespace Std.JSON.ZeroCopy.Deserializer.Objects
namespace Std.JSON.ZeroCopy.Deserializer.ArrayParams {

  public partial class __default {
    public static Dafny.ISequence<byte> ElementSpec(Std.JSON.Grammar._IValue t) {
      return Std.JSON.ConcreteSyntax.Spec.__default.Value(t);
    }
    public static Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> Element(Std.JSON.Utils.Cursors._ICursor__ cs, Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>> json) {
      return Dafny.Helpers.Id<Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>>>((json))(cs);
    }
    public static byte OPEN {
      get {
        return (byte)((new Dafny.Rune('[')).Value);
      }
    }
    public static byte CLOSE {
      get {
        return (byte)((new Dafny.Rune(']')).Value);
      }
    }
  }
} // end of namespace Std.JSON.ZeroCopy.Deserializer.ArrayParams
namespace Std.JSON.ZeroCopy.Deserializer.Arrays {

  public partial class __default {
    public static Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> Array(Std.JSON.Utils.Cursors._ICursor__ cs, Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>> json) {
      Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1271_valueOrError0 = Std.JSON.ZeroCopy.Deserializer.Arrays.__default.Bracketed(cs, json);
      if ((_1271_valueOrError0).IsFailure()) {
        return (_1271_valueOrError0).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>>>();
      } else {
        Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>> _1272_sp = (_1271_valueOrError0).Extract();
        return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Success(_1272_sp);
      }
    }
    public static Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> Open(Std.JSON.Utils.Cursors._ICursor__ cs) {
      Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1273_valueOrError0 = (cs).AssertByte<Std.JSON.Errors._IDeserializationError>(Std.JSON.ZeroCopy.Deserializer.ArrayParams.__default.OPEN);
      if ((_1273_valueOrError0).IsFailure()) {
        return (_1273_valueOrError0).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>>();
      } else {
        Std.JSON.Utils.Cursors._ICursor__ _1274_cs = (_1273_valueOrError0).Extract();
        return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Success((_1274_cs).Split());
      }
    }
    public static Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> Close(Std.JSON.Utils.Cursors._ICursor__ cs) {
      Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1275_valueOrError0 = (cs).AssertByte<Std.JSON.Errors._IDeserializationError>(Std.JSON.ZeroCopy.Deserializer.ArrayParams.__default.CLOSE);
      if ((_1275_valueOrError0).IsFailure()) {
        return (_1275_valueOrError0).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>>();
      } else {
        Std.JSON.Utils.Cursors._ICursor__ _1276_cs = (_1275_valueOrError0).Extract();
        return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Success((_1276_cs).Split());
      }
    }
    public static Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>> BracketedFromParts(Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>> open, Std.JSON.Utils.Cursors._ISplit<Dafny.ISequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__>>> elems, Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>> close) {
      Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>> _1277_sp = Std.JSON.Utils.Cursors.Split<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>>.create(Std.JSON.Grammar.Bracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>.create((open).dtor_t, (elems).dtor_t, (close).dtor_t), (close).dtor_cs);
      return _1277_sp;
    }
    public static Std.JSON.Utils.Cursors._ISplit<Dafny.ISequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__>>> AppendWithSuffix(Std.JSON.Utils.Cursors._ISplit<Dafny.ISequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__>>> elems, Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue> elem, Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>> sep) {
      Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__> _1278_suffixed = Std.JSON.Grammar.Suffixed<Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__>.create((elem).dtor_t, Std.JSON.Grammar.Maybe<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>>.create_NonEmpty((sep).dtor_t));
      Std.JSON.Utils.Cursors._ISplit<Dafny.ISequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__>>> _1279_elems_k = Std.JSON.Utils.Cursors.Split<Dafny.ISequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__>>>.create(Dafny.Sequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__>>.Concat((elems).dtor_t, Dafny.Sequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__>>.FromElements(_1278_suffixed)), (sep).dtor_cs);
      return _1279_elems_k;
    }
    public static Std.JSON.Utils.Cursors._ISplit<Dafny.ISequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__>>> AppendLast(Std.JSON.Utils.Cursors._ISplit<Dafny.ISequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__>>> elems, Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue> elem, Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>> sep) {
      Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__> _1280_suffixed = Std.JSON.Grammar.Suffixed<Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__>.create((elem).dtor_t, Std.JSON.Grammar.Maybe<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>>.create_Empty());
      Std.JSON.Utils.Cursors._ISplit<Dafny.ISequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__>>> _1281_elems_k = Std.JSON.Utils.Cursors.Split<Dafny.ISequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__>>>.create(Dafny.Sequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__>>.Concat((elems).dtor_t, Dafny.Sequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__>>.FromElements(_1280_suffixed)), (elem).dtor_cs);
      return _1281_elems_k;
    }
    public static Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> Elements(Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>> json, Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>> open, Std.JSON.Utils.Cursors._ISplit<Dafny.ISequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__>>> elems) {
    TAIL_CALL_START:;
      Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1282_valueOrError0 = Std.JSON.ZeroCopy.Deserializer.ArrayParams.__default.Element((elems).dtor_cs, json);
      if ((_1282_valueOrError0).IsFailure()) {
        return (_1282_valueOrError0).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>>>();
      } else {
        Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue> _1283_elem = (_1282_valueOrError0).Extract();
        if (((_1283_elem).dtor_cs).EOF_q) {
          return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Failure(Std.JSON.Utils.Cursors.CursorError<Std.JSON.Errors._IDeserializationError>.create_EOF());
        } else {
          Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>> _1284_sep = Std.JSON.ZeroCopy.Deserializer.Core.__default.TryStructural((_1283_elem).dtor_cs);
          short _1285_s0 = (((_1284_sep).dtor_t).dtor_t).Peek();
          if (((_1285_s0) == ((short)(Std.JSON.ZeroCopy.Deserializer.Arrays.__default.SEPARATOR))) && (((((_1284_sep).dtor_t).dtor_t).Length()) == (1U))) {
            Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>> _1286_sep = _1284_sep;
            Std.JSON.Utils.Cursors._ISplit<Dafny.ISequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__>>> _1287_elems = Std.JSON.ZeroCopy.Deserializer.Arrays.__default.AppendWithSuffix(elems, _1283_elem, _1286_sep);
            Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>> _in109 = json;
            Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>> _in110 = open;
            Std.JSON.Utils.Cursors._ISplit<Dafny.ISequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__>>> _in111 = _1287_elems;
            json = _in109;
            open = _in110;
            elems = _in111;
            goto TAIL_CALL_START;
          } else if (((_1285_s0) == ((short)(Std.JSON.ZeroCopy.Deserializer.ArrayParams.__default.CLOSE))) && (((((_1284_sep).dtor_t).dtor_t).Length()) == (1U))) {
            Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>> _1288_sep = _1284_sep;
            Std.JSON.Utils.Cursors._ISplit<Dafny.ISequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__>>> _1289_elems_k = Std.JSON.ZeroCopy.Deserializer.Arrays.__default.AppendLast(elems, _1283_elem, _1288_sep);
            Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>> _1290_bracketed = Std.JSON.ZeroCopy.Deserializer.Arrays.__default.BracketedFromParts(open, _1289_elems_k, _1288_sep);
            return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Success(_1290_bracketed);
          } else {
            byte _1291_separator = Std.JSON.ZeroCopy.Deserializer.Arrays.__default.SEPARATOR;
            Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1292_pr = Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Failure(Std.JSON.Utils.Cursors.CursorError<Std.JSON.Errors._IDeserializationError>.create_ExpectingAnyByte(Dafny.Sequence<byte>.FromElements(Std.JSON.ZeroCopy.Deserializer.ArrayParams.__default.CLOSE, _1291_separator), _1285_s0));
            return _1292_pr;
          }
        }
      }
    }
    public static Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> Bracketed(Std.JSON.Utils.Cursors._ICursor__ cs, Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>> json) {
      Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1293_valueOrError0 = Std.JSON.ZeroCopy.Deserializer.Core.__default.Structural<Std.JSON.Utils.Views.Core._IView__>(cs, Std.JSON.ZeroCopy.Deserializer.Arrays.__default.Open);
      if ((_1293_valueOrError0).IsFailure()) {
        return (_1293_valueOrError0).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>>>();
      } else {
        Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>> _1294_open = (_1293_valueOrError0).Extract();
        Std.JSON.Utils.Cursors._ISplit<Dafny.ISequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__>>> _1295_elems = Std.JSON.Utils.Cursors.Split<Dafny.ISequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__>>>.create(Dafny.Sequence<Std.JSON.Grammar._ISuffixed<Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__>>.FromElements(), (_1294_open).dtor_cs);
        if ((((_1294_open).dtor_cs).Peek()) == ((short)(Std.JSON.ZeroCopy.Deserializer.ArrayParams.__default.CLOSE))) {
          Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>> _1296_p = Std.JSON.ZeroCopy.Deserializer.Arrays.__default.Close;
          Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1297_valueOrError1 = Std.JSON.ZeroCopy.Deserializer.Core.__default.Structural<Std.JSON.Utils.Views.Core._IView__>((_1294_open).dtor_cs, _1296_p);
          if ((_1297_valueOrError1).IsFailure()) {
            return (_1297_valueOrError1).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>>>();
          } else {
            Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<Std.JSON.Utils.Views.Core._IView__>> _1298_close = (_1297_valueOrError1).Extract();
            return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Success(Std.JSON.ZeroCopy.Deserializer.Arrays.__default.BracketedFromParts(_1294_open, _1295_elems, _1298_close));
          }
        } else {
          return Std.JSON.ZeroCopy.Deserializer.Arrays.__default.Elements(json, _1294_open, _1295_elems);
        }
      }
    }
    public static Func<Std.JSON.Utils.Views.Core._IView__, Dafny.ISequence<byte>> SpecViewOpen {
      get {
        return Std.JSON.ZeroCopy.Deserializer.Core.__default.SpecView;
      }
    }
    public static Func<Std.JSON.Utils.Views.Core._IView__, Dafny.ISequence<byte>> SpecViewClose {
      get {
        return Std.JSON.ZeroCopy.Deserializer.Core.__default.SpecView;
      }
    }
    public static byte SEPARATOR {
      get {
        return (byte)((new Dafny.Rune(',')).Value);
      }
    }
  }

  public partial class jopen {
    private static readonly Std.JSON.Utils.Views.Core._IView__ Witness = Std.JSON.Utils.Views.Core.View__.OfBytes(Dafny.Sequence<byte>.FromElements(Std.JSON.ZeroCopy.Deserializer.ArrayParams.__default.OPEN));
    public static Std.JSON.Utils.Views.Core._IView__ Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__>(Std.JSON.ZeroCopy.Deserializer.Arrays.jopen.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class jclose {
    private static readonly Std.JSON.Utils.Views.Core._IView__ Witness = Std.JSON.Utils.Views.Core.View__.OfBytes(Dafny.Sequence<byte>.FromElements(Std.JSON.ZeroCopy.Deserializer.ArrayParams.__default.CLOSE));
    public static Std.JSON.Utils.Views.Core._IView__ Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TYPE = new Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__>(Std.JSON.ZeroCopy.Deserializer.Arrays.jclose.Default());
    public static Dafny.TypeDescriptor<Std.JSON.Utils.Views.Core._IView__> _TypeDescriptor() {
      return _TYPE;
    }
  }
} // end of namespace Std.JSON.ZeroCopy.Deserializer.Arrays
namespace Std.JSON.ZeroCopy.Deserializer.Constants {

  public partial class __default {
    public static Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> Constant(Std.JSON.Utils.Cursors._ICursor__ cs, Dafny.ISequence<byte> expected) {
      Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ICursor__, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1299_valueOrError0 = (cs).AssertBytes<Std.JSON.Errors._IDeserializationError>(expected, 0U);
      if ((_1299_valueOrError0).IsFailure()) {
        return (_1299_valueOrError0).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>>();
      } else {
        Std.JSON.Utils.Cursors._ICursor__ _1300_cs = (_1299_valueOrError0).Extract();
        return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Success((_1300_cs).Split());
      }
    }
  }
} // end of namespace Std.JSON.ZeroCopy.Deserializer.Constants
namespace Std.JSON.ZeroCopy.Deserializer.Values {

  public partial class __default {
    public static Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> Value(Std.JSON.Utils.Cursors._ICursor__ cs) {
      short _1301_c = (cs).Peek();
      if ((_1301_c) == ((short)((new Dafny.Rune('{')).Value))) {
        Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1302_valueOrError0 = Std.JSON.ZeroCopy.Deserializer.Objects.__default.Object(cs, Std.JSON.ZeroCopy.Deserializer.Values.__default.ValueParser(cs));
        if ((_1302_valueOrError0).IsFailure()) {
          return (_1302_valueOrError0).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>>();
        } else {
          Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>> _let_tmp_rhs39 = (_1302_valueOrError0).Extract();
          Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IjKeyValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> _1303_obj = _let_tmp_rhs39.dtor_t;
          Std.JSON.Utils.Cursors._ICursor__ _1304_cs_k = _let_tmp_rhs39.dtor_cs;
          Std.JSON.Grammar._IValue _1305_v = Std.JSON.Grammar.Value.create_Object(_1303_obj);
          Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue> _1306_sp = Std.JSON.Utils.Cursors.Split<Std.JSON.Grammar._IValue>.create(_1305_v, _1304_cs_k);
          return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Success(_1306_sp);
        }
      } else if ((_1301_c) == ((short)((new Dafny.Rune('[')).Value))) {
        Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1307_valueOrError1 = Std.JSON.ZeroCopy.Deserializer.Arrays.__default.Array(cs, Std.JSON.ZeroCopy.Deserializer.Values.__default.ValueParser(cs));
        if ((_1307_valueOrError1).IsFailure()) {
          return (_1307_valueOrError1).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>>();
        } else {
          Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__>> _let_tmp_rhs40 = (_1307_valueOrError1).Extract();
          Std.JSON.Grammar._IBracketed<Std.JSON.Utils.Views.Core._IView__, Std.JSON.Grammar._IValue, Std.JSON.Utils.Views.Core._IView__, Std.JSON.Utils.Views.Core._IView__> _1308_arr = _let_tmp_rhs40.dtor_t;
          Std.JSON.Utils.Cursors._ICursor__ _1309_cs_k = _let_tmp_rhs40.dtor_cs;
          Std.JSON.Grammar._IValue _1310_v = Std.JSON.Grammar.Value.create_Array(_1308_arr);
          Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue> _1311_sp = Std.JSON.Utils.Cursors.Split<Std.JSON.Grammar._IValue>.create(_1310_v, _1309_cs_k);
          return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Success(_1311_sp);
        }
      } else if ((_1301_c) == ((short)((new Dafny.Rune('\"')).Value))) {
        Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._Ijstring>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1312_valueOrError2 = Std.JSON.ZeroCopy.Deserializer.Strings.__default.String(cs);
        if ((_1312_valueOrError2).IsFailure()) {
          return (_1312_valueOrError2).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>>();
        } else {
          Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._Ijstring> _let_tmp_rhs41 = (_1312_valueOrError2).Extract();
          Std.JSON.Grammar._Ijstring _1313_str = _let_tmp_rhs41.dtor_t;
          Std.JSON.Utils.Cursors._ICursor__ _1314_cs_k = _let_tmp_rhs41.dtor_cs;
          return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Success(Std.JSON.Utils.Cursors.Split<Std.JSON.Grammar._IValue>.create(Std.JSON.Grammar.Value.create_String(_1313_str), _1314_cs_k));
        }
      } else if ((_1301_c) == ((short)((new Dafny.Rune('t')).Value))) {
        Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1315_valueOrError3 = Std.JSON.ZeroCopy.Deserializer.Constants.__default.Constant(cs, Std.JSON.Grammar.__default.TRUE);
        if ((_1315_valueOrError3).IsFailure()) {
          return (_1315_valueOrError3).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>>();
        } else {
          Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__> _let_tmp_rhs42 = (_1315_valueOrError3).Extract();
          Std.JSON.Utils.Views.Core._IView__ _1316_cst = _let_tmp_rhs42.dtor_t;
          Std.JSON.Utils.Cursors._ICursor__ _1317_cs_k = _let_tmp_rhs42.dtor_cs;
          return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Success(Std.JSON.Utils.Cursors.Split<Std.JSON.Grammar._IValue>.create(Std.JSON.Grammar.Value.create_Bool(_1316_cst), _1317_cs_k));
        }
      } else if ((_1301_c) == ((short)((new Dafny.Rune('f')).Value))) {
        Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1318_valueOrError4 = Std.JSON.ZeroCopy.Deserializer.Constants.__default.Constant(cs, Std.JSON.Grammar.__default.FALSE);
        if ((_1318_valueOrError4).IsFailure()) {
          return (_1318_valueOrError4).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>>();
        } else {
          Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__> _let_tmp_rhs43 = (_1318_valueOrError4).Extract();
          Std.JSON.Utils.Views.Core._IView__ _1319_cst = _let_tmp_rhs43.dtor_t;
          Std.JSON.Utils.Cursors._ICursor__ _1320_cs_k = _let_tmp_rhs43.dtor_cs;
          return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Success(Std.JSON.Utils.Cursors.Split<Std.JSON.Grammar._IValue>.create(Std.JSON.Grammar.Value.create_Bool(_1319_cst), _1320_cs_k));
        }
      } else if ((_1301_c) == ((short)((new Dafny.Rune('n')).Value))) {
        Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1321_valueOrError5 = Std.JSON.ZeroCopy.Deserializer.Constants.__default.Constant(cs, Std.JSON.Grammar.__default.NULL);
        if ((_1321_valueOrError5).IsFailure()) {
          return (_1321_valueOrError5).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>>();
        } else {
          Std.JSON.Utils.Cursors._ISplit<Std.JSON.Utils.Views.Core._IView__> _let_tmp_rhs44 = (_1321_valueOrError5).Extract();
          Std.JSON.Utils.Views.Core._IView__ _1322_cst = _let_tmp_rhs44.dtor_t;
          Std.JSON.Utils.Cursors._ICursor__ _1323_cs_k = _let_tmp_rhs44.dtor_cs;
          return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Success(Std.JSON.Utils.Cursors.Split<Std.JSON.Grammar._IValue>.create(Std.JSON.Grammar.Value.create_Null(_1322_cst), _1323_cs_k));
        }
      } else {
        Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._Ijnumber>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>> _1324_valueOrError6 = Std.JSON.ZeroCopy.Deserializer.Numbers.__default.Number(cs);
        if ((_1324_valueOrError6).IsFailure()) {
          return (_1324_valueOrError6).PropagateFailure<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>>();
        } else {
          Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._Ijnumber> _let_tmp_rhs45 = (_1324_valueOrError6).Extract();
          Std.JSON.Grammar._Ijnumber _1325_num = _let_tmp_rhs45.dtor_t;
          Std.JSON.Utils.Cursors._ICursor__ _1326_cs_k = _let_tmp_rhs45.dtor_cs;
          Std.JSON.Grammar._IValue _1327_v = Std.JSON.Grammar.Value.create_Number(_1325_num);
          Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue> _1328_sp = Std.JSON.Utils.Cursors.Split<Std.JSON.Grammar._IValue>.create(_1327_v, _1326_cs_k);
          return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.create_Success(_1328_sp);
        }
      }
    }
    public static Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>> ValueParser(Std.JSON.Utils.Cursors._ICursor__ cs) {
      Func<Std.JSON.Utils.Cursors._ICursor__, bool> _1329_pre = Dafny.Helpers.Id<Func<Std.JSON.Utils.Cursors._ICursor__, Func<Std.JSON.Utils.Cursors._ICursor__, bool>>>((_1330_cs) => ((System.Func<Std.JSON.Utils.Cursors._ICursor__, bool>)((_1331_ps_k) => {
        return ((_1331_ps_k).Length()) < ((_1330_cs).Length());
      })))(cs);
      Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>> _1332_fn = Dafny.Helpers.Id<Func<Func<Std.JSON.Utils.Cursors._ICursor__, bool>, Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>>>>((_1333_pre) => ((System.Func<Std.JSON.Utils.Cursors._ICursor__, Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IValue>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>>)((_1334_ps_k) => {
        return Std.JSON.ZeroCopy.Deserializer.Values.__default.Value(_1334_ps_k);
      })))(_1329_pre);
      return _1332_fn;
    }
  }
} // end of namespace Std.JSON.ZeroCopy.Deserializer.Values
namespace Std.JSON.ZeroCopy.Deserializer.API {

  public partial class __default {
    public static Std.JSON.Errors._IDeserializationError LiftCursorError(Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError> err) {
      Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError> _source72 = err;
      if (_source72.is_EOF) {
        return Std.JSON.Errors.DeserializationError.create_ReachedEOF();
      } else if (_source72.is_ExpectingByte) {
        byte _1335___mcc_h0 = _source72.dtor_expected;
        short _1336___mcc_h1 = _source72.dtor_b;
        short _1337_b = _1336___mcc_h1;
        byte _1338_expected = _1335___mcc_h0;
        return Std.JSON.Errors.DeserializationError.create_ExpectingByte(_1338_expected, _1337_b);
      } else if (_source72.is_ExpectingAnyByte) {
        Dafny.ISequence<byte> _1339___mcc_h2 = _source72.dtor_expected__sq;
        short _1340___mcc_h3 = _source72.dtor_b;
        short _1341_b = _1340___mcc_h3;
        Dafny.ISequence<byte> _1342_expected__sq = _1339___mcc_h2;
        return Std.JSON.Errors.DeserializationError.create_ExpectingAnyByte(_1342_expected__sq, _1341_b);
      } else {
        Std.JSON.Errors._IDeserializationError _1343___mcc_h4 = _source72.dtor_err;
        Std.JSON.Errors._IDeserializationError _1344_err = _1343___mcc_h4;
        return _1344_err;
      }
    }
    public static Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue>>, Std.JSON.Errors._IDeserializationError> JSON(Std.JSON.Utils.Cursors._ICursor__ cs) {
      return Std.Wrappers.Result<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue>>, Std.JSON.Utils.Cursors._ICursorError<Std.JSON.Errors._IDeserializationError>>.MapFailure<Std.JSON.Errors._IDeserializationError>(Std.JSON.ZeroCopy.Deserializer.Core.__default.Structural<Std.JSON.Grammar._IValue>(cs, Std.JSON.ZeroCopy.Deserializer.Values.__default.Value), Std.JSON.ZeroCopy.Deserializer.API.__default.LiftCursorError);
    }
    public static Std.Wrappers._IResult<Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue>, Std.JSON.Errors._IDeserializationError> Text(Std.JSON.Utils.Views.Core._IView__ v) {
      Std.Wrappers._IResult<Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue>>, Std.JSON.Errors._IDeserializationError> _1345_valueOrError0 = Std.JSON.ZeroCopy.Deserializer.API.__default.JSON(Std.JSON.Utils.Cursors.Cursor__.OfView(v));
      if ((_1345_valueOrError0).IsFailure()) {
        return (_1345_valueOrError0).PropagateFailure<Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue>>();
      } else {
        Std.JSON.Utils.Cursors._ISplit<Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue>> _let_tmp_rhs46 = (_1345_valueOrError0).Extract();
        Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue> _1346_text = _let_tmp_rhs46.dtor_t;
        Std.JSON.Utils.Cursors._ICursor__ _1347_cs = _let_tmp_rhs46.dtor_cs;
        Std.Wrappers._IOutcomeResult<Std.JSON.Errors._IDeserializationError> _1348_valueOrError1 = Std.Wrappers.__default.Need<Std.JSON.Errors._IDeserializationError>((_1347_cs).EOF_q, Std.JSON.Errors.DeserializationError.create_ExpectingEOF());
        if ((_1348_valueOrError1).IsFailure()) {
          return (_1348_valueOrError1).PropagateFailure<Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue>>();
        } else {
          return Std.Wrappers.Result<Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue>, Std.JSON.Errors._IDeserializationError>.create_Success(_1346_text);
        }
      }
    }
    public static Std.Wrappers._IResult<Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue>, Std.JSON.Errors._IDeserializationError> OfBytes(Dafny.ISequence<byte> bs) {
      Std.Wrappers._IOutcomeResult<Std.JSON.Errors._IDeserializationError> _1349_valueOrError0 = Std.Wrappers.__default.Need<Std.JSON.Errors._IDeserializationError>((new BigInteger((bs).Count)) < (Std.BoundedInts.__default.TWO__TO__THE__32), Std.JSON.Errors.DeserializationError.create_IntOverflow());
      if ((_1349_valueOrError0).IsFailure()) {
        return (_1349_valueOrError0).PropagateFailure<Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue>>();
      } else {
        return Std.JSON.ZeroCopy.Deserializer.API.__default.Text(Std.JSON.Utils.Views.Core.View__.OfBytes(bs));
      }
    }
  }
} // end of namespace Std.JSON.ZeroCopy.Deserializer.API
namespace Std.JSON.ZeroCopy.Deserializer {

} // end of namespace Std.JSON.ZeroCopy.Deserializer
namespace Std.JSON.ZeroCopy.API {

  public partial class __default {
    public static Std.Wrappers._IResult<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError> Serialize(Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue> js) {
      return Std.Wrappers.Result<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError>.create_Success((Std.JSON.ZeroCopy.Serializer.__default.Text(js)).Bytes());
    }
    public static Std.Wrappers._IResult<byte[], Std.JSON.Errors._ISerializationError> SerializeAlloc(Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue> js) {
      Std.Wrappers._IResult<byte[], Std.JSON.Errors._ISerializationError> bs = Std.Wrappers.Result<byte[], Std.JSON.Errors._ISerializationError>.Default(new byte[0]);
      Std.Wrappers._IResult<byte[], Std.JSON.Errors._ISerializationError> _out19;
      _out19 = Std.JSON.ZeroCopy.Serializer.__default.Serialize(js);
      bs = _out19;
      return bs;
    }
    public static Std.Wrappers._IResult<uint, Std.JSON.Errors._ISerializationError> SerializeInto(Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue> js, byte[] bs) {
      Std.Wrappers._IResult<uint, Std.JSON.Errors._ISerializationError> len = Std.Wrappers.Result<uint, Std.JSON.Errors._ISerializationError>.Default(0);
      Std.Wrappers._IResult<uint, Std.JSON.Errors._ISerializationError> _out20;
      _out20 = Std.JSON.ZeroCopy.Serializer.__default.SerializeTo(js, bs);
      len = _out20;
      return len;
    }
    public static Std.Wrappers._IResult<Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue>, Std.JSON.Errors._IDeserializationError> Deserialize(Dafny.ISequence<byte> bs) {
      return Std.JSON.ZeroCopy.Deserializer.API.__default.OfBytes(bs);
    }
  }
} // end of namespace Std.JSON.ZeroCopy.API
namespace Std.JSON.ZeroCopy {

} // end of namespace Std.JSON.ZeroCopy
namespace Std.JSON.API {

  public partial class __default {
    public static Std.Wrappers._IResult<Dafny.ISequence<byte>, Std.JSON.Errors._ISerializationError> Serialize(Std.JSON.Values._IJSON js) {
      Std.Wrappers._IResult<Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue>, Std.JSON.Errors._ISerializationError> _1350_valueOrError0 = Std.JSON.Serializer.__default.JSON(js);
      if ((_1350_valueOrError0).IsFailure()) {
        return (_1350_valueOrError0).PropagateFailure<Dafny.ISequence<byte>>();
      } else {
        Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue> _1351_js = (_1350_valueOrError0).Extract();
        return Std.JSON.ZeroCopy.API.__default.Serialize(_1351_js);
      }
    }
    public static Std.Wrappers._IResult<byte[], Std.JSON.Errors._ISerializationError> SerializeAlloc(Std.JSON.Values._IJSON js) {
      Std.Wrappers._IResult<byte[], Std.JSON.Errors._ISerializationError> bs = Std.Wrappers.Result<byte[], Std.JSON.Errors._ISerializationError>.Default(new byte[0]);
      Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue> _1352_js;
      Std.Wrappers._IResult<Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue>, Std.JSON.Errors._ISerializationError> _1353_valueOrError0 = Std.Wrappers.Result<Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue>, Std.JSON.Errors._ISerializationError>.Default(Std.JSON.Grammar.Structural<Std.JSON.Grammar._IValue>.Default(Std.JSON.Grammar.Value.Default()));
      _1353_valueOrError0 = Std.JSON.Serializer.__default.JSON(js);
      if ((_1353_valueOrError0).IsFailure()) {
        bs = (_1353_valueOrError0).PropagateFailure<byte[]>();
        return bs;
      }
      _1352_js = (_1353_valueOrError0).Extract();
      Std.Wrappers._IResult<byte[], Std.JSON.Errors._ISerializationError> _out21;
      _out21 = Std.JSON.ZeroCopy.API.__default.SerializeAlloc(_1352_js);
      bs = _out21;
      return bs;
    }
    public static Std.Wrappers._IResult<uint, Std.JSON.Errors._ISerializationError> SerializeInto(Std.JSON.Values._IJSON js, byte[] bs) {
      Std.Wrappers._IResult<uint, Std.JSON.Errors._ISerializationError> len = Std.Wrappers.Result<uint, Std.JSON.Errors._ISerializationError>.Default(0);
      Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue> _1354_js;
      Std.Wrappers._IResult<Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue>, Std.JSON.Errors._ISerializationError> _1355_valueOrError0 = Std.Wrappers.Result<Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue>, Std.JSON.Errors._ISerializationError>.Default(Std.JSON.Grammar.Structural<Std.JSON.Grammar._IValue>.Default(Std.JSON.Grammar.Value.Default()));
      _1355_valueOrError0 = Std.JSON.Serializer.__default.JSON(js);
      if ((_1355_valueOrError0).IsFailure()) {
        len = (_1355_valueOrError0).PropagateFailure<uint>();
        return len;
      }
      _1354_js = (_1355_valueOrError0).Extract();
      Std.Wrappers._IResult<uint, Std.JSON.Errors._ISerializationError> _out22;
      _out22 = Std.JSON.ZeroCopy.API.__default.SerializeInto(_1354_js, bs);
      len = _out22;
      return len;
    }
    public static Std.Wrappers._IResult<Std.JSON.Values._IJSON, Std.JSON.Errors._IDeserializationError> Deserialize(Dafny.ISequence<byte> bs) {
      Std.Wrappers._IResult<Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue>, Std.JSON.Errors._IDeserializationError> _1356_valueOrError0 = Std.JSON.ZeroCopy.API.__default.Deserialize(bs);
      if ((_1356_valueOrError0).IsFailure()) {
        return (_1356_valueOrError0).PropagateFailure<Std.JSON.Values._IJSON>();
      } else {
        Std.JSON.Grammar._IStructural<Std.JSON.Grammar._IValue> _1357_js = (_1356_valueOrError0).Extract();
        return Std.JSON.Deserializer.__default.JSON(_1357_js);
      }
    }
  }
} // end of namespace Std.JSON.API
namespace Std.JSON {

} // end of namespace Std.JSON

namespace ResolvedDesugaredExecutableDafnyPlugin {


  public partial class COMP {
    public COMP() {
    }
    public static DAM.Syntax._IPos PolarizePos(DAST._IType t) {
      DAM.Syntax._IPos p = DAM.Syntax.Pos.Default();
      DAST._IType _source73 = t;
      if (_source73.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1358___mcc_h0 = _source73.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _1359___mcc_h1 = _source73.dtor_typeArgs;
        DAST._IResolvedType _1360___mcc_h2 = _source73.dtor_resolved;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source73.is_Nullable) {
        DAST._IType _1361___mcc_h6 = _source73.dtor_Nullable_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source73.is_Tuple) {
        Dafny.ISequence<DAST._IType> _1362___mcc_h8 = _source73.dtor_Tuple_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source73.is_Array) {
        DAST._IType _1363___mcc_h10 = _source73.dtor_element;
        BigInteger _1364___mcc_h11 = _source73.dtor_dims;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source73.is_Seq) {
        DAST._IType _1365___mcc_h14 = _source73.dtor_element;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source73.is_Set) {
        DAST._IType _1366___mcc_h16 = _source73.dtor_element;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source73.is_Multiset) {
        DAST._IType _1367___mcc_h18 = _source73.dtor_element;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source73.is_Map) {
        DAST._IType _1368___mcc_h20 = _source73.dtor_key;
        DAST._IType _1369___mcc_h21 = _source73.dtor_value;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source73.is_Arrow) {
        Dafny.ISequence<DAST._IType> _1370___mcc_h24 = _source73.dtor_args;
        DAST._IType _1371___mcc_h25 = _source73.dtor_result;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source73.is_Primitive) {
        DAST._IPrimitive _1372___mcc_h28 = _source73.dtor_Primitive_a0;
        DAST._IPrimitive _source74 = _1372___mcc_h28;
        if (_source74.is_Int) {
          p = DAM.Syntax.Pos.create_Int();
          return p;
        } else if (_source74.is_Real) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          p = DAM.Syntax.Pos.create_Unit();
        } else if (_source74.is_String) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          p = DAM.Syntax.Pos.create_Unit();
        } else if (_source74.is_Bool) {
          p = DAM.Syntax.Pos.create_Bool();
          return p;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          p = DAM.Syntax.Pos.create_Unit();
        }
      } else if (_source73.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _1373___mcc_h30 = _source73.dtor_Passthrough_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else {
        Dafny.ISequence<Dafny.Rune> _1374___mcc_h32 = _source73.dtor_TypeArg_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      }
      return p;
    }
    public static DAM.Syntax._IStmt EmitModule(DAST._IModule m) {
      DAM.Syntax._IStmt s = DAM.Syntax.Stmt.Default();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _1375_members;
      _1375_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.FromElements();
      BigInteger _hi9 = new BigInteger(((m).dtor_body).Count);
      for (BigInteger _1376_i = BigInteger.Zero; _1376_i < _hi9; _1376_i++) {
        DAST._IModuleItem _source75 = ((m).dtor_body).Select(_1376_i);
        if (_source75.is_Module) {
          DAST._IModule _1377___mcc_h0 = _source75.dtor_Module_a0;
          DAST._IModule _1378_m = _1377___mcc_h0;
          DAM.Syntax._IStmt _1379_mod;
          DAM.Syntax._IStmt _out23;
          _out23 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitModule(_1378_m);
          _1379_mod = _out23;
          _1375_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Update(_1375_members, (_1378_m).dtor_name, _1379_mod);
        } else if (_source75.is_Class) {
          DAST._IClass _1380___mcc_h2 = _source75.dtor_Class_a0;
          DAST._IClass _1381_c = _1380___mcc_h2;
          DAM.Syntax._IStmt _1382_cls;
          DAM.Syntax._IStmt _out24;
          _out24 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitClass(_1381_c);
          _1382_cls = _out24;
          _1375_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Update(_1375_members, (_1381_c).dtor_name, _1382_cls);
        } else if (_source75.is_Trait) {
          DAST._ITrait _1383___mcc_h4 = _source75.dtor_Trait_a0;
          goto continue_0;
        } else if (_source75.is_Newtype) {
          DAST._INewtype _1384___mcc_h6 = _source75.dtor_Newtype_a0;
          goto continue_0;
        } else {
          DAST._IDatatype _1385___mcc_h8 = _source75.dtor_Datatype_a0;
          goto continue_0;
        }
      continue_0:;
      }
    after_0:;
      s = DAM.Syntax.Stmt.create_Record(_1375_members);
      return s;
    }
    public static DAM.Syntax._IStmt EmitClass(DAST._IClass c) {
      DAM.Syntax._IStmt s = DAM.Syntax.Stmt.Default();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _1386_fields;
      _1386_fields = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.FromElements();
      BigInteger _hi10 = new BigInteger(((c).dtor_body).Count);
      for (BigInteger _1387_i = BigInteger.Zero; _1387_i < _hi10; _1387_i++) {
        DAST._IMethod _source76 = ((c).dtor_body).Select(_1387_i);
        DAST._IMethod _1388___mcc_h0 = _source76;
        DAST._IMethod _1389_m = _1388___mcc_h0;
        DAM.Syntax._IStmt _1390_meth;
        DAM.Syntax._IStmt _out25;
        _out25 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitMethod(_1389_m);
        _1390_meth = _out25;
        _1386_fields = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Update(_1386_fields, (_1389_m).dtor_name, _1390_meth);
      }
      s = DAM.Syntax.Stmt.create_Record(_1386_fields);
      return s;
    }
    public static DAM.Syntax._IStmt EmitMethod(DAST._IMethod m) {
      DAM.Syntax._IStmt s = DAM.Syntax.Stmt.Default();
      DAM.Syntax._IStmt _1391_body;
      DAM.Syntax._IStmt _out26;
      _out26 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock((m).dtor_body);
      _1391_body = _out26;
      s = DAM.Syntax.Stmt.create_LetCS(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), DAM.Syntax.__default.Command(), _1391_body);
      DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source77 = (m).dtor_outVars;
      if (_source77.is_Some) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1392___mcc_h0 = _source77.dtor_Some_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1393_outs = _1392___mcc_h0;
        {
          BigInteger _hi11 = new BigInteger((_1393_outs).Count);
          for (BigInteger _1394_i = BigInteger.Zero; _1394_i < _hi11; _1394_i++) {
            Dafny.ISequence<Dafny.Rune> _source78 = (_1393_outs).Select(((new BigInteger((_1393_outs).Count)) - (_1394_i)) - (BigInteger.One));
            Dafny.ISequence<Dafny.Rune> _1395___mcc_h1 = _source78;
            Dafny.ISequence<Dafny.Rune> _1396_ret = _1395___mcc_h1;
            if (!((_1394_i) < (new BigInteger(((m).dtor_outTypes).Count)))) {
              throw new Dafny.HaltException("Compilers/ResolvedDesugaredExecutableDafny/Dafny-compiler-fdafny.dfy(90,12): " + Dafny.Sequence<Dafny.Rune>.UnicodeFromString("expectation violation").ToVerbatimString(false));
            }
            DAM.Syntax._IPos _1397_cod;
            DAM.Syntax._IPos _out27;
            _out27 = ResolvedDesugaredExecutableDafnyPlugin.COMP.PolarizePos(((m).dtor_outTypes).Select(_1394_i));
            _1397_cod = _out27;
            s = DAM.Syntax.Stmt.create_Func(_1396_ret, DAM.Syntax.Pos.create_Ref(_1397_cod), s);
          }
        }
      } else {
      }
      BigInteger _hi12 = new BigInteger(((m).dtor_params).Count);
      for (BigInteger _1398_i = BigInteger.Zero; _1398_i < _hi12; _1398_i++) {
        DAST._IFormal _source79 = ((m).dtor_params).Select(((new BigInteger(((m).dtor_params).Count)) - (_1398_i)) - (BigInteger.One));
        Dafny.ISequence<Dafny.Rune> _1399___mcc_h2 = _source79.dtor_name;
        DAST._IType _1400___mcc_h3 = _source79.dtor_typ;
        DAST._IType _1401_dom = _1400___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _1402_arg = _1399___mcc_h2;
        DAM.Syntax._IPos _1403_dom;
        DAM.Syntax._IPos _out28;
        _out28 = ResolvedDesugaredExecutableDafnyPlugin.COMP.PolarizePos(_1401_dom);
        _1403_dom = _out28;
        s = DAM.Syntax.Stmt.create_Func(_1402_arg, DAM.Syntax.Pos.create_Ref(_1403_dom), s);
      }
      return s;
    }
    public static DAM.Syntax._IStmt EmitExpr(DAST._IExpression e) {
      DAM.Syntax._IStmt s = DAM.Syntax.Stmt.Default();
      DAST._IExpression _source80 = e;
      if (_source80.is_Literal) {
        DAST._ILiteral _1404___mcc_h0 = _source80.dtor_Literal_a0;
        DAST._ILiteral _source81 = _1404___mcc_h0;
        if (_source81.is_BoolLiteral) {
          bool _1405___mcc_h2 = _source81.dtor_BoolLiteral_a0;
          bool _1406_b = _1405___mcc_h2;
          s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Bool(_1406_b));
          return s;
        } else if (_source81.is_IntLiteral) {
          Dafny.ISequence<Dafny.Rune> _1407___mcc_h4 = _source81.dtor_IntLiteral_a0;
          DAST._IType _1408___mcc_h5 = _source81.dtor_IntLiteral_a1;
          Dafny.ISequence<Dafny.Rune> _1409_i = _1407___mcc_h4;
          s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Int(BigInteger.Zero));
          return s;
        } else if (_source81.is_DecLiteral) {
          Dafny.ISequence<Dafny.Rune> _1410___mcc_h8 = _source81.dtor_DecLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _1411___mcc_h9 = _source81.dtor_DecLiteral_a1;
          DAST._IType _1412___mcc_h10 = _source81.dtor_DecLiteral_a2;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source81.is_StringLiteral) {
          Dafny.ISequence<Dafny.Rune> _1413___mcc_h14 = _source81.dtor_StringLiteral_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source81.is_CharLiteral) {
          Dafny.Rune _1414___mcc_h16 = _source81.dtor_CharLiteral_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else {
          DAST._IType _1415___mcc_h18 = _source81.dtor_Null_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        }
      } else if (_source80.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _1416___mcc_h20 = _source80.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _1417_v = _1416___mcc_h20;
        s = DAM.Syntax.Stmt.create_Read(DAM.Syntax.Expr.create_Var(_1417_v), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"))));
        return s;
      } else if (_source80.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1418___mcc_h22 = _source80.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1419_path = _1418___mcc_h22;
        if (!((new BigInteger((_1419_path).Count)).Sign == 1)) {
          throw new Dafny.HaltException("Compilers/ResolvedDesugaredExecutableDafny/Dafny-compiler-fdafny.dfy(118,8): " + Dafny.Sequence<Dafny.Rune>.UnicodeFromString("expectation violation").ToVerbatimString(false));
        }
        s = DAM.Syntax.Stmt.create_Force(DAM.Syntax.Expr.create_Var(((_1419_path).Select(BigInteger.Zero))));
        BigInteger _hi13 = new BigInteger((_1419_path).Count);
        for (BigInteger _1420_i = BigInteger.One; _1420_i < _hi13; _1420_i++) {
          s = DAM.Syntax.Stmt.create_Select(s, ((_1419_path).Select(_1420_i)));
        }
      } else if (_source80.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _1421___mcc_h24 = _source80.dtor_Tuple_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source80.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1422___mcc_h26 = _source80.dtor_path;
        Dafny.ISequence<DAST._IType> _1423___mcc_h27 = _source80.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _1424___mcc_h28 = _source80.dtor_args;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source80.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _1425___mcc_h32 = _source80.dtor_dims;
        DAST._IType _1426___mcc_h33 = _source80.dtor_typ;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source80.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1427___mcc_h36 = _source80.dtor_path;
        Dafny.ISequence<DAST._IType> _1428___mcc_h37 = _source80.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _1429___mcc_h38 = _source80.dtor_variant;
        bool _1430___mcc_h39 = _source80.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _1431___mcc_h40 = _source80.dtor_contents;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source80.is_Convert) {
        DAST._IExpression _1432___mcc_h46 = _source80.dtor_value;
        DAST._IType _1433___mcc_h47 = _source80.dtor_from;
        DAST._IType _1434___mcc_h48 = _source80.dtor_typ;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source80.is_SeqConstruct) {
        DAST._IExpression _1435___mcc_h52 = _source80.dtor_length;
        DAST._IExpression _1436___mcc_h53 = _source80.dtor_elem;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source80.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _1437___mcc_h56 = _source80.dtor_elements;
        DAST._IType _1438___mcc_h57 = _source80.dtor_typ;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source80.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _1439___mcc_h60 = _source80.dtor_elements;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source80.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _1440___mcc_h62 = _source80.dtor_mapElems;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source80.is_This) {
        s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this")));
        return s;
      } else if (_source80.is_Ite) {
        DAST._IExpression _1441___mcc_h64 = _source80.dtor_cond;
        DAST._IExpression _1442___mcc_h65 = _source80.dtor_thn;
        DAST._IExpression _1443___mcc_h66 = _source80.dtor_els;
        DAST._IExpression _1444_els = _1443___mcc_h66;
        DAST._IExpression _1445_thn = _1442___mcc_h65;
        DAST._IExpression _1446_cond = _1441___mcc_h64;
        DAM.Syntax._IStmt _1447_cond;
        DAM.Syntax._IStmt _out29;
        _out29 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_1446_cond);
        _1447_cond = _out29;
        DAM.Syntax._IStmt _1448_thn;
        DAM.Syntax._IStmt _out30;
        _out30 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_1445_thn);
        _1448_thn = _out30;
        DAM.Syntax._IStmt _1449_els;
        DAM.Syntax._IStmt _out31;
        _out31 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_1444_els);
        _1449_els = _out31;
        s = DAM.Syntax.Stmt.create_Bind(_1447_cond, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), DAM.Syntax.Stmt.create_Ite(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if")), _1448_thn, _1449_els));
        return s;
      } else if (_source80.is_UnOp) {
        DAST._IUnaryOp _1450___mcc_h70 = _source80.dtor_unOp;
        DAST._IExpression _1451___mcc_h71 = _source80.dtor_expr;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source80.is_BinOp) {
        DAST._IBinOp _1452___mcc_h74 = _source80.dtor_op;
        DAST._IExpression _1453___mcc_h75 = _source80.dtor_left;
        DAST._IExpression _1454___mcc_h76 = _source80.dtor_right;
        DAST._IExpression _1455_rhs = _1454___mcc_h76;
        DAST._IExpression _1456_lhs = _1453___mcc_h75;
        DAST._IBinOp _1457_op = _1452___mcc_h74;
        DAM.Syntax._IStmt _1458_lhs;
        DAM.Syntax._IStmt _out32;
        _out32 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_1456_lhs);
        _1458_lhs = _out32;
        DAM.Syntax._IStmt _1459_rhs;
        DAM.Syntax._IStmt _out33;
        _out33 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_1455_rhs);
        _1459_rhs = _out33;
        DAM.Syntax._IExpr _1460_lvar;
        _1460_lvar = DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var_lhs"));
        DAM.Syntax._IExpr _1461_rvar;
        _1461_rvar = DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var_rhs"));
        DAM.Syntax._IStmt _1462_end = DAM.Syntax.Stmt.Default();
        DAST._IBinOp _source82 = _1457_op;
        if (_source82.is_Eq) {
          bool _1463___mcc_h206 = _source82.dtor_referential;
          bool _1464___mcc_h207 = _source82.dtor_nullable;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _1462_end = DAM.Syntax.__default.Skip();
        } else if (_source82.is_Neq) {
          bool _1465___mcc_h210 = _source82.dtor_referential;
          bool _1466___mcc_h211 = _source82.dtor_nullable;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _1462_end = DAM.Syntax.__default.Skip();
        } else if (_source82.is_Div) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _1462_end = DAM.Syntax.__default.Skip();
        } else if (_source82.is_EuclidianDiv) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _1462_end = DAM.Syntax.__default.Skip();
        } else if (_source82.is_Mod) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _1462_end = DAM.Syntax.__default.Skip();
        } else if (_source82.is_EuclidianMod) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _1462_end = DAM.Syntax.__default.Skip();
        } else if (_source82.is_Implies) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _1462_end = DAM.Syntax.__default.Skip();
        } else if (_source82.is_In) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _1462_end = DAM.Syntax.__default.Skip();
        } else if (_source82.is_NotIn) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _1462_end = DAM.Syntax.__default.Skip();
        } else if (_source82.is_SetDifference) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _1462_end = DAM.Syntax.__default.Skip();
        } else if (_source82.is_Concat) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _1462_end = DAM.Syntax.__default.Skip();
        } else {
          Dafny.ISequence<Dafny.Rune> _1467___mcc_h214 = _source82.dtor_Passthrough_a0;
          if (object.Equals(_1467___mcc_h214, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+"))) {
            _1462_end = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Plus(_1460_lvar, _1461_rvar));
          } else if (object.Equals(_1467___mcc_h214, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"))) {
            _1462_end = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_LT(_1460_lvar, _1461_rvar));
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            _1462_end = DAM.Syntax.__default.Skip();
          }
        }
        s = DAM.Syntax.Stmt.create_Bind(_1458_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var_lhs"), DAM.Syntax.Stmt.create_Bind(_1459_rhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var_rhs"), _1462_end));
        return s;
      } else if (_source80.is_ArrayLen) {
        DAST._IExpression _1468___mcc_h80 = _source80.dtor_expr;
        BigInteger _1469___mcc_h81 = _source80.dtor_dim;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source80.is_Select) {
        DAST._IExpression _1470___mcc_h84 = _source80.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _1471___mcc_h85 = _source80.dtor_field;
        bool _1472___mcc_h86 = _source80.dtor_isConstant;
        bool _1473___mcc_h87 = _source80.dtor_onDatatype;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source80.is_SelectFn) {
        DAST._IExpression _1474___mcc_h92 = _source80.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _1475___mcc_h93 = _source80.dtor_field;
        bool _1476___mcc_h94 = _source80.dtor_onDatatype;
        bool _1477___mcc_h95 = _source80.dtor_isStatic;
        BigInteger _1478___mcc_h96 = _source80.dtor_arity;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source80.is_Index) {
        DAST._IExpression _1479___mcc_h102 = _source80.dtor_expr;
        DAST._ICollKind _1480___mcc_h103 = _source80.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _1481___mcc_h104 = _source80.dtor_indices;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source80.is_IndexRange) {
        DAST._IExpression _1482___mcc_h108 = _source80.dtor_expr;
        bool _1483___mcc_h109 = _source80.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _1484___mcc_h110 = _source80.dtor_low;
        DAST._IOptional<DAST._IExpression> _1485___mcc_h111 = _source80.dtor_high;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source80.is_TupleSelect) {
        DAST._IExpression _1486___mcc_h116 = _source80.dtor_expr;
        BigInteger _1487___mcc_h117 = _source80.dtor_index;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source80.is_Call) {
        DAST._IExpression _1488___mcc_h120 = _source80.dtor_on;
        Dafny.ISequence<Dafny.Rune> _1489___mcc_h121 = _source80.dtor_name;
        Dafny.ISequence<DAST._IType> _1490___mcc_h122 = _source80.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _1491___mcc_h123 = _source80.dtor_args;
        Dafny.ISequence<Dafny.Rune> _source83 = _1489___mcc_h121;
        Dafny.ISequence<Dafny.Rune> _1492___mcc_h128 = _source83;
        Dafny.ISequence<DAST._IExpression> _1493_args = _1491___mcc_h123;
        Dafny.ISequence<Dafny.Rune> _1494_meth = _1492___mcc_h128;
        DAST._IExpression _1495_obj = _1488___mcc_h120;
        DAM.Syntax._IStmt _out34;
        _out34 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_1495_obj);
        s = _out34;
        s = DAM.Syntax.Stmt.create_Select(s, _1494_meth);
        BigInteger _hi14 = new BigInteger((_1493_args).Count);
        for (BigInteger _1496_i = BigInteger.Zero; _1496_i < _hi14; _1496_i++) {
          DAM.Syntax._IStmt _1497_arg;
          DAM.Syntax._IStmt _out35;
          _out35 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr((_1493_args).Select(_1496_i));
          _1497_arg = _out35;
          s = DAM.Syntax.Stmt.create_Bind(_1497_arg, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_New(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_Call(s, DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")))));
        }
      } else if (_source80.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _1498___mcc_h130 = _source80.dtor_params;
        DAST._IType _1499___mcc_h131 = _source80.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _1500___mcc_h132 = _source80.dtor_body;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source80.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _1501___mcc_h136 = _source80.dtor_values;
        DAST._IType _1502___mcc_h137 = _source80.dtor_retType;
        DAST._IExpression _1503___mcc_h138 = _source80.dtor_expr;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source80.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _1504___mcc_h142 = _source80.dtor_name;
        DAST._IType _1505___mcc_h143 = _source80.dtor_typ;
        DAST._IExpression _1506___mcc_h144 = _source80.dtor_value;
        DAST._IExpression _1507___mcc_h145 = _source80.dtor_iifeBody;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source80.is_Apply) {
        DAST._IExpression _1508___mcc_h150 = _source80.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _1509___mcc_h151 = _source80.dtor_args;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source80.is_TypeTest) {
        DAST._IExpression _1510___mcc_h154 = _source80.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1511___mcc_h155 = _source80.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _1512___mcc_h156 = _source80.dtor_variant;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source80.is_InitializationValue) {
        DAST._IType _1513___mcc_h160 = _source80.dtor_typ;
        DAST._IType _source84 = _1513___mcc_h160;
        if (_source84.is_Path) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1514___mcc_h162 = _source84.dtor_Path_a0;
          Dafny.ISequence<DAST._IType> _1515___mcc_h163 = _source84.dtor_typeArgs;
          DAST._IResolvedType _1516___mcc_h164 = _source84.dtor_resolved;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source84.is_Nullable) {
          DAST._IType _1517___mcc_h168 = _source84.dtor_Nullable_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source84.is_Tuple) {
          Dafny.ISequence<DAST._IType> _1518___mcc_h170 = _source84.dtor_Tuple_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source84.is_Array) {
          DAST._IType _1519___mcc_h172 = _source84.dtor_element;
          BigInteger _1520___mcc_h173 = _source84.dtor_dims;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source84.is_Seq) {
          DAST._IType _1521___mcc_h176 = _source84.dtor_element;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source84.is_Set) {
          DAST._IType _1522___mcc_h178 = _source84.dtor_element;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source84.is_Multiset) {
          DAST._IType _1523___mcc_h180 = _source84.dtor_element;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source84.is_Map) {
          DAST._IType _1524___mcc_h182 = _source84.dtor_key;
          DAST._IType _1525___mcc_h183 = _source84.dtor_value;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source84.is_Arrow) {
          Dafny.ISequence<DAST._IType> _1526___mcc_h186 = _source84.dtor_args;
          DAST._IType _1527___mcc_h187 = _source84.dtor_result;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source84.is_Primitive) {
          DAST._IPrimitive _1528___mcc_h190 = _source84.dtor_Primitive_a0;
          DAST._IPrimitive _source85 = _1528___mcc_h190;
          if (_source85.is_Int) {
            s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Int(BigInteger.Zero));
            return s;
          } else if (_source85.is_Real) {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            s = DAM.Syntax.__default.Skip();
          } else if (_source85.is_String) {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            s = DAM.Syntax.__default.Skip();
          } else if (_source85.is_Bool) {
            s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Bool(false));
            return s;
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            s = DAM.Syntax.__default.Skip();
          }
        } else if (_source84.is_Passthrough) {
          Dafny.ISequence<Dafny.Rune> _1529___mcc_h192 = _source84.dtor_Passthrough_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else {
          Dafny.ISequence<Dafny.Rune> _1530___mcc_h194 = _source84.dtor_TypeArg_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        }
      } else if (_source80.is_BoolBoundedPool) {
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source80.is_SetBoundedPool) {
        DAST._IExpression _1531___mcc_h196 = _source80.dtor_of;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source80.is_SeqBoundedPool) {
        DAST._IExpression _1532___mcc_h198 = _source80.dtor_of;
        bool _1533___mcc_h199 = _source80.dtor_includeDuplicates;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else {
        DAST._IExpression _1534___mcc_h202 = _source80.dtor_lo;
        DAST._IExpression _1535___mcc_h203 = _source80.dtor_hi;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      }
      return s;
    }
    public static DAM.Syntax._IStmt EmitBlock(Dafny.ISequence<DAST._IStatement> block) {
      DAM.Syntax._IStmt st = DAM.Syntax.Stmt.Default();
      if ((new BigInteger((block).Count)).Sign != 1) {
        st = DAM.Syntax.__default.Skip();
        return st;
      }
      Dafny.ISequence<DAST._IStatement> _1536_next;
      _1536_next = (block).Drop(BigInteger.One);
      DAST._IStatement _source86 = (block).Select(BigInteger.Zero);
      if (_source86.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _1537___mcc_h0 = _source86.dtor_name;
        DAST._IType _1538___mcc_h1 = _source86.dtor_typ;
        DAST._IOptional<DAST._IExpression> _1539___mcc_h2 = _source86.dtor_maybeValue;
        DAST._IOptional<DAST._IExpression> _1540_init = _1539___mcc_h2;
        DAST._IType _1541_ty = _1538___mcc_h1;
        Dafny.ISequence<Dafny.Rune> _1542_var__ = _1537___mcc_h0;
        DAM.Syntax._IStmt _1543_init;
        DAM.Syntax._IStmt _out36;
        _out36 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitRHS(_1541_ty, _1540_init);
        _1543_init = _out36;
        DAM.Syntax._IStmt _1544_next;
        DAM.Syntax._IStmt _out37;
        _out37 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_1536_next);
        _1544_next = _out37;
        st = DAM.Syntax.Stmt.create_Bind(_1543_init, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_New(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), _1542_var__, _1544_next));
        return st;
      } else if (_source86.is_Assign) {
        DAST._IAssignLhs _1545___mcc_h6 = _source86.dtor_lhs;
        DAST._IExpression _1546___mcc_h7 = _source86.dtor_value;
        DAST._IExpression _1547_rhs = _1546___mcc_h7;
        DAST._IAssignLhs _1548_lhs = _1545___mcc_h6;
        {
          DAM.Syntax._IStmt _1549_rhs;
          DAM.Syntax._IStmt _out38;
          _out38 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_1547_rhs);
          _1549_rhs = _out38;
          DAM.Syntax._IStmt _1550_next;
          DAM.Syntax._IStmt _out39;
          _out39 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_1536_next);
          _1550_next = _out39;
          DAST._IAssignLhs _source87 = _1548_lhs;
          if (_source87.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _1551___mcc_h50 = _source87.dtor_Ident_a0;
            Dafny.ISequence<Dafny.Rune> _source88 = _1551___mcc_h50;
            Dafny.ISequence<Dafny.Rune> _1552___mcc_h52 = _source88;
            Dafny.ISequence<Dafny.Rune> _1553_v = _1552___mcc_h52;
            st = DAM.Syntax.Stmt.create_Bind(_1549_rhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_Write(DAM.Syntax.Expr.create_Var(_1553_v), DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), _1550_next));
            return st;
          } else if (_source87.is_Select) {
            DAST._IExpression _1554___mcc_h54 = _source87.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _1555___mcc_h55 = _source87.dtor_field;
            Microsoft.Dafny.Compilers.WrapException.Throw();
            st = DAM.Syntax.__default.Skip();
            return st;
          } else {
            DAST._IExpression _1556___mcc_h58 = _source87.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _1557___mcc_h59 = _source87.dtor_indices;
            Microsoft.Dafny.Compilers.WrapException.Throw();
            st = DAM.Syntax.__default.Skip();
            return st;
          }
        }
      } else if (_source86.is_If) {
        DAST._IExpression _1558___mcc_h10 = _source86.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _1559___mcc_h11 = _source86.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _1560___mcc_h12 = _source86.dtor_els;
        Dafny.ISequence<DAST._IStatement> _1561_els = _1560___mcc_h12;
        Dafny.ISequence<DAST._IStatement> _1562_thn = _1559___mcc_h11;
        DAST._IExpression _1563_cond = _1558___mcc_h10;
        DAM.Syntax._IStmt _1564_cond;
        DAM.Syntax._IStmt _out40;
        _out40 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_1563_cond);
        _1564_cond = _out40;
        DAM.Syntax._IStmt _1565_thn;
        DAM.Syntax._IStmt _out41;
        _out41 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_1562_thn);
        _1565_thn = _out41;
        DAM.Syntax._IStmt _1566_els;
        DAM.Syntax._IStmt _out42;
        _out42 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_1561_els);
        _1566_els = _out42;
        DAM.Syntax._IStmt _1567_next;
        DAM.Syntax._IStmt _out43;
        _out43 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_1536_next);
        _1567_next = _out43;
        st = DAM.Syntax.__default.Then(DAM.Syntax.Stmt.create_Bind(_1564_cond, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), DAM.Syntax.Stmt.create_Ite(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if")), _1565_thn, _1566_els)), _1567_next);
      } else if (_source86.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _1568___mcc_h16 = _source86.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _1569___mcc_h17 = _source86.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1570_stmt = _1569___mcc_h17;
        Dafny.ISequence<Dafny.Rune> _1571_lab = _1568___mcc_h16;
        DAM.Syntax._IStmt _1572_block;
        DAM.Syntax._IStmt _out44;
        _out44 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(Dafny.Sequence<DAST._IStatement>.Concat(_1570_stmt, _1536_next));
        _1572_block = _out44;
        st = DAM.Syntax.Stmt.create_LetCS(_1571_lab, DAM.Syntax.__default.Command(), _1572_block);
        return st;
      } else if (_source86.is_While) {
        DAST._IExpression _1573___mcc_h20 = _source86.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _1574___mcc_h21 = _source86.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1575_body = _1574___mcc_h21;
        DAST._IExpression _1576_guard = _1573___mcc_h20;
        DAM.Syntax._IStmt _1577_guard;
        DAM.Syntax._IStmt _out45;
        _out45 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_1576_guard);
        _1577_guard = _out45;
        DAM.Syntax._IStmt _1578_body;
        DAM.Syntax._IStmt _out46;
        _out46 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_1575_body);
        _1578_body = _out46;
        DAM.Syntax._IStmt _1579_next;
        DAM.Syntax._IStmt _out47;
        _out47 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_1536_next);
        _1579_next = _out47;
        st = DAM.Syntax.__default.While(_1577_guard, _1578_body, _1579_next);
      } else if (_source86.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _1580___mcc_h24 = _source86.dtor_boundName;
        DAST._IType _1581___mcc_h25 = _source86.dtor_boundType;
        DAST._IExpression _1582___mcc_h26 = _source86.dtor_over;
        Dafny.ISequence<DAST._IStatement> _1583___mcc_h27 = _source86.dtor_body;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.Syntax.__default.Skip();
        return st;
      } else if (_source86.is_Call) {
        DAST._IExpression _1584___mcc_h32 = _source86.dtor_on;
        Dafny.ISequence<Dafny.Rune> _1585___mcc_h33 = _source86.dtor_name;
        Dafny.ISequence<DAST._IType> _1586___mcc_h34 = _source86.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _1587___mcc_h35 = _source86.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1588___mcc_h36 = _source86.dtor_outs;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1589_outs = _1588___mcc_h36;
        Dafny.ISequence<DAST._IExpression> _1590_args = _1587___mcc_h35;
        Dafny.ISequence<Dafny.Rune> _1591_meth = _1585___mcc_h33;
        DAST._IExpression _1592_obj = _1584___mcc_h32;
        {
          DAM.Syntax._IStmt _1593_obj;
          DAM.Syntax._IStmt _out48;
          _out48 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_1592_obj);
          _1593_obj = _out48;
          st = DAM.Syntax.Stmt.create_Select(_1593_obj, _1591_meth);
          BigInteger _hi15 = new BigInteger((_1590_args).Count);
          for (BigInteger _1594_i = BigInteger.Zero; _1594_i < _hi15; _1594_i++) {
            DAM.Syntax._IStmt _1595_arg;
            DAM.Syntax._IStmt _out49;
            _out49 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr((_1590_args).Select(_1594_i));
            _1595_arg = _out49;
            st = DAM.Syntax.Stmt.create_Bind(_1595_arg, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_New(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_Call(st, DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")))));
          }
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source89 = _1589_outs;
          if (_source89.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1596___mcc_h62 = _source89.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1597_outs = _1596___mcc_h62;
            BigInteger _hi16 = new BigInteger((_1597_outs).Count);
            for (BigInteger _1598_i = BigInteger.Zero; _1598_i < _hi16; _1598_i++) {
              st = DAM.Syntax.Stmt.create_Call(st, DAM.Syntax.Expr.create_Var(((_1597_outs).Select(_1598_i))));
            }
          } else {
          }
          DAM.Syntax._IStmt _1599_next;
          DAM.Syntax._IStmt _out50;
          _out50 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_1536_next);
          _1599_next = _out50;
          st = DAM.Syntax.__default.Then(st, _1599_next);
        }
      } else if (_source86.is_Return) {
        DAST._IExpression _1600___mcc_h42 = _source86.dtor_expr;
        DAST._IExpression _1601_expr = _1600___mcc_h42;
        DAM.Syntax._IStmt _1602_ret;
        DAM.Syntax._IStmt _out51;
        _out51 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_1601_expr);
        _1602_ret = _out51;
        st = DAM.Syntax.Stmt.create_Throw(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return")), DAM.Syntax.__default.Command(), _1602_ret);
        return st;
      } else if (_source86.is_EarlyReturn) {
        st = DAM.Syntax.Stmt.create_Throw(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return")), DAM.Syntax.__default.Command(), DAM.Syntax.__default.Skip());
        return st;
      } else if (_source86.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _1603___mcc_h44 = _source86.dtor_toLabel;
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _1604_lab = _1603___mcc_h44;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source90 = _1604_lab;
          if (_source90.is_Some) {
            Dafny.ISequence<Dafny.Rune> _1605___mcc_h63 = _source90.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _1606_lab = _1605___mcc_h63;
            st = DAM.Syntax.Stmt.create_Throw(DAM.Syntax.Expr.create_Var(_1606_lab), DAM.Syntax.__default.Command(), DAM.Syntax.__default.Skip());
            return st;
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            st = DAM.Syntax.__default.Skip();
            return st;
          }
        }
      } else if (_source86.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _1607___mcc_h46 = _source86.dtor_body;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.Syntax.__default.Skip();
        return st;
      } else if (_source86.is_JumpTailCallStart) {
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.Syntax.__default.Skip();
        return st;
      } else if (_source86.is_Halt) {
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.Syntax.__default.Skip();
        return st;
      } else {
        DAST._IExpression _1608___mcc_h48 = _source86.dtor_Print_a0;
        DAST._IExpression _1609_expr = _1608___mcc_h48;
        DAM.Syntax._IStmt _1610_arg;
        DAM.Syntax._IStmt _out52;
        _out52 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_1609_expr);
        _1610_arg = _out52;
        DAM.Syntax._IStmt _1611_next;
        DAM.Syntax._IStmt _out53;
        _out53 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_1536_next);
        _1611_next = _out53;
        st = DAM.Syntax.Stmt.create_Bind(_1610_arg, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_Print(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), _1611_next));
        return st;
      }
      return st;
    }
    public static DAM.Syntax._IStmt EmitRHS(DAST._IType type__, DAST._IOptional<DAST._IExpression> rhs) {
      DAM.Syntax._IStmt @out = DAM.Syntax.Stmt.Default();
      _System._ITuple2<DAST._IType, DAST._IOptional<DAST._IExpression>> _source91 = _System.Tuple2<DAST._IType, DAST._IOptional<DAST._IExpression>>.create(type__, rhs);
      DAST._IType _1612___mcc_h0 = _source91.dtor__0;
      DAST._IOptional<DAST._IExpression> _1613___mcc_h1 = _source91.dtor__1;
      DAST._IType _source92 = _1612___mcc_h0;
      if (_source92.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1614___mcc_h4 = _source92.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _1615___mcc_h5 = _source92.dtor_typeArgs;
        DAST._IResolvedType _1616___mcc_h6 = _source92.dtor_resolved;
        DAST._IOptional<DAST._IExpression> _source93 = _1613___mcc_h1;
        if (_source93.is_Some) {
          DAST._IExpression _1617___mcc_h13 = _source93.dtor_Some_a0;
          DAST._IExpression _1618_init = _1617___mcc_h13;
          DAM.Syntax._IStmt _out54;
          _out54 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_1618_init);
          @out = _out54;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source92.is_Nullable) {
        DAST._IType _1619___mcc_h15 = _source92.dtor_Nullable_a0;
        DAST._IOptional<DAST._IExpression> _source94 = _1613___mcc_h1;
        if (_source94.is_Some) {
          DAST._IExpression _1620___mcc_h18 = _source94.dtor_Some_a0;
          DAST._IExpression _1621_init = _1620___mcc_h18;
          DAM.Syntax._IStmt _out55;
          _out55 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_1621_init);
          @out = _out55;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source92.is_Tuple) {
        Dafny.ISequence<DAST._IType> _1622___mcc_h20 = _source92.dtor_Tuple_a0;
        DAST._IOptional<DAST._IExpression> _source95 = _1613___mcc_h1;
        if (_source95.is_Some) {
          DAST._IExpression _1623___mcc_h23 = _source95.dtor_Some_a0;
          DAST._IExpression _1624_init = _1623___mcc_h23;
          DAM.Syntax._IStmt _out56;
          _out56 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_1624_init);
          @out = _out56;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source92.is_Array) {
        DAST._IType _1625___mcc_h25 = _source92.dtor_element;
        BigInteger _1626___mcc_h26 = _source92.dtor_dims;
        DAST._IOptional<DAST._IExpression> _source96 = _1613___mcc_h1;
        if (_source96.is_Some) {
          DAST._IExpression _1627___mcc_h31 = _source96.dtor_Some_a0;
          DAST._IExpression _1628_init = _1627___mcc_h31;
          DAM.Syntax._IStmt _out57;
          _out57 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_1628_init);
          @out = _out57;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source92.is_Seq) {
        DAST._IType _1629___mcc_h33 = _source92.dtor_element;
        DAST._IOptional<DAST._IExpression> _source97 = _1613___mcc_h1;
        if (_source97.is_Some) {
          DAST._IExpression _1630___mcc_h36 = _source97.dtor_Some_a0;
          DAST._IExpression _1631_init = _1630___mcc_h36;
          DAM.Syntax._IStmt _out58;
          _out58 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_1631_init);
          @out = _out58;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source92.is_Set) {
        DAST._IType _1632___mcc_h38 = _source92.dtor_element;
        DAST._IOptional<DAST._IExpression> _source98 = _1613___mcc_h1;
        if (_source98.is_Some) {
          DAST._IExpression _1633___mcc_h41 = _source98.dtor_Some_a0;
          DAST._IExpression _1634_init = _1633___mcc_h41;
          DAM.Syntax._IStmt _out59;
          _out59 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_1634_init);
          @out = _out59;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source92.is_Multiset) {
        DAST._IType _1635___mcc_h43 = _source92.dtor_element;
        DAST._IOptional<DAST._IExpression> _source99 = _1613___mcc_h1;
        if (_source99.is_Some) {
          DAST._IExpression _1636___mcc_h46 = _source99.dtor_Some_a0;
          DAST._IExpression _1637_init = _1636___mcc_h46;
          DAM.Syntax._IStmt _out60;
          _out60 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_1637_init);
          @out = _out60;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source92.is_Map) {
        DAST._IType _1638___mcc_h48 = _source92.dtor_key;
        DAST._IType _1639___mcc_h49 = _source92.dtor_value;
        DAST._IOptional<DAST._IExpression> _source100 = _1613___mcc_h1;
        if (_source100.is_Some) {
          DAST._IExpression _1640___mcc_h54 = _source100.dtor_Some_a0;
          DAST._IExpression _1641_init = _1640___mcc_h54;
          DAM.Syntax._IStmt _out61;
          _out61 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_1641_init);
          @out = _out61;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source92.is_Arrow) {
        Dafny.ISequence<DAST._IType> _1642___mcc_h56 = _source92.dtor_args;
        DAST._IType _1643___mcc_h57 = _source92.dtor_result;
        DAST._IOptional<DAST._IExpression> _source101 = _1613___mcc_h1;
        if (_source101.is_Some) {
          DAST._IExpression _1644___mcc_h62 = _source101.dtor_Some_a0;
          DAST._IExpression _1645_init = _1644___mcc_h62;
          DAM.Syntax._IStmt _out62;
          _out62 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_1645_init);
          @out = _out62;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source92.is_Primitive) {
        DAST._IPrimitive _1646___mcc_h64 = _source92.dtor_Primitive_a0;
        DAST._IPrimitive _source102 = _1646___mcc_h64;
        if (_source102.is_Int) {
          DAST._IOptional<DAST._IExpression> _source103 = _1613___mcc_h1;
          if (_source103.is_Some) {
            DAST._IExpression _1647___mcc_h67 = _source103.dtor_Some_a0;
            DAST._IExpression _1648_init = _1647___mcc_h67;
            DAM.Syntax._IStmt _out63;
            _out63 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_1648_init);
            @out = _out63;
          } else {
            @out = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Int(BigInteger.Zero));
          }
        } else if (_source102.is_Real) {
          DAST._IOptional<DAST._IExpression> _source104 = _1613___mcc_h1;
          if (_source104.is_Some) {
            DAST._IExpression _1649___mcc_h70 = _source104.dtor_Some_a0;
            DAST._IExpression _1650_init = _1649___mcc_h70;
            DAM.Syntax._IStmt _out64;
            _out64 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_1650_init);
            @out = _out64;
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            @out = DAM.Syntax.__default.Skip();
          }
        } else if (_source102.is_String) {
          DAST._IOptional<DAST._IExpression> _source105 = _1613___mcc_h1;
          if (_source105.is_Some) {
            DAST._IExpression _1651___mcc_h72 = _source105.dtor_Some_a0;
            DAST._IExpression _1652_init = _1651___mcc_h72;
            DAM.Syntax._IStmt _out65;
            _out65 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_1652_init);
            @out = _out65;
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            @out = DAM.Syntax.__default.Skip();
          }
        } else if (_source102.is_Bool) {
          DAST._IOptional<DAST._IExpression> _source106 = _1613___mcc_h1;
          if (_source106.is_Some) {
            DAST._IExpression _1653___mcc_h74 = _source106.dtor_Some_a0;
            DAST._IExpression _1654_init = _1653___mcc_h74;
            DAM.Syntax._IStmt _out66;
            _out66 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_1654_init);
            @out = _out66;
          } else {
            @out = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Bool(false));
          }
        } else {
          DAST._IOptional<DAST._IExpression> _source107 = _1613___mcc_h1;
          if (_source107.is_Some) {
            DAST._IExpression _1655___mcc_h77 = _source107.dtor_Some_a0;
            DAST._IExpression _1656_init = _1655___mcc_h77;
            DAM.Syntax._IStmt _out67;
            _out67 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_1656_init);
            @out = _out67;
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            @out = DAM.Syntax.__default.Skip();
          }
        }
      } else if (_source92.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _1657___mcc_h79 = _source92.dtor_Passthrough_a0;
        DAST._IOptional<DAST._IExpression> _source108 = _1613___mcc_h1;
        if (_source108.is_Some) {
          DAST._IExpression _1658___mcc_h82 = _source108.dtor_Some_a0;
          DAST._IExpression _1659_init = _1658___mcc_h82;
          DAM.Syntax._IStmt _out68;
          _out68 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_1659_init);
          @out = _out68;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _1660___mcc_h84 = _source92.dtor_TypeArg_a0;
        DAST._IOptional<DAST._IExpression> _source109 = _1613___mcc_h1;
        if (_source109.is_Some) {
          DAST._IExpression _1661___mcc_h87 = _source109.dtor_Some_a0;
          DAST._IExpression _1662_init = _1661___mcc_h87;
          DAM.Syntax._IStmt _out69;
          _out69 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_1662_init);
          @out = _out69;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      }
      return @out;
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<_System._ITuple3<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IExpr, DAM.Syntax._IPos>> _1663_modules;
      _1663_modules = Dafny.Sequence<_System._ITuple3<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IExpr, DAM.Syntax._IPos>>.FromElements();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> _1664_bindings;
      _1664_bindings = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.FromElements();
      BigInteger _hi17 = new BigInteger((p).Count);
      for (BigInteger _1665_i = BigInteger.Zero; _1665_i < _hi17; _1665_i++) {
        Dafny.ISequence<Dafny.Rune> _1666_name;
        _1666_name = ((p).Select(_1665_i)).dtor_name;
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Lowering module ")).ToVerbatimString(false));
        Dafny.Helpers.Print((_1666_name).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" into the DAM instruction set...\n")).ToVerbatimString(false));
        DAM.Syntax._IStmt _1667_m;
        DAM.Syntax._IStmt _out70;
        _out70 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitModule((p).Select(_1665_i));
        _1667_m = _out70;
        DAM.Syntax._IExpr _1668_mthunk;
        _1668_mthunk = DAM.Syntax.Expr.create_Thunk(_1667_m);
        DAM.Utils._IOption<DAM.Syntax._IPos> _1669_mtype;
        _1669_mtype = DAM.Statics.__default.SynthExpr(_1664_bindings, _1668_mthunk);
        if ((_1669_mtype).is_None) {
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Unable to synthesize type for module ")).ToVerbatimString(false));
          Dafny.Helpers.Print((_1666_name).ToVerbatimString(false));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!\n")).ToVerbatimString(false));
          return s;
        }
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Successfully synthesized type for module ")).ToVerbatimString(false));
        Dafny.Helpers.Print((_1666_name).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        _1663_modules = Dafny.Sequence<_System._ITuple3<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IExpr, DAM.Syntax._IPos>>.Concat(_1663_modules, Dafny.Sequence<_System._ITuple3<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IExpr, DAM.Syntax._IPos>>.FromElements(_System.Tuple3<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IExpr, DAM.Syntax._IPos>.create(_1666_name, _1668_mthunk, (_1669_mtype).Extract())));
        _1664_bindings = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(_1664_bindings, _1666_name, (_1669_mtype).Extract());
      }
      DAM.Syntax._IStmt _1670_body;
      _1670_body = DAM.Syntax.Stmt.create_Select(DAM.Syntax.Stmt.create_Select(DAM.Syntax.Stmt.create_Force(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__default")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Main"));
      BigInteger _hi18 = new BigInteger((_1663_modules).Count);
      for (BigInteger _1671_i = BigInteger.Zero; _1671_i < _hi18; _1671_i++) {
        _System._ITuple3<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IExpr, DAM.Syntax._IPos> _let_tmp_rhs47 = (_1663_modules).Select(((new BigInteger((_1663_modules).Count)) - (_1671_i)) - (BigInteger.One));
        Dafny.ISequence<Dafny.Rune> _1672_name = _let_tmp_rhs47.dtor__0;
        DAM.Syntax._IExpr _1673_mod = _let_tmp_rhs47.dtor__1;
        DAM.Syntax._IPos _1674_modtype = _let_tmp_rhs47.dtor__2;
        _1670_body = DAM.Syntax.__default.Let(_1673_mod, _1672_name, _1674_modtype, _1670_body);
      }
      DAM.Utils._IOption<DAM.Syntax._INeg> _1675_end;
      _1675_end = DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.FromElements(), _1670_body);
      if (!((_1675_end).is_Some)) {
        throw new Dafny.HaltException("Compilers/ResolvedDesugaredExecutableDafny/Dafny-compiler-fdafny.dfy(298,6): " + Dafny.Sequence<Dafny.Rune>.UnicodeFromString("expectation violation").ToVerbatimString(false));
      }
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Tracing execution of _module.__default.Main() below\n")).ToVerbatimString(false));
      DAM.Dynamics.__default.Interpret(_1670_body, true);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      return s;
    }
  }
} // end of namespace ResolvedDesugaredExecutableDafnyPlugin
namespace DCOMP {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> natToString(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0");
      } else if ((n) == (BigInteger.One)) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1");
      } else if ((n) == (new BigInteger(2))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("2");
      } else if ((n) == (new BigInteger(3))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("3");
      } else if ((n) == (new BigInteger(4))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("4");
      } else if ((n) == (new BigInteger(5))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("5");
      } else if ((n) == (new BigInteger(6))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("6");
      } else if ((n) == (new BigInteger(7))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("7");
      } else if ((n) == (new BigInteger(8))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("8");
      } else if ((n) == (new BigInteger(9))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("9");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.natToString(Dafny.Helpers.EuclideanDivision(n, new BigInteger(10))), DCOMP.__default.natToString(Dafny.Helpers.EuclideanModulus(n, new BigInteger(10))));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _1676___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_1676___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else {
        if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
          _1676___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_1676___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
          Dafny.ISequence<Dafny.Rune> _in112 = (i).Drop(BigInteger.One);
          i = _in112;
          goto TAIL_CALL_START;
        } else {
          _1676___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_1676___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
          Dafny.ISequence<Dafny.Rune> _in113 = (i).Drop(BigInteger.One);
          i = _in113;
          goto TAIL_CALL_START;
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), DCOMP.__default.replaceDots(i));
    }
  }

  public partial class stringNat {
    private static readonly Dafny.ISequence<Dafny.Rune> Witness = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1");
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(DCOMP.stringNat.Default());
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _1677_body;
      Dafny.ISequence<Dafny.Rune> _out71;
      _out71 = DCOMP.COMP.GenModuleBody((mod).dtor_body, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
      _1677_body = _out71;
      if ((mod).dtor_isExtern) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), DCOMP.__default.escapeIdent((mod).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), DCOMP.__default.escapeIdent((mod).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1677_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _1678_i;
      _1678_i = BigInteger.Zero;
      while ((_1678_i) < (new BigInteger((body).Count))) {
        Dafny.ISequence<Dafny.Rune> _1679_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        DAST._IModuleItem _source110 = (body).Select(_1678_i);
        if (_source110.is_Module) {
          DAST._IModule _1680___mcc_h0 = _source110.dtor_Module_a0;
          DAST._IModule _1681_m = _1680___mcc_h0;
          Dafny.ISequence<Dafny.Rune> _out72;
          _out72 = DCOMP.COMP.GenModule(_1681_m, containingPath);
          _1679_generated = _out72;
        } else if (_source110.is_Class) {
          DAST._IClass _1682___mcc_h1 = _source110.dtor_Class_a0;
          DAST._IClass _1683_c = _1682___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _out73;
          _out73 = DCOMP.COMP.GenClass(_1683_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_1683_c).dtor_name)));
          _1679_generated = _out73;
        } else if (_source110.is_Trait) {
          DAST._ITrait _1684___mcc_h2 = _source110.dtor_Trait_a0;
          DAST._ITrait _1685_t = _1684___mcc_h2;
          Dafny.ISequence<Dafny.Rune> _out74;
          _out74 = DCOMP.COMP.GenTrait(_1685_t, containingPath);
          _1679_generated = _out74;
        } else if (_source110.is_Newtype) {
          DAST._INewtype _1686___mcc_h3 = _source110.dtor_Newtype_a0;
          DAST._INewtype _1687_n = _1686___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _out75;
          _out75 = DCOMP.COMP.GenNewtype(_1687_n);
          _1679_generated = _out75;
        } else {
          DAST._IDatatype _1688___mcc_h4 = _source110.dtor_Datatype_a0;
          DAST._IDatatype _1689_d = _1688___mcc_h4;
          Dafny.ISequence<Dafny.Rune> _out76;
          _out76 = DCOMP.COMP.GenDatatype(_1689_d);
          _1679_generated = _out76;
        }
        if ((_1678_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1679_generated);
        _1678_i = (_1678_i) + (BigInteger.One);
      }
      return s;
    }
    public static void GenTypeParameters(Dafny.ISequence<DAST._IType> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<Dafny.Rune> typeParams, out Dafny.ISequence<Dafny.Rune> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints, out Dafny.ISequence<Dafny.Rune> constrainedEraseParams, out Dafny.ISequence<Dafny.Rune> unerasedParams, out Dafny.ISequence<Dafny.Rune> erasedParams) {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Empty;
      unerasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      erasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _1690_tpI;
      _1690_tpI = BigInteger.Zero;
      if ((new BigInteger((@params).Count)).Sign == 1) {
        typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where ");
        constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_1690_tpI) < (new BigInteger((@params).Count))) {
          DAST._IType _1691_tp;
          _1691_tp = (@params).Select(_1690_tpI);
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_1691_tp));
          Dafny.ISequence<Dafny.Rune> _1692_genTp;
          Dafny.ISequence<Dafny.Rune> _out77;
          _out77 = DCOMP.COMP.GenType(_1691_tp, false, false);
          _1692_genTp = _out77;
          typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(typeParams, _1692_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          Dafny.ISequence<Dafny.Rune> _1693_baseConstraints;
          _1693_baseConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<"), _1692_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default"));
          constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(constrainedTypeParams, _1692_genTp), _1693_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static, "));
          whereConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(whereConstraints, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _1692_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(constrainedEraseParams, _1692_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _1692_genTp), _1693_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + ::dafny_runtime::DafnyUnerasable<")), _1692_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased> + 'static, "));
          unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, _1692_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, _1692_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _1690_tpI = (_1690_tpI) + (BigInteger.One);
        }
        typeParams = Dafny.Sequence<Dafny.Rune>.Concat(typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Concat(constrainedTypeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Concat(constrainedEraseParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _1694_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _1695_typeParams;
      Dafny.ISequence<Dafny.Rune> _1696_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _1697_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _1698_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _1699_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _1700_erasedParams;
      Dafny.ISet<DAST._IType> _out78;
      Dafny.ISequence<Dafny.Rune> _out79;
      Dafny.ISequence<Dafny.Rune> _out80;
      Dafny.ISequence<Dafny.Rune> _out81;
      Dafny.ISequence<Dafny.Rune> _out82;
      Dafny.ISequence<Dafny.Rune> _out83;
      Dafny.ISequence<Dafny.Rune> _out84;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out78, out _out79, out _out80, out _out81, out _out82, out _out83, out _out84);
      _1694_typeParamsSet = _out78;
      _1695_typeParams = _out79;
      _1696_constrainedTypeParams = _out80;
      _1697_whereConstraints = _out81;
      _1698_constrainedEraseParams = _out82;
      _1699_unerasedParams = _out83;
      _1700_erasedParams = _out84;
      Dafny.ISequence<Dafny.Rune> _1701_fields;
      _1701_fields = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<Dafny.Rune> _1702_fieldInits;
      _1702_fieldInits = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _1703_fieldI;
      _1703_fieldI = BigInteger.Zero;
      while ((_1703_fieldI) < (new BigInteger(((c).dtor_fields).Count))) {
        DAST._IField _1704_field;
        _1704_field = ((c).dtor_fields).Select(_1703_fieldI);
        Dafny.ISequence<Dafny.Rune> _1705_fieldType;
        Dafny.ISequence<Dafny.Rune> _out85;
        _out85 = DCOMP.COMP.GenType(((_1704_field).dtor_formal).dtor_typ, false, false);
        _1705_fieldType = _out85;
        _1701_fields = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1701_fields, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")), DCOMP.__default.escapeIdent(((_1704_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell<")), _1705_fieldType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">,\n"));
        DAST._IOptional<DAST._IExpression> _source111 = (_1704_field).dtor_defaultValue;
        if (_source111.is_Some) {
          DAST._IExpression _1706___mcc_h0 = _source111.dtor_Some_a0;
          DAST._IExpression _1707_e = _1706___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _1708_eStr;
            bool _1709___v1;
            bool _1710___v2;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1711___v3;
            Dafny.ISequence<Dafny.Rune> _out86;
            bool _out87;
            bool _out88;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out89;
            DCOMP.COMP.GenExpr(_1707_e, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out86, out _out87, out _out88, out _out89);
            _1708_eStr = _out86;
            _1709___v1 = _out87;
            _1710___v2 = _out88;
            _1711___v3 = _out89;
            _1702_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1702_fieldInits, DCOMP.__default.escapeIdent(((_1704_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell::new(")), _1708_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("),\n"));
          }
        } else {
          {
            _1702_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1702_fieldInits, DCOMP.__default.escapeIdent(((_1704_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell::new(::std::default::Default::default()),\n"));
          }
        }
        _1703_fieldI = (_1703_fieldI) + (BigInteger.One);
      }
      BigInteger _1712_typeParamI;
      _1712_typeParamI = BigInteger.Zero;
      while ((_1712_typeParamI) < (new BigInteger(((c).dtor_typeParams).Count))) {
        Dafny.ISequence<Dafny.Rune> _1713_tpeGen;
        Dafny.ISequence<Dafny.Rune> _out90;
        _out90 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_1712_typeParamI), false, false);
        _1713_tpeGen = _out90;
        _1701_fields = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1701_fields, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_")), DCOMP.__default.natToString(_1712_typeParamI)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::marker::PhantomData<")), _1713_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">,\n"));
        _1702_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1702_fieldInits, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_")), DCOMP.__default.natToString(_1712_typeParamI)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::marker::PhantomData,\n"));
        _1712_typeParamI = (_1712_typeParamI) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub struct "), DCOMP.__default.escapeIdent((c).dtor_name)), _1695_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1701_fields), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      Dafny.ISequence<Dafny.Rune> _1714_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _1715_traitBodies;
      Dafny.ISequence<Dafny.Rune> _out91;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out92;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(path)), _1694_typeParamsSet, out _out91, out _out92);
      _1714_implBody = _out91;
      _1715_traitBodies = _out92;
      _1714_implBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn new() -> Self {\n"), DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1702_fieldInits), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n}\n")), _1714_implBody);
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _1696_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), DCOMP.__default.escapeIdent((c).dtor_name)), _1695_typeParams), _1697_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1714_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _1716_i;
        _1716_i = BigInteger.Zero;
        while ((_1716_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _1717_superClass;
          _1717_superClass = ((c).dtor_superClasses).Select(_1716_i);
          DAST._IType _source112 = _1717_superClass;
          if (_source112.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1718___mcc_h1 = _source112.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _1719___mcc_h2 = _source112.dtor_typeArgs;
            DAST._IResolvedType _1720___mcc_h3 = _source112.dtor_resolved;
            DAST._IResolvedType _source113 = _1720___mcc_h3;
            if (_source113.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1721___mcc_h7 = _source113.dtor_path;
            } else if (_source113.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1722___mcc_h9 = _source113.dtor_path;
              Dafny.ISequence<DAST._IType> _1723_typeArgs = _1719___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1724_traitPath = _1718___mcc_h1;
              {
                Dafny.ISequence<Dafny.Rune> _1725_pathStr;
                Dafny.ISequence<Dafny.Rune> _out93;
                _out93 = DCOMP.COMP.GenPath(_1724_traitPath);
                _1725_pathStr = _out93;
                Dafny.ISequence<Dafny.Rune> _1726_typeArgs;
                Dafny.ISequence<Dafny.Rune> _out94;
                _out94 = DCOMP.COMP.GenTypeArgs(_1723_typeArgs, false, false);
                _1726_typeArgs = _out94;
                Dafny.ISequence<Dafny.Rune> _1727_body;
                _1727_body = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
                if ((_1715_traitBodies).Contains(_1724_traitPath)) {
                  _1727_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Select(_1715_traitBodies, _1724_traitPath);
                }
                Dafny.ISequence<Dafny.Rune> _1728_genSelfPath;
                Dafny.ISequence<Dafny.Rune> _out95;
                _out95 = DCOMP.COMP.GenPath(path);
                _1728_genSelfPath = _out95;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nimpl ")), _1696_constrainedTypeParams), _1725_pathStr), _1726_typeArgs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" for ::std::rc::Rc<")), _1728_genSelfPath), _1695_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")), _1697_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1727_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
              }
            } else {
              DAST._IType _1729___mcc_h11 = _source113.dtor_Newtype_a0;
            }
          } else if (_source112.is_Nullable) {
            DAST._IType _1730___mcc_h13 = _source112.dtor_Nullable_a0;
          } else if (_source112.is_Tuple) {
            Dafny.ISequence<DAST._IType> _1731___mcc_h15 = _source112.dtor_Tuple_a0;
          } else if (_source112.is_Array) {
            DAST._IType _1732___mcc_h17 = _source112.dtor_element;
            BigInteger _1733___mcc_h18 = _source112.dtor_dims;
          } else if (_source112.is_Seq) {
            DAST._IType _1734___mcc_h21 = _source112.dtor_element;
          } else if (_source112.is_Set) {
            DAST._IType _1735___mcc_h23 = _source112.dtor_element;
          } else if (_source112.is_Multiset) {
            DAST._IType _1736___mcc_h25 = _source112.dtor_element;
          } else if (_source112.is_Map) {
            DAST._IType _1737___mcc_h27 = _source112.dtor_key;
            DAST._IType _1738___mcc_h28 = _source112.dtor_value;
          } else if (_source112.is_Arrow) {
            Dafny.ISequence<DAST._IType> _1739___mcc_h31 = _source112.dtor_args;
            DAST._IType _1740___mcc_h32 = _source112.dtor_result;
          } else if (_source112.is_Primitive) {
            DAST._IPrimitive _1741___mcc_h35 = _source112.dtor_Primitive_a0;
          } else if (_source112.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _1742___mcc_h37 = _source112.dtor_Passthrough_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _1743___mcc_h39 = _source112.dtor_TypeArg_a0;
          }
          _1716_i = (_1716_i) + (BigInteger.One);
        }
      }
      Dafny.ISequence<Dafny.Rune> _1744_defaultImpl;
      _1744_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _1696_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _1695_typeParams), _1697_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      _1744_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_1744_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n"));
      _1744_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1744_defaultImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new()\n"));
      _1744_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_1744_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      _1744_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_1744_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      Dafny.ISequence<Dafny.Rune> _1745_printImpl;
      _1745_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _1696_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _1695_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {\n"));
      _1745_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1745_printImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(__fmt_print_formatter, \"")), ((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _1746_ptrPartialEqImpl;
      _1746_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _1695_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::cmp::PartialEq for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _1695_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      _1746_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_1746_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn eq(&self, other: &Self) -> bool {\n"));
      _1746_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_1746_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ptr::eq(self, other)"));
      _1746_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_1746_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _1747_identEraseImpls;
      _1747_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _1696_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _1695_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), DCOMP.__default.escapeIdent((c).dtor_name)), _1700_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}\n"));
      _1747_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1747_identEraseImpls, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _1698_constrainedEraseParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _1699_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _1695_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _1744_defaultImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _1745_printImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _1746_ptrPartialEqImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _1747_identEraseImpls);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _1748_typeParamsSet;
      _1748_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<Dafny.Rune> _1749_typeParams;
      _1749_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _1750_tpI;
      _1750_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        _1749_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_1750_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._IType _1751_tp;
          _1751_tp = ((t).dtor_typeParams).Select(_1750_tpI);
          _1748_typeParamsSet = Dafny.Set<DAST._IType>.Union(_1748_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_1751_tp));
          Dafny.ISequence<Dafny.Rune> _1752_genTp;
          Dafny.ISequence<Dafny.Rune> _out96;
          _out96 = DCOMP.COMP.GenType(_1751_tp, false, false);
          _1752_genTp = _out96;
          _1749_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1749_typeParams, _1752_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _1750_tpI = (_1750_tpI) + (BigInteger.One);
        }
        _1749_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(_1749_typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1753_fullPath;
      _1753_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<Dafny.Rune> _1754_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _1755___v6;
      Dafny.ISequence<Dafny.Rune> _out97;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out98;
      DCOMP.COMP.GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_1753_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_1753_fullPath)), _1748_typeParamsSet, out _out97, out _out98);
      _1754_implBody = _out97;
      _1755___v6 = _out98;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub trait "), DCOMP.__default.escapeIdent((t).dtor_name)), _1749_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1754_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenNewtype(DAST._INewtype c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _1756_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _1757_typeParams;
      Dafny.ISequence<Dafny.Rune> _1758_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _1759_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _1760___v7;
      Dafny.ISequence<Dafny.Rune> _1761___v8;
      Dafny.ISequence<Dafny.Rune> _1762___v9;
      Dafny.ISet<DAST._IType> _out99;
      Dafny.ISequence<Dafny.Rune> _out100;
      Dafny.ISequence<Dafny.Rune> _out101;
      Dafny.ISequence<Dafny.Rune> _out102;
      Dafny.ISequence<Dafny.Rune> _out103;
      Dafny.ISequence<Dafny.Rune> _out104;
      Dafny.ISequence<Dafny.Rune> _out105;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out99, out _out100, out _out101, out _out102, out _out103, out _out104, out _out105);
      _1756_typeParamsSet = _out99;
      _1757_typeParams = _out100;
      _1758_constrainedTypeParams = _out101;
      _1759_whereConstraints = _out102;
      _1760___v7 = _out103;
      _1761___v8 = _out104;
      _1762___v9 = _out105;
      Dafny.ISequence<Dafny.Rune> _1763_underlyingType;
      Dafny.ISequence<Dafny.Rune> _out106;
      _out106 = DCOMP.COMP.GenType((c).dtor_base, false, false);
      _1763_underlyingType = _out106;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]\n#[repr(transparent)]\npub struct "), DCOMP.__default.escapeIdent((c).dtor_name)), _1757_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(pub ")), _1763_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _1758_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _1757_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), _1763_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _1758_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), _1763_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _1757_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _1758_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _1757_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _1757_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _1758_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _1757_typeParams), _1759_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n"));
      DAST._IOptional<DAST._IExpression> _source114 = (c).dtor_witnessExpr;
      if (_source114.is_Some) {
        DAST._IExpression _1764___mcc_h0 = _source114.dtor_Some_a0;
        DAST._IExpression _1765_e = _1764___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _1766_eStr;
          bool _1767___v10;
          bool _1768___v11;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1769___v12;
          Dafny.ISequence<Dafny.Rune> _out107;
          bool _out108;
          bool _out109;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out110;
          DCOMP.COMP.GenExpr(_1765_e, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out107, out _out108, out _out109, out _out110);
          _1766_eStr = _out107;
          _1767___v10 = _out108;
          _1768___v11 = _out109;
          _1769___v12 = _out110;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1766_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
        }
      } else {
        {
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(::std::default::Default::default())\n"));
        }
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _1758_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _1757_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, in_seq: bool) -> ::std::fmt::Result {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, __fmt_print_formatter, in_seq)\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _1758_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::ops::Deref for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _1757_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = ")), _1763_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn deref(&self) -> &Self::Target {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenDatatype(DAST._IDatatype c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _1770_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _1771_typeParams;
      Dafny.ISequence<Dafny.Rune> _1772_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _1773_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _1774_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _1775_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _1776_erasedParams;
      Dafny.ISet<DAST._IType> _out111;
      Dafny.ISequence<Dafny.Rune> _out112;
      Dafny.ISequence<Dafny.Rune> _out113;
      Dafny.ISequence<Dafny.Rune> _out114;
      Dafny.ISequence<Dafny.Rune> _out115;
      Dafny.ISequence<Dafny.Rune> _out116;
      Dafny.ISequence<Dafny.Rune> _out117;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out111, out _out112, out _out113, out _out114, out _out115, out _out116, out _out117);
      _1770_typeParamsSet = _out111;
      _1771_typeParams = _out112;
      _1772_constrainedTypeParams = _out113;
      _1773_whereConstraints = _out114;
      _1774_constrainedEraseParams = _out115;
      _1775_unerasedParams = _out116;
      _1776_erasedParams = _out117;
      Dafny.ISequence<Dafny.Rune> _1777_ctors;
      _1777_ctors = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _1778_i;
      _1778_i = BigInteger.Zero;
      while ((_1778_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _1779_ctor;
        _1779_ctor = ((c).dtor_ctors).Select(_1778_i);
        Dafny.ISequence<Dafny.Rune> _1780_ctorBody;
        _1780_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_1779_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        BigInteger _1781_j;
        _1781_j = BigInteger.Zero;
        while ((_1781_j) < (new BigInteger(((_1779_ctor).dtor_args).Count))) {
          DAST._IFormal _1782_formal;
          _1782_formal = ((_1779_ctor).dtor_args).Select(_1781_j);
          Dafny.ISequence<Dafny.Rune> _1783_formalType;
          Dafny.ISequence<Dafny.Rune> _out118;
          _out118 = DCOMP.COMP.GenType((_1782_formal).dtor_typ, false, false);
          _1783_formalType = _out118;
          if ((c).dtor_isCo) {
            _1780_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1780_ctorBody, DCOMP.__default.escapeIdent((_1782_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper<")), _1783_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">, "));
          } else {
            _1780_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1780_ctorBody, DCOMP.__default.escapeIdent((_1782_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _1783_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          _1781_j = (_1781_j) + (BigInteger.One);
        }
        _1780_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(_1780_ctorBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        _1777_ctors = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1777_ctors, _1780_ctorBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"));
        _1778_i = (_1778_i) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1784_selfPath;
      _1784_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<Dafny.Rune> _1785_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _1786_traitBodies;
      Dafny.ISequence<Dafny.Rune> _out119;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out120;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(_1784_selfPath)), _1770_typeParamsSet, out _out119, out _out120);
      _1785_implBody = _out119;
      _1786_traitBodies = _out120;
      _1778_i = BigInteger.Zero;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1787_emittedFields;
      _1787_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      while ((_1778_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _1788_ctor;
        _1788_ctor = ((c).dtor_ctors).Select(_1778_i);
        BigInteger _1789_j;
        _1789_j = BigInteger.Zero;
        while ((_1789_j) < (new BigInteger(((_1788_ctor).dtor_args).Count))) {
          DAST._IFormal _1790_formal;
          _1790_formal = ((_1788_ctor).dtor_args).Select(_1789_j);
          if (!((_1787_emittedFields).Contains((_1790_formal).dtor_name))) {
            _1787_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_1787_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_1790_formal).dtor_name));
            Dafny.ISequence<Dafny.Rune> _1791_formalType;
            Dafny.ISequence<Dafny.Rune> _out121;
            _out121 = DCOMP.COMP.GenType((_1790_formal).dtor_typ, false, false);
            _1791_formalType = _out121;
            Dafny.ISequence<Dafny.Rune> _1792_methodBody;
            _1792_methodBody = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match self {\n");
            BigInteger _1793_k;
            _1793_k = BigInteger.Zero;
            while ((_1793_k) < (new BigInteger(((c).dtor_ctors).Count))) {
              DAST._IDatatypeCtor _1794_ctor2;
              _1794_ctor2 = ((c).dtor_ctors).Select(_1793_k);
              Dafny.ISequence<Dafny.Rune> _1795_ctorMatch;
              _1795_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_1794_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              BigInteger _1796_l;
              _1796_l = BigInteger.Zero;
              bool _1797_hasMatchingField;
              _1797_hasMatchingField = false;
              while ((_1796_l) < (new BigInteger(((_1794_ctor2).dtor_args).Count))) {
                DAST._IFormal _1798_formal2;
                _1798_formal2 = ((_1794_ctor2).dtor_args).Select(_1796_l);
                if (((_1790_formal).dtor_name).Equals((_1798_formal2).dtor_name)) {
                  _1797_hasMatchingField = true;
                }
                _1795_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1795_ctorMatch, DCOMP.__default.escapeIdent((_1798_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                _1796_l = (_1796_l) + (BigInteger.One);
              }
              if (_1797_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _1795_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1795_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => ::std::ops::Deref::deref(&")), DCOMP.__default.escapeIdent((_1790_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0),\n"));
                } else {
                  _1795_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1795_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => ")), DCOMP.__default.escapeIdent((_1790_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"));
                }
              } else {
                _1795_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_1795_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => panic!(\"field does not exist on this variant\"),\n"));
              }
              _1792_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(_1792_methodBody, _1795_ctorMatch);
              _1793_k = (_1793_k) + (BigInteger.One);
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _1792_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1792_methodBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..) => panic!(),\n"));
            }
            _1792_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(_1792_methodBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            _1785_implBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1785_implBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn ")), DCOMP.__default.escapeIdent((_1790_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&self) -> &")), _1791_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1792_methodBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
          }
          _1789_j = (_1789_j) + (BigInteger.One);
        }
        _1778_i = (_1778_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _1777_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_1777_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant("));
        BigInteger _1799_typeI;
        _1799_typeI = BigInteger.Zero;
        while ((_1799_typeI) < (new BigInteger(((c).dtor_typeParams).Count))) {
          if ((_1799_typeI).Sign == 1) {
            _1777_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_1777_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _1800_genTp;
          Dafny.ISequence<Dafny.Rune> _out122;
          _out122 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_1799_typeI), false, false);
          _1800_genTp = _out122;
          _1777_ctors = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1777_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData::<")), _1800_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          _1799_typeI = (_1799_typeI) + (BigInteger.One);
        }
        _1777_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_1777_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      Dafny.ISequence<Dafny.Rune> _1801_enumBody;
      _1801_enumBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq)]\npub enum "), DCOMP.__default.escapeIdent((c).dtor_name)), _1771_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1777_ctors), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _1772_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), DCOMP.__default.escapeIdent((c).dtor_name)), _1771_typeParams), _1773_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1785_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      Dafny.ISequence<Dafny.Rune> _1802_identEraseImpls;
      _1802_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _1772_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _1771_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), DCOMP.__default.escapeIdent((c).dtor_name)), _1776_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}\n"));
      _1802_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1802_identEraseImpls, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _1774_constrainedEraseParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _1775_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _1771_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      Dafny.ISequence<Dafny.Rune> _1803_printImpl;
      _1803_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _1772_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _1771_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match self {\n"));
      _1778_i = BigInteger.Zero;
      while ((_1778_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _1804_ctor;
        _1804_ctor = ((c).dtor_ctors).Select(_1778_i);
        Dafny.ISequence<Dafny.Rune> _1805_ctorMatch;
        _1805_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_1804_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _1806_modulePrefix;
        _1806_modulePrefix = (((((c).dtor_enclosingModule)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(((c).dtor_enclosingModule), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        Dafny.ISequence<Dafny.Rune> _1807_printRhs;
        _1807_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(__fmt_print_formatter, \""), _1806_modulePrefix), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (_1804_ctor).dtor_name), (((_1804_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?;")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?;"))));
        BigInteger _1808_j;
        _1808_j = BigInteger.Zero;
        while ((_1808_j) < (new BigInteger(((_1804_ctor).dtor_args).Count))) {
          DAST._IFormal _1809_formal;
          _1809_formal = ((_1804_ctor).dtor_args).Select(_1808_j);
          _1805_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1805_ctorMatch, DCOMP.__default.escapeIdent((_1809_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          if ((_1808_j).Sign == 1) {
            _1807_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_1807_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nwrite!(__fmt_print_formatter, \", \")?;"));
          }
          _1807_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1807_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n::dafny_runtime::DafnyPrint::fmt_print(")), DCOMP.__default.escapeIdent((_1809_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", __fmt_print_formatter, false)?;"));
          _1808_j = (_1808_j) + (BigInteger.One);
        }
        _1805_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_1805_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_1804_ctor).dtor_hasAnyArgs) {
          _1807_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_1807_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nwrite!(__fmt_print_formatter, \")\")?;"));
        }
        _1807_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_1807_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nOk(())"));
        _1803_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1803_printImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _1805_ctorMatch), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" => {\n")), _1807_printRhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n"));
        _1778_i = (_1778_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _1803_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1803_printImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..) => {panic!()\n}\n"));
      }
      _1803_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(_1803_printImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _1810_defaultImpl;
      _1810_defaultImpl = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        _1810_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _1772_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _1771_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n")), DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
        _1778_i = BigInteger.Zero;
        while ((_1778_i) < (new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count))) {
          DAST._IFormal _1811_formal;
          _1811_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_1778_i);
          _1810_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1810_defaultImpl, DCOMP.__default.escapeIdent((_1811_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::default::Default::default(),\n"));
          _1778_i = (_1778_i) + (BigInteger.One);
        }
        _1810_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_1810_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n}\n}\n"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1801_enumBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _1802_identEraseImpls), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _1803_printImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _1810_defaultImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      if ((new BigInteger((p).Count)).Sign == 0) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
        return s;
      } else {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super::");
        BigInteger _1812_i;
        _1812_i = BigInteger.Zero;
        while ((_1812_i) < (new BigInteger((p).Count))) {
          if ((_1812_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(((p).Select(_1812_i))));
          _1812_i = (_1812_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((args).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        BigInteger _1813_i;
        _1813_i = BigInteger.Zero;
        while ((_1813_i) < (new BigInteger((args).Count))) {
          if ((_1813_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _1814_genTp;
          Dafny.ISequence<Dafny.Rune> _out123;
          _out123 = DCOMP.COMP.GenType((args).Select(_1813_i), inBinding, inFn);
          _1814_genTp = _out123;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1814_genTp);
          _1813_i = (_1813_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenType(DAST._IType c, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IType _source115 = c;
      if (_source115.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1815___mcc_h0 = _source115.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _1816___mcc_h1 = _source115.dtor_typeArgs;
        DAST._IResolvedType _1817___mcc_h2 = _source115.dtor_resolved;
        DAST._IResolvedType _1818_resolved = _1817___mcc_h2;
        Dafny.ISequence<DAST._IType> _1819_args = _1816___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1820_p = _1815___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _out124;
          _out124 = DCOMP.COMP.GenPath(_1820_p);
          s = _out124;
          Dafny.ISequence<Dafny.Rune> _1821_typeArgs;
          Dafny.ISequence<Dafny.Rune> _out125;
          _out125 = DCOMP.COMP.GenTypeArgs(_1819_args, inBinding, inFn);
          _1821_typeArgs = _out125;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1821_typeArgs);
          DAST._IResolvedType _source116 = _1818_resolved;
          if (_source116.is_Datatype) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1822___mcc_h18 = _source116.dtor_path;
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
            }
          } else if (_source116.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1823___mcc_h20 = _source116.dtor_path;
            {
              if ((_1820_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
                s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<dyn ::std::any::Any>");
              } else {
                if (inBinding) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              }
            }
          } else {
            DAST._IType _1824___mcc_h22 = _source116.dtor_Newtype_a0;
            DAST._IResolvedType _1825_Primitive = _1818_resolved;
          }
        }
      } else if (_source115.is_Nullable) {
        DAST._IType _1826___mcc_h3 = _source115.dtor_Nullable_a0;
        DAST._IType _1827_inner = _1826___mcc_h3;
        {
          Dafny.ISequence<Dafny.Rune> _1828_innerStr;
          Dafny.ISequence<Dafny.Rune> _out126;
          _out126 = DCOMP.COMP.GenType(_1827_inner, inBinding, inFn);
          _1828_innerStr = _out126;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option<"), _1828_innerStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source115.is_Tuple) {
        Dafny.ISequence<DAST._IType> _1829___mcc_h4 = _source115.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IType> _1830_types = _1829___mcc_h4;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          BigInteger _1831_i;
          _1831_i = BigInteger.Zero;
          while ((_1831_i) < (new BigInteger((_1830_types).Count))) {
            if ((_1831_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _1832_generated;
            Dafny.ISequence<Dafny.Rune> _out127;
            _out127 = DCOMP.COMP.GenType((_1830_types).Select(_1831_i), inBinding, inFn);
            _1832_generated = _out127;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _1832_generated), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            _1831_i = (_1831_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
        }
      } else if (_source115.is_Array) {
        DAST._IType _1833___mcc_h5 = _source115.dtor_element;
        BigInteger _1834___mcc_h6 = _source115.dtor_dims;
        BigInteger _1835_dims = _1834___mcc_h6;
        DAST._IType _1836_element = _1833___mcc_h5;
        {
          Dafny.ISequence<Dafny.Rune> _1837_elemStr;
          Dafny.ISequence<Dafny.Rune> _out128;
          _out128 = DCOMP.COMP.GenType(_1836_element, inBinding, inFn);
          _1837_elemStr = _out128;
          s = _1837_elemStr;
          BigInteger _1838_i;
          _1838_i = BigInteger.Zero;
          while ((_1838_i) < (_1835_dims)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<::std::cell::RefCell<::std::vec::Vec<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>>"));
            _1838_i = (_1838_i) + (BigInteger.One);
          }
        }
      } else if (_source115.is_Seq) {
        DAST._IType _1839___mcc_h7 = _source115.dtor_element;
        DAST._IType _1840_element = _1839___mcc_h7;
        {
          Dafny.ISequence<Dafny.Rune> _1841_elemStr;
          Dafny.ISequence<Dafny.Rune> _out129;
          _out129 = DCOMP.COMP.GenType(_1840_element, inBinding, inFn);
          _1841_elemStr = _out129;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::vec::Vec<"), _1841_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source115.is_Set) {
        DAST._IType _1842___mcc_h8 = _source115.dtor_element;
        DAST._IType _1843_element = _1842___mcc_h8;
        {
          Dafny.ISequence<Dafny.Rune> _1844_elemStr;
          Dafny.ISequence<Dafny.Rune> _out130;
          _out130 = DCOMP.COMP.GenType(_1843_element, inBinding, inFn);
          _1844_elemStr = _out130;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashSet<"), _1844_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source115.is_Multiset) {
        DAST._IType _1845___mcc_h9 = _source115.dtor_element;
        DAST._IType _1846_element = _1845___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _1847_elemStr;
          Dafny.ISequence<Dafny.Rune> _out131;
          _out131 = DCOMP.COMP.GenType(_1846_element, inBinding, inFn);
          _1847_elemStr = _out131;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _1847_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", u64>"));
        }
      } else if (_source115.is_Map) {
        DAST._IType _1848___mcc_h10 = _source115.dtor_key;
        DAST._IType _1849___mcc_h11 = _source115.dtor_value;
        DAST._IType _1850_value = _1849___mcc_h11;
        DAST._IType _1851_key = _1848___mcc_h10;
        {
          Dafny.ISequence<Dafny.Rune> _1852_keyStr;
          Dafny.ISequence<Dafny.Rune> _out132;
          _out132 = DCOMP.COMP.GenType(_1851_key, inBinding, inFn);
          _1852_keyStr = _out132;
          Dafny.ISequence<Dafny.Rune> _1853_valueStr;
          Dafny.ISequence<Dafny.Rune> _out133;
          _out133 = DCOMP.COMP.GenType(_1850_value, inBinding, inFn);
          _1853_valueStr = _out133;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _1852_keyStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _1853_valueStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source115.is_Arrow) {
        Dafny.ISequence<DAST._IType> _1854___mcc_h12 = _source115.dtor_args;
        DAST._IType _1855___mcc_h13 = _source115.dtor_result;
        DAST._IType _1856_result = _1855___mcc_h13;
        Dafny.ISequence<DAST._IType> _1857_args = _1854___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper<::std::rc::Rc<dyn ::std::ops::Fn(");
          BigInteger _1858_i;
          _1858_i = BigInteger.Zero;
          while ((_1858_i) < (new BigInteger((_1857_args).Count))) {
            if ((_1858_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _1859_generated;
            Dafny.ISequence<Dafny.Rune> _out134;
            _out134 = DCOMP.COMP.GenType((_1857_args).Select(_1858_i), inBinding, true);
            _1859_generated = _out134;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _1859_generated);
            _1858_i = (_1858_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _1860_resultType;
          Dafny.ISequence<Dafny.Rune> _out135;
          _out135 = DCOMP.COMP.GenType(_1856_result, inBinding, (inFn) || (inBinding));
          _1860_resultType = _out135;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _1860_resultType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static>>"));
        }
      } else if (_source115.is_Primitive) {
        DAST._IPrimitive _1861___mcc_h14 = _source115.dtor_Primitive_a0;
        DAST._IPrimitive _1862_p = _1861___mcc_h14;
        {
          DAST._IPrimitive _source117 = _1862_p;
          if (_source117.is_Int) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt");
          } else if (_source117.is_Real) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational");
          } else if (_source117.is_String) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Vec<char>");
          } else if (_source117.is_Bool) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool");
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char");
          }
        }
      } else if (_source115.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _1863___mcc_h15 = _source115.dtor_Passthrough_a0;
        Dafny.ISequence<Dafny.Rune> _1864_v = _1863___mcc_h15;
        s = _1864_v;
      } else {
        Dafny.ISequence<Dafny.Rune> _1865___mcc_h16 = _source115.dtor_TypeArg_a0;
        Dafny.ISequence<Dafny.Rune> _source118 = _1865___mcc_h16;
        Dafny.ISequence<Dafny.Rune> _1866___mcc_h17 = _source118;
        Dafny.ISequence<Dafny.Rune> _1867_name = _1866___mcc_h17;
        s = DCOMP.__default.escapeIdent(_1867_name);
      }
      return s;
    }
    public static void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<Dafny.Rune> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> traitBodies) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _1868_i;
      _1868_i = BigInteger.Zero;
      while ((_1868_i) < (new BigInteger((body).Count))) {
        DAST._IMethod _source119 = (body).Select(_1868_i);
        DAST._IMethod _1869___mcc_h0 = _source119;
        DAST._IMethod _1870_m = _1869___mcc_h0;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source120 = (_1870_m).dtor_overridingPath;
          if (_source120.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1871___mcc_h1 = _source120.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1872_p = _1871___mcc_h1;
            {
              Dafny.ISequence<Dafny.Rune> _1873_existing;
              _1873_existing = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              if ((traitBodies).Contains(_1872_p)) {
                _1873_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Select(traitBodies, _1872_p);
              }
              if ((new BigInteger((_1873_existing).Count)).Sign == 1) {
                _1873_existing = Dafny.Sequence<Dafny.Rune>.Concat(_1873_existing, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
              }
              Dafny.ISequence<Dafny.Rune> _1874_genMethod;
              Dafny.ISequence<Dafny.Rune> _out136;
              _out136 = DCOMP.COMP.GenMethod(_1870_m, true, enclosingType, enclosingTypeParams);
              _1874_genMethod = _out136;
              _1873_existing = Dafny.Sequence<Dafny.Rune>.Concat(_1873_existing, _1874_genMethod);
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>(_1872_p, _1873_existing)));
            }
          } else {
            {
              Dafny.ISequence<Dafny.Rune> _1875_generated;
              Dafny.ISequence<Dafny.Rune> _out137;
              _out137 = DCOMP.COMP.GenMethod(_1870_m, forTrait, enclosingType, enclosingTypeParams);
              _1875_generated = _out137;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1875_generated);
            }
          }
        }
        if ((new BigInteger((s).Count)).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        _1868_i = (_1868_i) + (BigInteger.One);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> GenParams(Dafny.ISequence<DAST._IFormal> @params) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _1876_i;
      _1876_i = BigInteger.Zero;
      while ((_1876_i) < (new BigInteger((@params).Count))) {
        DAST._IFormal _1877_param;
        _1877_param = (@params).Select(_1876_i);
        Dafny.ISequence<Dafny.Rune> _1878_paramType;
        Dafny.ISequence<Dafny.Rune> _out138;
        _out138 = DCOMP.COMP.GenType((_1877_param).dtor_typ, false, false);
        _1878_paramType = _out138;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((_1877_param).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _1878_paramType);
        if ((_1876_i) < ((new BigInteger((@params).Count)) - (BigInteger.One))) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        _1876_i = (_1876_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _1879_params;
      Dafny.ISequence<Dafny.Rune> _out139;
      _out139 = DCOMP.COMP.GenParams((m).dtor_params);
      _1879_params = _out139;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1880_paramNames;
      _1880_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _1881_paramI;
      _1881_paramI = BigInteger.Zero;
      while ((_1881_paramI) < (new BigInteger(((m).dtor_params).Count))) {
        _1880_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_1880_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((m).dtor_params).Select(_1881_paramI)).dtor_name));
        _1881_paramI = (_1881_paramI) + (BigInteger.One);
      }
      if (!((m).dtor_isStatic)) {
        if (forTrait) {
          _1879_params = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _1879_params);
        } else {
          Dafny.ISequence<Dafny.Rune> _1882_enclosingTypeString;
          Dafny.ISequence<Dafny.Rune> _out140;
          _out140 = DCOMP.COMP.GenType(enclosingType, false, false);
          _1882_enclosingTypeString = _out140;
          _1879_params = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self: &"), _1882_enclosingTypeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _1879_params);
        }
      }
      Dafny.ISequence<Dafny.Rune> _1883_retType;
      _1883_retType = (((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")));
      BigInteger _1884_typeI;
      _1884_typeI = BigInteger.Zero;
      while ((_1884_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        if ((_1884_typeI).Sign == 1) {
          _1883_retType = Dafny.Sequence<Dafny.Rune>.Concat(_1883_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        Dafny.ISequence<Dafny.Rune> _1885_typeString;
        Dafny.ISequence<Dafny.Rune> _out141;
        _out141 = DCOMP.COMP.GenType(((m).dtor_outTypes).Select(_1884_typeI), false, false);
        _1885_typeString = _out141;
        _1883_retType = Dafny.Sequence<Dafny.Rune>.Concat(_1883_retType, _1885_typeString);
        _1884_typeI = (_1884_typeI) + (BigInteger.One);
      }
      if ((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) {
        _1883_retType = Dafny.Sequence<Dafny.Rune>.Concat(_1883_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      if (forTrait) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn "), DCOMP.__default.escapeIdent((m).dtor_name));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn "), DCOMP.__default.escapeIdent((m).dtor_name));
      }
      Dafny.ISequence<DAST._IType> _1886_typeParamsFiltered;
      _1886_typeParamsFiltered = Dafny.Sequence<DAST._IType>.FromElements();
      BigInteger _1887_typeParamI;
      _1887_typeParamI = BigInteger.Zero;
      while ((_1887_typeParamI) < (new BigInteger(((m).dtor_typeParams).Count))) {
        DAST._IType _1888_typeParam;
        _1888_typeParam = ((m).dtor_typeParams).Select(_1887_typeParamI);
        if (!((enclosingTypeParams).Contains(_1888_typeParam))) {
          _1886_typeParamsFiltered = Dafny.Sequence<DAST._IType>.Concat(_1886_typeParamsFiltered, Dafny.Sequence<DAST._IType>.FromElements(_1888_typeParam));
        }
        _1887_typeParamI = (_1887_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _1889_whereClauses;
      _1889_whereClauses = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((_1886_typeParamsFiltered).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        _1889_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_1889_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where "));
        BigInteger _1890_i;
        _1890_i = BigInteger.Zero;
        while ((_1890_i) < (new BigInteger((_1886_typeParamsFiltered).Count))) {
          if ((_1890_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            _1889_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_1889_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _1891_typeString;
          Dafny.ISequence<Dafny.Rune> _out142;
          _out142 = DCOMP.COMP.GenType((_1886_typeParamsFiltered).Select(_1890_i), false, false);
          _1891_typeString = _out142;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _1891_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<")), _1891_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default + 'static"));
          _1889_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1889_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _1891_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq"));
          _1890_i = (_1890_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1879_params), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _1883_retType), _1889_whereClauses);
      if ((m).dtor_hasBody) {
        Dafny.ISequence<Dafny.Rune> _1892_earlyReturn;
        _1892_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return;");
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source121 = (m).dtor_outVars;
        if (_source121.is_Some) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1893___mcc_h0 = _source121.dtor_Some_a0;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1894_outVars = _1893___mcc_h0;
          {
            _1892_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return (");
            BigInteger _1895_outI;
            _1895_outI = BigInteger.Zero;
            while ((_1895_outI) < (new BigInteger((_1894_outVars).Count))) {
              if ((_1895_outI).Sign == 1) {
                _1892_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_1892_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _1896_outVar;
              _1896_outVar = (_1894_outVars).Select(_1895_outI);
              _1892_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_1892_earlyReturn, DCOMP.__default.escapeIdent((_1896_outVar)));
              _1895_outI = (_1895_outI) + (BigInteger.One);
            }
            _1892_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_1892_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
          }
        } else {
        }
        Dafny.ISequence<Dafny.Rune> _1897_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1898___v15;
        Dafny.ISequence<Dafny.Rune> _out143;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out144;
        DCOMP.COMP.GenStmts((m).dtor_body, (((m).dtor_isStatic) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None()) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))), _1880_paramNames, true, _1892_earlyReturn, out _out143, out _out144);
        _1897_body = _out143;
        _1898___v15 = _out144;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1897_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n"));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      }
      return s;
    }
    public static void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1899_declarations;
      _1899_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _1900_i;
      _1900_i = BigInteger.Zero;
      while ((_1900_i) < (new BigInteger((stmts).Count))) {
        DAST._IStatement _1901_stmt;
        _1901_stmt = (stmts).Select(_1900_i);
        Dafny.ISequence<Dafny.Rune> _1902_stmtString;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1903_recIdents;
        Dafny.ISequence<Dafny.Rune> _out145;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out146;
        DCOMP.COMP.GenStmt(_1901_stmt, selfIdent, @params, (isLast) && ((_1900_i) == ((new BigInteger((stmts).Count)) - (BigInteger.One))), earlyReturn, out _out145, out _out146);
        _1902_stmtString = _out145;
        _1903_recIdents = _out146;
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_1903_recIdents, _1899_declarations));
        DAST._IStatement _source122 = _1901_stmt;
        if (_source122.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _1904___mcc_h0 = _source122.dtor_name;
          DAST._IType _1905___mcc_h1 = _source122.dtor_typ;
          DAST._IOptional<DAST._IExpression> _1906___mcc_h2 = _source122.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _1907_name = _1904___mcc_h0;
          {
            _1899_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_1899_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1907_name));
          }
        } else if (_source122.is_Assign) {
          DAST._IAssignLhs _1908___mcc_h6 = _source122.dtor_lhs;
          DAST._IExpression _1909___mcc_h7 = _source122.dtor_value;
        } else if (_source122.is_If) {
          DAST._IExpression _1910___mcc_h10 = _source122.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _1911___mcc_h11 = _source122.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _1912___mcc_h12 = _source122.dtor_els;
        } else if (_source122.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _1913___mcc_h16 = _source122.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _1914___mcc_h17 = _source122.dtor_body;
        } else if (_source122.is_While) {
          DAST._IExpression _1915___mcc_h20 = _source122.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _1916___mcc_h21 = _source122.dtor_body;
        } else if (_source122.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _1917___mcc_h24 = _source122.dtor_boundName;
          DAST._IType _1918___mcc_h25 = _source122.dtor_boundType;
          DAST._IExpression _1919___mcc_h26 = _source122.dtor_over;
          Dafny.ISequence<DAST._IStatement> _1920___mcc_h27 = _source122.dtor_body;
        } else if (_source122.is_Call) {
          DAST._IExpression _1921___mcc_h32 = _source122.dtor_on;
          Dafny.ISequence<Dafny.Rune> _1922___mcc_h33 = _source122.dtor_name;
          Dafny.ISequence<DAST._IType> _1923___mcc_h34 = _source122.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _1924___mcc_h35 = _source122.dtor_args;
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1925___mcc_h36 = _source122.dtor_outs;
        } else if (_source122.is_Return) {
          DAST._IExpression _1926___mcc_h42 = _source122.dtor_expr;
        } else if (_source122.is_EarlyReturn) {
        } else if (_source122.is_Break) {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _1927___mcc_h44 = _source122.dtor_toLabel;
        } else if (_source122.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _1928___mcc_h46 = _source122.dtor_body;
        } else if (_source122.is_JumpTailCallStart) {
        } else if (_source122.is_Halt) {
        } else {
          DAST._IExpression _1929___mcc_h48 = _source122.dtor_Print_a0;
        }
        if ((_1900_i).Sign == 1) {
          generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, _1902_stmtString);
        _1900_i = (_1900_i) + (BigInteger.One);
      }
    }
    public static void GenAssignLhs(DAST._IAssignLhs lhs, Dafny.ISequence<Dafny.Rune> rhs, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, out Dafny.ISequence<Dafny.Rune> generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IAssignLhs _source123 = lhs;
      if (_source123.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _1930___mcc_h0 = _source123.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source124 = _1930___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _1931___mcc_h1 = _source124;
        Dafny.ISequence<Dafny.Rune> _1932_id = _1931___mcc_h1;
        {
          if ((@params).Contains(_1932_id)) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), DCOMP.__default.escapeIdent(_1932_id));
          } else {
            generated = DCOMP.__default.escapeIdent(_1932_id);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1932_id);
          needsIIFE = false;
        }
      } else if (_source123.is_Select) {
        DAST._IExpression _1933___mcc_h2 = _source123.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _1934___mcc_h3 = _source123.dtor_field;
        Dafny.ISequence<Dafny.Rune> _1935_field = _1934___mcc_h3;
        DAST._IExpression _1936_on = _1933___mcc_h2;
        {
          Dafny.ISequence<Dafny.Rune> _1937_onExpr;
          bool _1938_onOwned;
          bool _1939_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1940_recIdents;
          Dafny.ISequence<Dafny.Rune> _out147;
          bool _out148;
          bool _out149;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out150;
          DCOMP.COMP.GenExpr(_1936_on, selfIdent, @params, false, out _out147, out _out148, out _out149, out _out150);
          _1937_onExpr = _out147;
          _1938_onOwned = _out148;
          _1939_onErased = _out149;
          _1940_recIdents = _out150;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*("), _1937_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _1935_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()) = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          readIdents = _1940_recIdents;
          needsIIFE = true;
        }
      } else {
        DAST._IExpression _1941___mcc_h4 = _source123.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _1942___mcc_h5 = _source123.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _1943_indices = _1942___mcc_h5;
        DAST._IExpression _1944_on = _1941___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _1945_onExpr;
          bool _1946_onOwned;
          bool _1947_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1948_recIdents;
          Dafny.ISequence<Dafny.Rune> _out151;
          bool _out152;
          bool _out153;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out154;
          DCOMP.COMP.GenExpr(_1944_on, selfIdent, @params, false, out _out151, out _out152, out _out153, out _out154);
          _1945_onExpr = _out151;
          _1946_onOwned = _out152;
          _1947_onErased = _out153;
          _1948_recIdents = _out154;
          readIdents = _1948_recIdents;
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          BigInteger _1949_i;
          _1949_i = BigInteger.Zero;
          while ((_1949_i) < (new BigInteger((_1943_indices).Count))) {
            Dafny.ISequence<Dafny.Rune> _1950_idx;
            bool _1951___v19;
            bool _1952_idxErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1953_recIdentsIdx;
            Dafny.ISequence<Dafny.Rune> _out155;
            bool _out156;
            bool _out157;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out158;
            DCOMP.COMP.GenExpr((_1943_indices).Select(_1949_i), selfIdent, @params, true, out _out155, out _out156, out _out157, out _out158);
            _1950_idx = _out155;
            _1951___v19 = _out156;
            _1952_idxErased = _out157;
            _1953_recIdentsIdx = _out158;
            if (!(_1952_idxErased)) {
              _1950_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1950_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let __idx")), DCOMP.__default.natToString(_1949_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = <usize as ::dafny_runtime::NumCast>::from(")), _1950_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap();\n"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1953_recIdentsIdx);
            _1949_i = (_1949_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, _1945_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()"));
          _1949_i = BigInteger.Zero;
          while ((_1949_i) < (new BigInteger((_1943_indices).Count))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[__idx")), DCOMP.__default.natToString(_1949_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            _1949_i = (_1949_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}"));
          needsIIFE = true;
        }
      }
    }
    public static void GenStmt(DAST._IStatement stmt, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IStatement _source125 = stmt;
      if (_source125.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _1954___mcc_h0 = _source125.dtor_name;
        DAST._IType _1955___mcc_h1 = _source125.dtor_typ;
        DAST._IOptional<DAST._IExpression> _1956___mcc_h2 = _source125.dtor_maybeValue;
        DAST._IOptional<DAST._IExpression> _source126 = _1956___mcc_h2;
        if (_source126.is_Some) {
          DAST._IExpression _1957___mcc_h3 = _source126.dtor_Some_a0;
          DAST._IExpression _1958_expression = _1957___mcc_h3;
          DAST._IType _1959_typ = _1955___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _1960_name = _1954___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _1961_typeString;
            Dafny.ISequence<Dafny.Rune> _out159;
            _out159 = DCOMP.COMP.GenType(_1959_typ, true, false);
            _1961_typeString = _out159;
            Dafny.ISequence<Dafny.Rune> _1962_expr;
            bool _1963___v20;
            bool _1964_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1965_recIdents;
            Dafny.ISequence<Dafny.Rune> _out160;
            bool _out161;
            bool _out162;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out163;
            DCOMP.COMP.GenExpr(_1958_expression, selfIdent, @params, true, out _out160, out _out161, out _out162, out _out163);
            _1962_expr = _out160;
            _1963___v20 = _out161;
            _1964_recErased = _out162;
            _1965_recIdents = _out163;
            if (!(_1964_recErased)) {
              _1962_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1962_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _1962_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1961_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _1962_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_1960_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _1961_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _1962_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = _1965_recIdents;
          }
        } else {
          DAST._IType _1966_typ = _1955___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _1967_name = _1954___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _1968_typeString;
            Dafny.ISequence<Dafny.Rune> _out164;
            _out164 = DCOMP.COMP.GenType(_1966_typ, true, false);
            _1968_typeString = _out164;
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_1967_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _1968_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source125.is_Assign) {
        DAST._IAssignLhs _1969___mcc_h4 = _source125.dtor_lhs;
        DAST._IExpression _1970___mcc_h5 = _source125.dtor_value;
        DAST._IExpression _1971_expression = _1970___mcc_h5;
        DAST._IAssignLhs _1972_lhs = _1969___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _1973_lhsGen;
          bool _1974_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1975_recIdents;
          Dafny.ISequence<Dafny.Rune> _out165;
          bool _out166;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out167;
          DCOMP.COMP.GenAssignLhs(_1972_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), selfIdent, @params, out _out165, out _out166, out _out167);
          _1973_lhsGen = _out165;
          _1974_needsIIFE = _out166;
          _1975_recIdents = _out167;
          Dafny.ISequence<Dafny.Rune> _1976_exprGen;
          bool _1977___v21;
          bool _1978_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1979_exprIdents;
          Dafny.ISequence<Dafny.Rune> _out168;
          bool _out169;
          bool _out170;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out171;
          DCOMP.COMP.GenExpr(_1971_expression, selfIdent, @params, true, out _out168, out _out169, out _out170, out _out171);
          _1976_exprGen = _out168;
          _1977___v21 = _out169;
          _1978_exprErased = _out170;
          _1979_exprIdents = _out171;
          if (!(_1978_exprErased)) {
            _1976_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1976_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          _1976_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1976_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          if (_1974_needsIIFE) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet __rhs = "), _1976_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _1973_lhsGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1973_lhsGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _1976_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_1975_recIdents, _1979_exprIdents);
        }
      } else if (_source125.is_If) {
        DAST._IExpression _1980___mcc_h6 = _source125.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _1981___mcc_h7 = _source125.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _1982___mcc_h8 = _source125.dtor_els;
        Dafny.ISequence<DAST._IStatement> _1983_els = _1982___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _1984_thn = _1981___mcc_h7;
        DAST._IExpression _1985_cond = _1980___mcc_h6;
        {
          Dafny.ISequence<Dafny.Rune> _1986_condString;
          bool _1987___v22;
          bool _1988_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1989_recIdents;
          Dafny.ISequence<Dafny.Rune> _out172;
          bool _out173;
          bool _out174;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out175;
          DCOMP.COMP.GenExpr(_1985_cond, selfIdent, @params, true, out _out172, out _out173, out _out174, out _out175);
          _1986_condString = _out172;
          _1987___v22 = _out173;
          _1988_condErased = _out174;
          _1989_recIdents = _out175;
          if (!(_1988_condErased)) {
            _1986_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1986_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _1989_recIdents;
          Dafny.ISequence<Dafny.Rune> _1990_thnString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1991_thnIdents;
          Dafny.ISequence<Dafny.Rune> _out176;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out177;
          DCOMP.COMP.GenStmts(_1984_thn, selfIdent, @params, isLast, earlyReturn, out _out176, out _out177);
          _1990_thnString = _out176;
          _1991_thnIdents = _out177;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1991_thnIdents);
          Dafny.ISequence<Dafny.Rune> _1992_elsString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1993_elsIdents;
          Dafny.ISequence<Dafny.Rune> _out178;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out179;
          DCOMP.COMP.GenStmts(_1983_els, selfIdent, @params, isLast, earlyReturn, out _out178, out _out179);
          _1992_elsString = _out178;
          _1993_elsIdents = _out179;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1993_elsIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if "), _1986_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1990_thnString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _1992_elsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source125.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _1994___mcc_h9 = _source125.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _1995___mcc_h10 = _source125.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1996_body = _1995___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _1997_lbl = _1994___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _1998_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1999_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out180;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out181;
          DCOMP.COMP.GenStmts(_1996_body, selfIdent, @params, isLast, earlyReturn, out _out180, out _out181);
          _1998_bodyString = _out180;
          _1999_bodyIdents = _out181;
          readIdents = _1999_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'label_"), _1997_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": loop {\n")), _1998_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source125.is_While) {
        DAST._IExpression _2000___mcc_h11 = _source125.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _2001___mcc_h12 = _source125.dtor_body;
        Dafny.ISequence<DAST._IStatement> _2002_body = _2001___mcc_h12;
        DAST._IExpression _2003_cond = _2000___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _2004_condString;
          bool _2005___v23;
          bool _2006_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2007_recIdents;
          Dafny.ISequence<Dafny.Rune> _out182;
          bool _out183;
          bool _out184;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out185;
          DCOMP.COMP.GenExpr(_2003_cond, selfIdent, @params, true, out _out182, out _out183, out _out184, out _out185);
          _2004_condString = _out182;
          _2005___v23 = _out183;
          _2006_condErased = _out184;
          _2007_recIdents = _out185;
          if (!(_2006_condErased)) {
            _2004_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2004_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _2007_recIdents;
          Dafny.ISequence<Dafny.Rune> _2008_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2009_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out186;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out187;
          DCOMP.COMP.GenStmts(_2002_body, selfIdent, @params, false, earlyReturn, out _out186, out _out187);
          _2008_bodyString = _out186;
          _2009_bodyIdents = _out187;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2009_bodyIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while "), _2004_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _2008_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source125.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _2010___mcc_h13 = _source125.dtor_boundName;
        DAST._IType _2011___mcc_h14 = _source125.dtor_boundType;
        DAST._IExpression _2012___mcc_h15 = _source125.dtor_over;
        Dafny.ISequence<DAST._IStatement> _2013___mcc_h16 = _source125.dtor_body;
        Dafny.ISequence<DAST._IStatement> _2014_body = _2013___mcc_h16;
        DAST._IExpression _2015_over = _2012___mcc_h15;
        DAST._IType _2016_boundType = _2011___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _2017_boundName = _2010___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _2018_overString;
          bool _2019___v24;
          bool _2020_overErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2021_recIdents;
          Dafny.ISequence<Dafny.Rune> _out188;
          bool _out189;
          bool _out190;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out191;
          DCOMP.COMP.GenExpr(_2015_over, selfIdent, @params, true, out _out188, out _out189, out _out190, out _out191);
          _2018_overString = _out188;
          _2019___v24 = _out189;
          _2020_overErased = _out190;
          _2021_recIdents = _out191;
          Dafny.ISequence<Dafny.Rune> _2022_boundTypeStr;
          Dafny.ISequence<Dafny.Rune> _out192;
          _out192 = DCOMP.COMP.GenType(_2016_boundType, false, false);
          _2022_boundTypeStr = _out192;
          readIdents = _2021_recIdents;
          Dafny.ISequence<Dafny.Rune> _2023_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2024_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out193;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out194;
          DCOMP.COMP.GenStmts(_2014_body, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(@params, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_2017_boundName)), false, earlyReturn, out _out193, out _out194);
          _2023_bodyString = _out193;
          _2024_bodyIdents = _out194;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2024_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2017_boundName));
          Dafny.ISequence<Dafny.Rune> _2025_unerasedIter;
          _2025_unerasedIter = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_iter_erased");
          if (_2020_overErased) {
            _2025_unerasedIter = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2022_boundTypeStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _2025_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for _iter_erased in "), _2018_overString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_2017_boundName)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _2025_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _2023_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source125.is_Call) {
        DAST._IExpression _2026___mcc_h17 = _source125.dtor_on;
        Dafny.ISequence<Dafny.Rune> _2027___mcc_h18 = _source125.dtor_name;
        Dafny.ISequence<DAST._IType> _2028___mcc_h19 = _source125.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _2029___mcc_h20 = _source125.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _2030___mcc_h21 = _source125.dtor_outs;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _2031_maybeOutVars = _2030___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _2032_args = _2029___mcc_h20;
        Dafny.ISequence<DAST._IType> _2033_typeArgs = _2028___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _2034_name = _2027___mcc_h18;
        DAST._IExpression _2035_on = _2026___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _2036_typeArgString;
          _2036_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_2033_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _2037_typeI;
            _2037_typeI = BigInteger.Zero;
            _2036_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_2037_typeI) < (new BigInteger((_2033_typeArgs).Count))) {
              if ((_2037_typeI).Sign == 1) {
                _2036_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_2036_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _2038_typeString;
              Dafny.ISequence<Dafny.Rune> _out195;
              _out195 = DCOMP.COMP.GenType((_2033_typeArgs).Select(_2037_typeI), false, false);
              _2038_typeString = _out195;
              _2036_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_2036_typeArgString, _2038_typeString);
              _2037_typeI = (_2037_typeI) + (BigInteger.One);
            }
            _2036_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_2036_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _2039_argString;
          _2039_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _2040_i;
          _2040_i = BigInteger.Zero;
          while ((_2040_i) < (new BigInteger((_2032_args).Count))) {
            if ((_2040_i).Sign == 1) {
              _2039_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2039_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2041_argExpr;
            bool _2042_isOwned;
            bool _2043_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2044_argIdents;
            Dafny.ISequence<Dafny.Rune> _out196;
            bool _out197;
            bool _out198;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out199;
            DCOMP.COMP.GenExpr((_2032_args).Select(_2040_i), selfIdent, @params, false, out _out196, out _out197, out _out198, out _out199);
            _2041_argExpr = _out196;
            _2042_isOwned = _out197;
            _2043_argErased = _out198;
            _2044_argIdents = _out199;
            if (_2042_isOwned) {
              _2041_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _2041_argExpr);
            }
            _2039_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2039_argString, _2041_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2044_argIdents);
            _2040_i = (_2040_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _2045_enclosingString;
          bool _2046___v25;
          bool _2047___v26;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2048_enclosingIdents;
          Dafny.ISequence<Dafny.Rune> _out200;
          bool _out201;
          bool _out202;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out203;
          DCOMP.COMP.GenExpr(_2035_on, selfIdent, @params, false, out _out200, out _out201, out _out202, out _out203);
          _2045_enclosingString = _out200;
          _2046___v25 = _out201;
          _2047___v26 = _out202;
          _2048_enclosingIdents = _out203;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2048_enclosingIdents);
          DAST._IExpression _source127 = _2035_on;
          if (_source127.is_Literal) {
            DAST._ILiteral _2049___mcc_h26 = _source127.dtor_Literal_a0;
            {
              _2045_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2045_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source127.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _2050___mcc_h28 = _source127.dtor_Ident_a0;
            {
              _2045_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2045_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source127.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2051___mcc_h30 = _source127.dtor_Companion_a0;
            {
              _2045_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(_2045_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
            }
          } else if (_source127.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _2052___mcc_h32 = _source127.dtor_Tuple_a0;
            {
              _2045_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2045_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source127.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2053___mcc_h34 = _source127.dtor_path;
            Dafny.ISequence<DAST._IType> _2054___mcc_h35 = _source127.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _2055___mcc_h36 = _source127.dtor_args;
            {
              _2045_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2045_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source127.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _2056___mcc_h40 = _source127.dtor_dims;
            DAST._IType _2057___mcc_h41 = _source127.dtor_typ;
            {
              _2045_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2045_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source127.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2058___mcc_h44 = _source127.dtor_path;
            Dafny.ISequence<DAST._IType> _2059___mcc_h45 = _source127.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _2060___mcc_h46 = _source127.dtor_variant;
            bool _2061___mcc_h47 = _source127.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _2062___mcc_h48 = _source127.dtor_contents;
            {
              _2045_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2045_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source127.is_Convert) {
            DAST._IExpression _2063___mcc_h54 = _source127.dtor_value;
            DAST._IType _2064___mcc_h55 = _source127.dtor_from;
            DAST._IType _2065___mcc_h56 = _source127.dtor_typ;
            {
              _2045_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2045_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source127.is_SeqConstruct) {
            DAST._IExpression _2066___mcc_h60 = _source127.dtor_length;
            DAST._IExpression _2067___mcc_h61 = _source127.dtor_elem;
            {
              _2045_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2045_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source127.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _2068___mcc_h64 = _source127.dtor_elements;
            DAST._IType _2069___mcc_h65 = _source127.dtor_typ;
            {
              _2045_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2045_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source127.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _2070___mcc_h68 = _source127.dtor_elements;
            {
              _2045_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2045_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source127.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2071___mcc_h70 = _source127.dtor_mapElems;
            {
              _2045_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2045_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source127.is_This) {
            {
              _2045_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2045_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source127.is_Ite) {
            DAST._IExpression _2072___mcc_h72 = _source127.dtor_cond;
            DAST._IExpression _2073___mcc_h73 = _source127.dtor_thn;
            DAST._IExpression _2074___mcc_h74 = _source127.dtor_els;
            {
              _2045_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2045_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source127.is_UnOp) {
            DAST._IUnaryOp _2075___mcc_h78 = _source127.dtor_unOp;
            DAST._IExpression _2076___mcc_h79 = _source127.dtor_expr;
            {
              _2045_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2045_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source127.is_BinOp) {
            DAST._IBinOp _2077___mcc_h82 = _source127.dtor_op;
            DAST._IExpression _2078___mcc_h83 = _source127.dtor_left;
            DAST._IExpression _2079___mcc_h84 = _source127.dtor_right;
            {
              _2045_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2045_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source127.is_ArrayLen) {
            DAST._IExpression _2080___mcc_h88 = _source127.dtor_expr;
            BigInteger _2081___mcc_h89 = _source127.dtor_dim;
            {
              _2045_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2045_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source127.is_Select) {
            DAST._IExpression _2082___mcc_h92 = _source127.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _2083___mcc_h93 = _source127.dtor_field;
            bool _2084___mcc_h94 = _source127.dtor_isConstant;
            bool _2085___mcc_h95 = _source127.dtor_onDatatype;
            {
              _2045_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2045_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source127.is_SelectFn) {
            DAST._IExpression _2086___mcc_h100 = _source127.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _2087___mcc_h101 = _source127.dtor_field;
            bool _2088___mcc_h102 = _source127.dtor_onDatatype;
            bool _2089___mcc_h103 = _source127.dtor_isStatic;
            BigInteger _2090___mcc_h104 = _source127.dtor_arity;
            {
              _2045_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2045_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source127.is_Index) {
            DAST._IExpression _2091___mcc_h110 = _source127.dtor_expr;
            DAST._ICollKind _2092___mcc_h111 = _source127.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _2093___mcc_h112 = _source127.dtor_indices;
            {
              _2045_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2045_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source127.is_IndexRange) {
            DAST._IExpression _2094___mcc_h116 = _source127.dtor_expr;
            bool _2095___mcc_h117 = _source127.dtor_isArray;
            DAST._IOptional<DAST._IExpression> _2096___mcc_h118 = _source127.dtor_low;
            DAST._IOptional<DAST._IExpression> _2097___mcc_h119 = _source127.dtor_high;
            {
              _2045_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2045_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source127.is_TupleSelect) {
            DAST._IExpression _2098___mcc_h124 = _source127.dtor_expr;
            BigInteger _2099___mcc_h125 = _source127.dtor_index;
            {
              _2045_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2045_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source127.is_Call) {
            DAST._IExpression _2100___mcc_h128 = _source127.dtor_on;
            Dafny.ISequence<Dafny.Rune> _2101___mcc_h129 = _source127.dtor_name;
            Dafny.ISequence<DAST._IType> _2102___mcc_h130 = _source127.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _2103___mcc_h131 = _source127.dtor_args;
            {
              _2045_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2045_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source127.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _2104___mcc_h136 = _source127.dtor_params;
            DAST._IType _2105___mcc_h137 = _source127.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _2106___mcc_h138 = _source127.dtor_body;
            {
              _2045_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2045_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source127.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _2107___mcc_h142 = _source127.dtor_values;
            DAST._IType _2108___mcc_h143 = _source127.dtor_retType;
            DAST._IExpression _2109___mcc_h144 = _source127.dtor_expr;
            {
              _2045_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2045_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source127.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _2110___mcc_h148 = _source127.dtor_name;
            DAST._IType _2111___mcc_h149 = _source127.dtor_typ;
            DAST._IExpression _2112___mcc_h150 = _source127.dtor_value;
            DAST._IExpression _2113___mcc_h151 = _source127.dtor_iifeBody;
            {
              _2045_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2045_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source127.is_Apply) {
            DAST._IExpression _2114___mcc_h156 = _source127.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _2115___mcc_h157 = _source127.dtor_args;
            {
              _2045_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2045_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source127.is_TypeTest) {
            DAST._IExpression _2116___mcc_h160 = _source127.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2117___mcc_h161 = _source127.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _2118___mcc_h162 = _source127.dtor_variant;
            {
              _2045_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2045_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source127.is_InitializationValue) {
            DAST._IType _2119___mcc_h166 = _source127.dtor_typ;
            {
              _2045_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2045_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source127.is_BoolBoundedPool) {
            {
              _2045_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2045_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source127.is_SetBoundedPool) {
            DAST._IExpression _2120___mcc_h168 = _source127.dtor_of;
            {
              _2045_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2045_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source127.is_SeqBoundedPool) {
            DAST._IExpression _2121___mcc_h170 = _source127.dtor_of;
            bool _2122___mcc_h171 = _source127.dtor_includeDuplicates;
            {
              _2045_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2045_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else {
            DAST._IExpression _2123___mcc_h174 = _source127.dtor_lo;
            DAST._IExpression _2124___mcc_h175 = _source127.dtor_hi;
            {
              _2045_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2045_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          }
          Dafny.ISequence<Dafny.Rune> _2125_receiver;
          _2125_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source128 = _2031_maybeOutVars;
          if (_source128.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2126___mcc_h178 = _source128.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2127_outVars = _2126___mcc_h178;
            {
              if ((new BigInteger((_2127_outVars).Count)) > (BigInteger.One)) {
                _2125_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
              }
              BigInteger _2128_outI;
              _2128_outI = BigInteger.Zero;
              while ((_2128_outI) < (new BigInteger((_2127_outVars).Count))) {
                if ((_2128_outI).Sign == 1) {
                  _2125_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_2125_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                }
                Dafny.ISequence<Dafny.Rune> _2129_outVar;
                _2129_outVar = (_2127_outVars).Select(_2128_outI);
                _2125_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_2125_receiver, (_2129_outVar));
                _2128_outI = (_2128_outI) + (BigInteger.One);
              }
              if ((new BigInteger((_2127_outVars).Count)) > (BigInteger.One)) {
                _2125_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_2125_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
          } else {
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((!(_2125_receiver).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_2125_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), _2045_enclosingString), DCOMP.__default.escapeIdent(_2034_name)), _2036_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2039_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      } else if (_source125.is_Return) {
        DAST._IExpression _2130___mcc_h22 = _source125.dtor_expr;
        DAST._IExpression _2131_expr = _2130___mcc_h22;
        {
          Dafny.ISequence<Dafny.Rune> _2132_exprString;
          bool _2133___v29;
          bool _2134_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2135_recIdents;
          Dafny.ISequence<Dafny.Rune> _out204;
          bool _out205;
          bool _out206;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out207;
          DCOMP.COMP.GenExpr(_2131_expr, selfIdent, @params, true, out _out204, out _out205, out _out206, out _out207);
          _2132_exprString = _out204;
          _2133___v29 = _out205;
          _2134_recErased = _out206;
          _2135_recIdents = _out207;
          _2132_exprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned(::dafny_runtime::DafnyErasable::erase_owned("), _2132_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          readIdents = _2135_recIdents;
          if (isLast) {
            generated = _2132_exprString;
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return "), _2132_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
        }
      } else if (_source125.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source125.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _2136___mcc_h23 = _source125.dtor_toLabel;
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _2137_toLabel = _2136___mcc_h23;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source129 = _2137_toLabel;
          if (_source129.is_Some) {
            Dafny.ISequence<Dafny.Rune> _2138___mcc_h179 = _source129.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _2139_lbl = _2138___mcc_h179;
            {
              generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break 'label_"), _2139_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            }
          } else {
            {
              generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;");
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source125.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _2140___mcc_h24 = _source125.dtor_body;
        Dafny.ISequence<DAST._IStatement> _2141_body = _2140___mcc_h24;
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if (!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut _this = self.clone();\n"));
          }
          BigInteger _2142_paramI;
          _2142_paramI = BigInteger.Zero;
          while ((_2142_paramI) < (new BigInteger((@params).Count))) {
            Dafny.ISequence<Dafny.Rune> _2143_param;
            _2143_param = (@params).Select(_2142_paramI);
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut ")), DCOMP.__default.escapeIdent(_2143_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_2143_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
            _2142_paramI = (_2142_paramI) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _2144_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2145_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out208;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out209;
          DCOMP.COMP.GenStmts(_2141_body, ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), false, earlyReturn, out _out208, out _out209);
          _2144_bodyString = _out208;
          _2145_bodyIdents = _out209;
          readIdents = _2145_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'TAIL_CALL_START: loop {\n")), _2144_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source125.is_JumpTailCallStart) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue 'TAIL_CALL_START;");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source125.is_Halt) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else {
        DAST._IExpression _2146___mcc_h25 = _source125.dtor_Print_a0;
        DAST._IExpression _2147_e = _2146___mcc_h25;
        {
          Dafny.ISequence<Dafny.Rune> _2148_printedExpr;
          bool _2149_isOwned;
          bool _2150___v30;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2151_recIdents;
          Dafny.ISequence<Dafny.Rune> _out210;
          bool _out211;
          bool _out212;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out213;
          DCOMP.COMP.GenExpr(_2147_e, selfIdent, @params, false, out _out210, out _out211, out _out212, out _out213);
          _2148_printedExpr = _out210;
          _2149_isOwned = _out211;
          _2150___v30 = _out212;
          _2151_recIdents = _out213;
          if (_2149_isOwned) {
            _2148_printedExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _2148_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!(\"{}\", ::dafny_runtime::DafnyPrintWrapper("), _2148_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("));"));
          readIdents = _2151_recIdents;
        }
      }
    }
    public static void GenExpr(DAST._IExpression e, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool mustOwn, out Dafny.ISequence<Dafny.Rune> s, out bool isOwned, out bool isErased, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      isOwned = false;
      isErased = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source130 = e;
      if (_source130.is_Literal) {
        DAST._ILiteral _2152___mcc_h0 = _source130.dtor_Literal_a0;
        DAST._ILiteral _source131 = _2152___mcc_h0;
        if (_source131.is_BoolLiteral) {
          bool _2153___mcc_h1 = _source131.dtor_BoolLiteral_a0;
          if ((_2153___mcc_h1) == (false)) {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          }
        } else if (_source131.is_IntLiteral) {
          Dafny.ISequence<Dafny.Rune> _2154___mcc_h2 = _source131.dtor_IntLiteral_a0;
          DAST._IType _2155___mcc_h3 = _source131.dtor_IntLiteral_a1;
          DAST._IType _2156_t = _2155___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _2157_i = _2154___mcc_h2;
          {
            DAST._IType _source132 = _2156_t;
            if (_source132.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2158___mcc_h237 = _source132.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _2159___mcc_h238 = _source132.dtor_typeArgs;
              DAST._IResolvedType _2160___mcc_h239 = _source132.dtor_resolved;
              DAST._IType _2161_o = _2156_t;
              {
                Dafny.ISequence<Dafny.Rune> _2162_genType;
                Dafny.ISequence<Dafny.Rune> _out214;
                _out214 = DCOMP.COMP.GenType(_2161_o, false, false);
                _2162_genType = _out214;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2157_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _2162_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source132.is_Nullable) {
              DAST._IType _2163___mcc_h243 = _source132.dtor_Nullable_a0;
              DAST._IType _2164_o = _2156_t;
              {
                Dafny.ISequence<Dafny.Rune> _2165_genType;
                Dafny.ISequence<Dafny.Rune> _out215;
                _out215 = DCOMP.COMP.GenType(_2164_o, false, false);
                _2165_genType = _out215;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2157_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _2165_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source132.is_Tuple) {
              Dafny.ISequence<DAST._IType> _2166___mcc_h245 = _source132.dtor_Tuple_a0;
              DAST._IType _2167_o = _2156_t;
              {
                Dafny.ISequence<Dafny.Rune> _2168_genType;
                Dafny.ISequence<Dafny.Rune> _out216;
                _out216 = DCOMP.COMP.GenType(_2167_o, false, false);
                _2168_genType = _out216;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2157_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _2168_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source132.is_Array) {
              DAST._IType _2169___mcc_h247 = _source132.dtor_element;
              BigInteger _2170___mcc_h248 = _source132.dtor_dims;
              DAST._IType _2171_o = _2156_t;
              {
                Dafny.ISequence<Dafny.Rune> _2172_genType;
                Dafny.ISequence<Dafny.Rune> _out217;
                _out217 = DCOMP.COMP.GenType(_2171_o, false, false);
                _2172_genType = _out217;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2157_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _2172_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source132.is_Seq) {
              DAST._IType _2173___mcc_h251 = _source132.dtor_element;
              DAST._IType _2174_o = _2156_t;
              {
                Dafny.ISequence<Dafny.Rune> _2175_genType;
                Dafny.ISequence<Dafny.Rune> _out218;
                _out218 = DCOMP.COMP.GenType(_2174_o, false, false);
                _2175_genType = _out218;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2157_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _2175_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source132.is_Set) {
              DAST._IType _2176___mcc_h253 = _source132.dtor_element;
              DAST._IType _2177_o = _2156_t;
              {
                Dafny.ISequence<Dafny.Rune> _2178_genType;
                Dafny.ISequence<Dafny.Rune> _out219;
                _out219 = DCOMP.COMP.GenType(_2177_o, false, false);
                _2178_genType = _out219;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2157_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _2178_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source132.is_Multiset) {
              DAST._IType _2179___mcc_h255 = _source132.dtor_element;
              DAST._IType _2180_o = _2156_t;
              {
                Dafny.ISequence<Dafny.Rune> _2181_genType;
                Dafny.ISequence<Dafny.Rune> _out220;
                _out220 = DCOMP.COMP.GenType(_2180_o, false, false);
                _2181_genType = _out220;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2157_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _2181_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source132.is_Map) {
              DAST._IType _2182___mcc_h257 = _source132.dtor_key;
              DAST._IType _2183___mcc_h258 = _source132.dtor_value;
              DAST._IType _2184_o = _2156_t;
              {
                Dafny.ISequence<Dafny.Rune> _2185_genType;
                Dafny.ISequence<Dafny.Rune> _out221;
                _out221 = DCOMP.COMP.GenType(_2184_o, false, false);
                _2185_genType = _out221;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2157_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _2185_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source132.is_Arrow) {
              Dafny.ISequence<DAST._IType> _2186___mcc_h261 = _source132.dtor_args;
              DAST._IType _2187___mcc_h262 = _source132.dtor_result;
              DAST._IType _2188_o = _2156_t;
              {
                Dafny.ISequence<Dafny.Rune> _2189_genType;
                Dafny.ISequence<Dafny.Rune> _out222;
                _out222 = DCOMP.COMP.GenType(_2188_o, false, false);
                _2189_genType = _out222;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2157_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _2189_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source132.is_Primitive) {
              DAST._IPrimitive _2190___mcc_h265 = _source132.dtor_Primitive_a0;
              DAST._IPrimitive _source133 = _2190___mcc_h265;
              if (_source133.is_Int) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::parse_bytes(b\""), _2157_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap()"));
                }
              } else if (_source133.is_Real) {
                DAST._IType _2191_o = _2156_t;
                {
                  Dafny.ISequence<Dafny.Rune> _2192_genType;
                  Dafny.ISequence<Dafny.Rune> _out223;
                  _out223 = DCOMP.COMP.GenType(_2191_o, false, false);
                  _2192_genType = _out223;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2157_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _2192_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source133.is_String) {
                DAST._IType _2193_o = _2156_t;
                {
                  Dafny.ISequence<Dafny.Rune> _2194_genType;
                  Dafny.ISequence<Dafny.Rune> _out224;
                  _out224 = DCOMP.COMP.GenType(_2193_o, false, false);
                  _2194_genType = _out224;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2157_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _2194_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source133.is_Bool) {
                DAST._IType _2195_o = _2156_t;
                {
                  Dafny.ISequence<Dafny.Rune> _2196_genType;
                  Dafny.ISequence<Dafny.Rune> _out225;
                  _out225 = DCOMP.COMP.GenType(_2195_o, false, false);
                  _2196_genType = _out225;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2157_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _2196_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _2197_o = _2156_t;
                {
                  Dafny.ISequence<Dafny.Rune> _2198_genType;
                  Dafny.ISequence<Dafny.Rune> _out226;
                  _out226 = DCOMP.COMP.GenType(_2197_o, false, false);
                  _2198_genType = _out226;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2157_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _2198_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source132.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _2199___mcc_h267 = _source132.dtor_Passthrough_a0;
              DAST._IType _2200_o = _2156_t;
              {
                Dafny.ISequence<Dafny.Rune> _2201_genType;
                Dafny.ISequence<Dafny.Rune> _out227;
                _out227 = DCOMP.COMP.GenType(_2200_o, false, false);
                _2201_genType = _out227;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2157_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _2201_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2202___mcc_h269 = _source132.dtor_TypeArg_a0;
              DAST._IType _2203_o = _2156_t;
              {
                Dafny.ISequence<Dafny.Rune> _2204_genType;
                Dafny.ISequence<Dafny.Rune> _out228;
                _out228 = DCOMP.COMP.GenType(_2203_o, false, false);
                _2204_genType = _out228;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2157_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _2204_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source131.is_DecLiteral) {
          Dafny.ISequence<Dafny.Rune> _2205___mcc_h4 = _source131.dtor_DecLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _2206___mcc_h5 = _source131.dtor_DecLiteral_a1;
          DAST._IType _2207___mcc_h6 = _source131.dtor_DecLiteral_a2;
          DAST._IType _2208_t = _2207___mcc_h6;
          Dafny.ISequence<Dafny.Rune> _2209_d = _2206___mcc_h5;
          Dafny.ISequence<Dafny.Rune> _2210_n = _2205___mcc_h4;
          {
            DAST._IType _source134 = _2208_t;
            if (_source134.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2211___mcc_h271 = _source134.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _2212___mcc_h272 = _source134.dtor_typeArgs;
              DAST._IResolvedType _2213___mcc_h273 = _source134.dtor_resolved;
              DAST._IType _2214_o = _2208_t;
              {
                Dafny.ISequence<Dafny.Rune> _2215_genType;
                Dafny.ISequence<Dafny.Rune> _out229;
                _out229 = DCOMP.COMP.GenType(_2214_o, false, false);
                _2215_genType = _out229;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2210_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2209_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _2215_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source134.is_Nullable) {
              DAST._IType _2216___mcc_h277 = _source134.dtor_Nullable_a0;
              DAST._IType _2217_o = _2208_t;
              {
                Dafny.ISequence<Dafny.Rune> _2218_genType;
                Dafny.ISequence<Dafny.Rune> _out230;
                _out230 = DCOMP.COMP.GenType(_2217_o, false, false);
                _2218_genType = _out230;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2210_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2209_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _2218_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source134.is_Tuple) {
              Dafny.ISequence<DAST._IType> _2219___mcc_h279 = _source134.dtor_Tuple_a0;
              DAST._IType _2220_o = _2208_t;
              {
                Dafny.ISequence<Dafny.Rune> _2221_genType;
                Dafny.ISequence<Dafny.Rune> _out231;
                _out231 = DCOMP.COMP.GenType(_2220_o, false, false);
                _2221_genType = _out231;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2210_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2209_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _2221_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source134.is_Array) {
              DAST._IType _2222___mcc_h281 = _source134.dtor_element;
              BigInteger _2223___mcc_h282 = _source134.dtor_dims;
              DAST._IType _2224_o = _2208_t;
              {
                Dafny.ISequence<Dafny.Rune> _2225_genType;
                Dafny.ISequence<Dafny.Rune> _out232;
                _out232 = DCOMP.COMP.GenType(_2224_o, false, false);
                _2225_genType = _out232;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2210_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2209_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _2225_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source134.is_Seq) {
              DAST._IType _2226___mcc_h285 = _source134.dtor_element;
              DAST._IType _2227_o = _2208_t;
              {
                Dafny.ISequence<Dafny.Rune> _2228_genType;
                Dafny.ISequence<Dafny.Rune> _out233;
                _out233 = DCOMP.COMP.GenType(_2227_o, false, false);
                _2228_genType = _out233;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2210_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2209_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _2228_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source134.is_Set) {
              DAST._IType _2229___mcc_h287 = _source134.dtor_element;
              DAST._IType _2230_o = _2208_t;
              {
                Dafny.ISequence<Dafny.Rune> _2231_genType;
                Dafny.ISequence<Dafny.Rune> _out234;
                _out234 = DCOMP.COMP.GenType(_2230_o, false, false);
                _2231_genType = _out234;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2210_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2209_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _2231_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source134.is_Multiset) {
              DAST._IType _2232___mcc_h289 = _source134.dtor_element;
              DAST._IType _2233_o = _2208_t;
              {
                Dafny.ISequence<Dafny.Rune> _2234_genType;
                Dafny.ISequence<Dafny.Rune> _out235;
                _out235 = DCOMP.COMP.GenType(_2233_o, false, false);
                _2234_genType = _out235;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2210_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2209_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _2234_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source134.is_Map) {
              DAST._IType _2235___mcc_h291 = _source134.dtor_key;
              DAST._IType _2236___mcc_h292 = _source134.dtor_value;
              DAST._IType _2237_o = _2208_t;
              {
                Dafny.ISequence<Dafny.Rune> _2238_genType;
                Dafny.ISequence<Dafny.Rune> _out236;
                _out236 = DCOMP.COMP.GenType(_2237_o, false, false);
                _2238_genType = _out236;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2210_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2209_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _2238_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source134.is_Arrow) {
              Dafny.ISequence<DAST._IType> _2239___mcc_h295 = _source134.dtor_args;
              DAST._IType _2240___mcc_h296 = _source134.dtor_result;
              DAST._IType _2241_o = _2208_t;
              {
                Dafny.ISequence<Dafny.Rune> _2242_genType;
                Dafny.ISequence<Dafny.Rune> _out237;
                _out237 = DCOMP.COMP.GenType(_2241_o, false, false);
                _2242_genType = _out237;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2210_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2209_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _2242_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source134.is_Primitive) {
              DAST._IPrimitive _2243___mcc_h299 = _source134.dtor_Primitive_a0;
              DAST._IPrimitive _source135 = _2243___mcc_h299;
              if (_source135.is_Int) {
                DAST._IType _2244_o = _2208_t;
                {
                  Dafny.ISequence<Dafny.Rune> _2245_genType;
                  Dafny.ISequence<Dafny.Rune> _out238;
                  _out238 = DCOMP.COMP.GenType(_2244_o, false, false);
                  _2245_genType = _out238;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2210_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2209_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _2245_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source135.is_Real) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _2210_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _2209_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"));
                }
              } else if (_source135.is_String) {
                DAST._IType _2246_o = _2208_t;
                {
                  Dafny.ISequence<Dafny.Rune> _2247_genType;
                  Dafny.ISequence<Dafny.Rune> _out239;
                  _out239 = DCOMP.COMP.GenType(_2246_o, false, false);
                  _2247_genType = _out239;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2210_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2209_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _2247_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source135.is_Bool) {
                DAST._IType _2248_o = _2208_t;
                {
                  Dafny.ISequence<Dafny.Rune> _2249_genType;
                  Dafny.ISequence<Dafny.Rune> _out240;
                  _out240 = DCOMP.COMP.GenType(_2248_o, false, false);
                  _2249_genType = _out240;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2210_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2209_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _2249_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _2250_o = _2208_t;
                {
                  Dafny.ISequence<Dafny.Rune> _2251_genType;
                  Dafny.ISequence<Dafny.Rune> _out241;
                  _out241 = DCOMP.COMP.GenType(_2250_o, false, false);
                  _2251_genType = _out241;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2210_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2209_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _2251_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source134.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _2252___mcc_h301 = _source134.dtor_Passthrough_a0;
              DAST._IType _2253_o = _2208_t;
              {
                Dafny.ISequence<Dafny.Rune> _2254_genType;
                Dafny.ISequence<Dafny.Rune> _out242;
                _out242 = DCOMP.COMP.GenType(_2253_o, false, false);
                _2254_genType = _out242;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2210_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2209_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _2254_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2255___mcc_h303 = _source134.dtor_TypeArg_a0;
              DAST._IType _2256_o = _2208_t;
              {
                Dafny.ISequence<Dafny.Rune> _2257_genType;
                Dafny.ISequence<Dafny.Rune> _out243;
                _out243 = DCOMP.COMP.GenType(_2256_o, false, false);
                _2257_genType = _out243;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2210_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2209_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _2257_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source131.is_StringLiteral) {
          Dafny.ISequence<Dafny.Rune> _2258___mcc_h7 = _source131.dtor_StringLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _2259_l = _2258___mcc_h7;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""), _2259_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\".chars().collect::<Vec<char>>()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source131.is_CharLiteral) {
          Dafny.Rune _2260___mcc_h8 = _source131.dtor_CharLiteral_a0;
          Dafny.Rune _2261_c = _2260___mcc_h8;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::primitive::char::from_u32("), DCOMP.__default.natToString(new BigInteger((_2261_c).Value))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IType _2262___mcc_h9 = _source131.dtor_Null_a0;
          DAST._IType _2263_tpe = _2262___mcc_h9;
          {
            Dafny.ISequence<Dafny.Rune> _2264_tpeGen;
            Dafny.ISequence<Dafny.Rune> _out244;
            _out244 = DCOMP.COMP.GenType(_2263_tpe, false, false);
            _2264_tpeGen = _out244;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(None as "), _2264_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source130.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _2265___mcc_h10 = _source130.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _2266_name = _2265___mcc_h10;
        {
          s = DCOMP.__default.escapeIdent(_2266_name);
          if (!((@params).Contains(_2266_name))) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            isOwned = false;
          }
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2266_name);
        }
      } else if (_source130.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2267___mcc_h11 = _source130.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2268_path = _2267___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _out245;
          _out245 = DCOMP.COMP.GenPath(_2268_path);
          s = _out245;
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source130.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _2269___mcc_h12 = _source130.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IExpression> _2270_values = _2269___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2271_i;
          _2271_i = BigInteger.Zero;
          while ((_2271_i) < (new BigInteger((_2270_values).Count))) {
            if ((_2271_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _2272_recursiveGen;
            bool _2273___v31;
            bool _2274_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2275_recIdents;
            Dafny.ISequence<Dafny.Rune> _out246;
            bool _out247;
            bool _out248;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out249;
            DCOMP.COMP.GenExpr((_2270_values).Select(_2271_i), selfIdent, @params, true, out _out246, out _out247, out _out248, out _out249);
            _2272_recursiveGen = _out246;
            _2273___v31 = _out247;
            _2274_isErased = _out248;
            _2275_recIdents = _out249;
            if (_2274_isErased) {
              _2272_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2272_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _2272_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2275_recIdents);
            _2271_i = (_2271_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source130.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2276___mcc_h13 = _source130.dtor_path;
        Dafny.ISequence<DAST._IType> _2277___mcc_h14 = _source130.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _2278___mcc_h15 = _source130.dtor_args;
        Dafny.ISequence<DAST._IExpression> _2279_args = _2278___mcc_h15;
        Dafny.ISequence<DAST._IType> _2280_typeArgs = _2277___mcc_h14;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2281_path = _2276___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _2282_path;
          Dafny.ISequence<Dafny.Rune> _out250;
          _out250 = DCOMP.COMP.GenPath(_2281_path);
          _2282_path = _out250;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _2282_path);
          if ((new BigInteger((_2280_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<"));
            BigInteger _2283_i;
            _2283_i = BigInteger.Zero;
            while ((_2283_i) < (new BigInteger((_2280_typeArgs).Count))) {
              if ((_2283_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
              }
              Dafny.ISequence<Dafny.Rune> _2284_typeString;
              Dafny.ISequence<Dafny.Rune> _out251;
              _out251 = DCOMP.COMP.GenType((_2280_typeArgs).Select(_2283_i), false, false);
              _2284_typeString = _out251;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _2284_typeString);
              _2283_i = (_2283_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new("));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2285_i;
          _2285_i = BigInteger.Zero;
          while ((_2285_i) < (new BigInteger((_2279_args).Count))) {
            if ((_2285_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2286_recursiveGen;
            bool _2287___v32;
            bool _2288_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2289_recIdents;
            Dafny.ISequence<Dafny.Rune> _out252;
            bool _out253;
            bool _out254;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out255;
            DCOMP.COMP.GenExpr((_2279_args).Select(_2285_i), selfIdent, @params, true, out _out252, out _out253, out _out254, out _out255);
            _2286_recursiveGen = _out252;
            _2287___v32 = _out253;
            _2288_isErased = _out254;
            _2289_recIdents = _out255;
            if (_2288_isErased) {
              _2286_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2286_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _2286_recursiveGen);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2289_recIdents);
            _2285_i = (_2285_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = true;
        }
      } else if (_source130.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _2290___mcc_h16 = _source130.dtor_dims;
        DAST._IType _2291___mcc_h17 = _source130.dtor_typ;
        DAST._IType _2292_typ = _2291___mcc_h17;
        Dafny.ISequence<DAST._IExpression> _2293_dims = _2290___mcc_h16;
        {
          BigInteger _2294_i;
          _2294_i = (new BigInteger((_2293_dims).Count)) - (BigInteger.One);
          Dafny.ISequence<Dafny.Rune> _2295_genTyp;
          Dafny.ISequence<Dafny.Rune> _out256;
          _out256 = DCOMP.COMP.GenType(_2292_typ, false, false);
          _2295_genTyp = _out256;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2295_genTyp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::std::default::Default>::default()"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          while ((_2294_i).Sign != -1) {
            Dafny.ISequence<Dafny.Rune> _2296_recursiveGen;
            bool _2297___v33;
            bool _2298_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2299_recIdents;
            Dafny.ISequence<Dafny.Rune> _out257;
            bool _out258;
            bool _out259;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out260;
            DCOMP.COMP.GenExpr((_2293_dims).Select(_2294_i), selfIdent, @params, true, out _out257, out _out258, out _out259, out _out260);
            _2296_recursiveGen = _out257;
            _2297___v33 = _out258;
            _2298_isErased = _out259;
            _2299_recIdents = _out260;
            if (!(_2298_isErased)) {
              _2296_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2296_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::std::cell::RefCell::new(vec!["), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("; <usize as ::dafny_runtime::NumCast>::from(")), _2296_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]))"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2299_recIdents);
            _2294_i = (_2294_i) - (BigInteger.One);
          }
          isOwned = true;
          isErased = false;
        }
      } else if (_source130.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2300___mcc_h18 = _source130.dtor_path;
        Dafny.ISequence<DAST._IType> _2301___mcc_h19 = _source130.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _2302___mcc_h20 = _source130.dtor_variant;
        bool _2303___mcc_h21 = _source130.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _2304___mcc_h22 = _source130.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _2305_values = _2304___mcc_h22;
        bool _2306_isCo = _2303___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _2307_variant = _2302___mcc_h20;
        Dafny.ISequence<DAST._IType> _2308_typeArgs = _2301___mcc_h19;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2309_path = _2300___mcc_h18;
        {
          Dafny.ISequence<Dafny.Rune> _2310_path;
          Dafny.ISequence<Dafny.Rune> _out261;
          _out261 = DCOMP.COMP.GenPath(_2309_path);
          _2310_path = _out261;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _2310_path), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          if ((new BigInteger((_2308_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
            BigInteger _2311_i;
            _2311_i = BigInteger.Zero;
            while ((_2311_i) < (new BigInteger((_2308_typeArgs).Count))) {
              if ((_2311_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _2312_typeString;
              Dafny.ISequence<Dafny.Rune> _out262;
              _out262 = DCOMP.COMP.GenType((_2308_typeArgs).Select(_2311_i), false, false);
              _2312_typeString = _out262;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _2312_typeString);
              _2311_i = (_2311_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_2307_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2313_i;
          _2313_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"));
          while ((_2313_i) < (new BigInteger((_2305_values).Count))) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs48 = (_2305_values).Select(_2313_i);
            Dafny.ISequence<Dafny.Rune> _2314_name = _let_tmp_rhs48.dtor__0;
            DAST._IExpression _2315_value = _let_tmp_rhs48.dtor__1;
            if ((_2313_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            if (_2306_isCo) {
              Dafny.ISequence<Dafny.Rune> _2316_recursiveGen;
              bool _2317___v34;
              bool _2318_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2319_recIdents;
              Dafny.ISequence<Dafny.Rune> _out263;
              bool _out264;
              bool _out265;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out266;
              DCOMP.COMP.GenExpr(_2315_value, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out263, out _out264, out _out265, out _out266);
              _2316_recursiveGen = _out263;
              _2317___v34 = _out264;
              _2318_isErased = _out265;
              _2319_recIdents = _out266;
              if (!(_2318_isErased)) {
                _2316_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2316_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _2316_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2316_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2319_recIdents);
              Dafny.ISequence<Dafny.Rune> _2320_allReadCloned;
              _2320_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_2319_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _2321_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_2 in (_2319_recIdents).Elements) {
                  _2321_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_2;
                  if ((_2319_recIdents).Contains(_2321_next)) {
                    goto after__ASSIGN_SUCH_THAT_2;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 1242)");
              after__ASSIGN_SUCH_THAT_2:;
                _2320_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2320_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_2321_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_2321_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _2319_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_2319_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2321_next));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_2314_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n")), _2320_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), _2316_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
            } else {
              Dafny.ISequence<Dafny.Rune> _2322_recursiveGen;
              bool _2323___v35;
              bool _2324_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2325_recIdents;
              Dafny.ISequence<Dafny.Rune> _out267;
              bool _out268;
              bool _out269;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out270;
              DCOMP.COMP.GenExpr(_2315_value, selfIdent, @params, true, out _out267, out _out268, out _out269, out _out270);
              _2322_recursiveGen = _out267;
              _2323___v35 = _out268;
              _2324_isErased = _out269;
              _2325_recIdents = _out270;
              if (!(_2324_isErased)) {
                _2322_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2322_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _2322_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2322_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_2314_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2322_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2325_recIdents);
            }
            _2313_i = (_2313_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" })"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source130.is_Convert) {
        DAST._IExpression _2326___mcc_h23 = _source130.dtor_value;
        DAST._IType _2327___mcc_h24 = _source130.dtor_from;
        DAST._IType _2328___mcc_h25 = _source130.dtor_typ;
        DAST._IType _2329_toTpe = _2328___mcc_h25;
        DAST._IType _2330_fromTpe = _2327___mcc_h24;
        DAST._IExpression _2331_expr = _2326___mcc_h23;
        {
          if (object.Equals(_2330_fromTpe, _2329_toTpe)) {
            Dafny.ISequence<Dafny.Rune> _2332_recursiveGen;
            bool _2333_recOwned;
            bool _2334_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2335_recIdents;
            Dafny.ISequence<Dafny.Rune> _out271;
            bool _out272;
            bool _out273;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out274;
            DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out271, out _out272, out _out273, out _out274);
            _2332_recursiveGen = _out271;
            _2333_recOwned = _out272;
            _2334_recErased = _out273;
            _2335_recIdents = _out274;
            s = _2332_recursiveGen;
            isOwned = _2333_recOwned;
            isErased = _2334_recErased;
            readIdents = _2335_recIdents;
          } else {
            _System._ITuple2<DAST._IType, DAST._IType> _source136 = _System.Tuple2<DAST._IType, DAST._IType>.create(_2330_fromTpe, _2329_toTpe);
            DAST._IType _2336___mcc_h305 = _source136.dtor__0;
            DAST._IType _2337___mcc_h306 = _source136.dtor__1;
            DAST._IType _source137 = _2336___mcc_h305;
            if (_source137.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2338___mcc_h309 = _source137.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _2339___mcc_h310 = _source137.dtor_typeArgs;
              DAST._IResolvedType _2340___mcc_h311 = _source137.dtor_resolved;
              DAST._IResolvedType _source138 = _2340___mcc_h311;
              if (_source138.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2341___mcc_h321 = _source138.dtor_path;
                DAST._IType _source139 = _2337___mcc_h306;
                if (_source139.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2342___mcc_h325 = _source139.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2343___mcc_h326 = _source139.dtor_typeArgs;
                  DAST._IResolvedType _2344___mcc_h327 = _source139.dtor_resolved;
                  DAST._IResolvedType _source140 = _2344___mcc_h327;
                  if (_source140.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2345___mcc_h331 = _source140.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2346_recursiveGen;
                      bool _2347_recOwned;
                      bool _2348_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2349_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out275;
                      bool _out276;
                      bool _out277;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out278;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out275, out _out276, out _out277, out _out278);
                      _2346_recursiveGen = _out275;
                      _2347_recOwned = _out276;
                      _2348_recErased = _out277;
                      _2349_recIdents = _out278;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2346_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2347_recOwned;
                      isErased = _2348_recErased;
                      readIdents = _2349_recIdents;
                    }
                  } else if (_source140.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2350___mcc_h333 = _source140.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2351_recursiveGen;
                      bool _2352_recOwned;
                      bool _2353_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2354_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out279;
                      bool _out280;
                      bool _out281;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out282;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out279, out _out280, out _out281, out _out282);
                      _2351_recursiveGen = _out279;
                      _2352_recOwned = _out280;
                      _2353_recErased = _out281;
                      _2354_recIdents = _out282;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2351_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2352_recOwned;
                      isErased = _2353_recErased;
                      readIdents = _2354_recIdents;
                    }
                  } else {
                    DAST._IType _2355___mcc_h335 = _source140.dtor_Newtype_a0;
                    DAST._IType _2356_b = _2355___mcc_h335;
                    {
                      if (object.Equals(_2330_fromTpe, _2356_b)) {
                        Dafny.ISequence<Dafny.Rune> _2357_recursiveGen;
                        bool _2358_recOwned;
                        bool _2359_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2360_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out283;
                        bool _out284;
                        bool _out285;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out286;
                        DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out283, out _out284, out _out285, out _out286);
                        _2357_recursiveGen = _out283;
                        _2358_recOwned = _out284;
                        _2359_recErased = _out285;
                        _2360_recIdents = _out286;
                        Dafny.ISequence<Dafny.Rune> _2361_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out287;
                        _out287 = DCOMP.COMP.GenType(_2329_toTpe, true, false);
                        _2361_rhsType = _out287;
                        Dafny.ISequence<Dafny.Rune> _2362_uneraseFn;
                        _2362_uneraseFn = ((_2358_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2361_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2362_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2357_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2358_recOwned;
                        isErased = false;
                        readIdents = _2360_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out288;
                        bool _out289;
                        bool _out290;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out291;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2331_expr, _2330_fromTpe, _2356_b), _2356_b, _2329_toTpe), selfIdent, @params, mustOwn, out _out288, out _out289, out _out290, out _out291);
                        s = _out288;
                        isOwned = _out289;
                        isErased = _out290;
                        readIdents = _out291;
                      }
                    }
                  }
                } else if (_source139.is_Nullable) {
                  DAST._IType _2363___mcc_h337 = _source139.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2364_recursiveGen;
                    bool _2365_recOwned;
                    bool _2366_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2367_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out292;
                    bool _out293;
                    bool _out294;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out295;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out292, out _out293, out _out294, out _out295);
                    _2364_recursiveGen = _out292;
                    _2365_recOwned = _out293;
                    _2366_recErased = _out294;
                    _2367_recIdents = _out295;
                    if (!(_2365_recOwned)) {
                      _2364_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2364_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2364_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2366_recErased;
                    readIdents = _2367_recIdents;
                  }
                } else if (_source139.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2368___mcc_h339 = _source139.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2369_recursiveGen;
                    bool _2370_recOwned;
                    bool _2371_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2372_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out296;
                    bool _out297;
                    bool _out298;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out299;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out296, out _out297, out _out298, out _out299);
                    _2369_recursiveGen = _out296;
                    _2370_recOwned = _out297;
                    _2371_recErased = _out298;
                    _2372_recIdents = _out299;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2369_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2370_recOwned;
                    isErased = _2371_recErased;
                    readIdents = _2372_recIdents;
                  }
                } else if (_source139.is_Array) {
                  DAST._IType _2373___mcc_h341 = _source139.dtor_element;
                  BigInteger _2374___mcc_h342 = _source139.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2375_recursiveGen;
                    bool _2376_recOwned;
                    bool _2377_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2378_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out300;
                    bool _out301;
                    bool _out302;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out303;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out300, out _out301, out _out302, out _out303);
                    _2375_recursiveGen = _out300;
                    _2376_recOwned = _out301;
                    _2377_recErased = _out302;
                    _2378_recIdents = _out303;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2375_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2376_recOwned;
                    isErased = _2377_recErased;
                    readIdents = _2378_recIdents;
                  }
                } else if (_source139.is_Seq) {
                  DAST._IType _2379___mcc_h345 = _source139.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2380_recursiveGen;
                    bool _2381_recOwned;
                    bool _2382_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2383_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out304;
                    bool _out305;
                    bool _out306;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out307;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out304, out _out305, out _out306, out _out307);
                    _2380_recursiveGen = _out304;
                    _2381_recOwned = _out305;
                    _2382_recErased = _out306;
                    _2383_recIdents = _out307;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2380_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2381_recOwned;
                    isErased = _2382_recErased;
                    readIdents = _2383_recIdents;
                  }
                } else if (_source139.is_Set) {
                  DAST._IType _2384___mcc_h347 = _source139.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2385_recursiveGen;
                    bool _2386_recOwned;
                    bool _2387_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2388_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out308;
                    bool _out309;
                    bool _out310;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out311;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out308, out _out309, out _out310, out _out311);
                    _2385_recursiveGen = _out308;
                    _2386_recOwned = _out309;
                    _2387_recErased = _out310;
                    _2388_recIdents = _out311;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2385_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2386_recOwned;
                    isErased = _2387_recErased;
                    readIdents = _2388_recIdents;
                  }
                } else if (_source139.is_Multiset) {
                  DAST._IType _2389___mcc_h349 = _source139.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2390_recursiveGen;
                    bool _2391_recOwned;
                    bool _2392_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2393_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out312;
                    bool _out313;
                    bool _out314;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out315;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out312, out _out313, out _out314, out _out315);
                    _2390_recursiveGen = _out312;
                    _2391_recOwned = _out313;
                    _2392_recErased = _out314;
                    _2393_recIdents = _out315;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2390_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2391_recOwned;
                    isErased = _2392_recErased;
                    readIdents = _2393_recIdents;
                  }
                } else if (_source139.is_Map) {
                  DAST._IType _2394___mcc_h351 = _source139.dtor_key;
                  DAST._IType _2395___mcc_h352 = _source139.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2396_recursiveGen;
                    bool _2397_recOwned;
                    bool _2398_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2399_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out316;
                    bool _out317;
                    bool _out318;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out319;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out316, out _out317, out _out318, out _out319);
                    _2396_recursiveGen = _out316;
                    _2397_recOwned = _out317;
                    _2398_recErased = _out318;
                    _2399_recIdents = _out319;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2396_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2397_recOwned;
                    isErased = _2398_recErased;
                    readIdents = _2399_recIdents;
                  }
                } else if (_source139.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2400___mcc_h355 = _source139.dtor_args;
                  DAST._IType _2401___mcc_h356 = _source139.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2402_recursiveGen;
                    bool _2403_recOwned;
                    bool _2404_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2405_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out320;
                    bool _out321;
                    bool _out322;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out323;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out320, out _out321, out _out322, out _out323);
                    _2402_recursiveGen = _out320;
                    _2403_recOwned = _out321;
                    _2404_recErased = _out322;
                    _2405_recIdents = _out323;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2402_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2403_recOwned;
                    isErased = _2404_recErased;
                    readIdents = _2405_recIdents;
                  }
                } else if (_source139.is_Primitive) {
                  DAST._IPrimitive _2406___mcc_h359 = _source139.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2407_recursiveGen;
                    bool _2408_recOwned;
                    bool _2409_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2410_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out324;
                    bool _out325;
                    bool _out326;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out327;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out324, out _out325, out _out326, out _out327);
                    _2407_recursiveGen = _out324;
                    _2408_recOwned = _out325;
                    _2409_recErased = _out326;
                    _2410_recIdents = _out327;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2407_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2408_recOwned;
                    isErased = _2409_recErased;
                    readIdents = _2410_recIdents;
                  }
                } else if (_source139.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2411___mcc_h361 = _source139.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2412_recursiveGen;
                    bool _2413_recOwned;
                    bool _2414_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2415_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out328;
                    bool _out329;
                    bool _out330;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out331;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out328, out _out329, out _out330, out _out331);
                    _2412_recursiveGen = _out328;
                    _2413_recOwned = _out329;
                    _2414_recErased = _out330;
                    _2415_recIdents = _out331;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2412_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2413_recOwned;
                    isErased = _2414_recErased;
                    readIdents = _2415_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2416___mcc_h363 = _source139.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2417_recursiveGen;
                    bool _2418_recOwned;
                    bool _2419_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2420_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out332;
                    bool _out333;
                    bool _out334;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out335;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out332, out _out333, out _out334, out _out335);
                    _2417_recursiveGen = _out332;
                    _2418_recOwned = _out333;
                    _2419_recErased = _out334;
                    _2420_recIdents = _out335;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2417_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2418_recOwned;
                    isErased = _2419_recErased;
                    readIdents = _2420_recIdents;
                  }
                }
              } else if (_source138.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2421___mcc_h365 = _source138.dtor_path;
                DAST._IType _source141 = _2337___mcc_h306;
                if (_source141.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2422___mcc_h369 = _source141.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2423___mcc_h370 = _source141.dtor_typeArgs;
                  DAST._IResolvedType _2424___mcc_h371 = _source141.dtor_resolved;
                  DAST._IResolvedType _source142 = _2424___mcc_h371;
                  if (_source142.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2425___mcc_h375 = _source142.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2426_recursiveGen;
                      bool _2427_recOwned;
                      bool _2428_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2429_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out336;
                      bool _out337;
                      bool _out338;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out339;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out336, out _out337, out _out338, out _out339);
                      _2426_recursiveGen = _out336;
                      _2427_recOwned = _out337;
                      _2428_recErased = _out338;
                      _2429_recIdents = _out339;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2426_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2427_recOwned;
                      isErased = _2428_recErased;
                      readIdents = _2429_recIdents;
                    }
                  } else if (_source142.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2430___mcc_h377 = _source142.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2431_recursiveGen;
                      bool _2432_recOwned;
                      bool _2433_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2434_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out340;
                      bool _out341;
                      bool _out342;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out343;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out340, out _out341, out _out342, out _out343);
                      _2431_recursiveGen = _out340;
                      _2432_recOwned = _out341;
                      _2433_recErased = _out342;
                      _2434_recIdents = _out343;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2431_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2432_recOwned;
                      isErased = _2433_recErased;
                      readIdents = _2434_recIdents;
                    }
                  } else {
                    DAST._IType _2435___mcc_h379 = _source142.dtor_Newtype_a0;
                    DAST._IType _2436_b = _2435___mcc_h379;
                    {
                      if (object.Equals(_2330_fromTpe, _2436_b)) {
                        Dafny.ISequence<Dafny.Rune> _2437_recursiveGen;
                        bool _2438_recOwned;
                        bool _2439_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2440_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out344;
                        bool _out345;
                        bool _out346;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out347;
                        DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out344, out _out345, out _out346, out _out347);
                        _2437_recursiveGen = _out344;
                        _2438_recOwned = _out345;
                        _2439_recErased = _out346;
                        _2440_recIdents = _out347;
                        Dafny.ISequence<Dafny.Rune> _2441_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out348;
                        _out348 = DCOMP.COMP.GenType(_2329_toTpe, true, false);
                        _2441_rhsType = _out348;
                        Dafny.ISequence<Dafny.Rune> _2442_uneraseFn;
                        _2442_uneraseFn = ((_2438_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2441_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2442_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2437_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2438_recOwned;
                        isErased = false;
                        readIdents = _2440_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out349;
                        bool _out350;
                        bool _out351;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out352;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2331_expr, _2330_fromTpe, _2436_b), _2436_b, _2329_toTpe), selfIdent, @params, mustOwn, out _out349, out _out350, out _out351, out _out352);
                        s = _out349;
                        isOwned = _out350;
                        isErased = _out351;
                        readIdents = _out352;
                      }
                    }
                  }
                } else if (_source141.is_Nullable) {
                  DAST._IType _2443___mcc_h381 = _source141.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2444_recursiveGen;
                    bool _2445_recOwned;
                    bool _2446_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2447_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out353;
                    bool _out354;
                    bool _out355;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out356;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out353, out _out354, out _out355, out _out356);
                    _2444_recursiveGen = _out353;
                    _2445_recOwned = _out354;
                    _2446_recErased = _out355;
                    _2447_recIdents = _out356;
                    if (!(_2445_recOwned)) {
                      _2444_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2444_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2444_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2446_recErased;
                    readIdents = _2447_recIdents;
                  }
                } else if (_source141.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2448___mcc_h383 = _source141.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2449_recursiveGen;
                    bool _2450_recOwned;
                    bool _2451_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2452_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out357;
                    bool _out358;
                    bool _out359;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out360;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out357, out _out358, out _out359, out _out360);
                    _2449_recursiveGen = _out357;
                    _2450_recOwned = _out358;
                    _2451_recErased = _out359;
                    _2452_recIdents = _out360;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2449_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2450_recOwned;
                    isErased = _2451_recErased;
                    readIdents = _2452_recIdents;
                  }
                } else if (_source141.is_Array) {
                  DAST._IType _2453___mcc_h385 = _source141.dtor_element;
                  BigInteger _2454___mcc_h386 = _source141.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2455_recursiveGen;
                    bool _2456_recOwned;
                    bool _2457_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2458_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out361;
                    bool _out362;
                    bool _out363;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out364;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out361, out _out362, out _out363, out _out364);
                    _2455_recursiveGen = _out361;
                    _2456_recOwned = _out362;
                    _2457_recErased = _out363;
                    _2458_recIdents = _out364;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2455_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2456_recOwned;
                    isErased = _2457_recErased;
                    readIdents = _2458_recIdents;
                  }
                } else if (_source141.is_Seq) {
                  DAST._IType _2459___mcc_h389 = _source141.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2460_recursiveGen;
                    bool _2461_recOwned;
                    bool _2462_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2463_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out365;
                    bool _out366;
                    bool _out367;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out368;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out365, out _out366, out _out367, out _out368);
                    _2460_recursiveGen = _out365;
                    _2461_recOwned = _out366;
                    _2462_recErased = _out367;
                    _2463_recIdents = _out368;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2460_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2461_recOwned;
                    isErased = _2462_recErased;
                    readIdents = _2463_recIdents;
                  }
                } else if (_source141.is_Set) {
                  DAST._IType _2464___mcc_h391 = _source141.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2465_recursiveGen;
                    bool _2466_recOwned;
                    bool _2467_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2468_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out369;
                    bool _out370;
                    bool _out371;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out372;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out369, out _out370, out _out371, out _out372);
                    _2465_recursiveGen = _out369;
                    _2466_recOwned = _out370;
                    _2467_recErased = _out371;
                    _2468_recIdents = _out372;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2465_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2466_recOwned;
                    isErased = _2467_recErased;
                    readIdents = _2468_recIdents;
                  }
                } else if (_source141.is_Multiset) {
                  DAST._IType _2469___mcc_h393 = _source141.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2470_recursiveGen;
                    bool _2471_recOwned;
                    bool _2472_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2473_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out373;
                    bool _out374;
                    bool _out375;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out376;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out373, out _out374, out _out375, out _out376);
                    _2470_recursiveGen = _out373;
                    _2471_recOwned = _out374;
                    _2472_recErased = _out375;
                    _2473_recIdents = _out376;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2470_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2471_recOwned;
                    isErased = _2472_recErased;
                    readIdents = _2473_recIdents;
                  }
                } else if (_source141.is_Map) {
                  DAST._IType _2474___mcc_h395 = _source141.dtor_key;
                  DAST._IType _2475___mcc_h396 = _source141.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2476_recursiveGen;
                    bool _2477_recOwned;
                    bool _2478_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2479_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out377;
                    bool _out378;
                    bool _out379;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out380;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out377, out _out378, out _out379, out _out380);
                    _2476_recursiveGen = _out377;
                    _2477_recOwned = _out378;
                    _2478_recErased = _out379;
                    _2479_recIdents = _out380;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2476_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2477_recOwned;
                    isErased = _2478_recErased;
                    readIdents = _2479_recIdents;
                  }
                } else if (_source141.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2480___mcc_h399 = _source141.dtor_args;
                  DAST._IType _2481___mcc_h400 = _source141.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2482_recursiveGen;
                    bool _2483_recOwned;
                    bool _2484_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2485_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out381;
                    bool _out382;
                    bool _out383;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out384;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out381, out _out382, out _out383, out _out384);
                    _2482_recursiveGen = _out381;
                    _2483_recOwned = _out382;
                    _2484_recErased = _out383;
                    _2485_recIdents = _out384;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2482_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2483_recOwned;
                    isErased = _2484_recErased;
                    readIdents = _2485_recIdents;
                  }
                } else if (_source141.is_Primitive) {
                  DAST._IPrimitive _2486___mcc_h403 = _source141.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2487_recursiveGen;
                    bool _2488_recOwned;
                    bool _2489_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2490_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out385;
                    bool _out386;
                    bool _out387;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out388;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out385, out _out386, out _out387, out _out388);
                    _2487_recursiveGen = _out385;
                    _2488_recOwned = _out386;
                    _2489_recErased = _out387;
                    _2490_recIdents = _out388;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2487_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2488_recOwned;
                    isErased = _2489_recErased;
                    readIdents = _2490_recIdents;
                  }
                } else if (_source141.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2491___mcc_h405 = _source141.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2492_recursiveGen;
                    bool _2493_recOwned;
                    bool _2494_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2495_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out389;
                    bool _out390;
                    bool _out391;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out392;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out389, out _out390, out _out391, out _out392);
                    _2492_recursiveGen = _out389;
                    _2493_recOwned = _out390;
                    _2494_recErased = _out391;
                    _2495_recIdents = _out392;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2492_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2493_recOwned;
                    isErased = _2494_recErased;
                    readIdents = _2495_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2496___mcc_h407 = _source141.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2497_recursiveGen;
                    bool _2498_recOwned;
                    bool _2499_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2500_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out393;
                    bool _out394;
                    bool _out395;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out396;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out393, out _out394, out _out395, out _out396);
                    _2497_recursiveGen = _out393;
                    _2498_recOwned = _out394;
                    _2499_recErased = _out395;
                    _2500_recIdents = _out396;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2497_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2498_recOwned;
                    isErased = _2499_recErased;
                    readIdents = _2500_recIdents;
                  }
                }
              } else {
                DAST._IType _2501___mcc_h409 = _source138.dtor_Newtype_a0;
                DAST._IType _source143 = _2337___mcc_h306;
                if (_source143.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2502___mcc_h413 = _source143.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2503___mcc_h414 = _source143.dtor_typeArgs;
                  DAST._IResolvedType _2504___mcc_h415 = _source143.dtor_resolved;
                  DAST._IResolvedType _source144 = _2504___mcc_h415;
                  if (_source144.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2505___mcc_h422 = _source144.dtor_path;
                    DAST._IType _2506_b = _2501___mcc_h409;
                    {
                      if (object.Equals(_2506_b, _2329_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _2507_recursiveGen;
                        bool _2508_recOwned;
                        bool _2509_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2510_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out397;
                        bool _out398;
                        bool _out399;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out400;
                        DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out397, out _out398, out _out399, out _out400);
                        _2507_recursiveGen = _out397;
                        _2508_recOwned = _out398;
                        _2509_recErased = _out399;
                        _2510_recIdents = _out400;
                        Dafny.ISequence<Dafny.Rune> _2511_uneraseFn;
                        _2511_uneraseFn = ((_2508_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _2511_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2507_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2508_recOwned;
                        isErased = true;
                        readIdents = _2510_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out401;
                        bool _out402;
                        bool _out403;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out404;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2331_expr, _2330_fromTpe, _2506_b), _2506_b, _2329_toTpe), selfIdent, @params, mustOwn, out _out401, out _out402, out _out403, out _out404);
                        s = _out401;
                        isOwned = _out402;
                        isErased = _out403;
                        readIdents = _out404;
                      }
                    }
                  } else if (_source144.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2512___mcc_h425 = _source144.dtor_path;
                    DAST._IType _2513_b = _2501___mcc_h409;
                    {
                      if (object.Equals(_2513_b, _2329_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _2514_recursiveGen;
                        bool _2515_recOwned;
                        bool _2516_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2517_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out405;
                        bool _out406;
                        bool _out407;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out408;
                        DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out405, out _out406, out _out407, out _out408);
                        _2514_recursiveGen = _out405;
                        _2515_recOwned = _out406;
                        _2516_recErased = _out407;
                        _2517_recIdents = _out408;
                        Dafny.ISequence<Dafny.Rune> _2518_uneraseFn;
                        _2518_uneraseFn = ((_2515_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _2518_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2514_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2515_recOwned;
                        isErased = true;
                        readIdents = _2517_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out409;
                        bool _out410;
                        bool _out411;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out412;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2331_expr, _2330_fromTpe, _2513_b), _2513_b, _2329_toTpe), selfIdent, @params, mustOwn, out _out409, out _out410, out _out411, out _out412);
                        s = _out409;
                        isOwned = _out410;
                        isErased = _out411;
                        readIdents = _out412;
                      }
                    }
                  } else {
                    DAST._IType _2519___mcc_h428 = _source144.dtor_Newtype_a0;
                    DAST._IType _2520_b = _2519___mcc_h428;
                    {
                      if (object.Equals(_2330_fromTpe, _2520_b)) {
                        Dafny.ISequence<Dafny.Rune> _2521_recursiveGen;
                        bool _2522_recOwned;
                        bool _2523_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2524_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out413;
                        bool _out414;
                        bool _out415;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out416;
                        DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out413, out _out414, out _out415, out _out416);
                        _2521_recursiveGen = _out413;
                        _2522_recOwned = _out414;
                        _2523_recErased = _out415;
                        _2524_recIdents = _out416;
                        Dafny.ISequence<Dafny.Rune> _2525_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out417;
                        _out417 = DCOMP.COMP.GenType(_2329_toTpe, true, false);
                        _2525_rhsType = _out417;
                        Dafny.ISequence<Dafny.Rune> _2526_uneraseFn;
                        _2526_uneraseFn = ((_2522_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2525_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2526_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2521_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2522_recOwned;
                        isErased = false;
                        readIdents = _2524_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out418;
                        bool _out419;
                        bool _out420;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out421;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2331_expr, _2330_fromTpe, _2520_b), _2520_b, _2329_toTpe), selfIdent, @params, mustOwn, out _out418, out _out419, out _out420, out _out421);
                        s = _out418;
                        isOwned = _out419;
                        isErased = _out420;
                        readIdents = _out421;
                      }
                    }
                  }
                } else if (_source143.is_Nullable) {
                  DAST._IType _2527___mcc_h431 = _source143.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2528_recursiveGen;
                    bool _2529_recOwned;
                    bool _2530_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2531_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out422;
                    bool _out423;
                    bool _out424;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out425;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out422, out _out423, out _out424, out _out425);
                    _2528_recursiveGen = _out422;
                    _2529_recOwned = _out423;
                    _2530_recErased = _out424;
                    _2531_recIdents = _out425;
                    if (!(_2529_recOwned)) {
                      _2528_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2528_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2528_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2530_recErased;
                    readIdents = _2531_recIdents;
                  }
                } else if (_source143.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2532___mcc_h434 = _source143.dtor_Tuple_a0;
                  DAST._IType _2533_b = _2501___mcc_h409;
                  {
                    if (object.Equals(_2533_b, _2329_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _2534_recursiveGen;
                      bool _2535_recOwned;
                      bool _2536_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2537_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out426;
                      bool _out427;
                      bool _out428;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out429;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out426, out _out427, out _out428, out _out429);
                      _2534_recursiveGen = _out426;
                      _2535_recOwned = _out427;
                      _2536_recErased = _out428;
                      _2537_recIdents = _out429;
                      Dafny.ISequence<Dafny.Rune> _2538_uneraseFn;
                      _2538_uneraseFn = ((_2535_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _2538_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2534_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2535_recOwned;
                      isErased = true;
                      readIdents = _2537_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out430;
                      bool _out431;
                      bool _out432;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out433;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2331_expr, _2330_fromTpe, _2533_b), _2533_b, _2329_toTpe), selfIdent, @params, mustOwn, out _out430, out _out431, out _out432, out _out433);
                      s = _out430;
                      isOwned = _out431;
                      isErased = _out432;
                      readIdents = _out433;
                    }
                  }
                } else if (_source143.is_Array) {
                  DAST._IType _2539___mcc_h437 = _source143.dtor_element;
                  BigInteger _2540___mcc_h438 = _source143.dtor_dims;
                  DAST._IType _2541_b = _2501___mcc_h409;
                  {
                    if (object.Equals(_2541_b, _2329_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _2542_recursiveGen;
                      bool _2543_recOwned;
                      bool _2544_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2545_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out434;
                      bool _out435;
                      bool _out436;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out437;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out434, out _out435, out _out436, out _out437);
                      _2542_recursiveGen = _out434;
                      _2543_recOwned = _out435;
                      _2544_recErased = _out436;
                      _2545_recIdents = _out437;
                      Dafny.ISequence<Dafny.Rune> _2546_uneraseFn;
                      _2546_uneraseFn = ((_2543_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _2546_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2542_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2543_recOwned;
                      isErased = true;
                      readIdents = _2545_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out438;
                      bool _out439;
                      bool _out440;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out441;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2331_expr, _2330_fromTpe, _2541_b), _2541_b, _2329_toTpe), selfIdent, @params, mustOwn, out _out438, out _out439, out _out440, out _out441);
                      s = _out438;
                      isOwned = _out439;
                      isErased = _out440;
                      readIdents = _out441;
                    }
                  }
                } else if (_source143.is_Seq) {
                  DAST._IType _2547___mcc_h443 = _source143.dtor_element;
                  DAST._IType _2548_b = _2501___mcc_h409;
                  {
                    if (object.Equals(_2548_b, _2329_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _2549_recursiveGen;
                      bool _2550_recOwned;
                      bool _2551_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2552_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out442;
                      bool _out443;
                      bool _out444;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out445;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out442, out _out443, out _out444, out _out445);
                      _2549_recursiveGen = _out442;
                      _2550_recOwned = _out443;
                      _2551_recErased = _out444;
                      _2552_recIdents = _out445;
                      Dafny.ISequence<Dafny.Rune> _2553_uneraseFn;
                      _2553_uneraseFn = ((_2550_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _2553_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2549_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2550_recOwned;
                      isErased = true;
                      readIdents = _2552_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out446;
                      bool _out447;
                      bool _out448;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out449;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2331_expr, _2330_fromTpe, _2548_b), _2548_b, _2329_toTpe), selfIdent, @params, mustOwn, out _out446, out _out447, out _out448, out _out449);
                      s = _out446;
                      isOwned = _out447;
                      isErased = _out448;
                      readIdents = _out449;
                    }
                  }
                } else if (_source143.is_Set) {
                  DAST._IType _2554___mcc_h446 = _source143.dtor_element;
                  DAST._IType _2555_b = _2501___mcc_h409;
                  {
                    if (object.Equals(_2555_b, _2329_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _2556_recursiveGen;
                      bool _2557_recOwned;
                      bool _2558_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2559_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out450;
                      bool _out451;
                      bool _out452;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out453;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out450, out _out451, out _out452, out _out453);
                      _2556_recursiveGen = _out450;
                      _2557_recOwned = _out451;
                      _2558_recErased = _out452;
                      _2559_recIdents = _out453;
                      Dafny.ISequence<Dafny.Rune> _2560_uneraseFn;
                      _2560_uneraseFn = ((_2557_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _2560_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2556_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2557_recOwned;
                      isErased = true;
                      readIdents = _2559_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out454;
                      bool _out455;
                      bool _out456;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out457;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2331_expr, _2330_fromTpe, _2555_b), _2555_b, _2329_toTpe), selfIdent, @params, mustOwn, out _out454, out _out455, out _out456, out _out457);
                      s = _out454;
                      isOwned = _out455;
                      isErased = _out456;
                      readIdents = _out457;
                    }
                  }
                } else if (_source143.is_Multiset) {
                  DAST._IType _2561___mcc_h449 = _source143.dtor_element;
                  DAST._IType _2562_b = _2501___mcc_h409;
                  {
                    if (object.Equals(_2562_b, _2329_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _2563_recursiveGen;
                      bool _2564_recOwned;
                      bool _2565_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2566_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out458;
                      bool _out459;
                      bool _out460;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out461;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out458, out _out459, out _out460, out _out461);
                      _2563_recursiveGen = _out458;
                      _2564_recOwned = _out459;
                      _2565_recErased = _out460;
                      _2566_recIdents = _out461;
                      Dafny.ISequence<Dafny.Rune> _2567_uneraseFn;
                      _2567_uneraseFn = ((_2564_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _2567_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2563_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2564_recOwned;
                      isErased = true;
                      readIdents = _2566_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out462;
                      bool _out463;
                      bool _out464;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out465;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2331_expr, _2330_fromTpe, _2562_b), _2562_b, _2329_toTpe), selfIdent, @params, mustOwn, out _out462, out _out463, out _out464, out _out465);
                      s = _out462;
                      isOwned = _out463;
                      isErased = _out464;
                      readIdents = _out465;
                    }
                  }
                } else if (_source143.is_Map) {
                  DAST._IType _2568___mcc_h452 = _source143.dtor_key;
                  DAST._IType _2569___mcc_h453 = _source143.dtor_value;
                  DAST._IType _2570_b = _2501___mcc_h409;
                  {
                    if (object.Equals(_2570_b, _2329_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _2571_recursiveGen;
                      bool _2572_recOwned;
                      bool _2573_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2574_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out466;
                      bool _out467;
                      bool _out468;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out469;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out466, out _out467, out _out468, out _out469);
                      _2571_recursiveGen = _out466;
                      _2572_recOwned = _out467;
                      _2573_recErased = _out468;
                      _2574_recIdents = _out469;
                      Dafny.ISequence<Dafny.Rune> _2575_uneraseFn;
                      _2575_uneraseFn = ((_2572_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _2575_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2571_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2572_recOwned;
                      isErased = true;
                      readIdents = _2574_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out470;
                      bool _out471;
                      bool _out472;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out473;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2331_expr, _2330_fromTpe, _2570_b), _2570_b, _2329_toTpe), selfIdent, @params, mustOwn, out _out470, out _out471, out _out472, out _out473);
                      s = _out470;
                      isOwned = _out471;
                      isErased = _out472;
                      readIdents = _out473;
                    }
                  }
                } else if (_source143.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2576___mcc_h458 = _source143.dtor_args;
                  DAST._IType _2577___mcc_h459 = _source143.dtor_result;
                  DAST._IType _2578_b = _2501___mcc_h409;
                  {
                    if (object.Equals(_2578_b, _2329_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _2579_recursiveGen;
                      bool _2580_recOwned;
                      bool _2581_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2582_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out474;
                      bool _out475;
                      bool _out476;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out477;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out474, out _out475, out _out476, out _out477);
                      _2579_recursiveGen = _out474;
                      _2580_recOwned = _out475;
                      _2581_recErased = _out476;
                      _2582_recIdents = _out477;
                      Dafny.ISequence<Dafny.Rune> _2583_uneraseFn;
                      _2583_uneraseFn = ((_2580_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _2583_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2579_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2580_recOwned;
                      isErased = true;
                      readIdents = _2582_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out478;
                      bool _out479;
                      bool _out480;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out481;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2331_expr, _2330_fromTpe, _2578_b), _2578_b, _2329_toTpe), selfIdent, @params, mustOwn, out _out478, out _out479, out _out480, out _out481);
                      s = _out478;
                      isOwned = _out479;
                      isErased = _out480;
                      readIdents = _out481;
                    }
                  }
                } else if (_source143.is_Primitive) {
                  DAST._IPrimitive _2584___mcc_h464 = _source143.dtor_Primitive_a0;
                  DAST._IType _2585_b = _2501___mcc_h409;
                  {
                    if (object.Equals(_2585_b, _2329_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _2586_recursiveGen;
                      bool _2587_recOwned;
                      bool _2588_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2589_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out482;
                      bool _out483;
                      bool _out484;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out485;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out482, out _out483, out _out484, out _out485);
                      _2586_recursiveGen = _out482;
                      _2587_recOwned = _out483;
                      _2588_recErased = _out484;
                      _2589_recIdents = _out485;
                      Dafny.ISequence<Dafny.Rune> _2590_uneraseFn;
                      _2590_uneraseFn = ((_2587_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _2590_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2586_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2587_recOwned;
                      isErased = true;
                      readIdents = _2589_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out486;
                      bool _out487;
                      bool _out488;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out489;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2331_expr, _2330_fromTpe, _2585_b), _2585_b, _2329_toTpe), selfIdent, @params, mustOwn, out _out486, out _out487, out _out488, out _out489);
                      s = _out486;
                      isOwned = _out487;
                      isErased = _out488;
                      readIdents = _out489;
                    }
                  }
                } else if (_source143.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2591___mcc_h467 = _source143.dtor_Passthrough_a0;
                  DAST._IType _2592_b = _2501___mcc_h409;
                  {
                    if (object.Equals(_2592_b, _2329_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _2593_recursiveGen;
                      bool _2594_recOwned;
                      bool _2595_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2596_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out490;
                      bool _out491;
                      bool _out492;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out493;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out490, out _out491, out _out492, out _out493);
                      _2593_recursiveGen = _out490;
                      _2594_recOwned = _out491;
                      _2595_recErased = _out492;
                      _2596_recIdents = _out493;
                      Dafny.ISequence<Dafny.Rune> _2597_uneraseFn;
                      _2597_uneraseFn = ((_2594_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _2597_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2593_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2594_recOwned;
                      isErased = true;
                      readIdents = _2596_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out494;
                      bool _out495;
                      bool _out496;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out497;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2331_expr, _2330_fromTpe, _2592_b), _2592_b, _2329_toTpe), selfIdent, @params, mustOwn, out _out494, out _out495, out _out496, out _out497);
                      s = _out494;
                      isOwned = _out495;
                      isErased = _out496;
                      readIdents = _out497;
                    }
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2598___mcc_h470 = _source143.dtor_TypeArg_a0;
                  DAST._IType _2599_b = _2501___mcc_h409;
                  {
                    if (object.Equals(_2599_b, _2329_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _2600_recursiveGen;
                      bool _2601_recOwned;
                      bool _2602_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2603_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out498;
                      bool _out499;
                      bool _out500;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out501;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out498, out _out499, out _out500, out _out501);
                      _2600_recursiveGen = _out498;
                      _2601_recOwned = _out499;
                      _2602_recErased = _out500;
                      _2603_recIdents = _out501;
                      Dafny.ISequence<Dafny.Rune> _2604_uneraseFn;
                      _2604_uneraseFn = ((_2601_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _2604_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2600_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2601_recOwned;
                      isErased = true;
                      readIdents = _2603_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out502;
                      bool _out503;
                      bool _out504;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out505;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2331_expr, _2330_fromTpe, _2599_b), _2599_b, _2329_toTpe), selfIdent, @params, mustOwn, out _out502, out _out503, out _out504, out _out505);
                      s = _out502;
                      isOwned = _out503;
                      isErased = _out504;
                      readIdents = _out505;
                    }
                  }
                }
              }
            } else if (_source137.is_Nullable) {
              DAST._IType _2605___mcc_h473 = _source137.dtor_Nullable_a0;
              DAST._IType _source145 = _2337___mcc_h306;
              if (_source145.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2606___mcc_h477 = _source145.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2607___mcc_h478 = _source145.dtor_typeArgs;
                DAST._IResolvedType _2608___mcc_h479 = _source145.dtor_resolved;
                DAST._IResolvedType _source146 = _2608___mcc_h479;
                if (_source146.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2609___mcc_h486 = _source146.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2610_recursiveGen;
                    bool _2611_recOwned;
                    bool _2612_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2613_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out506;
                    bool _out507;
                    bool _out508;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out509;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out506, out _out507, out _out508, out _out509);
                    _2610_recursiveGen = _out506;
                    _2611_recOwned = _out507;
                    _2612_recErased = _out508;
                    _2613_recIdents = _out509;
                    if (!(_2611_recOwned)) {
                      _2610_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2610_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_2610_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _2611_recOwned;
                    isErased = _2612_recErased;
                    readIdents = _2613_recIdents;
                  }
                } else if (_source146.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2614___mcc_h489 = _source146.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2615_recursiveGen;
                    bool _2616_recOwned;
                    bool _2617_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2618_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out510;
                    bool _out511;
                    bool _out512;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out513;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out510, out _out511, out _out512, out _out513);
                    _2615_recursiveGen = _out510;
                    _2616_recOwned = _out511;
                    _2617_recErased = _out512;
                    _2618_recIdents = _out513;
                    if (!(_2616_recOwned)) {
                      _2615_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2615_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_2615_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _2616_recOwned;
                    isErased = _2617_recErased;
                    readIdents = _2618_recIdents;
                  }
                } else {
                  DAST._IType _2619___mcc_h492 = _source146.dtor_Newtype_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2620_recursiveGen;
                    bool _2621_recOwned;
                    bool _2622_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2623_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out514;
                    bool _out515;
                    bool _out516;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out517;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out514, out _out515, out _out516, out _out517);
                    _2620_recursiveGen = _out514;
                    _2621_recOwned = _out515;
                    _2622_recErased = _out516;
                    _2623_recIdents = _out517;
                    if (!(_2621_recOwned)) {
                      _2620_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2620_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_2620_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _2621_recOwned;
                    isErased = _2622_recErased;
                    readIdents = _2623_recIdents;
                  }
                }
              } else if (_source145.is_Nullable) {
                DAST._IType _2624___mcc_h495 = _source145.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2625_recursiveGen;
                  bool _2626_recOwned;
                  bool _2627_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2628_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out518;
                  bool _out519;
                  bool _out520;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out521;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out518, out _out519, out _out520, out _out521);
                  _2625_recursiveGen = _out518;
                  _2626_recOwned = _out519;
                  _2627_recErased = _out520;
                  _2628_recIdents = _out521;
                  if (!(_2626_recOwned)) {
                    _2625_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2625_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_2625_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _2626_recOwned;
                  isErased = _2627_recErased;
                  readIdents = _2628_recIdents;
                }
              } else if (_source145.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2629___mcc_h498 = _source145.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2630_recursiveGen;
                  bool _2631_recOwned;
                  bool _2632_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2633_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out522;
                  bool _out523;
                  bool _out524;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out525;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out522, out _out523, out _out524, out _out525);
                  _2630_recursiveGen = _out522;
                  _2631_recOwned = _out523;
                  _2632_recErased = _out524;
                  _2633_recIdents = _out525;
                  if (!(_2631_recOwned)) {
                    _2630_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2630_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_2630_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _2631_recOwned;
                  isErased = _2632_recErased;
                  readIdents = _2633_recIdents;
                }
              } else if (_source145.is_Array) {
                DAST._IType _2634___mcc_h501 = _source145.dtor_element;
                BigInteger _2635___mcc_h502 = _source145.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2636_recursiveGen;
                  bool _2637_recOwned;
                  bool _2638_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2639_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out526;
                  bool _out527;
                  bool _out528;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out529;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out526, out _out527, out _out528, out _out529);
                  _2636_recursiveGen = _out526;
                  _2637_recOwned = _out527;
                  _2638_recErased = _out528;
                  _2639_recIdents = _out529;
                  if (!(_2637_recOwned)) {
                    _2636_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2636_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_2636_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _2637_recOwned;
                  isErased = _2638_recErased;
                  readIdents = _2639_recIdents;
                }
              } else if (_source145.is_Seq) {
                DAST._IType _2640___mcc_h507 = _source145.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2641_recursiveGen;
                  bool _2642_recOwned;
                  bool _2643_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2644_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out530;
                  bool _out531;
                  bool _out532;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out533;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out530, out _out531, out _out532, out _out533);
                  _2641_recursiveGen = _out530;
                  _2642_recOwned = _out531;
                  _2643_recErased = _out532;
                  _2644_recIdents = _out533;
                  if (!(_2642_recOwned)) {
                    _2641_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2641_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_2641_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _2642_recOwned;
                  isErased = _2643_recErased;
                  readIdents = _2644_recIdents;
                }
              } else if (_source145.is_Set) {
                DAST._IType _2645___mcc_h510 = _source145.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2646_recursiveGen;
                  bool _2647_recOwned;
                  bool _2648_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2649_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out534;
                  bool _out535;
                  bool _out536;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out537;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out534, out _out535, out _out536, out _out537);
                  _2646_recursiveGen = _out534;
                  _2647_recOwned = _out535;
                  _2648_recErased = _out536;
                  _2649_recIdents = _out537;
                  if (!(_2647_recOwned)) {
                    _2646_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2646_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_2646_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _2647_recOwned;
                  isErased = _2648_recErased;
                  readIdents = _2649_recIdents;
                }
              } else if (_source145.is_Multiset) {
                DAST._IType _2650___mcc_h513 = _source145.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2651_recursiveGen;
                  bool _2652_recOwned;
                  bool _2653_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2654_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out538;
                  bool _out539;
                  bool _out540;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out541;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out538, out _out539, out _out540, out _out541);
                  _2651_recursiveGen = _out538;
                  _2652_recOwned = _out539;
                  _2653_recErased = _out540;
                  _2654_recIdents = _out541;
                  if (!(_2652_recOwned)) {
                    _2651_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2651_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_2651_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _2652_recOwned;
                  isErased = _2653_recErased;
                  readIdents = _2654_recIdents;
                }
              } else if (_source145.is_Map) {
                DAST._IType _2655___mcc_h516 = _source145.dtor_key;
                DAST._IType _2656___mcc_h517 = _source145.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2657_recursiveGen;
                  bool _2658_recOwned;
                  bool _2659_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2660_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out542;
                  bool _out543;
                  bool _out544;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out545;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out542, out _out543, out _out544, out _out545);
                  _2657_recursiveGen = _out542;
                  _2658_recOwned = _out543;
                  _2659_recErased = _out544;
                  _2660_recIdents = _out545;
                  if (!(_2658_recOwned)) {
                    _2657_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2657_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_2657_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _2658_recOwned;
                  isErased = _2659_recErased;
                  readIdents = _2660_recIdents;
                }
              } else if (_source145.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2661___mcc_h522 = _source145.dtor_args;
                DAST._IType _2662___mcc_h523 = _source145.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2663_recursiveGen;
                  bool _2664_recOwned;
                  bool _2665_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2666_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out546;
                  bool _out547;
                  bool _out548;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out549;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out546, out _out547, out _out548, out _out549);
                  _2663_recursiveGen = _out546;
                  _2664_recOwned = _out547;
                  _2665_recErased = _out548;
                  _2666_recIdents = _out549;
                  if (!(_2664_recOwned)) {
                    _2663_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2663_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_2663_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _2664_recOwned;
                  isErased = _2665_recErased;
                  readIdents = _2666_recIdents;
                }
              } else if (_source145.is_Primitive) {
                DAST._IPrimitive _2667___mcc_h528 = _source145.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2668_recursiveGen;
                  bool _2669_recOwned;
                  bool _2670_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2671_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out550;
                  bool _out551;
                  bool _out552;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out553;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out550, out _out551, out _out552, out _out553);
                  _2668_recursiveGen = _out550;
                  _2669_recOwned = _out551;
                  _2670_recErased = _out552;
                  _2671_recIdents = _out553;
                  if (!(_2669_recOwned)) {
                    _2668_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2668_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_2668_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _2669_recOwned;
                  isErased = _2670_recErased;
                  readIdents = _2671_recIdents;
                }
              } else if (_source145.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2672___mcc_h531 = _source145.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2673_recursiveGen;
                  bool _2674_recOwned;
                  bool _2675_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2676_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out554;
                  bool _out555;
                  bool _out556;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out557;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out554, out _out555, out _out556, out _out557);
                  _2673_recursiveGen = _out554;
                  _2674_recOwned = _out555;
                  _2675_recErased = _out556;
                  _2676_recIdents = _out557;
                  if (!(_2674_recOwned)) {
                    _2673_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2673_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_2673_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _2674_recOwned;
                  isErased = _2675_recErased;
                  readIdents = _2676_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2677___mcc_h534 = _source145.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2678_recursiveGen;
                  bool _2679_recOwned;
                  bool _2680_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2681_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out558;
                  bool _out559;
                  bool _out560;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out561;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out558, out _out559, out _out560, out _out561);
                  _2678_recursiveGen = _out558;
                  _2679_recOwned = _out559;
                  _2680_recErased = _out560;
                  _2681_recIdents = _out561;
                  if (!(_2679_recOwned)) {
                    _2678_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2678_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_2678_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _2679_recOwned;
                  isErased = _2680_recErased;
                  readIdents = _2681_recIdents;
                }
              }
            } else if (_source137.is_Tuple) {
              Dafny.ISequence<DAST._IType> _2682___mcc_h537 = _source137.dtor_Tuple_a0;
              DAST._IType _source147 = _2337___mcc_h306;
              if (_source147.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2683___mcc_h541 = _source147.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2684___mcc_h542 = _source147.dtor_typeArgs;
                DAST._IResolvedType _2685___mcc_h543 = _source147.dtor_resolved;
                DAST._IResolvedType _source148 = _2685___mcc_h543;
                if (_source148.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2686___mcc_h547 = _source148.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2687_recursiveGen;
                    bool _2688_recOwned;
                    bool _2689_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2690_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out562;
                    bool _out563;
                    bool _out564;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out565;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out562, out _out563, out _out564, out _out565);
                    _2687_recursiveGen = _out562;
                    _2688_recOwned = _out563;
                    _2689_recErased = _out564;
                    _2690_recIdents = _out565;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2687_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2688_recOwned;
                    isErased = _2689_recErased;
                    readIdents = _2690_recIdents;
                  }
                } else if (_source148.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2691___mcc_h549 = _source148.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2692_recursiveGen;
                    bool _2693_recOwned;
                    bool _2694_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2695_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out566;
                    bool _out567;
                    bool _out568;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out569;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out566, out _out567, out _out568, out _out569);
                    _2692_recursiveGen = _out566;
                    _2693_recOwned = _out567;
                    _2694_recErased = _out568;
                    _2695_recIdents = _out569;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2692_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2693_recOwned;
                    isErased = _2694_recErased;
                    readIdents = _2695_recIdents;
                  }
                } else {
                  DAST._IType _2696___mcc_h551 = _source148.dtor_Newtype_a0;
                  DAST._IType _2697_b = _2696___mcc_h551;
                  {
                    if (object.Equals(_2330_fromTpe, _2697_b)) {
                      Dafny.ISequence<Dafny.Rune> _2698_recursiveGen;
                      bool _2699_recOwned;
                      bool _2700_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2701_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out570;
                      bool _out571;
                      bool _out572;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out573;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out570, out _out571, out _out572, out _out573);
                      _2698_recursiveGen = _out570;
                      _2699_recOwned = _out571;
                      _2700_recErased = _out572;
                      _2701_recIdents = _out573;
                      Dafny.ISequence<Dafny.Rune> _2702_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out574;
                      _out574 = DCOMP.COMP.GenType(_2329_toTpe, true, false);
                      _2702_rhsType = _out574;
                      Dafny.ISequence<Dafny.Rune> _2703_uneraseFn;
                      _2703_uneraseFn = ((_2699_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2702_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2703_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2698_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2699_recOwned;
                      isErased = false;
                      readIdents = _2701_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out575;
                      bool _out576;
                      bool _out577;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out578;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2331_expr, _2330_fromTpe, _2697_b), _2697_b, _2329_toTpe), selfIdent, @params, mustOwn, out _out575, out _out576, out _out577, out _out578);
                      s = _out575;
                      isOwned = _out576;
                      isErased = _out577;
                      readIdents = _out578;
                    }
                  }
                }
              } else if (_source147.is_Nullable) {
                DAST._IType _2704___mcc_h553 = _source147.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2705_recursiveGen;
                  bool _2706_recOwned;
                  bool _2707_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2708_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out579;
                  bool _out580;
                  bool _out581;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out582;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out579, out _out580, out _out581, out _out582);
                  _2705_recursiveGen = _out579;
                  _2706_recOwned = _out580;
                  _2707_recErased = _out581;
                  _2708_recIdents = _out582;
                  if (!(_2706_recOwned)) {
                    _2705_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2705_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2705_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2707_recErased;
                  readIdents = _2708_recIdents;
                }
              } else if (_source147.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2709___mcc_h555 = _source147.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2710_recursiveGen;
                  bool _2711_recOwned;
                  bool _2712_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2713_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out583;
                  bool _out584;
                  bool _out585;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out586;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out583, out _out584, out _out585, out _out586);
                  _2710_recursiveGen = _out583;
                  _2711_recOwned = _out584;
                  _2712_recErased = _out585;
                  _2713_recIdents = _out586;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2710_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2711_recOwned;
                  isErased = _2712_recErased;
                  readIdents = _2713_recIdents;
                }
              } else if (_source147.is_Array) {
                DAST._IType _2714___mcc_h557 = _source147.dtor_element;
                BigInteger _2715___mcc_h558 = _source147.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2716_recursiveGen;
                  bool _2717_recOwned;
                  bool _2718_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2719_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out587;
                  bool _out588;
                  bool _out589;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out590;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out587, out _out588, out _out589, out _out590);
                  _2716_recursiveGen = _out587;
                  _2717_recOwned = _out588;
                  _2718_recErased = _out589;
                  _2719_recIdents = _out590;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2716_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2717_recOwned;
                  isErased = _2718_recErased;
                  readIdents = _2719_recIdents;
                }
              } else if (_source147.is_Seq) {
                DAST._IType _2720___mcc_h561 = _source147.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2721_recursiveGen;
                  bool _2722_recOwned;
                  bool _2723_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2724_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out591;
                  bool _out592;
                  bool _out593;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out594;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out591, out _out592, out _out593, out _out594);
                  _2721_recursiveGen = _out591;
                  _2722_recOwned = _out592;
                  _2723_recErased = _out593;
                  _2724_recIdents = _out594;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2721_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2722_recOwned;
                  isErased = _2723_recErased;
                  readIdents = _2724_recIdents;
                }
              } else if (_source147.is_Set) {
                DAST._IType _2725___mcc_h563 = _source147.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2726_recursiveGen;
                  bool _2727_recOwned;
                  bool _2728_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2729_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out595;
                  bool _out596;
                  bool _out597;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out598;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out595, out _out596, out _out597, out _out598);
                  _2726_recursiveGen = _out595;
                  _2727_recOwned = _out596;
                  _2728_recErased = _out597;
                  _2729_recIdents = _out598;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2726_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2727_recOwned;
                  isErased = _2728_recErased;
                  readIdents = _2729_recIdents;
                }
              } else if (_source147.is_Multiset) {
                DAST._IType _2730___mcc_h565 = _source147.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2731_recursiveGen;
                  bool _2732_recOwned;
                  bool _2733_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2734_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out599;
                  bool _out600;
                  bool _out601;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out602;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out599, out _out600, out _out601, out _out602);
                  _2731_recursiveGen = _out599;
                  _2732_recOwned = _out600;
                  _2733_recErased = _out601;
                  _2734_recIdents = _out602;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2731_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2732_recOwned;
                  isErased = _2733_recErased;
                  readIdents = _2734_recIdents;
                }
              } else if (_source147.is_Map) {
                DAST._IType _2735___mcc_h567 = _source147.dtor_key;
                DAST._IType _2736___mcc_h568 = _source147.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2737_recursiveGen;
                  bool _2738_recOwned;
                  bool _2739_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2740_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out603;
                  bool _out604;
                  bool _out605;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out606;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out603, out _out604, out _out605, out _out606);
                  _2737_recursiveGen = _out603;
                  _2738_recOwned = _out604;
                  _2739_recErased = _out605;
                  _2740_recIdents = _out606;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2737_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2738_recOwned;
                  isErased = _2739_recErased;
                  readIdents = _2740_recIdents;
                }
              } else if (_source147.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2741___mcc_h571 = _source147.dtor_args;
                DAST._IType _2742___mcc_h572 = _source147.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2743_recursiveGen;
                  bool _2744_recOwned;
                  bool _2745_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2746_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out607;
                  bool _out608;
                  bool _out609;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out610;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out607, out _out608, out _out609, out _out610);
                  _2743_recursiveGen = _out607;
                  _2744_recOwned = _out608;
                  _2745_recErased = _out609;
                  _2746_recIdents = _out610;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2743_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2744_recOwned;
                  isErased = _2745_recErased;
                  readIdents = _2746_recIdents;
                }
              } else if (_source147.is_Primitive) {
                DAST._IPrimitive _2747___mcc_h575 = _source147.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2748_recursiveGen;
                  bool _2749_recOwned;
                  bool _2750_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2751_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out611;
                  bool _out612;
                  bool _out613;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out614;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out611, out _out612, out _out613, out _out614);
                  _2748_recursiveGen = _out611;
                  _2749_recOwned = _out612;
                  _2750_recErased = _out613;
                  _2751_recIdents = _out614;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2748_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2749_recOwned;
                  isErased = _2750_recErased;
                  readIdents = _2751_recIdents;
                }
              } else if (_source147.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2752___mcc_h577 = _source147.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2753_recursiveGen;
                  bool _2754_recOwned;
                  bool _2755_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2756_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out615;
                  bool _out616;
                  bool _out617;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out618;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out615, out _out616, out _out617, out _out618);
                  _2753_recursiveGen = _out615;
                  _2754_recOwned = _out616;
                  _2755_recErased = _out617;
                  _2756_recIdents = _out618;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2753_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2754_recOwned;
                  isErased = _2755_recErased;
                  readIdents = _2756_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2757___mcc_h579 = _source147.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2758_recursiveGen;
                  bool _2759_recOwned;
                  bool _2760_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2761_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out619;
                  bool _out620;
                  bool _out621;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out622;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out619, out _out620, out _out621, out _out622);
                  _2758_recursiveGen = _out619;
                  _2759_recOwned = _out620;
                  _2760_recErased = _out621;
                  _2761_recIdents = _out622;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2758_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2759_recOwned;
                  isErased = _2760_recErased;
                  readIdents = _2761_recIdents;
                }
              }
            } else if (_source137.is_Array) {
              DAST._IType _2762___mcc_h581 = _source137.dtor_element;
              BigInteger _2763___mcc_h582 = _source137.dtor_dims;
              DAST._IType _source149 = _2337___mcc_h306;
              if (_source149.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2764___mcc_h589 = _source149.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2765___mcc_h590 = _source149.dtor_typeArgs;
                DAST._IResolvedType _2766___mcc_h591 = _source149.dtor_resolved;
                DAST._IResolvedType _source150 = _2766___mcc_h591;
                if (_source150.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2767___mcc_h595 = _source150.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2768_recursiveGen;
                    bool _2769_recOwned;
                    bool _2770_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2771_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out623;
                    bool _out624;
                    bool _out625;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out626;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out623, out _out624, out _out625, out _out626);
                    _2768_recursiveGen = _out623;
                    _2769_recOwned = _out624;
                    _2770_recErased = _out625;
                    _2771_recIdents = _out626;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2768_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2769_recOwned;
                    isErased = _2770_recErased;
                    readIdents = _2771_recIdents;
                  }
                } else if (_source150.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2772___mcc_h597 = _source150.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2773_recursiveGen;
                    bool _2774_recOwned;
                    bool _2775_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2776_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out627;
                    bool _out628;
                    bool _out629;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out630;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out627, out _out628, out _out629, out _out630);
                    _2773_recursiveGen = _out627;
                    _2774_recOwned = _out628;
                    _2775_recErased = _out629;
                    _2776_recIdents = _out630;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2773_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2774_recOwned;
                    isErased = _2775_recErased;
                    readIdents = _2776_recIdents;
                  }
                } else {
                  DAST._IType _2777___mcc_h599 = _source150.dtor_Newtype_a0;
                  DAST._IType _2778_b = _2777___mcc_h599;
                  {
                    if (object.Equals(_2330_fromTpe, _2778_b)) {
                      Dafny.ISequence<Dafny.Rune> _2779_recursiveGen;
                      bool _2780_recOwned;
                      bool _2781_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2782_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out631;
                      bool _out632;
                      bool _out633;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out634;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out631, out _out632, out _out633, out _out634);
                      _2779_recursiveGen = _out631;
                      _2780_recOwned = _out632;
                      _2781_recErased = _out633;
                      _2782_recIdents = _out634;
                      Dafny.ISequence<Dafny.Rune> _2783_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out635;
                      _out635 = DCOMP.COMP.GenType(_2329_toTpe, true, false);
                      _2783_rhsType = _out635;
                      Dafny.ISequence<Dafny.Rune> _2784_uneraseFn;
                      _2784_uneraseFn = ((_2780_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2783_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2784_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2779_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2780_recOwned;
                      isErased = false;
                      readIdents = _2782_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out636;
                      bool _out637;
                      bool _out638;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out639;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2331_expr, _2330_fromTpe, _2778_b), _2778_b, _2329_toTpe), selfIdent, @params, mustOwn, out _out636, out _out637, out _out638, out _out639);
                      s = _out636;
                      isOwned = _out637;
                      isErased = _out638;
                      readIdents = _out639;
                    }
                  }
                }
              } else if (_source149.is_Nullable) {
                DAST._IType _2785___mcc_h601 = _source149.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2786_recursiveGen;
                  bool _2787_recOwned;
                  bool _2788_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2789_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out640;
                  bool _out641;
                  bool _out642;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out643;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out640, out _out641, out _out642, out _out643);
                  _2786_recursiveGen = _out640;
                  _2787_recOwned = _out641;
                  _2788_recErased = _out642;
                  _2789_recIdents = _out643;
                  if (!(_2787_recOwned)) {
                    _2786_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2786_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2786_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2788_recErased;
                  readIdents = _2789_recIdents;
                }
              } else if (_source149.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2790___mcc_h603 = _source149.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2791_recursiveGen;
                  bool _2792_recOwned;
                  bool _2793_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2794_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out644;
                  bool _out645;
                  bool _out646;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out647;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out644, out _out645, out _out646, out _out647);
                  _2791_recursiveGen = _out644;
                  _2792_recOwned = _out645;
                  _2793_recErased = _out646;
                  _2794_recIdents = _out647;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2791_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2792_recOwned;
                  isErased = _2793_recErased;
                  readIdents = _2794_recIdents;
                }
              } else if (_source149.is_Array) {
                DAST._IType _2795___mcc_h605 = _source149.dtor_element;
                BigInteger _2796___mcc_h606 = _source149.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2797_recursiveGen;
                  bool _2798_recOwned;
                  bool _2799_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2800_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out648;
                  bool _out649;
                  bool _out650;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out651;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out648, out _out649, out _out650, out _out651);
                  _2797_recursiveGen = _out648;
                  _2798_recOwned = _out649;
                  _2799_recErased = _out650;
                  _2800_recIdents = _out651;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2797_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2798_recOwned;
                  isErased = _2799_recErased;
                  readIdents = _2800_recIdents;
                }
              } else if (_source149.is_Seq) {
                DAST._IType _2801___mcc_h609 = _source149.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2802_recursiveGen;
                  bool _2803_recOwned;
                  bool _2804_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2805_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out652;
                  bool _out653;
                  bool _out654;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out655;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out652, out _out653, out _out654, out _out655);
                  _2802_recursiveGen = _out652;
                  _2803_recOwned = _out653;
                  _2804_recErased = _out654;
                  _2805_recIdents = _out655;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2802_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2803_recOwned;
                  isErased = _2804_recErased;
                  readIdents = _2805_recIdents;
                }
              } else if (_source149.is_Set) {
                DAST._IType _2806___mcc_h611 = _source149.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2807_recursiveGen;
                  bool _2808_recOwned;
                  bool _2809_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2810_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out656;
                  bool _out657;
                  bool _out658;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out659;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out656, out _out657, out _out658, out _out659);
                  _2807_recursiveGen = _out656;
                  _2808_recOwned = _out657;
                  _2809_recErased = _out658;
                  _2810_recIdents = _out659;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2807_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2808_recOwned;
                  isErased = _2809_recErased;
                  readIdents = _2810_recIdents;
                }
              } else if (_source149.is_Multiset) {
                DAST._IType _2811___mcc_h613 = _source149.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2812_recursiveGen;
                  bool _2813_recOwned;
                  bool _2814_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2815_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out660;
                  bool _out661;
                  bool _out662;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out663;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out660, out _out661, out _out662, out _out663);
                  _2812_recursiveGen = _out660;
                  _2813_recOwned = _out661;
                  _2814_recErased = _out662;
                  _2815_recIdents = _out663;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2812_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2813_recOwned;
                  isErased = _2814_recErased;
                  readIdents = _2815_recIdents;
                }
              } else if (_source149.is_Map) {
                DAST._IType _2816___mcc_h615 = _source149.dtor_key;
                DAST._IType _2817___mcc_h616 = _source149.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2818_recursiveGen;
                  bool _2819_recOwned;
                  bool _2820_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2821_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out664;
                  bool _out665;
                  bool _out666;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out667;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out664, out _out665, out _out666, out _out667);
                  _2818_recursiveGen = _out664;
                  _2819_recOwned = _out665;
                  _2820_recErased = _out666;
                  _2821_recIdents = _out667;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2818_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2819_recOwned;
                  isErased = _2820_recErased;
                  readIdents = _2821_recIdents;
                }
              } else if (_source149.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2822___mcc_h619 = _source149.dtor_args;
                DAST._IType _2823___mcc_h620 = _source149.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2824_recursiveGen;
                  bool _2825_recOwned;
                  bool _2826_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2827_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out668;
                  bool _out669;
                  bool _out670;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out671;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out668, out _out669, out _out670, out _out671);
                  _2824_recursiveGen = _out668;
                  _2825_recOwned = _out669;
                  _2826_recErased = _out670;
                  _2827_recIdents = _out671;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2824_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2825_recOwned;
                  isErased = _2826_recErased;
                  readIdents = _2827_recIdents;
                }
              } else if (_source149.is_Primitive) {
                DAST._IPrimitive _2828___mcc_h623 = _source149.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2829_recursiveGen;
                  bool _2830_recOwned;
                  bool _2831_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2832_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out672;
                  bool _out673;
                  bool _out674;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out675;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out672, out _out673, out _out674, out _out675);
                  _2829_recursiveGen = _out672;
                  _2830_recOwned = _out673;
                  _2831_recErased = _out674;
                  _2832_recIdents = _out675;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2829_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2830_recOwned;
                  isErased = _2831_recErased;
                  readIdents = _2832_recIdents;
                }
              } else if (_source149.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2833___mcc_h625 = _source149.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2834_recursiveGen;
                  bool _2835_recOwned;
                  bool _2836_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2837_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out676;
                  bool _out677;
                  bool _out678;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out679;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out676, out _out677, out _out678, out _out679);
                  _2834_recursiveGen = _out676;
                  _2835_recOwned = _out677;
                  _2836_recErased = _out678;
                  _2837_recIdents = _out679;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2834_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2835_recOwned;
                  isErased = _2836_recErased;
                  readIdents = _2837_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2838___mcc_h627 = _source149.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2839_recursiveGen;
                  bool _2840_recOwned;
                  bool _2841_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2842_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out680;
                  bool _out681;
                  bool _out682;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out683;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out680, out _out681, out _out682, out _out683);
                  _2839_recursiveGen = _out680;
                  _2840_recOwned = _out681;
                  _2841_recErased = _out682;
                  _2842_recIdents = _out683;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2839_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2840_recOwned;
                  isErased = _2841_recErased;
                  readIdents = _2842_recIdents;
                }
              }
            } else if (_source137.is_Seq) {
              DAST._IType _2843___mcc_h629 = _source137.dtor_element;
              DAST._IType _source151 = _2337___mcc_h306;
              if (_source151.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2844___mcc_h633 = _source151.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2845___mcc_h634 = _source151.dtor_typeArgs;
                DAST._IResolvedType _2846___mcc_h635 = _source151.dtor_resolved;
                DAST._IResolvedType _source152 = _2846___mcc_h635;
                if (_source152.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2847___mcc_h639 = _source152.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2848_recursiveGen;
                    bool _2849_recOwned;
                    bool _2850_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2851_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out684;
                    bool _out685;
                    bool _out686;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out687;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out684, out _out685, out _out686, out _out687);
                    _2848_recursiveGen = _out684;
                    _2849_recOwned = _out685;
                    _2850_recErased = _out686;
                    _2851_recIdents = _out687;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2848_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2849_recOwned;
                    isErased = _2850_recErased;
                    readIdents = _2851_recIdents;
                  }
                } else if (_source152.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2852___mcc_h641 = _source152.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2853_recursiveGen;
                    bool _2854_recOwned;
                    bool _2855_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2856_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out688;
                    bool _out689;
                    bool _out690;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out691;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out688, out _out689, out _out690, out _out691);
                    _2853_recursiveGen = _out688;
                    _2854_recOwned = _out689;
                    _2855_recErased = _out690;
                    _2856_recIdents = _out691;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2853_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2854_recOwned;
                    isErased = _2855_recErased;
                    readIdents = _2856_recIdents;
                  }
                } else {
                  DAST._IType _2857___mcc_h643 = _source152.dtor_Newtype_a0;
                  DAST._IType _2858_b = _2857___mcc_h643;
                  {
                    if (object.Equals(_2330_fromTpe, _2858_b)) {
                      Dafny.ISequence<Dafny.Rune> _2859_recursiveGen;
                      bool _2860_recOwned;
                      bool _2861_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2862_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out692;
                      bool _out693;
                      bool _out694;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out695;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out692, out _out693, out _out694, out _out695);
                      _2859_recursiveGen = _out692;
                      _2860_recOwned = _out693;
                      _2861_recErased = _out694;
                      _2862_recIdents = _out695;
                      Dafny.ISequence<Dafny.Rune> _2863_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out696;
                      _out696 = DCOMP.COMP.GenType(_2329_toTpe, true, false);
                      _2863_rhsType = _out696;
                      Dafny.ISequence<Dafny.Rune> _2864_uneraseFn;
                      _2864_uneraseFn = ((_2860_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2863_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2864_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2859_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2860_recOwned;
                      isErased = false;
                      readIdents = _2862_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out697;
                      bool _out698;
                      bool _out699;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out700;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2331_expr, _2330_fromTpe, _2858_b), _2858_b, _2329_toTpe), selfIdent, @params, mustOwn, out _out697, out _out698, out _out699, out _out700);
                      s = _out697;
                      isOwned = _out698;
                      isErased = _out699;
                      readIdents = _out700;
                    }
                  }
                }
              } else if (_source151.is_Nullable) {
                DAST._IType _2865___mcc_h645 = _source151.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2866_recursiveGen;
                  bool _2867_recOwned;
                  bool _2868_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2869_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out701;
                  bool _out702;
                  bool _out703;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out704;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out701, out _out702, out _out703, out _out704);
                  _2866_recursiveGen = _out701;
                  _2867_recOwned = _out702;
                  _2868_recErased = _out703;
                  _2869_recIdents = _out704;
                  if (!(_2867_recOwned)) {
                    _2866_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2866_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2866_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2868_recErased;
                  readIdents = _2869_recIdents;
                }
              } else if (_source151.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2870___mcc_h647 = _source151.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2871_recursiveGen;
                  bool _2872_recOwned;
                  bool _2873_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2874_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out705;
                  bool _out706;
                  bool _out707;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out708;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out705, out _out706, out _out707, out _out708);
                  _2871_recursiveGen = _out705;
                  _2872_recOwned = _out706;
                  _2873_recErased = _out707;
                  _2874_recIdents = _out708;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2871_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2872_recOwned;
                  isErased = _2873_recErased;
                  readIdents = _2874_recIdents;
                }
              } else if (_source151.is_Array) {
                DAST._IType _2875___mcc_h649 = _source151.dtor_element;
                BigInteger _2876___mcc_h650 = _source151.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2877_recursiveGen;
                  bool _2878_recOwned;
                  bool _2879_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2880_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out709;
                  bool _out710;
                  bool _out711;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out712;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out709, out _out710, out _out711, out _out712);
                  _2877_recursiveGen = _out709;
                  _2878_recOwned = _out710;
                  _2879_recErased = _out711;
                  _2880_recIdents = _out712;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2877_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2878_recOwned;
                  isErased = _2879_recErased;
                  readIdents = _2880_recIdents;
                }
              } else if (_source151.is_Seq) {
                DAST._IType _2881___mcc_h653 = _source151.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2882_recursiveGen;
                  bool _2883_recOwned;
                  bool _2884_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2885_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out713;
                  bool _out714;
                  bool _out715;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out716;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out713, out _out714, out _out715, out _out716);
                  _2882_recursiveGen = _out713;
                  _2883_recOwned = _out714;
                  _2884_recErased = _out715;
                  _2885_recIdents = _out716;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2882_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2883_recOwned;
                  isErased = _2884_recErased;
                  readIdents = _2885_recIdents;
                }
              } else if (_source151.is_Set) {
                DAST._IType _2886___mcc_h655 = _source151.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2887_recursiveGen;
                  bool _2888_recOwned;
                  bool _2889_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2890_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out717;
                  bool _out718;
                  bool _out719;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out720;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out717, out _out718, out _out719, out _out720);
                  _2887_recursiveGen = _out717;
                  _2888_recOwned = _out718;
                  _2889_recErased = _out719;
                  _2890_recIdents = _out720;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2887_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2888_recOwned;
                  isErased = _2889_recErased;
                  readIdents = _2890_recIdents;
                }
              } else if (_source151.is_Multiset) {
                DAST._IType _2891___mcc_h657 = _source151.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2892_recursiveGen;
                  bool _2893_recOwned;
                  bool _2894_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2895_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out721;
                  bool _out722;
                  bool _out723;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out724;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out721, out _out722, out _out723, out _out724);
                  _2892_recursiveGen = _out721;
                  _2893_recOwned = _out722;
                  _2894_recErased = _out723;
                  _2895_recIdents = _out724;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2892_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2893_recOwned;
                  isErased = _2894_recErased;
                  readIdents = _2895_recIdents;
                }
              } else if (_source151.is_Map) {
                DAST._IType _2896___mcc_h659 = _source151.dtor_key;
                DAST._IType _2897___mcc_h660 = _source151.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2898_recursiveGen;
                  bool _2899_recOwned;
                  bool _2900_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2901_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out725;
                  bool _out726;
                  bool _out727;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out728;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out725, out _out726, out _out727, out _out728);
                  _2898_recursiveGen = _out725;
                  _2899_recOwned = _out726;
                  _2900_recErased = _out727;
                  _2901_recIdents = _out728;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2898_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2899_recOwned;
                  isErased = _2900_recErased;
                  readIdents = _2901_recIdents;
                }
              } else if (_source151.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2902___mcc_h663 = _source151.dtor_args;
                DAST._IType _2903___mcc_h664 = _source151.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2904_recursiveGen;
                  bool _2905_recOwned;
                  bool _2906_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2907_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out729;
                  bool _out730;
                  bool _out731;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out732;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out729, out _out730, out _out731, out _out732);
                  _2904_recursiveGen = _out729;
                  _2905_recOwned = _out730;
                  _2906_recErased = _out731;
                  _2907_recIdents = _out732;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2904_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2905_recOwned;
                  isErased = _2906_recErased;
                  readIdents = _2907_recIdents;
                }
              } else if (_source151.is_Primitive) {
                DAST._IPrimitive _2908___mcc_h667 = _source151.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2909_recursiveGen;
                  bool _2910_recOwned;
                  bool _2911_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2912_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out733;
                  bool _out734;
                  bool _out735;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out736;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out733, out _out734, out _out735, out _out736);
                  _2909_recursiveGen = _out733;
                  _2910_recOwned = _out734;
                  _2911_recErased = _out735;
                  _2912_recIdents = _out736;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2909_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2910_recOwned;
                  isErased = _2911_recErased;
                  readIdents = _2912_recIdents;
                }
              } else if (_source151.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2913___mcc_h669 = _source151.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2914_recursiveGen;
                  bool _2915_recOwned;
                  bool _2916_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2917_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out737;
                  bool _out738;
                  bool _out739;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out740;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out737, out _out738, out _out739, out _out740);
                  _2914_recursiveGen = _out737;
                  _2915_recOwned = _out738;
                  _2916_recErased = _out739;
                  _2917_recIdents = _out740;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2914_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2915_recOwned;
                  isErased = _2916_recErased;
                  readIdents = _2917_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2918___mcc_h671 = _source151.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2919_recursiveGen;
                  bool _2920_recOwned;
                  bool _2921_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2922_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out741;
                  bool _out742;
                  bool _out743;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out744;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out741, out _out742, out _out743, out _out744);
                  _2919_recursiveGen = _out741;
                  _2920_recOwned = _out742;
                  _2921_recErased = _out743;
                  _2922_recIdents = _out744;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2919_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2920_recOwned;
                  isErased = _2921_recErased;
                  readIdents = _2922_recIdents;
                }
              }
            } else if (_source137.is_Set) {
              DAST._IType _2923___mcc_h673 = _source137.dtor_element;
              DAST._IType _source153 = _2337___mcc_h306;
              if (_source153.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2924___mcc_h677 = _source153.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2925___mcc_h678 = _source153.dtor_typeArgs;
                DAST._IResolvedType _2926___mcc_h679 = _source153.dtor_resolved;
                DAST._IResolvedType _source154 = _2926___mcc_h679;
                if (_source154.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2927___mcc_h683 = _source154.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2928_recursiveGen;
                    bool _2929_recOwned;
                    bool _2930_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2931_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out745;
                    bool _out746;
                    bool _out747;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out748;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out745, out _out746, out _out747, out _out748);
                    _2928_recursiveGen = _out745;
                    _2929_recOwned = _out746;
                    _2930_recErased = _out747;
                    _2931_recIdents = _out748;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2928_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2929_recOwned;
                    isErased = _2930_recErased;
                    readIdents = _2931_recIdents;
                  }
                } else if (_source154.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2932___mcc_h685 = _source154.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2933_recursiveGen;
                    bool _2934_recOwned;
                    bool _2935_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2936_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out749;
                    bool _out750;
                    bool _out751;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out752;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out749, out _out750, out _out751, out _out752);
                    _2933_recursiveGen = _out749;
                    _2934_recOwned = _out750;
                    _2935_recErased = _out751;
                    _2936_recIdents = _out752;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2933_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2934_recOwned;
                    isErased = _2935_recErased;
                    readIdents = _2936_recIdents;
                  }
                } else {
                  DAST._IType _2937___mcc_h687 = _source154.dtor_Newtype_a0;
                  DAST._IType _2938_b = _2937___mcc_h687;
                  {
                    if (object.Equals(_2330_fromTpe, _2938_b)) {
                      Dafny.ISequence<Dafny.Rune> _2939_recursiveGen;
                      bool _2940_recOwned;
                      bool _2941_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2942_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out753;
                      bool _out754;
                      bool _out755;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out756;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out753, out _out754, out _out755, out _out756);
                      _2939_recursiveGen = _out753;
                      _2940_recOwned = _out754;
                      _2941_recErased = _out755;
                      _2942_recIdents = _out756;
                      Dafny.ISequence<Dafny.Rune> _2943_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out757;
                      _out757 = DCOMP.COMP.GenType(_2329_toTpe, true, false);
                      _2943_rhsType = _out757;
                      Dafny.ISequence<Dafny.Rune> _2944_uneraseFn;
                      _2944_uneraseFn = ((_2940_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2943_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2944_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2939_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2940_recOwned;
                      isErased = false;
                      readIdents = _2942_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out758;
                      bool _out759;
                      bool _out760;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out761;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2331_expr, _2330_fromTpe, _2938_b), _2938_b, _2329_toTpe), selfIdent, @params, mustOwn, out _out758, out _out759, out _out760, out _out761);
                      s = _out758;
                      isOwned = _out759;
                      isErased = _out760;
                      readIdents = _out761;
                    }
                  }
                }
              } else if (_source153.is_Nullable) {
                DAST._IType _2945___mcc_h689 = _source153.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2946_recursiveGen;
                  bool _2947_recOwned;
                  bool _2948_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2949_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out762;
                  bool _out763;
                  bool _out764;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out765;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out762, out _out763, out _out764, out _out765);
                  _2946_recursiveGen = _out762;
                  _2947_recOwned = _out763;
                  _2948_recErased = _out764;
                  _2949_recIdents = _out765;
                  if (!(_2947_recOwned)) {
                    _2946_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2946_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2946_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2948_recErased;
                  readIdents = _2949_recIdents;
                }
              } else if (_source153.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2950___mcc_h691 = _source153.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2951_recursiveGen;
                  bool _2952_recOwned;
                  bool _2953_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2954_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out766;
                  bool _out767;
                  bool _out768;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out769;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out766, out _out767, out _out768, out _out769);
                  _2951_recursiveGen = _out766;
                  _2952_recOwned = _out767;
                  _2953_recErased = _out768;
                  _2954_recIdents = _out769;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2951_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2952_recOwned;
                  isErased = _2953_recErased;
                  readIdents = _2954_recIdents;
                }
              } else if (_source153.is_Array) {
                DAST._IType _2955___mcc_h693 = _source153.dtor_element;
                BigInteger _2956___mcc_h694 = _source153.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2957_recursiveGen;
                  bool _2958_recOwned;
                  bool _2959_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2960_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out770;
                  bool _out771;
                  bool _out772;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out773;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out770, out _out771, out _out772, out _out773);
                  _2957_recursiveGen = _out770;
                  _2958_recOwned = _out771;
                  _2959_recErased = _out772;
                  _2960_recIdents = _out773;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2957_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2958_recOwned;
                  isErased = _2959_recErased;
                  readIdents = _2960_recIdents;
                }
              } else if (_source153.is_Seq) {
                DAST._IType _2961___mcc_h697 = _source153.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2962_recursiveGen;
                  bool _2963_recOwned;
                  bool _2964_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2965_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out774;
                  bool _out775;
                  bool _out776;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out777;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out774, out _out775, out _out776, out _out777);
                  _2962_recursiveGen = _out774;
                  _2963_recOwned = _out775;
                  _2964_recErased = _out776;
                  _2965_recIdents = _out777;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2962_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2963_recOwned;
                  isErased = _2964_recErased;
                  readIdents = _2965_recIdents;
                }
              } else if (_source153.is_Set) {
                DAST._IType _2966___mcc_h699 = _source153.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2967_recursiveGen;
                  bool _2968_recOwned;
                  bool _2969_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2970_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out778;
                  bool _out779;
                  bool _out780;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out781;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out778, out _out779, out _out780, out _out781);
                  _2967_recursiveGen = _out778;
                  _2968_recOwned = _out779;
                  _2969_recErased = _out780;
                  _2970_recIdents = _out781;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2967_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2968_recOwned;
                  isErased = _2969_recErased;
                  readIdents = _2970_recIdents;
                }
              } else if (_source153.is_Multiset) {
                DAST._IType _2971___mcc_h701 = _source153.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2972_recursiveGen;
                  bool _2973_recOwned;
                  bool _2974_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2975_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out782;
                  bool _out783;
                  bool _out784;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out785;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out782, out _out783, out _out784, out _out785);
                  _2972_recursiveGen = _out782;
                  _2973_recOwned = _out783;
                  _2974_recErased = _out784;
                  _2975_recIdents = _out785;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2972_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2973_recOwned;
                  isErased = _2974_recErased;
                  readIdents = _2975_recIdents;
                }
              } else if (_source153.is_Map) {
                DAST._IType _2976___mcc_h703 = _source153.dtor_key;
                DAST._IType _2977___mcc_h704 = _source153.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2978_recursiveGen;
                  bool _2979_recOwned;
                  bool _2980_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2981_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out786;
                  bool _out787;
                  bool _out788;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out789;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out786, out _out787, out _out788, out _out789);
                  _2978_recursiveGen = _out786;
                  _2979_recOwned = _out787;
                  _2980_recErased = _out788;
                  _2981_recIdents = _out789;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2978_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2979_recOwned;
                  isErased = _2980_recErased;
                  readIdents = _2981_recIdents;
                }
              } else if (_source153.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2982___mcc_h707 = _source153.dtor_args;
                DAST._IType _2983___mcc_h708 = _source153.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2984_recursiveGen;
                  bool _2985_recOwned;
                  bool _2986_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2987_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out790;
                  bool _out791;
                  bool _out792;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out793;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out790, out _out791, out _out792, out _out793);
                  _2984_recursiveGen = _out790;
                  _2985_recOwned = _out791;
                  _2986_recErased = _out792;
                  _2987_recIdents = _out793;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2984_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2985_recOwned;
                  isErased = _2986_recErased;
                  readIdents = _2987_recIdents;
                }
              } else if (_source153.is_Primitive) {
                DAST._IPrimitive _2988___mcc_h711 = _source153.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2989_recursiveGen;
                  bool _2990_recOwned;
                  bool _2991_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2992_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out794;
                  bool _out795;
                  bool _out796;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out797;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out794, out _out795, out _out796, out _out797);
                  _2989_recursiveGen = _out794;
                  _2990_recOwned = _out795;
                  _2991_recErased = _out796;
                  _2992_recIdents = _out797;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2989_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2990_recOwned;
                  isErased = _2991_recErased;
                  readIdents = _2992_recIdents;
                }
              } else if (_source153.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2993___mcc_h713 = _source153.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2994_recursiveGen;
                  bool _2995_recOwned;
                  bool _2996_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2997_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out798;
                  bool _out799;
                  bool _out800;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out801;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out798, out _out799, out _out800, out _out801);
                  _2994_recursiveGen = _out798;
                  _2995_recOwned = _out799;
                  _2996_recErased = _out800;
                  _2997_recIdents = _out801;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2994_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2995_recOwned;
                  isErased = _2996_recErased;
                  readIdents = _2997_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2998___mcc_h715 = _source153.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2999_recursiveGen;
                  bool _3000_recOwned;
                  bool _3001_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3002_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out802;
                  bool _out803;
                  bool _out804;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out805;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out802, out _out803, out _out804, out _out805);
                  _2999_recursiveGen = _out802;
                  _3000_recOwned = _out803;
                  _3001_recErased = _out804;
                  _3002_recIdents = _out805;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2999_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3000_recOwned;
                  isErased = _3001_recErased;
                  readIdents = _3002_recIdents;
                }
              }
            } else if (_source137.is_Multiset) {
              DAST._IType _3003___mcc_h717 = _source137.dtor_element;
              DAST._IType _source155 = _2337___mcc_h306;
              if (_source155.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3004___mcc_h721 = _source155.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _3005___mcc_h722 = _source155.dtor_typeArgs;
                DAST._IResolvedType _3006___mcc_h723 = _source155.dtor_resolved;
                DAST._IResolvedType _source156 = _3006___mcc_h723;
                if (_source156.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3007___mcc_h727 = _source156.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _3008_recursiveGen;
                    bool _3009_recOwned;
                    bool _3010_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3011_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out806;
                    bool _out807;
                    bool _out808;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out809;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out806, out _out807, out _out808, out _out809);
                    _3008_recursiveGen = _out806;
                    _3009_recOwned = _out807;
                    _3010_recErased = _out808;
                    _3011_recIdents = _out809;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3008_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3009_recOwned;
                    isErased = _3010_recErased;
                    readIdents = _3011_recIdents;
                  }
                } else if (_source156.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3012___mcc_h729 = _source156.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _3013_recursiveGen;
                    bool _3014_recOwned;
                    bool _3015_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3016_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out810;
                    bool _out811;
                    bool _out812;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out813;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out810, out _out811, out _out812, out _out813);
                    _3013_recursiveGen = _out810;
                    _3014_recOwned = _out811;
                    _3015_recErased = _out812;
                    _3016_recIdents = _out813;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3013_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3014_recOwned;
                    isErased = _3015_recErased;
                    readIdents = _3016_recIdents;
                  }
                } else {
                  DAST._IType _3017___mcc_h731 = _source156.dtor_Newtype_a0;
                  DAST._IType _3018_b = _3017___mcc_h731;
                  {
                    if (object.Equals(_2330_fromTpe, _3018_b)) {
                      Dafny.ISequence<Dafny.Rune> _3019_recursiveGen;
                      bool _3020_recOwned;
                      bool _3021_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3022_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out814;
                      bool _out815;
                      bool _out816;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out817;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out814, out _out815, out _out816, out _out817);
                      _3019_recursiveGen = _out814;
                      _3020_recOwned = _out815;
                      _3021_recErased = _out816;
                      _3022_recIdents = _out817;
                      Dafny.ISequence<Dafny.Rune> _3023_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out818;
                      _out818 = DCOMP.COMP.GenType(_2329_toTpe, true, false);
                      _3023_rhsType = _out818;
                      Dafny.ISequence<Dafny.Rune> _3024_uneraseFn;
                      _3024_uneraseFn = ((_3020_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3023_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _3024_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3019_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _3020_recOwned;
                      isErased = false;
                      readIdents = _3022_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out819;
                      bool _out820;
                      bool _out821;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out822;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2331_expr, _2330_fromTpe, _3018_b), _3018_b, _2329_toTpe), selfIdent, @params, mustOwn, out _out819, out _out820, out _out821, out _out822);
                      s = _out819;
                      isOwned = _out820;
                      isErased = _out821;
                      readIdents = _out822;
                    }
                  }
                }
              } else if (_source155.is_Nullable) {
                DAST._IType _3025___mcc_h733 = _source155.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3026_recursiveGen;
                  bool _3027_recOwned;
                  bool _3028_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3029_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out823;
                  bool _out824;
                  bool _out825;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out826;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out823, out _out824, out _out825, out _out826);
                  _3026_recursiveGen = _out823;
                  _3027_recOwned = _out824;
                  _3028_recErased = _out825;
                  _3029_recIdents = _out826;
                  if (!(_3027_recOwned)) {
                    _3026_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_3026_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3026_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _3028_recErased;
                  readIdents = _3029_recIdents;
                }
              } else if (_source155.is_Tuple) {
                Dafny.ISequence<DAST._IType> _3030___mcc_h735 = _source155.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3031_recursiveGen;
                  bool _3032_recOwned;
                  bool _3033_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3034_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out827;
                  bool _out828;
                  bool _out829;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out830;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out827, out _out828, out _out829, out _out830);
                  _3031_recursiveGen = _out827;
                  _3032_recOwned = _out828;
                  _3033_recErased = _out829;
                  _3034_recIdents = _out830;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3031_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3032_recOwned;
                  isErased = _3033_recErased;
                  readIdents = _3034_recIdents;
                }
              } else if (_source155.is_Array) {
                DAST._IType _3035___mcc_h737 = _source155.dtor_element;
                BigInteger _3036___mcc_h738 = _source155.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _3037_recursiveGen;
                  bool _3038_recOwned;
                  bool _3039_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3040_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out831;
                  bool _out832;
                  bool _out833;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out834;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out831, out _out832, out _out833, out _out834);
                  _3037_recursiveGen = _out831;
                  _3038_recOwned = _out832;
                  _3039_recErased = _out833;
                  _3040_recIdents = _out834;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3037_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3038_recOwned;
                  isErased = _3039_recErased;
                  readIdents = _3040_recIdents;
                }
              } else if (_source155.is_Seq) {
                DAST._IType _3041___mcc_h741 = _source155.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3042_recursiveGen;
                  bool _3043_recOwned;
                  bool _3044_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3045_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out835;
                  bool _out836;
                  bool _out837;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out838;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out835, out _out836, out _out837, out _out838);
                  _3042_recursiveGen = _out835;
                  _3043_recOwned = _out836;
                  _3044_recErased = _out837;
                  _3045_recIdents = _out838;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3042_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3043_recOwned;
                  isErased = _3044_recErased;
                  readIdents = _3045_recIdents;
                }
              } else if (_source155.is_Set) {
                DAST._IType _3046___mcc_h743 = _source155.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3047_recursiveGen;
                  bool _3048_recOwned;
                  bool _3049_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3050_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out839;
                  bool _out840;
                  bool _out841;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out842;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out839, out _out840, out _out841, out _out842);
                  _3047_recursiveGen = _out839;
                  _3048_recOwned = _out840;
                  _3049_recErased = _out841;
                  _3050_recIdents = _out842;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3047_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3048_recOwned;
                  isErased = _3049_recErased;
                  readIdents = _3050_recIdents;
                }
              } else if (_source155.is_Multiset) {
                DAST._IType _3051___mcc_h745 = _source155.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3052_recursiveGen;
                  bool _3053_recOwned;
                  bool _3054_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3055_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out843;
                  bool _out844;
                  bool _out845;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out846;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out843, out _out844, out _out845, out _out846);
                  _3052_recursiveGen = _out843;
                  _3053_recOwned = _out844;
                  _3054_recErased = _out845;
                  _3055_recIdents = _out846;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3052_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3053_recOwned;
                  isErased = _3054_recErased;
                  readIdents = _3055_recIdents;
                }
              } else if (_source155.is_Map) {
                DAST._IType _3056___mcc_h747 = _source155.dtor_key;
                DAST._IType _3057___mcc_h748 = _source155.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _3058_recursiveGen;
                  bool _3059_recOwned;
                  bool _3060_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3061_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out847;
                  bool _out848;
                  bool _out849;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out850;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out847, out _out848, out _out849, out _out850);
                  _3058_recursiveGen = _out847;
                  _3059_recOwned = _out848;
                  _3060_recErased = _out849;
                  _3061_recIdents = _out850;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3058_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3059_recOwned;
                  isErased = _3060_recErased;
                  readIdents = _3061_recIdents;
                }
              } else if (_source155.is_Arrow) {
                Dafny.ISequence<DAST._IType> _3062___mcc_h751 = _source155.dtor_args;
                DAST._IType _3063___mcc_h752 = _source155.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _3064_recursiveGen;
                  bool _3065_recOwned;
                  bool _3066_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3067_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out851;
                  bool _out852;
                  bool _out853;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out854;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out851, out _out852, out _out853, out _out854);
                  _3064_recursiveGen = _out851;
                  _3065_recOwned = _out852;
                  _3066_recErased = _out853;
                  _3067_recIdents = _out854;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3064_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3065_recOwned;
                  isErased = _3066_recErased;
                  readIdents = _3067_recIdents;
                }
              } else if (_source155.is_Primitive) {
                DAST._IPrimitive _3068___mcc_h755 = _source155.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3069_recursiveGen;
                  bool _3070_recOwned;
                  bool _3071_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3072_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out855;
                  bool _out856;
                  bool _out857;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out858;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out855, out _out856, out _out857, out _out858);
                  _3069_recursiveGen = _out855;
                  _3070_recOwned = _out856;
                  _3071_recErased = _out857;
                  _3072_recIdents = _out858;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3069_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3070_recOwned;
                  isErased = _3071_recErased;
                  readIdents = _3072_recIdents;
                }
              } else if (_source155.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _3073___mcc_h757 = _source155.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3074_recursiveGen;
                  bool _3075_recOwned;
                  bool _3076_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3077_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out859;
                  bool _out860;
                  bool _out861;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out862;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out859, out _out860, out _out861, out _out862);
                  _3074_recursiveGen = _out859;
                  _3075_recOwned = _out860;
                  _3076_recErased = _out861;
                  _3077_recIdents = _out862;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3074_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3075_recOwned;
                  isErased = _3076_recErased;
                  readIdents = _3077_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3078___mcc_h759 = _source155.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3079_recursiveGen;
                  bool _3080_recOwned;
                  bool _3081_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3082_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out863;
                  bool _out864;
                  bool _out865;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out866;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out863, out _out864, out _out865, out _out866);
                  _3079_recursiveGen = _out863;
                  _3080_recOwned = _out864;
                  _3081_recErased = _out865;
                  _3082_recIdents = _out866;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3079_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3080_recOwned;
                  isErased = _3081_recErased;
                  readIdents = _3082_recIdents;
                }
              }
            } else if (_source137.is_Map) {
              DAST._IType _3083___mcc_h761 = _source137.dtor_key;
              DAST._IType _3084___mcc_h762 = _source137.dtor_value;
              DAST._IType _source157 = _2337___mcc_h306;
              if (_source157.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3085___mcc_h769 = _source157.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _3086___mcc_h770 = _source157.dtor_typeArgs;
                DAST._IResolvedType _3087___mcc_h771 = _source157.dtor_resolved;
                DAST._IResolvedType _source158 = _3087___mcc_h771;
                if (_source158.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3088___mcc_h775 = _source158.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _3089_recursiveGen;
                    bool _3090_recOwned;
                    bool _3091_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3092_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out867;
                    bool _out868;
                    bool _out869;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out870;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out867, out _out868, out _out869, out _out870);
                    _3089_recursiveGen = _out867;
                    _3090_recOwned = _out868;
                    _3091_recErased = _out869;
                    _3092_recIdents = _out870;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3089_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3090_recOwned;
                    isErased = _3091_recErased;
                    readIdents = _3092_recIdents;
                  }
                } else if (_source158.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3093___mcc_h777 = _source158.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _3094_recursiveGen;
                    bool _3095_recOwned;
                    bool _3096_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3097_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out871;
                    bool _out872;
                    bool _out873;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out874;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out871, out _out872, out _out873, out _out874);
                    _3094_recursiveGen = _out871;
                    _3095_recOwned = _out872;
                    _3096_recErased = _out873;
                    _3097_recIdents = _out874;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3094_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3095_recOwned;
                    isErased = _3096_recErased;
                    readIdents = _3097_recIdents;
                  }
                } else {
                  DAST._IType _3098___mcc_h779 = _source158.dtor_Newtype_a0;
                  DAST._IType _3099_b = _3098___mcc_h779;
                  {
                    if (object.Equals(_2330_fromTpe, _3099_b)) {
                      Dafny.ISequence<Dafny.Rune> _3100_recursiveGen;
                      bool _3101_recOwned;
                      bool _3102_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3103_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out875;
                      bool _out876;
                      bool _out877;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out878;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out875, out _out876, out _out877, out _out878);
                      _3100_recursiveGen = _out875;
                      _3101_recOwned = _out876;
                      _3102_recErased = _out877;
                      _3103_recIdents = _out878;
                      Dafny.ISequence<Dafny.Rune> _3104_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out879;
                      _out879 = DCOMP.COMP.GenType(_2329_toTpe, true, false);
                      _3104_rhsType = _out879;
                      Dafny.ISequence<Dafny.Rune> _3105_uneraseFn;
                      _3105_uneraseFn = ((_3101_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3104_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _3105_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3100_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _3101_recOwned;
                      isErased = false;
                      readIdents = _3103_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out880;
                      bool _out881;
                      bool _out882;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out883;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2331_expr, _2330_fromTpe, _3099_b), _3099_b, _2329_toTpe), selfIdent, @params, mustOwn, out _out880, out _out881, out _out882, out _out883);
                      s = _out880;
                      isOwned = _out881;
                      isErased = _out882;
                      readIdents = _out883;
                    }
                  }
                }
              } else if (_source157.is_Nullable) {
                DAST._IType _3106___mcc_h781 = _source157.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3107_recursiveGen;
                  bool _3108_recOwned;
                  bool _3109_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3110_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out884;
                  bool _out885;
                  bool _out886;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out887;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out884, out _out885, out _out886, out _out887);
                  _3107_recursiveGen = _out884;
                  _3108_recOwned = _out885;
                  _3109_recErased = _out886;
                  _3110_recIdents = _out887;
                  if (!(_3108_recOwned)) {
                    _3107_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_3107_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3107_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _3109_recErased;
                  readIdents = _3110_recIdents;
                }
              } else if (_source157.is_Tuple) {
                Dafny.ISequence<DAST._IType> _3111___mcc_h783 = _source157.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3112_recursiveGen;
                  bool _3113_recOwned;
                  bool _3114_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3115_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out888;
                  bool _out889;
                  bool _out890;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out891;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out888, out _out889, out _out890, out _out891);
                  _3112_recursiveGen = _out888;
                  _3113_recOwned = _out889;
                  _3114_recErased = _out890;
                  _3115_recIdents = _out891;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3112_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3113_recOwned;
                  isErased = _3114_recErased;
                  readIdents = _3115_recIdents;
                }
              } else if (_source157.is_Array) {
                DAST._IType _3116___mcc_h785 = _source157.dtor_element;
                BigInteger _3117___mcc_h786 = _source157.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _3118_recursiveGen;
                  bool _3119_recOwned;
                  bool _3120_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3121_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out892;
                  bool _out893;
                  bool _out894;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out895;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out892, out _out893, out _out894, out _out895);
                  _3118_recursiveGen = _out892;
                  _3119_recOwned = _out893;
                  _3120_recErased = _out894;
                  _3121_recIdents = _out895;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3118_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3119_recOwned;
                  isErased = _3120_recErased;
                  readIdents = _3121_recIdents;
                }
              } else if (_source157.is_Seq) {
                DAST._IType _3122___mcc_h789 = _source157.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3123_recursiveGen;
                  bool _3124_recOwned;
                  bool _3125_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3126_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out896;
                  bool _out897;
                  bool _out898;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out899;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out896, out _out897, out _out898, out _out899);
                  _3123_recursiveGen = _out896;
                  _3124_recOwned = _out897;
                  _3125_recErased = _out898;
                  _3126_recIdents = _out899;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3123_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3124_recOwned;
                  isErased = _3125_recErased;
                  readIdents = _3126_recIdents;
                }
              } else if (_source157.is_Set) {
                DAST._IType _3127___mcc_h791 = _source157.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3128_recursiveGen;
                  bool _3129_recOwned;
                  bool _3130_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3131_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out900;
                  bool _out901;
                  bool _out902;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out903;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out900, out _out901, out _out902, out _out903);
                  _3128_recursiveGen = _out900;
                  _3129_recOwned = _out901;
                  _3130_recErased = _out902;
                  _3131_recIdents = _out903;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3128_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3129_recOwned;
                  isErased = _3130_recErased;
                  readIdents = _3131_recIdents;
                }
              } else if (_source157.is_Multiset) {
                DAST._IType _3132___mcc_h793 = _source157.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3133_recursiveGen;
                  bool _3134_recOwned;
                  bool _3135_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3136_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out904;
                  bool _out905;
                  bool _out906;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out907;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out904, out _out905, out _out906, out _out907);
                  _3133_recursiveGen = _out904;
                  _3134_recOwned = _out905;
                  _3135_recErased = _out906;
                  _3136_recIdents = _out907;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3133_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3134_recOwned;
                  isErased = _3135_recErased;
                  readIdents = _3136_recIdents;
                }
              } else if (_source157.is_Map) {
                DAST._IType _3137___mcc_h795 = _source157.dtor_key;
                DAST._IType _3138___mcc_h796 = _source157.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _3139_recursiveGen;
                  bool _3140_recOwned;
                  bool _3141_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3142_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out908;
                  bool _out909;
                  bool _out910;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out911;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out908, out _out909, out _out910, out _out911);
                  _3139_recursiveGen = _out908;
                  _3140_recOwned = _out909;
                  _3141_recErased = _out910;
                  _3142_recIdents = _out911;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3139_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3140_recOwned;
                  isErased = _3141_recErased;
                  readIdents = _3142_recIdents;
                }
              } else if (_source157.is_Arrow) {
                Dafny.ISequence<DAST._IType> _3143___mcc_h799 = _source157.dtor_args;
                DAST._IType _3144___mcc_h800 = _source157.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _3145_recursiveGen;
                  bool _3146_recOwned;
                  bool _3147_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3148_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out912;
                  bool _out913;
                  bool _out914;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out915;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out912, out _out913, out _out914, out _out915);
                  _3145_recursiveGen = _out912;
                  _3146_recOwned = _out913;
                  _3147_recErased = _out914;
                  _3148_recIdents = _out915;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3145_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3146_recOwned;
                  isErased = _3147_recErased;
                  readIdents = _3148_recIdents;
                }
              } else if (_source157.is_Primitive) {
                DAST._IPrimitive _3149___mcc_h803 = _source157.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3150_recursiveGen;
                  bool _3151_recOwned;
                  bool _3152_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3153_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out916;
                  bool _out917;
                  bool _out918;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out919;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out916, out _out917, out _out918, out _out919);
                  _3150_recursiveGen = _out916;
                  _3151_recOwned = _out917;
                  _3152_recErased = _out918;
                  _3153_recIdents = _out919;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3150_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3151_recOwned;
                  isErased = _3152_recErased;
                  readIdents = _3153_recIdents;
                }
              } else if (_source157.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _3154___mcc_h805 = _source157.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3155_recursiveGen;
                  bool _3156_recOwned;
                  bool _3157_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3158_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out920;
                  bool _out921;
                  bool _out922;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out923;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out920, out _out921, out _out922, out _out923);
                  _3155_recursiveGen = _out920;
                  _3156_recOwned = _out921;
                  _3157_recErased = _out922;
                  _3158_recIdents = _out923;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3155_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3156_recOwned;
                  isErased = _3157_recErased;
                  readIdents = _3158_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3159___mcc_h807 = _source157.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3160_recursiveGen;
                  bool _3161_recOwned;
                  bool _3162_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3163_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out924;
                  bool _out925;
                  bool _out926;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out927;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out924, out _out925, out _out926, out _out927);
                  _3160_recursiveGen = _out924;
                  _3161_recOwned = _out925;
                  _3162_recErased = _out926;
                  _3163_recIdents = _out927;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3160_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3161_recOwned;
                  isErased = _3162_recErased;
                  readIdents = _3163_recIdents;
                }
              }
            } else if (_source137.is_Arrow) {
              Dafny.ISequence<DAST._IType> _3164___mcc_h809 = _source137.dtor_args;
              DAST._IType _3165___mcc_h810 = _source137.dtor_result;
              DAST._IType _source159 = _2337___mcc_h306;
              if (_source159.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3166___mcc_h817 = _source159.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _3167___mcc_h818 = _source159.dtor_typeArgs;
                DAST._IResolvedType _3168___mcc_h819 = _source159.dtor_resolved;
                DAST._IResolvedType _source160 = _3168___mcc_h819;
                if (_source160.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3169___mcc_h823 = _source160.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _3170_recursiveGen;
                    bool _3171_recOwned;
                    bool _3172_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3173_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out928;
                    bool _out929;
                    bool _out930;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out931;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out928, out _out929, out _out930, out _out931);
                    _3170_recursiveGen = _out928;
                    _3171_recOwned = _out929;
                    _3172_recErased = _out930;
                    _3173_recIdents = _out931;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3170_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3171_recOwned;
                    isErased = _3172_recErased;
                    readIdents = _3173_recIdents;
                  }
                } else if (_source160.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3174___mcc_h825 = _source160.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _3175_recursiveGen;
                    bool _3176_recOwned;
                    bool _3177_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3178_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out932;
                    bool _out933;
                    bool _out934;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out935;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out932, out _out933, out _out934, out _out935);
                    _3175_recursiveGen = _out932;
                    _3176_recOwned = _out933;
                    _3177_recErased = _out934;
                    _3178_recIdents = _out935;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3175_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3176_recOwned;
                    isErased = _3177_recErased;
                    readIdents = _3178_recIdents;
                  }
                } else {
                  DAST._IType _3179___mcc_h827 = _source160.dtor_Newtype_a0;
                  DAST._IType _3180_b = _3179___mcc_h827;
                  {
                    if (object.Equals(_2330_fromTpe, _3180_b)) {
                      Dafny.ISequence<Dafny.Rune> _3181_recursiveGen;
                      bool _3182_recOwned;
                      bool _3183_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3184_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out936;
                      bool _out937;
                      bool _out938;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out939;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out936, out _out937, out _out938, out _out939);
                      _3181_recursiveGen = _out936;
                      _3182_recOwned = _out937;
                      _3183_recErased = _out938;
                      _3184_recIdents = _out939;
                      Dafny.ISequence<Dafny.Rune> _3185_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out940;
                      _out940 = DCOMP.COMP.GenType(_2329_toTpe, true, false);
                      _3185_rhsType = _out940;
                      Dafny.ISequence<Dafny.Rune> _3186_uneraseFn;
                      _3186_uneraseFn = ((_3182_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3185_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _3186_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3181_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _3182_recOwned;
                      isErased = false;
                      readIdents = _3184_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out941;
                      bool _out942;
                      bool _out943;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out944;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2331_expr, _2330_fromTpe, _3180_b), _3180_b, _2329_toTpe), selfIdent, @params, mustOwn, out _out941, out _out942, out _out943, out _out944);
                      s = _out941;
                      isOwned = _out942;
                      isErased = _out943;
                      readIdents = _out944;
                    }
                  }
                }
              } else if (_source159.is_Nullable) {
                DAST._IType _3187___mcc_h829 = _source159.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3188_recursiveGen;
                  bool _3189_recOwned;
                  bool _3190_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3191_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out945;
                  bool _out946;
                  bool _out947;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out948;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out945, out _out946, out _out947, out _out948);
                  _3188_recursiveGen = _out945;
                  _3189_recOwned = _out946;
                  _3190_recErased = _out947;
                  _3191_recIdents = _out948;
                  if (!(_3189_recOwned)) {
                    _3188_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_3188_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3188_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _3190_recErased;
                  readIdents = _3191_recIdents;
                }
              } else if (_source159.is_Tuple) {
                Dafny.ISequence<DAST._IType> _3192___mcc_h831 = _source159.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3193_recursiveGen;
                  bool _3194_recOwned;
                  bool _3195_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3196_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out949;
                  bool _out950;
                  bool _out951;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out952;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out949, out _out950, out _out951, out _out952);
                  _3193_recursiveGen = _out949;
                  _3194_recOwned = _out950;
                  _3195_recErased = _out951;
                  _3196_recIdents = _out952;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3193_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3194_recOwned;
                  isErased = _3195_recErased;
                  readIdents = _3196_recIdents;
                }
              } else if (_source159.is_Array) {
                DAST._IType _3197___mcc_h833 = _source159.dtor_element;
                BigInteger _3198___mcc_h834 = _source159.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _3199_recursiveGen;
                  bool _3200_recOwned;
                  bool _3201_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3202_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out953;
                  bool _out954;
                  bool _out955;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out956;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out953, out _out954, out _out955, out _out956);
                  _3199_recursiveGen = _out953;
                  _3200_recOwned = _out954;
                  _3201_recErased = _out955;
                  _3202_recIdents = _out956;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3199_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3200_recOwned;
                  isErased = _3201_recErased;
                  readIdents = _3202_recIdents;
                }
              } else if (_source159.is_Seq) {
                DAST._IType _3203___mcc_h837 = _source159.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3204_recursiveGen;
                  bool _3205_recOwned;
                  bool _3206_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3207_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out957;
                  bool _out958;
                  bool _out959;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out960;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out957, out _out958, out _out959, out _out960);
                  _3204_recursiveGen = _out957;
                  _3205_recOwned = _out958;
                  _3206_recErased = _out959;
                  _3207_recIdents = _out960;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3204_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3205_recOwned;
                  isErased = _3206_recErased;
                  readIdents = _3207_recIdents;
                }
              } else if (_source159.is_Set) {
                DAST._IType _3208___mcc_h839 = _source159.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3209_recursiveGen;
                  bool _3210_recOwned;
                  bool _3211_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3212_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out961;
                  bool _out962;
                  bool _out963;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out964;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out961, out _out962, out _out963, out _out964);
                  _3209_recursiveGen = _out961;
                  _3210_recOwned = _out962;
                  _3211_recErased = _out963;
                  _3212_recIdents = _out964;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3209_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3210_recOwned;
                  isErased = _3211_recErased;
                  readIdents = _3212_recIdents;
                }
              } else if (_source159.is_Multiset) {
                DAST._IType _3213___mcc_h841 = _source159.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3214_recursiveGen;
                  bool _3215_recOwned;
                  bool _3216_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3217_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out965;
                  bool _out966;
                  bool _out967;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out968;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out965, out _out966, out _out967, out _out968);
                  _3214_recursiveGen = _out965;
                  _3215_recOwned = _out966;
                  _3216_recErased = _out967;
                  _3217_recIdents = _out968;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3214_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3215_recOwned;
                  isErased = _3216_recErased;
                  readIdents = _3217_recIdents;
                }
              } else if (_source159.is_Map) {
                DAST._IType _3218___mcc_h843 = _source159.dtor_key;
                DAST._IType _3219___mcc_h844 = _source159.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _3220_recursiveGen;
                  bool _3221_recOwned;
                  bool _3222_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3223_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out969;
                  bool _out970;
                  bool _out971;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out972;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out969, out _out970, out _out971, out _out972);
                  _3220_recursiveGen = _out969;
                  _3221_recOwned = _out970;
                  _3222_recErased = _out971;
                  _3223_recIdents = _out972;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3220_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3221_recOwned;
                  isErased = _3222_recErased;
                  readIdents = _3223_recIdents;
                }
              } else if (_source159.is_Arrow) {
                Dafny.ISequence<DAST._IType> _3224___mcc_h847 = _source159.dtor_args;
                DAST._IType _3225___mcc_h848 = _source159.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _3226_recursiveGen;
                  bool _3227_recOwned;
                  bool _3228_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3229_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out973;
                  bool _out974;
                  bool _out975;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out976;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out973, out _out974, out _out975, out _out976);
                  _3226_recursiveGen = _out973;
                  _3227_recOwned = _out974;
                  _3228_recErased = _out975;
                  _3229_recIdents = _out976;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3226_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3227_recOwned;
                  isErased = _3228_recErased;
                  readIdents = _3229_recIdents;
                }
              } else if (_source159.is_Primitive) {
                DAST._IPrimitive _3230___mcc_h851 = _source159.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3231_recursiveGen;
                  bool _3232_recOwned;
                  bool _3233_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3234_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out977;
                  bool _out978;
                  bool _out979;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out980;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out977, out _out978, out _out979, out _out980);
                  _3231_recursiveGen = _out977;
                  _3232_recOwned = _out978;
                  _3233_recErased = _out979;
                  _3234_recIdents = _out980;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3231_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3232_recOwned;
                  isErased = _3233_recErased;
                  readIdents = _3234_recIdents;
                }
              } else if (_source159.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _3235___mcc_h853 = _source159.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3236_recursiveGen;
                  bool _3237_recOwned;
                  bool _3238_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3239_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out981;
                  bool _out982;
                  bool _out983;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out984;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out981, out _out982, out _out983, out _out984);
                  _3236_recursiveGen = _out981;
                  _3237_recOwned = _out982;
                  _3238_recErased = _out983;
                  _3239_recIdents = _out984;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3236_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3237_recOwned;
                  isErased = _3238_recErased;
                  readIdents = _3239_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3240___mcc_h855 = _source159.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3241_recursiveGen;
                  bool _3242_recOwned;
                  bool _3243_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3244_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out985;
                  bool _out986;
                  bool _out987;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out988;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out985, out _out986, out _out987, out _out988);
                  _3241_recursiveGen = _out985;
                  _3242_recOwned = _out986;
                  _3243_recErased = _out987;
                  _3244_recIdents = _out988;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3241_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3242_recOwned;
                  isErased = _3243_recErased;
                  readIdents = _3244_recIdents;
                }
              }
            } else if (_source137.is_Primitive) {
              DAST._IPrimitive _3245___mcc_h857 = _source137.dtor_Primitive_a0;
              DAST._IPrimitive _source161 = _3245___mcc_h857;
              if (_source161.is_Int) {
                DAST._IType _source162 = _2337___mcc_h306;
                if (_source162.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3246___mcc_h861 = _source162.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _3247___mcc_h862 = _source162.dtor_typeArgs;
                  DAST._IResolvedType _3248___mcc_h863 = _source162.dtor_resolved;
                  DAST._IResolvedType _source163 = _3248___mcc_h863;
                  if (_source163.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3249___mcc_h867 = _source163.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _3250_recursiveGen;
                      bool _3251_recOwned;
                      bool _3252_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3253_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out989;
                      bool _out990;
                      bool _out991;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out992;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out989, out _out990, out _out991, out _out992);
                      _3250_recursiveGen = _out989;
                      _3251_recOwned = _out990;
                      _3252_recErased = _out991;
                      _3253_recIdents = _out992;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3250_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _3251_recOwned;
                      isErased = _3252_recErased;
                      readIdents = _3253_recIdents;
                    }
                  } else if (_source163.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3254___mcc_h869 = _source163.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _3255_recursiveGen;
                      bool _3256_recOwned;
                      bool _3257_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3258_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out993;
                      bool _out994;
                      bool _out995;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out996;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out993, out _out994, out _out995, out _out996);
                      _3255_recursiveGen = _out993;
                      _3256_recOwned = _out994;
                      _3257_recErased = _out995;
                      _3258_recIdents = _out996;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3255_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _3256_recOwned;
                      isErased = _3257_recErased;
                      readIdents = _3258_recIdents;
                    }
                  } else {
                    DAST._IType _3259___mcc_h871 = _source163.dtor_Newtype_a0;
                    DAST._IType _3260_b = _3259___mcc_h871;
                    {
                      if (object.Equals(_2330_fromTpe, _3260_b)) {
                        Dafny.ISequence<Dafny.Rune> _3261_recursiveGen;
                        bool _3262_recOwned;
                        bool _3263_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3264_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out997;
                        bool _out998;
                        bool _out999;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1000;
                        DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out997, out _out998, out _out999, out _out1000);
                        _3261_recursiveGen = _out997;
                        _3262_recOwned = _out998;
                        _3263_recErased = _out999;
                        _3264_recIdents = _out1000;
                        Dafny.ISequence<Dafny.Rune> _3265_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1001;
                        _out1001 = DCOMP.COMP.GenType(_2329_toTpe, true, false);
                        _3265_rhsType = _out1001;
                        Dafny.ISequence<Dafny.Rune> _3266_uneraseFn;
                        _3266_uneraseFn = ((_3262_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3265_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _3266_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3261_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _3262_recOwned;
                        isErased = false;
                        readIdents = _3264_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1002;
                        bool _out1003;
                        bool _out1004;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1005;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2331_expr, _2330_fromTpe, _3260_b), _3260_b, _2329_toTpe), selfIdent, @params, mustOwn, out _out1002, out _out1003, out _out1004, out _out1005);
                        s = _out1002;
                        isOwned = _out1003;
                        isErased = _out1004;
                        readIdents = _out1005;
                      }
                    }
                  }
                } else if (_source162.is_Nullable) {
                  DAST._IType _3267___mcc_h873 = _source162.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _3268_recursiveGen;
                    bool _3269_recOwned;
                    bool _3270_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3271_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1006;
                    bool _out1007;
                    bool _out1008;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1009;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1006, out _out1007, out _out1008, out _out1009);
                    _3268_recursiveGen = _out1006;
                    _3269_recOwned = _out1007;
                    _3270_recErased = _out1008;
                    _3271_recIdents = _out1009;
                    if (!(_3269_recOwned)) {
                      _3268_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_3268_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3268_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _3270_recErased;
                    readIdents = _3271_recIdents;
                  }
                } else if (_source162.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _3272___mcc_h875 = _source162.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _3273_recursiveGen;
                    bool _3274_recOwned;
                    bool _3275_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3276_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1010;
                    bool _out1011;
                    bool _out1012;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1013;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1010, out _out1011, out _out1012, out _out1013);
                    _3273_recursiveGen = _out1010;
                    _3274_recOwned = _out1011;
                    _3275_recErased = _out1012;
                    _3276_recIdents = _out1013;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3273_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3274_recOwned;
                    isErased = _3275_recErased;
                    readIdents = _3276_recIdents;
                  }
                } else if (_source162.is_Array) {
                  DAST._IType _3277___mcc_h877 = _source162.dtor_element;
                  BigInteger _3278___mcc_h878 = _source162.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _3279_recursiveGen;
                    bool _3280_recOwned;
                    bool _3281_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3282_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1014;
                    bool _out1015;
                    bool _out1016;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1017;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1014, out _out1015, out _out1016, out _out1017);
                    _3279_recursiveGen = _out1014;
                    _3280_recOwned = _out1015;
                    _3281_recErased = _out1016;
                    _3282_recIdents = _out1017;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3279_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3280_recOwned;
                    isErased = _3281_recErased;
                    readIdents = _3282_recIdents;
                  }
                } else if (_source162.is_Seq) {
                  DAST._IType _3283___mcc_h881 = _source162.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _3284_recursiveGen;
                    bool _3285_recOwned;
                    bool _3286_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3287_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1018;
                    bool _out1019;
                    bool _out1020;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1021;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1018, out _out1019, out _out1020, out _out1021);
                    _3284_recursiveGen = _out1018;
                    _3285_recOwned = _out1019;
                    _3286_recErased = _out1020;
                    _3287_recIdents = _out1021;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3284_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3285_recOwned;
                    isErased = _3286_recErased;
                    readIdents = _3287_recIdents;
                  }
                } else if (_source162.is_Set) {
                  DAST._IType _3288___mcc_h883 = _source162.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _3289_recursiveGen;
                    bool _3290_recOwned;
                    bool _3291_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3292_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1022;
                    bool _out1023;
                    bool _out1024;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1025;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1022, out _out1023, out _out1024, out _out1025);
                    _3289_recursiveGen = _out1022;
                    _3290_recOwned = _out1023;
                    _3291_recErased = _out1024;
                    _3292_recIdents = _out1025;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3289_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3290_recOwned;
                    isErased = _3291_recErased;
                    readIdents = _3292_recIdents;
                  }
                } else if (_source162.is_Multiset) {
                  DAST._IType _3293___mcc_h885 = _source162.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _3294_recursiveGen;
                    bool _3295_recOwned;
                    bool _3296_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3297_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1026;
                    bool _out1027;
                    bool _out1028;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1029;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1026, out _out1027, out _out1028, out _out1029);
                    _3294_recursiveGen = _out1026;
                    _3295_recOwned = _out1027;
                    _3296_recErased = _out1028;
                    _3297_recIdents = _out1029;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3294_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3295_recOwned;
                    isErased = _3296_recErased;
                    readIdents = _3297_recIdents;
                  }
                } else if (_source162.is_Map) {
                  DAST._IType _3298___mcc_h887 = _source162.dtor_key;
                  DAST._IType _3299___mcc_h888 = _source162.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _3300_recursiveGen;
                    bool _3301_recOwned;
                    bool _3302_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3303_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1030;
                    bool _out1031;
                    bool _out1032;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1033;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1030, out _out1031, out _out1032, out _out1033);
                    _3300_recursiveGen = _out1030;
                    _3301_recOwned = _out1031;
                    _3302_recErased = _out1032;
                    _3303_recIdents = _out1033;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3300_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3301_recOwned;
                    isErased = _3302_recErased;
                    readIdents = _3303_recIdents;
                  }
                } else if (_source162.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _3304___mcc_h891 = _source162.dtor_args;
                  DAST._IType _3305___mcc_h892 = _source162.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _3306_recursiveGen;
                    bool _3307_recOwned;
                    bool _3308_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3309_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1034;
                    bool _out1035;
                    bool _out1036;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1037;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1034, out _out1035, out _out1036, out _out1037);
                    _3306_recursiveGen = _out1034;
                    _3307_recOwned = _out1035;
                    _3308_recErased = _out1036;
                    _3309_recIdents = _out1037;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3306_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3307_recOwned;
                    isErased = _3308_recErased;
                    readIdents = _3309_recIdents;
                  }
                } else if (_source162.is_Primitive) {
                  DAST._IPrimitive _3310___mcc_h895 = _source162.dtor_Primitive_a0;
                  DAST._IPrimitive _source164 = _3310___mcc_h895;
                  if (_source164.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _3311_recursiveGen;
                      bool _3312_recOwned;
                      bool _3313_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3314_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1038;
                      bool _out1039;
                      bool _out1040;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1041;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1038, out _out1039, out _out1040, out _out1041);
                      _3311_recursiveGen = _out1038;
                      _3312_recOwned = _out1039;
                      _3313_recErased = _out1040;
                      _3314_recIdents = _out1041;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3311_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _3312_recOwned;
                      isErased = _3313_recErased;
                      readIdents = _3314_recIdents;
                    }
                  } else if (_source164.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _3315_recursiveGen;
                      bool _3316___v46;
                      bool _3317___v47;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3318_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1042;
                      bool _out1043;
                      bool _out1044;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1045;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, true, out _out1042, out _out1043, out _out1044, out _out1045);
                      _3315_recursiveGen = _out1042;
                      _3316___v46 = _out1043;
                      _3317___v47 = _out1044;
                      _3318_recIdents = _out1045;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), _3315_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _3318_recIdents;
                    }
                  } else if (_source164.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _3319_recursiveGen;
                      bool _3320_recOwned;
                      bool _3321_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3322_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1046;
                      bool _out1047;
                      bool _out1048;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1049;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1046, out _out1047, out _out1048, out _out1049);
                      _3319_recursiveGen = _out1046;
                      _3320_recOwned = _out1047;
                      _3321_recErased = _out1048;
                      _3322_recIdents = _out1049;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3319_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _3320_recOwned;
                      isErased = _3321_recErased;
                      readIdents = _3322_recIdents;
                    }
                  } else if (_source164.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _3323_recursiveGen;
                      bool _3324_recOwned;
                      bool _3325_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3326_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1050;
                      bool _out1051;
                      bool _out1052;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1053;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1050, out _out1051, out _out1052, out _out1053);
                      _3323_recursiveGen = _out1050;
                      _3324_recOwned = _out1051;
                      _3325_recErased = _out1052;
                      _3326_recIdents = _out1053;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3323_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _3324_recOwned;
                      isErased = _3325_recErased;
                      readIdents = _3326_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _3327_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1054;
                      _out1054 = DCOMP.COMP.GenType(_2329_toTpe, true, false);
                      _3327_rhsType = _out1054;
                      Dafny.ISequence<Dafny.Rune> _3328_recursiveGen;
                      bool _3329___v56;
                      bool _3330___v57;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3331_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1055;
                      bool _out1056;
                      bool _out1057;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1058;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, true, out _out1055, out _out1056, out _out1057, out _out1058);
                      _3328_recursiveGen = _out1055;
                      _3329___v56 = _out1056;
                      _3330___v57 = _out1057;
                      _3331_recIdents = _out1058;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), _3328_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _3331_recIdents;
                    }
                  }
                } else if (_source162.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _3332___mcc_h897 = _source162.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _3333_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out1059;
                    _out1059 = DCOMP.COMP.GenType(_2329_toTpe, true, false);
                    _3333_rhsType = _out1059;
                    Dafny.ISequence<Dafny.Rune> _3334_recursiveGen;
                    bool _3335___v51;
                    bool _3336___v52;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3337_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1060;
                    bool _out1061;
                    bool _out1062;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1063;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, true, out _out1060, out _out1061, out _out1062, out _out1063);
                    _3334_recursiveGen = _out1060;
                    _3335___v51 = _out1061;
                    _3336___v52 = _out1062;
                    _3337_recIdents = _out1063;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3333_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), _3334_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _3337_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3338___mcc_h899 = _source162.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _3339_recursiveGen;
                    bool _3340_recOwned;
                    bool _3341_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3342_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1064;
                    bool _out1065;
                    bool _out1066;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1067;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1064, out _out1065, out _out1066, out _out1067);
                    _3339_recursiveGen = _out1064;
                    _3340_recOwned = _out1065;
                    _3341_recErased = _out1066;
                    _3342_recIdents = _out1067;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3339_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3340_recOwned;
                    isErased = _3341_recErased;
                    readIdents = _3342_recIdents;
                  }
                }
              } else if (_source161.is_Real) {
                DAST._IType _source165 = _2337___mcc_h306;
                if (_source165.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3343___mcc_h901 = _source165.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _3344___mcc_h902 = _source165.dtor_typeArgs;
                  DAST._IResolvedType _3345___mcc_h903 = _source165.dtor_resolved;
                  DAST._IResolvedType _source166 = _3345___mcc_h903;
                  if (_source166.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3346___mcc_h907 = _source166.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _3347_recursiveGen;
                      bool _3348_recOwned;
                      bool _3349_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3350_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1068;
                      bool _out1069;
                      bool _out1070;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1071;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1068, out _out1069, out _out1070, out _out1071);
                      _3347_recursiveGen = _out1068;
                      _3348_recOwned = _out1069;
                      _3349_recErased = _out1070;
                      _3350_recIdents = _out1071;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3347_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _3348_recOwned;
                      isErased = _3349_recErased;
                      readIdents = _3350_recIdents;
                    }
                  } else if (_source166.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3351___mcc_h909 = _source166.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _3352_recursiveGen;
                      bool _3353_recOwned;
                      bool _3354_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3355_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1072;
                      bool _out1073;
                      bool _out1074;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1075;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1072, out _out1073, out _out1074, out _out1075);
                      _3352_recursiveGen = _out1072;
                      _3353_recOwned = _out1073;
                      _3354_recErased = _out1074;
                      _3355_recIdents = _out1075;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3352_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _3353_recOwned;
                      isErased = _3354_recErased;
                      readIdents = _3355_recIdents;
                    }
                  } else {
                    DAST._IType _3356___mcc_h911 = _source166.dtor_Newtype_a0;
                    DAST._IType _3357_b = _3356___mcc_h911;
                    {
                      if (object.Equals(_2330_fromTpe, _3357_b)) {
                        Dafny.ISequence<Dafny.Rune> _3358_recursiveGen;
                        bool _3359_recOwned;
                        bool _3360_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3361_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1076;
                        bool _out1077;
                        bool _out1078;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1079;
                        DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1076, out _out1077, out _out1078, out _out1079);
                        _3358_recursiveGen = _out1076;
                        _3359_recOwned = _out1077;
                        _3360_recErased = _out1078;
                        _3361_recIdents = _out1079;
                        Dafny.ISequence<Dafny.Rune> _3362_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1080;
                        _out1080 = DCOMP.COMP.GenType(_2329_toTpe, true, false);
                        _3362_rhsType = _out1080;
                        Dafny.ISequence<Dafny.Rune> _3363_uneraseFn;
                        _3363_uneraseFn = ((_3359_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3362_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _3363_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3358_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _3359_recOwned;
                        isErased = false;
                        readIdents = _3361_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1081;
                        bool _out1082;
                        bool _out1083;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1084;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2331_expr, _2330_fromTpe, _3357_b), _3357_b, _2329_toTpe), selfIdent, @params, mustOwn, out _out1081, out _out1082, out _out1083, out _out1084);
                        s = _out1081;
                        isOwned = _out1082;
                        isErased = _out1083;
                        readIdents = _out1084;
                      }
                    }
                  }
                } else if (_source165.is_Nullable) {
                  DAST._IType _3364___mcc_h913 = _source165.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _3365_recursiveGen;
                    bool _3366_recOwned;
                    bool _3367_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3368_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1085;
                    bool _out1086;
                    bool _out1087;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1088;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1085, out _out1086, out _out1087, out _out1088);
                    _3365_recursiveGen = _out1085;
                    _3366_recOwned = _out1086;
                    _3367_recErased = _out1087;
                    _3368_recIdents = _out1088;
                    if (!(_3366_recOwned)) {
                      _3365_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_3365_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3365_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _3367_recErased;
                    readIdents = _3368_recIdents;
                  }
                } else if (_source165.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _3369___mcc_h915 = _source165.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _3370_recursiveGen;
                    bool _3371_recOwned;
                    bool _3372_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3373_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1089;
                    bool _out1090;
                    bool _out1091;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1092;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1089, out _out1090, out _out1091, out _out1092);
                    _3370_recursiveGen = _out1089;
                    _3371_recOwned = _out1090;
                    _3372_recErased = _out1091;
                    _3373_recIdents = _out1092;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3370_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3371_recOwned;
                    isErased = _3372_recErased;
                    readIdents = _3373_recIdents;
                  }
                } else if (_source165.is_Array) {
                  DAST._IType _3374___mcc_h917 = _source165.dtor_element;
                  BigInteger _3375___mcc_h918 = _source165.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _3376_recursiveGen;
                    bool _3377_recOwned;
                    bool _3378_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3379_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1093;
                    bool _out1094;
                    bool _out1095;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1096;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1093, out _out1094, out _out1095, out _out1096);
                    _3376_recursiveGen = _out1093;
                    _3377_recOwned = _out1094;
                    _3378_recErased = _out1095;
                    _3379_recIdents = _out1096;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3376_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3377_recOwned;
                    isErased = _3378_recErased;
                    readIdents = _3379_recIdents;
                  }
                } else if (_source165.is_Seq) {
                  DAST._IType _3380___mcc_h921 = _source165.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _3381_recursiveGen;
                    bool _3382_recOwned;
                    bool _3383_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3384_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1097;
                    bool _out1098;
                    bool _out1099;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1100;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1097, out _out1098, out _out1099, out _out1100);
                    _3381_recursiveGen = _out1097;
                    _3382_recOwned = _out1098;
                    _3383_recErased = _out1099;
                    _3384_recIdents = _out1100;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3381_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3382_recOwned;
                    isErased = _3383_recErased;
                    readIdents = _3384_recIdents;
                  }
                } else if (_source165.is_Set) {
                  DAST._IType _3385___mcc_h923 = _source165.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _3386_recursiveGen;
                    bool _3387_recOwned;
                    bool _3388_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3389_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1101;
                    bool _out1102;
                    bool _out1103;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1104;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1101, out _out1102, out _out1103, out _out1104);
                    _3386_recursiveGen = _out1101;
                    _3387_recOwned = _out1102;
                    _3388_recErased = _out1103;
                    _3389_recIdents = _out1104;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3386_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3387_recOwned;
                    isErased = _3388_recErased;
                    readIdents = _3389_recIdents;
                  }
                } else if (_source165.is_Multiset) {
                  DAST._IType _3390___mcc_h925 = _source165.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _3391_recursiveGen;
                    bool _3392_recOwned;
                    bool _3393_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3394_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1105;
                    bool _out1106;
                    bool _out1107;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1108;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1105, out _out1106, out _out1107, out _out1108);
                    _3391_recursiveGen = _out1105;
                    _3392_recOwned = _out1106;
                    _3393_recErased = _out1107;
                    _3394_recIdents = _out1108;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3391_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3392_recOwned;
                    isErased = _3393_recErased;
                    readIdents = _3394_recIdents;
                  }
                } else if (_source165.is_Map) {
                  DAST._IType _3395___mcc_h927 = _source165.dtor_key;
                  DAST._IType _3396___mcc_h928 = _source165.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _3397_recursiveGen;
                    bool _3398_recOwned;
                    bool _3399_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3400_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1109;
                    bool _out1110;
                    bool _out1111;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1112;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1109, out _out1110, out _out1111, out _out1112);
                    _3397_recursiveGen = _out1109;
                    _3398_recOwned = _out1110;
                    _3399_recErased = _out1111;
                    _3400_recIdents = _out1112;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3397_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3398_recOwned;
                    isErased = _3399_recErased;
                    readIdents = _3400_recIdents;
                  }
                } else if (_source165.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _3401___mcc_h931 = _source165.dtor_args;
                  DAST._IType _3402___mcc_h932 = _source165.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _3403_recursiveGen;
                    bool _3404_recOwned;
                    bool _3405_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3406_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1113;
                    bool _out1114;
                    bool _out1115;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1116;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1113, out _out1114, out _out1115, out _out1116);
                    _3403_recursiveGen = _out1113;
                    _3404_recOwned = _out1114;
                    _3405_recErased = _out1115;
                    _3406_recIdents = _out1116;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3403_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3404_recOwned;
                    isErased = _3405_recErased;
                    readIdents = _3406_recIdents;
                  }
                } else if (_source165.is_Primitive) {
                  DAST._IPrimitive _3407___mcc_h935 = _source165.dtor_Primitive_a0;
                  DAST._IPrimitive _source167 = _3407___mcc_h935;
                  if (_source167.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _3408_recursiveGen;
                      bool _3409___v48;
                      bool _3410___v49;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3411_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1117;
                      bool _out1118;
                      bool _out1119;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1120;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, false, out _out1117, out _out1118, out _out1119, out _out1120);
                      _3408_recursiveGen = _out1117;
                      _3409___v48 = _out1118;
                      _3410___v49 = _out1119;
                      _3411_recIdents = _out1120;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), _3408_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _3411_recIdents;
                    }
                  } else if (_source167.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _3412_recursiveGen;
                      bool _3413_recOwned;
                      bool _3414_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3415_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1121;
                      bool _out1122;
                      bool _out1123;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1124;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1121, out _out1122, out _out1123, out _out1124);
                      _3412_recursiveGen = _out1121;
                      _3413_recOwned = _out1122;
                      _3414_recErased = _out1123;
                      _3415_recIdents = _out1124;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3412_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _3413_recOwned;
                      isErased = _3414_recErased;
                      readIdents = _3415_recIdents;
                    }
                  } else if (_source167.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _3416_recursiveGen;
                      bool _3417_recOwned;
                      bool _3418_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3419_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1125;
                      bool _out1126;
                      bool _out1127;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1128;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1125, out _out1126, out _out1127, out _out1128);
                      _3416_recursiveGen = _out1125;
                      _3417_recOwned = _out1126;
                      _3418_recErased = _out1127;
                      _3419_recIdents = _out1128;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3416_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _3417_recOwned;
                      isErased = _3418_recErased;
                      readIdents = _3419_recIdents;
                    }
                  } else if (_source167.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _3420_recursiveGen;
                      bool _3421_recOwned;
                      bool _3422_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3423_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1129;
                      bool _out1130;
                      bool _out1131;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1132;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1129, out _out1130, out _out1131, out _out1132);
                      _3420_recursiveGen = _out1129;
                      _3421_recOwned = _out1130;
                      _3422_recErased = _out1131;
                      _3423_recIdents = _out1132;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3420_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _3421_recOwned;
                      isErased = _3422_recErased;
                      readIdents = _3423_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _3424_recursiveGen;
                      bool _3425_recOwned;
                      bool _3426_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3427_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1133;
                      bool _out1134;
                      bool _out1135;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1136;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1133, out _out1134, out _out1135, out _out1136);
                      _3424_recursiveGen = _out1133;
                      _3425_recOwned = _out1134;
                      _3426_recErased = _out1135;
                      _3427_recIdents = _out1136;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3424_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _3425_recOwned;
                      isErased = _3426_recErased;
                      readIdents = _3427_recIdents;
                    }
                  }
                } else if (_source165.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _3428___mcc_h937 = _source165.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _3429_recursiveGen;
                    bool _3430_recOwned;
                    bool _3431_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3432_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1137;
                    bool _out1138;
                    bool _out1139;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1140;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1137, out _out1138, out _out1139, out _out1140);
                    _3429_recursiveGen = _out1137;
                    _3430_recOwned = _out1138;
                    _3431_recErased = _out1139;
                    _3432_recIdents = _out1140;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3429_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3430_recOwned;
                    isErased = _3431_recErased;
                    readIdents = _3432_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3433___mcc_h939 = _source165.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _3434_recursiveGen;
                    bool _3435_recOwned;
                    bool _3436_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3437_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1141;
                    bool _out1142;
                    bool _out1143;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1144;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1141, out _out1142, out _out1143, out _out1144);
                    _3434_recursiveGen = _out1141;
                    _3435_recOwned = _out1142;
                    _3436_recErased = _out1143;
                    _3437_recIdents = _out1144;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3434_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3435_recOwned;
                    isErased = _3436_recErased;
                    readIdents = _3437_recIdents;
                  }
                }
              } else if (_source161.is_String) {
                DAST._IType _source168 = _2337___mcc_h306;
                if (_source168.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3438___mcc_h941 = _source168.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _3439___mcc_h942 = _source168.dtor_typeArgs;
                  DAST._IResolvedType _3440___mcc_h943 = _source168.dtor_resolved;
                  DAST._IResolvedType _source169 = _3440___mcc_h943;
                  if (_source169.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3441___mcc_h947 = _source169.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _3442_recursiveGen;
                      bool _3443_recOwned;
                      bool _3444_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3445_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1145;
                      bool _out1146;
                      bool _out1147;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1148;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1145, out _out1146, out _out1147, out _out1148);
                      _3442_recursiveGen = _out1145;
                      _3443_recOwned = _out1146;
                      _3444_recErased = _out1147;
                      _3445_recIdents = _out1148;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3442_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _3443_recOwned;
                      isErased = _3444_recErased;
                      readIdents = _3445_recIdents;
                    }
                  } else if (_source169.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3446___mcc_h949 = _source169.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _3447_recursiveGen;
                      bool _3448_recOwned;
                      bool _3449_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3450_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1149;
                      bool _out1150;
                      bool _out1151;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1152;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1149, out _out1150, out _out1151, out _out1152);
                      _3447_recursiveGen = _out1149;
                      _3448_recOwned = _out1150;
                      _3449_recErased = _out1151;
                      _3450_recIdents = _out1152;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3447_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _3448_recOwned;
                      isErased = _3449_recErased;
                      readIdents = _3450_recIdents;
                    }
                  } else {
                    DAST._IType _3451___mcc_h951 = _source169.dtor_Newtype_a0;
                    DAST._IType _3452_b = _3451___mcc_h951;
                    {
                      if (object.Equals(_2330_fromTpe, _3452_b)) {
                        Dafny.ISequence<Dafny.Rune> _3453_recursiveGen;
                        bool _3454_recOwned;
                        bool _3455_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3456_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1153;
                        bool _out1154;
                        bool _out1155;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1156;
                        DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1153, out _out1154, out _out1155, out _out1156);
                        _3453_recursiveGen = _out1153;
                        _3454_recOwned = _out1154;
                        _3455_recErased = _out1155;
                        _3456_recIdents = _out1156;
                        Dafny.ISequence<Dafny.Rune> _3457_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1157;
                        _out1157 = DCOMP.COMP.GenType(_2329_toTpe, true, false);
                        _3457_rhsType = _out1157;
                        Dafny.ISequence<Dafny.Rune> _3458_uneraseFn;
                        _3458_uneraseFn = ((_3454_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3457_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _3458_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3453_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _3454_recOwned;
                        isErased = false;
                        readIdents = _3456_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1158;
                        bool _out1159;
                        bool _out1160;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1161;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2331_expr, _2330_fromTpe, _3452_b), _3452_b, _2329_toTpe), selfIdent, @params, mustOwn, out _out1158, out _out1159, out _out1160, out _out1161);
                        s = _out1158;
                        isOwned = _out1159;
                        isErased = _out1160;
                        readIdents = _out1161;
                      }
                    }
                  }
                } else if (_source168.is_Nullable) {
                  DAST._IType _3459___mcc_h953 = _source168.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _3460_recursiveGen;
                    bool _3461_recOwned;
                    bool _3462_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3463_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1162;
                    bool _out1163;
                    bool _out1164;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1165;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1162, out _out1163, out _out1164, out _out1165);
                    _3460_recursiveGen = _out1162;
                    _3461_recOwned = _out1163;
                    _3462_recErased = _out1164;
                    _3463_recIdents = _out1165;
                    if (!(_3461_recOwned)) {
                      _3460_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_3460_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3460_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _3462_recErased;
                    readIdents = _3463_recIdents;
                  }
                } else if (_source168.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _3464___mcc_h955 = _source168.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _3465_recursiveGen;
                    bool _3466_recOwned;
                    bool _3467_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3468_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1166;
                    bool _out1167;
                    bool _out1168;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1169;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1166, out _out1167, out _out1168, out _out1169);
                    _3465_recursiveGen = _out1166;
                    _3466_recOwned = _out1167;
                    _3467_recErased = _out1168;
                    _3468_recIdents = _out1169;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3465_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3466_recOwned;
                    isErased = _3467_recErased;
                    readIdents = _3468_recIdents;
                  }
                } else if (_source168.is_Array) {
                  DAST._IType _3469___mcc_h957 = _source168.dtor_element;
                  BigInteger _3470___mcc_h958 = _source168.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _3471_recursiveGen;
                    bool _3472_recOwned;
                    bool _3473_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3474_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1170;
                    bool _out1171;
                    bool _out1172;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1173;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1170, out _out1171, out _out1172, out _out1173);
                    _3471_recursiveGen = _out1170;
                    _3472_recOwned = _out1171;
                    _3473_recErased = _out1172;
                    _3474_recIdents = _out1173;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3471_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3472_recOwned;
                    isErased = _3473_recErased;
                    readIdents = _3474_recIdents;
                  }
                } else if (_source168.is_Seq) {
                  DAST._IType _3475___mcc_h961 = _source168.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _3476_recursiveGen;
                    bool _3477_recOwned;
                    bool _3478_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3479_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1174;
                    bool _out1175;
                    bool _out1176;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1177;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1174, out _out1175, out _out1176, out _out1177);
                    _3476_recursiveGen = _out1174;
                    _3477_recOwned = _out1175;
                    _3478_recErased = _out1176;
                    _3479_recIdents = _out1177;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3476_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3477_recOwned;
                    isErased = _3478_recErased;
                    readIdents = _3479_recIdents;
                  }
                } else if (_source168.is_Set) {
                  DAST._IType _3480___mcc_h963 = _source168.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _3481_recursiveGen;
                    bool _3482_recOwned;
                    bool _3483_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3484_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1178;
                    bool _out1179;
                    bool _out1180;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1181;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1178, out _out1179, out _out1180, out _out1181);
                    _3481_recursiveGen = _out1178;
                    _3482_recOwned = _out1179;
                    _3483_recErased = _out1180;
                    _3484_recIdents = _out1181;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3481_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3482_recOwned;
                    isErased = _3483_recErased;
                    readIdents = _3484_recIdents;
                  }
                } else if (_source168.is_Multiset) {
                  DAST._IType _3485___mcc_h965 = _source168.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _3486_recursiveGen;
                    bool _3487_recOwned;
                    bool _3488_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3489_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1182;
                    bool _out1183;
                    bool _out1184;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1185;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1182, out _out1183, out _out1184, out _out1185);
                    _3486_recursiveGen = _out1182;
                    _3487_recOwned = _out1183;
                    _3488_recErased = _out1184;
                    _3489_recIdents = _out1185;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3486_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3487_recOwned;
                    isErased = _3488_recErased;
                    readIdents = _3489_recIdents;
                  }
                } else if (_source168.is_Map) {
                  DAST._IType _3490___mcc_h967 = _source168.dtor_key;
                  DAST._IType _3491___mcc_h968 = _source168.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _3492_recursiveGen;
                    bool _3493_recOwned;
                    bool _3494_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3495_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1186;
                    bool _out1187;
                    bool _out1188;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1189;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1186, out _out1187, out _out1188, out _out1189);
                    _3492_recursiveGen = _out1186;
                    _3493_recOwned = _out1187;
                    _3494_recErased = _out1188;
                    _3495_recIdents = _out1189;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3492_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3493_recOwned;
                    isErased = _3494_recErased;
                    readIdents = _3495_recIdents;
                  }
                } else if (_source168.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _3496___mcc_h971 = _source168.dtor_args;
                  DAST._IType _3497___mcc_h972 = _source168.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _3498_recursiveGen;
                    bool _3499_recOwned;
                    bool _3500_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3501_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1190;
                    bool _out1191;
                    bool _out1192;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1193;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1190, out _out1191, out _out1192, out _out1193);
                    _3498_recursiveGen = _out1190;
                    _3499_recOwned = _out1191;
                    _3500_recErased = _out1192;
                    _3501_recIdents = _out1193;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3498_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3499_recOwned;
                    isErased = _3500_recErased;
                    readIdents = _3501_recIdents;
                  }
                } else if (_source168.is_Primitive) {
                  DAST._IPrimitive _3502___mcc_h975 = _source168.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _3503_recursiveGen;
                    bool _3504_recOwned;
                    bool _3505_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3506_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1194;
                    bool _out1195;
                    bool _out1196;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1197;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1194, out _out1195, out _out1196, out _out1197);
                    _3503_recursiveGen = _out1194;
                    _3504_recOwned = _out1195;
                    _3505_recErased = _out1196;
                    _3506_recIdents = _out1197;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3503_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3504_recOwned;
                    isErased = _3505_recErased;
                    readIdents = _3506_recIdents;
                  }
                } else if (_source168.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _3507___mcc_h977 = _source168.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _3508_recursiveGen;
                    bool _3509_recOwned;
                    bool _3510_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3511_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1198;
                    bool _out1199;
                    bool _out1200;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1201;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1198, out _out1199, out _out1200, out _out1201);
                    _3508_recursiveGen = _out1198;
                    _3509_recOwned = _out1199;
                    _3510_recErased = _out1200;
                    _3511_recIdents = _out1201;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3508_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3509_recOwned;
                    isErased = _3510_recErased;
                    readIdents = _3511_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3512___mcc_h979 = _source168.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _3513_recursiveGen;
                    bool _3514_recOwned;
                    bool _3515_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3516_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1202;
                    bool _out1203;
                    bool _out1204;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1205;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1202, out _out1203, out _out1204, out _out1205);
                    _3513_recursiveGen = _out1202;
                    _3514_recOwned = _out1203;
                    _3515_recErased = _out1204;
                    _3516_recIdents = _out1205;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3513_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3514_recOwned;
                    isErased = _3515_recErased;
                    readIdents = _3516_recIdents;
                  }
                }
              } else if (_source161.is_Bool) {
                DAST._IType _source170 = _2337___mcc_h306;
                if (_source170.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3517___mcc_h981 = _source170.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _3518___mcc_h982 = _source170.dtor_typeArgs;
                  DAST._IResolvedType _3519___mcc_h983 = _source170.dtor_resolved;
                  DAST._IResolvedType _source171 = _3519___mcc_h983;
                  if (_source171.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3520___mcc_h987 = _source171.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _3521_recursiveGen;
                      bool _3522_recOwned;
                      bool _3523_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3524_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1206;
                      bool _out1207;
                      bool _out1208;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1209;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1206, out _out1207, out _out1208, out _out1209);
                      _3521_recursiveGen = _out1206;
                      _3522_recOwned = _out1207;
                      _3523_recErased = _out1208;
                      _3524_recIdents = _out1209;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3521_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _3522_recOwned;
                      isErased = _3523_recErased;
                      readIdents = _3524_recIdents;
                    }
                  } else if (_source171.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3525___mcc_h989 = _source171.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _3526_recursiveGen;
                      bool _3527_recOwned;
                      bool _3528_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3529_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1210;
                      bool _out1211;
                      bool _out1212;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1213;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1210, out _out1211, out _out1212, out _out1213);
                      _3526_recursiveGen = _out1210;
                      _3527_recOwned = _out1211;
                      _3528_recErased = _out1212;
                      _3529_recIdents = _out1213;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3526_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _3527_recOwned;
                      isErased = _3528_recErased;
                      readIdents = _3529_recIdents;
                    }
                  } else {
                    DAST._IType _3530___mcc_h991 = _source171.dtor_Newtype_a0;
                    DAST._IType _3531_b = _3530___mcc_h991;
                    {
                      if (object.Equals(_2330_fromTpe, _3531_b)) {
                        Dafny.ISequence<Dafny.Rune> _3532_recursiveGen;
                        bool _3533_recOwned;
                        bool _3534_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3535_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1214;
                        bool _out1215;
                        bool _out1216;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1217;
                        DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1214, out _out1215, out _out1216, out _out1217);
                        _3532_recursiveGen = _out1214;
                        _3533_recOwned = _out1215;
                        _3534_recErased = _out1216;
                        _3535_recIdents = _out1217;
                        Dafny.ISequence<Dafny.Rune> _3536_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1218;
                        _out1218 = DCOMP.COMP.GenType(_2329_toTpe, true, false);
                        _3536_rhsType = _out1218;
                        Dafny.ISequence<Dafny.Rune> _3537_uneraseFn;
                        _3537_uneraseFn = ((_3533_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3536_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _3537_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3532_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _3533_recOwned;
                        isErased = false;
                        readIdents = _3535_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1219;
                        bool _out1220;
                        bool _out1221;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1222;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2331_expr, _2330_fromTpe, _3531_b), _3531_b, _2329_toTpe), selfIdent, @params, mustOwn, out _out1219, out _out1220, out _out1221, out _out1222);
                        s = _out1219;
                        isOwned = _out1220;
                        isErased = _out1221;
                        readIdents = _out1222;
                      }
                    }
                  }
                } else if (_source170.is_Nullable) {
                  DAST._IType _3538___mcc_h993 = _source170.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _3539_recursiveGen;
                    bool _3540_recOwned;
                    bool _3541_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3542_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1223;
                    bool _out1224;
                    bool _out1225;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1226;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1223, out _out1224, out _out1225, out _out1226);
                    _3539_recursiveGen = _out1223;
                    _3540_recOwned = _out1224;
                    _3541_recErased = _out1225;
                    _3542_recIdents = _out1226;
                    if (!(_3540_recOwned)) {
                      _3539_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_3539_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3539_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _3541_recErased;
                    readIdents = _3542_recIdents;
                  }
                } else if (_source170.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _3543___mcc_h995 = _source170.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _3544_recursiveGen;
                    bool _3545_recOwned;
                    bool _3546_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3547_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1227;
                    bool _out1228;
                    bool _out1229;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1230;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1227, out _out1228, out _out1229, out _out1230);
                    _3544_recursiveGen = _out1227;
                    _3545_recOwned = _out1228;
                    _3546_recErased = _out1229;
                    _3547_recIdents = _out1230;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3544_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3545_recOwned;
                    isErased = _3546_recErased;
                    readIdents = _3547_recIdents;
                  }
                } else if (_source170.is_Array) {
                  DAST._IType _3548___mcc_h997 = _source170.dtor_element;
                  BigInteger _3549___mcc_h998 = _source170.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _3550_recursiveGen;
                    bool _3551_recOwned;
                    bool _3552_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3553_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1231;
                    bool _out1232;
                    bool _out1233;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1234;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1231, out _out1232, out _out1233, out _out1234);
                    _3550_recursiveGen = _out1231;
                    _3551_recOwned = _out1232;
                    _3552_recErased = _out1233;
                    _3553_recIdents = _out1234;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3550_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3551_recOwned;
                    isErased = _3552_recErased;
                    readIdents = _3553_recIdents;
                  }
                } else if (_source170.is_Seq) {
                  DAST._IType _3554___mcc_h1001 = _source170.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _3555_recursiveGen;
                    bool _3556_recOwned;
                    bool _3557_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3558_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1235;
                    bool _out1236;
                    bool _out1237;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1238;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1235, out _out1236, out _out1237, out _out1238);
                    _3555_recursiveGen = _out1235;
                    _3556_recOwned = _out1236;
                    _3557_recErased = _out1237;
                    _3558_recIdents = _out1238;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3555_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3556_recOwned;
                    isErased = _3557_recErased;
                    readIdents = _3558_recIdents;
                  }
                } else if (_source170.is_Set) {
                  DAST._IType _3559___mcc_h1003 = _source170.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _3560_recursiveGen;
                    bool _3561_recOwned;
                    bool _3562_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3563_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1239;
                    bool _out1240;
                    bool _out1241;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1242;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1239, out _out1240, out _out1241, out _out1242);
                    _3560_recursiveGen = _out1239;
                    _3561_recOwned = _out1240;
                    _3562_recErased = _out1241;
                    _3563_recIdents = _out1242;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3560_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3561_recOwned;
                    isErased = _3562_recErased;
                    readIdents = _3563_recIdents;
                  }
                } else if (_source170.is_Multiset) {
                  DAST._IType _3564___mcc_h1005 = _source170.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _3565_recursiveGen;
                    bool _3566_recOwned;
                    bool _3567_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3568_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1243;
                    bool _out1244;
                    bool _out1245;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1246;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1243, out _out1244, out _out1245, out _out1246);
                    _3565_recursiveGen = _out1243;
                    _3566_recOwned = _out1244;
                    _3567_recErased = _out1245;
                    _3568_recIdents = _out1246;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3565_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3566_recOwned;
                    isErased = _3567_recErased;
                    readIdents = _3568_recIdents;
                  }
                } else if (_source170.is_Map) {
                  DAST._IType _3569___mcc_h1007 = _source170.dtor_key;
                  DAST._IType _3570___mcc_h1008 = _source170.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _3571_recursiveGen;
                    bool _3572_recOwned;
                    bool _3573_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3574_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1247;
                    bool _out1248;
                    bool _out1249;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1250;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1247, out _out1248, out _out1249, out _out1250);
                    _3571_recursiveGen = _out1247;
                    _3572_recOwned = _out1248;
                    _3573_recErased = _out1249;
                    _3574_recIdents = _out1250;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3571_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3572_recOwned;
                    isErased = _3573_recErased;
                    readIdents = _3574_recIdents;
                  }
                } else if (_source170.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _3575___mcc_h1011 = _source170.dtor_args;
                  DAST._IType _3576___mcc_h1012 = _source170.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _3577_recursiveGen;
                    bool _3578_recOwned;
                    bool _3579_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3580_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1251;
                    bool _out1252;
                    bool _out1253;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1254;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1251, out _out1252, out _out1253, out _out1254);
                    _3577_recursiveGen = _out1251;
                    _3578_recOwned = _out1252;
                    _3579_recErased = _out1253;
                    _3580_recIdents = _out1254;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3577_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3578_recOwned;
                    isErased = _3579_recErased;
                    readIdents = _3580_recIdents;
                  }
                } else if (_source170.is_Primitive) {
                  DAST._IPrimitive _3581___mcc_h1015 = _source170.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _3582_recursiveGen;
                    bool _3583_recOwned;
                    bool _3584_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3585_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1255;
                    bool _out1256;
                    bool _out1257;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1258;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1255, out _out1256, out _out1257, out _out1258);
                    _3582_recursiveGen = _out1255;
                    _3583_recOwned = _out1256;
                    _3584_recErased = _out1257;
                    _3585_recIdents = _out1258;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3582_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3583_recOwned;
                    isErased = _3584_recErased;
                    readIdents = _3585_recIdents;
                  }
                } else if (_source170.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _3586___mcc_h1017 = _source170.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _3587_recursiveGen;
                    bool _3588_recOwned;
                    bool _3589_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3590_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1259;
                    bool _out1260;
                    bool _out1261;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1262;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1259, out _out1260, out _out1261, out _out1262);
                    _3587_recursiveGen = _out1259;
                    _3588_recOwned = _out1260;
                    _3589_recErased = _out1261;
                    _3590_recIdents = _out1262;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3587_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3588_recOwned;
                    isErased = _3589_recErased;
                    readIdents = _3590_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3591___mcc_h1019 = _source170.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _3592_recursiveGen;
                    bool _3593_recOwned;
                    bool _3594_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3595_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1263;
                    bool _out1264;
                    bool _out1265;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1266;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1263, out _out1264, out _out1265, out _out1266);
                    _3592_recursiveGen = _out1263;
                    _3593_recOwned = _out1264;
                    _3594_recErased = _out1265;
                    _3595_recIdents = _out1266;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3592_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3593_recOwned;
                    isErased = _3594_recErased;
                    readIdents = _3595_recIdents;
                  }
                }
              } else {
                DAST._IType _source172 = _2337___mcc_h306;
                if (_source172.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3596___mcc_h1021 = _source172.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _3597___mcc_h1022 = _source172.dtor_typeArgs;
                  DAST._IResolvedType _3598___mcc_h1023 = _source172.dtor_resolved;
                  DAST._IResolvedType _source173 = _3598___mcc_h1023;
                  if (_source173.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3599___mcc_h1027 = _source173.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _3600_recursiveGen;
                      bool _3601_recOwned;
                      bool _3602_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3603_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1267;
                      bool _out1268;
                      bool _out1269;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1270;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1267, out _out1268, out _out1269, out _out1270);
                      _3600_recursiveGen = _out1267;
                      _3601_recOwned = _out1268;
                      _3602_recErased = _out1269;
                      _3603_recIdents = _out1270;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3600_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _3601_recOwned;
                      isErased = _3602_recErased;
                      readIdents = _3603_recIdents;
                    }
                  } else if (_source173.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3604___mcc_h1029 = _source173.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _3605_recursiveGen;
                      bool _3606_recOwned;
                      bool _3607_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3608_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1271;
                      bool _out1272;
                      bool _out1273;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1274;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1271, out _out1272, out _out1273, out _out1274);
                      _3605_recursiveGen = _out1271;
                      _3606_recOwned = _out1272;
                      _3607_recErased = _out1273;
                      _3608_recIdents = _out1274;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3605_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _3606_recOwned;
                      isErased = _3607_recErased;
                      readIdents = _3608_recIdents;
                    }
                  } else {
                    DAST._IType _3609___mcc_h1031 = _source173.dtor_Newtype_a0;
                    DAST._IType _3610_b = _3609___mcc_h1031;
                    {
                      if (object.Equals(_2330_fromTpe, _3610_b)) {
                        Dafny.ISequence<Dafny.Rune> _3611_recursiveGen;
                        bool _3612_recOwned;
                        bool _3613_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3614_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1275;
                        bool _out1276;
                        bool _out1277;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1278;
                        DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1275, out _out1276, out _out1277, out _out1278);
                        _3611_recursiveGen = _out1275;
                        _3612_recOwned = _out1276;
                        _3613_recErased = _out1277;
                        _3614_recIdents = _out1278;
                        Dafny.ISequence<Dafny.Rune> _3615_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1279;
                        _out1279 = DCOMP.COMP.GenType(_2329_toTpe, true, false);
                        _3615_rhsType = _out1279;
                        Dafny.ISequence<Dafny.Rune> _3616_uneraseFn;
                        _3616_uneraseFn = ((_3612_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3615_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _3616_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3611_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _3612_recOwned;
                        isErased = false;
                        readIdents = _3614_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1280;
                        bool _out1281;
                        bool _out1282;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1283;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2331_expr, _2330_fromTpe, _3610_b), _3610_b, _2329_toTpe), selfIdent, @params, mustOwn, out _out1280, out _out1281, out _out1282, out _out1283);
                        s = _out1280;
                        isOwned = _out1281;
                        isErased = _out1282;
                        readIdents = _out1283;
                      }
                    }
                  }
                } else if (_source172.is_Nullable) {
                  DAST._IType _3617___mcc_h1033 = _source172.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _3618_recursiveGen;
                    bool _3619_recOwned;
                    bool _3620_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3621_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1284;
                    bool _out1285;
                    bool _out1286;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1287;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1284, out _out1285, out _out1286, out _out1287);
                    _3618_recursiveGen = _out1284;
                    _3619_recOwned = _out1285;
                    _3620_recErased = _out1286;
                    _3621_recIdents = _out1287;
                    if (!(_3619_recOwned)) {
                      _3618_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_3618_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3618_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _3620_recErased;
                    readIdents = _3621_recIdents;
                  }
                } else if (_source172.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _3622___mcc_h1035 = _source172.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _3623_recursiveGen;
                    bool _3624_recOwned;
                    bool _3625_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3626_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1288;
                    bool _out1289;
                    bool _out1290;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1291;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1288, out _out1289, out _out1290, out _out1291);
                    _3623_recursiveGen = _out1288;
                    _3624_recOwned = _out1289;
                    _3625_recErased = _out1290;
                    _3626_recIdents = _out1291;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3623_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3624_recOwned;
                    isErased = _3625_recErased;
                    readIdents = _3626_recIdents;
                  }
                } else if (_source172.is_Array) {
                  DAST._IType _3627___mcc_h1037 = _source172.dtor_element;
                  BigInteger _3628___mcc_h1038 = _source172.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _3629_recursiveGen;
                    bool _3630_recOwned;
                    bool _3631_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3632_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1292;
                    bool _out1293;
                    bool _out1294;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1295;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1292, out _out1293, out _out1294, out _out1295);
                    _3629_recursiveGen = _out1292;
                    _3630_recOwned = _out1293;
                    _3631_recErased = _out1294;
                    _3632_recIdents = _out1295;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3629_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3630_recOwned;
                    isErased = _3631_recErased;
                    readIdents = _3632_recIdents;
                  }
                } else if (_source172.is_Seq) {
                  DAST._IType _3633___mcc_h1041 = _source172.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _3634_recursiveGen;
                    bool _3635_recOwned;
                    bool _3636_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3637_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1296;
                    bool _out1297;
                    bool _out1298;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1299;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1296, out _out1297, out _out1298, out _out1299);
                    _3634_recursiveGen = _out1296;
                    _3635_recOwned = _out1297;
                    _3636_recErased = _out1298;
                    _3637_recIdents = _out1299;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3634_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3635_recOwned;
                    isErased = _3636_recErased;
                    readIdents = _3637_recIdents;
                  }
                } else if (_source172.is_Set) {
                  DAST._IType _3638___mcc_h1043 = _source172.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _3639_recursiveGen;
                    bool _3640_recOwned;
                    bool _3641_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3642_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1300;
                    bool _out1301;
                    bool _out1302;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1303;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1300, out _out1301, out _out1302, out _out1303);
                    _3639_recursiveGen = _out1300;
                    _3640_recOwned = _out1301;
                    _3641_recErased = _out1302;
                    _3642_recIdents = _out1303;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3639_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3640_recOwned;
                    isErased = _3641_recErased;
                    readIdents = _3642_recIdents;
                  }
                } else if (_source172.is_Multiset) {
                  DAST._IType _3643___mcc_h1045 = _source172.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _3644_recursiveGen;
                    bool _3645_recOwned;
                    bool _3646_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3647_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1304;
                    bool _out1305;
                    bool _out1306;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1307;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1304, out _out1305, out _out1306, out _out1307);
                    _3644_recursiveGen = _out1304;
                    _3645_recOwned = _out1305;
                    _3646_recErased = _out1306;
                    _3647_recIdents = _out1307;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3644_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3645_recOwned;
                    isErased = _3646_recErased;
                    readIdents = _3647_recIdents;
                  }
                } else if (_source172.is_Map) {
                  DAST._IType _3648___mcc_h1047 = _source172.dtor_key;
                  DAST._IType _3649___mcc_h1048 = _source172.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _3650_recursiveGen;
                    bool _3651_recOwned;
                    bool _3652_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3653_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1308;
                    bool _out1309;
                    bool _out1310;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1311;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1308, out _out1309, out _out1310, out _out1311);
                    _3650_recursiveGen = _out1308;
                    _3651_recOwned = _out1309;
                    _3652_recErased = _out1310;
                    _3653_recIdents = _out1311;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3650_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3651_recOwned;
                    isErased = _3652_recErased;
                    readIdents = _3653_recIdents;
                  }
                } else if (_source172.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _3654___mcc_h1051 = _source172.dtor_args;
                  DAST._IType _3655___mcc_h1052 = _source172.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _3656_recursiveGen;
                    bool _3657_recOwned;
                    bool _3658_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3659_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1312;
                    bool _out1313;
                    bool _out1314;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1315;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1312, out _out1313, out _out1314, out _out1315);
                    _3656_recursiveGen = _out1312;
                    _3657_recOwned = _out1313;
                    _3658_recErased = _out1314;
                    _3659_recIdents = _out1315;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3656_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3657_recOwned;
                    isErased = _3658_recErased;
                    readIdents = _3659_recIdents;
                  }
                } else if (_source172.is_Primitive) {
                  DAST._IPrimitive _3660___mcc_h1055 = _source172.dtor_Primitive_a0;
                  DAST._IPrimitive _source174 = _3660___mcc_h1055;
                  if (_source174.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _3661_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1316;
                      _out1316 = DCOMP.COMP.GenType(_2330_fromTpe, true, false);
                      _3661_rhsType = _out1316;
                      Dafny.ISequence<Dafny.Rune> _3662_recursiveGen;
                      bool _3663___v58;
                      bool _3664___v59;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3665_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1317;
                      bool _out1318;
                      bool _out1319;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1320;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, true, out _out1317, out _out1318, out _out1319, out _out1320);
                      _3662_recursiveGen = _out1317;
                      _3663___v58 = _out1318;
                      _3664___v59 = _out1319;
                      _3665_recIdents = _out1320;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _3662_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u32)"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _3665_recIdents;
                    }
                  } else if (_source174.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _3666_recursiveGen;
                      bool _3667_recOwned;
                      bool _3668_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3669_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1321;
                      bool _out1322;
                      bool _out1323;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1324;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1321, out _out1322, out _out1323, out _out1324);
                      _3666_recursiveGen = _out1321;
                      _3667_recOwned = _out1322;
                      _3668_recErased = _out1323;
                      _3669_recIdents = _out1324;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3666_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _3667_recOwned;
                      isErased = _3668_recErased;
                      readIdents = _3669_recIdents;
                    }
                  } else if (_source174.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _3670_recursiveGen;
                      bool _3671_recOwned;
                      bool _3672_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3673_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1325;
                      bool _out1326;
                      bool _out1327;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1328;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1325, out _out1326, out _out1327, out _out1328);
                      _3670_recursiveGen = _out1325;
                      _3671_recOwned = _out1326;
                      _3672_recErased = _out1327;
                      _3673_recIdents = _out1328;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3670_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _3671_recOwned;
                      isErased = _3672_recErased;
                      readIdents = _3673_recIdents;
                    }
                  } else if (_source174.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _3674_recursiveGen;
                      bool _3675_recOwned;
                      bool _3676_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3677_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1329;
                      bool _out1330;
                      bool _out1331;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1332;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1329, out _out1330, out _out1331, out _out1332);
                      _3674_recursiveGen = _out1329;
                      _3675_recOwned = _out1330;
                      _3676_recErased = _out1331;
                      _3677_recIdents = _out1332;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3674_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _3675_recOwned;
                      isErased = _3676_recErased;
                      readIdents = _3677_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _3678_recursiveGen;
                      bool _3679_recOwned;
                      bool _3680_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3681_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1333;
                      bool _out1334;
                      bool _out1335;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1336;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1333, out _out1334, out _out1335, out _out1336);
                      _3678_recursiveGen = _out1333;
                      _3679_recOwned = _out1334;
                      _3680_recErased = _out1335;
                      _3681_recIdents = _out1336;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3678_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _3679_recOwned;
                      isErased = _3680_recErased;
                      readIdents = _3681_recIdents;
                    }
                  }
                } else if (_source172.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _3682___mcc_h1057 = _source172.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _3683_recursiveGen;
                    bool _3684_recOwned;
                    bool _3685_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3686_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1337;
                    bool _out1338;
                    bool _out1339;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1340;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1337, out _out1338, out _out1339, out _out1340);
                    _3683_recursiveGen = _out1337;
                    _3684_recOwned = _out1338;
                    _3685_recErased = _out1339;
                    _3686_recIdents = _out1340;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3683_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3684_recOwned;
                    isErased = _3685_recErased;
                    readIdents = _3686_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3687___mcc_h1059 = _source172.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _3688_recursiveGen;
                    bool _3689_recOwned;
                    bool _3690_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3691_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1341;
                    bool _out1342;
                    bool _out1343;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1344;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1341, out _out1342, out _out1343, out _out1344);
                    _3688_recursiveGen = _out1341;
                    _3689_recOwned = _out1342;
                    _3690_recErased = _out1343;
                    _3691_recIdents = _out1344;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3688_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3689_recOwned;
                    isErased = _3690_recErased;
                    readIdents = _3691_recIdents;
                  }
                }
              }
            } else if (_source137.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _3692___mcc_h1061 = _source137.dtor_Passthrough_a0;
              DAST._IType _source175 = _2337___mcc_h306;
              if (_source175.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3693___mcc_h1065 = _source175.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _3694___mcc_h1066 = _source175.dtor_typeArgs;
                DAST._IResolvedType _3695___mcc_h1067 = _source175.dtor_resolved;
                DAST._IResolvedType _source176 = _3695___mcc_h1067;
                if (_source176.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3696___mcc_h1071 = _source176.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _3697_recursiveGen;
                    bool _3698_recOwned;
                    bool _3699_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3700_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1345;
                    bool _out1346;
                    bool _out1347;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1348;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1345, out _out1346, out _out1347, out _out1348);
                    _3697_recursiveGen = _out1345;
                    _3698_recOwned = _out1346;
                    _3699_recErased = _out1347;
                    _3700_recIdents = _out1348;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3697_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3698_recOwned;
                    isErased = _3699_recErased;
                    readIdents = _3700_recIdents;
                  }
                } else if (_source176.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3701___mcc_h1073 = _source176.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _3702_recursiveGen;
                    bool _3703_recOwned;
                    bool _3704_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3705_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1349;
                    bool _out1350;
                    bool _out1351;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1352;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1349, out _out1350, out _out1351, out _out1352);
                    _3702_recursiveGen = _out1349;
                    _3703_recOwned = _out1350;
                    _3704_recErased = _out1351;
                    _3705_recIdents = _out1352;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3702_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3703_recOwned;
                    isErased = _3704_recErased;
                    readIdents = _3705_recIdents;
                  }
                } else {
                  DAST._IType _3706___mcc_h1075 = _source176.dtor_Newtype_a0;
                  DAST._IType _3707_b = _3706___mcc_h1075;
                  {
                    if (object.Equals(_2330_fromTpe, _3707_b)) {
                      Dafny.ISequence<Dafny.Rune> _3708_recursiveGen;
                      bool _3709_recOwned;
                      bool _3710_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3711_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1353;
                      bool _out1354;
                      bool _out1355;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1356;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1353, out _out1354, out _out1355, out _out1356);
                      _3708_recursiveGen = _out1353;
                      _3709_recOwned = _out1354;
                      _3710_recErased = _out1355;
                      _3711_recIdents = _out1356;
                      Dafny.ISequence<Dafny.Rune> _3712_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1357;
                      _out1357 = DCOMP.COMP.GenType(_2329_toTpe, true, false);
                      _3712_rhsType = _out1357;
                      Dafny.ISequence<Dafny.Rune> _3713_uneraseFn;
                      _3713_uneraseFn = ((_3709_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3712_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _3713_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3708_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _3709_recOwned;
                      isErased = false;
                      readIdents = _3711_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1358;
                      bool _out1359;
                      bool _out1360;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1361;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2331_expr, _2330_fromTpe, _3707_b), _3707_b, _2329_toTpe), selfIdent, @params, mustOwn, out _out1358, out _out1359, out _out1360, out _out1361);
                      s = _out1358;
                      isOwned = _out1359;
                      isErased = _out1360;
                      readIdents = _out1361;
                    }
                  }
                }
              } else if (_source175.is_Nullable) {
                DAST._IType _3714___mcc_h1077 = _source175.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3715_recursiveGen;
                  bool _3716_recOwned;
                  bool _3717_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3718_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1362;
                  bool _out1363;
                  bool _out1364;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1365;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1362, out _out1363, out _out1364, out _out1365);
                  _3715_recursiveGen = _out1362;
                  _3716_recOwned = _out1363;
                  _3717_recErased = _out1364;
                  _3718_recIdents = _out1365;
                  if (!(_3716_recOwned)) {
                    _3715_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_3715_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3715_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _3717_recErased;
                  readIdents = _3718_recIdents;
                }
              } else if (_source175.is_Tuple) {
                Dafny.ISequence<DAST._IType> _3719___mcc_h1079 = _source175.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3720_recursiveGen;
                  bool _3721_recOwned;
                  bool _3722_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3723_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1366;
                  bool _out1367;
                  bool _out1368;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1369;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1366, out _out1367, out _out1368, out _out1369);
                  _3720_recursiveGen = _out1366;
                  _3721_recOwned = _out1367;
                  _3722_recErased = _out1368;
                  _3723_recIdents = _out1369;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3720_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3721_recOwned;
                  isErased = _3722_recErased;
                  readIdents = _3723_recIdents;
                }
              } else if (_source175.is_Array) {
                DAST._IType _3724___mcc_h1081 = _source175.dtor_element;
                BigInteger _3725___mcc_h1082 = _source175.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _3726_recursiveGen;
                  bool _3727_recOwned;
                  bool _3728_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3729_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1370;
                  bool _out1371;
                  bool _out1372;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1373;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1370, out _out1371, out _out1372, out _out1373);
                  _3726_recursiveGen = _out1370;
                  _3727_recOwned = _out1371;
                  _3728_recErased = _out1372;
                  _3729_recIdents = _out1373;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3726_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3727_recOwned;
                  isErased = _3728_recErased;
                  readIdents = _3729_recIdents;
                }
              } else if (_source175.is_Seq) {
                DAST._IType _3730___mcc_h1085 = _source175.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3731_recursiveGen;
                  bool _3732_recOwned;
                  bool _3733_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3734_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1374;
                  bool _out1375;
                  bool _out1376;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1377;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1374, out _out1375, out _out1376, out _out1377);
                  _3731_recursiveGen = _out1374;
                  _3732_recOwned = _out1375;
                  _3733_recErased = _out1376;
                  _3734_recIdents = _out1377;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3731_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3732_recOwned;
                  isErased = _3733_recErased;
                  readIdents = _3734_recIdents;
                }
              } else if (_source175.is_Set) {
                DAST._IType _3735___mcc_h1087 = _source175.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3736_recursiveGen;
                  bool _3737_recOwned;
                  bool _3738_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3739_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1378;
                  bool _out1379;
                  bool _out1380;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1381;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1378, out _out1379, out _out1380, out _out1381);
                  _3736_recursiveGen = _out1378;
                  _3737_recOwned = _out1379;
                  _3738_recErased = _out1380;
                  _3739_recIdents = _out1381;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3736_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3737_recOwned;
                  isErased = _3738_recErased;
                  readIdents = _3739_recIdents;
                }
              } else if (_source175.is_Multiset) {
                DAST._IType _3740___mcc_h1089 = _source175.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3741_recursiveGen;
                  bool _3742_recOwned;
                  bool _3743_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3744_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1382;
                  bool _out1383;
                  bool _out1384;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1385;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1382, out _out1383, out _out1384, out _out1385);
                  _3741_recursiveGen = _out1382;
                  _3742_recOwned = _out1383;
                  _3743_recErased = _out1384;
                  _3744_recIdents = _out1385;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3741_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3742_recOwned;
                  isErased = _3743_recErased;
                  readIdents = _3744_recIdents;
                }
              } else if (_source175.is_Map) {
                DAST._IType _3745___mcc_h1091 = _source175.dtor_key;
                DAST._IType _3746___mcc_h1092 = _source175.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _3747_recursiveGen;
                  bool _3748_recOwned;
                  bool _3749_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3750_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1386;
                  bool _out1387;
                  bool _out1388;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1389;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1386, out _out1387, out _out1388, out _out1389);
                  _3747_recursiveGen = _out1386;
                  _3748_recOwned = _out1387;
                  _3749_recErased = _out1388;
                  _3750_recIdents = _out1389;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3747_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3748_recOwned;
                  isErased = _3749_recErased;
                  readIdents = _3750_recIdents;
                }
              } else if (_source175.is_Arrow) {
                Dafny.ISequence<DAST._IType> _3751___mcc_h1095 = _source175.dtor_args;
                DAST._IType _3752___mcc_h1096 = _source175.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _3753_recursiveGen;
                  bool _3754_recOwned;
                  bool _3755_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3756_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1390;
                  bool _out1391;
                  bool _out1392;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1393;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1390, out _out1391, out _out1392, out _out1393);
                  _3753_recursiveGen = _out1390;
                  _3754_recOwned = _out1391;
                  _3755_recErased = _out1392;
                  _3756_recIdents = _out1393;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3753_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3754_recOwned;
                  isErased = _3755_recErased;
                  readIdents = _3756_recIdents;
                }
              } else if (_source175.is_Primitive) {
                DAST._IPrimitive _3757___mcc_h1099 = _source175.dtor_Primitive_a0;
                DAST._IPrimitive _source177 = _3757___mcc_h1099;
                if (_source177.is_Int) {
                  {
                    Dafny.ISequence<Dafny.Rune> _3758_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out1394;
                    _out1394 = DCOMP.COMP.GenType(_2330_fromTpe, true, false);
                    _3758_rhsType = _out1394;
                    Dafny.ISequence<Dafny.Rune> _3759_recursiveGen;
                    bool _3760___v54;
                    bool _3761___v55;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3762_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1395;
                    bool _out1396;
                    bool _out1397;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1398;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, true, out _out1395, out _out1396, out _out1397, out _out1398);
                    _3759_recursiveGen = _out1395;
                    _3760___v54 = _out1396;
                    _3761___v55 = _out1397;
                    _3762_recIdents = _out1398;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _3759_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _3762_recIdents;
                  }
                } else if (_source177.is_Real) {
                  {
                    Dafny.ISequence<Dafny.Rune> _3763_recursiveGen;
                    bool _3764_recOwned;
                    bool _3765_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3766_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1399;
                    bool _out1400;
                    bool _out1401;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1402;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1399, out _out1400, out _out1401, out _out1402);
                    _3763_recursiveGen = _out1399;
                    _3764_recOwned = _out1400;
                    _3765_recErased = _out1401;
                    _3766_recIdents = _out1402;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3763_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3764_recOwned;
                    isErased = _3765_recErased;
                    readIdents = _3766_recIdents;
                  }
                } else if (_source177.is_String) {
                  {
                    Dafny.ISequence<Dafny.Rune> _3767_recursiveGen;
                    bool _3768_recOwned;
                    bool _3769_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3770_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1403;
                    bool _out1404;
                    bool _out1405;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1406;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1403, out _out1404, out _out1405, out _out1406);
                    _3767_recursiveGen = _out1403;
                    _3768_recOwned = _out1404;
                    _3769_recErased = _out1405;
                    _3770_recIdents = _out1406;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3767_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3768_recOwned;
                    isErased = _3769_recErased;
                    readIdents = _3770_recIdents;
                  }
                } else if (_source177.is_Bool) {
                  {
                    Dafny.ISequence<Dafny.Rune> _3771_recursiveGen;
                    bool _3772_recOwned;
                    bool _3773_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3774_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1407;
                    bool _out1408;
                    bool _out1409;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1410;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1407, out _out1408, out _out1409, out _out1410);
                    _3771_recursiveGen = _out1407;
                    _3772_recOwned = _out1408;
                    _3773_recErased = _out1409;
                    _3774_recIdents = _out1410;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3771_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3772_recOwned;
                    isErased = _3773_recErased;
                    readIdents = _3774_recIdents;
                  }
                } else {
                  {
                    Dafny.ISequence<Dafny.Rune> _3775_recursiveGen;
                    bool _3776_recOwned;
                    bool _3777_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3778_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1411;
                    bool _out1412;
                    bool _out1413;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1414;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1411, out _out1412, out _out1413, out _out1414);
                    _3775_recursiveGen = _out1411;
                    _3776_recOwned = _out1412;
                    _3777_recErased = _out1413;
                    _3778_recIdents = _out1414;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3775_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3776_recOwned;
                    isErased = _3777_recErased;
                    readIdents = _3778_recIdents;
                  }
                }
              } else if (_source175.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _3779___mcc_h1101 = _source175.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3780_recursiveGen;
                  bool _3781___v62;
                  bool _3782___v63;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3783_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1415;
                  bool _out1416;
                  bool _out1417;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1418;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, true, out _out1415, out _out1416, out _out1417, out _out1418);
                  _3780_recursiveGen = _out1415;
                  _3781___v62 = _out1416;
                  _3782___v63 = _out1417;
                  _3783_recIdents = _out1418;
                  Dafny.ISequence<Dafny.Rune> _3784_toTpeGen;
                  Dafny.ISequence<Dafny.Rune> _out1419;
                  _out1419 = DCOMP.COMP.GenType(_2329_toTpe, true, false);
                  _3784_toTpeGen = _out1419;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _3780_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _3784_toTpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = true;
                  readIdents = _3783_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3785___mcc_h1103 = _source175.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3786_recursiveGen;
                  bool _3787_recOwned;
                  bool _3788_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3789_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1420;
                  bool _out1421;
                  bool _out1422;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1423;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1420, out _out1421, out _out1422, out _out1423);
                  _3786_recursiveGen = _out1420;
                  _3787_recOwned = _out1421;
                  _3788_recErased = _out1422;
                  _3789_recIdents = _out1423;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3786_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3787_recOwned;
                  isErased = _3788_recErased;
                  readIdents = _3789_recIdents;
                }
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3790___mcc_h1105 = _source137.dtor_TypeArg_a0;
              DAST._IType _source178 = _2337___mcc_h306;
              if (_source178.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3791___mcc_h1109 = _source178.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _3792___mcc_h1110 = _source178.dtor_typeArgs;
                DAST._IResolvedType _3793___mcc_h1111 = _source178.dtor_resolved;
                DAST._IResolvedType _source179 = _3793___mcc_h1111;
                if (_source179.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3794___mcc_h1115 = _source179.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _3795_recursiveGen;
                    bool _3796_recOwned;
                    bool _3797_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3798_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1424;
                    bool _out1425;
                    bool _out1426;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1427;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1424, out _out1425, out _out1426, out _out1427);
                    _3795_recursiveGen = _out1424;
                    _3796_recOwned = _out1425;
                    _3797_recErased = _out1426;
                    _3798_recIdents = _out1427;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3795_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3796_recOwned;
                    isErased = _3797_recErased;
                    readIdents = _3798_recIdents;
                  }
                } else if (_source179.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3799___mcc_h1117 = _source179.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _3800_recursiveGen;
                    bool _3801_recOwned;
                    bool _3802_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3803_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1428;
                    bool _out1429;
                    bool _out1430;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1431;
                    DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1428, out _out1429, out _out1430, out _out1431);
                    _3800_recursiveGen = _out1428;
                    _3801_recOwned = _out1429;
                    _3802_recErased = _out1430;
                    _3803_recIdents = _out1431;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3800_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3801_recOwned;
                    isErased = _3802_recErased;
                    readIdents = _3803_recIdents;
                  }
                } else {
                  DAST._IType _3804___mcc_h1119 = _source179.dtor_Newtype_a0;
                  DAST._IType _3805_b = _3804___mcc_h1119;
                  {
                    if (object.Equals(_2330_fromTpe, _3805_b)) {
                      Dafny.ISequence<Dafny.Rune> _3806_recursiveGen;
                      bool _3807_recOwned;
                      bool _3808_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3809_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1432;
                      bool _out1433;
                      bool _out1434;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1435;
                      DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1432, out _out1433, out _out1434, out _out1435);
                      _3806_recursiveGen = _out1432;
                      _3807_recOwned = _out1433;
                      _3808_recErased = _out1434;
                      _3809_recIdents = _out1435;
                      Dafny.ISequence<Dafny.Rune> _3810_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1436;
                      _out1436 = DCOMP.COMP.GenType(_2329_toTpe, true, false);
                      _3810_rhsType = _out1436;
                      Dafny.ISequence<Dafny.Rune> _3811_uneraseFn;
                      _3811_uneraseFn = ((_3807_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3810_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _3811_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3806_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _3807_recOwned;
                      isErased = false;
                      readIdents = _3809_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1437;
                      bool _out1438;
                      bool _out1439;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1440;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2331_expr, _2330_fromTpe, _3805_b), _3805_b, _2329_toTpe), selfIdent, @params, mustOwn, out _out1437, out _out1438, out _out1439, out _out1440);
                      s = _out1437;
                      isOwned = _out1438;
                      isErased = _out1439;
                      readIdents = _out1440;
                    }
                  }
                }
              } else if (_source178.is_Nullable) {
                DAST._IType _3812___mcc_h1121 = _source178.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3813_recursiveGen;
                  bool _3814_recOwned;
                  bool _3815_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3816_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1441;
                  bool _out1442;
                  bool _out1443;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1444;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1441, out _out1442, out _out1443, out _out1444);
                  _3813_recursiveGen = _out1441;
                  _3814_recOwned = _out1442;
                  _3815_recErased = _out1443;
                  _3816_recIdents = _out1444;
                  if (!(_3814_recOwned)) {
                    _3813_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_3813_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3813_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _3815_recErased;
                  readIdents = _3816_recIdents;
                }
              } else if (_source178.is_Tuple) {
                Dafny.ISequence<DAST._IType> _3817___mcc_h1123 = _source178.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3818_recursiveGen;
                  bool _3819_recOwned;
                  bool _3820_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3821_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1445;
                  bool _out1446;
                  bool _out1447;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1448;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1445, out _out1446, out _out1447, out _out1448);
                  _3818_recursiveGen = _out1445;
                  _3819_recOwned = _out1446;
                  _3820_recErased = _out1447;
                  _3821_recIdents = _out1448;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3818_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3819_recOwned;
                  isErased = _3820_recErased;
                  readIdents = _3821_recIdents;
                }
              } else if (_source178.is_Array) {
                DAST._IType _3822___mcc_h1125 = _source178.dtor_element;
                BigInteger _3823___mcc_h1126 = _source178.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _3824_recursiveGen;
                  bool _3825_recOwned;
                  bool _3826_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3827_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1449;
                  bool _out1450;
                  bool _out1451;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1452;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1449, out _out1450, out _out1451, out _out1452);
                  _3824_recursiveGen = _out1449;
                  _3825_recOwned = _out1450;
                  _3826_recErased = _out1451;
                  _3827_recIdents = _out1452;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3824_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3825_recOwned;
                  isErased = _3826_recErased;
                  readIdents = _3827_recIdents;
                }
              } else if (_source178.is_Seq) {
                DAST._IType _3828___mcc_h1129 = _source178.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3829_recursiveGen;
                  bool _3830_recOwned;
                  bool _3831_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3832_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1453;
                  bool _out1454;
                  bool _out1455;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1456;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1453, out _out1454, out _out1455, out _out1456);
                  _3829_recursiveGen = _out1453;
                  _3830_recOwned = _out1454;
                  _3831_recErased = _out1455;
                  _3832_recIdents = _out1456;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3829_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3830_recOwned;
                  isErased = _3831_recErased;
                  readIdents = _3832_recIdents;
                }
              } else if (_source178.is_Set) {
                DAST._IType _3833___mcc_h1131 = _source178.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3834_recursiveGen;
                  bool _3835_recOwned;
                  bool _3836_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3837_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1457;
                  bool _out1458;
                  bool _out1459;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1460;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1457, out _out1458, out _out1459, out _out1460);
                  _3834_recursiveGen = _out1457;
                  _3835_recOwned = _out1458;
                  _3836_recErased = _out1459;
                  _3837_recIdents = _out1460;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3834_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3835_recOwned;
                  isErased = _3836_recErased;
                  readIdents = _3837_recIdents;
                }
              } else if (_source178.is_Multiset) {
                DAST._IType _3838___mcc_h1133 = _source178.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3839_recursiveGen;
                  bool _3840_recOwned;
                  bool _3841_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3842_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1461;
                  bool _out1462;
                  bool _out1463;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1464;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1461, out _out1462, out _out1463, out _out1464);
                  _3839_recursiveGen = _out1461;
                  _3840_recOwned = _out1462;
                  _3841_recErased = _out1463;
                  _3842_recIdents = _out1464;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3839_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3840_recOwned;
                  isErased = _3841_recErased;
                  readIdents = _3842_recIdents;
                }
              } else if (_source178.is_Map) {
                DAST._IType _3843___mcc_h1135 = _source178.dtor_key;
                DAST._IType _3844___mcc_h1136 = _source178.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _3845_recursiveGen;
                  bool _3846_recOwned;
                  bool _3847_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3848_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1465;
                  bool _out1466;
                  bool _out1467;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1468;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1465, out _out1466, out _out1467, out _out1468);
                  _3845_recursiveGen = _out1465;
                  _3846_recOwned = _out1466;
                  _3847_recErased = _out1467;
                  _3848_recIdents = _out1468;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3845_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3846_recOwned;
                  isErased = _3847_recErased;
                  readIdents = _3848_recIdents;
                }
              } else if (_source178.is_Arrow) {
                Dafny.ISequence<DAST._IType> _3849___mcc_h1139 = _source178.dtor_args;
                DAST._IType _3850___mcc_h1140 = _source178.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _3851_recursiveGen;
                  bool _3852_recOwned;
                  bool _3853_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3854_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1469;
                  bool _out1470;
                  bool _out1471;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1472;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1469, out _out1470, out _out1471, out _out1472);
                  _3851_recursiveGen = _out1469;
                  _3852_recOwned = _out1470;
                  _3853_recErased = _out1471;
                  _3854_recIdents = _out1472;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3851_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3852_recOwned;
                  isErased = _3853_recErased;
                  readIdents = _3854_recIdents;
                }
              } else if (_source178.is_Primitive) {
                DAST._IPrimitive _3855___mcc_h1143 = _source178.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3856_recursiveGen;
                  bool _3857_recOwned;
                  bool _3858_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3859_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1473;
                  bool _out1474;
                  bool _out1475;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1476;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1473, out _out1474, out _out1475, out _out1476);
                  _3856_recursiveGen = _out1473;
                  _3857_recOwned = _out1474;
                  _3858_recErased = _out1475;
                  _3859_recIdents = _out1476;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3856_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3857_recOwned;
                  isErased = _3858_recErased;
                  readIdents = _3859_recIdents;
                }
              } else if (_source178.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _3860___mcc_h1145 = _source178.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3861_recursiveGen;
                  bool _3862_recOwned;
                  bool _3863_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3864_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1477;
                  bool _out1478;
                  bool _out1479;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1480;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1477, out _out1478, out _out1479, out _out1480);
                  _3861_recursiveGen = _out1477;
                  _3862_recOwned = _out1478;
                  _3863_recErased = _out1479;
                  _3864_recIdents = _out1480;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3861_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3862_recOwned;
                  isErased = _3863_recErased;
                  readIdents = _3864_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3865___mcc_h1147 = _source178.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3866_recursiveGen;
                  bool _3867_recOwned;
                  bool _3868_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3869_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1481;
                  bool _out1482;
                  bool _out1483;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1484;
                  DCOMP.COMP.GenExpr(_2331_expr, selfIdent, @params, mustOwn, out _out1481, out _out1482, out _out1483, out _out1484);
                  _3866_recursiveGen = _out1481;
                  _3867_recOwned = _out1482;
                  _3868_recErased = _out1483;
                  _3869_recIdents = _out1484;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3866_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3867_recOwned;
                  isErased = _3868_recErased;
                  readIdents = _3869_recIdents;
                }
              }
            }
          }
        }
      } else if (_source130.is_SeqConstruct) {
        DAST._IExpression _3870___mcc_h26 = _source130.dtor_length;
        DAST._IExpression _3871___mcc_h27 = _source130.dtor_elem;
        DAST._IExpression _3872_expr = _3871___mcc_h27;
        DAST._IExpression _3873_length = _3870___mcc_h26;
        {
          Dafny.ISequence<Dafny.Rune> _3874_recursiveGen;
          bool _3875___v65;
          bool _3876_eErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3877_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1485;
          bool _out1486;
          bool _out1487;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1488;
          DCOMP.COMP.GenExpr(_3872_expr, selfIdent, @params, true, out _out1485, out _out1486, out _out1487, out _out1488);
          _3874_recursiveGen = _out1485;
          _3875___v65 = _out1486;
          _3876_eErased = _out1487;
          _3877_recIdents = _out1488;
          Dafny.ISequence<Dafny.Rune> _3878_lengthGen;
          bool _3879___v66;
          bool _3880_lengthErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3881_lengthIdents;
          Dafny.ISequence<Dafny.Rune> _out1489;
          bool _out1490;
          bool _out1491;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1492;
          DCOMP.COMP.GenExpr(_3873_length, selfIdent, @params, true, out _out1489, out _out1490, out _out1491, out _out1492);
          _3878_lengthGen = _out1489;
          _3879___v66 = _out1490;
          _3880_lengthErased = _out1491;
          _3881_lengthIdents = _out1492;
          if (!(_3880_lengthErased)) {
            _3878_lengthGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3878_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), _3874_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), _3878_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer.0(&i)).collect::<Vec<_>>()\n}"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3877_recIdents, _3881_lengthIdents);
          isOwned = true;
          isErased = _3876_eErased;
        }
      } else if (_source130.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _3882___mcc_h28 = _source130.dtor_elements;
        DAST._IType _3883___mcc_h29 = _source130.dtor_typ;
        DAST._IType _3884_typ = _3883___mcc_h29;
        Dafny.ISequence<DAST._IExpression> _3885_exprs = _3882___mcc_h28;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3886_genTpe;
          Dafny.ISequence<Dafny.Rune> _out1493;
          _out1493 = DCOMP.COMP.GenType(_3884_typ, false, false);
          _3886_genTpe = _out1493;
          BigInteger _3887_i;
          _3887_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(vec![");
          _3887_i = BigInteger.Zero;
          while ((_3887_i) < (new BigInteger((_3885_exprs).Count))) {
            if ((_3887_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3888_recursiveGen;
            bool _3889___v67;
            bool _3890_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3891_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1494;
            bool _out1495;
            bool _out1496;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1497;
            DCOMP.COMP.GenExpr((_3885_exprs).Select(_3887_i), selfIdent, @params, true, out _out1494, out _out1495, out _out1496, out _out1497);
            _3888_recursiveGen = _out1494;
            _3889___v67 = _out1495;
            _3890_isErased = _out1496;
            _3891_recIdents = _out1497;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3891_recIdents);
            if (_3890_isErased) {
              _3888_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _3888_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _3888_recursiveGen);
            _3887_i = (_3887_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("] as Vec<")), _3886_genTpe), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source130.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _3892___mcc_h30 = _source130.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _3893_exprs = _3892___mcc_h30;
        {
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>> _3894_generatedValues;
          _3894_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3895_i;
          _3895_i = BigInteger.Zero;
          bool _3896_allErased;
          _3896_allErased = true;
          while ((_3895_i) < (new BigInteger((_3893_exprs).Count))) {
            Dafny.ISequence<Dafny.Rune> _3897_recursiveGen;
            bool _3898___v68;
            bool _3899_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3900_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1498;
            bool _out1499;
            bool _out1500;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1501;
            DCOMP.COMP.GenExpr((_3893_exprs).Select(_3895_i), selfIdent, @params, true, out _out1498, out _out1499, out _out1500, out _out1501);
            _3897_recursiveGen = _out1498;
            _3898___v68 = _out1499;
            _3899_isErased = _out1500;
            _3900_recIdents = _out1501;
            _3896_allErased = (_3896_allErased) && (_3899_isErased);
            _3894_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.Concat(_3894_generatedValues, Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements(_System.Tuple2<Dafny.ISequence<Dafny.Rune>, bool>.create(_3897_recursiveGen, _3899_isErased)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3900_recIdents);
            _3895_i = (_3895_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _3895_i = BigInteger.Zero;
          while ((_3895_i) < (new BigInteger((_3894_generatedValues).Count))) {
            if ((_3895_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3901_gen;
            _3901_gen = ((_3894_generatedValues).Select(_3895_i)).dtor__0;
            if ((((_3894_generatedValues).Select(_3895_i)).dtor__1) && (!(_3896_allErased))) {
              _3901_gen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _3901_gen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _3901_gen);
            _3895_i = (_3895_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashSet<_>>()"));
          isOwned = true;
          isErased = _3896_allErased;
        }
      } else if (_source130.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3902___mcc_h31 = _source130.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3903_mapElems = _3902___mcc_h31;
        {
          Dafny.ISequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>> _3904_generatedValues;
          _3904_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3905_i;
          _3905_i = BigInteger.Zero;
          bool _3906_allErased;
          _3906_allErased = true;
          while ((_3905_i) < (new BigInteger((_3903_mapElems).Count))) {
            Dafny.ISequence<Dafny.Rune> _3907_recursiveGenKey;
            bool _3908___v69;
            bool _3909_isErasedKey;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3910_recIdentsKey;
            Dafny.ISequence<Dafny.Rune> _out1502;
            bool _out1503;
            bool _out1504;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1505;
            DCOMP.COMP.GenExpr(((_3903_mapElems).Select(_3905_i)).dtor__0, selfIdent, @params, true, out _out1502, out _out1503, out _out1504, out _out1505);
            _3907_recursiveGenKey = _out1502;
            _3908___v69 = _out1503;
            _3909_isErasedKey = _out1504;
            _3910_recIdentsKey = _out1505;
            Dafny.ISequence<Dafny.Rune> _3911_recursiveGenValue;
            bool _3912___v70;
            bool _3913_isErasedValue;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3914_recIdentsValue;
            Dafny.ISequence<Dafny.Rune> _out1506;
            bool _out1507;
            bool _out1508;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1509;
            DCOMP.COMP.GenExpr(((_3903_mapElems).Select(_3905_i)).dtor__1, selfIdent, @params, true, out _out1506, out _out1507, out _out1508, out _out1509);
            _3911_recursiveGenValue = _out1506;
            _3912___v70 = _out1507;
            _3913_isErasedValue = _out1508;
            _3914_recIdentsValue = _out1509;
            _3906_allErased = ((_3906_allErased) && (_3909_isErasedKey)) && (_3913_isErasedValue);
            _3904_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.Concat(_3904_generatedValues, Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements(_System.Tuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>.create(_3907_recursiveGenKey, _3911_recursiveGenValue, _3909_isErasedKey, _3913_isErasedValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3910_recIdentsKey), _3914_recIdentsValue);
            _3905_i = (_3905_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _3905_i = BigInteger.Zero;
          while ((_3905_i) < (new BigInteger((_3904_generatedValues).Count))) {
            if ((_3905_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3915_genKey;
            _3915_genKey = ((_3904_generatedValues).Select(_3905_i)).dtor__0;
            Dafny.ISequence<Dafny.Rune> _3916_genValue;
            _3916_genValue = ((_3904_generatedValues).Select(_3905_i)).dtor__1;
            if ((((_3904_generatedValues).Select(_3905_i)).dtor__2) && (!(_3906_allErased))) {
              _3915_genKey = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _3915_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if ((((_3904_generatedValues).Select(_3905_i)).dtor__3) && (!(_3906_allErased))) {
              _3916_genValue = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _3916_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3915_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3916_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _3905_i = (_3905_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashMap<_, _>>()"));
          isOwned = true;
          isErased = _3906_allErased;
        }
      } else if (_source130.is_This) {
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source180 = selfIdent;
          if (_source180.is_Some) {
            Dafny.ISequence<Dafny.Rune> _3917___mcc_h1149 = _source180.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _3918_id = _3917___mcc_h1149;
            {
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(_3918_id, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                isOwned = true;
              } else {
                if ((_3918_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3918_id);
                }
                isOwned = false;
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3918_id);
              isErased = false;
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")");
              isOwned = true;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
              isErased = true;
            }
          }
        }
      } else if (_source130.is_Ite) {
        DAST._IExpression _3919___mcc_h32 = _source130.dtor_cond;
        DAST._IExpression _3920___mcc_h33 = _source130.dtor_thn;
        DAST._IExpression _3921___mcc_h34 = _source130.dtor_els;
        DAST._IExpression _3922_f = _3921___mcc_h34;
        DAST._IExpression _3923_t = _3920___mcc_h33;
        DAST._IExpression _3924_cond = _3919___mcc_h32;
        {
          Dafny.ISequence<Dafny.Rune> _3925_condString;
          bool _3926___v71;
          bool _3927_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3928_recIdentsCond;
          Dafny.ISequence<Dafny.Rune> _out1510;
          bool _out1511;
          bool _out1512;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1513;
          DCOMP.COMP.GenExpr(_3924_cond, selfIdent, @params, true, out _out1510, out _out1511, out _out1512, out _out1513);
          _3925_condString = _out1510;
          _3926___v71 = _out1511;
          _3927_condErased = _out1512;
          _3928_recIdentsCond = _out1513;
          if (!(_3927_condErased)) {
            _3925_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3925_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          Dafny.ISequence<Dafny.Rune> _3929___v72;
          bool _3930_tHasToBeOwned;
          bool _3931___v73;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3932___v74;
          Dafny.ISequence<Dafny.Rune> _out1514;
          bool _out1515;
          bool _out1516;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1517;
          DCOMP.COMP.GenExpr(_3923_t, selfIdent, @params, mustOwn, out _out1514, out _out1515, out _out1516, out _out1517);
          _3929___v72 = _out1514;
          _3930_tHasToBeOwned = _out1515;
          _3931___v73 = _out1516;
          _3932___v74 = _out1517;
          Dafny.ISequence<Dafny.Rune> _3933_fString;
          bool _3934_fOwned;
          bool _3935_fErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3936_recIdentsF;
          Dafny.ISequence<Dafny.Rune> _out1518;
          bool _out1519;
          bool _out1520;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1521;
          DCOMP.COMP.GenExpr(_3922_f, selfIdent, @params, _3930_tHasToBeOwned, out _out1518, out _out1519, out _out1520, out _out1521);
          _3933_fString = _out1518;
          _3934_fOwned = _out1519;
          _3935_fErased = _out1520;
          _3936_recIdentsF = _out1521;
          Dafny.ISequence<Dafny.Rune> _3937_tString;
          bool _3938___v75;
          bool _3939_tErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3940_recIdentsT;
          Dafny.ISequence<Dafny.Rune> _out1522;
          bool _out1523;
          bool _out1524;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1525;
          DCOMP.COMP.GenExpr(_3923_t, selfIdent, @params, _3934_fOwned, out _out1522, out _out1523, out _out1524, out _out1525);
          _3937_tString = _out1522;
          _3938___v75 = _out1523;
          _3939_tErased = _out1524;
          _3940_recIdentsT = _out1525;
          if ((!(_3935_fErased)) || (!(_3939_tErased))) {
            if (_3935_fErased) {
              _3933_fString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3933_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (_3939_tErased) {
              _3937_tString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3937_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _3925_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _3937_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _3933_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})"));
          isOwned = _3934_fOwned;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3928_recIdentsCond, _3940_recIdentsT), _3936_recIdentsF);
          isErased = (_3935_fErased) || (_3939_tErased);
        }
      } else if (_source130.is_UnOp) {
        DAST._IUnaryOp _3941___mcc_h35 = _source130.dtor_unOp;
        DAST._IExpression _3942___mcc_h36 = _source130.dtor_expr;
        DAST._IUnaryOp _source181 = _3941___mcc_h35;
        if (_source181.is_Not) {
          DAST._IExpression _3943_e = _3942___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _3944_recursiveGen;
            bool _3945___v76;
            bool _3946_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3947_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1526;
            bool _out1527;
            bool _out1528;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1529;
            DCOMP.COMP.GenExpr(_3943_e, selfIdent, @params, true, out _out1526, out _out1527, out _out1528, out _out1529);
            _3944_recursiveGen = _out1526;
            _3945___v76 = _out1527;
            _3946_recErased = _out1528;
            _3947_recIdents = _out1529;
            if (!(_3946_recErased)) {
              _3944_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3944_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _3944_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _3947_recIdents;
            isErased = true;
          }
        } else if (_source181.is_BitwiseNot) {
          DAST._IExpression _3948_e = _3942___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _3949_recursiveGen;
            bool _3950___v77;
            bool _3951_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3952_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1530;
            bool _out1531;
            bool _out1532;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1533;
            DCOMP.COMP.GenExpr(_3948_e, selfIdent, @params, true, out _out1530, out _out1531, out _out1532, out _out1533);
            _3949_recursiveGen = _out1530;
            _3950___v77 = _out1531;
            _3951_recErased = _out1532;
            _3952_recIdents = _out1533;
            if (!(_3951_recErased)) {
              _3949_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3949_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~("), _3949_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _3952_recIdents;
            isErased = true;
          }
        } else {
          DAST._IExpression _3953_e = _3942___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _3954_recursiveGen;
            bool _3955_recOwned;
            bool _3956_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3957_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1534;
            bool _out1535;
            bool _out1536;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1537;
            DCOMP.COMP.GenExpr(_3953_e, selfIdent, @params, false, out _out1534, out _out1535, out _out1536, out _out1537);
            _3954_recursiveGen = _out1534;
            _3955_recOwned = _out1535;
            _3956_recErased = _out1536;
            _3957_recIdents = _out1537;
            if (!(_3956_recErased)) {
              Dafny.ISequence<Dafny.Rune> _3958_eraseFn;
              _3958_eraseFn = ((_3955_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
              _3954_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _3958_eraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3954_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _3954_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").len())"));
            isOwned = true;
            readIdents = _3957_recIdents;
            isErased = true;
          }
        }
      } else if (_source130.is_BinOp) {
        DAST._IBinOp _3959___mcc_h37 = _source130.dtor_op;
        DAST._IExpression _3960___mcc_h38 = _source130.dtor_left;
        DAST._IExpression _3961___mcc_h39 = _source130.dtor_right;
        DAST._IExpression _3962_r = _3961___mcc_h39;
        DAST._IExpression _3963_l = _3960___mcc_h38;
        DAST._IBinOp _3964_op = _3959___mcc_h37;
        {
          Dafny.ISequence<Dafny.Rune> _3965_left;
          bool _3966___v78;
          bool _3967_leftErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3968_recIdentsL;
          Dafny.ISequence<Dafny.Rune> _out1538;
          bool _out1539;
          bool _out1540;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1541;
          DCOMP.COMP.GenExpr(_3963_l, selfIdent, @params, true, out _out1538, out _out1539, out _out1540, out _out1541);
          _3965_left = _out1538;
          _3966___v78 = _out1539;
          _3967_leftErased = _out1540;
          _3968_recIdentsL = _out1541;
          Dafny.ISequence<Dafny.Rune> _3969_right;
          bool _3970___v79;
          bool _3971_rightErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3972_recIdentsR;
          Dafny.ISequence<Dafny.Rune> _out1542;
          bool _out1543;
          bool _out1544;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1545;
          DCOMP.COMP.GenExpr(_3962_r, selfIdent, @params, true, out _out1542, out _out1543, out _out1544, out _out1545);
          _3969_right = _out1542;
          _3970___v79 = _out1543;
          _3971_rightErased = _out1544;
          _3972_recIdentsR = _out1545;
          DAST._IBinOp _source182 = _3964_op;
          if (_source182.is_Eq) {
            bool _3973___mcc_h1150 = _source182.dtor_referential;
            bool _3974___mcc_h1151 = _source182.dtor_nullable;
            {
              if (!(_3967_leftErased)) {
                _3965_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3971_rightErased)) {
                _3969_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source183 = _3964_op;
              if (_source183.is_Eq) {
                bool _3975___mcc_h1160 = _source183.dtor_referential;
                bool _3976___mcc_h1161 = _source183.dtor_nullable;
                bool _3977_nullable = _3976___mcc_h1161;
                bool _3978_referential = _3975___mcc_h1160;
                {
                  if (_3978_referential) {
                    if (_3977_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3965_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3969_right);
                  }
                }
              } else if (_source183.is_Neq) {
                bool _3979___mcc_h1162 = _source183.dtor_referential;
                bool _3980___mcc_h1163 = _source183.dtor_nullable;
                bool _3981_nullable = _3980___mcc_h1163;
                bool _3982_referential = _3979___mcc_h1162;
                {
                  if (_3982_referential) {
                    if (_3981_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3965_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3969_right);
                  }
                }
              } else if (_source183.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source183.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source183.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source183.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3983___mcc_h1164 = _source183.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3984_op = _3983___mcc_h1164;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3984_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source182.is_Neq) {
            bool _3985___mcc_h1154 = _source182.dtor_referential;
            bool _3986___mcc_h1155 = _source182.dtor_nullable;
            {
              if (!(_3967_leftErased)) {
                _3965_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3971_rightErased)) {
                _3969_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source184 = _3964_op;
              if (_source184.is_Eq) {
                bool _3987___mcc_h1165 = _source184.dtor_referential;
                bool _3988___mcc_h1166 = _source184.dtor_nullable;
                bool _3989_nullable = _3988___mcc_h1166;
                bool _3990_referential = _3987___mcc_h1165;
                {
                  if (_3990_referential) {
                    if (_3989_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3965_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3969_right);
                  }
                }
              } else if (_source184.is_Neq) {
                bool _3991___mcc_h1167 = _source184.dtor_referential;
                bool _3992___mcc_h1168 = _source184.dtor_nullable;
                bool _3993_nullable = _3992___mcc_h1168;
                bool _3994_referential = _3991___mcc_h1167;
                {
                  if (_3994_referential) {
                    if (_3993_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3965_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3969_right);
                  }
                }
              } else if (_source184.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source184.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source184.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source184.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3995___mcc_h1169 = _source184.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3996_op = _3995___mcc_h1169;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3996_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source182.is_Div) {
            {
              if (!(_3967_leftErased)) {
                _3965_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3971_rightErased)) {
                _3969_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source185 = _3964_op;
              if (_source185.is_Eq) {
                bool _3997___mcc_h1170 = _source185.dtor_referential;
                bool _3998___mcc_h1171 = _source185.dtor_nullable;
                bool _3999_nullable = _3998___mcc_h1171;
                bool _4000_referential = _3997___mcc_h1170;
                {
                  if (_4000_referential) {
                    if (_3999_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3965_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3969_right);
                  }
                }
              } else if (_source185.is_Neq) {
                bool _4001___mcc_h1172 = _source185.dtor_referential;
                bool _4002___mcc_h1173 = _source185.dtor_nullable;
                bool _4003_nullable = _4002___mcc_h1173;
                bool _4004_referential = _4001___mcc_h1172;
                {
                  if (_4004_referential) {
                    if (_4003_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3965_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3969_right);
                  }
                }
              } else if (_source185.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source185.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source185.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source185.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _4005___mcc_h1174 = _source185.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _4006_op = _4005___mcc_h1174;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _4006_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source182.is_EuclidianDiv) {
            {
              if (!(_3967_leftErased)) {
                _3965_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3971_rightErased)) {
                _3969_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source186 = _3964_op;
              if (_source186.is_Eq) {
                bool _4007___mcc_h1175 = _source186.dtor_referential;
                bool _4008___mcc_h1176 = _source186.dtor_nullable;
                bool _4009_nullable = _4008___mcc_h1176;
                bool _4010_referential = _4007___mcc_h1175;
                {
                  if (_4010_referential) {
                    if (_4009_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3965_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3969_right);
                  }
                }
              } else if (_source186.is_Neq) {
                bool _4011___mcc_h1177 = _source186.dtor_referential;
                bool _4012___mcc_h1178 = _source186.dtor_nullable;
                bool _4013_nullable = _4012___mcc_h1178;
                bool _4014_referential = _4011___mcc_h1177;
                {
                  if (_4014_referential) {
                    if (_4013_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3965_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3969_right);
                  }
                }
              } else if (_source186.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source186.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source186.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source186.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _4015___mcc_h1179 = _source186.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _4016_op = _4015___mcc_h1179;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _4016_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source182.is_Mod) {
            {
              if (!(_3967_leftErased)) {
                _3965_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3971_rightErased)) {
                _3969_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source187 = _3964_op;
              if (_source187.is_Eq) {
                bool _4017___mcc_h1180 = _source187.dtor_referential;
                bool _4018___mcc_h1181 = _source187.dtor_nullable;
                bool _4019_nullable = _4018___mcc_h1181;
                bool _4020_referential = _4017___mcc_h1180;
                {
                  if (_4020_referential) {
                    if (_4019_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3965_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3969_right);
                  }
                }
              } else if (_source187.is_Neq) {
                bool _4021___mcc_h1182 = _source187.dtor_referential;
                bool _4022___mcc_h1183 = _source187.dtor_nullable;
                bool _4023_nullable = _4022___mcc_h1183;
                bool _4024_referential = _4021___mcc_h1182;
                {
                  if (_4024_referential) {
                    if (_4023_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3965_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3969_right);
                  }
                }
              } else if (_source187.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source187.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source187.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source187.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _4025___mcc_h1184 = _source187.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _4026_op = _4025___mcc_h1184;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _4026_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source182.is_EuclidianMod) {
            {
              if (!(_3967_leftErased)) {
                _3965_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3971_rightErased)) {
                _3969_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source188 = _3964_op;
              if (_source188.is_Eq) {
                bool _4027___mcc_h1185 = _source188.dtor_referential;
                bool _4028___mcc_h1186 = _source188.dtor_nullable;
                bool _4029_nullable = _4028___mcc_h1186;
                bool _4030_referential = _4027___mcc_h1185;
                {
                  if (_4030_referential) {
                    if (_4029_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3965_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3969_right);
                  }
                }
              } else if (_source188.is_Neq) {
                bool _4031___mcc_h1187 = _source188.dtor_referential;
                bool _4032___mcc_h1188 = _source188.dtor_nullable;
                bool _4033_nullable = _4032___mcc_h1188;
                bool _4034_referential = _4031___mcc_h1187;
                {
                  if (_4034_referential) {
                    if (_4033_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3965_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3969_right);
                  }
                }
              } else if (_source188.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source188.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source188.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source188.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _4035___mcc_h1189 = _source188.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _4036_op = _4035___mcc_h1189;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _4036_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source182.is_Implies) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") || ")), _3969_right);
            }
          } else if (_source182.is_In) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3969_right, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          } else if (_source182.is_NotIn) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
            }
          } else if (_source182.is_SetDifference) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3965_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".difference(&")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").cloned().collect::<::std::collections::HashSet<_>>()"));
            }
          } else if (_source182.is_Concat) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].concat()"));
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4037___mcc_h1158 = _source182.dtor_Passthrough_a0;
            {
              if (!(_3967_leftErased)) {
                _3965_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3971_rightErased)) {
                _3969_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source189 = _3964_op;
              if (_source189.is_Eq) {
                bool _4038___mcc_h1190 = _source189.dtor_referential;
                bool _4039___mcc_h1191 = _source189.dtor_nullable;
                bool _4040_nullable = _4039___mcc_h1191;
                bool _4041_referential = _4038___mcc_h1190;
                {
                  if (_4041_referential) {
                    if (_4040_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3965_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3969_right);
                  }
                }
              } else if (_source189.is_Neq) {
                bool _4042___mcc_h1192 = _source189.dtor_referential;
                bool _4043___mcc_h1193 = _source189.dtor_nullable;
                bool _4044_nullable = _4043___mcc_h1193;
                bool _4045_referential = _4042___mcc_h1192;
                {
                  if (_4045_referential) {
                    if (_4044_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3965_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3969_right);
                  }
                }
              } else if (_source189.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source189.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source189.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source189.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _4046___mcc_h1194 = _source189.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _4047_op = _4046___mcc_h1194;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3965_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _4047_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3969_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          }
          isOwned = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3968_recIdentsL, _3972_recIdentsR);
          isErased = true;
        }
      } else if (_source130.is_ArrayLen) {
        DAST._IExpression _4048___mcc_h40 = _source130.dtor_expr;
        BigInteger _4049___mcc_h41 = _source130.dtor_dim;
        BigInteger _4050_dim = _4049___mcc_h41;
        DAST._IExpression _4051_expr = _4048___mcc_h40;
        {
          Dafny.ISequence<Dafny.Rune> _4052_recursiveGen;
          bool _4053___v81;
          bool _4054_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4055_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1546;
          bool _out1547;
          bool _out1548;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1549;
          DCOMP.COMP.GenExpr(_4051_expr, selfIdent, @params, true, out _out1546, out _out1547, out _out1548, out _out1549);
          _4052_recursiveGen = _out1546;
          _4053___v81 = _out1547;
          _4054_recErased = _out1548;
          _4055_recIdents = _out1549;
          if ((_4050_dim).Sign == 0) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _4052_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow().len())"));
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(m.borrow().len())");
            BigInteger _4056_i;
            _4056_i = BigInteger.One;
            while ((_4056_i) < (_4050_dim)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("m.borrow().get(0).map(|m| "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
              _4056_i = (_4056_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4052_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow().get(0).map(|m| ")), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
          }
          isOwned = true;
          readIdents = _4055_recIdents;
          isErased = true;
        }
      } else if (_source130.is_Select) {
        DAST._IExpression _4057___mcc_h42 = _source130.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _4058___mcc_h43 = _source130.dtor_field;
        bool _4059___mcc_h44 = _source130.dtor_isConstant;
        bool _4060___mcc_h45 = _source130.dtor_onDatatype;
        DAST._IExpression _source190 = _4057___mcc_h42;
        if (_source190.is_Literal) {
          DAST._ILiteral _4061___mcc_h46 = _source190.dtor_Literal_a0;
          bool _4062_isDatatype = _4060___mcc_h45;
          bool _4063_isConstant = _4059___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _4064_field = _4058___mcc_h43;
          DAST._IExpression _4065_on = _4057___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _4066_onString;
            bool _4067_onOwned;
            bool _4068_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4069_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1550;
            bool _out1551;
            bool _out1552;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1553;
            DCOMP.COMP.GenExpr(_4065_on, selfIdent, @params, false, out _out1550, out _out1551, out _out1552, out _out1553);
            _4066_onString = _out1550;
            _4067_onOwned = _out1551;
            _4068_onErased = _out1552;
            _4069_recIdents = _out1553;
            if ((_4062_isDatatype) || (_4063_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4066_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4064_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4063_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _4066_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4064_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _4069_recIdents;
          }
        } else if (_source190.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _4070___mcc_h48 = _source190.dtor_Ident_a0;
          bool _4071_isDatatype = _4060___mcc_h45;
          bool _4072_isConstant = _4059___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _4073_field = _4058___mcc_h43;
          DAST._IExpression _4074_on = _4057___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _4075_onString;
            bool _4076_onOwned;
            bool _4077_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4078_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1554;
            bool _out1555;
            bool _out1556;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1557;
            DCOMP.COMP.GenExpr(_4074_on, selfIdent, @params, false, out _out1554, out _out1555, out _out1556, out _out1557);
            _4075_onString = _out1554;
            _4076_onOwned = _out1555;
            _4077_onErased = _out1556;
            _4078_recIdents = _out1557;
            if ((_4071_isDatatype) || (_4072_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4075_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4073_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4072_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _4075_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4073_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _4078_recIdents;
          }
        } else if (_source190.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4079___mcc_h50 = _source190.dtor_Companion_a0;
          bool _4080_isDatatype = _4060___mcc_h45;
          bool _4081_isConstant = _4059___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _4082_field = _4058___mcc_h43;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4083_c = _4079___mcc_h50;
          {
            Dafny.ISequence<Dafny.Rune> _4084_onString;
            bool _4085_onOwned;
            bool _4086_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4087_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1558;
            bool _out1559;
            bool _out1560;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1561;
            DCOMP.COMP.GenExpr(DAST.Expression.create_Companion(_4083_c), selfIdent, @params, false, out _out1558, out _out1559, out _out1560, out _out1561);
            _4084_onString = _out1558;
            _4085_onOwned = _out1559;
            _4086_onErased = _out1560;
            _4087_recIdents = _out1561;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4084_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_4082_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
            isOwned = true;
            isErased = false;
            readIdents = _4087_recIdents;
          }
        } else if (_source190.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _4088___mcc_h52 = _source190.dtor_Tuple_a0;
          bool _4089_isDatatype = _4060___mcc_h45;
          bool _4090_isConstant = _4059___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _4091_field = _4058___mcc_h43;
          DAST._IExpression _4092_on = _4057___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _4093_onString;
            bool _4094_onOwned;
            bool _4095_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4096_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1562;
            bool _out1563;
            bool _out1564;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1565;
            DCOMP.COMP.GenExpr(_4092_on, selfIdent, @params, false, out _out1562, out _out1563, out _out1564, out _out1565);
            _4093_onString = _out1562;
            _4094_onOwned = _out1563;
            _4095_onErased = _out1564;
            _4096_recIdents = _out1565;
            if ((_4089_isDatatype) || (_4090_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4093_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4091_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4090_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _4093_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4091_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _4096_recIdents;
          }
        } else if (_source190.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4097___mcc_h54 = _source190.dtor_path;
          Dafny.ISequence<DAST._IType> _4098___mcc_h55 = _source190.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _4099___mcc_h56 = _source190.dtor_args;
          bool _4100_isDatatype = _4060___mcc_h45;
          bool _4101_isConstant = _4059___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _4102_field = _4058___mcc_h43;
          DAST._IExpression _4103_on = _4057___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _4104_onString;
            bool _4105_onOwned;
            bool _4106_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4107_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1566;
            bool _out1567;
            bool _out1568;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1569;
            DCOMP.COMP.GenExpr(_4103_on, selfIdent, @params, false, out _out1566, out _out1567, out _out1568, out _out1569);
            _4104_onString = _out1566;
            _4105_onOwned = _out1567;
            _4106_onErased = _out1568;
            _4107_recIdents = _out1569;
            if ((_4100_isDatatype) || (_4101_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4104_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4102_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4101_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _4104_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4102_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _4107_recIdents;
          }
        } else if (_source190.is_NewArray) {
          Dafny.ISequence<DAST._IExpression> _4108___mcc_h60 = _source190.dtor_dims;
          DAST._IType _4109___mcc_h61 = _source190.dtor_typ;
          bool _4110_isDatatype = _4060___mcc_h45;
          bool _4111_isConstant = _4059___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _4112_field = _4058___mcc_h43;
          DAST._IExpression _4113_on = _4057___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _4114_onString;
            bool _4115_onOwned;
            bool _4116_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4117_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1570;
            bool _out1571;
            bool _out1572;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1573;
            DCOMP.COMP.GenExpr(_4113_on, selfIdent, @params, false, out _out1570, out _out1571, out _out1572, out _out1573);
            _4114_onString = _out1570;
            _4115_onOwned = _out1571;
            _4116_onErased = _out1572;
            _4117_recIdents = _out1573;
            if ((_4110_isDatatype) || (_4111_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4114_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4112_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4111_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _4114_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4112_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _4117_recIdents;
          }
        } else if (_source190.is_DatatypeValue) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4118___mcc_h64 = _source190.dtor_path;
          Dafny.ISequence<DAST._IType> _4119___mcc_h65 = _source190.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _4120___mcc_h66 = _source190.dtor_variant;
          bool _4121___mcc_h67 = _source190.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _4122___mcc_h68 = _source190.dtor_contents;
          bool _4123_isDatatype = _4060___mcc_h45;
          bool _4124_isConstant = _4059___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _4125_field = _4058___mcc_h43;
          DAST._IExpression _4126_on = _4057___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _4127_onString;
            bool _4128_onOwned;
            bool _4129_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4130_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1574;
            bool _out1575;
            bool _out1576;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1577;
            DCOMP.COMP.GenExpr(_4126_on, selfIdent, @params, false, out _out1574, out _out1575, out _out1576, out _out1577);
            _4127_onString = _out1574;
            _4128_onOwned = _out1575;
            _4129_onErased = _out1576;
            _4130_recIdents = _out1577;
            if ((_4123_isDatatype) || (_4124_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4127_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4125_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4124_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _4127_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4125_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _4130_recIdents;
          }
        } else if (_source190.is_Convert) {
          DAST._IExpression _4131___mcc_h74 = _source190.dtor_value;
          DAST._IType _4132___mcc_h75 = _source190.dtor_from;
          DAST._IType _4133___mcc_h76 = _source190.dtor_typ;
          bool _4134_isDatatype = _4060___mcc_h45;
          bool _4135_isConstant = _4059___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _4136_field = _4058___mcc_h43;
          DAST._IExpression _4137_on = _4057___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _4138_onString;
            bool _4139_onOwned;
            bool _4140_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4141_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1578;
            bool _out1579;
            bool _out1580;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1581;
            DCOMP.COMP.GenExpr(_4137_on, selfIdent, @params, false, out _out1578, out _out1579, out _out1580, out _out1581);
            _4138_onString = _out1578;
            _4139_onOwned = _out1579;
            _4140_onErased = _out1580;
            _4141_recIdents = _out1581;
            if ((_4134_isDatatype) || (_4135_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4138_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4136_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4135_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _4138_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4136_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _4141_recIdents;
          }
        } else if (_source190.is_SeqConstruct) {
          DAST._IExpression _4142___mcc_h80 = _source190.dtor_length;
          DAST._IExpression _4143___mcc_h81 = _source190.dtor_elem;
          bool _4144_isDatatype = _4060___mcc_h45;
          bool _4145_isConstant = _4059___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _4146_field = _4058___mcc_h43;
          DAST._IExpression _4147_on = _4057___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _4148_onString;
            bool _4149_onOwned;
            bool _4150_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4151_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1582;
            bool _out1583;
            bool _out1584;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1585;
            DCOMP.COMP.GenExpr(_4147_on, selfIdent, @params, false, out _out1582, out _out1583, out _out1584, out _out1585);
            _4148_onString = _out1582;
            _4149_onOwned = _out1583;
            _4150_onErased = _out1584;
            _4151_recIdents = _out1585;
            if ((_4144_isDatatype) || (_4145_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4148_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4146_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4145_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _4148_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4146_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _4151_recIdents;
          }
        } else if (_source190.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _4152___mcc_h84 = _source190.dtor_elements;
          DAST._IType _4153___mcc_h85 = _source190.dtor_typ;
          bool _4154_isDatatype = _4060___mcc_h45;
          bool _4155_isConstant = _4059___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _4156_field = _4058___mcc_h43;
          DAST._IExpression _4157_on = _4057___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _4158_onString;
            bool _4159_onOwned;
            bool _4160_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4161_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1586;
            bool _out1587;
            bool _out1588;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1589;
            DCOMP.COMP.GenExpr(_4157_on, selfIdent, @params, false, out _out1586, out _out1587, out _out1588, out _out1589);
            _4158_onString = _out1586;
            _4159_onOwned = _out1587;
            _4160_onErased = _out1588;
            _4161_recIdents = _out1589;
            if ((_4154_isDatatype) || (_4155_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4158_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4156_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4155_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _4158_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4156_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _4161_recIdents;
          }
        } else if (_source190.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _4162___mcc_h88 = _source190.dtor_elements;
          bool _4163_isDatatype = _4060___mcc_h45;
          bool _4164_isConstant = _4059___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _4165_field = _4058___mcc_h43;
          DAST._IExpression _4166_on = _4057___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _4167_onString;
            bool _4168_onOwned;
            bool _4169_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4170_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1590;
            bool _out1591;
            bool _out1592;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1593;
            DCOMP.COMP.GenExpr(_4166_on, selfIdent, @params, false, out _out1590, out _out1591, out _out1592, out _out1593);
            _4167_onString = _out1590;
            _4168_onOwned = _out1591;
            _4169_onErased = _out1592;
            _4170_recIdents = _out1593;
            if ((_4163_isDatatype) || (_4164_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4167_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4165_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4164_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _4167_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4165_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _4170_recIdents;
          }
        } else if (_source190.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _4171___mcc_h90 = _source190.dtor_mapElems;
          bool _4172_isDatatype = _4060___mcc_h45;
          bool _4173_isConstant = _4059___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _4174_field = _4058___mcc_h43;
          DAST._IExpression _4175_on = _4057___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _4176_onString;
            bool _4177_onOwned;
            bool _4178_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4179_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1594;
            bool _out1595;
            bool _out1596;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1597;
            DCOMP.COMP.GenExpr(_4175_on, selfIdent, @params, false, out _out1594, out _out1595, out _out1596, out _out1597);
            _4176_onString = _out1594;
            _4177_onOwned = _out1595;
            _4178_onErased = _out1596;
            _4179_recIdents = _out1597;
            if ((_4172_isDatatype) || (_4173_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4176_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4174_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4173_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _4176_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4174_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _4179_recIdents;
          }
        } else if (_source190.is_This) {
          bool _4180_isDatatype = _4060___mcc_h45;
          bool _4181_isConstant = _4059___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _4182_field = _4058___mcc_h43;
          DAST._IExpression _4183_on = _4057___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _4184_onString;
            bool _4185_onOwned;
            bool _4186_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4187_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1598;
            bool _out1599;
            bool _out1600;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1601;
            DCOMP.COMP.GenExpr(_4183_on, selfIdent, @params, false, out _out1598, out _out1599, out _out1600, out _out1601);
            _4184_onString = _out1598;
            _4185_onOwned = _out1599;
            _4186_onErased = _out1600;
            _4187_recIdents = _out1601;
            if ((_4180_isDatatype) || (_4181_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4184_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4182_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4181_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _4184_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4182_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _4187_recIdents;
          }
        } else if (_source190.is_Ite) {
          DAST._IExpression _4188___mcc_h92 = _source190.dtor_cond;
          DAST._IExpression _4189___mcc_h93 = _source190.dtor_thn;
          DAST._IExpression _4190___mcc_h94 = _source190.dtor_els;
          bool _4191_isDatatype = _4060___mcc_h45;
          bool _4192_isConstant = _4059___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _4193_field = _4058___mcc_h43;
          DAST._IExpression _4194_on = _4057___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _4195_onString;
            bool _4196_onOwned;
            bool _4197_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4198_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1602;
            bool _out1603;
            bool _out1604;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1605;
            DCOMP.COMP.GenExpr(_4194_on, selfIdent, @params, false, out _out1602, out _out1603, out _out1604, out _out1605);
            _4195_onString = _out1602;
            _4196_onOwned = _out1603;
            _4197_onErased = _out1604;
            _4198_recIdents = _out1605;
            if ((_4191_isDatatype) || (_4192_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4195_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4193_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4192_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _4195_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4193_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _4198_recIdents;
          }
        } else if (_source190.is_UnOp) {
          DAST._IUnaryOp _4199___mcc_h98 = _source190.dtor_unOp;
          DAST._IExpression _4200___mcc_h99 = _source190.dtor_expr;
          bool _4201_isDatatype = _4060___mcc_h45;
          bool _4202_isConstant = _4059___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _4203_field = _4058___mcc_h43;
          DAST._IExpression _4204_on = _4057___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _4205_onString;
            bool _4206_onOwned;
            bool _4207_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4208_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1606;
            bool _out1607;
            bool _out1608;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1609;
            DCOMP.COMP.GenExpr(_4204_on, selfIdent, @params, false, out _out1606, out _out1607, out _out1608, out _out1609);
            _4205_onString = _out1606;
            _4206_onOwned = _out1607;
            _4207_onErased = _out1608;
            _4208_recIdents = _out1609;
            if ((_4201_isDatatype) || (_4202_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4205_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4203_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4202_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _4205_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4203_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _4208_recIdents;
          }
        } else if (_source190.is_BinOp) {
          DAST._IBinOp _4209___mcc_h102 = _source190.dtor_op;
          DAST._IExpression _4210___mcc_h103 = _source190.dtor_left;
          DAST._IExpression _4211___mcc_h104 = _source190.dtor_right;
          bool _4212_isDatatype = _4060___mcc_h45;
          bool _4213_isConstant = _4059___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _4214_field = _4058___mcc_h43;
          DAST._IExpression _4215_on = _4057___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _4216_onString;
            bool _4217_onOwned;
            bool _4218_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4219_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1610;
            bool _out1611;
            bool _out1612;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1613;
            DCOMP.COMP.GenExpr(_4215_on, selfIdent, @params, false, out _out1610, out _out1611, out _out1612, out _out1613);
            _4216_onString = _out1610;
            _4217_onOwned = _out1611;
            _4218_onErased = _out1612;
            _4219_recIdents = _out1613;
            if ((_4212_isDatatype) || (_4213_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4216_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4214_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4213_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _4216_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4214_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _4219_recIdents;
          }
        } else if (_source190.is_ArrayLen) {
          DAST._IExpression _4220___mcc_h108 = _source190.dtor_expr;
          BigInteger _4221___mcc_h109 = _source190.dtor_dim;
          bool _4222_isDatatype = _4060___mcc_h45;
          bool _4223_isConstant = _4059___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _4224_field = _4058___mcc_h43;
          DAST._IExpression _4225_on = _4057___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _4226_onString;
            bool _4227_onOwned;
            bool _4228_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4229_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1614;
            bool _out1615;
            bool _out1616;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1617;
            DCOMP.COMP.GenExpr(_4225_on, selfIdent, @params, false, out _out1614, out _out1615, out _out1616, out _out1617);
            _4226_onString = _out1614;
            _4227_onOwned = _out1615;
            _4228_onErased = _out1616;
            _4229_recIdents = _out1617;
            if ((_4222_isDatatype) || (_4223_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4226_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4224_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4223_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _4226_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4224_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _4229_recIdents;
          }
        } else if (_source190.is_Select) {
          DAST._IExpression _4230___mcc_h112 = _source190.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _4231___mcc_h113 = _source190.dtor_field;
          bool _4232___mcc_h114 = _source190.dtor_isConstant;
          bool _4233___mcc_h115 = _source190.dtor_onDatatype;
          bool _4234_isDatatype = _4060___mcc_h45;
          bool _4235_isConstant = _4059___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _4236_field = _4058___mcc_h43;
          DAST._IExpression _4237_on = _4057___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _4238_onString;
            bool _4239_onOwned;
            bool _4240_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4241_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1618;
            bool _out1619;
            bool _out1620;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1621;
            DCOMP.COMP.GenExpr(_4237_on, selfIdent, @params, false, out _out1618, out _out1619, out _out1620, out _out1621);
            _4238_onString = _out1618;
            _4239_onOwned = _out1619;
            _4240_onErased = _out1620;
            _4241_recIdents = _out1621;
            if ((_4234_isDatatype) || (_4235_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4238_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4236_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4235_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _4238_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4236_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _4241_recIdents;
          }
        } else if (_source190.is_SelectFn) {
          DAST._IExpression _4242___mcc_h120 = _source190.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _4243___mcc_h121 = _source190.dtor_field;
          bool _4244___mcc_h122 = _source190.dtor_onDatatype;
          bool _4245___mcc_h123 = _source190.dtor_isStatic;
          BigInteger _4246___mcc_h124 = _source190.dtor_arity;
          bool _4247_isDatatype = _4060___mcc_h45;
          bool _4248_isConstant = _4059___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _4249_field = _4058___mcc_h43;
          DAST._IExpression _4250_on = _4057___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _4251_onString;
            bool _4252_onOwned;
            bool _4253_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4254_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1622;
            bool _out1623;
            bool _out1624;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1625;
            DCOMP.COMP.GenExpr(_4250_on, selfIdent, @params, false, out _out1622, out _out1623, out _out1624, out _out1625);
            _4251_onString = _out1622;
            _4252_onOwned = _out1623;
            _4253_onErased = _out1624;
            _4254_recIdents = _out1625;
            if ((_4247_isDatatype) || (_4248_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4251_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4249_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4248_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _4251_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4249_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _4254_recIdents;
          }
        } else if (_source190.is_Index) {
          DAST._IExpression _4255___mcc_h130 = _source190.dtor_expr;
          DAST._ICollKind _4256___mcc_h131 = _source190.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _4257___mcc_h132 = _source190.dtor_indices;
          bool _4258_isDatatype = _4060___mcc_h45;
          bool _4259_isConstant = _4059___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _4260_field = _4058___mcc_h43;
          DAST._IExpression _4261_on = _4057___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _4262_onString;
            bool _4263_onOwned;
            bool _4264_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4265_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1626;
            bool _out1627;
            bool _out1628;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1629;
            DCOMP.COMP.GenExpr(_4261_on, selfIdent, @params, false, out _out1626, out _out1627, out _out1628, out _out1629);
            _4262_onString = _out1626;
            _4263_onOwned = _out1627;
            _4264_onErased = _out1628;
            _4265_recIdents = _out1629;
            if ((_4258_isDatatype) || (_4259_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4262_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4260_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4259_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _4262_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4260_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _4265_recIdents;
          }
        } else if (_source190.is_IndexRange) {
          DAST._IExpression _4266___mcc_h136 = _source190.dtor_expr;
          bool _4267___mcc_h137 = _source190.dtor_isArray;
          DAST._IOptional<DAST._IExpression> _4268___mcc_h138 = _source190.dtor_low;
          DAST._IOptional<DAST._IExpression> _4269___mcc_h139 = _source190.dtor_high;
          bool _4270_isDatatype = _4060___mcc_h45;
          bool _4271_isConstant = _4059___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _4272_field = _4058___mcc_h43;
          DAST._IExpression _4273_on = _4057___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _4274_onString;
            bool _4275_onOwned;
            bool _4276_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4277_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1630;
            bool _out1631;
            bool _out1632;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1633;
            DCOMP.COMP.GenExpr(_4273_on, selfIdent, @params, false, out _out1630, out _out1631, out _out1632, out _out1633);
            _4274_onString = _out1630;
            _4275_onOwned = _out1631;
            _4276_onErased = _out1632;
            _4277_recIdents = _out1633;
            if ((_4270_isDatatype) || (_4271_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4274_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4272_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4271_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _4274_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4272_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _4277_recIdents;
          }
        } else if (_source190.is_TupleSelect) {
          DAST._IExpression _4278___mcc_h144 = _source190.dtor_expr;
          BigInteger _4279___mcc_h145 = _source190.dtor_index;
          bool _4280_isDatatype = _4060___mcc_h45;
          bool _4281_isConstant = _4059___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _4282_field = _4058___mcc_h43;
          DAST._IExpression _4283_on = _4057___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _4284_onString;
            bool _4285_onOwned;
            bool _4286_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4287_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1634;
            bool _out1635;
            bool _out1636;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1637;
            DCOMP.COMP.GenExpr(_4283_on, selfIdent, @params, false, out _out1634, out _out1635, out _out1636, out _out1637);
            _4284_onString = _out1634;
            _4285_onOwned = _out1635;
            _4286_onErased = _out1636;
            _4287_recIdents = _out1637;
            if ((_4280_isDatatype) || (_4281_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4284_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4282_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4281_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _4284_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4282_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _4287_recIdents;
          }
        } else if (_source190.is_Call) {
          DAST._IExpression _4288___mcc_h148 = _source190.dtor_on;
          Dafny.ISequence<Dafny.Rune> _4289___mcc_h149 = _source190.dtor_name;
          Dafny.ISequence<DAST._IType> _4290___mcc_h150 = _source190.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _4291___mcc_h151 = _source190.dtor_args;
          bool _4292_isDatatype = _4060___mcc_h45;
          bool _4293_isConstant = _4059___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _4294_field = _4058___mcc_h43;
          DAST._IExpression _4295_on = _4057___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _4296_onString;
            bool _4297_onOwned;
            bool _4298_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4299_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1638;
            bool _out1639;
            bool _out1640;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1641;
            DCOMP.COMP.GenExpr(_4295_on, selfIdent, @params, false, out _out1638, out _out1639, out _out1640, out _out1641);
            _4296_onString = _out1638;
            _4297_onOwned = _out1639;
            _4298_onErased = _out1640;
            _4299_recIdents = _out1641;
            if ((_4292_isDatatype) || (_4293_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4296_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4294_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4293_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _4296_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4294_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _4299_recIdents;
          }
        } else if (_source190.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _4300___mcc_h156 = _source190.dtor_params;
          DAST._IType _4301___mcc_h157 = _source190.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _4302___mcc_h158 = _source190.dtor_body;
          bool _4303_isDatatype = _4060___mcc_h45;
          bool _4304_isConstant = _4059___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _4305_field = _4058___mcc_h43;
          DAST._IExpression _4306_on = _4057___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _4307_onString;
            bool _4308_onOwned;
            bool _4309_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4310_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1642;
            bool _out1643;
            bool _out1644;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1645;
            DCOMP.COMP.GenExpr(_4306_on, selfIdent, @params, false, out _out1642, out _out1643, out _out1644, out _out1645);
            _4307_onString = _out1642;
            _4308_onOwned = _out1643;
            _4309_onErased = _out1644;
            _4310_recIdents = _out1645;
            if ((_4303_isDatatype) || (_4304_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4307_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4305_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4304_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _4307_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4305_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _4310_recIdents;
          }
        } else if (_source190.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _4311___mcc_h162 = _source190.dtor_values;
          DAST._IType _4312___mcc_h163 = _source190.dtor_retType;
          DAST._IExpression _4313___mcc_h164 = _source190.dtor_expr;
          bool _4314_isDatatype = _4060___mcc_h45;
          bool _4315_isConstant = _4059___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _4316_field = _4058___mcc_h43;
          DAST._IExpression _4317_on = _4057___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _4318_onString;
            bool _4319_onOwned;
            bool _4320_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4321_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1646;
            bool _out1647;
            bool _out1648;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1649;
            DCOMP.COMP.GenExpr(_4317_on, selfIdent, @params, false, out _out1646, out _out1647, out _out1648, out _out1649);
            _4318_onString = _out1646;
            _4319_onOwned = _out1647;
            _4320_onErased = _out1648;
            _4321_recIdents = _out1649;
            if ((_4314_isDatatype) || (_4315_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4318_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4316_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4315_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _4318_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4316_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _4321_recIdents;
          }
        } else if (_source190.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _4322___mcc_h168 = _source190.dtor_name;
          DAST._IType _4323___mcc_h169 = _source190.dtor_typ;
          DAST._IExpression _4324___mcc_h170 = _source190.dtor_value;
          DAST._IExpression _4325___mcc_h171 = _source190.dtor_iifeBody;
          bool _4326_isDatatype = _4060___mcc_h45;
          bool _4327_isConstant = _4059___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _4328_field = _4058___mcc_h43;
          DAST._IExpression _4329_on = _4057___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _4330_onString;
            bool _4331_onOwned;
            bool _4332_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4333_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1650;
            bool _out1651;
            bool _out1652;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1653;
            DCOMP.COMP.GenExpr(_4329_on, selfIdent, @params, false, out _out1650, out _out1651, out _out1652, out _out1653);
            _4330_onString = _out1650;
            _4331_onOwned = _out1651;
            _4332_onErased = _out1652;
            _4333_recIdents = _out1653;
            if ((_4326_isDatatype) || (_4327_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4330_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4328_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4327_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _4330_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4328_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _4333_recIdents;
          }
        } else if (_source190.is_Apply) {
          DAST._IExpression _4334___mcc_h176 = _source190.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _4335___mcc_h177 = _source190.dtor_args;
          bool _4336_isDatatype = _4060___mcc_h45;
          bool _4337_isConstant = _4059___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _4338_field = _4058___mcc_h43;
          DAST._IExpression _4339_on = _4057___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _4340_onString;
            bool _4341_onOwned;
            bool _4342_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4343_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1654;
            bool _out1655;
            bool _out1656;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1657;
            DCOMP.COMP.GenExpr(_4339_on, selfIdent, @params, false, out _out1654, out _out1655, out _out1656, out _out1657);
            _4340_onString = _out1654;
            _4341_onOwned = _out1655;
            _4342_onErased = _out1656;
            _4343_recIdents = _out1657;
            if ((_4336_isDatatype) || (_4337_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4340_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4338_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4337_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _4340_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4338_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _4343_recIdents;
          }
        } else if (_source190.is_TypeTest) {
          DAST._IExpression _4344___mcc_h180 = _source190.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4345___mcc_h181 = _source190.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _4346___mcc_h182 = _source190.dtor_variant;
          bool _4347_isDatatype = _4060___mcc_h45;
          bool _4348_isConstant = _4059___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _4349_field = _4058___mcc_h43;
          DAST._IExpression _4350_on = _4057___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _4351_onString;
            bool _4352_onOwned;
            bool _4353_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4354_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1658;
            bool _out1659;
            bool _out1660;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1661;
            DCOMP.COMP.GenExpr(_4350_on, selfIdent, @params, false, out _out1658, out _out1659, out _out1660, out _out1661);
            _4351_onString = _out1658;
            _4352_onOwned = _out1659;
            _4353_onErased = _out1660;
            _4354_recIdents = _out1661;
            if ((_4347_isDatatype) || (_4348_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4351_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4349_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4348_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _4351_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4349_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _4354_recIdents;
          }
        } else if (_source190.is_InitializationValue) {
          DAST._IType _4355___mcc_h186 = _source190.dtor_typ;
          bool _4356_isDatatype = _4060___mcc_h45;
          bool _4357_isConstant = _4059___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _4358_field = _4058___mcc_h43;
          DAST._IExpression _4359_on = _4057___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _4360_onString;
            bool _4361_onOwned;
            bool _4362_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4363_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1662;
            bool _out1663;
            bool _out1664;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1665;
            DCOMP.COMP.GenExpr(_4359_on, selfIdent, @params, false, out _out1662, out _out1663, out _out1664, out _out1665);
            _4360_onString = _out1662;
            _4361_onOwned = _out1663;
            _4362_onErased = _out1664;
            _4363_recIdents = _out1665;
            if ((_4356_isDatatype) || (_4357_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4360_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4358_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4357_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _4360_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4358_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _4363_recIdents;
          }
        } else if (_source190.is_BoolBoundedPool) {
          bool _4364_isDatatype = _4060___mcc_h45;
          bool _4365_isConstant = _4059___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _4366_field = _4058___mcc_h43;
          DAST._IExpression _4367_on = _4057___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _4368_onString;
            bool _4369_onOwned;
            bool _4370_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4371_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1666;
            bool _out1667;
            bool _out1668;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1669;
            DCOMP.COMP.GenExpr(_4367_on, selfIdent, @params, false, out _out1666, out _out1667, out _out1668, out _out1669);
            _4368_onString = _out1666;
            _4369_onOwned = _out1667;
            _4370_onErased = _out1668;
            _4371_recIdents = _out1669;
            if ((_4364_isDatatype) || (_4365_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4368_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4366_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4365_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _4368_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4366_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _4371_recIdents;
          }
        } else if (_source190.is_SetBoundedPool) {
          DAST._IExpression _4372___mcc_h188 = _source190.dtor_of;
          bool _4373_isDatatype = _4060___mcc_h45;
          bool _4374_isConstant = _4059___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _4375_field = _4058___mcc_h43;
          DAST._IExpression _4376_on = _4057___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _4377_onString;
            bool _4378_onOwned;
            bool _4379_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4380_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1670;
            bool _out1671;
            bool _out1672;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1673;
            DCOMP.COMP.GenExpr(_4376_on, selfIdent, @params, false, out _out1670, out _out1671, out _out1672, out _out1673);
            _4377_onString = _out1670;
            _4378_onOwned = _out1671;
            _4379_onErased = _out1672;
            _4380_recIdents = _out1673;
            if ((_4373_isDatatype) || (_4374_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4377_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4375_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4374_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _4377_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4375_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _4380_recIdents;
          }
        } else if (_source190.is_SeqBoundedPool) {
          DAST._IExpression _4381___mcc_h190 = _source190.dtor_of;
          bool _4382___mcc_h191 = _source190.dtor_includeDuplicates;
          bool _4383_isDatatype = _4060___mcc_h45;
          bool _4384_isConstant = _4059___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _4385_field = _4058___mcc_h43;
          DAST._IExpression _4386_on = _4057___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _4387_onString;
            bool _4388_onOwned;
            bool _4389_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4390_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1674;
            bool _out1675;
            bool _out1676;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1677;
            DCOMP.COMP.GenExpr(_4386_on, selfIdent, @params, false, out _out1674, out _out1675, out _out1676, out _out1677);
            _4387_onString = _out1674;
            _4388_onOwned = _out1675;
            _4389_onErased = _out1676;
            _4390_recIdents = _out1677;
            if ((_4383_isDatatype) || (_4384_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4387_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4385_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4384_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _4387_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4385_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _4390_recIdents;
          }
        } else {
          DAST._IExpression _4391___mcc_h194 = _source190.dtor_lo;
          DAST._IExpression _4392___mcc_h195 = _source190.dtor_hi;
          bool _4393_isDatatype = _4060___mcc_h45;
          bool _4394_isConstant = _4059___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _4395_field = _4058___mcc_h43;
          DAST._IExpression _4396_on = _4057___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _4397_onString;
            bool _4398_onOwned;
            bool _4399_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4400_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1678;
            bool _out1679;
            bool _out1680;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1681;
            DCOMP.COMP.GenExpr(_4396_on, selfIdent, @params, false, out _out1678, out _out1679, out _out1680, out _out1681);
            _4397_onString = _out1678;
            _4398_onOwned = _out1679;
            _4399_onErased = _out1680;
            _4400_recIdents = _out1681;
            if ((_4393_isDatatype) || (_4394_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4397_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4395_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4394_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _4397_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4395_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _4400_recIdents;
          }
        }
      } else if (_source130.is_SelectFn) {
        DAST._IExpression _4401___mcc_h198 = _source130.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _4402___mcc_h199 = _source130.dtor_field;
        bool _4403___mcc_h200 = _source130.dtor_onDatatype;
        bool _4404___mcc_h201 = _source130.dtor_isStatic;
        BigInteger _4405___mcc_h202 = _source130.dtor_arity;
        BigInteger _4406_arity = _4405___mcc_h202;
        bool _4407_isStatic = _4404___mcc_h201;
        bool _4408_isDatatype = _4403___mcc_h200;
        Dafny.ISequence<Dafny.Rune> _4409_field = _4402___mcc_h199;
        DAST._IExpression _4410_on = _4401___mcc_h198;
        {
          Dafny.ISequence<Dafny.Rune> _4411_onString;
          bool _4412_onOwned;
          bool _4413___v82;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4414_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1682;
          bool _out1683;
          bool _out1684;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1685;
          DCOMP.COMP.GenExpr(_4410_on, selfIdent, @params, false, out _out1682, out _out1683, out _out1684, out _out1685);
          _4411_onString = _out1682;
          _4412_onOwned = _out1683;
          _4413___v82 = _out1684;
          _4414_recIdents = _out1685;
          if (_4407_isStatic) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4411_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _4409_field);
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _4411_onString), ((_4412_onOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _4415_args;
            _4415_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _4416_i;
            _4416_i = BigInteger.Zero;
            while ((_4416_i) < (_4406_arity)) {
              if ((_4416_i).Sign == 1) {
                _4415_args = Dafny.Sequence<Dafny.Rune>.Concat(_4415_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _4415_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4415_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), DCOMP.__default.natToString(_4416_i));
              _4416_i = (_4416_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _4415_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), _4409_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _4415_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _4417_typeShape;
          _4417_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _4418_i;
          _4418_i = BigInteger.Zero;
          while ((_4418_i) < (_4406_arity)) {
            if ((_4418_i).Sign == 1) {
              _4417_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_4417_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _4417_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_4417_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _4418_i = (_4418_i) + (BigInteger.One);
          }
          _4417_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_4417_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper(::std::rc::Rc::new("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _4417_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
          readIdents = _4414_recIdents;
        }
      } else if (_source130.is_Index) {
        DAST._IExpression _4419___mcc_h203 = _source130.dtor_expr;
        DAST._ICollKind _4420___mcc_h204 = _source130.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _4421___mcc_h205 = _source130.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _4422_indices = _4421___mcc_h205;
        DAST._ICollKind _4423_collKind = _4420___mcc_h204;
        DAST._IExpression _4424_on = _4419___mcc_h203;
        {
          Dafny.ISequence<Dafny.Rune> _4425_onString;
          bool _4426_onOwned;
          bool _4427_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4428_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1686;
          bool _out1687;
          bool _out1688;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1689;
          DCOMP.COMP.GenExpr(_4424_on, selfIdent, @params, false, out _out1686, out _out1687, out _out1688, out _out1689);
          _4425_onString = _out1686;
          _4426_onOwned = _out1687;
          _4427_onErased = _out1688;
          _4428_recIdents = _out1689;
          readIdents = _4428_recIdents;
          s = _4425_onString;
          BigInteger _4429_i;
          _4429_i = BigInteger.Zero;
          while ((_4429_i) < (new BigInteger((_4422_indices).Count))) {
            if (object.Equals(_4423_collKind, DAST.CollKind.create_Array())) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
            }
            if (object.Equals(_4423_collKind, DAST.CollKind.create_Map())) {
              Dafny.ISequence<Dafny.Rune> _4430_idx;
              bool _4431_idxOwned;
              bool _4432_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4433_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1690;
              bool _out1691;
              bool _out1692;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1693;
              DCOMP.COMP.GenExpr((_4422_indices).Select(_4429_i), selfIdent, @params, false, out _out1690, out _out1691, out _out1692, out _out1693);
              _4430_idx = _out1690;
              _4431_idxOwned = _out1691;
              _4432_idxErased = _out1692;
              _4433_recIdentsIdx = _out1693;
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[")), ((_4431_idxOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), _4430_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4433_recIdentsIdx);
            } else {
              Dafny.ISequence<Dafny.Rune> _4434_idx;
              bool _4435___v83;
              bool _4436_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4437_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1694;
              bool _out1695;
              bool _out1696;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1697;
              DCOMP.COMP.GenExpr((_4422_indices).Select(_4429_i), selfIdent, @params, true, out _out1694, out _out1695, out _out1696, out _out1697);
              _4434_idx = _out1694;
              _4435___v83 = _out1695;
              _4436_idxErased = _out1696;
              _4437_recIdentsIdx = _out1697;
              if (!(_4436_idxErased)) {
                _4434_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _4434_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[<usize as ::dafny_runtime::NumCast>::from(")), _4434_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4437_recIdentsIdx);
            }
            _4429_i = (_4429_i) + (BigInteger.One);
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = false;
          }
          isErased = _4427_onErased;
        }
      } else if (_source130.is_IndexRange) {
        DAST._IExpression _4438___mcc_h206 = _source130.dtor_expr;
        bool _4439___mcc_h207 = _source130.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _4440___mcc_h208 = _source130.dtor_low;
        DAST._IOptional<DAST._IExpression> _4441___mcc_h209 = _source130.dtor_high;
        DAST._IOptional<DAST._IExpression> _4442_high = _4441___mcc_h209;
        DAST._IOptional<DAST._IExpression> _4443_low = _4440___mcc_h208;
        bool _4444_isArray = _4439___mcc_h207;
        DAST._IExpression _4445_on = _4438___mcc_h206;
        {
          Dafny.ISequence<Dafny.Rune> _4446_onString;
          bool _4447_onOwned;
          bool _4448_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4449_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1698;
          bool _out1699;
          bool _out1700;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1701;
          DCOMP.COMP.GenExpr(_4445_on, selfIdent, @params, false, out _out1698, out _out1699, out _out1700, out _out1701);
          _4446_onString = _out1698;
          _4447_onOwned = _out1699;
          _4448_onErased = _out1700;
          _4449_recIdents = _out1701;
          readIdents = _4449_recIdents;
          s = _4446_onString;
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _4450_lowString;
          _4450_lowString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None();
          DAST._IOptional<DAST._IExpression> _source191 = _4443_low;
          if (_source191.is_Some) {
            DAST._IExpression _4451___mcc_h1195 = _source191.dtor_Some_a0;
            DAST._IExpression _4452_l = _4451___mcc_h1195;
            {
              Dafny.ISequence<Dafny.Rune> _4453_lString;
              bool _4454___v84;
              bool _4455_lErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4456_recIdentsL;
              Dafny.ISequence<Dafny.Rune> _out1702;
              bool _out1703;
              bool _out1704;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1705;
              DCOMP.COMP.GenExpr(_4452_l, selfIdent, @params, true, out _out1702, out _out1703, out _out1704, out _out1705);
              _4453_lString = _out1702;
              _4454___v84 = _out1703;
              _4455_lErased = _out1704;
              _4456_recIdentsL = _out1705;
              if (!(_4455_lErased)) {
                _4453_lString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _4453_lString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _4450_lowString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(_4453_lString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4456_recIdentsL);
            }
          } else {
          }
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _4457_highString;
          _4457_highString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None();
          DAST._IOptional<DAST._IExpression> _source192 = _4442_high;
          if (_source192.is_Some) {
            DAST._IExpression _4458___mcc_h1196 = _source192.dtor_Some_a0;
            DAST._IExpression _4459_h = _4458___mcc_h1196;
            {
              Dafny.ISequence<Dafny.Rune> _4460_hString;
              bool _4461___v85;
              bool _4462_hErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4463_recIdentsH;
              Dafny.ISequence<Dafny.Rune> _out1706;
              bool _out1707;
              bool _out1708;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1709;
              DCOMP.COMP.GenExpr(_4459_h, selfIdent, @params, true, out _out1706, out _out1707, out _out1708, out _out1709);
              _4460_hString = _out1706;
              _4461___v85 = _out1707;
              _4462_hErased = _out1708;
              _4463_recIdentsH = _out1709;
              if (!(_4462_hErased)) {
                _4460_hString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _4460_hString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _4457_highString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(_4460_hString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4463_recIdentsH);
            }
          } else {
          }
          if (_4444_isArray) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[")), ((System.Func<DAST._IOptional<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source193) => {
            if (_source193.is_Some) {
              Dafny.ISequence<Dafny.Rune> _4464___mcc_h1197 = _source193.dtor_Some_a0;
              Dafny.ISequence<Dafny.Rune> _4465_l = _4464___mcc_h1197;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _4465_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            }
          }))(_4450_lowString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("..")), ((System.Func<DAST._IOptional<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source194) => {
            if (_source194.is_Some) {
              Dafny.ISequence<Dafny.Rune> _4466___mcc_h1198 = _source194.dtor_Some_a0;
              Dafny.ISequence<Dafny.Rune> _4467_h = _4466___mcc_h1198;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _4467_h), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            }
          }))(_4457_highString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
          isErased = _4448_onErased;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".to_vec())"));
          isOwned = true;
        }
      } else if (_source130.is_TupleSelect) {
        DAST._IExpression _4468___mcc_h210 = _source130.dtor_expr;
        BigInteger _4469___mcc_h211 = _source130.dtor_index;
        BigInteger _4470_idx = _4469___mcc_h211;
        DAST._IExpression _4471_on = _4468___mcc_h210;
        {
          Dafny.ISequence<Dafny.Rune> _4472_onString;
          bool _4473___v86;
          bool _4474_tupErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4475_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1710;
          bool _out1711;
          bool _out1712;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1713;
          DCOMP.COMP.GenExpr(_4471_on, selfIdent, @params, false, out _out1710, out _out1711, out _out1712, out _out1713);
          _4472_onString = _out1710;
          _4473___v86 = _out1711;
          _4474_tupErased = _out1712;
          _4475_recIdents = _out1713;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4472_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.natToString(_4470_idx));
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
            isOwned = false;
          }
          isErased = _4474_tupErased;
          readIdents = _4475_recIdents;
        }
      } else if (_source130.is_Call) {
        DAST._IExpression _4476___mcc_h212 = _source130.dtor_on;
        Dafny.ISequence<Dafny.Rune> _4477___mcc_h213 = _source130.dtor_name;
        Dafny.ISequence<DAST._IType> _4478___mcc_h214 = _source130.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _4479___mcc_h215 = _source130.dtor_args;
        Dafny.ISequence<DAST._IExpression> _4480_args = _4479___mcc_h215;
        Dafny.ISequence<DAST._IType> _4481_typeArgs = _4478___mcc_h214;
        Dafny.ISequence<Dafny.Rune> _4482_name = _4477___mcc_h213;
        DAST._IExpression _4483_on = _4476___mcc_h212;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _4484_typeArgString;
          _4484_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_4481_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _4485_typeI;
            _4485_typeI = BigInteger.Zero;
            _4484_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_4485_typeI) < (new BigInteger((_4481_typeArgs).Count))) {
              if ((_4485_typeI).Sign == 1) {
                _4484_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_4484_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _4486_typeString;
              Dafny.ISequence<Dafny.Rune> _out1714;
              _out1714 = DCOMP.COMP.GenType((_4481_typeArgs).Select(_4485_typeI), false, false);
              _4486_typeString = _out1714;
              _4484_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_4484_typeArgString, _4486_typeString);
              _4485_typeI = (_4485_typeI) + (BigInteger.One);
            }
            _4484_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_4484_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _4487_argString;
          _4487_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _4488_i;
          _4488_i = BigInteger.Zero;
          while ((_4488_i) < (new BigInteger((_4480_args).Count))) {
            if ((_4488_i).Sign == 1) {
              _4487_argString = Dafny.Sequence<Dafny.Rune>.Concat(_4487_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _4489_argExpr;
            bool _4490_isOwned;
            bool _4491_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4492_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1715;
            bool _out1716;
            bool _out1717;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1718;
            DCOMP.COMP.GenExpr((_4480_args).Select(_4488_i), selfIdent, @params, false, out _out1715, out _out1716, out _out1717, out _out1718);
            _4489_argExpr = _out1715;
            _4490_isOwned = _out1716;
            _4491_argErased = _out1717;
            _4492_argIdents = _out1718;
            if (_4490_isOwned) {
              _4489_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _4489_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (!(_4491_argErased)) {
              _4489_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase("), _4489_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _4489_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::unerase("), _4489_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _4487_argString = Dafny.Sequence<Dafny.Rune>.Concat(_4487_argString, _4489_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4492_argIdents);
            _4488_i = (_4488_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _4493_enclosingString;
          bool _4494___v87;
          bool _4495___v88;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4496_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1719;
          bool _out1720;
          bool _out1721;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1722;
          DCOMP.COMP.GenExpr(_4483_on, selfIdent, @params, false, out _out1719, out _out1720, out _out1721, out _out1722);
          _4493_enclosingString = _out1719;
          _4494___v87 = _out1720;
          _4495___v88 = _out1721;
          _4496_recIdents = _out1722;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4496_recIdents);
          DAST._IExpression _source195 = _4483_on;
          if (_source195.is_Literal) {
            DAST._ILiteral _4497___mcc_h1199 = _source195.dtor_Literal_a0;
            {
              _4493_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4493_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4482_name)));
            }
          } else if (_source195.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _4498___mcc_h1201 = _source195.dtor_Ident_a0;
            {
              _4493_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4493_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4482_name)));
            }
          } else if (_source195.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4499___mcc_h1203 = _source195.dtor_Companion_a0;
            {
              _4493_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4493_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_4482_name)));
            }
          } else if (_source195.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _4500___mcc_h1205 = _source195.dtor_Tuple_a0;
            {
              _4493_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4493_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4482_name)));
            }
          } else if (_source195.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4501___mcc_h1207 = _source195.dtor_path;
            Dafny.ISequence<DAST._IType> _4502___mcc_h1208 = _source195.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _4503___mcc_h1209 = _source195.dtor_args;
            {
              _4493_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4493_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4482_name)));
            }
          } else if (_source195.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _4504___mcc_h1213 = _source195.dtor_dims;
            DAST._IType _4505___mcc_h1214 = _source195.dtor_typ;
            {
              _4493_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4493_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4482_name)));
            }
          } else if (_source195.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4506___mcc_h1217 = _source195.dtor_path;
            Dafny.ISequence<DAST._IType> _4507___mcc_h1218 = _source195.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _4508___mcc_h1219 = _source195.dtor_variant;
            bool _4509___mcc_h1220 = _source195.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _4510___mcc_h1221 = _source195.dtor_contents;
            {
              _4493_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4493_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4482_name)));
            }
          } else if (_source195.is_Convert) {
            DAST._IExpression _4511___mcc_h1227 = _source195.dtor_value;
            DAST._IType _4512___mcc_h1228 = _source195.dtor_from;
            DAST._IType _4513___mcc_h1229 = _source195.dtor_typ;
            {
              _4493_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4493_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4482_name)));
            }
          } else if (_source195.is_SeqConstruct) {
            DAST._IExpression _4514___mcc_h1233 = _source195.dtor_length;
            DAST._IExpression _4515___mcc_h1234 = _source195.dtor_elem;
            {
              _4493_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4493_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4482_name)));
            }
          } else if (_source195.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _4516___mcc_h1237 = _source195.dtor_elements;
            DAST._IType _4517___mcc_h1238 = _source195.dtor_typ;
            {
              _4493_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4493_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4482_name)));
            }
          } else if (_source195.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _4518___mcc_h1241 = _source195.dtor_elements;
            {
              _4493_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4493_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4482_name)));
            }
          } else if (_source195.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _4519___mcc_h1243 = _source195.dtor_mapElems;
            {
              _4493_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4493_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4482_name)));
            }
          } else if (_source195.is_This) {
            {
              _4493_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4493_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4482_name)));
            }
          } else if (_source195.is_Ite) {
            DAST._IExpression _4520___mcc_h1245 = _source195.dtor_cond;
            DAST._IExpression _4521___mcc_h1246 = _source195.dtor_thn;
            DAST._IExpression _4522___mcc_h1247 = _source195.dtor_els;
            {
              _4493_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4493_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4482_name)));
            }
          } else if (_source195.is_UnOp) {
            DAST._IUnaryOp _4523___mcc_h1251 = _source195.dtor_unOp;
            DAST._IExpression _4524___mcc_h1252 = _source195.dtor_expr;
            {
              _4493_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4493_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4482_name)));
            }
          } else if (_source195.is_BinOp) {
            DAST._IBinOp _4525___mcc_h1255 = _source195.dtor_op;
            DAST._IExpression _4526___mcc_h1256 = _source195.dtor_left;
            DAST._IExpression _4527___mcc_h1257 = _source195.dtor_right;
            {
              _4493_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4493_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4482_name)));
            }
          } else if (_source195.is_ArrayLen) {
            DAST._IExpression _4528___mcc_h1261 = _source195.dtor_expr;
            BigInteger _4529___mcc_h1262 = _source195.dtor_dim;
            {
              _4493_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4493_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4482_name)));
            }
          } else if (_source195.is_Select) {
            DAST._IExpression _4530___mcc_h1265 = _source195.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _4531___mcc_h1266 = _source195.dtor_field;
            bool _4532___mcc_h1267 = _source195.dtor_isConstant;
            bool _4533___mcc_h1268 = _source195.dtor_onDatatype;
            {
              _4493_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4493_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4482_name)));
            }
          } else if (_source195.is_SelectFn) {
            DAST._IExpression _4534___mcc_h1273 = _source195.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _4535___mcc_h1274 = _source195.dtor_field;
            bool _4536___mcc_h1275 = _source195.dtor_onDatatype;
            bool _4537___mcc_h1276 = _source195.dtor_isStatic;
            BigInteger _4538___mcc_h1277 = _source195.dtor_arity;
            {
              _4493_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4493_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4482_name)));
            }
          } else if (_source195.is_Index) {
            DAST._IExpression _4539___mcc_h1283 = _source195.dtor_expr;
            DAST._ICollKind _4540___mcc_h1284 = _source195.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _4541___mcc_h1285 = _source195.dtor_indices;
            {
              _4493_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4493_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4482_name)));
            }
          } else if (_source195.is_IndexRange) {
            DAST._IExpression _4542___mcc_h1289 = _source195.dtor_expr;
            bool _4543___mcc_h1290 = _source195.dtor_isArray;
            DAST._IOptional<DAST._IExpression> _4544___mcc_h1291 = _source195.dtor_low;
            DAST._IOptional<DAST._IExpression> _4545___mcc_h1292 = _source195.dtor_high;
            {
              _4493_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4493_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4482_name)));
            }
          } else if (_source195.is_TupleSelect) {
            DAST._IExpression _4546___mcc_h1297 = _source195.dtor_expr;
            BigInteger _4547___mcc_h1298 = _source195.dtor_index;
            {
              _4493_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4493_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4482_name)));
            }
          } else if (_source195.is_Call) {
            DAST._IExpression _4548___mcc_h1301 = _source195.dtor_on;
            Dafny.ISequence<Dafny.Rune> _4549___mcc_h1302 = _source195.dtor_name;
            Dafny.ISequence<DAST._IType> _4550___mcc_h1303 = _source195.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _4551___mcc_h1304 = _source195.dtor_args;
            {
              _4493_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4493_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4482_name)));
            }
          } else if (_source195.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _4552___mcc_h1309 = _source195.dtor_params;
            DAST._IType _4553___mcc_h1310 = _source195.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _4554___mcc_h1311 = _source195.dtor_body;
            {
              _4493_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4493_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4482_name)));
            }
          } else if (_source195.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _4555___mcc_h1315 = _source195.dtor_values;
            DAST._IType _4556___mcc_h1316 = _source195.dtor_retType;
            DAST._IExpression _4557___mcc_h1317 = _source195.dtor_expr;
            {
              _4493_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4493_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4482_name)));
            }
          } else if (_source195.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _4558___mcc_h1321 = _source195.dtor_name;
            DAST._IType _4559___mcc_h1322 = _source195.dtor_typ;
            DAST._IExpression _4560___mcc_h1323 = _source195.dtor_value;
            DAST._IExpression _4561___mcc_h1324 = _source195.dtor_iifeBody;
            {
              _4493_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4493_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4482_name)));
            }
          } else if (_source195.is_Apply) {
            DAST._IExpression _4562___mcc_h1329 = _source195.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _4563___mcc_h1330 = _source195.dtor_args;
            {
              _4493_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4493_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4482_name)));
            }
          } else if (_source195.is_TypeTest) {
            DAST._IExpression _4564___mcc_h1333 = _source195.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4565___mcc_h1334 = _source195.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _4566___mcc_h1335 = _source195.dtor_variant;
            {
              _4493_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4493_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4482_name)));
            }
          } else if (_source195.is_InitializationValue) {
            DAST._IType _4567___mcc_h1339 = _source195.dtor_typ;
            {
              _4493_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4493_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4482_name)));
            }
          } else if (_source195.is_BoolBoundedPool) {
            {
              _4493_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4493_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4482_name)));
            }
          } else if (_source195.is_SetBoundedPool) {
            DAST._IExpression _4568___mcc_h1341 = _source195.dtor_of;
            {
              _4493_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4493_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4482_name)));
            }
          } else if (_source195.is_SeqBoundedPool) {
            DAST._IExpression _4569___mcc_h1343 = _source195.dtor_of;
            bool _4570___mcc_h1344 = _source195.dtor_includeDuplicates;
            {
              _4493_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4493_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4482_name)));
            }
          } else {
            DAST._IExpression _4571___mcc_h1347 = _source195.dtor_lo;
            DAST._IExpression _4572___mcc_h1348 = _source195.dtor_hi;
            {
              _4493_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4493_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_4482_name)));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4493_enclosingString, _4484_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _4487_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source130.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _4573___mcc_h216 = _source130.dtor_params;
        DAST._IType _4574___mcc_h217 = _source130.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _4575___mcc_h218 = _source130.dtor_body;
        Dafny.ISequence<DAST._IStatement> _4576_body = _4575___mcc_h218;
        DAST._IType _4577_retType = _4574___mcc_h217;
        Dafny.ISequence<DAST._IFormal> _4578_params = _4573___mcc_h216;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4579_paramNames;
          _4579_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _4580_i;
          _4580_i = BigInteger.Zero;
          while ((_4580_i) < (new BigInteger((_4578_params).Count))) {
            _4579_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_4579_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(((_4578_params).Select(_4580_i)).dtor_name));
            _4580_i = (_4580_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _4581_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4582_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1723;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1724;
          DCOMP.COMP.GenStmts(_4576_body, ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())), _4579_paramNames, true, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), out _out1723, out _out1724);
          _4581_recursiveGen = _out1723;
          _4582_recIdents = _out1724;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _4583_allReadCloned;
          _4583_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          while (!(_4582_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _4584_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_3 in (_4582_recIdents).Elements) {
              _4584_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_3;
              if ((_4582_recIdents).Contains(_4584_next)) {
                goto after__ASSIGN_SUCH_THAT_3;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 1933)");
          after__ASSIGN_SUCH_THAT_3:;
            if ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) && ((_4584_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              if (!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) {
                _4583_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(_4583_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let _this = self.clone();\n"));
              }
            } else if (!((_4579_paramNames).Contains(_4584_next))) {
              _4583_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4583_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_4584_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_4584_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_4584_next));
            }
            _4582_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_4582_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_4584_next));
          }
          Dafny.ISequence<Dafny.Rune> _4585_paramsString;
          _4585_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Dafny.ISequence<Dafny.Rune> _4586_paramTypes;
          _4586_paramTypes = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _4580_i = BigInteger.Zero;
          while ((_4580_i) < (new BigInteger((_4578_params).Count))) {
            if ((_4580_i).Sign == 1) {
              _4585_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_4585_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              _4586_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_4586_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _4587_typStr;
            Dafny.ISequence<Dafny.Rune> _out1725;
            _out1725 = DCOMP.COMP.GenType(((_4578_params).Select(_4580_i)).dtor_typ, false, true);
            _4587_typStr = _out1725;
            _4585_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4585_paramsString, ((_4578_params).Select(_4580_i)).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _4587_typStr);
            _4586_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4586_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _4587_typStr);
            _4580_i = (_4580_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _4588_retTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1726;
          _out1726 = DCOMP.COMP.GenType(_4577_retType, false, true);
          _4588_retTypeGen = _out1726;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper::<::std::rc::Rc<dyn ::std::ops::Fn("), _4586_paramTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _4588_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>({\n")), _4583_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(move |")), _4585_paramsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| -> ")), _4588_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _4581_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})})"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source130.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _4589___mcc_h219 = _source130.dtor_values;
        DAST._IType _4590___mcc_h220 = _source130.dtor_retType;
        DAST._IExpression _4591___mcc_h221 = _source130.dtor_expr;
        DAST._IExpression _4592_expr = _4591___mcc_h221;
        DAST._IType _4593_retType = _4590___mcc_h220;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _4594_values = _4589___mcc_h219;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4595_paramNames;
          _4595_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4596_paramNamesSet;
          _4596_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _4597_i;
          _4597_i = BigInteger.Zero;
          while ((_4597_i) < (new BigInteger((_4594_values).Count))) {
            _4595_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_4595_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((_4594_values).Select(_4597_i)).dtor__0).dtor_name));
            _4596_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_4596_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((((_4594_values).Select(_4597_i)).dtor__0).dtor_name));
            _4597_i = (_4597_i) + (BigInteger.One);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          Dafny.ISequence<Dafny.Rune> _4598_paramsString;
          _4598_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _4597_i = BigInteger.Zero;
          while ((_4597_i) < (new BigInteger((_4594_values).Count))) {
            if ((_4597_i).Sign == 1) {
              _4598_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_4598_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _4599_typStr;
            Dafny.ISequence<Dafny.Rune> _out1727;
            _out1727 = DCOMP.COMP.GenType((((_4594_values).Select(_4597_i)).dtor__0).dtor_typ, false, true);
            _4599_typStr = _out1727;
            Dafny.ISequence<Dafny.Rune> _4600_valueGen;
            bool _4601___v91;
            bool _4602_valueErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4603_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1728;
            bool _out1729;
            bool _out1730;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1731;
            DCOMP.COMP.GenExpr(((_4594_values).Select(_4597_i)).dtor__1, selfIdent, @params, true, out _out1728, out _out1729, out _out1730, out _out1731);
            _4600_valueGen = _out1728;
            _4601___v91 = _out1729;
            _4602_valueErased = _out1730;
            _4603_recIdents = _out1731;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent((((_4594_values).Select(_4597_i)).dtor__0).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _4599_typStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4603_recIdents);
            if (_4602_valueErased) {
              _4600_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _4600_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _4600_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            _4597_i = (_4597_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _4604_recGen;
          bool _4605_recOwned;
          bool _4606_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4607_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1732;
          bool _out1733;
          bool _out1734;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1735;
          DCOMP.COMP.GenExpr(_4592_expr, selfIdent, _4595_paramNames, mustOwn, out _out1732, out _out1733, out _out1734, out _out1735);
          _4604_recGen = _out1732;
          _4605_recOwned = _out1733;
          _4606_recErased = _out1734;
          _4607_recIdents = _out1735;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_4607_recIdents, _4596_paramNamesSet);
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _4604_recGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = _4605_recOwned;
          isErased = _4606_recErased;
        }
      } else if (_source130.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _4608___mcc_h222 = _source130.dtor_name;
        DAST._IType _4609___mcc_h223 = _source130.dtor_typ;
        DAST._IExpression _4610___mcc_h224 = _source130.dtor_value;
        DAST._IExpression _4611___mcc_h225 = _source130.dtor_iifeBody;
        DAST._IExpression _4612_iifeBody = _4611___mcc_h225;
        DAST._IExpression _4613_value = _4610___mcc_h224;
        DAST._IType _4614_tpe = _4609___mcc_h223;
        Dafny.ISequence<Dafny.Rune> _4615_name = _4608___mcc_h222;
        {
          Dafny.ISequence<Dafny.Rune> _4616_valueGen;
          bool _4617___v92;
          bool _4618_valueErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4619_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1736;
          bool _out1737;
          bool _out1738;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1739;
          DCOMP.COMP.GenExpr(_4613_value, selfIdent, @params, true, out _out1736, out _out1737, out _out1738, out _out1739);
          _4616_valueGen = _out1736;
          _4617___v92 = _out1737;
          _4618_valueErased = _out1738;
          _4619_recIdents = _out1739;
          if (_4618_valueErased) {
            _4616_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _4616_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _4619_recIdents;
          Dafny.ISequence<Dafny.Rune> _4620_valueTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1740;
          _out1740 = DCOMP.COMP.GenType(_4614_tpe, false, true);
          _4620_valueTypeGen = _out1740;
          Dafny.ISequence<Dafny.Rune> _4621_bodyGen;
          bool _4622___v93;
          bool _4623_bodyErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4624_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out1741;
          bool _out1742;
          bool _out1743;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1744;
          DCOMP.COMP.GenExpr(_4612_iifeBody, selfIdent, @params, true, out _out1741, out _out1742, out _out1743, out _out1744);
          _4621_bodyGen = _out1741;
          _4622___v93 = _out1742;
          _4623_bodyErased = _out1743;
          _4624_bodyIdents = _out1744;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_4624_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_4615_name))));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet "), DCOMP.__default.escapeIdent((_4615_name))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _4620_valueTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _4616_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _4621_bodyGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = true;
          isErased = _4623_bodyErased;
        }
      } else if (_source130.is_Apply) {
        DAST._IExpression _4625___mcc_h226 = _source130.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _4626___mcc_h227 = _source130.dtor_args;
        Dafny.ISequence<DAST._IExpression> _4627_args = _4626___mcc_h227;
        DAST._IExpression _4628_func = _4625___mcc_h226;
        {
          Dafny.ISequence<Dafny.Rune> _4629_funcString;
          bool _4630___v94;
          bool _4631_funcErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4632_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1745;
          bool _out1746;
          bool _out1747;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1748;
          DCOMP.COMP.GenExpr(_4628_func, selfIdent, @params, false, out _out1745, out _out1746, out _out1747, out _out1748);
          _4629_funcString = _out1745;
          _4630___v94 = _out1746;
          _4631_funcErased = _out1747;
          _4632_recIdents = _out1748;
          readIdents = _4632_recIdents;
          Dafny.ISequence<Dafny.Rune> _4633_argString;
          _4633_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _4634_i;
          _4634_i = BigInteger.Zero;
          while ((_4634_i) < (new BigInteger((_4627_args).Count))) {
            if ((_4634_i).Sign == 1) {
              _4633_argString = Dafny.Sequence<Dafny.Rune>.Concat(_4633_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _4635_argExpr;
            bool _4636_isOwned;
            bool _4637_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4638_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1749;
            bool _out1750;
            bool _out1751;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1752;
            DCOMP.COMP.GenExpr((_4627_args).Select(_4634_i), selfIdent, @params, false, out _out1749, out _out1750, out _out1751, out _out1752);
            _4635_argExpr = _out1749;
            _4636_isOwned = _out1750;
            _4637_argErased = _out1751;
            _4638_argIdents = _out1752;
            if (_4636_isOwned) {
              _4635_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4635_argExpr);
            }
            _4633_argString = Dafny.Sequence<Dafny.Rune>.Concat(_4633_argString, _4635_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4638_argIdents);
            _4634_i = (_4634_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _4629_funcString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _4633_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source130.is_TypeTest) {
        DAST._IExpression _4639___mcc_h228 = _source130.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4640___mcc_h229 = _source130.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _4641___mcc_h230 = _source130.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _4642_variant = _4641___mcc_h230;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4643_dType = _4640___mcc_h229;
        DAST._IExpression _4644_on = _4639___mcc_h228;
        {
          Dafny.ISequence<Dafny.Rune> _4645_exprGen;
          bool _4646___v95;
          bool _4647_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4648_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1753;
          bool _out1754;
          bool _out1755;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1756;
          DCOMP.COMP.GenExpr(_4644_on, selfIdent, @params, false, out _out1753, out _out1754, out _out1755, out _out1756);
          _4645_exprGen = _out1753;
          _4646___v95 = _out1754;
          _4647_exprErased = _out1755;
          _4648_recIdents = _out1756;
          Dafny.ISequence<Dafny.Rune> _4649_dTypePath;
          Dafny.ISequence<Dafny.Rune> _out1757;
          _out1757 = DCOMP.COMP.GenPath(_4643_dType);
          _4649_dTypePath = _out1757;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!("), _4645_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref(), ")), _4649_dTypePath), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_4642_variant)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. })"));
          isOwned = true;
          isErased = true;
          readIdents = _4648_recIdents;
        }
      } else if (_source130.is_InitializationValue) {
        DAST._IType _4650___mcc_h231 = _source130.dtor_typ;
        DAST._IType _4651_typ = _4650___mcc_h231;
        {
          Dafny.ISequence<Dafny.Rune> _4652_typString;
          Dafny.ISequence<Dafny.Rune> _out1758;
          _out1758 = DCOMP.COMP.GenType(_4651_typ, false, false);
          _4652_typString = _out1758;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _4652_typString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()"));
          isOwned = true;
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source130.is_BoolBoundedPool) {
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]");
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source130.is_SetBoundedPool) {
        DAST._IExpression _4653___mcc_h232 = _source130.dtor_of;
        DAST._IExpression _4654_of = _4653___mcc_h232;
        {
          Dafny.ISequence<Dafny.Rune> _4655_exprGen;
          bool _4656___v96;
          bool _4657_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4658_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1759;
          bool _out1760;
          bool _out1761;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1762;
          DCOMP.COMP.GenExpr(_4654_of, selfIdent, @params, false, out _out1759, out _out1760, out _out1761, out _out1762);
          _4655_exprGen = _out1759;
          _4656___v96 = _out1760;
          _4657_exprErased = _out1761;
          _4658_recIdents = _out1762;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4655_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          isOwned = true;
          isErased = _4657_exprErased;
          readIdents = _4658_recIdents;
        }
      } else if (_source130.is_SeqBoundedPool) {
        DAST._IExpression _4659___mcc_h233 = _source130.dtor_of;
        bool _4660___mcc_h234 = _source130.dtor_includeDuplicates;
        bool _4661_includeDuplicates = _4660___mcc_h234;
        DAST._IExpression _4662_of = _4659___mcc_h233;
        {
          Dafny.ISequence<Dafny.Rune> _4663_exprGen;
          bool _4664___v97;
          bool _4665_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4666_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1763;
          bool _out1764;
          bool _out1765;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1766;
          DCOMP.COMP.GenExpr(_4662_of, selfIdent, @params, false, out _out1763, out _out1764, out _out1765, out _out1766);
          _4663_exprGen = _out1763;
          _4664___v97 = _out1764;
          _4665_exprErased = _out1765;
          _4666_recIdents = _out1766;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4663_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          if (!(_4661_includeDuplicates)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::itertools::Itertools::unique("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          isOwned = true;
          isErased = _4665_exprErased;
          readIdents = _4666_recIdents;
        }
      } else {
        DAST._IExpression _4667___mcc_h235 = _source130.dtor_lo;
        DAST._IExpression _4668___mcc_h236 = _source130.dtor_hi;
        DAST._IExpression _4669_hi = _4668___mcc_h236;
        DAST._IExpression _4670_lo = _4667___mcc_h235;
        {
          Dafny.ISequence<Dafny.Rune> _4671_loString;
          bool _4672___v98;
          bool _4673_loErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4674_recIdentsLo;
          Dafny.ISequence<Dafny.Rune> _out1767;
          bool _out1768;
          bool _out1769;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1770;
          DCOMP.COMP.GenExpr(_4670_lo, selfIdent, @params, true, out _out1767, out _out1768, out _out1769, out _out1770);
          _4671_loString = _out1767;
          _4672___v98 = _out1768;
          _4673_loErased = _out1769;
          _4674_recIdentsLo = _out1770;
          Dafny.ISequence<Dafny.Rune> _4675_hiString;
          bool _4676___v99;
          bool _4677_hiErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4678_recIdentsHi;
          Dafny.ISequence<Dafny.Rune> _out1771;
          bool _out1772;
          bool _out1773;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1774;
          DCOMP.COMP.GenExpr(_4669_hi, selfIdent, @params, true, out _out1771, out _out1772, out _out1773, out _out1774);
          _4675_hiString = _out1771;
          _4676___v99 = _out1772;
          _4677_hiErased = _out1773;
          _4678_recIdentsHi = _out1774;
          if (!(_4673_loErased)) {
            _4671_loString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _4671_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (!(_4677_hiErased)) {
            _4675_hiString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _4675_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::integer_range("), _4671_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _4675_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_4674_recIdentsLo, _4678_recIdentsHi);
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern crate dafny_runtime;\n"));
      BigInteger _4679_i;
      _4679_i = BigInteger.Zero;
      while ((_4679_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _4680_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        Dafny.ISequence<Dafny.Rune> _out1775;
        _out1775 = DCOMP.COMP.GenModule((p).Select(_4679_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _4680_generated = _out1775;
        if ((_4679_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _4680_generated);
        _4679_i = (_4679_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _4681_i;
      _4681_i = BigInteger.Zero;
      while ((_4681_i) < (new BigInteger((fullName).Count))) {
        if ((_4681_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, (fullName).Select(_4681_i));
        _4681_i = (_4681_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
  }
} // end of namespace DCOMP

