// Dafny program the_program compiled into C#
// To recompile, you will need the libraries
//     System.Runtime.Numerics.dll System.Collections.Immutable.dll
// but the 'dotnet' tool in net6.0 should pick those up automatically.
// Optionally, you may want to include compiler switches like
//     /debug /nowarn:162,164,168,183,219,436,1717,1718

using System;
using System.Numerics;
using System.Collections;
namespace Formatting {

  public partial class __default {
    public static System.String ReindentProgramFromFirstToken(Microsoft.Dafny.IToken firstToken, Formatting.IIndentationFormatter reindent) {
      System.String s = default(System.String);
      Microsoft.Dafny.IToken token;
      token = firstToken;
      System.Text.StringBuilder sb;
      System.Text.StringBuilder _nw0 = new System.Text.StringBuilder();
      sb = _nw0;
      while ((token) != (object)((Microsoft.Dafny.IToken)null)) {
        System.String newLeadingTrivia;
        newLeadingTrivia = (reindent).GetNewLeadingTrivia(token);
        System.String newTrailingTrivia;
        newTrailingTrivia = (reindent).GetNewTrailingTrivia(token);
        (sb).Append(newLeadingTrivia);
        (sb).Append(token.val);
        (sb).Append(newTrailingTrivia);
        token = token.Next;
      }
      System.String _out0;
      _out0 = (sb).ToString().ToString();
      s = _out0;
      return s;
    }
  }

  public interface IIndentationFormatter {
    System.String GetNewLeadingTrivia(Microsoft.Dafny.IToken token);
    System.String GetNewTrailingTrivia(Microsoft.Dafny.IToken token);
  }
  public class _Companion_IIndentationFormatter {
  }
} // end of namespace Formatting


namespace DAST {


  public interface _IModule {
    bool is_Module { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    bool dtor_isExtern { get; }
    Dafny.ISequence<DAST._IModuleItem> dtor_body { get; }
    _IModule DowncastClone();
  }
  public class Module : _IModule {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly bool _isExtern;
    public readonly Dafny.ISequence<DAST._IModuleItem> _body;
    public Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      this._name = name;
      this._isExtern = isExtern;
      this._body = body;
    }
    public _IModule DowncastClone() {
      if (this is _IModule dt) { return dt; }
      return new Module(_name, _isExtern, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Module;
      return oth != null && object.Equals(this._name, oth._name) && this._isExtern == oth._isExtern && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isExtern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Module.Module";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isExtern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IModule theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, false, Dafny.Sequence<DAST._IModuleItem>.Empty);
    public static DAST._IModule Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModule> _TYPE = new Dafny.TypeDescriptor<DAST._IModule>(DAST.Module.Default());
    public static Dafny.TypeDescriptor<DAST._IModule> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModule create(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return new Module(name, isExtern, body);
    }
    public static _IModule create_Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return create(name, isExtern, body);
    }
    public bool is_Module { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public bool dtor_isExtern {
      get {
        return this._isExtern;
      }
    }
    public Dafny.ISequence<DAST._IModuleItem> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IModuleItem {
    bool is_Module { get; }
    bool is_Class { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    bool is_Datatype { get; }
    DAST._IModule dtor_Module_a0 { get; }
    DAST._IClass dtor_Class_a0 { get; }
    DAST._ITrait dtor_Trait_a0 { get; }
    DAST._INewtype dtor_Newtype_a0 { get; }
    DAST._IDatatype dtor_Datatype_a0 { get; }
    _IModuleItem DowncastClone();
  }
  public abstract class ModuleItem : _IModuleItem {
    public ModuleItem() {
    }
    private static readonly DAST._IModuleItem theDefault = create_Module(DAST.Module.Default());
    public static DAST._IModuleItem Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModuleItem> _TYPE = new Dafny.TypeDescriptor<DAST._IModuleItem>(DAST.ModuleItem.Default());
    public static Dafny.TypeDescriptor<DAST._IModuleItem> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModuleItem create_Module(DAST._IModule _a0) {
      return new ModuleItem_Module(_a0);
    }
    public static _IModuleItem create_Class(DAST._IClass _a0) {
      return new ModuleItem_Class(_a0);
    }
    public static _IModuleItem create_Trait(DAST._ITrait _a0) {
      return new ModuleItem_Trait(_a0);
    }
    public static _IModuleItem create_Newtype(DAST._INewtype _a0) {
      return new ModuleItem_Newtype(_a0);
    }
    public static _IModuleItem create_Datatype(DAST._IDatatype _a0) {
      return new ModuleItem_Datatype(_a0);
    }
    public bool is_Module { get { return this is ModuleItem_Module; } }
    public bool is_Class { get { return this is ModuleItem_Class; } }
    public bool is_Trait { get { return this is ModuleItem_Trait; } }
    public bool is_Newtype { get { return this is ModuleItem_Newtype; } }
    public bool is_Datatype { get { return this is ModuleItem_Datatype; } }
    public DAST._IModule dtor_Module_a0 {
      get {
        var d = this;
        return ((ModuleItem_Module)d)._a0;
      }
    }
    public DAST._IClass dtor_Class_a0 {
      get {
        var d = this;
        return ((ModuleItem_Class)d)._a0;
      }
    }
    public DAST._ITrait dtor_Trait_a0 {
      get {
        var d = this;
        return ((ModuleItem_Trait)d)._a0;
      }
    }
    public DAST._INewtype dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Newtype)d)._a0;
      }
    }
    public DAST._IDatatype dtor_Datatype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Datatype)d)._a0;
      }
    }
    public abstract _IModuleItem DowncastClone();
  }
  public class ModuleItem_Module : ModuleItem {
    public readonly DAST._IModule _a0;
    public ModuleItem_Module(DAST._IModule _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Module(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Module;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Module";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Class : ModuleItem {
    public readonly DAST._IClass _a0;
    public ModuleItem_Class(DAST._IClass _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Class(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Class;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Class";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Trait : ModuleItem {
    public readonly DAST._ITrait _a0;
    public ModuleItem_Trait(DAST._ITrait _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Trait(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Trait;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Newtype : ModuleItem {
    public readonly DAST._INewtype _a0;
    public ModuleItem_Newtype(DAST._INewtype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Datatype : ModuleItem {
    public readonly DAST._IDatatype _a0;
    public ModuleItem_Datatype(DAST._IDatatype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Datatype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Datatype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IType {
    bool is_Path { get; }
    bool is_Nullable { get; }
    bool is_Tuple { get; }
    bool is_Array { get; }
    bool is_Seq { get; }
    bool is_Set { get; }
    bool is_Multiset { get; }
    bool is_Map { get; }
    bool is_Arrow { get; }
    bool is_Primitive { get; }
    bool is_Passthrough { get; }
    bool is_TypeArg { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    DAST._IResolvedType dtor_resolved { get; }
    DAST._IType dtor_Nullable_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_Tuple_a0 { get; }
    DAST._IType dtor_element { get; }
    BigInteger dtor_dims { get; }
    DAST._IType dtor_key { get; }
    DAST._IType dtor_value { get; }
    Dafny.ISequence<DAST._IType> dtor_args { get; }
    DAST._IType dtor_result { get; }
    DAST._IPrimitive dtor_Primitive_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 { get; }
    _IType DowncastClone();
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly DAST._IType theDefault = create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.ResolvedType.Default());
    public static DAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IType> _TYPE = new Dafny.TypeDescriptor<DAST._IType>(DAST.Type.Default());
    public static Dafny.TypeDescriptor<DAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) {
      return new Type_Path(_a0, typeArgs, resolved);
    }
    public static _IType create_Nullable(DAST._IType _a0) {
      return new Type_Nullable(_a0);
    }
    public static _IType create_Tuple(Dafny.ISequence<DAST._IType> _a0) {
      return new Type_Tuple(_a0);
    }
    public static _IType create_Array(DAST._IType element, BigInteger dims) {
      return new Type_Array(element, dims);
    }
    public static _IType create_Seq(DAST._IType element) {
      return new Type_Seq(element);
    }
    public static _IType create_Set(DAST._IType element) {
      return new Type_Set(element);
    }
    public static _IType create_Multiset(DAST._IType element) {
      return new Type_Multiset(element);
    }
    public static _IType create_Map(DAST._IType key, DAST._IType @value) {
      return new Type_Map(key, @value);
    }
    public static _IType create_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) {
      return new Type_Arrow(args, result);
    }
    public static _IType create_Primitive(DAST._IPrimitive _a0) {
      return new Type_Primitive(_a0);
    }
    public static _IType create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_Passthrough(_a0);
    }
    public static _IType create_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_TypeArg(_a0);
    }
    public bool is_Path { get { return this is Type_Path; } }
    public bool is_Nullable { get { return this is Type_Nullable; } }
    public bool is_Tuple { get { return this is Type_Tuple; } }
    public bool is_Array { get { return this is Type_Array; } }
    public bool is_Seq { get { return this is Type_Seq; } }
    public bool is_Set { get { return this is Type_Set; } }
    public bool is_Multiset { get { return this is Type_Multiset; } }
    public bool is_Map { get { return this is Type_Map; } }
    public bool is_Arrow { get { return this is Type_Arrow; } }
    public bool is_Primitive { get { return this is Type_Primitive; } }
    public bool is_Passthrough { get { return this is Type_Passthrough; } }
    public bool is_TypeArg { get { return this is Type_TypeArg; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 {
      get {
        var d = this;
        return ((Type_Path)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Type_Path)d)._typeArgs;
      }
    }
    public DAST._IResolvedType dtor_resolved {
      get {
        var d = this;
        return ((Type_Path)d)._resolved;
      }
    }
    public DAST._IType dtor_Nullable_a0 {
      get {
        var d = this;
        return ((Type_Nullable)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Type_Tuple)d)._a0;
      }
    }
    public DAST._IType dtor_element {
      get {
        var d = this;
        if (d is Type_Array) { return ((Type_Array)d)._element; }
        if (d is Type_Seq) { return ((Type_Seq)d)._element; }
        if (d is Type_Set) { return ((Type_Set)d)._element; }
        return ((Type_Multiset)d)._element;
      }
    }
    public BigInteger dtor_dims {
      get {
        var d = this;
        return ((Type_Array)d)._dims;
      }
    }
    public DAST._IType dtor_key {
      get {
        var d = this;
        return ((Type_Map)d)._key;
      }
    }
    public DAST._IType dtor_value {
      get {
        var d = this;
        return ((Type_Map)d)._value;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_args {
      get {
        var d = this;
        return ((Type_Arrow)d)._args;
      }
    }
    public DAST._IType dtor_result {
      get {
        var d = this;
        return ((Type_Arrow)d)._result;
      }
    }
    public DAST._IPrimitive dtor_Primitive_a0 {
      get {
        var d = this;
        return ((Type_Primitive)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((Type_Passthrough)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 {
      get {
        var d = this;
        return ((Type_TypeArg)d)._a0;
      }
    }
    public abstract _IType DowncastClone();
  }
  public class Type_Path : Type {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly DAST._IResolvedType _resolved;
    public Type_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) : base() {
      this._a0 = _a0;
      this._typeArgs = typeArgs;
      this._resolved = resolved;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Path(_a0, _typeArgs, _resolved);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Path;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._resolved, oth._resolved);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._resolved));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Path";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._resolved);
      s += ")";
      return s;
    }
  }
  public class Type_Nullable : Type {
    public readonly DAST._IType _a0;
    public Type_Nullable(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Nullable(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Nullable;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Nullable";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Tuple : Type {
    public readonly Dafny.ISequence<DAST._IType> _a0;
    public Type_Tuple(Dafny.ISequence<DAST._IType> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Array : Type {
    public readonly DAST._IType _element;
    public readonly BigInteger _dims;
    public Type_Array(DAST._IType element, BigInteger dims) : base() {
      this._element = element;
      this._dims = dims;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Array(_element, _dims);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Array;
      return oth != null && object.Equals(this._element, oth._element) && this._dims == oth._dims;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Array";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dims);
      s += ")";
      return s;
    }
  }
  public class Type_Seq : Type {
    public readonly DAST._IType _element;
    public Type_Seq(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Seq(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Seq;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Seq";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Set : Type {
    public readonly DAST._IType _element;
    public Type_Set(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Set(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Set;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Set";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Multiset : Type {
    public readonly DAST._IType _element;
    public Type_Multiset(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Multiset(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Multiset;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Multiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Map : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_Map(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Map(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Map;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Map";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_Arrow : Type {
    public readonly Dafny.ISequence<DAST._IType> _args;
    public readonly DAST._IType _result;
    public Type_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) : base() {
      this._args = args;
      this._result = result;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Arrow(_args, _result);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Arrow;
      return oth != null && object.Equals(this._args, oth._args) && object.Equals(this._result, oth._result);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._result));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Arrow";
      s += "(";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._result);
      s += ")";
      return s;
    }
  }
  public class Type_Primitive : Type {
    public readonly DAST._IPrimitive _a0;
    public Type_Primitive(DAST._IPrimitive _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Primitive(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Primitive;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Primitive";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Passthrough : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeArg : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeArg(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_TypeArg;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.TypeArg";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IPrimitive {
    bool is_Int { get; }
    bool is_Real { get; }
    bool is_String { get; }
    bool is_Bool { get; }
    bool is_Char { get; }
    _IPrimitive DowncastClone();
  }
  public abstract class Primitive : _IPrimitive {
    public Primitive() {
    }
    private static readonly DAST._IPrimitive theDefault = create_Int();
    public static DAST._IPrimitive Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IPrimitive> _TYPE = new Dafny.TypeDescriptor<DAST._IPrimitive>(DAST.Primitive.Default());
    public static Dafny.TypeDescriptor<DAST._IPrimitive> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrimitive create_Int() {
      return new Primitive_Int();
    }
    public static _IPrimitive create_Real() {
      return new Primitive_Real();
    }
    public static _IPrimitive create_String() {
      return new Primitive_String();
    }
    public static _IPrimitive create_Bool() {
      return new Primitive_Bool();
    }
    public static _IPrimitive create_Char() {
      return new Primitive_Char();
    }
    public bool is_Int { get { return this is Primitive_Int; } }
    public bool is_Real { get { return this is Primitive_Real; } }
    public bool is_String { get { return this is Primitive_String; } }
    public bool is_Bool { get { return this is Primitive_Bool; } }
    public bool is_Char { get { return this is Primitive_Char; } }
    public static System.Collections.Generic.IEnumerable<_IPrimitive> AllSingletonConstructors {
      get {
        yield return Primitive.create_Int();
        yield return Primitive.create_Real();
        yield return Primitive.create_String();
        yield return Primitive.create_Bool();
        yield return Primitive.create_Char();
      }
    }
    public abstract _IPrimitive DowncastClone();
  }
  public class Primitive_Int : Primitive {
    public Primitive_Int() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Int";
      return s;
    }
  }
  public class Primitive_Real : Primitive {
    public Primitive_Real() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Real();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Real;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Real";
      return s;
    }
  }
  public class Primitive_String : Primitive {
    public Primitive_String() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_String();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_String;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.String";
      return s;
    }
  }
  public class Primitive_Bool : Primitive {
    public Primitive_Bool() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Bool";
      return s;
    }
  }
  public class Primitive_Char : Primitive {
    public Primitive_Char() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Char();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Char;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Char";
      return s;
    }
  }

  public interface _IResolvedType {
    bool is_Datatype { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    DAST._IType dtor_Newtype_a0 { get; }
    _IResolvedType DowncastClone();
  }
  public abstract class ResolvedType : _IResolvedType {
    public ResolvedType() {
    }
    private static readonly DAST._IResolvedType theDefault = create_Datatype(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty);
    public static DAST._IResolvedType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IResolvedType> _TYPE = new Dafny.TypeDescriptor<DAST._IResolvedType>(DAST.ResolvedType.Default());
    public static Dafny.TypeDescriptor<DAST._IResolvedType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IResolvedType create_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Datatype(path);
    }
    public static _IResolvedType create_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Trait(path);
    }
    public static _IResolvedType create_Newtype(DAST._IType _a0) {
      return new ResolvedType_Newtype(_a0);
    }
    public bool is_Datatype { get { return this is ResolvedType_Datatype; } }
    public bool is_Trait { get { return this is ResolvedType_Trait; } }
    public bool is_Newtype { get { return this is ResolvedType_Newtype; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is ResolvedType_Datatype) { return ((ResolvedType_Datatype)d)._path; }
        return ((ResolvedType_Trait)d)._path;
      }
    }
    public DAST._IType dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._a0;
      }
    }
    public abstract _IResolvedType DowncastClone();
  }
  public class ResolvedType_Datatype : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Datatype(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Datatype;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Trait : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Trait(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Trait;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Newtype : ResolvedType {
    public readonly DAST._IType _a0;
    public ResolvedType_Newtype(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IIdent {
    bool is_Ident { get; }
    Dafny.ISequence<Dafny.Rune> dtor_id { get; }
  }
  public class Ident : _IIdent {
    public readonly Dafny.ISequence<Dafny.Rune> _id;
    public Ident(Dafny.ISequence<Dafny.Rune> id) {
      this._id = id;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Ident;
      return oth != null && object.Equals(this._id, oth._id);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._id));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Ident.Ident";
      s += "(";
      s += this._id.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IIdent create(Dafny.ISequence<Dafny.Rune> id) {
      return new Ident(id);
    }
    public static _IIdent create_Ident(Dafny.ISequence<Dafny.Rune> id) {
      return create(id);
    }
    public bool is_Ident { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_id {
      get {
        return this._id;
      }
    }
  }

  public interface _IClass {
    bool is_Class { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IType> dtor_superClasses { get; }
    Dafny.ISequence<DAST._IField> dtor_fields { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _IClass DowncastClone();
  }
  public class Class : _IClass {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IType> _superClasses;
    public readonly Dafny.ISequence<DAST._IField> _fields;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._superClasses = superClasses;
      this._fields = fields;
      this._body = body;
    }
    public _IClass DowncastClone() {
      if (this is _IClass dt) { return dt; }
      return new Class(_name, _enclosingModule, _typeParams, _superClasses, _fields, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Class;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._superClasses, oth._superClasses) && object.Equals(this._fields, oth._fields) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._superClasses));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Class.Class";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._superClasses);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IClass theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IField>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._IClass Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IClass> _TYPE = new Dafny.TypeDescriptor<DAST._IClass>(DAST.Class.Default());
    public static Dafny.TypeDescriptor<DAST._IClass> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClass create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return new Class(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public static _IClass create_Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public bool is_Class { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_superClasses {
      get {
        return this._superClasses;
      }
    }
    public Dafny.ISequence<DAST._IField> dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _ITrait DowncastClone();
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_name, _typeParams, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Trait;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Trait.Trait";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._ITrait theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ITrait> _TYPE = new Dafny.TypeDescriptor<DAST._ITrait>(DAST.Trait.Default());
    public static Dafny.TypeDescriptor<DAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return new Trait(name, typeParams, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, typeParams, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IDatatype {
    bool is_Datatype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    bool dtor_isCo { get; }
    _IDatatype DowncastClone();
  }
  public class Datatype : _IDatatype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IDatatypeCtor> _ctors;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly bool _isCo;
    public Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._ctors = ctors;
      this._body = body;
      this._isCo = isCo;
    }
    public _IDatatype DowncastClone() {
      if (this is _IDatatype dt) { return dt; }
      return new Datatype(_name, _enclosingModule, _typeParams, _ctors, _body, _isCo);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Datatype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._ctors, oth._ctors) && object.Equals(this._body, oth._body) && this._isCo == oth._isCo;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ctors));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Datatype.Datatype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ctors);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IDatatypeCtor>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, false);
    public static DAST._IDatatype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatype> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatype>(DAST.Datatype.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return new Datatype(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public static _IDatatype create_Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return create(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public bool is_Datatype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors {
      get {
        return this._ctors;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public bool dtor_isCo {
      get {
        return this._isCo;
      }
    }
  }

  public interface _IDatatypeCtor {
    bool is_DatatypeCtor { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_args { get; }
    bool dtor_hasAnyArgs { get; }
    _IDatatypeCtor DowncastClone();
  }
  public class DatatypeCtor : _IDatatypeCtor {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IFormal> _args;
    public readonly bool _hasAnyArgs;
    public DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      this._name = name;
      this._args = args;
      this._hasAnyArgs = hasAnyArgs;
    }
    public _IDatatypeCtor DowncastClone() {
      if (this is _IDatatypeCtor dt) { return dt; }
      return new DatatypeCtor(_name, _args, _hasAnyArgs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.DatatypeCtor;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._args, oth._args) && this._hasAnyArgs == oth._hasAnyArgs;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasAnyArgs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.DatatypeCtor.DatatypeCtor";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasAnyArgs);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatypeCtor theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, false);
    public static DAST._IDatatypeCtor Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatypeCtor>(DAST.DatatypeCtor.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatypeCtor create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return new DatatypeCtor(name, args, hasAnyArgs);
    }
    public static _IDatatypeCtor create_DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return create(name, args, hasAnyArgs);
    }
    public bool is_DatatypeCtor { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_args {
      get {
        return this._args;
      }
    }
    public bool dtor_hasAnyArgs {
      get {
        return this._hasAnyArgs;
      }
    }
  }

  public interface _INewtype {
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    DAST._IType dtor_base { get; }
    Dafny.ISequence<DAST._IStatement> dtor_witnessStmts { get; }
    DAST._IOptional<DAST._IExpression> dtor_witnessExpr { get; }
    _INewtype DowncastClone();
  }
  public class Newtype : _INewtype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly DAST._IType _base;
    public readonly Dafny.ISequence<DAST._IStatement> _witnessStmts;
    public readonly DAST._IOptional<DAST._IExpression> _witnessExpr;
    public Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      this._name = name;
      this._typeParams = typeParams;
      this._base = @base;
      this._witnessStmts = witnessStmts;
      this._witnessExpr = witnessExpr;
    }
    public _INewtype DowncastClone() {
      if (this is _INewtype dt) { return dt; }
      return new Newtype(_name, _typeParams, _base, _witnessStmts, _witnessExpr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Newtype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._base, oth._base) && object.Equals(this._witnessStmts, oth._witnessStmts) && object.Equals(this._witnessExpr, oth._witnessExpr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessStmts));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessExpr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Newtype.Newtype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessStmts);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessExpr);
      s += ")";
      return s;
    }
    private static readonly DAST._INewtype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Type.Default(), Dafny.Sequence<DAST._IStatement>.Empty, DAST.Optional<DAST._IExpression>.Default());
    public static DAST._INewtype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtype> _TYPE = new Dafny.TypeDescriptor<DAST._INewtype>(DAST.Newtype.Default());
    public static Dafny.TypeDescriptor<DAST._INewtype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      return new Newtype(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public static _INewtype create_Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      return create(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public bool is_Newtype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public DAST._IType dtor_base {
      get {
        return this._base;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_witnessStmts {
      get {
        return this._witnessStmts;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_witnessExpr {
      get {
        return this._witnessExpr;
      }
    }
  }

  public interface _IClassItem {
    bool is_Method { get; }
    DAST._IMethod dtor_Method_a0 { get; }
  }
  public class ClassItem : _IClassItem {
    public readonly DAST._IMethod _a0;
    public ClassItem(DAST._IMethod _a0) {
      this._a0 = _a0;
    }
    public static DAST._IMethod DowncastClone(DAST._IMethod _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ClassItem;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ClassItem.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = DAST.Method.Default();
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClassItem create(DAST._IMethod _a0) {
      return new ClassItem(_a0);
    }
    public static _IClassItem create_Method(DAST._IMethod _a0) {
      return create(_a0);
    }
    public bool is_Method { get { return true; } }
    public DAST._IMethod dtor_Method_a0 {
      get {
        return this._a0;
      }
    }
  }

  public interface _IField {
    bool is_Field { get; }
    DAST._IFormal dtor_formal { get; }
    DAST._IOptional<DAST._IExpression> dtor_defaultValue { get; }
    _IField DowncastClone();
  }
  public class Field : _IField {
    public readonly DAST._IFormal _formal;
    public readonly DAST._IOptional<DAST._IExpression> _defaultValue;
    public Field(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      this._formal = formal;
      this._defaultValue = defaultValue;
    }
    public _IField DowncastClone() {
      if (this is _IField dt) { return dt; }
      return new Field(_formal, _defaultValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Field;
      return oth != null && object.Equals(this._formal, oth._formal) && object.Equals(this._defaultValue, oth._defaultValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formal));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._defaultValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Field.Field";
      s += "(";
      s += Dafny.Helpers.ToString(this._formal);
      s += ", ";
      s += Dafny.Helpers.ToString(this._defaultValue);
      s += ")";
      return s;
    }
    private static readonly DAST._IField theDefault = create(DAST.Formal.Default(), DAST.Optional<DAST._IExpression>.Default());
    public static DAST._IField Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IField> _TYPE = new Dafny.TypeDescriptor<DAST._IField>(DAST.Field.Default());
    public static Dafny.TypeDescriptor<DAST._IField> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IField create(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      return new Field(formal, defaultValue);
    }
    public static _IField create_Field(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      return create(formal, defaultValue);
    }
    public bool is_Field { get { return true; } }
    public DAST._IFormal dtor_formal {
      get {
        return this._formal;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_defaultValue {
      get {
        return this._defaultValue;
      }
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    _IFormal DowncastClone();
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      this._name = name;
      this._typ = typ;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
    private static readonly DAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default());
    public static DAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IFormal> _TYPE = new Dafny.TypeDescriptor<DAST._IFormal>(DAST.Formal.Default());
    public static Dafny.TypeDescriptor<DAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return new Formal(name, typ);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return create(name, typ);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        return this._typ;
      }
    }
  }

  public interface _IMethod {
    bool is_Method { get; }
    bool dtor_isStatic { get; }
    bool dtor_hasBody { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<DAST._IType> dtor_outTypes { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars { get; }
    _IMethod DowncastClone();
  }
  public class Method : _IMethod {
    public readonly bool _isStatic;
    public readonly bool _hasBody;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _overridingPath;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public readonly Dafny.ISequence<DAST._IType> _outTypes;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outVars;
    public Method(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      this._isStatic = isStatic;
      this._hasBody = hasBody;
      this._overridingPath = overridingPath;
      this._name = name;
      this._typeParams = typeParams;
      this._params = @params;
      this._body = body;
      this._outTypes = outTypes;
      this._outVars = outVars;
    }
    public _IMethod DowncastClone() {
      if (this is _IMethod dt) { return dt; }
      return new Method(_isStatic, _hasBody, _overridingPath, _name, _typeParams, _params, _body, _outTypes, _outVars);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Method;
      return oth != null && this._isStatic == oth._isStatic && this._hasBody == oth._hasBody && object.Equals(this._overridingPath, oth._overridingPath) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._params, oth._params) && object.Equals(this._body, oth._body) && object.Equals(this._outTypes, oth._outTypes) && object.Equals(this._outVars, oth._outVars);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasBody));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._overridingPath));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outTypes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outVars));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Method.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasBody);
      s += ", ";
      s += Dafny.Helpers.ToString(this._overridingPath);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outTypes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outVars);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = create(false, false, DAST.Optional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, Dafny.Sequence<DAST._IStatement>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Optional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default());
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMethod create(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return new Method(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public static _IMethod create_Method(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return create(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public bool is_Method { get { return true; } }
    public bool dtor_isStatic {
      get {
        return this._isStatic;
      }
    }
    public bool dtor_hasBody {
      get {
        return this._hasBody;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath {
      get {
        return this._overridingPath;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        return this._params;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_outTypes {
      get {
        return this._outTypes;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars {
      get {
        return this._outVars;
      }
    }
  }

  public interface _IOptional<T> {
    bool is_Some { get; }
    bool is_None { get; }
    T dtor_Some_a0 { get; }
    _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public abstract class Optional<T> : _IOptional<T> {
    public Optional() {
    }
    public static DAST._IOptional<T> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<DAST._IOptional<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<DAST._IOptional<T>>(DAST.Optional<T>.Default());
    }
    public static _IOptional<T> create_Some(T _a0) {
      return new Optional_Some<T>(_a0);
    }
    public static _IOptional<T> create_None() {
      return new Optional_None<T>();
    }
    public bool is_Some { get { return this is Optional_Some<T>; } }
    public bool is_None { get { return this is Optional_None<T>; } }
    public T dtor_Some_a0 {
      get {
        var d = this;
        return ((Optional_Some<T>)d)._a0;
      }
    }
    public abstract _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public class Optional_Some<T> : Optional<T> {
    public readonly T _a0;
    public Optional_Some(T _a0) : base() {
      this._a0 = _a0;
    }
    public override _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOptional<__T> dt) { return dt; }
      return new Optional_Some<__T>(converter0(_a0));
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Optional_Some<T>;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Optional.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Optional_None<T> : Optional<T> {
    public Optional_None() : base() {
    }
    public override _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOptional<__T> dt) { return dt; }
      return new Optional_None<__T>();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Optional_None<T>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Optional.None";
      return s;
    }
  }

  public interface _IStatement {
    bool is_DeclareVar { get; }
    bool is_Assign { get; }
    bool is_If { get; }
    bool is_Labeled { get; }
    bool is_While { get; }
    bool is_Foreach { get; }
    bool is_Call { get; }
    bool is_Return { get; }
    bool is_EarlyReturn { get; }
    bool is_Break { get; }
    bool is_TailRecursive { get; }
    bool is_JumpTailCallStart { get; }
    bool is_Halt { get; }
    bool is_Print { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    DAST._IOptional<DAST._IExpression> dtor_maybeValue { get; }
    DAST._IAssignLhs dtor_lhs { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IExpression dtor_cond { get; }
    Dafny.ISequence<DAST._IStatement> dtor_thn { get; }
    Dafny.ISequence<DAST._IStatement> dtor_els { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_boundName { get; }
    DAST._IType dtor_boundType { get; }
    DAST._IExpression dtor_over { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.Rune>> dtor_toLabel { get; }
    DAST._IExpression dtor_Print_a0 { get; }
    _IStatement DowncastClone();
  }
  public abstract class Statement : _IStatement {
    public Statement() {
    }
    private static readonly DAST._IStatement theDefault = create_DeclareVar(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default(), DAST.Optional<DAST._IExpression>.Default());
    public static DAST._IStatement Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IStatement> _TYPE = new Dafny.TypeDescriptor<DAST._IStatement>(DAST.Statement.Default());
    public static Dafny.TypeDescriptor<DAST._IStatement> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStatement create_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IOptional<DAST._IExpression> maybeValue) {
      return new Statement_DeclareVar(name, typ, maybeValue);
    }
    public static _IStatement create_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) {
      return new Statement_Assign(lhs, @value);
    }
    public static _IStatement create_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) {
      return new Statement_If(cond, thn, els);
    }
    public static _IStatement create_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Labeled(lbl, body);
    }
    public static _IStatement create_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_While(cond, body);
    }
    public static _IStatement create_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Foreach(boundName, boundType, over, body);
    }
    public static _IStatement create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) {
      return new Statement_Call(@on, name, typeArgs, args, outs);
    }
    public static _IStatement create_Return(DAST._IExpression expr) {
      return new Statement_Return(expr);
    }
    public static _IStatement create_EarlyReturn() {
      return new Statement_EarlyReturn();
    }
    public static _IStatement create_Break(DAST._IOptional<Dafny.ISequence<Dafny.Rune>> toLabel) {
      return new Statement_Break(toLabel);
    }
    public static _IStatement create_TailRecursive(Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_TailRecursive(body);
    }
    public static _IStatement create_JumpTailCallStart() {
      return new Statement_JumpTailCallStart();
    }
    public static _IStatement create_Halt() {
      return new Statement_Halt();
    }
    public static _IStatement create_Print(DAST._IExpression _a0) {
      return new Statement_Print(_a0);
    }
    public bool is_DeclareVar { get { return this is Statement_DeclareVar; } }
    public bool is_Assign { get { return this is Statement_Assign; } }
    public bool is_If { get { return this is Statement_If; } }
    public bool is_Labeled { get { return this is Statement_Labeled; } }
    public bool is_While { get { return this is Statement_While; } }
    public bool is_Foreach { get { return this is Statement_Foreach; } }
    public bool is_Call { get { return this is Statement_Call; } }
    public bool is_Return { get { return this is Statement_Return; } }
    public bool is_EarlyReturn { get { return this is Statement_EarlyReturn; } }
    public bool is_Break { get { return this is Statement_Break; } }
    public bool is_TailRecursive { get { return this is Statement_TailRecursive; } }
    public bool is_JumpTailCallStart { get { return this is Statement_JumpTailCallStart; } }
    public bool is_Halt { get { return this is Statement_Halt; } }
    public bool is_Print { get { return this is Statement_Print; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Statement_DeclareVar) { return ((Statement_DeclareVar)d)._name; }
        return ((Statement_Call)d)._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._typ;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_maybeValue {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._maybeValue;
      }
    }
    public DAST._IAssignLhs dtor_lhs {
      get {
        var d = this;
        return ((Statement_Assign)d)._lhs;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        return ((Statement_Assign)d)._value;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        if (d is Statement_If) { return ((Statement_If)d)._cond; }
        return ((Statement_While)d)._cond;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_thn {
      get {
        var d = this;
        return ((Statement_If)d)._thn;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_els {
      get {
        var d = this;
        return ((Statement_If)d)._els;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Statement_Labeled)d)._lbl;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        if (d is Statement_Labeled) { return ((Statement_Labeled)d)._body; }
        if (d is Statement_While) { return ((Statement_While)d)._body; }
        if (d is Statement_Foreach) { return ((Statement_Foreach)d)._body; }
        return ((Statement_TailRecursive)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_boundName {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundName;
      }
    }
    public DAST._IType dtor_boundType {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundType;
      }
    }
    public DAST._IExpression dtor_over {
      get {
        var d = this;
        return ((Statement_Foreach)d)._over;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        return ((Statement_Call)d)._on;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Statement_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        return ((Statement_Call)d)._args;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs {
      get {
        var d = this;
        return ((Statement_Call)d)._outs;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        return ((Statement_Return)d)._expr;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.Rune>> dtor_toLabel {
      get {
        var d = this;
        return ((Statement_Break)d)._toLabel;
      }
    }
    public DAST._IExpression dtor_Print_a0 {
      get {
        var d = this;
        return ((Statement_Print)d)._a0;
      }
    }
    public abstract _IStatement DowncastClone();
  }
  public class Statement_DeclareVar : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IOptional<DAST._IExpression> _maybeValue;
    public Statement_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IOptional<DAST._IExpression> maybeValue) : base() {
      this._name = name;
      this._typ = typ;
      this._maybeValue = maybeValue;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_DeclareVar(_name, _typ, _maybeValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_DeclareVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._maybeValue, oth._maybeValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._maybeValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.DeclareVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._maybeValue);
      s += ")";
      return s;
    }
  }
  public class Statement_Assign : Statement {
    public readonly DAST._IAssignLhs _lhs;
    public readonly DAST._IExpression _value;
    public Statement_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) : base() {
      this._lhs = lhs;
      this._value = @value;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Assign(_lhs, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Assign;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Assign";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Statement_If : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _thn;
    public readonly Dafny.ISequence<DAST._IStatement> _els;
    public Statement_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_If(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_If;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.If";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Statement_Labeled : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._lbl = lbl;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Labeled(_lbl, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Labeled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Labeled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_While : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._cond = cond;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_While(_cond, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_While;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.While";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Foreach : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _boundName;
    public readonly DAST._IType _boundType;
    public readonly DAST._IExpression _over;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._boundName = boundName;
      this._boundType = boundType;
      this._over = over;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Foreach(_boundName, _boundType, _over, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Foreach;
      return oth != null && object.Equals(this._boundName, oth._boundName) && object.Equals(this._boundType, oth._boundType) && object.Equals(this._over, oth._over) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._over));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Foreach";
      s += "(";
      s += this._boundName.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._boundType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._over);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Call : Statement {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outs;
    public Statement_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
      this._outs = outs;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Call(_on, _name, _typeArgs, _args, _outs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args) && object.Equals(this._outs, oth._outs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outs);
      s += ")";
      return s;
    }
  }
  public class Statement_Return : Statement {
    public readonly DAST._IExpression _expr;
    public Statement_Return(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Return(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Return;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Statement_EarlyReturn : Statement {
    public Statement_EarlyReturn() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_EarlyReturn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_EarlyReturn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.EarlyReturn";
      return s;
    }
  }
  public class Statement_Break : Statement {
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _toLabel;
    public Statement_Break(DAST._IOptional<Dafny.ISequence<Dafny.Rune>> toLabel) : base() {
      this._toLabel = toLabel;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Break(_toLabel);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Break;
      return oth != null && object.Equals(this._toLabel, oth._toLabel);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._toLabel));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._toLabel);
      s += ")";
      return s;
    }
  }
  public class Statement_TailRecursive : Statement {
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_TailRecursive(Dafny.ISequence<DAST._IStatement> body) : base() {
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_TailRecursive(_body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_TailRecursive;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.TailRecursive";
      s += "(";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_JumpTailCallStart : Statement {
    public Statement_JumpTailCallStart() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_JumpTailCallStart();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_JumpTailCallStart;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.JumpTailCallStart";
      return s;
    }
  }
  public class Statement_Halt : Statement {
    public Statement_Halt() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Halt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Halt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Halt";
      return s;
    }
  }
  public class Statement_Print : Statement {
    public readonly DAST._IExpression _a0;
    public Statement_Print(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IAssignLhs {
    bool is_Ident { get; }
    bool is_Select { get; }
    bool is_Index { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    DAST._IExpression dtor_expr { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    _IAssignLhs DowncastClone();
  }
  public abstract class AssignLhs : _IAssignLhs {
    public AssignLhs() {
    }
    private static readonly DAST._IAssignLhs theDefault = create_Ident(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._IAssignLhs Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IAssignLhs> _TYPE = new Dafny.TypeDescriptor<DAST._IAssignLhs>(DAST.AssignLhs.Default());
    public static Dafny.TypeDescriptor<DAST._IAssignLhs> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignLhs create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new AssignLhs_Ident(_a0);
    }
    public static _IAssignLhs create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) {
      return new AssignLhs_Select(expr, field);
    }
    public static _IAssignLhs create_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) {
      return new AssignLhs_Index(expr, indices);
    }
    public bool is_Ident { get { return this is AssignLhs_Ident; } }
    public bool is_Select { get { return this is AssignLhs_Select; } }
    public bool is_Index { get { return this is AssignLhs_Index; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((AssignLhs_Ident)d)._a0;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is AssignLhs_Select) { return ((AssignLhs_Select)d)._expr; }
        return ((AssignLhs_Index)d)._expr;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((AssignLhs_Select)d)._field;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((AssignLhs_Index)d)._indices;
      }
    }
    public abstract _IAssignLhs DowncastClone();
  }
  public class AssignLhs_Ident : AssignLhs {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public AssignLhs_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Ident";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Select : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public AssignLhs_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._expr = expr;
      this._field = field;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Select(_expr, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Index : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public AssignLhs_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._indices = indices;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Index(_expr, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }

  public interface _ICollKind {
    bool is_Seq { get; }
    bool is_Array { get; }
    bool is_Map { get; }
    _ICollKind DowncastClone();
  }
  public abstract class CollKind : _ICollKind {
    public CollKind() {
    }
    private static readonly DAST._ICollKind theDefault = create_Seq();
    public static DAST._ICollKind Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICollKind> _TYPE = new Dafny.TypeDescriptor<DAST._ICollKind>(DAST.CollKind.Default());
    public static Dafny.TypeDescriptor<DAST._ICollKind> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICollKind create_Seq() {
      return new CollKind_Seq();
    }
    public static _ICollKind create_Array() {
      return new CollKind_Array();
    }
    public static _ICollKind create_Map() {
      return new CollKind_Map();
    }
    public bool is_Seq { get { return this is CollKind_Seq; } }
    public bool is_Array { get { return this is CollKind_Array; } }
    public bool is_Map { get { return this is CollKind_Map; } }
    public static System.Collections.Generic.IEnumerable<_ICollKind> AllSingletonConstructors {
      get {
        yield return CollKind.create_Seq();
        yield return CollKind.create_Array();
        yield return CollKind.create_Map();
      }
    }
    public abstract _ICollKind DowncastClone();
  }
  public class CollKind_Seq : CollKind {
    public CollKind_Seq() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Seq();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Seq;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Seq";
      return s;
    }
  }
  public class CollKind_Array : CollKind {
    public CollKind_Array() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Array();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Array;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Array";
      return s;
    }
  }
  public class CollKind_Map : CollKind {
    public CollKind_Map() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Map();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Map;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Map";
      return s;
    }
  }

  public interface _IBinOp {
    bool is_Eq { get; }
    bool is_Neq { get; }
    bool is_Div { get; }
    bool is_EuclidianDiv { get; }
    bool is_Mod { get; }
    bool is_EuclidianMod { get; }
    bool is_Implies { get; }
    bool is_In { get; }
    bool is_NotIn { get; }
    bool is_SetDifference { get; }
    bool is_Concat { get; }
    bool is_Passthrough { get; }
    bool dtor_referential { get; }
    bool dtor_nullable { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    _IBinOp DowncastClone();
  }
  public abstract class BinOp : _IBinOp {
    public BinOp() {
    }
    private static readonly DAST._IBinOp theDefault = create_Eq(false, false);
    public static DAST._IBinOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IBinOp> _TYPE = new Dafny.TypeDescriptor<DAST._IBinOp>(DAST.BinOp.Default());
    public static Dafny.TypeDescriptor<DAST._IBinOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOp create_Eq(bool referential, bool nullable) {
      return new BinOp_Eq(referential, nullable);
    }
    public static _IBinOp create_Neq(bool referential, bool nullable) {
      return new BinOp_Neq(referential, nullable);
    }
    public static _IBinOp create_Div() {
      return new BinOp_Div();
    }
    public static _IBinOp create_EuclidianDiv() {
      return new BinOp_EuclidianDiv();
    }
    public static _IBinOp create_Mod() {
      return new BinOp_Mod();
    }
    public static _IBinOp create_EuclidianMod() {
      return new BinOp_EuclidianMod();
    }
    public static _IBinOp create_Implies() {
      return new BinOp_Implies();
    }
    public static _IBinOp create_In() {
      return new BinOp_In();
    }
    public static _IBinOp create_NotIn() {
      return new BinOp_NotIn();
    }
    public static _IBinOp create_SetDifference() {
      return new BinOp_SetDifference();
    }
    public static _IBinOp create_Concat() {
      return new BinOp_Concat();
    }
    public static _IBinOp create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new BinOp_Passthrough(_a0);
    }
    public bool is_Eq { get { return this is BinOp_Eq; } }
    public bool is_Neq { get { return this is BinOp_Neq; } }
    public bool is_Div { get { return this is BinOp_Div; } }
    public bool is_EuclidianDiv { get { return this is BinOp_EuclidianDiv; } }
    public bool is_Mod { get { return this is BinOp_Mod; } }
    public bool is_EuclidianMod { get { return this is BinOp_EuclidianMod; } }
    public bool is_Implies { get { return this is BinOp_Implies; } }
    public bool is_In { get { return this is BinOp_In; } }
    public bool is_NotIn { get { return this is BinOp_NotIn; } }
    public bool is_SetDifference { get { return this is BinOp_SetDifference; } }
    public bool is_Concat { get { return this is BinOp_Concat; } }
    public bool is_Passthrough { get { return this is BinOp_Passthrough; } }
    public bool dtor_referential {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._referential; }
        return ((BinOp_Neq)d)._referential;
      }
    }
    public bool dtor_nullable {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._nullable; }
        return ((BinOp_Neq)d)._nullable;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((BinOp_Passthrough)d)._a0;
      }
    }
    public abstract _IBinOp DowncastClone();
  }
  public class BinOp_Eq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Eq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Eq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Eq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Eq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Neq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Neq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Neq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Neq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Neq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Div : BinOp {
    public BinOp_Div() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Div();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Div;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Div";
      return s;
    }
  }
  public class BinOp_EuclidianDiv : BinOp {
    public BinOp_EuclidianDiv() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianDiv();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianDiv;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianDiv";
      return s;
    }
  }
  public class BinOp_Mod : BinOp {
    public BinOp_Mod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Mod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Mod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Mod";
      return s;
    }
  }
  public class BinOp_EuclidianMod : BinOp {
    public BinOp_EuclidianMod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianMod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianMod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianMod";
      return s;
    }
  }
  public class BinOp_Implies : BinOp {
    public BinOp_Implies() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Implies();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Implies;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Implies";
      return s;
    }
  }
  public class BinOp_In : BinOp {
    public BinOp_In() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_In();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_In;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.In";
      return s;
    }
  }
  public class BinOp_NotIn : BinOp {
    public BinOp_NotIn() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_NotIn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_NotIn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.NotIn";
      return s;
    }
  }
  public class BinOp_SetDifference : BinOp {
    public BinOp_SetDifference() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetDifference();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetDifference;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetDifference";
      return s;
    }
  }
  public class BinOp_Concat : BinOp {
    public BinOp_Concat() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Concat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Concat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Concat";
      return s;
    }
  }
  public class BinOp_Passthrough : BinOp {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public BinOp_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IExpression {
    bool is_Literal { get; }
    bool is_Ident { get; }
    bool is_Companion { get; }
    bool is_Tuple { get; }
    bool is_New { get; }
    bool is_NewArray { get; }
    bool is_DatatypeValue { get; }
    bool is_Convert { get; }
    bool is_SeqConstruct { get; }
    bool is_SeqValue { get; }
    bool is_SetValue { get; }
    bool is_MapValue { get; }
    bool is_This { get; }
    bool is_Ite { get; }
    bool is_UnOp { get; }
    bool is_BinOp { get; }
    bool is_ArrayLen { get; }
    bool is_Select { get; }
    bool is_SelectFn { get; }
    bool is_Index { get; }
    bool is_IndexRange { get; }
    bool is_TupleSelect { get; }
    bool is_Call { get; }
    bool is_Lambda { get; }
    bool is_BetaRedex { get; }
    bool is_IIFE { get; }
    bool is_Apply { get; }
    bool is_TypeTest { get; }
    bool is_InitializationValue { get; }
    bool is_BoolBoundedPool { get; }
    bool is_SetBoundedPool { get; }
    bool is_SeqBoundedPool { get; }
    bool is_IntRange { get; }
    DAST._ILiteral dtor_Literal_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 { get; }
    Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Dafny.ISequence<DAST._IExpression> dtor_dims { get; }
    DAST._IType dtor_typ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_variant { get; }
    bool dtor_isCo { get; }
    Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IType dtor_from { get; }
    DAST._IExpression dtor_length { get; }
    DAST._IExpression dtor_elem { get; }
    Dafny.ISequence<DAST._IExpression> dtor_elements { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems { get; }
    DAST._IExpression dtor_cond { get; }
    DAST._IExpression dtor_thn { get; }
    DAST._IExpression dtor_els { get; }
    DAST._IUnaryOp dtor_unOp { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IBinOp dtor_op { get; }
    DAST._IExpression dtor_left { get; }
    DAST._IExpression dtor_right { get; }
    BigInteger dtor_dim { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    bool dtor_isConstant { get; }
    bool dtor_onDatatype { get; }
    bool dtor_isStatic { get; }
    BigInteger dtor_arity { get; }
    DAST._ICollKind dtor_collKind { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    bool dtor_isArray { get; }
    DAST._IOptional<DAST._IExpression> dtor_low { get; }
    DAST._IOptional<DAST._IExpression> dtor_high { get; }
    BigInteger dtor_index { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    DAST._IType dtor_retType { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values { get; }
    DAST._IExpression dtor_iifeBody { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType { get; }
    DAST._IExpression dtor_of { get; }
    bool dtor_includeDuplicates { get; }
    DAST._IExpression dtor_lo { get; }
    DAST._IExpression dtor_hi { get; }
    _IExpression DowncastClone();
  }
  public abstract class Expression : _IExpression {
    public Expression() {
    }
    private static readonly DAST._IExpression theDefault = create_Literal(DAST.Literal.Default());
    public static DAST._IExpression Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IExpression> _TYPE = new Dafny.TypeDescriptor<DAST._IExpression>(DAST.Expression.Default());
    public static Dafny.TypeDescriptor<DAST._IExpression> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpression create_Literal(DAST._ILiteral _a0) {
      return new Expression_Literal(_a0);
    }
    public static _IExpression create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expression_Ident(_a0);
    }
    public static _IExpression create_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) {
      return new Expression_Companion(_a0);
    }
    public static _IExpression create_Tuple(Dafny.ISequence<DAST._IExpression> _a0) {
      return new Expression_Tuple(_a0);
    }
    public static _IExpression create_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_New(path, typeArgs, args);
    }
    public static _IExpression create_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) {
      return new Expression_NewArray(dims, typ);
    }
    public static _IExpression create_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) {
      return new Expression_DatatypeValue(path, typeArgs, variant, isCo, contents);
    }
    public static _IExpression create_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) {
      return new Expression_Convert(@value, @from, typ);
    }
    public static _IExpression create_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) {
      return new Expression_SeqConstruct(length, elem);
    }
    public static _IExpression create_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) {
      return new Expression_SeqValue(elements, typ);
    }
    public static _IExpression create_SetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_SetValue(elements);
    }
    public static _IExpression create_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) {
      return new Expression_MapValue(mapElems);
    }
    public static _IExpression create_This() {
      return new Expression_This();
    }
    public static _IExpression create_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) {
      return new Expression_Ite(cond, thn, els);
    }
    public static _IExpression create_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) {
      return new Expression_UnOp(unOp, expr);
    }
    public static _IExpression create_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) {
      return new Expression_BinOp(op, left, right);
    }
    public static _IExpression create_ArrayLen(DAST._IExpression expr, BigInteger dim) {
      return new Expression_ArrayLen(expr, dim);
    }
    public static _IExpression create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) {
      return new Expression_Select(expr, field, isConstant, onDatatype);
    }
    public static _IExpression create_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) {
      return new Expression_SelectFn(expr, field, onDatatype, isStatic, arity);
    }
    public static _IExpression create_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) {
      return new Expression_Index(expr, collKind, indices);
    }
    public static _IExpression create_IndexRange(DAST._IExpression expr, bool isArray, DAST._IOptional<DAST._IExpression> low, DAST._IOptional<DAST._IExpression> high) {
      return new Expression_IndexRange(expr, isArray, low, high);
    }
    public static _IExpression create_TupleSelect(DAST._IExpression expr, BigInteger index) {
      return new Expression_TupleSelect(expr, index);
    }
    public static _IExpression create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Call(@on, name, typeArgs, args);
    }
    public static _IExpression create_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) {
      return new Expression_Lambda(@params, retType, body);
    }
    public static _IExpression create_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) {
      return new Expression_BetaRedex(values, retType, expr);
    }
    public static _IExpression create_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) {
      return new Expression_IIFE(name, typ, @value, iifeBody);
    }
    public static _IExpression create_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Apply(expr, args);
    }
    public static _IExpression create_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) {
      return new Expression_TypeTest(@on, dType, variant);
    }
    public static _IExpression create_InitializationValue(DAST._IType typ) {
      return new Expression_InitializationValue(typ);
    }
    public static _IExpression create_BoolBoundedPool() {
      return new Expression_BoolBoundedPool();
    }
    public static _IExpression create_SetBoundedPool(DAST._IExpression of) {
      return new Expression_SetBoundedPool(of);
    }
    public static _IExpression create_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) {
      return new Expression_SeqBoundedPool(of, includeDuplicates);
    }
    public static _IExpression create_IntRange(DAST._IExpression lo, DAST._IExpression hi) {
      return new Expression_IntRange(lo, hi);
    }
    public bool is_Literal { get { return this is Expression_Literal; } }
    public bool is_Ident { get { return this is Expression_Ident; } }
    public bool is_Companion { get { return this is Expression_Companion; } }
    public bool is_Tuple { get { return this is Expression_Tuple; } }
    public bool is_New { get { return this is Expression_New; } }
    public bool is_NewArray { get { return this is Expression_NewArray; } }
    public bool is_DatatypeValue { get { return this is Expression_DatatypeValue; } }
    public bool is_Convert { get { return this is Expression_Convert; } }
    public bool is_SeqConstruct { get { return this is Expression_SeqConstruct; } }
    public bool is_SeqValue { get { return this is Expression_SeqValue; } }
    public bool is_SetValue { get { return this is Expression_SetValue; } }
    public bool is_MapValue { get { return this is Expression_MapValue; } }
    public bool is_This { get { return this is Expression_This; } }
    public bool is_Ite { get { return this is Expression_Ite; } }
    public bool is_UnOp { get { return this is Expression_UnOp; } }
    public bool is_BinOp { get { return this is Expression_BinOp; } }
    public bool is_ArrayLen { get { return this is Expression_ArrayLen; } }
    public bool is_Select { get { return this is Expression_Select; } }
    public bool is_SelectFn { get { return this is Expression_SelectFn; } }
    public bool is_Index { get { return this is Expression_Index; } }
    public bool is_IndexRange { get { return this is Expression_IndexRange; } }
    public bool is_TupleSelect { get { return this is Expression_TupleSelect; } }
    public bool is_Call { get { return this is Expression_Call; } }
    public bool is_Lambda { get { return this is Expression_Lambda; } }
    public bool is_BetaRedex { get { return this is Expression_BetaRedex; } }
    public bool is_IIFE { get { return this is Expression_IIFE; } }
    public bool is_Apply { get { return this is Expression_Apply; } }
    public bool is_TypeTest { get { return this is Expression_TypeTest; } }
    public bool is_InitializationValue { get { return this is Expression_InitializationValue; } }
    public bool is_BoolBoundedPool { get { return this is Expression_BoolBoundedPool; } }
    public bool is_SetBoundedPool { get { return this is Expression_SetBoundedPool; } }
    public bool is_SeqBoundedPool { get { return this is Expression_SeqBoundedPool; } }
    public bool is_IntRange { get { return this is Expression_IntRange; } }
    public DAST._ILiteral dtor_Literal_a0 {
      get {
        var d = this;
        return ((Expression_Literal)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((Expression_Ident)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 {
      get {
        var d = this;
        return ((Expression_Companion)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Expression_Tuple)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._path; }
        return ((Expression_DatatypeValue)d)._path;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._typeArgs; }
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._typeArgs; }
        return ((Expression_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._args; }
        if (d is Expression_Call) { return ((Expression_Call)d)._args; }
        return ((Expression_Apply)d)._args;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_dims {
      get {
        var d = this;
        return ((Expression_NewArray)d)._dims;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        if (d is Expression_NewArray) { return ((Expression_NewArray)d)._typ; }
        if (d is Expression_Convert) { return ((Expression_Convert)d)._typ; }
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._typ; }
        if (d is Expression_IIFE) { return ((Expression_IIFE)d)._typ; }
        return ((Expression_InitializationValue)d)._typ;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_variant {
      get {
        var d = this;
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._variant; }
        return ((Expression_TypeTest)d)._variant;
      }
    }
    public bool dtor_isCo {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._isCo;
      }
    }
    public Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._contents;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        if (d is Expression_Convert) { return ((Expression_Convert)d)._value; }
        return ((Expression_IIFE)d)._value;
      }
    }
    public DAST._IType dtor_from {
      get {
        var d = this;
        return ((Expression_Convert)d)._from;
      }
    }
    public DAST._IExpression dtor_length {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._length;
      }
    }
    public DAST._IExpression dtor_elem {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._elem;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_elements {
      get {
        var d = this;
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._elements; }
        return ((Expression_SetValue)d)._elements;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems {
      get {
        var d = this;
        return ((Expression_MapValue)d)._mapElems;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        return ((Expression_Ite)d)._cond;
      }
    }
    public DAST._IExpression dtor_thn {
      get {
        var d = this;
        return ((Expression_Ite)d)._thn;
      }
    }
    public DAST._IExpression dtor_els {
      get {
        var d = this;
        return ((Expression_Ite)d)._els;
      }
    }
    public DAST._IUnaryOp dtor_unOp {
      get {
        var d = this;
        return ((Expression_UnOp)d)._unOp;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is Expression_UnOp) { return ((Expression_UnOp)d)._expr; }
        if (d is Expression_ArrayLen) { return ((Expression_ArrayLen)d)._expr; }
        if (d is Expression_Select) { return ((Expression_Select)d)._expr; }
        if (d is Expression_SelectFn) { return ((Expression_SelectFn)d)._expr; }
        if (d is Expression_Index) { return ((Expression_Index)d)._expr; }
        if (d is Expression_IndexRange) { return ((Expression_IndexRange)d)._expr; }
        if (d is Expression_TupleSelect) { return ((Expression_TupleSelect)d)._expr; }
        if (d is Expression_BetaRedex) { return ((Expression_BetaRedex)d)._expr; }
        return ((Expression_Apply)d)._expr;
      }
    }
    public DAST._IBinOp dtor_op {
      get {
        var d = this;
        return ((Expression_BinOp)d)._op;
      }
    }
    public DAST._IExpression dtor_left {
      get {
        var d = this;
        return ((Expression_BinOp)d)._left;
      }
    }
    public DAST._IExpression dtor_right {
      get {
        var d = this;
        return ((Expression_BinOp)d)._right;
      }
    }
    public BigInteger dtor_dim {
      get {
        var d = this;
        return ((Expression_ArrayLen)d)._dim;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._field; }
        return ((Expression_SelectFn)d)._field;
      }
    }
    public bool dtor_isConstant {
      get {
        var d = this;
        return ((Expression_Select)d)._isConstant;
      }
    }
    public bool dtor_onDatatype {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._onDatatype; }
        return ((Expression_SelectFn)d)._onDatatype;
      }
    }
    public bool dtor_isStatic {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._isStatic;
      }
    }
    public BigInteger dtor_arity {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._arity;
      }
    }
    public DAST._ICollKind dtor_collKind {
      get {
        var d = this;
        return ((Expression_Index)d)._collKind;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((Expression_Index)d)._indices;
      }
    }
    public bool dtor_isArray {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._isArray;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_low {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._low;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_high {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._high;
      }
    }
    public BigInteger dtor_index {
      get {
        var d = this;
        return ((Expression_TupleSelect)d)._index;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._on; }
        return ((Expression_TypeTest)d)._on;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._name; }
        return ((Expression_IIFE)d)._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        var d = this;
        return ((Expression_Lambda)d)._params;
      }
    }
    public DAST._IType dtor_retType {
      get {
        var d = this;
        if (d is Expression_Lambda) { return ((Expression_Lambda)d)._retType; }
        return ((Expression_BetaRedex)d)._retType;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        return ((Expression_Lambda)d)._body;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values {
      get {
        var d = this;
        return ((Expression_BetaRedex)d)._values;
      }
    }
    public DAST._IExpression dtor_iifeBody {
      get {
        var d = this;
        return ((Expression_IIFE)d)._iifeBody;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType {
      get {
        var d = this;
        return ((Expression_TypeTest)d)._dType;
      }
    }
    public DAST._IExpression dtor_of {
      get {
        var d = this;
        if (d is Expression_SetBoundedPool) { return ((Expression_SetBoundedPool)d)._of; }
        return ((Expression_SeqBoundedPool)d)._of;
      }
    }
    public bool dtor_includeDuplicates {
      get {
        var d = this;
        return ((Expression_SeqBoundedPool)d)._includeDuplicates;
      }
    }
    public DAST._IExpression dtor_lo {
      get {
        var d = this;
        return ((Expression_IntRange)d)._lo;
      }
    }
    public DAST._IExpression dtor_hi {
      get {
        var d = this;
        return ((Expression_IntRange)d)._hi;
      }
    }
    public abstract _IExpression DowncastClone();
  }
  public class Expression_Literal : Expression {
    public readonly DAST._ILiteral _a0;
    public Expression_Literal(DAST._ILiteral _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Literal(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Literal;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Literal";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Ident : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expression_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ident";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_Companion : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public Expression_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Companion(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Companion;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Companion";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Tuple : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _a0;
    public Expression_Tuple(Dafny.ISequence<DAST._IExpression> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_New : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_New(_path, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_New;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_NewArray : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _dims;
    public readonly DAST._IType _typ;
    public Expression_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) : base() {
      this._dims = dims;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_NewArray(_dims, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_NewArray;
      return oth != null && object.Equals(this._dims, oth._dims) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.NewArray";
      s += "(";
      s += Dafny.Helpers.ToString(this._dims);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_DatatypeValue : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public readonly bool _isCo;
    public readonly Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _contents;
    public Expression_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._variant = variant;
      this._isCo = isCo;
      this._contents = contents;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_DatatypeValue(_path, _typeArgs, _variant, _isCo, _contents);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_DatatypeValue;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._variant, oth._variant) && this._isCo == oth._isCo && object.Equals(this._contents, oth._contents);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._contents));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.DatatypeValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._contents);
      s += ")";
      return s;
    }
  }
  public class Expression_Convert : Expression {
    public readonly DAST._IExpression _value;
    public readonly DAST._IType _from;
    public readonly DAST._IType _typ;
    public Expression_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) : base() {
      this._value = @value;
      this._from = @from;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Convert(_value, _from, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Convert;
      return oth != null && object.Equals(this._value, oth._value) && object.Equals(this._from, oth._from) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._from));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Convert";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._from);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqConstruct : Expression {
    public readonly DAST._IExpression _length;
    public readonly DAST._IExpression _elem;
    public Expression_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) : base() {
      this._length = length;
      this._elem = elem;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqConstruct(_length, _elem);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqConstruct;
      return oth != null && object.Equals(this._length, oth._length) && object.Equals(this._elem, oth._elem);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._length));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elem));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqConstruct";
      s += "(";
      s += Dafny.Helpers.ToString(this._length);
      s += ", ";
      s += Dafny.Helpers.ToString(this._elem);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public readonly DAST._IType _typ;
    public Expression_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) : base() {
      this._elements = elements;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqValue(_elements, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqValue;
      return oth != null && object.Equals(this._elements, oth._elements) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_SetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValue : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _mapElems;
    public Expression_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) : base() {
      this._mapElems = mapElems;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValue(_mapElems);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValue;
      return oth != null && object.Equals(this._mapElems, oth._mapElems);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mapElems));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._mapElems);
      s += ")";
      return s;
    }
  }
  public class Expression_This : Expression {
    public Expression_This() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_This();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_This;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.This";
      return s;
    }
  }
  public class Expression_Ite : Expression {
    public readonly DAST._IExpression _cond;
    public readonly DAST._IExpression _thn;
    public readonly DAST._IExpression _els;
    public Expression_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ite(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ite;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expression_UnOp : Expression {
    public readonly DAST._IUnaryOp _unOp;
    public readonly DAST._IExpression _expr;
    public Expression_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) : base() {
      this._unOp = unOp;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_UnOp(_unOp, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_UnOp;
      return oth != null && object.Equals(this._unOp, oth._unOp) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._unOp));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.UnOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._unOp);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_BinOp : Expression {
    public readonly DAST._IBinOp _op;
    public readonly DAST._IExpression _left;
    public readonly DAST._IExpression _right;
    public Expression_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) : base() {
      this._op = op;
      this._left = left;
      this._right = right;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BinOp(_op, _left, _right);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BinOp;
      return oth != null && object.Equals(this._op, oth._op) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BinOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._op);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ")";
      return s;
    }
  }
  public class Expression_ArrayLen : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _dim;
    public Expression_ArrayLen(DAST._IExpression expr, BigInteger dim) : base() {
      this._expr = expr;
      this._dim = dim;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ArrayLen(_expr, _dim);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ArrayLen;
      return oth != null && object.Equals(this._expr, oth._expr) && this._dim == oth._dim;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dim));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ArrayLen";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dim);
      s += ")";
      return s;
    }
  }
  public class Expression_Select : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _isConstant;
    public readonly bool _onDatatype;
    public Expression_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) : base() {
      this._expr = expr;
      this._field = field;
      this._isConstant = isConstant;
      this._onDatatype = onDatatype;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Select(_expr, _field, _isConstant, _onDatatype);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._isConstant == oth._isConstant && this._onDatatype == oth._onDatatype;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isConstant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isConstant);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ")";
      return s;
    }
  }
  public class Expression_SelectFn : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _onDatatype;
    public readonly bool _isStatic;
    public readonly BigInteger _arity;
    public Expression_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) : base() {
      this._expr = expr;
      this._field = field;
      this._onDatatype = onDatatype;
      this._isStatic = isStatic;
      this._arity = arity;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SelectFn(_expr, _field, _onDatatype, _isStatic, _arity);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SelectFn;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._onDatatype == oth._onDatatype && this._isStatic == oth._isStatic && this._arity == oth._arity;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arity));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SelectFn";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arity);
      s += ")";
      return s;
    }
  }
  public class Expression_Index : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._ICollKind _collKind;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public Expression_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._collKind = collKind;
      this._indices = indices;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Index(_expr, _collKind, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._collKind, oth._collKind) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._collKind));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._collKind);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }
  public class Expression_IndexRange : Expression {
    public readonly DAST._IExpression _expr;
    public readonly bool _isArray;
    public readonly DAST._IOptional<DAST._IExpression> _low;
    public readonly DAST._IOptional<DAST._IExpression> _high;
    public Expression_IndexRange(DAST._IExpression expr, bool isArray, DAST._IOptional<DAST._IExpression> low, DAST._IOptional<DAST._IExpression> high) : base() {
      this._expr = expr;
      this._isArray = isArray;
      this._low = low;
      this._high = high;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IndexRange(_expr, _isArray, _low, _high);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IndexRange;
      return oth != null && object.Equals(this._expr, oth._expr) && this._isArray == oth._isArray && object.Equals(this._low, oth._low) && object.Equals(this._high, oth._high);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isArray));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._low));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._high));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IndexRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isArray);
      s += ", ";
      s += Dafny.Helpers.ToString(this._low);
      s += ", ";
      s += Dafny.Helpers.ToString(this._high);
      s += ")";
      return s;
    }
  }
  public class Expression_TupleSelect : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _index;
    public Expression_TupleSelect(DAST._IExpression expr, BigInteger index) : base() {
      this._expr = expr;
      this._index = index;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TupleSelect(_expr, _index);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TupleSelect;
      return oth != null && object.Equals(this._expr, oth._expr) && this._index == oth._index;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._index));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TupleSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._index);
      s += ")";
      return s;
    }
  }
  public class Expression_Call : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Call(_on, _name, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_Lambda : Expression {
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly DAST._IType _retType;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Expression_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._params = @params;
      this._retType = retType;
      this._body = body;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Lambda(_params, _retType, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Lambda;
      return oth != null && object.Equals(this._params, oth._params) && object.Equals(this._retType, oth._retType) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Lambda";
      s += "(";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expression_BetaRedex : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _values;
    public readonly DAST._IType _retType;
    public readonly DAST._IExpression _expr;
    public Expression_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) : base() {
      this._values = values;
      this._retType = retType;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BetaRedex(_values, _retType, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BetaRedex;
      return oth != null && object.Equals(this._values, oth._values) && object.Equals(this._retType, oth._retType) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._values));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BetaRedex";
      s += "(";
      s += Dafny.Helpers.ToString(this._values);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_IIFE : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IExpression _value;
    public readonly DAST._IExpression _iifeBody;
    public Expression_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) : base() {
      this._name = name;
      this._typ = typ;
      this._value = @value;
      this._iifeBody = iifeBody;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IIFE(_name, _typ, _value, _iifeBody);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IIFE;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._value, oth._value) && object.Equals(this._iifeBody, oth._iifeBody);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._iifeBody));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IIFE";
      s += "(";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._iifeBody);
      s += ")";
      return s;
    }
  }
  public class Expression_Apply : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._expr = expr;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Apply(_expr, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Apply;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Apply";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_TypeTest : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _dType;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public Expression_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) : base() {
      this._on = @on;
      this._dType = dType;
      this._variant = variant;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TypeTest(_on, _dType, _variant);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TypeTest;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._dType, oth._dType) && object.Equals(this._variant, oth._variant);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TypeTest";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dType);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_InitializationValue : Expression {
    public readonly DAST._IType _typ;
    public Expression_InitializationValue(DAST._IType typ) : base() {
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_InitializationValue(_typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_InitializationValue;
      return oth != null && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.InitializationValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_BoolBoundedPool : Expression {
    public Expression_BoolBoundedPool() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BoolBoundedPool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BoolBoundedPool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BoolBoundedPool";
      return s;
    }
  }
  public class Expression_SetBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public Expression_SetBoundedPool(DAST._IExpression of) : base() {
      this._of = of;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBoundedPool(_of);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBoundedPool;
      return oth != null && object.Equals(this._of, oth._of);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public readonly bool _includeDuplicates;
    public Expression_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) : base() {
      this._of = of;
      this._includeDuplicates = includeDuplicates;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqBoundedPool(_of, _includeDuplicates);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqBoundedPool;
      return oth != null && object.Equals(this._of, oth._of) && this._includeDuplicates == oth._includeDuplicates;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._includeDuplicates));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ", ";
      s += Dafny.Helpers.ToString(this._includeDuplicates);
      s += ")";
      return s;
    }
  }
  public class Expression_IntRange : Expression {
    public readonly DAST._IExpression _lo;
    public readonly DAST._IExpression _hi;
    public Expression_IntRange(DAST._IExpression lo, DAST._IExpression hi) : base() {
      this._lo = lo;
      this._hi = hi;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IntRange(_lo, _hi);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IntRange;
      return oth != null && object.Equals(this._lo, oth._lo) && object.Equals(this._hi, oth._hi);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hi));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IntRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._lo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hi);
      s += ")";
      return s;
    }
  }

  public interface _IUnaryOp {
    bool is_Not { get; }
    bool is_BitwiseNot { get; }
    bool is_Cardinality { get; }
    _IUnaryOp DowncastClone();
  }
  public abstract class UnaryOp : _IUnaryOp {
    public UnaryOp() {
    }
    private static readonly DAST._IUnaryOp theDefault = create_Not();
    public static DAST._IUnaryOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IUnaryOp> _TYPE = new Dafny.TypeDescriptor<DAST._IUnaryOp>(DAST.UnaryOp.Default());
    public static Dafny.TypeDescriptor<DAST._IUnaryOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnaryOp create_Not() {
      return new UnaryOp_Not();
    }
    public static _IUnaryOp create_BitwiseNot() {
      return new UnaryOp_BitwiseNot();
    }
    public static _IUnaryOp create_Cardinality() {
      return new UnaryOp_Cardinality();
    }
    public bool is_Not { get { return this is UnaryOp_Not; } }
    public bool is_BitwiseNot { get { return this is UnaryOp_BitwiseNot; } }
    public bool is_Cardinality { get { return this is UnaryOp_Cardinality; } }
    public static System.Collections.Generic.IEnumerable<_IUnaryOp> AllSingletonConstructors {
      get {
        yield return UnaryOp.create_Not();
        yield return UnaryOp.create_BitwiseNot();
        yield return UnaryOp.create_Cardinality();
      }
    }
    public abstract _IUnaryOp DowncastClone();
  }
  public class UnaryOp_Not : UnaryOp {
    public UnaryOp_Not() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Not();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Not;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Not";
      return s;
    }
  }
  public class UnaryOp_BitwiseNot : UnaryOp {
    public UnaryOp_BitwiseNot() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_BitwiseNot();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_BitwiseNot;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.BitwiseNot";
      return s;
    }
  }
  public class UnaryOp_Cardinality : UnaryOp {
    public UnaryOp_Cardinality() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Cardinality();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Cardinality;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Cardinality";
      return s;
    }
  }

  public interface _ILiteral {
    bool is_BoolLiteral { get; }
    bool is_IntLiteral { get; }
    bool is_DecLiteral { get; }
    bool is_StringLiteral { get; }
    bool is_CharLiteral { get; }
    bool is_Null { get; }
    bool dtor_BoolLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 { get; }
    DAST._IType dtor_IntLiteral_a1 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 { get; }
    DAST._IType dtor_DecLiteral_a2 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 { get; }
    Dafny.Rune dtor_CharLiteral_a0 { get; }
    DAST._IType dtor_Null_a0 { get; }
    _ILiteral DowncastClone();
  }
  public abstract class Literal : _ILiteral {
    public Literal() {
    }
    private static readonly DAST._ILiteral theDefault = create_BoolLiteral(false);
    public static DAST._ILiteral Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ILiteral> _TYPE = new Dafny.TypeDescriptor<DAST._ILiteral>(DAST.Literal.Default());
    public static Dafny.TypeDescriptor<DAST._ILiteral> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ILiteral create_BoolLiteral(bool _a0) {
      return new Literal_BoolLiteral(_a0);
    }
    public static _ILiteral create_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) {
      return new Literal_IntLiteral(_a0, _a1);
    }
    public static _ILiteral create_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) {
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public static _ILiteral create_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Literal_StringLiteral(_a0);
    }
    public static _ILiteral create_CharLiteral(Dafny.Rune _a0) {
      return new Literal_CharLiteral(_a0);
    }
    public static _ILiteral create_Null(DAST._IType _a0) {
      return new Literal_Null(_a0);
    }
    public bool is_BoolLiteral { get { return this is Literal_BoolLiteral; } }
    public bool is_IntLiteral { get { return this is Literal_IntLiteral; } }
    public bool is_DecLiteral { get { return this is Literal_DecLiteral; } }
    public bool is_StringLiteral { get { return this is Literal_StringLiteral; } }
    public bool is_CharLiteral { get { return this is Literal_CharLiteral; } }
    public bool is_Null { get { return this is Literal_Null; } }
    public bool dtor_BoolLiteral_a0 {
      get {
        var d = this;
        return ((Literal_BoolLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_IntLiteral_a1 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a1;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a1;
      }
    }
    public DAST._IType dtor_DecLiteral_a2 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a2;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 {
      get {
        var d = this;
        return ((Literal_StringLiteral)d)._a0;
      }
    }
    public Dafny.Rune dtor_CharLiteral_a0 {
      get {
        var d = this;
        return ((Literal_CharLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_Null_a0 {
      get {
        var d = this;
        return ((Literal_Null)d)._a0;
      }
    }
    public abstract _ILiteral DowncastClone();
  }
  public class Literal_BoolLiteral : Literal {
    public readonly bool _a0;
    public Literal_BoolLiteral(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_BoolLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_BoolLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.BoolLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_IntLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly DAST._IType _a1;
    public Literal_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_IntLiteral(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_IntLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.IntLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Literal_DecLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly Dafny.ISequence<Dafny.Rune> _a1;
    public readonly DAST._IType _a2;
    public Literal_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
      this._a2 = _a2;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_DecLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1) && object.Equals(this._a2, oth._a2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a2));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.DecLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += this._a1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a2);
      s += ")";
      return s;
    }
  }
  public class Literal_StringLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Literal_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_StringLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_StringLiteral;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.StringLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Literal_CharLiteral : Literal {
    public readonly Dafny.Rune _a0;
    public Literal_CharLiteral(Dafny.Rune _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_CharLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_CharLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.CharLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_Null : Literal {
    public readonly DAST._IType _a0;
    public Literal_Null(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_Null(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_Null;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.Null";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
} // end of namespace DAST
namespace DAM {

  public partial class __default {
    public static DAM._IOption<Dafny.IMap<__K, __V>> mapOption<__K, __V>(Dafny.IMap<__K, DAM._IOption<__V>> m) {
      DAM._IOption<Dafny.IMap<__K, __V>> r = DAM.Option<Dafny.IMap<__K, __V>>.Default();
      Dafny.ISet<_System._ITuple2<__K, DAM._IOption<__V>>> items;
      items = Dafny.Map<__K, DAM._IOption<__V>>.Items((m));
      Dafny.IMap<__K, __V> res;
      res = Dafny.Map<__K, __V>.FromElements();
      while (!(items).Equals(Dafny.Set<_System._ITuple2<__K, DAM._IOption<__V>>>.FromElements())) {
        _System._ITuple2<__K, DAM._IOption<__V>> item;
        foreach (_System._ITuple2<__K, DAM._IOption<__V>> _assign_such_that_0 in (items).Elements) {
          item = (_System._ITuple2<__K, DAM._IOption<__V>>)_assign_such_that_0;
          if ((items).Contains(item)) {
            goto after__ASSIGN_SUCH_THAT_0;
          }
        }
        throw new System.Exception("assign-such-that search produced no value (line 25)");
      after__ASSIGN_SUCH_THAT_0:;
        DAM._IOption<__V> _source0 = (item).dtor__1;
        if (_source0.is_None) {
          r = DAM.Option<Dafny.IMap<__K, __V>>.create_None();
          return r;
        } else {
          __V __mcc_h0 = _source0.dtor_value;
          __V value = __mcc_h0;
          res = Dafny.Map<__K, __V>.Update(res, (item).dtor__0, value);
        }
        items = Dafny.Set<_System._ITuple2<__K, DAM._IOption<__V>>>.Difference(items, Dafny.Set<_System._ITuple2<__K, DAM._IOption<__V>>>.FromElements(item));
      }
      r = DAM.Option<Dafny.IMap<__K, __V>>.create_Some(res);
      return r;
    }
    public static DAM._IOption<DAM._IPos> SynthPos(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IPos> g, DAM._IExpr e) {
      DAM._IExpr _source1 = e;
      if (_source1.is_Var) {
        Dafny.ISequence<Dafny.Rune> __mcc_h0 = _source1.dtor_Var_a0;
        Dafny.ISequence<Dafny.Rune> _10_x = __mcc_h0;
        if ((g).Contains(_10_x)) {
          return DAM.Option<DAM._IPos>.create_Some(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IPos>.Select(g, _10_x));
        } else {
          return DAM.Option<DAM._IPos>.create_None();
        }
      } else if (_source1.is_Unit) {
        return DAM.Option<DAM._IPos>.create_Some(DAM.Pos.create_Unit());
      } else if (_source1.is_Bool) {
        bool _11___mcc_h1 = _source1.dtor_Bool_a0;
        return DAM.Option<DAM._IPos>.create_Some(DAM.Pos.create_Bool());
      } else if (_source1.is_Int) {
        BigInteger _12___mcc_h2 = _source1.dtor_Int_a0;
        return DAM.Option<DAM._IPos>.create_Some(DAM.Pos.create_Int());
      } else if (_source1.is_Thunk) {
        DAM._IStmt _13___mcc_h3 = _source1.dtor_Thunk_a0;
        DAM._IStmt _14_s = _13___mcc_h3;
        DAM._IOption<DAM._INeg> _source2 = DAM.__default.SynthNeg(g, _14_s);
        if (_source2.is_None) {
          return DAM.Option<DAM._IPos>.create_None();
        } else {
          DAM._INeg _15___mcc_h5 = _source2.dtor_value;
          DAM._INeg _16_t = _15___mcc_h5;
          return DAM.Option<DAM._IPos>.create_Some(DAM.Pos.create_Thunk(_16_t));
        }
      } else {
        DAM.Ptr<DAM._IVal> _17___mcc_h4 = _source1.dtor_Ref_a0;
        DAM.Ptr<DAM._IVal> _18_p = _17___mcc_h4;
        return DAM.Option<DAM._IPos>.create_None();
      }
    }
    public static bool CheckPos(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IPos> g, DAM._IExpr e, DAM._IPos t) {
      return object.Equals(DAM.__default.SynthPos(g, e), DAM.Option<DAM._IPos>.create_Some(t));
    }
    public static bool CheckNeg(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IPos> g, DAM._IStmt s, DAM._INeg t) {
      return object.Equals(DAM.__default.SynthNeg(g, s), DAM.Option<DAM._INeg>.create_Some(t));
    }
    public static DAM._IOption<DAM._INeg> SynthNeg(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IPos> g, DAM._IStmt s) {
      DAM._IStmt _source3 = s;
      if (_source3.is_Pure) {
        DAM._IExpr _19___mcc_h0 = _source3.dtor_Pure_a0;
        DAM._IExpr _20_e = _19___mcc_h0;
        DAM._IOption<DAM._IPos> _source4 = DAM.__default.SynthPos(g, _20_e);
        if (_source4.is_None) {
          return DAM.Option<DAM._INeg>.create_None();
        } else {
          DAM._IPos _21___mcc_h60 = _source4.dtor_value;
          DAM._IPos _22_t = _21___mcc_h60;
          return DAM.Option<DAM._INeg>.create_Some(DAM.Neg.create_Value(_22_t));
        }
      } else if (_source3.is_Bind) {
        DAM._IStmt _23___mcc_h2 = _source3.dtor_lhs;
        Dafny.ISequence<Dafny.Rune> _24___mcc_h3 = _source3.dtor_var__;
        DAM._IStmt _25___mcc_h4 = _source3.dtor_rhs;
        DAM._IStmt _26_rhs = _25___mcc_h4;
        Dafny.ISequence<Dafny.Rune> _27_var__ = _24___mcc_h3;
        DAM._IStmt _28_lhs = _23___mcc_h2;
        DAM._IOption<DAM._INeg> _source5 = DAM.__default.SynthNeg(g, _28_lhs);
        if (_source5.is_None) {
          return DAM.Option<DAM._INeg>.create_None();
        } else {
          DAM._INeg _29___mcc_h62 = _source5.dtor_value;
          DAM._INeg _source6 = _29___mcc_h62;
          if (_source6.is_Value) {
            DAM._IPos _30___mcc_h64 = _source6.dtor_Value_a0;
            DAM._IPos _31_t = _30___mcc_h64;
            return DAM.__default.SynthNeg(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IPos>.Update(g, _27_var__, _31_t), _26_rhs);
          } else if (_source6.is_Function) {
            DAM._IPos _32___mcc_h66 = _source6.dtor_dom;
            DAM._INeg _33___mcc_h67 = _source6.dtor_cod;
            return DAM.Option<DAM._INeg>.create_None();
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._INeg> _34___mcc_h70 = _source6.dtor_fields;
            return DAM.Option<DAM._INeg>.create_None();
          }
        }
      } else if (_source3.is_Ite) {
        DAM._IExpr _35___mcc_h8 = _source3.dtor_guard;
        DAM._IStmt _36___mcc_h9 = _source3.dtor_then__;
        DAM._IStmt _37___mcc_h10 = _source3.dtor_else__;
        DAM._IStmt _38_else__ = _37___mcc_h10;
        DAM._IStmt _39_then__ = _36___mcc_h9;
        DAM._IExpr _40_guard = _35___mcc_h8;
        if (DAM.__default.CheckPos(g, _40_guard, DAM.Pos.create_Bool())) {
          DAM._IOption<DAM._INeg> _41_valueOrError0 = DAM.__default.SynthNeg(g, _39_then__);
          if ((_41_valueOrError0).IsFailure()) {
            return (_41_valueOrError0).PropagateFailure();
          } else {
            DAM._INeg _42_t = (_41_valueOrError0).Extract();
            if (DAM.__default.CheckNeg(g, _38_else__, _42_t)) {
              return DAM.Option<DAM._INeg>.create_Some(_42_t);
            } else {
              return DAM.Option<DAM._INeg>.create_None();
            }
          }
        } else {
          return DAM.Option<DAM._INeg>.create_None();
        }
      } else if (_source3.is_Func) {
        Dafny.ISequence<Dafny.Rune> _43___mcc_h14 = _source3.dtor_bound;
        DAM._IPos _44___mcc_h15 = _source3.dtor_dom;
        DAM._IStmt _45___mcc_h16 = _source3.dtor_body;
        DAM._IStmt _46_body = _45___mcc_h16;
        DAM._IPos _47_dom = _44___mcc_h15;
        Dafny.ISequence<Dafny.Rune> _48_bound = _43___mcc_h14;
        DAM._IOption<DAM._INeg> _49_valueOrError1 = DAM.__default.SynthNeg(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IPos>.Update(g, _48_bound, _47_dom), _46_body);
        if ((_49_valueOrError1).IsFailure()) {
          return (_49_valueOrError1).PropagateFailure();
        } else {
          DAM._INeg _50_cod = (_49_valueOrError1).Extract();
          return DAM.Option<DAM._INeg>.create_Some(DAM.Neg.create_Function(_47_dom, _50_cod));
        }
      } else if (_source3.is_Call) {
        DAM._IStmt _51___mcc_h20 = _source3.dtor_func;
        DAM._IExpr _52___mcc_h21 = _source3.dtor_arg;
        DAM._IExpr _53_arg = _52___mcc_h21;
        DAM._IStmt _54_func = _51___mcc_h20;
        DAM._IOption<DAM._INeg> _source7 = DAM.__default.SynthNeg(g, _54_func);
        if (_source7.is_None) {
          return DAM.Option<DAM._INeg>.create_None();
        } else {
          DAM._INeg _55___mcc_h72 = _source7.dtor_value;
          DAM._INeg _source8 = _55___mcc_h72;
          if (_source8.is_Value) {
            DAM._IPos _56___mcc_h74 = _source8.dtor_Value_a0;
            return DAM.Option<DAM._INeg>.create_None();
          } else if (_source8.is_Function) {
            DAM._IPos _57___mcc_h76 = _source8.dtor_dom;
            DAM._INeg _58___mcc_h77 = _source8.dtor_cod;
            DAM._INeg _59_cod = _58___mcc_h77;
            DAM._IPos _60_dom = _57___mcc_h76;
            if (DAM.__default.CheckPos(g, _53_arg, _60_dom)) {
              return DAM.Option<DAM._INeg>.create_Some(_59_cod);
            } else {
              return DAM.Option<DAM._INeg>.create_None();
            }
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._INeg> _61___mcc_h80 = _source8.dtor_fields;
            return DAM.Option<DAM._INeg>.create_None();
          }
        }
      } else if (_source3.is_Record) {
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IStmt> _62___mcc_h24 = _source3.dtor_fields;
        return DAM.Option<DAM._INeg>.create_None();
      } else if (_source3.is_Select) {
        DAM._IStmt _63___mcc_h26 = _source3.dtor_record;
        Dafny.ISequence<Dafny.Rune> _64___mcc_h27 = _source3.dtor_field;
        Dafny.ISequence<Dafny.Rune> _65_field = _64___mcc_h27;
        DAM._IStmt _66_record = _63___mcc_h26;
        DAM._IOption<DAM._INeg> _source9 = DAM.__default.SynthNeg(g, _66_record);
        if (_source9.is_None) {
          return DAM.Option<DAM._INeg>.create_None();
        } else {
          DAM._INeg _67___mcc_h82 = _source9.dtor_value;
          DAM._INeg _source10 = _67___mcc_h82;
          if (_source10.is_Value) {
            DAM._IPos _68___mcc_h84 = _source10.dtor_Value_a0;
            return DAM.Option<DAM._INeg>.create_None();
          } else if (_source10.is_Function) {
            DAM._IPos _69___mcc_h86 = _source10.dtor_dom;
            DAM._INeg _70___mcc_h87 = _source10.dtor_cod;
            return DAM.Option<DAM._INeg>.create_None();
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._INeg> _71___mcc_h90 = _source10.dtor_fields;
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._INeg> _72_fields = _71___mcc_h90;
            if ((_72_fields).Contains(_65_field)) {
              return DAM.Option<DAM._INeg>.create_Some(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._INeg>.Select(_72_fields, _65_field));
            } else {
              return DAM.Option<DAM._INeg>.create_None();
            }
          }
        }
      } else if (_source3.is_Force) {
        DAM._IExpr _73___mcc_h30 = _source3.dtor_Force_a0;
        DAM._IExpr _74_expr = _73___mcc_h30;
        DAM._IOption<DAM._IPos> _source11 = DAM.__default.SynthPos(g, _74_expr);
        if (_source11.is_None) {
          return DAM.Option<DAM._INeg>.create_None();
        } else {
          DAM._IPos _75___mcc_h92 = _source11.dtor_value;
          DAM._IPos _source12 = _75___mcc_h92;
          if (_source12.is_Unit) {
            return DAM.Option<DAM._INeg>.create_None();
          } else if (_source12.is_Bool) {
            return DAM.Option<DAM._INeg>.create_None();
          } else if (_source12.is_Int) {
            return DAM.Option<DAM._INeg>.create_None();
          } else if (_source12.is_Thunk) {
            DAM._INeg _76___mcc_h94 = _source12.dtor_Thunk_a0;
            DAM._INeg _77_t = _76___mcc_h94;
            return DAM.Option<DAM._INeg>.create_Some(_77_t);
          } else if (_source12.is_Ref) {
            DAM._IPos _78___mcc_h96 = _source12.dtor_Ref_a0;
            return DAM.Option<DAM._INeg>.create_None();
          } else {
            DAM._INeg _79___mcc_h98 = _source12.dtor_Stack_a0;
            return DAM.Option<DAM._INeg>.create_None();
          }
        }
      } else if (_source3.is_Read) {
        DAM._IExpr _80___mcc_h32 = _source3.dtor_ref;
        Dafny.ISequence<Dafny.Rune> _81___mcc_h33 = _source3.dtor_var__;
        DAM._IStmt _82___mcc_h34 = _source3.dtor_cont;
        return DAM.Option<DAM._INeg>.create_None();
      } else if (_source3.is_Write) {
        DAM._IExpr _83___mcc_h38 = _source3.dtor_lvalue;
        DAM._IExpr _84___mcc_h39 = _source3.dtor_rvalue;
        DAM._IStmt _85___mcc_h40 = _source3.dtor_next;
        return DAM.Option<DAM._INeg>.create_None();
      } else if (_source3.is_Print) {
        DAM._IExpr _86___mcc_h44 = _source3.dtor_Print_a0;
        DAM._IStmt _87___mcc_h45 = _source3.dtor_next;
        DAM._IStmt _88_next = _87___mcc_h45;
        DAM._IExpr _89_expr = _86___mcc_h44;
        DAM._IOption<DAM._IPos> _source13 = DAM.__default.SynthPos(g, _89_expr);
        if (_source13.is_None) {
          return DAM.Option<DAM._INeg>.create_None();
        } else {
          DAM._IPos _90___mcc_h100 = _source13.dtor_value;
          return DAM.__default.SynthNeg(g, _88_next);
        }
      } else if (_source3.is_Rec) {
        Dafny.ISequence<Dafny.Rune> _91___mcc_h48 = _source3.dtor_bound;
        DAM._IStmt _92___mcc_h49 = _source3.dtor_body;
        return DAM.Option<DAM._INeg>.create_None();
      } else if (_source3.is_LetCS) {
        Dafny.ISequence<Dafny.Rune> _93___mcc_h52 = _source3.dtor_bound;
        DAM._IStmt _94___mcc_h53 = _source3.dtor_body;
        return DAM.Option<DAM._INeg>.create_None();
      } else {
        DAM._IExpr _95___mcc_h56 = _source3.dtor_stack;
        DAM._IStmt _96___mcc_h57 = _source3.dtor_init;
        return DAM.Option<DAM._INeg>.create_None();
      }
    }
    public static DAM._IStmt Let(DAM._IExpr lhs, Dafny.ISequence<Dafny.Rune> var__, DAM._IPos ty, DAM._IStmt rhs) {
      return DAM.Stmt.create_Call(DAM.Stmt.create_Func(var__, ty, rhs), lhs);
    }
    public static DAM._IStmt Then(DAM._IStmt lhs, DAM._IStmt rhs) {
      return DAM.Stmt.create_Bind(lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"), rhs);
    }
    public static DAM._IStmt Skip() {
      return DAM.Stmt.create_Pure(DAM.Expr.create_Unit());
    }
    public static DAM._IStmt While(DAM._IStmt guard, DAM._IStmt body, DAM._IStmt next) {
      return DAM.Stmt.create_Rec(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while"), DAM.Stmt.create_Bind(guard, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), DAM.Stmt.create_Ite(DAM.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if")), DAM.__default.Then(body, DAM.Stmt.create_Force(DAM.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while")))), next)));
    }
    public static DAM._IVal Eval(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> env, DAM._IExpr expr) {
      DAM._IExpr _source14 = expr;
      if (_source14.is_Var) {
        Dafny.ISequence<Dafny.Rune> _97___mcc_h0 = _source14.dtor_Var_a0;
        Dafny.ISequence<Dafny.Rune> _98_x = _97___mcc_h0;
        return Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IVal>.Select(env, _98_x);
      } else if (_source14.is_Unit) {
        return DAM.Val.create_Unit();
      } else if (_source14.is_Bool) {
        bool _99___mcc_h1 = _source14.dtor_Bool_a0;
        bool _100_b = _99___mcc_h1;
        return DAM.Val.create_Bool(_100_b);
      } else if (_source14.is_Int) {
        BigInteger _101___mcc_h2 = _source14.dtor_Int_a0;
        BigInteger _102_i = _101___mcc_h2;
        return DAM.Val.create_Int(_102_i);
      } else if (_source14.is_Thunk) {
        DAM._IStmt _103___mcc_h3 = _source14.dtor_Thunk_a0;
        DAM._IStmt _104_c = _103___mcc_h3;
        return DAM.Val.create_Thunk(env, _104_c);
      } else {
        DAM.Ptr<DAM._IVal> _105___mcc_h4 = _source14.dtor_Ref_a0;
        DAM.Ptr<DAM._IVal> _106_ptr = _105___mcc_h4;
        return DAM.Val.create_Ref(_106_ptr);
      }
    }
    public static DAM._IOut Step(_System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> state) {
      _System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> _let_tmp_rhs0 = state;
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _107_env = _let_tmp_rhs0.dtor__0;
      DAM._IStmt _108_comp = _let_tmp_rhs0.dtor__1;
      DAM._IStack _109_stack = _let_tmp_rhs0.dtor__2;
      DAM._IStmt _source15 = _108_comp;
      if (_source15.is_Pure) {
        DAM._IExpr _110___mcc_h0 = _source15.dtor_Pure_a0;
        DAM._IExpr _111_expr = _110___mcc_h0;
        DAM._IOption<_System._ITuple2<DAM._IFrame, DAM._IStack>> _source16 = (_109_stack).Pop();
        if (_source16.is_None) {
          return DAM.Out.create_Terminal(DAM.__default.Eval(_107_env, _111_expr));
        } else {
          _System._ITuple2<DAM._IFrame, DAM._IStack> _112___mcc_h30 = _source16.dtor_value;
          _System._ITuple2<DAM._IFrame, DAM._IStack> _source17 = _112___mcc_h30;
          DAM._IFrame _113___mcc_h31 = _source17.dtor__0;
          DAM._IStack _114___mcc_h32 = _source17.dtor__1;
          DAM._IFrame _source18 = _113___mcc_h31;
          if (_source18.is_Bind) {
            Dafny.ISequence<Dafny.Rune> _115___mcc_h35 = _source18.dtor_var__;
            DAM._IStmt _116___mcc_h36 = _source18.dtor_rhs;
            DAM._IStack _117_stack = _114___mcc_h32;
            DAM._IStmt _118_rhs = _116___mcc_h36;
            Dafny.ISequence<Dafny.Rune> _119_var__ = _115___mcc_h35;
            return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IVal>.Update(_107_env, _119_var__, DAM.__default.Eval(_107_env, _111_expr)), _118_rhs, _117_stack));
          } else if (_source18.is_Call) {
            DAM._IExpr _120___mcc_h39 = _source18.dtor_arg;
            return DAM.Out.create_Stuck();
          } else {
            Dafny.ISequence<Dafny.Rune> _121___mcc_h41 = _source18.dtor_field;
            return DAM.Out.create_Stuck();
          }
        }
      } else if (_source15.is_Bind) {
        DAM._IStmt _122___mcc_h1 = _source15.dtor_lhs;
        Dafny.ISequence<Dafny.Rune> _123___mcc_h2 = _source15.dtor_var__;
        DAM._IStmt _124___mcc_h3 = _source15.dtor_rhs;
        DAM._IStmt _125_rhs = _124___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _126_var__ = _123___mcc_h2;
        DAM._IStmt _127_lhs = _122___mcc_h1;
        return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(_107_env, _127_lhs, DAM.Stack.create_Push(DAM.Frame.create_Bind(_126_var__, _125_rhs), _109_stack)));
      } else if (_source15.is_Ite) {
        DAM._IExpr _128___mcc_h4 = _source15.dtor_guard;
        DAM._IStmt _129___mcc_h5 = _source15.dtor_then__;
        DAM._IStmt _130___mcc_h6 = _source15.dtor_else__;
        DAM._IStmt _131_else__ = _130___mcc_h6;
        DAM._IStmt _132_then__ = _129___mcc_h5;
        DAM._IExpr _133_guard = _128___mcc_h4;
        DAM._IVal _source19 = DAM.__default.Eval(_107_env, _133_guard);
        if (_source19.is_Unit) {
          return DAM.Out.create_Stuck();
        } else if (_source19.is_Bool) {
          bool _134___mcc_h43 = _source19.dtor_Bool_a0;
          bool _135_guard = _134___mcc_h43;
          return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(_107_env, ((_135_guard) ? (_132_then__) : (_131_else__)), _109_stack));
        } else if (_source19.is_Int) {
          BigInteger _136___mcc_h45 = _source19.dtor_Int_a0;
          return DAM.Out.create_Stuck();
        } else if (_source19.is_Thunk) {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _137___mcc_h47 = _source19.dtor_Thunk_a0;
          DAM._IStmt _138___mcc_h48 = _source19.dtor_Thunk_a1;
          return DAM.Out.create_Stuck();
        } else if (_source19.is_Ref) {
          DAM.Ptr<DAM._IVal> _139___mcc_h51 = _source19.dtor_Ref_a0;
          return DAM.Out.create_Stuck();
        } else {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _140___mcc_h53 = _source19.dtor_Stack_a0;
          DAM._IStack _141___mcc_h54 = _source19.dtor_Stack_a1;
          return DAM.Out.create_Stuck();
        }
      } else if (_source15.is_Func) {
        Dafny.ISequence<Dafny.Rune> _142___mcc_h7 = _source15.dtor_bound;
        DAM._IPos _143___mcc_h8 = _source15.dtor_dom;
        DAM._IStmt _144___mcc_h9 = _source15.dtor_body;
        DAM._IStmt _145_body = _144___mcc_h9;
        Dafny.ISequence<Dafny.Rune> _146_bound = _142___mcc_h7;
        DAM._IOption<_System._ITuple2<DAM._IFrame, DAM._IStack>> _source20 = (_109_stack).Pop();
        if (_source20.is_None) {
          return DAM.Out.create_Terminal(DAM.Val.create_Thunk(_107_env, _108_comp));
        } else {
          _System._ITuple2<DAM._IFrame, DAM._IStack> _147___mcc_h57 = _source20.dtor_value;
          _System._ITuple2<DAM._IFrame, DAM._IStack> _source21 = _147___mcc_h57;
          DAM._IFrame _148___mcc_h58 = _source21.dtor__0;
          DAM._IStack _149___mcc_h59 = _source21.dtor__1;
          DAM._IFrame _source22 = _148___mcc_h58;
          if (_source22.is_Bind) {
            Dafny.ISequence<Dafny.Rune> _150___mcc_h62 = _source22.dtor_var__;
            DAM._IStmt _151___mcc_h63 = _source22.dtor_rhs;
            return DAM.Out.create_Stuck();
          } else if (_source22.is_Call) {
            DAM._IExpr _152___mcc_h66 = _source22.dtor_arg;
            DAM._IStack _153_stack = _149___mcc_h59;
            DAM._IExpr _154_arg = _152___mcc_h66;
            return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IVal>.Update(_107_env, _146_bound, DAM.__default.Eval(_107_env, _154_arg)), _145_body, _153_stack));
          } else {
            Dafny.ISequence<Dafny.Rune> _155___mcc_h68 = _source22.dtor_field;
            return DAM.Out.create_Stuck();
          }
        }
      } else if (_source15.is_Call) {
        DAM._IStmt _156___mcc_h10 = _source15.dtor_func;
        DAM._IExpr _157___mcc_h11 = _source15.dtor_arg;
        DAM._IExpr _158_arg = _157___mcc_h11;
        DAM._IStmt _159_func = _156___mcc_h10;
        return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(_107_env, _159_func, DAM.Stack.create_Push(DAM.Frame.create_Call(_158_arg), _109_stack)));
      } else if (_source15.is_Record) {
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IStmt> _160___mcc_h12 = _source15.dtor_fields;
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IStmt> _161_fields = _160___mcc_h12;
        DAM._IOption<_System._ITuple2<DAM._IFrame, DAM._IStack>> _source23 = (_109_stack).Pop();
        if (_source23.is_None) {
          return DAM.Out.create_Terminal(DAM.Val.create_Thunk(_107_env, _108_comp));
        } else {
          _System._ITuple2<DAM._IFrame, DAM._IStack> _162___mcc_h70 = _source23.dtor_value;
          _System._ITuple2<DAM._IFrame, DAM._IStack> _source24 = _162___mcc_h70;
          DAM._IFrame _163___mcc_h71 = _source24.dtor__0;
          DAM._IStack _164___mcc_h72 = _source24.dtor__1;
          DAM._IFrame _source25 = _163___mcc_h71;
          if (_source25.is_Bind) {
            Dafny.ISequence<Dafny.Rune> _165___mcc_h75 = _source25.dtor_var__;
            DAM._IStmt _166___mcc_h76 = _source25.dtor_rhs;
            return DAM.Out.create_Stuck();
          } else if (_source25.is_Call) {
            DAM._IExpr _167___mcc_h79 = _source25.dtor_arg;
            return DAM.Out.create_Stuck();
          } else {
            Dafny.ISequence<Dafny.Rune> _168___mcc_h81 = _source25.dtor_field;
            DAM._IStack _169_stack = _164___mcc_h72;
            Dafny.ISequence<Dafny.Rune> _170_field = _168___mcc_h81;
            if ((_161_fields).Contains(_170_field)) {
              return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(_107_env, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IStmt>.Select(_161_fields, _170_field), _169_stack));
            } else {
              return DAM.Out.create_Stuck();
            }
          }
        }
      } else if (_source15.is_Select) {
        DAM._IStmt _171___mcc_h13 = _source15.dtor_record;
        Dafny.ISequence<Dafny.Rune> _172___mcc_h14 = _source15.dtor_field;
        Dafny.ISequence<Dafny.Rune> _173_field = _172___mcc_h14;
        DAM._IStmt _174_obj = _171___mcc_h13;
        return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(_107_env, _174_obj, DAM.Stack.create_Push(DAM.Frame.create_Select(_173_field), _109_stack)));
      } else if (_source15.is_Force) {
        DAM._IExpr _175___mcc_h15 = _source15.dtor_Force_a0;
        DAM._IExpr _176_thunk = _175___mcc_h15;
        DAM._IVal _source26 = DAM.__default.Eval(_107_env, _176_thunk);
        if (_source26.is_Unit) {
          return DAM.Out.create_Stuck();
        } else if (_source26.is_Bool) {
          bool _177___mcc_h83 = _source26.dtor_Bool_a0;
          return DAM.Out.create_Stuck();
        } else if (_source26.is_Int) {
          BigInteger _178___mcc_h85 = _source26.dtor_Int_a0;
          return DAM.Out.create_Stuck();
        } else if (_source26.is_Thunk) {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _179___mcc_h87 = _source26.dtor_Thunk_a0;
          DAM._IStmt _180___mcc_h88 = _source26.dtor_Thunk_a1;
          DAM._IStmt _181_comp = _180___mcc_h88;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _182_env = _179___mcc_h87;
          return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(_182_env, _181_comp, _109_stack));
        } else if (_source26.is_Ref) {
          DAM.Ptr<DAM._IVal> _183___mcc_h91 = _source26.dtor_Ref_a0;
          return DAM.Out.create_Stuck();
        } else {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _184___mcc_h93 = _source26.dtor_Stack_a0;
          DAM._IStack _185___mcc_h94 = _source26.dtor_Stack_a1;
          return DAM.Out.create_Stuck();
        }
      } else if (_source15.is_Read) {
        DAM._IExpr _186___mcc_h16 = _source15.dtor_ref;
        Dafny.ISequence<Dafny.Rune> _187___mcc_h17 = _source15.dtor_var__;
        DAM._IStmt _188___mcc_h18 = _source15.dtor_cont;
        DAM._IStmt _189_cont = _188___mcc_h18;
        Dafny.ISequence<Dafny.Rune> _190_var__ = _187___mcc_h17;
        DAM._IExpr _191_ref = _186___mcc_h16;
        DAM._IVal _source27 = DAM.__default.Eval(_107_env, _191_ref);
        if (_source27.is_Unit) {
          return DAM.Out.create_Stuck();
        } else if (_source27.is_Bool) {
          bool _192___mcc_h97 = _source27.dtor_Bool_a0;
          return DAM.Out.create_Stuck();
        } else if (_source27.is_Int) {
          BigInteger _193___mcc_h99 = _source27.dtor_Int_a0;
          return DAM.Out.create_Stuck();
        } else if (_source27.is_Thunk) {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _194___mcc_h101 = _source27.dtor_Thunk_a0;
          DAM._IStmt _195___mcc_h102 = _source27.dtor_Thunk_a1;
          return DAM.Out.create_Stuck();
        } else if (_source27.is_Ref) {
          DAM.Ptr<DAM._IVal> _196___mcc_h105 = _source27.dtor_Ref_a0;
          DAM.Ptr<DAM._IVal> _197_ptr = _196___mcc_h105;
          return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IVal>.Update(_107_env, _190_var__, _197_ptr.deref), _189_cont, _109_stack));
        } else {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _198___mcc_h107 = _source27.dtor_Stack_a0;
          DAM._IStack _199___mcc_h108 = _source27.dtor_Stack_a1;
          return DAM.Out.create_Stuck();
        }
      } else if (_source15.is_Write) {
        DAM._IExpr _200___mcc_h19 = _source15.dtor_lvalue;
        DAM._IExpr _201___mcc_h20 = _source15.dtor_rvalue;
        DAM._IStmt _202___mcc_h21 = _source15.dtor_next;
        DAM._IStmt _203_next = _202___mcc_h21;
        DAM._IExpr _204_rval = _201___mcc_h20;
        DAM._IExpr _205_lval = _200___mcc_h19;
        DAM._IVal _source28 = DAM.__default.Eval(_107_env, _205_lval);
        if (_source28.is_Unit) {
          return DAM.Out.create_Stuck();
        } else if (_source28.is_Bool) {
          bool _206___mcc_h111 = _source28.dtor_Bool_a0;
          return DAM.Out.create_Stuck();
        } else if (_source28.is_Int) {
          BigInteger _207___mcc_h113 = _source28.dtor_Int_a0;
          return DAM.Out.create_Stuck();
        } else if (_source28.is_Thunk) {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _208___mcc_h115 = _source28.dtor_Thunk_a0;
          DAM._IStmt _209___mcc_h116 = _source28.dtor_Thunk_a1;
          return DAM.Out.create_Stuck();
        } else if (_source28.is_Ref) {
          DAM.Ptr<DAM._IVal> _210___mcc_h119 = _source28.dtor_Ref_a0;
          DAM.Ptr<DAM._IVal> _211_ptr = _210___mcc_h119;
          return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(_107_env, _203_next, _109_stack));
        } else {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _212___mcc_h121 = _source28.dtor_Stack_a0;
          DAM._IStack _213___mcc_h122 = _source28.dtor_Stack_a1;
          return DAM.Out.create_Stuck();
        }
      } else if (_source15.is_Print) {
        DAM._IExpr _214___mcc_h22 = _source15.dtor_Print_a0;
        DAM._IStmt _215___mcc_h23 = _source15.dtor_next;
        DAM._IStmt _216_next = _215___mcc_h23;
        DAM._IExpr _217_expr = _214___mcc_h22;
        return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(_107_env, _216_next, _109_stack));
      } else if (_source15.is_Rec) {
        Dafny.ISequence<Dafny.Rune> _218___mcc_h24 = _source15.dtor_bound;
        DAM._IStmt _219___mcc_h25 = _source15.dtor_body;
        DAM._IStmt _220_body = _219___mcc_h25;
        Dafny.ISequence<Dafny.Rune> _221_self = _218___mcc_h24;
        return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IVal>.Update(_107_env, _221_self, DAM.Val.create_Thunk(_107_env, _108_comp)), _220_body, _109_stack));
      } else if (_source15.is_LetCS) {
        Dafny.ISequence<Dafny.Rune> _222___mcc_h26 = _source15.dtor_bound;
        DAM._IStmt _223___mcc_h27 = _source15.dtor_body;
        DAM._IStmt _224_body = _223___mcc_h27;
        Dafny.ISequence<Dafny.Rune> _225_bound = _222___mcc_h26;
        return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IVal>.Update(_107_env, _225_bound, DAM.Val.create_Stack(_107_env, _109_stack)), _224_body, _109_stack));
      } else {
        DAM._IExpr _226___mcc_h28 = _source15.dtor_stack;
        DAM._IStmt _227___mcc_h29 = _source15.dtor_init;
        DAM._IStmt _228_init = _227___mcc_h29;
        DAM._IExpr _229_stack = _226___mcc_h28;
        DAM._IVal _source29 = DAM.__default.Eval(_107_env, _229_stack);
        if (_source29.is_Unit) {
          return DAM.Out.create_Stuck();
        } else if (_source29.is_Bool) {
          bool _230___mcc_h125 = _source29.dtor_Bool_a0;
          return DAM.Out.create_Stuck();
        } else if (_source29.is_Int) {
          BigInteger _231___mcc_h127 = _source29.dtor_Int_a0;
          return DAM.Out.create_Stuck();
        } else if (_source29.is_Thunk) {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _232___mcc_h129 = _source29.dtor_Thunk_a0;
          DAM._IStmt _233___mcc_h130 = _source29.dtor_Thunk_a1;
          return DAM.Out.create_Stuck();
        } else if (_source29.is_Ref) {
          DAM.Ptr<DAM._IVal> _234___mcc_h133 = _source29.dtor_Ref_a0;
          return DAM.Out.create_Stuck();
        } else {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _235___mcc_h135 = _source29.dtor_Stack_a0;
          DAM._IStack _236___mcc_h136 = _source29.dtor_Stack_a1;
          DAM._IStack _237_stack = _236___mcc_h136;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _238_env = _235___mcc_h135;
          return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(_238_env, _228_init, _237_stack));
        }
      }
    }
    public static void Run(_System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> s) {
    TAIL_CALL_START:;
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      DAM._IOut _source30 = DAM.__default.Step(s);
      if (_source30.is_Next) {
        _System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> _239___mcc_h0 = _source30.dtor_Next_a0;
        _System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> _240_s = _239___mcc_h0;
        Dafny.Helpers.Print((_System.Tuple2<_System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>, Dafny.ISequence<Dafny.Rune>>.create(_240_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"))));
        _System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> _in0 = _240_s;
        s = _in0;
        goto TAIL_CALL_START;
      } else if (_source30.is_Stuck) {
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("done/stuck\n")).ToVerbatimString(false));
        return;
      } else {
        DAM._IVal _241___mcc_h2 = _source30.dtor_Terminal_a0;
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("done/stuck\n")).ToVerbatimString(false));
        return;
      }
    }
    public static _System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> Initial(DAM._IStmt comp) {
      return _System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IVal>.FromElements(), comp, DAM.Stack.create_Empty());
    }
    public static void _Main(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> __noArgsParameter) {
      DAM.__default.Run(DAM.__default.Initial(DAM.Stmt.create_Bind(DAM.Stmt.create_Pure(DAM.Expr.create_Bool(true)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("x"), DAM.Stmt.create_Ite(DAM.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("x")), DAM.Stmt.create_Pure(DAM.Expr.create_Bool(false)), DAM.Stmt.create_Pure(DAM.Expr.create_Bool(true))))));
      DAM._IExpr _242_fc;
      _242_fc = DAM.Expr.create_Thunk(DAM.Stmt.create_Func(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("y"), DAM.Pos.create_Int(), DAM.Stmt.create_Pure(DAM.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("x")))));
      DAM._IStmt _243_fv;
      _243_fv = DAM.Stmt.create_Force(DAM.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("f")));
      DAM._IExpr _244_x1;
      _244_x1 = DAM.Expr.create_Int(BigInteger.One);
      DAM._IExpr _245_x2;
      _245_x2 = DAM.Expr.create_Int(new BigInteger(2));
      DAM._IExpr _246_z;
      _246_z = DAM.Expr.create_Int(BigInteger.Zero);
      DAM.__default.Run(DAM.__default.Initial(DAM.__default.Let(_244_x1, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("x"), DAM.Pos.create_Int(), DAM.__default.Let(_242_fc, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("f"), DAM.Pos.create_Int(), DAM.__default.Let(_245_x2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("x"), DAM.Pos.create_Int(), DAM.Stmt.create_Call(_243_fv, _246_z))))));
    }
  }

  public interface _IOption<A> {
    bool is_None { get; }
    bool is_Some { get; }
    A dtor_value { get; }
    _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0);
    bool IsFailure();
    DAM._IOption<A> PropagateFailure();
    A Extract();
  }
  public abstract class Option<A> : _IOption<A> {
    public Option() {
    }
    public static DAM._IOption<A> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<DAM._IOption<A>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<DAM._IOption<A>>(DAM.Option<A>.Default());
    }
    public static _IOption<A> create_None() {
      return new Option_None<A>();
    }
    public static _IOption<A> create_Some(A @value) {
      return new Option_Some<A>(@value);
    }
    public bool is_None { get { return this is Option_None<A>; } }
    public bool is_Some { get { return this is Option_Some<A>; } }
    public A dtor_value {
      get {
        var d = this;
        return ((Option_Some<A>)d)._value;
      }
    }
    public abstract _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0);
    public bool IsFailure() {
      return (this).is_None;
    }
    public DAM._IOption<A> PropagateFailure() {
      return DAM.Option<A>.create_None();
    }
    public A Extract() {
      return (this).dtor_value;
    }
  }
  public class Option_None<A> : Option<A> {
    public Option_None() : base() {
    }
    public override _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0) {
      if (this is _IOption<__A> dt) { return dt; }
      return new Option_None<__A>();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Option_None<A>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Option.None";
      return s;
    }
  }
  public class Option_Some<A> : Option<A> {
    public readonly A _value;
    public Option_Some(A @value) : base() {
      this._value = @value;
    }
    public override _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0) {
      if (this is _IOption<__A> dt) { return dt; }
      return new Option_Some<__A>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Option_Some<A>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Option.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }

  public partial class Ptr<A> {
    public Ptr() {
      this.deref = default(A);
    }
    public A deref { get; set; }
    public void __ctor(A expr) {
      (this).deref = expr;
    }
  }

  public interface _IPos {
    bool is_Unit { get; }
    bool is_Bool { get; }
    bool is_Int { get; }
    bool is_Thunk { get; }
    bool is_Ref { get; }
    bool is_Stack { get; }
    DAM._INeg dtor_Thunk_a0 { get; }
    DAM._IPos dtor_Ref_a0 { get; }
    DAM._INeg dtor_Stack_a0 { get; }
    _IPos DowncastClone();
  }
  public abstract class Pos : _IPos {
    public Pos() {
    }
    private static readonly DAM._IPos theDefault = create_Unit();
    public static DAM._IPos Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM._IPos> _TYPE = new Dafny.TypeDescriptor<DAM._IPos>(DAM.Pos.Default());
    public static Dafny.TypeDescriptor<DAM._IPos> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPos create_Unit() {
      return new Pos_Unit();
    }
    public static _IPos create_Bool() {
      return new Pos_Bool();
    }
    public static _IPos create_Int() {
      return new Pos_Int();
    }
    public static _IPos create_Thunk(DAM._INeg _a0) {
      return new Pos_Thunk(_a0);
    }
    public static _IPos create_Ref(DAM._IPos _a0) {
      return new Pos_Ref(_a0);
    }
    public static _IPos create_Stack(DAM._INeg _a0) {
      return new Pos_Stack(_a0);
    }
    public bool is_Unit { get { return this is Pos_Unit; } }
    public bool is_Bool { get { return this is Pos_Bool; } }
    public bool is_Int { get { return this is Pos_Int; } }
    public bool is_Thunk { get { return this is Pos_Thunk; } }
    public bool is_Ref { get { return this is Pos_Ref; } }
    public bool is_Stack { get { return this is Pos_Stack; } }
    public DAM._INeg dtor_Thunk_a0 {
      get {
        var d = this;
        return ((Pos_Thunk)d)._a0;
      }
    }
    public DAM._IPos dtor_Ref_a0 {
      get {
        var d = this;
        return ((Pos_Ref)d)._a0;
      }
    }
    public DAM._INeg dtor_Stack_a0 {
      get {
        var d = this;
        return ((Pos_Stack)d)._a0;
      }
    }
    public abstract _IPos DowncastClone();
  }
  public class Pos_Unit : Pos {
    public Pos_Unit() : base() {
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Unit();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Pos_Unit;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Pos.Unit";
      return s;
    }
  }
  public class Pos_Bool : Pos {
    public Pos_Bool() : base() {
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Pos_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Pos.Bool";
      return s;
    }
  }
  public class Pos_Int : Pos {
    public Pos_Int() : base() {
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Pos_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Pos.Int";
      return s;
    }
  }
  public class Pos_Thunk : Pos {
    public readonly DAM._INeg _a0;
    public Pos_Thunk(DAM._INeg _a0) : base() {
      this._a0 = _a0;
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Thunk(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Pos_Thunk;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Pos.Thunk";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Pos_Ref : Pos {
    public readonly DAM._IPos _a0;
    public Pos_Ref(DAM._IPos _a0) : base() {
      this._a0 = _a0;
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Ref(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Pos_Ref;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Pos.Ref";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Pos_Stack : Pos {
    public readonly DAM._INeg _a0;
    public Pos_Stack(DAM._INeg _a0) : base() {
      this._a0 = _a0;
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Stack(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Pos_Stack;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Pos.Stack";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _INeg {
    bool is_Value { get; }
    bool is_Function { get; }
    bool is_Record { get; }
    DAM._IPos dtor_Value_a0 { get; }
    DAM._IPos dtor_dom { get; }
    DAM._INeg dtor_cod { get; }
    Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._INeg> dtor_fields { get; }
    _INeg DowncastClone();
  }
  public abstract class Neg : _INeg {
    public Neg() {
    }
    private static readonly DAM._INeg theDefault = create_Record(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._INeg>.Empty);
    public static DAM._INeg Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM._INeg> _TYPE = new Dafny.TypeDescriptor<DAM._INeg>(DAM.Neg.Default());
    public static Dafny.TypeDescriptor<DAM._INeg> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INeg create_Value(DAM._IPos _a0) {
      return new Neg_Value(_a0);
    }
    public static _INeg create_Function(DAM._IPos dom, DAM._INeg cod) {
      return new Neg_Function(dom, cod);
    }
    public static _INeg create_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._INeg> fields) {
      return new Neg_Record(fields);
    }
    public bool is_Value { get { return this is Neg_Value; } }
    public bool is_Function { get { return this is Neg_Function; } }
    public bool is_Record { get { return this is Neg_Record; } }
    public DAM._IPos dtor_Value_a0 {
      get {
        var d = this;
        return ((Neg_Value)d)._a0;
      }
    }
    public DAM._IPos dtor_dom {
      get {
        var d = this;
        return ((Neg_Function)d)._dom;
      }
    }
    public DAM._INeg dtor_cod {
      get {
        var d = this;
        return ((Neg_Function)d)._cod;
      }
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._INeg> dtor_fields {
      get {
        var d = this;
        return ((Neg_Record)d)._fields;
      }
    }
    public abstract _INeg DowncastClone();
  }
  public class Neg_Value : Neg {
    public readonly DAM._IPos _a0;
    public Neg_Value(DAM._IPos _a0) : base() {
      this._a0 = _a0;
    }
    public override _INeg DowncastClone() {
      if (this is _INeg dt) { return dt; }
      return new Neg_Value(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Neg_Value;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Neg.Value";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Neg_Function : Neg {
    public readonly DAM._IPos _dom;
    public readonly DAM._INeg _cod;
    public Neg_Function(DAM._IPos dom, DAM._INeg cod) : base() {
      this._dom = dom;
      this._cod = cod;
    }
    public override _INeg DowncastClone() {
      if (this is _INeg dt) { return dt; }
      return new Neg_Function(_dom, _cod);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Neg_Function;
      return oth != null && object.Equals(this._dom, oth._dom) && object.Equals(this._cod, oth._cod);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dom));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cod));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Neg.Function";
      s += "(";
      s += Dafny.Helpers.ToString(this._dom);
      s += ", ";
      s += Dafny.Helpers.ToString(this._cod);
      s += ")";
      return s;
    }
  }
  public class Neg_Record : Neg {
    public readonly Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._INeg> _fields;
    public Neg_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._INeg> fields) : base() {
      this._fields = fields;
    }
    public override _INeg DowncastClone() {
      if (this is _INeg dt) { return dt; }
      return new Neg_Record(_fields);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Neg_Record;
      return oth != null && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Neg.Record";
      s += "(";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
  }

  public interface _IExpr {
    bool is_Var { get; }
    bool is_Unit { get; }
    bool is_Bool { get; }
    bool is_Int { get; }
    bool is_Thunk { get; }
    bool is_Ref { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Var_a0 { get; }
    bool dtor_Bool_a0 { get; }
    BigInteger dtor_Int_a0 { get; }
    DAM._IStmt dtor_Thunk_a0 { get; }
    DAM.Ptr<DAM._IVal> dtor_Ref_a0 { get; }
    _IExpr DowncastClone();
  }
  public abstract class Expr : _IExpr {
    public Expr() {
    }
    private static readonly DAM._IExpr theDefault = create_Var(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAM._IExpr Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM._IExpr> _TYPE = new Dafny.TypeDescriptor<DAM._IExpr>(DAM.Expr.Default());
    public static Dafny.TypeDescriptor<DAM._IExpr> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpr create_Var(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expr_Var(_a0);
    }
    public static _IExpr create_Unit() {
      return new Expr_Unit();
    }
    public static _IExpr create_Bool(bool _a0) {
      return new Expr_Bool(_a0);
    }
    public static _IExpr create_Int(BigInteger _a0) {
      return new Expr_Int(_a0);
    }
    public static _IExpr create_Thunk(DAM._IStmt _a0) {
      return new Expr_Thunk(_a0);
    }
    public static _IExpr create_Ref(DAM.Ptr<DAM._IVal> _a0) {
      return new Expr_Ref(_a0);
    }
    public bool is_Var { get { return this is Expr_Var; } }
    public bool is_Unit { get { return this is Expr_Unit; } }
    public bool is_Bool { get { return this is Expr_Bool; } }
    public bool is_Int { get { return this is Expr_Int; } }
    public bool is_Thunk { get { return this is Expr_Thunk; } }
    public bool is_Ref { get { return this is Expr_Ref; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Var_a0 {
      get {
        var d = this;
        return ((Expr_Var)d)._a0;
      }
    }
    public bool dtor_Bool_a0 {
      get {
        var d = this;
        return ((Expr_Bool)d)._a0;
      }
    }
    public BigInteger dtor_Int_a0 {
      get {
        var d = this;
        return ((Expr_Int)d)._a0;
      }
    }
    public DAM._IStmt dtor_Thunk_a0 {
      get {
        var d = this;
        return ((Expr_Thunk)d)._a0;
      }
    }
    public DAM.Ptr<DAM._IVal> dtor_Ref_a0 {
      get {
        var d = this;
        return ((Expr_Ref)d)._a0;
      }
    }
    public abstract _IExpr DowncastClone();
  }
  public class Expr_Var : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expr_Var(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Var(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Expr_Var;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Expr.Var";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_Unit : Expr {
    public Expr_Unit() : base() {
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Unit();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Expr_Unit;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Expr.Unit";
      return s;
    }
  }
  public class Expr_Bool : Expr {
    public readonly bool _a0;
    public Expr_Bool(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Bool(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Expr_Bool;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Expr.Bool";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expr_Int : Expr {
    public readonly BigInteger _a0;
    public Expr_Int(BigInteger _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Int(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Expr_Int;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Expr.Int";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expr_Thunk : Expr {
    public readonly DAM._IStmt _a0;
    public Expr_Thunk(DAM._IStmt _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Thunk(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Expr_Thunk;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Expr.Thunk";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expr_Ref : Expr {
    public readonly DAM.Ptr<DAM._IVal> _a0;
    public Expr_Ref(DAM.Ptr<DAM._IVal> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Ref(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Expr_Ref;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Expr.Ref";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IStmt {
    bool is_Pure { get; }
    bool is_Bind { get; }
    bool is_Ite { get; }
    bool is_Func { get; }
    bool is_Call { get; }
    bool is_Record { get; }
    bool is_Select { get; }
    bool is_Force { get; }
    bool is_Read { get; }
    bool is_Write { get; }
    bool is_Print { get; }
    bool is_Rec { get; }
    bool is_LetCS { get; }
    bool is_Throw { get; }
    DAM._IExpr dtor_Pure_a0 { get; }
    DAM._IStmt dtor_lhs { get; }
    Dafny.ISequence<Dafny.Rune> dtor_var__ { get; }
    DAM._IStmt dtor_rhs { get; }
    DAM._IExpr dtor_guard { get; }
    DAM._IStmt dtor_then__ { get; }
    DAM._IStmt dtor_else__ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_bound { get; }
    DAM._IPos dtor_dom { get; }
    DAM._IStmt dtor_body { get; }
    DAM._IStmt dtor_func { get; }
    DAM._IExpr dtor_arg { get; }
    Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IStmt> dtor_fields { get; }
    DAM._IStmt dtor_record { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    DAM._IExpr dtor_Force_a0 { get; }
    DAM._IExpr dtor_ref { get; }
    DAM._IStmt dtor_cont { get; }
    DAM._IExpr dtor_lvalue { get; }
    DAM._IExpr dtor_rvalue { get; }
    DAM._IStmt dtor_next { get; }
    DAM._IExpr dtor_Print_a0 { get; }
    DAM._IExpr dtor_stack { get; }
    DAM._IStmt dtor_init { get; }
    _IStmt DowncastClone();
  }
  public abstract class Stmt : _IStmt {
    public Stmt() {
    }
    private static readonly DAM._IStmt theDefault = create_Record(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IStmt>.Empty);
    public static DAM._IStmt Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM._IStmt> _TYPE = new Dafny.TypeDescriptor<DAM._IStmt>(DAM.Stmt.Default());
    public static Dafny.TypeDescriptor<DAM._IStmt> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStmt create_Pure(DAM._IExpr _a0) {
      return new Stmt_Pure(_a0);
    }
    public static _IStmt create_Bind(DAM._IStmt lhs, Dafny.ISequence<Dafny.Rune> var__, DAM._IStmt rhs) {
      return new Stmt_Bind(lhs, var__, rhs);
    }
    public static _IStmt create_Ite(DAM._IExpr guard, DAM._IStmt then__, DAM._IStmt else__) {
      return new Stmt_Ite(guard, then__, else__);
    }
    public static _IStmt create_Func(Dafny.ISequence<Dafny.Rune> bound, DAM._IPos dom, DAM._IStmt body) {
      return new Stmt_Func(bound, dom, body);
    }
    public static _IStmt create_Call(DAM._IStmt func, DAM._IExpr arg) {
      return new Stmt_Call(func, arg);
    }
    public static _IStmt create_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IStmt> fields) {
      return new Stmt_Record(fields);
    }
    public static _IStmt create_Select(DAM._IStmt record, Dafny.ISequence<Dafny.Rune> field) {
      return new Stmt_Select(record, field);
    }
    public static _IStmt create_Force(DAM._IExpr _a0) {
      return new Stmt_Force(_a0);
    }
    public static _IStmt create_Read(DAM._IExpr @ref, Dafny.ISequence<Dafny.Rune> var__, DAM._IStmt cont) {
      return new Stmt_Read(@ref, var__, cont);
    }
    public static _IStmt create_Write(DAM._IExpr lvalue, DAM._IExpr rvalue, DAM._IStmt next) {
      return new Stmt_Write(lvalue, rvalue, next);
    }
    public static _IStmt create_Print(DAM._IExpr _a0, DAM._IStmt next) {
      return new Stmt_Print(_a0, next);
    }
    public static _IStmt create_Rec(Dafny.ISequence<Dafny.Rune> bound, DAM._IStmt body) {
      return new Stmt_Rec(bound, body);
    }
    public static _IStmt create_LetCS(Dafny.ISequence<Dafny.Rune> bound, DAM._IStmt body) {
      return new Stmt_LetCS(bound, body);
    }
    public static _IStmt create_Throw(DAM._IExpr stack, DAM._IStmt init) {
      return new Stmt_Throw(stack, init);
    }
    public bool is_Pure { get { return this is Stmt_Pure; } }
    public bool is_Bind { get { return this is Stmt_Bind; } }
    public bool is_Ite { get { return this is Stmt_Ite; } }
    public bool is_Func { get { return this is Stmt_Func; } }
    public bool is_Call { get { return this is Stmt_Call; } }
    public bool is_Record { get { return this is Stmt_Record; } }
    public bool is_Select { get { return this is Stmt_Select; } }
    public bool is_Force { get { return this is Stmt_Force; } }
    public bool is_Read { get { return this is Stmt_Read; } }
    public bool is_Write { get { return this is Stmt_Write; } }
    public bool is_Print { get { return this is Stmt_Print; } }
    public bool is_Rec { get { return this is Stmt_Rec; } }
    public bool is_LetCS { get { return this is Stmt_LetCS; } }
    public bool is_Throw { get { return this is Stmt_Throw; } }
    public DAM._IExpr dtor_Pure_a0 {
      get {
        var d = this;
        return ((Stmt_Pure)d)._a0;
      }
    }
    public DAM._IStmt dtor_lhs {
      get {
        var d = this;
        return ((Stmt_Bind)d)._lhs;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_var__ {
      get {
        var d = this;
        if (d is Stmt_Bind) { return ((Stmt_Bind)d)._var__; }
        return ((Stmt_Read)d)._var__;
      }
    }
    public DAM._IStmt dtor_rhs {
      get {
        var d = this;
        return ((Stmt_Bind)d)._rhs;
      }
    }
    public DAM._IExpr dtor_guard {
      get {
        var d = this;
        return ((Stmt_Ite)d)._guard;
      }
    }
    public DAM._IStmt dtor_then__ {
      get {
        var d = this;
        return ((Stmt_Ite)d)._then__;
      }
    }
    public DAM._IStmt dtor_else__ {
      get {
        var d = this;
        return ((Stmt_Ite)d)._else__;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_bound {
      get {
        var d = this;
        if (d is Stmt_Func) { return ((Stmt_Func)d)._bound; }
        if (d is Stmt_Rec) { return ((Stmt_Rec)d)._bound; }
        return ((Stmt_LetCS)d)._bound;
      }
    }
    public DAM._IPos dtor_dom {
      get {
        var d = this;
        return ((Stmt_Func)d)._dom;
      }
    }
    public DAM._IStmt dtor_body {
      get {
        var d = this;
        if (d is Stmt_Func) { return ((Stmt_Func)d)._body; }
        if (d is Stmt_Rec) { return ((Stmt_Rec)d)._body; }
        return ((Stmt_LetCS)d)._body;
      }
    }
    public DAM._IStmt dtor_func {
      get {
        var d = this;
        return ((Stmt_Call)d)._func;
      }
    }
    public DAM._IExpr dtor_arg {
      get {
        var d = this;
        return ((Stmt_Call)d)._arg;
      }
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IStmt> dtor_fields {
      get {
        var d = this;
        return ((Stmt_Record)d)._fields;
      }
    }
    public DAM._IStmt dtor_record {
      get {
        var d = this;
        return ((Stmt_Select)d)._record;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((Stmt_Select)d)._field;
      }
    }
    public DAM._IExpr dtor_Force_a0 {
      get {
        var d = this;
        return ((Stmt_Force)d)._a0;
      }
    }
    public DAM._IExpr dtor_ref {
      get {
        var d = this;
        return ((Stmt_Read)d)._ref;
      }
    }
    public DAM._IStmt dtor_cont {
      get {
        var d = this;
        return ((Stmt_Read)d)._cont;
      }
    }
    public DAM._IExpr dtor_lvalue {
      get {
        var d = this;
        return ((Stmt_Write)d)._lvalue;
      }
    }
    public DAM._IExpr dtor_rvalue {
      get {
        var d = this;
        return ((Stmt_Write)d)._rvalue;
      }
    }
    public DAM._IStmt dtor_next {
      get {
        var d = this;
        if (d is Stmt_Write) { return ((Stmt_Write)d)._next; }
        return ((Stmt_Print)d)._next;
      }
    }
    public DAM._IExpr dtor_Print_a0 {
      get {
        var d = this;
        return ((Stmt_Print)d)._a0;
      }
    }
    public DAM._IExpr dtor_stack {
      get {
        var d = this;
        return ((Stmt_Throw)d)._stack;
      }
    }
    public DAM._IStmt dtor_init {
      get {
        var d = this;
        return ((Stmt_Throw)d)._init;
      }
    }
    public abstract _IStmt DowncastClone();
  }
  public class Stmt_Pure : Stmt {
    public readonly DAM._IExpr _a0;
    public Stmt_Pure(DAM._IExpr _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Pure(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_Pure;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.Pure";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Stmt_Bind : Stmt {
    public readonly DAM._IStmt _lhs;
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly DAM._IStmt _rhs;
    public Stmt_Bind(DAM._IStmt lhs, Dafny.ISequence<Dafny.Rune> var__, DAM._IStmt rhs) : base() {
      this._lhs = lhs;
      this._var__ = var__;
      this._rhs = rhs;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Bind(_lhs, _var__, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_Bind;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._var__, oth._var__) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.Bind";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Stmt_Ite : Stmt {
    public readonly DAM._IExpr _guard;
    public readonly DAM._IStmt _then__;
    public readonly DAM._IStmt _else__;
    public Stmt_Ite(DAM._IExpr guard, DAM._IStmt then__, DAM._IStmt else__) : base() {
      this._guard = guard;
      this._then__ = then__;
      this._else__ = else__;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Ite(_guard, _then__, _else__);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_Ite;
      return oth != null && object.Equals(this._guard, oth._guard) && object.Equals(this._then__, oth._then__) && object.Equals(this._else__, oth._else__);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._guard));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._then__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._else__));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._guard);
      s += ", ";
      s += Dafny.Helpers.ToString(this._then__);
      s += ", ";
      s += Dafny.Helpers.ToString(this._else__);
      s += ")";
      return s;
    }
  }
  public class Stmt_Func : Stmt {
    public readonly Dafny.ISequence<Dafny.Rune> _bound;
    public readonly DAM._IPos _dom;
    public readonly DAM._IStmt _body;
    public Stmt_Func(Dafny.ISequence<Dafny.Rune> bound, DAM._IPos dom, DAM._IStmt body) : base() {
      this._bound = bound;
      this._dom = dom;
      this._body = body;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Func(_bound, _dom, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_Func;
      return oth != null && object.Equals(this._bound, oth._bound) && object.Equals(this._dom, oth._dom) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._bound));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dom));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.Func";
      s += "(";
      s += this._bound.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dom);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Stmt_Call : Stmt {
    public readonly DAM._IStmt _func;
    public readonly DAM._IExpr _arg;
    public Stmt_Call(DAM._IStmt func, DAM._IExpr arg) : base() {
      this._func = func;
      this._arg = arg;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Call(_func, _arg);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_Call;
      return oth != null && object.Equals(this._func, oth._func) && object.Equals(this._arg, oth._arg);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._func));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arg));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._func);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arg);
      s += ")";
      return s;
    }
  }
  public class Stmt_Record : Stmt {
    public readonly Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IStmt> _fields;
    public Stmt_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IStmt> fields) : base() {
      this._fields = fields;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Record(_fields);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_Record;
      return oth != null && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.Record";
      s += "(";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
  }
  public class Stmt_Select : Stmt {
    public readonly DAM._IStmt _record;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public Stmt_Select(DAM._IStmt record, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._record = record;
      this._field = field;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Select(_record, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_Select;
      return oth != null && object.Equals(this._record, oth._record) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._record));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._record);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Stmt_Force : Stmt {
    public readonly DAM._IExpr _a0;
    public Stmt_Force(DAM._IExpr _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Force(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_Force;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.Force";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Stmt_Read : Stmt {
    public readonly DAM._IExpr _ref;
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly DAM._IStmt _cont;
    public Stmt_Read(DAM._IExpr @ref, Dafny.ISequence<Dafny.Rune> var__, DAM._IStmt cont) : base() {
      this._ref = @ref;
      this._var__ = var__;
      this._cont = cont;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Read(_ref, _var__, _cont);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_Read;
      return oth != null && object.Equals(this._ref, oth._ref) && object.Equals(this._var__, oth._var__) && object.Equals(this._cont, oth._cont);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ref));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cont));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.Read";
      s += "(";
      s += Dafny.Helpers.ToString(this._ref);
      s += ", ";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._cont);
      s += ")";
      return s;
    }
  }
  public class Stmt_Write : Stmt {
    public readonly DAM._IExpr _lvalue;
    public readonly DAM._IExpr _rvalue;
    public readonly DAM._IStmt _next;
    public Stmt_Write(DAM._IExpr lvalue, DAM._IExpr rvalue, DAM._IStmt next) : base() {
      this._lvalue = lvalue;
      this._rvalue = rvalue;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Write(_lvalue, _rvalue, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_Write;
      return oth != null && object.Equals(this._lvalue, oth._lvalue) && object.Equals(this._rvalue, oth._rvalue) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lvalue));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rvalue));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.Write";
      s += "(";
      s += Dafny.Helpers.ToString(this._lvalue);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rvalue);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Stmt_Print : Stmt {
    public readonly DAM._IExpr _a0;
    public readonly DAM._IStmt _next;
    public Stmt_Print(DAM._IExpr _a0, DAM._IStmt next) : base() {
      this._a0 = _a0;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Print(_a0, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_Print;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Stmt_Rec : Stmt {
    public readonly Dafny.ISequence<Dafny.Rune> _bound;
    public readonly DAM._IStmt _body;
    public Stmt_Rec(Dafny.ISequence<Dafny.Rune> bound, DAM._IStmt body) : base() {
      this._bound = bound;
      this._body = body;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Rec(_bound, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_Rec;
      return oth != null && object.Equals(this._bound, oth._bound) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._bound));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.Rec";
      s += "(";
      s += this._bound.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Stmt_LetCS : Stmt {
    public readonly Dafny.ISequence<Dafny.Rune> _bound;
    public readonly DAM._IStmt _body;
    public Stmt_LetCS(Dafny.ISequence<Dafny.Rune> bound, DAM._IStmt body) : base() {
      this._bound = bound;
      this._body = body;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_LetCS(_bound, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_LetCS;
      return oth != null && object.Equals(this._bound, oth._bound) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._bound));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.LetCS";
      s += "(";
      s += this._bound.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Stmt_Throw : Stmt {
    public readonly DAM._IExpr _stack;
    public readonly DAM._IStmt _init;
    public Stmt_Throw(DAM._IExpr stack, DAM._IStmt init) : base() {
      this._stack = stack;
      this._init = init;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Throw(_stack, _init);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_Throw;
      return oth != null && object.Equals(this._stack, oth._stack) && object.Equals(this._init, oth._init);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._stack));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._init));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.Throw";
      s += "(";
      s += Dafny.Helpers.ToString(this._stack);
      s += ", ";
      s += Dafny.Helpers.ToString(this._init);
      s += ")";
      return s;
    }
  }

  public interface _IVal {
    bool is_Unit { get; }
    bool is_Bool { get; }
    bool is_Int { get; }
    bool is_Thunk { get; }
    bool is_Ref { get; }
    bool is_Stack { get; }
    bool dtor_Bool_a0 { get; }
    BigInteger dtor_Int_a0 { get; }
    Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> dtor_Thunk_a0 { get; }
    DAM._IStmt dtor_Thunk_a1 { get; }
    DAM.Ptr<DAM._IVal> dtor_Ref_a0 { get; }
    Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> dtor_Stack_a0 { get; }
    DAM._IStack dtor_Stack_a1 { get; }
    _IVal DowncastClone();
  }
  public abstract class Val : _IVal {
    public Val() {
    }
    private static readonly DAM._IVal theDefault = create_Unit();
    public static DAM._IVal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM._IVal> _TYPE = new Dafny.TypeDescriptor<DAM._IVal>(DAM.Val.Default());
    public static Dafny.TypeDescriptor<DAM._IVal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IVal create_Unit() {
      return new Val_Unit();
    }
    public static _IVal create_Bool(bool _a0) {
      return new Val_Bool(_a0);
    }
    public static _IVal create_Int(BigInteger _a0) {
      return new Val_Int(_a0);
    }
    public static _IVal create_Thunk(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _a0, DAM._IStmt _a1) {
      return new Val_Thunk(_a0, _a1);
    }
    public static _IVal create_Ref(DAM.Ptr<DAM._IVal> _a0) {
      return new Val_Ref(_a0);
    }
    public static _IVal create_Stack(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _a0, DAM._IStack _a1) {
      return new Val_Stack(_a0, _a1);
    }
    public bool is_Unit { get { return this is Val_Unit; } }
    public bool is_Bool { get { return this is Val_Bool; } }
    public bool is_Int { get { return this is Val_Int; } }
    public bool is_Thunk { get { return this is Val_Thunk; } }
    public bool is_Ref { get { return this is Val_Ref; } }
    public bool is_Stack { get { return this is Val_Stack; } }
    public bool dtor_Bool_a0 {
      get {
        var d = this;
        return ((Val_Bool)d)._a0;
      }
    }
    public BigInteger dtor_Int_a0 {
      get {
        var d = this;
        return ((Val_Int)d)._a0;
      }
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> dtor_Thunk_a0 {
      get {
        var d = this;
        return ((Val_Thunk)d)._a0;
      }
    }
    public DAM._IStmt dtor_Thunk_a1 {
      get {
        var d = this;
        return ((Val_Thunk)d)._a1;
      }
    }
    public DAM.Ptr<DAM._IVal> dtor_Ref_a0 {
      get {
        var d = this;
        return ((Val_Ref)d)._a0;
      }
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> dtor_Stack_a0 {
      get {
        var d = this;
        return ((Val_Stack)d)._a0;
      }
    }
    public DAM._IStack dtor_Stack_a1 {
      get {
        var d = this;
        return ((Val_Stack)d)._a1;
      }
    }
    public abstract _IVal DowncastClone();
  }
  public class Val_Unit : Val {
    public Val_Unit() : base() {
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Unit();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Val_Unit;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Val.Unit";
      return s;
    }
  }
  public class Val_Bool : Val {
    public readonly bool _a0;
    public Val_Bool(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Bool(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Val_Bool;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Val.Bool";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Val_Int : Val {
    public readonly BigInteger _a0;
    public Val_Int(BigInteger _a0) : base() {
      this._a0 = _a0;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Int(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Val_Int;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Val.Int";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Val_Thunk : Val {
    public readonly Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _a0;
    public readonly DAM._IStmt _a1;
    public Val_Thunk(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _a0, DAM._IStmt _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Thunk(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Val_Thunk;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Val.Thunk";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Val_Ref : Val {
    public readonly DAM.Ptr<DAM._IVal> _a0;
    public Val_Ref(DAM.Ptr<DAM._IVal> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Ref(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Val_Ref;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Val.Ref";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Val_Stack : Val {
    public readonly Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _a0;
    public readonly DAM._IStack _a1;
    public Val_Stack(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _a0, DAM._IStack _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Stack(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Val_Stack;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Val.Stack";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }

  public interface _IFrame {
    bool is_Bind { get; }
    bool is_Call { get; }
    bool is_Select { get; }
    Dafny.ISequence<Dafny.Rune> dtor_var__ { get; }
    DAM._IStmt dtor_rhs { get; }
    DAM._IExpr dtor_arg { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    _IFrame DowncastClone();
  }
  public abstract class Frame : _IFrame {
    public Frame() {
    }
    private static readonly DAM._IFrame theDefault = create_Bind(Dafny.Sequence<Dafny.Rune>.Empty, DAM.Stmt.Default());
    public static DAM._IFrame Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM._IFrame> _TYPE = new Dafny.TypeDescriptor<DAM._IFrame>(DAM.Frame.Default());
    public static Dafny.TypeDescriptor<DAM._IFrame> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFrame create_Bind(Dafny.ISequence<Dafny.Rune> var__, DAM._IStmt rhs) {
      return new Frame_Bind(var__, rhs);
    }
    public static _IFrame create_Call(DAM._IExpr arg) {
      return new Frame_Call(arg);
    }
    public static _IFrame create_Select(Dafny.ISequence<Dafny.Rune> field) {
      return new Frame_Select(field);
    }
    public bool is_Bind { get { return this is Frame_Bind; } }
    public bool is_Call { get { return this is Frame_Call; } }
    public bool is_Select { get { return this is Frame_Select; } }
    public Dafny.ISequence<Dafny.Rune> dtor_var__ {
      get {
        var d = this;
        return ((Frame_Bind)d)._var__;
      }
    }
    public DAM._IStmt dtor_rhs {
      get {
        var d = this;
        return ((Frame_Bind)d)._rhs;
      }
    }
    public DAM._IExpr dtor_arg {
      get {
        var d = this;
        return ((Frame_Call)d)._arg;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((Frame_Select)d)._field;
      }
    }
    public abstract _IFrame DowncastClone();
  }
  public class Frame_Bind : Frame {
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly DAM._IStmt _rhs;
    public Frame_Bind(Dafny.ISequence<Dafny.Rune> var__, DAM._IStmt rhs) : base() {
      this._var__ = var__;
      this._rhs = rhs;
    }
    public override _IFrame DowncastClone() {
      if (this is _IFrame dt) { return dt; }
      return new Frame_Bind(_var__, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Frame_Bind;
      return oth != null && object.Equals(this._var__, oth._var__) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Frame.Bind";
      s += "(";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Frame_Call : Frame {
    public readonly DAM._IExpr _arg;
    public Frame_Call(DAM._IExpr arg) : base() {
      this._arg = arg;
    }
    public override _IFrame DowncastClone() {
      if (this is _IFrame dt) { return dt; }
      return new Frame_Call(_arg);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Frame_Call;
      return oth != null && object.Equals(this._arg, oth._arg);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arg));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Frame.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._arg);
      s += ")";
      return s;
    }
  }
  public class Frame_Select : Frame {
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public Frame_Select(Dafny.ISequence<Dafny.Rune> field) : base() {
      this._field = field;
    }
    public override _IFrame DowncastClone() {
      if (this is _IFrame dt) { return dt; }
      return new Frame_Select(_field);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Frame_Select;
      return oth != null && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Frame.Select";
      s += "(";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IStack {
    bool is_Empty { get; }
    bool is_Push { get; }
    DAM._IFrame dtor_top { get; }
    DAM._IStack dtor_rest { get; }
    _IStack DowncastClone();
    DAM._IOption<_System._ITuple2<DAM._IFrame, DAM._IStack>> Pop();
  }
  public abstract class Stack : _IStack {
    public Stack() {
    }
    private static readonly DAM._IStack theDefault = create_Empty();
    public static DAM._IStack Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM._IStack> _TYPE = new Dafny.TypeDescriptor<DAM._IStack>(DAM.Stack.Default());
    public static Dafny.TypeDescriptor<DAM._IStack> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStack create_Empty() {
      return new Stack_Empty();
    }
    public static _IStack create_Push(DAM._IFrame top, DAM._IStack rest) {
      return new Stack_Push(top, rest);
    }
    public bool is_Empty { get { return this is Stack_Empty; } }
    public bool is_Push { get { return this is Stack_Push; } }
    public DAM._IFrame dtor_top {
      get {
        var d = this;
        return ((Stack_Push)d)._top;
      }
    }
    public DAM._IStack dtor_rest {
      get {
        var d = this;
        return ((Stack_Push)d)._rest;
      }
    }
    public abstract _IStack DowncastClone();
    public DAM._IOption<_System._ITuple2<DAM._IFrame, DAM._IStack>> Pop() {
      DAM._IStack _source31 = this;
      if (_source31.is_Empty) {
        return DAM.Option<_System._ITuple2<DAM._IFrame, DAM._IStack>>.create_None();
      } else {
        DAM._IFrame _247___mcc_h0 = _source31.dtor_top;
        DAM._IStack _248___mcc_h1 = _source31.dtor_rest;
        DAM._IStack _249_r = _248___mcc_h1;
        DAM._IFrame _250_t = _247___mcc_h0;
        return DAM.Option<_System._ITuple2<DAM._IFrame, DAM._IStack>>.create_Some(_System.Tuple2<DAM._IFrame, DAM._IStack>.create(_250_t, _249_r));
      }
    }
  }
  public class Stack_Empty : Stack {
    public Stack_Empty() : base() {
    }
    public override _IStack DowncastClone() {
      if (this is _IStack dt) { return dt; }
      return new Stack_Empty();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stack_Empty;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stack.Empty";
      return s;
    }
  }
  public class Stack_Push : Stack {
    public readonly DAM._IFrame _top;
    public readonly DAM._IStack _rest;
    public Stack_Push(DAM._IFrame top, DAM._IStack rest) : base() {
      this._top = top;
      this._rest = rest;
    }
    public override _IStack DowncastClone() {
      if (this is _IStack dt) { return dt; }
      return new Stack_Push(_top, _rest);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stack_Push;
      return oth != null && object.Equals(this._top, oth._top) && object.Equals(this._rest, oth._rest);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._top));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rest));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stack.Push";
      s += "(";
      s += Dafny.Helpers.ToString(this._top);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rest);
      s += ")";
      return s;
    }
  }

  public interface _IOut {
    bool is_Next { get; }
    bool is_Stuck { get; }
    bool is_Terminal { get; }
    _System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> dtor_Next_a0 { get; }
    DAM._IVal dtor_Terminal_a0 { get; }
    _IOut DowncastClone();
  }
  public abstract class Out : _IOut {
    public Out() {
    }
    private static readonly DAM._IOut theDefault = create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.Default(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IVal>.Empty, DAM.Stmt.Default(), DAM.Stack.Default()));
    public static DAM._IOut Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM._IOut> _TYPE = new Dafny.TypeDescriptor<DAM._IOut>(DAM.Out.Default());
    public static Dafny.TypeDescriptor<DAM._IOut> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IOut create_Next(_System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> _a0) {
      return new Out_Next(_a0);
    }
    public static _IOut create_Stuck() {
      return new Out_Stuck();
    }
    public static _IOut create_Terminal(DAM._IVal _a0) {
      return new Out_Terminal(_a0);
    }
    public bool is_Next { get { return this is Out_Next; } }
    public bool is_Stuck { get { return this is Out_Stuck; } }
    public bool is_Terminal { get { return this is Out_Terminal; } }
    public _System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> dtor_Next_a0 {
      get {
        var d = this;
        return ((Out_Next)d)._a0;
      }
    }
    public DAM._IVal dtor_Terminal_a0 {
      get {
        var d = this;
        return ((Out_Terminal)d)._a0;
      }
    }
    public abstract _IOut DowncastClone();
  }
  public class Out_Next : Out {
    public readonly _System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> _a0;
    public Out_Next(_System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IOut DowncastClone() {
      if (this is _IOut dt) { return dt; }
      return new Out_Next(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Out_Next;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Out.Next";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Out_Stuck : Out {
    public Out_Stuck() : base() {
    }
    public override _IOut DowncastClone() {
      if (this is _IOut dt) { return dt; }
      return new Out_Stuck();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Out_Stuck;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Out.Stuck";
      return s;
    }
  }
  public class Out_Terminal : Out {
    public readonly DAM._IVal _a0;
    public Out_Terminal(DAM._IVal _a0) : base() {
      this._a0 = _a0;
    }
    public override _IOut DowncastClone() {
      if (this is _IOut dt) { return dt; }
      return new Out_Terminal(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Out_Terminal;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Out.Terminal";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
} // end of namespace DAM

namespace D2DPrettyPrinter {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> PrettyPrint(Dafny.ISequence<DAST._IModule> d) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _hi0 = new BigInteger((d).Count);
      for (BigInteger _251_i = BigInteger.Zero; _251_i < _hi0; _251_i++) {
        Dafny.ISequence<Dafny.Rune> _252_s_k;
        Dafny.ISequence<Dafny.Rune> _out1;
        _out1 = D2DPrettyPrinter.__default.PModule((d).Select(_251_i));
        _252_s_k = _out1;
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _252_s_k);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PModule(DAST._IModule mod) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("module "), (mod).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      BigInteger _hi1 = new BigInteger(((mod).dtor_body).Count);
      for (BigInteger _253_i = BigInteger.Zero; _253_i < _hi1; _253_i++) {
        DAST._IModuleItem _source32 = ((mod).dtor_body).Select(_253_i);
        if (_source32.is_Module) {
          DAST._IModule _254___mcc_h0 = _source32.dtor_Module_a0;
          DAST._IModule _255_m = _254___mcc_h0;
          Dafny.ISequence<Dafny.Rune> _256_s_k;
          Dafny.ISequence<Dafny.Rune> _out2;
          _out2 = D2DPrettyPrinter.__default.PModule(_255_m);
          _256_s_k = _out2;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _256_s_k);
        } else if (_source32.is_Class) {
          DAST._IClass _257___mcc_h1 = _source32.dtor_Class_a0;
          DAST._IClass _258_c = _257___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _259_s_k;
          Dafny.ISequence<Dafny.Rune> _out3;
          _out3 = D2DPrettyPrinter.__default.PClass(_258_c);
          _259_s_k = _out3;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _259_s_k);
        } else if (_source32.is_Trait) {
          DAST._ITrait _260___mcc_h2 = _source32.dtor_Trait_a0;
          DAST._ITrait _261_c = _260___mcc_h2;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        } else if (_source32.is_Newtype) {
          DAST._INewtype _262___mcc_h3 = _source32.dtor_Newtype_a0;
          DAST._INewtype _263_n = _262___mcc_h3;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        } else {
          DAST._IDatatype _264___mcc_h4 = _source32.dtor_Datatype_a0;
          DAST._IDatatype _265_d = _264___mcc_h4;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        }
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PClass(DAST._IClass c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("class "), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      BigInteger _hi2 = new BigInteger(((c).dtor_body).Count);
      for (BigInteger _266_i = BigInteger.Zero; _266_i < _hi2; _266_i++) {
        DAST._IMethod _source33 = ((c).dtor_body).Select(_266_i);
        DAST._IMethod _267___mcc_h0 = _source33;
        DAST._IMethod _268_m = _267___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _269_s_k;
        Dafny.ISequence<Dafny.Rune> _out4;
        _out4 = D2DPrettyPrinter.__default.PMethod(_268_m);
        _269_s_k = _out4;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _269_s_k), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PMethod(DAST._IMethod meth) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("method "), (meth).dtor_name);
      Dafny.ISequence<Dafny.Rune> _270_s_k;
      Dafny.ISequence<Dafny.Rune> _out5;
      _out5 = D2DPrettyPrinter.__default.PFormals((meth).dtor_params, (meth).dtor_typeParams);
      _270_s_k = _out5;
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, _270_s_k);
      Dafny.ISequence<Dafny.Rune> _out6;
      _out6 = D2DPrettyPrinter.__default.PBlock((meth).dtor_body);
      _270_s_k = _out6;
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, _270_s_k);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PFormals(Dafny.ISequence<DAST._IFormal> names, Dafny.ISequence<DAST._IType> types) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
      BigInteger _hi3 = new BigInteger((names).Count);
      for (BigInteger _271_i = BigInteger.Zero; _271_i < _hi3; _271_i++) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, ((names).Select(_271_i)).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": _,"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PBlock(Dafny.ISequence<DAST._IStatement> stmt) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((stmt).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
      }
      BigInteger _hi4 = new BigInteger((stmt).Count);
      for (BigInteger _272_i = BigInteger.Zero; _272_i < _hi4; _272_i++) {
        Dafny.ISequence<Dafny.Rune> _273_s_k;
        Dafny.ISequence<Dafny.Rune> _out7;
        _out7 = D2DPrettyPrinter.__default.PStatement((stmt).Select(_272_i));
        _273_s_k = _out7;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _273_s_k), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      }
      if ((new BigInteger((stmt).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PStatement(DAST._IStatement st) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IStatement _source34 = st;
      if (_source34.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _274___mcc_h0 = _source34.dtor_name;
        DAST._IType _275___mcc_h1 = _source34.dtor_typ;
        DAST._IOptional<DAST._IExpression> _276___mcc_h2 = _source34.dtor_maybeValue;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source34.is_Assign) {
        DAST._IAssignLhs _277___mcc_h6 = _source34.dtor_lhs;
        DAST._IExpression _278___mcc_h7 = _source34.dtor_value;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source34.is_If) {
        DAST._IExpression _279___mcc_h10 = _source34.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _280___mcc_h11 = _source34.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _281___mcc_h12 = _source34.dtor_els;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source34.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _282___mcc_h16 = _source34.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _283___mcc_h17 = _source34.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source34.is_While) {
        DAST._IExpression _284___mcc_h20 = _source34.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _285___mcc_h21 = _source34.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source34.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _286___mcc_h24 = _source34.dtor_boundName;
        DAST._IType _287___mcc_h25 = _source34.dtor_boundType;
        DAST._IExpression _288___mcc_h26 = _source34.dtor_over;
        Dafny.ISequence<DAST._IStatement> _289___mcc_h27 = _source34.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source34.is_Call) {
        DAST._IExpression _290___mcc_h32 = _source34.dtor_on;
        Dafny.ISequence<Dafny.Rune> _291___mcc_h33 = _source34.dtor_name;
        Dafny.ISequence<DAST._IType> _292___mcc_h34 = _source34.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _293___mcc_h35 = _source34.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _294___mcc_h36 = _source34.dtor_outs;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source34.is_Return) {
        DAST._IExpression _295___mcc_h42 = _source34.dtor_expr;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source34.is_EarlyReturn) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return");
      } else if (_source34.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _296___mcc_h44 = _source34.dtor_toLabel;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source34.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _297___mcc_h46 = _source34.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source34.is_JumpTailCallStart) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source34.is_Halt) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else {
        DAST._IExpression _298___mcc_h48 = _source34.dtor_Print_a0;
        DAST._IExpression _299_e = _298___mcc_h48;
        Dafny.ISequence<Dafny.Rune> _300_s_k;
        Dafny.ISequence<Dafny.Rune> _out8;
        _out8 = D2DPrettyPrinter.__default.PExpression(_299_e);
        _300_s_k = _out8;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print "), _300_s_k);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PExpression(DAST._IExpression e) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IExpression _source35 = e;
      if (_source35.is_Literal) {
        DAST._ILiteral _301___mcc_h0 = _source35.dtor_Literal_a0;
        DAST._ILiteral _302_l = _301___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _out9;
        _out9 = D2DPrettyPrinter.__default.PLiteral(_302_l);
        s = _out9;
      } else if (_source35.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _303___mcc_h2 = _source35.dtor_Ident_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source35.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _304___mcc_h4 = _source35.dtor_Companion_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source35.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _305___mcc_h6 = _source35.dtor_Tuple_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source35.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _306___mcc_h8 = _source35.dtor_path;
        Dafny.ISequence<DAST._IType> _307___mcc_h9 = _source35.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _308___mcc_h10 = _source35.dtor_args;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source35.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _309___mcc_h14 = _source35.dtor_dims;
        DAST._IType _310___mcc_h15 = _source35.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source35.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _311___mcc_h18 = _source35.dtor_path;
        Dafny.ISequence<DAST._IType> _312___mcc_h19 = _source35.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _313___mcc_h20 = _source35.dtor_variant;
        bool _314___mcc_h21 = _source35.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _315___mcc_h22 = _source35.dtor_contents;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source35.is_Convert) {
        DAST._IExpression _316___mcc_h28 = _source35.dtor_value;
        DAST._IType _317___mcc_h29 = _source35.dtor_from;
        DAST._IType _318___mcc_h30 = _source35.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source35.is_SeqConstruct) {
        DAST._IExpression _319___mcc_h34 = _source35.dtor_length;
        DAST._IExpression _320___mcc_h35 = _source35.dtor_elem;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source35.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _321___mcc_h38 = _source35.dtor_elements;
        DAST._IType _322___mcc_h39 = _source35.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source35.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _323___mcc_h42 = _source35.dtor_elements;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source35.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _324___mcc_h44 = _source35.dtor_mapElems;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source35.is_This) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source35.is_Ite) {
        DAST._IExpression _325___mcc_h46 = _source35.dtor_cond;
        DAST._IExpression _326___mcc_h47 = _source35.dtor_thn;
        DAST._IExpression _327___mcc_h48 = _source35.dtor_els;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source35.is_UnOp) {
        DAST._IUnaryOp _328___mcc_h52 = _source35.dtor_unOp;
        DAST._IExpression _329___mcc_h53 = _source35.dtor_expr;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source35.is_BinOp) {
        DAST._IBinOp _330___mcc_h56 = _source35.dtor_op;
        DAST._IExpression _331___mcc_h57 = _source35.dtor_left;
        DAST._IExpression _332___mcc_h58 = _source35.dtor_right;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source35.is_ArrayLen) {
        DAST._IExpression _333___mcc_h62 = _source35.dtor_expr;
        BigInteger _334___mcc_h63 = _source35.dtor_dim;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source35.is_Select) {
        DAST._IExpression _335___mcc_h66 = _source35.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _336___mcc_h67 = _source35.dtor_field;
        bool _337___mcc_h68 = _source35.dtor_isConstant;
        bool _338___mcc_h69 = _source35.dtor_onDatatype;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source35.is_SelectFn) {
        DAST._IExpression _339___mcc_h74 = _source35.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _340___mcc_h75 = _source35.dtor_field;
        bool _341___mcc_h76 = _source35.dtor_onDatatype;
        bool _342___mcc_h77 = _source35.dtor_isStatic;
        BigInteger _343___mcc_h78 = _source35.dtor_arity;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source35.is_Index) {
        DAST._IExpression _344___mcc_h84 = _source35.dtor_expr;
        DAST._ICollKind _345___mcc_h85 = _source35.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _346___mcc_h86 = _source35.dtor_indices;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source35.is_IndexRange) {
        DAST._IExpression _347___mcc_h90 = _source35.dtor_expr;
        bool _348___mcc_h91 = _source35.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _349___mcc_h92 = _source35.dtor_low;
        DAST._IOptional<DAST._IExpression> _350___mcc_h93 = _source35.dtor_high;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source35.is_TupleSelect) {
        DAST._IExpression _351___mcc_h98 = _source35.dtor_expr;
        BigInteger _352___mcc_h99 = _source35.dtor_index;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source35.is_Call) {
        DAST._IExpression _353___mcc_h102 = _source35.dtor_on;
        Dafny.ISequence<Dafny.Rune> _354___mcc_h103 = _source35.dtor_name;
        Dafny.ISequence<DAST._IType> _355___mcc_h104 = _source35.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _356___mcc_h105 = _source35.dtor_args;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source35.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _357___mcc_h110 = _source35.dtor_params;
        DAST._IType _358___mcc_h111 = _source35.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _359___mcc_h112 = _source35.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source35.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _360___mcc_h116 = _source35.dtor_values;
        DAST._IType _361___mcc_h117 = _source35.dtor_retType;
        DAST._IExpression _362___mcc_h118 = _source35.dtor_expr;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source35.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _363___mcc_h122 = _source35.dtor_name;
        DAST._IType _364___mcc_h123 = _source35.dtor_typ;
        DAST._IExpression _365___mcc_h124 = _source35.dtor_value;
        DAST._IExpression _366___mcc_h125 = _source35.dtor_iifeBody;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source35.is_Apply) {
        DAST._IExpression _367___mcc_h130 = _source35.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _368___mcc_h131 = _source35.dtor_args;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source35.is_TypeTest) {
        DAST._IExpression _369___mcc_h134 = _source35.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _370___mcc_h135 = _source35.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _371___mcc_h136 = _source35.dtor_variant;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source35.is_InitializationValue) {
        DAST._IType _372___mcc_h140 = _source35.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source35.is_BoolBoundedPool) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source35.is_SetBoundedPool) {
        DAST._IExpression _373___mcc_h142 = _source35.dtor_of;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source35.is_SeqBoundedPool) {
        DAST._IExpression _374___mcc_h144 = _source35.dtor_of;
        bool _375___mcc_h145 = _source35.dtor_includeDuplicates;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else {
        DAST._IExpression _376___mcc_h148 = _source35.dtor_lo;
        DAST._IExpression _377___mcc_h149 = _source35.dtor_hi;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PLiteral(DAST._ILiteral l) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._ILiteral _source36 = l;
      if (_source36.is_BoolLiteral) {
        bool _378___mcc_h0 = _source36.dtor_BoolLiteral_a0;
        bool _379_b = _378___mcc_h0;
        s = ((_379_b) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")));
      } else if (_source36.is_IntLiteral) {
        Dafny.ISequence<Dafny.Rune> _380___mcc_h1 = _source36.dtor_IntLiteral_a0;
        DAST._IType _381___mcc_h2 = _source36.dtor_IntLiteral_a1;
        Dafny.ISequence<Dafny.Rune> _382_i = _380___mcc_h1;
        s = _382_i;
      } else if (_source36.is_DecLiteral) {
        Dafny.ISequence<Dafny.Rune> _383___mcc_h3 = _source36.dtor_DecLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _384___mcc_h4 = _source36.dtor_DecLiteral_a1;
        DAST._IType _385___mcc_h5 = _source36.dtor_DecLiteral_a2;
        Dafny.ISequence<Dafny.Rune> _386_r = _384___mcc_h4;
        Dafny.ISequence<Dafny.Rune> _387_l = _383___mcc_h3;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_387_l, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _386_r);
      } else if (_source36.is_StringLiteral) {
        Dafny.ISequence<Dafny.Rune> _388___mcc_h6 = _source36.dtor_StringLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _389_s_k = _388___mcc_h6;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""), _389_s_k), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""));
      } else if (_source36.is_CharLiteral) {
        Dafny.Rune _390___mcc_h7 = _source36.dtor_CharLiteral_a0;
        Dafny.Rune _391_c = _390___mcc_h7;
        s = Dafny.Sequence<Dafny.Rune>.FromElements(_391_c);
      } else {
        DAST._IType _392___mcc_h8 = _source36.dtor_Null_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("null");
      }
      return s;
    }
  }
} // end of namespace D2DPrettyPrinter
namespace ResolvedDesugaredExecutableDafnyPlugin {


  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      BigInteger _hi5 = new BigInteger((p).Count);
      for (BigInteger _393_i = BigInteger.Zero; _393_i < _hi5; _393_i++) {
        DAM._IStmt _394_m;
        DAM._IStmt _out10;
        _out10 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitModule((p).Select(_393_i));
        _394_m = _out10;
        DAM._INeg _395_t;
        DAM._INeg _out11;
        _out11 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitModuleType((p).Select(_393_i));
        _395_t = _out11;
        Dafny.Helpers.Print((_394_m));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n\n")).ToVerbatimString(false));
        Dafny.Helpers.Print((_395_t));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n\n")).ToVerbatimString(false));
      }
      Dafny.ISequence<Dafny.Rune> _out12;
      _out12 = D2DPrettyPrinter.__default.PrettyPrint(p);
      s = _out12;
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      return s;
    }
    public static DAM._IPos PolarizePos(DAST._IType t) {
      DAM._IPos p = DAM.Pos.Default();
      DAST._IType _source37 = t;
      if (_source37.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _396___mcc_h0 = _source37.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _397___mcc_h1 = _source37.dtor_typeArgs;
        DAST._IResolvedType _398___mcc_h2 = _source37.dtor_resolved;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Pos.create_Unit();
      } else if (_source37.is_Nullable) {
        DAST._IType _399___mcc_h6 = _source37.dtor_Nullable_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Pos.create_Unit();
      } else if (_source37.is_Tuple) {
        Dafny.ISequence<DAST._IType> _400___mcc_h8 = _source37.dtor_Tuple_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Pos.create_Unit();
      } else if (_source37.is_Array) {
        DAST._IType _401___mcc_h10 = _source37.dtor_element;
        BigInteger _402___mcc_h11 = _source37.dtor_dims;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Pos.create_Unit();
      } else if (_source37.is_Seq) {
        DAST._IType _403___mcc_h14 = _source37.dtor_element;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Pos.create_Unit();
      } else if (_source37.is_Set) {
        DAST._IType _404___mcc_h16 = _source37.dtor_element;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Pos.create_Unit();
      } else if (_source37.is_Multiset) {
        DAST._IType _405___mcc_h18 = _source37.dtor_element;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Pos.create_Unit();
      } else if (_source37.is_Map) {
        DAST._IType _406___mcc_h20 = _source37.dtor_key;
        DAST._IType _407___mcc_h21 = _source37.dtor_value;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Pos.create_Unit();
      } else if (_source37.is_Arrow) {
        Dafny.ISequence<DAST._IType> _408___mcc_h24 = _source37.dtor_args;
        DAST._IType _409___mcc_h25 = _source37.dtor_result;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Pos.create_Unit();
      } else if (_source37.is_Primitive) {
        DAST._IPrimitive _410___mcc_h28 = _source37.dtor_Primitive_a0;
        DAST._IPrimitive _source38 = _410___mcc_h28;
        if (_source38.is_Int) {
          p = DAM.Pos.create_Int();
        } else if (_source38.is_Real) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          p = DAM.Pos.create_Unit();
        } else if (_source38.is_String) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          p = DAM.Pos.create_Unit();
        } else if (_source38.is_Bool) {
          p = DAM.Pos.create_Bool();
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          p = DAM.Pos.create_Unit();
        }
      } else if (_source37.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _411___mcc_h30 = _source37.dtor_Passthrough_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Pos.create_Unit();
      } else {
        Dafny.ISequence<Dafny.Rune> _412___mcc_h32 = _source37.dtor_TypeArg_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Pos.create_Unit();
      }
      return p;
    }
    public static DAM._INeg EmitModuleType(DAST._IModule m) {
      DAM._INeg t = DAM.Neg.Default();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._INeg> _413_members;
      _413_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._INeg>.FromElements();
      BigInteger _hi6 = new BigInteger(((m).dtor_body).Count);
      for (BigInteger _414_i = BigInteger.Zero; _414_i < _hi6; _414_i++) {
        DAST._IModuleItem _source39 = ((m).dtor_body).Select(_414_i);
        if (_source39.is_Module) {
          DAST._IModule _415___mcc_h0 = _source39.dtor_Module_a0;
          DAST._IModule _416_m = _415___mcc_h0;
          DAM._INeg _417_tm;
          DAM._INeg _out13;
          _out13 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitModuleType(_416_m);
          _417_tm = _out13;
          _413_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._INeg>.Update(_413_members, (_416_m).dtor_name, _417_tm);
        } else if (_source39.is_Class) {
          DAST._IClass _418___mcc_h2 = _source39.dtor_Class_a0;
          DAST._IClass _419_c = _418___mcc_h2;
          DAM._INeg _420_tc;
          DAM._INeg _out14;
          _out14 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitClassType(_419_c);
          _420_tc = _out14;
          _413_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._INeg>.Update(_413_members, (_419_c).dtor_name, _420_tc);
        } else if (_source39.is_Trait) {
          DAST._ITrait _421___mcc_h4 = _source39.dtor_Trait_a0;
          goto continue_0;
        } else if (_source39.is_Newtype) {
          DAST._INewtype _422___mcc_h6 = _source39.dtor_Newtype_a0;
          goto continue_0;
        } else {
          DAST._IDatatype _423___mcc_h8 = _source39.dtor_Datatype_a0;
          goto continue_0;
        }
      continue_0:;
      }
    after_0:;
      t = DAM.Neg.create_Record(_413_members);
      return t;
    }
    public static DAM._INeg EmitClassType(DAST._IClass c) {
      DAM._INeg t = DAM.Neg.Default();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._INeg> _424_members;
      _424_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._INeg>.FromElements();
      BigInteger _hi7 = new BigInteger(((c).dtor_body).Count);
      for (BigInteger _425_i = BigInteger.Zero; _425_i < _hi7; _425_i++) {
        DAST._IMethod _source40 = ((c).dtor_body).Select(_425_i);
        DAST._IMethod _426___mcc_h0 = _source40;
        DAST._IMethod _427_m = _426___mcc_h0;
        DAM._INeg _428_tm;
        DAM._INeg _out15;
        _out15 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitMethodType(_427_m);
        _428_tm = _out15;
        _424_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._INeg>.Update(_424_members, (_427_m).dtor_name, _428_tm);
      }
      t = DAM.Neg.create_Record(_424_members);
      return t;
    }
    public static DAM._INeg EmitMethodType(DAST._IMethod m) {
      DAM._INeg t = DAM.Neg.Default();
      t = DAM.Neg.create_Value(DAM.Pos.create_Unit());
      BigInteger _hi8 = new BigInteger(((m).dtor_params).Count);
      for (BigInteger _429_i = BigInteger.Zero; _429_i < _hi8; _429_i++) {
        DAST._IFormal _source41 = ((m).dtor_params).Select(((new BigInteger(((m).dtor_params).Count)) - (_429_i)) - (BigInteger.One));
        Dafny.ISequence<Dafny.Rune> _430___mcc_h0 = _source41.dtor_name;
        DAST._IType _431___mcc_h1 = _source41.dtor_typ;
        DAST._IType _432_dom = _431___mcc_h1;
        DAM._IPos _433_dom;
        DAM._IPos _out16;
        _out16 = ResolvedDesugaredExecutableDafnyPlugin.COMP.PolarizePos(_432_dom);
        _433_dom = _out16;
        t = DAM.Neg.create_Function(_433_dom, t);
      }
      return t;
    }
    public static DAM._IStmt EmitModule(DAST._IModule m) {
      DAM._IStmt s = DAM.Stmt.Default();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IStmt> _434_members;
      _434_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IStmt>.FromElements();
      BigInteger _hi9 = new BigInteger(((m).dtor_body).Count);
      for (BigInteger _435_i = BigInteger.Zero; _435_i < _hi9; _435_i++) {
        DAST._IModuleItem _source42 = ((m).dtor_body).Select(_435_i);
        if (_source42.is_Module) {
          DAST._IModule _436___mcc_h0 = _source42.dtor_Module_a0;
          DAST._IModule _437_m = _436___mcc_h0;
          DAM._IStmt _438_mod;
          DAM._IStmt _out17;
          _out17 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitModule(_437_m);
          _438_mod = _out17;
          _434_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IStmt>.Update(_434_members, (_437_m).dtor_name, _438_mod);
        } else if (_source42.is_Class) {
          DAST._IClass _439___mcc_h2 = _source42.dtor_Class_a0;
          DAST._IClass _440_c = _439___mcc_h2;
          DAM._IStmt _441_cls;
          DAM._IStmt _out18;
          _out18 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitClass(_440_c);
          _441_cls = _out18;
          _434_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IStmt>.Update(_434_members, (_440_c).dtor_name, _441_cls);
        } else if (_source42.is_Trait) {
          DAST._ITrait _442___mcc_h4 = _source42.dtor_Trait_a0;
          goto continue_0;
        } else if (_source42.is_Newtype) {
          DAST._INewtype _443___mcc_h6 = _source42.dtor_Newtype_a0;
          goto continue_0;
        } else {
          DAST._IDatatype _444___mcc_h8 = _source42.dtor_Datatype_a0;
          goto continue_0;
        }
      continue_0:;
      }
    after_0:;
      s = DAM.Stmt.create_Record(_434_members);
      return s;
    }
    public static DAM._IStmt EmitClass(DAST._IClass c) {
      DAM._IStmt s = DAM.Stmt.Default();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IStmt> _445_fields;
      _445_fields = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IStmt>.FromElements();
      BigInteger _hi10 = new BigInteger(((c).dtor_body).Count);
      for (BigInteger _446_i = BigInteger.Zero; _446_i < _hi10; _446_i++) {
        DAST._IMethod _source43 = ((c).dtor_body).Select(_446_i);
        DAST._IMethod _447___mcc_h0 = _source43;
        DAST._IMethod _448_m = _447___mcc_h0;
        DAM._IStmt _449_meth;
        DAM._IStmt _out19;
        _out19 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitMethod(_448_m);
        _449_meth = _out19;
        _445_fields = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IStmt>.Update(_445_fields, (_448_m).dtor_name, _449_meth);
      }
      s = DAM.Stmt.create_Record(_445_fields);
      return s;
    }
    public static DAM._IStmt EmitMethod(DAST._IMethod m) {
      DAM._IStmt s = DAM.Stmt.Default();
      DAM._IStmt _450_body;
      DAM._IStmt _out20;
      _out20 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock((m).dtor_body);
      _450_body = _out20;
      s = DAM.Stmt.create_LetCS(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), _450_body);
      BigInteger _hi11 = new BigInteger(((m).dtor_params).Count);
      for (BigInteger _451_i = BigInteger.Zero; _451_i < _hi11; _451_i++) {
        DAST._IFormal _source44 = ((m).dtor_params).Select(((new BigInteger(((m).dtor_params).Count)) - (_451_i)) - (BigInteger.One));
        Dafny.ISequence<Dafny.Rune> _452___mcc_h0 = _source44.dtor_name;
        DAST._IType _453___mcc_h1 = _source44.dtor_typ;
        DAST._IType _454_dom = _453___mcc_h1;
        Dafny.ISequence<Dafny.Rune> _455_arg = _452___mcc_h0;
        DAM._IPos _456_dom;
        DAM._IPos _out21;
        _out21 = ResolvedDesugaredExecutableDafnyPlugin.COMP.PolarizePos(_454_dom);
        _456_dom = _out21;
        s = DAM.Stmt.create_Func(_455_arg, _456_dom, s);
      }
      return s;
    }
    public static DAM._IStmt EmitExpr(DAST._IExpression e) {
      DAM._IStmt s = DAM.Stmt.Default();
      DAST._IExpression _source45 = e;
      if (_source45.is_Literal) {
        DAST._ILiteral _457___mcc_h0 = _source45.dtor_Literal_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source45.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _458___mcc_h2 = _source45.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _459_v = _458___mcc_h2;
        s = DAM.Stmt.create_Pure(DAM.Expr.create_Var(_459_v));
      } else if (_source45.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _460___mcc_h4 = _source45.dtor_Companion_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source45.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _461___mcc_h6 = _source45.dtor_Tuple_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source45.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _462___mcc_h8 = _source45.dtor_path;
        Dafny.ISequence<DAST._IType> _463___mcc_h9 = _source45.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _464___mcc_h10 = _source45.dtor_args;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source45.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _465___mcc_h14 = _source45.dtor_dims;
        DAST._IType _466___mcc_h15 = _source45.dtor_typ;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source45.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _467___mcc_h18 = _source45.dtor_path;
        Dafny.ISequence<DAST._IType> _468___mcc_h19 = _source45.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _469___mcc_h20 = _source45.dtor_variant;
        bool _470___mcc_h21 = _source45.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _471___mcc_h22 = _source45.dtor_contents;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source45.is_Convert) {
        DAST._IExpression _472___mcc_h28 = _source45.dtor_value;
        DAST._IType _473___mcc_h29 = _source45.dtor_from;
        DAST._IType _474___mcc_h30 = _source45.dtor_typ;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source45.is_SeqConstruct) {
        DAST._IExpression _475___mcc_h34 = _source45.dtor_length;
        DAST._IExpression _476___mcc_h35 = _source45.dtor_elem;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source45.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _477___mcc_h38 = _source45.dtor_elements;
        DAST._IType _478___mcc_h39 = _source45.dtor_typ;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source45.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _479___mcc_h42 = _source45.dtor_elements;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source45.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _480___mcc_h44 = _source45.dtor_mapElems;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source45.is_This) {
        s = DAM.Stmt.create_Pure(DAM.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this")));
      } else if (_source45.is_Ite) {
        DAST._IExpression _481___mcc_h46 = _source45.dtor_cond;
        DAST._IExpression _482___mcc_h47 = _source45.dtor_thn;
        DAST._IExpression _483___mcc_h48 = _source45.dtor_els;
        DAST._IExpression _484_els = _483___mcc_h48;
        DAST._IExpression _485_thn = _482___mcc_h47;
        DAST._IExpression _486_cond = _481___mcc_h46;
        DAM._IStmt _487_cond;
        DAM._IStmt _out22;
        _out22 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_486_cond);
        _487_cond = _out22;
        DAM._IStmt _488_thn;
        DAM._IStmt _out23;
        _out23 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_485_thn);
        _488_thn = _out23;
        DAM._IStmt _489_els;
        DAM._IStmt _out24;
        _out24 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_484_els);
        _489_els = _out24;
        s = DAM.Stmt.create_Bind(_487_cond, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), DAM.Stmt.create_Ite(DAM.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if")), _488_thn, _489_els));
      } else if (_source45.is_UnOp) {
        DAST._IUnaryOp _490___mcc_h52 = _source45.dtor_unOp;
        DAST._IExpression _491___mcc_h53 = _source45.dtor_expr;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source45.is_BinOp) {
        DAST._IBinOp _492___mcc_h56 = _source45.dtor_op;
        DAST._IExpression _493___mcc_h57 = _source45.dtor_left;
        DAST._IExpression _494___mcc_h58 = _source45.dtor_right;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source45.is_ArrayLen) {
        DAST._IExpression _495___mcc_h62 = _source45.dtor_expr;
        BigInteger _496___mcc_h63 = _source45.dtor_dim;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source45.is_Select) {
        DAST._IExpression _497___mcc_h66 = _source45.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _498___mcc_h67 = _source45.dtor_field;
        bool _499___mcc_h68 = _source45.dtor_isConstant;
        bool _500___mcc_h69 = _source45.dtor_onDatatype;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source45.is_SelectFn) {
        DAST._IExpression _501___mcc_h74 = _source45.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _502___mcc_h75 = _source45.dtor_field;
        bool _503___mcc_h76 = _source45.dtor_onDatatype;
        bool _504___mcc_h77 = _source45.dtor_isStatic;
        BigInteger _505___mcc_h78 = _source45.dtor_arity;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source45.is_Index) {
        DAST._IExpression _506___mcc_h84 = _source45.dtor_expr;
        DAST._ICollKind _507___mcc_h85 = _source45.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _508___mcc_h86 = _source45.dtor_indices;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source45.is_IndexRange) {
        DAST._IExpression _509___mcc_h90 = _source45.dtor_expr;
        bool _510___mcc_h91 = _source45.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _511___mcc_h92 = _source45.dtor_low;
        DAST._IOptional<DAST._IExpression> _512___mcc_h93 = _source45.dtor_high;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source45.is_TupleSelect) {
        DAST._IExpression _513___mcc_h98 = _source45.dtor_expr;
        BigInteger _514___mcc_h99 = _source45.dtor_index;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source45.is_Call) {
        DAST._IExpression _515___mcc_h102 = _source45.dtor_on;
        Dafny.ISequence<Dafny.Rune> _516___mcc_h103 = _source45.dtor_name;
        Dafny.ISequence<DAST._IType> _517___mcc_h104 = _source45.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _518___mcc_h105 = _source45.dtor_args;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source45.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _519___mcc_h110 = _source45.dtor_params;
        DAST._IType _520___mcc_h111 = _source45.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _521___mcc_h112 = _source45.dtor_body;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source45.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _522___mcc_h116 = _source45.dtor_values;
        DAST._IType _523___mcc_h117 = _source45.dtor_retType;
        DAST._IExpression _524___mcc_h118 = _source45.dtor_expr;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source45.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _525___mcc_h122 = _source45.dtor_name;
        DAST._IType _526___mcc_h123 = _source45.dtor_typ;
        DAST._IExpression _527___mcc_h124 = _source45.dtor_value;
        DAST._IExpression _528___mcc_h125 = _source45.dtor_iifeBody;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source45.is_Apply) {
        DAST._IExpression _529___mcc_h130 = _source45.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _530___mcc_h131 = _source45.dtor_args;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source45.is_TypeTest) {
        DAST._IExpression _531___mcc_h134 = _source45.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _532___mcc_h135 = _source45.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _533___mcc_h136 = _source45.dtor_variant;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source45.is_InitializationValue) {
        DAST._IType _534___mcc_h140 = _source45.dtor_typ;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source45.is_BoolBoundedPool) {
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source45.is_SetBoundedPool) {
        DAST._IExpression _535___mcc_h142 = _source45.dtor_of;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else if (_source45.is_SeqBoundedPool) {
        DAST._IExpression _536___mcc_h144 = _source45.dtor_of;
        bool _537___mcc_h145 = _source45.dtor_includeDuplicates;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      } else {
        DAST._IExpression _538___mcc_h148 = _source45.dtor_lo;
        DAST._IExpression _539___mcc_h149 = _source45.dtor_hi;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.__default.Skip();
      }
      return s;
    }
    public static DAM._IStmt EmitBlock(Dafny.ISequence<DAST._IStatement> block) {
      DAM._IStmt st = DAM.Stmt.Default();
      if ((new BigInteger((block).Count)).Sign != 1) {
        st = DAM.__default.Skip();
        return st;
      }
      Dafny.ISequence<DAST._IStatement> _540_next;
      _540_next = (block).Drop(BigInteger.One);
      DAST._IStatement _source46 = (block).Select(BigInteger.Zero);
      if (_source46.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _541___mcc_h0 = _source46.dtor_name;
        DAST._IType _542___mcc_h1 = _source46.dtor_typ;
        DAST._IOptional<DAST._IExpression> _543___mcc_h2 = _source46.dtor_maybeValue;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.__default.Skip();
      } else if (_source46.is_Assign) {
        DAST._IAssignLhs _544___mcc_h6 = _source46.dtor_lhs;
        DAST._IExpression _545___mcc_h7 = _source46.dtor_value;
        DAST._IExpression _546_rhs = _545___mcc_h7;
        DAST._IAssignLhs _547_lhs = _544___mcc_h6;
        DAM._IStmt _548_lhs;
        DAM._IStmt _out25;
        _out25 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitLval(_547_lhs);
        _548_lhs = _out25;
        DAM._IStmt _549_rhs;
        DAM._IStmt _out26;
        _out26 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_546_rhs);
        _549_rhs = _out26;
        DAM._IStmt _550_next;
        DAM._IStmt _out27;
        _out27 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_540_next);
        _550_next = _out27;
        st = DAM.Stmt.create_Bind(_548_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Stmt.create_Bind(_549_rhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rhs"), DAM.Stmt.create_Write(DAM.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rhs")), DAM.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), _550_next)));
      } else if (_source46.is_If) {
        DAST._IExpression _551___mcc_h10 = _source46.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _552___mcc_h11 = _source46.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _553___mcc_h12 = _source46.dtor_els;
        Dafny.ISequence<DAST._IStatement> _554_els = _553___mcc_h12;
        Dafny.ISequence<DAST._IStatement> _555_thn = _552___mcc_h11;
        DAST._IExpression _556_cond = _551___mcc_h10;
        DAM._IStmt _557_cond;
        DAM._IStmt _out28;
        _out28 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_556_cond);
        _557_cond = _out28;
        DAM._IStmt _558_thn;
        DAM._IStmt _out29;
        _out29 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_555_thn);
        _558_thn = _out29;
        DAM._IStmt _559_els;
        DAM._IStmt _out30;
        _out30 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_554_els);
        _559_els = _out30;
        DAM._IStmt _560_next;
        DAM._IStmt _out31;
        _out31 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_540_next);
        _560_next = _out31;
        st = DAM.__default.Then(DAM.Stmt.create_Bind(_557_cond, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), DAM.Stmt.create_Ite(DAM.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if")), _558_thn, _559_els)), _560_next);
      } else if (_source46.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _561___mcc_h16 = _source46.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _562___mcc_h17 = _source46.dtor_body;
        Dafny.ISequence<DAST._IStatement> _563_stmt = _562___mcc_h17;
        Dafny.ISequence<Dafny.Rune> _564_lab = _561___mcc_h16;
        DAM._IStmt _565_block;
        DAM._IStmt _out32;
        _out32 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(Dafny.Sequence<DAST._IStatement>.Concat(_563_stmt, _540_next));
        _565_block = _out32;
        st = DAM.Stmt.create_LetCS(_564_lab, _565_block);
      } else if (_source46.is_While) {
        DAST._IExpression _566___mcc_h20 = _source46.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _567___mcc_h21 = _source46.dtor_body;
        Dafny.ISequence<DAST._IStatement> _568_body = _567___mcc_h21;
        DAST._IExpression _569_guard = _566___mcc_h20;
        DAM._IStmt _570_guard;
        DAM._IStmt _out33;
        _out33 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_569_guard);
        _570_guard = _out33;
        DAM._IStmt _571_body;
        DAM._IStmt _out34;
        _out34 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_568_body);
        _571_body = _out34;
        DAM._IStmt _572_next;
        DAM._IStmt _out35;
        _out35 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_540_next);
        _572_next = _out35;
        st = DAM.__default.While(_570_guard, _571_body, _572_next);
      } else if (_source46.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _573___mcc_h24 = _source46.dtor_boundName;
        DAST._IType _574___mcc_h25 = _source46.dtor_boundType;
        DAST._IExpression _575___mcc_h26 = _source46.dtor_over;
        Dafny.ISequence<DAST._IStatement> _576___mcc_h27 = _source46.dtor_body;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.__default.Skip();
      } else if (_source46.is_Call) {
        DAST._IExpression _577___mcc_h32 = _source46.dtor_on;
        Dafny.ISequence<Dafny.Rune> _578___mcc_h33 = _source46.dtor_name;
        Dafny.ISequence<DAST._IType> _579___mcc_h34 = _source46.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _580___mcc_h35 = _source46.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _581___mcc_h36 = _source46.dtor_outs;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.__default.Skip();
      } else if (_source46.is_Return) {
        DAST._IExpression _582___mcc_h42 = _source46.dtor_expr;
        DAST._IExpression _583_expr = _582___mcc_h42;
        DAM._IStmt _584_ret;
        DAM._IStmt _out36;
        _out36 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_583_expr);
        _584_ret = _out36;
        st = DAM.Stmt.create_Throw(DAM.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return")), _584_ret);
      } else if (_source46.is_EarlyReturn) {
        st = DAM.Stmt.create_Throw(DAM.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return")), DAM.__default.Skip());
      } else if (_source46.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _585___mcc_h44 = _source46.dtor_toLabel;
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _586_lab = _585___mcc_h44;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source47 = _586_lab;
          if (_source47.is_Some) {
            Dafny.ISequence<Dafny.Rune> _587___mcc_h50 = _source47.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _588_lab = _587___mcc_h50;
            st = DAM.Stmt.create_Throw(DAM.Expr.create_Var(_588_lab), DAM.__default.Skip());
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            st = DAM.__default.Skip();
          }
        }
      } else if (_source46.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _589___mcc_h46 = _source46.dtor_body;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.__default.Skip();
      } else if (_source46.is_JumpTailCallStart) {
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.__default.Skip();
      } else if (_source46.is_Halt) {
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.__default.Skip();
      } else {
        DAST._IExpression _590___mcc_h48 = _source46.dtor_Print_a0;
        DAST._IExpression _591_expr = _590___mcc_h48;
        DAM._IStmt _592_arg;
        DAM._IStmt _out37;
        _out37 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_591_expr);
        _592_arg = _out37;
        DAM._IStmt _593_next;
        DAM._IStmt _out38;
        _out38 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_540_next);
        _593_next = _out38;
        st = DAM.Stmt.create_Bind(_592_arg, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Stmt.create_Print(DAM.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), _593_next));
      }
      return st;
    }
    public static DAM._IStmt EmitLval(DAST._IAssignLhs lv) {
      DAM._IStmt s = DAM.Stmt.Default();
      DAST._IAssignLhs _source48 = lv;
      if (_source48.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _594___mcc_h0 = _source48.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source49 = _594___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _595___mcc_h2 = _source49;
        Dafny.ISequence<Dafny.Rune> _596_v = _595___mcc_h2;
        s = DAM.Stmt.create_Pure(DAM.Expr.create_Var(_596_v));
      } else if (_source48.is_Select) {
        DAST._IExpression _597___mcc_h4 = _source48.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _598___mcc_h5 = _source48.dtor_field;
        s = DAM.__default.Skip();
      } else {
        DAST._IExpression _599___mcc_h8 = _source48.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _600___mcc_h9 = _source48.dtor_indices;
        s = DAM.__default.Skip();
      }
      return s;
    }
  }
} // end of namespace ResolvedDesugaredExecutableDafnyPlugin
namespace DCOMP {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> natToString(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0");
      } else if ((n) == (BigInteger.One)) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1");
      } else if ((n) == (new BigInteger(2))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("2");
      } else if ((n) == (new BigInteger(3))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("3");
      } else if ((n) == (new BigInteger(4))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("4");
      } else if ((n) == (new BigInteger(5))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("5");
      } else if ((n) == (new BigInteger(6))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("6");
      } else if ((n) == (new BigInteger(7))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("7");
      } else if ((n) == (new BigInteger(8))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("8");
      } else if ((n) == (new BigInteger(9))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("9");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.natToString(Dafny.Helpers.EuclideanDivision(n, new BigInteger(10))), DCOMP.__default.natToString(Dafny.Helpers.EuclideanModulus(n, new BigInteger(10))));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _601___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_601___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else {
        if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
          _601___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_601___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
          Dafny.ISequence<Dafny.Rune> _in1 = (i).Drop(BigInteger.One);
          i = _in1;
          goto TAIL_CALL_START;
        } else {
          _601___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_601___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
          Dafny.ISequence<Dafny.Rune> _in2 = (i).Drop(BigInteger.One);
          i = _in2;
          goto TAIL_CALL_START;
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), DCOMP.__default.replaceDots(i));
    }
  }

  public partial class stringNat {
    private static readonly Dafny.ISequence<Dafny.Rune> Witness = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1");
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(DCOMP.stringNat.Default());
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _602_body;
      Dafny.ISequence<Dafny.Rune> _out39;
      _out39 = DCOMP.COMP.GenModuleBody((mod).dtor_body, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
      _602_body = _out39;
      if ((mod).dtor_isExtern) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), DCOMP.__default.escapeIdent((mod).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), DCOMP.__default.escapeIdent((mod).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _602_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _603_i;
      _603_i = BigInteger.Zero;
      while ((_603_i) < (new BigInteger((body).Count))) {
        Dafny.ISequence<Dafny.Rune> _604_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        DAST._IModuleItem _source50 = (body).Select(_603_i);
        if (_source50.is_Module) {
          DAST._IModule _605___mcc_h0 = _source50.dtor_Module_a0;
          DAST._IModule _606_m = _605___mcc_h0;
          Dafny.ISequence<Dafny.Rune> _out40;
          _out40 = DCOMP.COMP.GenModule(_606_m, containingPath);
          _604_generated = _out40;
        } else if (_source50.is_Class) {
          DAST._IClass _607___mcc_h1 = _source50.dtor_Class_a0;
          DAST._IClass _608_c = _607___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _out41;
          _out41 = DCOMP.COMP.GenClass(_608_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_608_c).dtor_name)));
          _604_generated = _out41;
        } else if (_source50.is_Trait) {
          DAST._ITrait _609___mcc_h2 = _source50.dtor_Trait_a0;
          DAST._ITrait _610_t = _609___mcc_h2;
          Dafny.ISequence<Dafny.Rune> _out42;
          _out42 = DCOMP.COMP.GenTrait(_610_t, containingPath);
          _604_generated = _out42;
        } else if (_source50.is_Newtype) {
          DAST._INewtype _611___mcc_h3 = _source50.dtor_Newtype_a0;
          DAST._INewtype _612_n = _611___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _out43;
          _out43 = DCOMP.COMP.GenNewtype(_612_n);
          _604_generated = _out43;
        } else {
          DAST._IDatatype _613___mcc_h4 = _source50.dtor_Datatype_a0;
          DAST._IDatatype _614_d = _613___mcc_h4;
          Dafny.ISequence<Dafny.Rune> _out44;
          _out44 = DCOMP.COMP.GenDatatype(_614_d);
          _604_generated = _out44;
        }
        if ((_603_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _604_generated);
        _603_i = (_603_i) + (BigInteger.One);
      }
      return s;
    }
    public static void GenTypeParameters(Dafny.ISequence<DAST._IType> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<Dafny.Rune> typeParams, out Dafny.ISequence<Dafny.Rune> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints, out Dafny.ISequence<Dafny.Rune> constrainedEraseParams, out Dafny.ISequence<Dafny.Rune> unerasedParams, out Dafny.ISequence<Dafny.Rune> erasedParams) {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Empty;
      unerasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      erasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _615_tpI;
      _615_tpI = BigInteger.Zero;
      if ((new BigInteger((@params).Count)).Sign == 1) {
        typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where ");
        constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_615_tpI) < (new BigInteger((@params).Count))) {
          DAST._IType _616_tp;
          _616_tp = (@params).Select(_615_tpI);
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_616_tp));
          Dafny.ISequence<Dafny.Rune> _617_genTp;
          Dafny.ISequence<Dafny.Rune> _out45;
          _out45 = DCOMP.COMP.GenType(_616_tp, false, false);
          _617_genTp = _out45;
          typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(typeParams, _617_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          Dafny.ISequence<Dafny.Rune> _618_baseConstraints;
          _618_baseConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<"), _617_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default"));
          constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(constrainedTypeParams, _617_genTp), _618_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static, "));
          whereConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(whereConstraints, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _617_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(constrainedEraseParams, _617_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _617_genTp), _618_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + ::dafny_runtime::DafnyUnerasable<")), _617_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased> + 'static, "));
          unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, _617_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, _617_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _615_tpI = (_615_tpI) + (BigInteger.One);
        }
        typeParams = Dafny.Sequence<Dafny.Rune>.Concat(typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Concat(constrainedTypeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Concat(constrainedEraseParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _619_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _620_typeParams;
      Dafny.ISequence<Dafny.Rune> _621_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _622_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _623_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _624_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _625_erasedParams;
      Dafny.ISet<DAST._IType> _out46;
      Dafny.ISequence<Dafny.Rune> _out47;
      Dafny.ISequence<Dafny.Rune> _out48;
      Dafny.ISequence<Dafny.Rune> _out49;
      Dafny.ISequence<Dafny.Rune> _out50;
      Dafny.ISequence<Dafny.Rune> _out51;
      Dafny.ISequence<Dafny.Rune> _out52;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out46, out _out47, out _out48, out _out49, out _out50, out _out51, out _out52);
      _619_typeParamsSet = _out46;
      _620_typeParams = _out47;
      _621_constrainedTypeParams = _out48;
      _622_whereConstraints = _out49;
      _623_constrainedEraseParams = _out50;
      _624_unerasedParams = _out51;
      _625_erasedParams = _out52;
      Dafny.ISequence<Dafny.Rune> _626_fields;
      _626_fields = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<Dafny.Rune> _627_fieldInits;
      _627_fieldInits = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _628_fieldI;
      _628_fieldI = BigInteger.Zero;
      while ((_628_fieldI) < (new BigInteger(((c).dtor_fields).Count))) {
        DAST._IField _629_field;
        _629_field = ((c).dtor_fields).Select(_628_fieldI);
        Dafny.ISequence<Dafny.Rune> _630_fieldType;
        Dafny.ISequence<Dafny.Rune> _out53;
        _out53 = DCOMP.COMP.GenType(((_629_field).dtor_formal).dtor_typ, false, false);
        _630_fieldType = _out53;
        _626_fields = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_626_fields, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")), DCOMP.__default.escapeIdent(((_629_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell<")), _630_fieldType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">,\n"));
        DAST._IOptional<DAST._IExpression> _source51 = (_629_field).dtor_defaultValue;
        if (_source51.is_Some) {
          DAST._IExpression _631___mcc_h0 = _source51.dtor_Some_a0;
          DAST._IExpression _632_e = _631___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _633_eStr;
            bool _634___v1;
            bool _635___v2;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _636___v3;
            Dafny.ISequence<Dafny.Rune> _out54;
            bool _out55;
            bool _out56;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out57;
            DCOMP.COMP.GenExpr(_632_e, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out54, out _out55, out _out56, out _out57);
            _633_eStr = _out54;
            _634___v1 = _out55;
            _635___v2 = _out56;
            _636___v3 = _out57;
            _627_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_627_fieldInits, DCOMP.__default.escapeIdent(((_629_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell::new(")), _633_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("),\n"));
          }
        } else {
          {
            _627_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_627_fieldInits, DCOMP.__default.escapeIdent(((_629_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell::new(::std::default::Default::default()),\n"));
          }
        }
        _628_fieldI = (_628_fieldI) + (BigInteger.One);
      }
      BigInteger _637_typeParamI;
      _637_typeParamI = BigInteger.Zero;
      while ((_637_typeParamI) < (new BigInteger(((c).dtor_typeParams).Count))) {
        Dafny.ISequence<Dafny.Rune> _638_tpeGen;
        Dafny.ISequence<Dafny.Rune> _out58;
        _out58 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_637_typeParamI), false, false);
        _638_tpeGen = _out58;
        _626_fields = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_626_fields, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_")), DCOMP.__default.natToString(_637_typeParamI)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::marker::PhantomData<")), _638_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">,\n"));
        _627_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_627_fieldInits, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_")), DCOMP.__default.natToString(_637_typeParamI)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::marker::PhantomData,\n"));
        _637_typeParamI = (_637_typeParamI) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub struct "), DCOMP.__default.escapeIdent((c).dtor_name)), _620_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _626_fields), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      Dafny.ISequence<Dafny.Rune> _639_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _640_traitBodies;
      Dafny.ISequence<Dafny.Rune> _out59;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out60;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(path)), _619_typeParamsSet, out _out59, out _out60);
      _639_implBody = _out59;
      _640_traitBodies = _out60;
      _639_implBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn new() -> Self {\n"), DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _627_fieldInits), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n}\n")), _639_implBody);
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _621_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), DCOMP.__default.escapeIdent((c).dtor_name)), _620_typeParams), _622_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _639_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _641_i;
        _641_i = BigInteger.Zero;
        while ((_641_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _642_superClass;
          _642_superClass = ((c).dtor_superClasses).Select(_641_i);
          DAST._IType _source52 = _642_superClass;
          if (_source52.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _643___mcc_h1 = _source52.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _644___mcc_h2 = _source52.dtor_typeArgs;
            DAST._IResolvedType _645___mcc_h3 = _source52.dtor_resolved;
            DAST._IResolvedType _source53 = _645___mcc_h3;
            if (_source53.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _646___mcc_h7 = _source53.dtor_path;
            } else if (_source53.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _647___mcc_h9 = _source53.dtor_path;
              Dafny.ISequence<DAST._IType> _648_typeArgs = _644___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _649_traitPath = _643___mcc_h1;
              {
                Dafny.ISequence<Dafny.Rune> _650_pathStr;
                Dafny.ISequence<Dafny.Rune> _out61;
                _out61 = DCOMP.COMP.GenPath(_649_traitPath);
                _650_pathStr = _out61;
                Dafny.ISequence<Dafny.Rune> _651_typeArgs;
                Dafny.ISequence<Dafny.Rune> _out62;
                _out62 = DCOMP.COMP.GenTypeArgs(_648_typeArgs, false, false);
                _651_typeArgs = _out62;
                Dafny.ISequence<Dafny.Rune> _652_body;
                _652_body = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
                if ((_640_traitBodies).Contains(_649_traitPath)) {
                  _652_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Select(_640_traitBodies, _649_traitPath);
                }
                Dafny.ISequence<Dafny.Rune> _653_genSelfPath;
                Dafny.ISequence<Dafny.Rune> _out63;
                _out63 = DCOMP.COMP.GenPath(path);
                _653_genSelfPath = _out63;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nimpl ")), _621_constrainedTypeParams), _650_pathStr), _651_typeArgs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" for ::std::rc::Rc<")), _653_genSelfPath), _620_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")), _622_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _652_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
              }
            } else {
              DAST._IType _654___mcc_h11 = _source53.dtor_Newtype_a0;
            }
          } else if (_source52.is_Nullable) {
            DAST._IType _655___mcc_h13 = _source52.dtor_Nullable_a0;
          } else if (_source52.is_Tuple) {
            Dafny.ISequence<DAST._IType> _656___mcc_h15 = _source52.dtor_Tuple_a0;
          } else if (_source52.is_Array) {
            DAST._IType _657___mcc_h17 = _source52.dtor_element;
            BigInteger _658___mcc_h18 = _source52.dtor_dims;
          } else if (_source52.is_Seq) {
            DAST._IType _659___mcc_h21 = _source52.dtor_element;
          } else if (_source52.is_Set) {
            DAST._IType _660___mcc_h23 = _source52.dtor_element;
          } else if (_source52.is_Multiset) {
            DAST._IType _661___mcc_h25 = _source52.dtor_element;
          } else if (_source52.is_Map) {
            DAST._IType _662___mcc_h27 = _source52.dtor_key;
            DAST._IType _663___mcc_h28 = _source52.dtor_value;
          } else if (_source52.is_Arrow) {
            Dafny.ISequence<DAST._IType> _664___mcc_h31 = _source52.dtor_args;
            DAST._IType _665___mcc_h32 = _source52.dtor_result;
          } else if (_source52.is_Primitive) {
            DAST._IPrimitive _666___mcc_h35 = _source52.dtor_Primitive_a0;
          } else if (_source52.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _667___mcc_h37 = _source52.dtor_Passthrough_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _668___mcc_h39 = _source52.dtor_TypeArg_a0;
          }
          _641_i = (_641_i) + (BigInteger.One);
        }
      }
      Dafny.ISequence<Dafny.Rune> _669_defaultImpl;
      _669_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _621_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _620_typeParams), _622_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      _669_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_669_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n"));
      _669_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_669_defaultImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new()\n"));
      _669_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_669_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      _669_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_669_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      Dafny.ISequence<Dafny.Rune> _670_printImpl;
      _670_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _621_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _620_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {\n"));
      _670_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_670_printImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(__fmt_print_formatter, \"")), ((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _671_ptrPartialEqImpl;
      _671_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _620_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::cmp::PartialEq for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _620_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      _671_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_671_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn eq(&self, other: &Self) -> bool {\n"));
      _671_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_671_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ptr::eq(self, other)"));
      _671_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_671_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _672_identEraseImpls;
      _672_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _621_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _620_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), DCOMP.__default.escapeIdent((c).dtor_name)), _625_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}\n"));
      _672_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_672_identEraseImpls, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _623_constrainedEraseParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _624_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _620_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _669_defaultImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _670_printImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _671_ptrPartialEqImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _672_identEraseImpls);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _673_typeParamsSet;
      _673_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<Dafny.Rune> _674_typeParams;
      _674_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _675_tpI;
      _675_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        _674_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_675_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._IType _676_tp;
          _676_tp = ((t).dtor_typeParams).Select(_675_tpI);
          _673_typeParamsSet = Dafny.Set<DAST._IType>.Union(_673_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_676_tp));
          Dafny.ISequence<Dafny.Rune> _677_genTp;
          Dafny.ISequence<Dafny.Rune> _out64;
          _out64 = DCOMP.COMP.GenType(_676_tp, false, false);
          _677_genTp = _out64;
          _674_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_674_typeParams, _677_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _675_tpI = (_675_tpI) + (BigInteger.One);
        }
        _674_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(_674_typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _678_fullPath;
      _678_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<Dafny.Rune> _679_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _680___v6;
      Dafny.ISequence<Dafny.Rune> _out65;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out66;
      DCOMP.COMP.GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_678_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_678_fullPath)), _673_typeParamsSet, out _out65, out _out66);
      _679_implBody = _out65;
      _680___v6 = _out66;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub trait "), DCOMP.__default.escapeIdent((t).dtor_name)), _674_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _679_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenNewtype(DAST._INewtype c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _681_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _682_typeParams;
      Dafny.ISequence<Dafny.Rune> _683_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _684_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _685___v7;
      Dafny.ISequence<Dafny.Rune> _686___v8;
      Dafny.ISequence<Dafny.Rune> _687___v9;
      Dafny.ISet<DAST._IType> _out67;
      Dafny.ISequence<Dafny.Rune> _out68;
      Dafny.ISequence<Dafny.Rune> _out69;
      Dafny.ISequence<Dafny.Rune> _out70;
      Dafny.ISequence<Dafny.Rune> _out71;
      Dafny.ISequence<Dafny.Rune> _out72;
      Dafny.ISequence<Dafny.Rune> _out73;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out67, out _out68, out _out69, out _out70, out _out71, out _out72, out _out73);
      _681_typeParamsSet = _out67;
      _682_typeParams = _out68;
      _683_constrainedTypeParams = _out69;
      _684_whereConstraints = _out70;
      _685___v7 = _out71;
      _686___v8 = _out72;
      _687___v9 = _out73;
      Dafny.ISequence<Dafny.Rune> _688_underlyingType;
      Dafny.ISequence<Dafny.Rune> _out74;
      _out74 = DCOMP.COMP.GenType((c).dtor_base, false, false);
      _688_underlyingType = _out74;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]\n#[repr(transparent)]\npub struct "), DCOMP.__default.escapeIdent((c).dtor_name)), _682_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(pub ")), _688_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _683_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _682_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), _688_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _683_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), _688_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _682_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _683_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _682_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _682_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _683_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _682_typeParams), _684_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n"));
      DAST._IOptional<DAST._IExpression> _source54 = (c).dtor_witnessExpr;
      if (_source54.is_Some) {
        DAST._IExpression _689___mcc_h0 = _source54.dtor_Some_a0;
        DAST._IExpression _690_e = _689___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _691_eStr;
          bool _692___v10;
          bool _693___v11;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _694___v12;
          Dafny.ISequence<Dafny.Rune> _out75;
          bool _out76;
          bool _out77;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out78;
          DCOMP.COMP.GenExpr(_690_e, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out75, out _out76, out _out77, out _out78);
          _691_eStr = _out75;
          _692___v10 = _out76;
          _693___v11 = _out77;
          _694___v12 = _out78;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _691_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
        }
      } else {
        {
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(::std::default::Default::default())\n"));
        }
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _683_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _682_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, in_seq: bool) -> ::std::fmt::Result {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, __fmt_print_formatter, in_seq)\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _683_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::ops::Deref for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _682_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = ")), _688_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn deref(&self) -> &Self::Target {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenDatatype(DAST._IDatatype c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _695_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _696_typeParams;
      Dafny.ISequence<Dafny.Rune> _697_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _698_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _699_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _700_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _701_erasedParams;
      Dafny.ISet<DAST._IType> _out79;
      Dafny.ISequence<Dafny.Rune> _out80;
      Dafny.ISequence<Dafny.Rune> _out81;
      Dafny.ISequence<Dafny.Rune> _out82;
      Dafny.ISequence<Dafny.Rune> _out83;
      Dafny.ISequence<Dafny.Rune> _out84;
      Dafny.ISequence<Dafny.Rune> _out85;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out79, out _out80, out _out81, out _out82, out _out83, out _out84, out _out85);
      _695_typeParamsSet = _out79;
      _696_typeParams = _out80;
      _697_constrainedTypeParams = _out81;
      _698_whereConstraints = _out82;
      _699_constrainedEraseParams = _out83;
      _700_unerasedParams = _out84;
      _701_erasedParams = _out85;
      Dafny.ISequence<Dafny.Rune> _702_ctors;
      _702_ctors = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _703_i;
      _703_i = BigInteger.Zero;
      while ((_703_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _704_ctor;
        _704_ctor = ((c).dtor_ctors).Select(_703_i);
        Dafny.ISequence<Dafny.Rune> _705_ctorBody;
        _705_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_704_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        BigInteger _706_j;
        _706_j = BigInteger.Zero;
        while ((_706_j) < (new BigInteger(((_704_ctor).dtor_args).Count))) {
          DAST._IFormal _707_formal;
          _707_formal = ((_704_ctor).dtor_args).Select(_706_j);
          Dafny.ISequence<Dafny.Rune> _708_formalType;
          Dafny.ISequence<Dafny.Rune> _out86;
          _out86 = DCOMP.COMP.GenType((_707_formal).dtor_typ, false, false);
          _708_formalType = _out86;
          if ((c).dtor_isCo) {
            _705_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_705_ctorBody, DCOMP.__default.escapeIdent((_707_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper<")), _708_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">, "));
          } else {
            _705_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_705_ctorBody, DCOMP.__default.escapeIdent((_707_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _708_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          _706_j = (_706_j) + (BigInteger.One);
        }
        _705_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(_705_ctorBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        _702_ctors = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_702_ctors, _705_ctorBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"));
        _703_i = (_703_i) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _709_selfPath;
      _709_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<Dafny.Rune> _710_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _711_traitBodies;
      Dafny.ISequence<Dafny.Rune> _out87;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out88;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(_709_selfPath)), _695_typeParamsSet, out _out87, out _out88);
      _710_implBody = _out87;
      _711_traitBodies = _out88;
      _703_i = BigInteger.Zero;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _712_emittedFields;
      _712_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      while ((_703_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _713_ctor;
        _713_ctor = ((c).dtor_ctors).Select(_703_i);
        BigInteger _714_j;
        _714_j = BigInteger.Zero;
        while ((_714_j) < (new BigInteger(((_713_ctor).dtor_args).Count))) {
          DAST._IFormal _715_formal;
          _715_formal = ((_713_ctor).dtor_args).Select(_714_j);
          if (!((_712_emittedFields).Contains((_715_formal).dtor_name))) {
            _712_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_712_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_715_formal).dtor_name));
            Dafny.ISequence<Dafny.Rune> _716_formalType;
            Dafny.ISequence<Dafny.Rune> _out89;
            _out89 = DCOMP.COMP.GenType((_715_formal).dtor_typ, false, false);
            _716_formalType = _out89;
            Dafny.ISequence<Dafny.Rune> _717_methodBody;
            _717_methodBody = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match self {\n");
            BigInteger _718_k;
            _718_k = BigInteger.Zero;
            while ((_718_k) < (new BigInteger(((c).dtor_ctors).Count))) {
              DAST._IDatatypeCtor _719_ctor2;
              _719_ctor2 = ((c).dtor_ctors).Select(_718_k);
              Dafny.ISequence<Dafny.Rune> _720_ctorMatch;
              _720_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_719_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              BigInteger _721_l;
              _721_l = BigInteger.Zero;
              bool _722_hasMatchingField;
              _722_hasMatchingField = false;
              while ((_721_l) < (new BigInteger(((_719_ctor2).dtor_args).Count))) {
                DAST._IFormal _723_formal2;
                _723_formal2 = ((_719_ctor2).dtor_args).Select(_721_l);
                if (((_715_formal).dtor_name).Equals((_723_formal2).dtor_name)) {
                  _722_hasMatchingField = true;
                }
                _720_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_720_ctorMatch, DCOMP.__default.escapeIdent((_723_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                _721_l = (_721_l) + (BigInteger.One);
              }
              if (_722_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _720_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_720_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => ::std::ops::Deref::deref(&")), DCOMP.__default.escapeIdent((_715_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0),\n"));
                } else {
                  _720_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_720_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => ")), DCOMP.__default.escapeIdent((_715_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"));
                }
              } else {
                _720_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_720_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => panic!(\"field does not exist on this variant\"),\n"));
              }
              _717_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(_717_methodBody, _720_ctorMatch);
              _718_k = (_718_k) + (BigInteger.One);
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _717_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_717_methodBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..) => panic!(),\n"));
            }
            _717_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(_717_methodBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            _710_implBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_710_implBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn ")), DCOMP.__default.escapeIdent((_715_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&self) -> &")), _716_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _717_methodBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
          }
          _714_j = (_714_j) + (BigInteger.One);
        }
        _703_i = (_703_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _702_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_702_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant("));
        BigInteger _724_typeI;
        _724_typeI = BigInteger.Zero;
        while ((_724_typeI) < (new BigInteger(((c).dtor_typeParams).Count))) {
          if ((_724_typeI).Sign == 1) {
            _702_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_702_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _725_genTp;
          Dafny.ISequence<Dafny.Rune> _out90;
          _out90 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_724_typeI), false, false);
          _725_genTp = _out90;
          _702_ctors = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_702_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData::<")), _725_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          _724_typeI = (_724_typeI) + (BigInteger.One);
        }
        _702_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_702_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      Dafny.ISequence<Dafny.Rune> _726_enumBody;
      _726_enumBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq)]\npub enum "), DCOMP.__default.escapeIdent((c).dtor_name)), _696_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _702_ctors), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _697_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), DCOMP.__default.escapeIdent((c).dtor_name)), _696_typeParams), _698_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _710_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      Dafny.ISequence<Dafny.Rune> _727_identEraseImpls;
      _727_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _697_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _696_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), DCOMP.__default.escapeIdent((c).dtor_name)), _701_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}\n"));
      _727_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_727_identEraseImpls, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _699_constrainedEraseParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _700_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _696_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      Dafny.ISequence<Dafny.Rune> _728_printImpl;
      _728_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _697_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _696_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match self {\n"));
      _703_i = BigInteger.Zero;
      while ((_703_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _729_ctor;
        _729_ctor = ((c).dtor_ctors).Select(_703_i);
        Dafny.ISequence<Dafny.Rune> _730_ctorMatch;
        _730_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_729_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _731_modulePrefix;
        _731_modulePrefix = (((((c).dtor_enclosingModule)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(((c).dtor_enclosingModule), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        Dafny.ISequence<Dafny.Rune> _732_printRhs;
        _732_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(__fmt_print_formatter, \""), _731_modulePrefix), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (_729_ctor).dtor_name), (((_729_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?;")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?;"))));
        BigInteger _733_j;
        _733_j = BigInteger.Zero;
        while ((_733_j) < (new BigInteger(((_729_ctor).dtor_args).Count))) {
          DAST._IFormal _734_formal;
          _734_formal = ((_729_ctor).dtor_args).Select(_733_j);
          _730_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_730_ctorMatch, DCOMP.__default.escapeIdent((_734_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          if ((_733_j).Sign == 1) {
            _732_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_732_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nwrite!(__fmt_print_formatter, \", \")?;"));
          }
          _732_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_732_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n::dafny_runtime::DafnyPrint::fmt_print(")), DCOMP.__default.escapeIdent((_734_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", __fmt_print_formatter, false)?;"));
          _733_j = (_733_j) + (BigInteger.One);
        }
        _730_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_730_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_729_ctor).dtor_hasAnyArgs) {
          _732_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_732_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nwrite!(__fmt_print_formatter, \")\")?;"));
        }
        _732_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_732_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nOk(())"));
        _728_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_728_printImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _730_ctorMatch), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" => {\n")), _732_printRhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n"));
        _703_i = (_703_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _728_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_728_printImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..) => {panic!()\n}\n"));
      }
      _728_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(_728_printImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _735_defaultImpl;
      _735_defaultImpl = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        _735_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _697_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _696_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n")), DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
        _703_i = BigInteger.Zero;
        while ((_703_i) < (new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count))) {
          DAST._IFormal _736_formal;
          _736_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_703_i);
          _735_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_735_defaultImpl, DCOMP.__default.escapeIdent((_736_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::default::Default::default(),\n"));
          _703_i = (_703_i) + (BigInteger.One);
        }
        _735_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_735_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n}\n}\n"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_726_enumBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _727_identEraseImpls), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _728_printImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _735_defaultImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      if ((new BigInteger((p).Count)).Sign == 0) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
        return s;
      } else {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super::");
        BigInteger _737_i;
        _737_i = BigInteger.Zero;
        while ((_737_i) < (new BigInteger((p).Count))) {
          if ((_737_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(((p).Select(_737_i))));
          _737_i = (_737_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((args).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        BigInteger _738_i;
        _738_i = BigInteger.Zero;
        while ((_738_i) < (new BigInteger((args).Count))) {
          if ((_738_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _739_genTp;
          Dafny.ISequence<Dafny.Rune> _out91;
          _out91 = DCOMP.COMP.GenType((args).Select(_738_i), inBinding, inFn);
          _739_genTp = _out91;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _739_genTp);
          _738_i = (_738_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenType(DAST._IType c, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IType _source55 = c;
      if (_source55.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _740___mcc_h0 = _source55.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _741___mcc_h1 = _source55.dtor_typeArgs;
        DAST._IResolvedType _742___mcc_h2 = _source55.dtor_resolved;
        DAST._IResolvedType _743_resolved = _742___mcc_h2;
        Dafny.ISequence<DAST._IType> _744_args = _741___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _745_p = _740___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _out92;
          _out92 = DCOMP.COMP.GenPath(_745_p);
          s = _out92;
          Dafny.ISequence<Dafny.Rune> _746_typeArgs;
          Dafny.ISequence<Dafny.Rune> _out93;
          _out93 = DCOMP.COMP.GenTypeArgs(_744_args, inBinding, inFn);
          _746_typeArgs = _out93;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _746_typeArgs);
          DAST._IResolvedType _source56 = _743_resolved;
          if (_source56.is_Datatype) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _747___mcc_h18 = _source56.dtor_path;
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
            }
          } else if (_source56.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _748___mcc_h20 = _source56.dtor_path;
            {
              if ((_745_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
                s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<dyn ::std::any::Any>");
              } else {
                if (inBinding) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              }
            }
          } else {
            DAST._IType _749___mcc_h22 = _source56.dtor_Newtype_a0;
            DAST._IResolvedType _750_Primitive = _743_resolved;
          }
        }
      } else if (_source55.is_Nullable) {
        DAST._IType _751___mcc_h3 = _source55.dtor_Nullable_a0;
        DAST._IType _752_inner = _751___mcc_h3;
        {
          Dafny.ISequence<Dafny.Rune> _753_innerStr;
          Dafny.ISequence<Dafny.Rune> _out94;
          _out94 = DCOMP.COMP.GenType(_752_inner, inBinding, inFn);
          _753_innerStr = _out94;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option<"), _753_innerStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source55.is_Tuple) {
        Dafny.ISequence<DAST._IType> _754___mcc_h4 = _source55.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IType> _755_types = _754___mcc_h4;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          BigInteger _756_i;
          _756_i = BigInteger.Zero;
          while ((_756_i) < (new BigInteger((_755_types).Count))) {
            if ((_756_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _757_generated;
            Dafny.ISequence<Dafny.Rune> _out95;
            _out95 = DCOMP.COMP.GenType((_755_types).Select(_756_i), inBinding, inFn);
            _757_generated = _out95;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _757_generated), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            _756_i = (_756_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
        }
      } else if (_source55.is_Array) {
        DAST._IType _758___mcc_h5 = _source55.dtor_element;
        BigInteger _759___mcc_h6 = _source55.dtor_dims;
        BigInteger _760_dims = _759___mcc_h6;
        DAST._IType _761_element = _758___mcc_h5;
        {
          Dafny.ISequence<Dafny.Rune> _762_elemStr;
          Dafny.ISequence<Dafny.Rune> _out96;
          _out96 = DCOMP.COMP.GenType(_761_element, inBinding, inFn);
          _762_elemStr = _out96;
          s = _762_elemStr;
          BigInteger _763_i;
          _763_i = BigInteger.Zero;
          while ((_763_i) < (_760_dims)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<::std::cell::RefCell<::std::vec::Vec<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>>"));
            _763_i = (_763_i) + (BigInteger.One);
          }
        }
      } else if (_source55.is_Seq) {
        DAST._IType _764___mcc_h7 = _source55.dtor_element;
        DAST._IType _765_element = _764___mcc_h7;
        {
          Dafny.ISequence<Dafny.Rune> _766_elemStr;
          Dafny.ISequence<Dafny.Rune> _out97;
          _out97 = DCOMP.COMP.GenType(_765_element, inBinding, inFn);
          _766_elemStr = _out97;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::vec::Vec<"), _766_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source55.is_Set) {
        DAST._IType _767___mcc_h8 = _source55.dtor_element;
        DAST._IType _768_element = _767___mcc_h8;
        {
          Dafny.ISequence<Dafny.Rune> _769_elemStr;
          Dafny.ISequence<Dafny.Rune> _out98;
          _out98 = DCOMP.COMP.GenType(_768_element, inBinding, inFn);
          _769_elemStr = _out98;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashSet<"), _769_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source55.is_Multiset) {
        DAST._IType _770___mcc_h9 = _source55.dtor_element;
        DAST._IType _771_element = _770___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _772_elemStr;
          Dafny.ISequence<Dafny.Rune> _out99;
          _out99 = DCOMP.COMP.GenType(_771_element, inBinding, inFn);
          _772_elemStr = _out99;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _772_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", u64>"));
        }
      } else if (_source55.is_Map) {
        DAST._IType _773___mcc_h10 = _source55.dtor_key;
        DAST._IType _774___mcc_h11 = _source55.dtor_value;
        DAST._IType _775_value = _774___mcc_h11;
        DAST._IType _776_key = _773___mcc_h10;
        {
          Dafny.ISequence<Dafny.Rune> _777_keyStr;
          Dafny.ISequence<Dafny.Rune> _out100;
          _out100 = DCOMP.COMP.GenType(_776_key, inBinding, inFn);
          _777_keyStr = _out100;
          Dafny.ISequence<Dafny.Rune> _778_valueStr;
          Dafny.ISequence<Dafny.Rune> _out101;
          _out101 = DCOMP.COMP.GenType(_775_value, inBinding, inFn);
          _778_valueStr = _out101;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _777_keyStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _778_valueStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source55.is_Arrow) {
        Dafny.ISequence<DAST._IType> _779___mcc_h12 = _source55.dtor_args;
        DAST._IType _780___mcc_h13 = _source55.dtor_result;
        DAST._IType _781_result = _780___mcc_h13;
        Dafny.ISequence<DAST._IType> _782_args = _779___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper<::std::rc::Rc<dyn ::std::ops::Fn(");
          BigInteger _783_i;
          _783_i = BigInteger.Zero;
          while ((_783_i) < (new BigInteger((_782_args).Count))) {
            if ((_783_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _784_generated;
            Dafny.ISequence<Dafny.Rune> _out102;
            _out102 = DCOMP.COMP.GenType((_782_args).Select(_783_i), inBinding, true);
            _784_generated = _out102;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _784_generated);
            _783_i = (_783_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _785_resultType;
          Dafny.ISequence<Dafny.Rune> _out103;
          _out103 = DCOMP.COMP.GenType(_781_result, inBinding, (inFn) || (inBinding));
          _785_resultType = _out103;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _785_resultType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static>>"));
        }
      } else if (_source55.is_Primitive) {
        DAST._IPrimitive _786___mcc_h14 = _source55.dtor_Primitive_a0;
        DAST._IPrimitive _787_p = _786___mcc_h14;
        {
          DAST._IPrimitive _source57 = _787_p;
          if (_source57.is_Int) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt");
          } else if (_source57.is_Real) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational");
          } else if (_source57.is_String) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Vec<char>");
          } else if (_source57.is_Bool) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool");
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char");
          }
        }
      } else if (_source55.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _788___mcc_h15 = _source55.dtor_Passthrough_a0;
        Dafny.ISequence<Dafny.Rune> _789_v = _788___mcc_h15;
        s = _789_v;
      } else {
        Dafny.ISequence<Dafny.Rune> _790___mcc_h16 = _source55.dtor_TypeArg_a0;
        Dafny.ISequence<Dafny.Rune> _source58 = _790___mcc_h16;
        Dafny.ISequence<Dafny.Rune> _791___mcc_h17 = _source58;
        Dafny.ISequence<Dafny.Rune> _792_name = _791___mcc_h17;
        s = DCOMP.__default.escapeIdent(_792_name);
      }
      return s;
    }
    public static void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<Dafny.Rune> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> traitBodies) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _793_i;
      _793_i = BigInteger.Zero;
      while ((_793_i) < (new BigInteger((body).Count))) {
        DAST._IMethod _source59 = (body).Select(_793_i);
        DAST._IMethod _794___mcc_h0 = _source59;
        DAST._IMethod _795_m = _794___mcc_h0;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source60 = (_795_m).dtor_overridingPath;
          if (_source60.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _796___mcc_h1 = _source60.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _797_p = _796___mcc_h1;
            {
              Dafny.ISequence<Dafny.Rune> _798_existing;
              _798_existing = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              if ((traitBodies).Contains(_797_p)) {
                _798_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Select(traitBodies, _797_p);
              }
              if ((new BigInteger((_798_existing).Count)).Sign == 1) {
                _798_existing = Dafny.Sequence<Dafny.Rune>.Concat(_798_existing, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
              }
              Dafny.ISequence<Dafny.Rune> _799_genMethod;
              Dafny.ISequence<Dafny.Rune> _out104;
              _out104 = DCOMP.COMP.GenMethod(_795_m, true, enclosingType, enclosingTypeParams);
              _799_genMethod = _out104;
              _798_existing = Dafny.Sequence<Dafny.Rune>.Concat(_798_existing, _799_genMethod);
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>(_797_p, _798_existing)));
            }
          } else {
            {
              Dafny.ISequence<Dafny.Rune> _800_generated;
              Dafny.ISequence<Dafny.Rune> _out105;
              _out105 = DCOMP.COMP.GenMethod(_795_m, forTrait, enclosingType, enclosingTypeParams);
              _800_generated = _out105;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _800_generated);
            }
          }
        }
        if ((new BigInteger((s).Count)).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        _793_i = (_793_i) + (BigInteger.One);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> GenParams(Dafny.ISequence<DAST._IFormal> @params) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _801_i;
      _801_i = BigInteger.Zero;
      while ((_801_i) < (new BigInteger((@params).Count))) {
        DAST._IFormal _802_param;
        _802_param = (@params).Select(_801_i);
        Dafny.ISequence<Dafny.Rune> _803_paramType;
        Dafny.ISequence<Dafny.Rune> _out106;
        _out106 = DCOMP.COMP.GenType((_802_param).dtor_typ, false, false);
        _803_paramType = _out106;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((_802_param).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _803_paramType);
        if ((_801_i) < ((new BigInteger((@params).Count)) - (BigInteger.One))) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        _801_i = (_801_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _804_params;
      Dafny.ISequence<Dafny.Rune> _out107;
      _out107 = DCOMP.COMP.GenParams((m).dtor_params);
      _804_params = _out107;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _805_paramNames;
      _805_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _806_paramI;
      _806_paramI = BigInteger.Zero;
      while ((_806_paramI) < (new BigInteger(((m).dtor_params).Count))) {
        _805_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_805_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((m).dtor_params).Select(_806_paramI)).dtor_name));
        _806_paramI = (_806_paramI) + (BigInteger.One);
      }
      if (!((m).dtor_isStatic)) {
        if (forTrait) {
          _804_params = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _804_params);
        } else {
          Dafny.ISequence<Dafny.Rune> _807_enclosingTypeString;
          Dafny.ISequence<Dafny.Rune> _out108;
          _out108 = DCOMP.COMP.GenType(enclosingType, false, false);
          _807_enclosingTypeString = _out108;
          _804_params = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self: &"), _807_enclosingTypeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _804_params);
        }
      }
      Dafny.ISequence<Dafny.Rune> _808_retType;
      _808_retType = (((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")));
      BigInteger _809_typeI;
      _809_typeI = BigInteger.Zero;
      while ((_809_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        if ((_809_typeI).Sign == 1) {
          _808_retType = Dafny.Sequence<Dafny.Rune>.Concat(_808_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        Dafny.ISequence<Dafny.Rune> _810_typeString;
        Dafny.ISequence<Dafny.Rune> _out109;
        _out109 = DCOMP.COMP.GenType(((m).dtor_outTypes).Select(_809_typeI), false, false);
        _810_typeString = _out109;
        _808_retType = Dafny.Sequence<Dafny.Rune>.Concat(_808_retType, _810_typeString);
        _809_typeI = (_809_typeI) + (BigInteger.One);
      }
      if ((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) {
        _808_retType = Dafny.Sequence<Dafny.Rune>.Concat(_808_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      if (forTrait) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn "), DCOMP.__default.escapeIdent((m).dtor_name));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn "), DCOMP.__default.escapeIdent((m).dtor_name));
      }
      Dafny.ISequence<DAST._IType> _811_typeParamsFiltered;
      _811_typeParamsFiltered = Dafny.Sequence<DAST._IType>.FromElements();
      BigInteger _812_typeParamI;
      _812_typeParamI = BigInteger.Zero;
      while ((_812_typeParamI) < (new BigInteger(((m).dtor_typeParams).Count))) {
        DAST._IType _813_typeParam;
        _813_typeParam = ((m).dtor_typeParams).Select(_812_typeParamI);
        if (!((enclosingTypeParams).Contains(_813_typeParam))) {
          _811_typeParamsFiltered = Dafny.Sequence<DAST._IType>.Concat(_811_typeParamsFiltered, Dafny.Sequence<DAST._IType>.FromElements(_813_typeParam));
        }
        _812_typeParamI = (_812_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _814_whereClauses;
      _814_whereClauses = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((_811_typeParamsFiltered).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        _814_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_814_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where "));
        BigInteger _815_i;
        _815_i = BigInteger.Zero;
        while ((_815_i) < (new BigInteger((_811_typeParamsFiltered).Count))) {
          if ((_815_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            _814_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_814_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _816_typeString;
          Dafny.ISequence<Dafny.Rune> _out110;
          _out110 = DCOMP.COMP.GenType((_811_typeParamsFiltered).Select(_815_i), false, false);
          _816_typeString = _out110;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _816_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<")), _816_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default + 'static"));
          _814_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_814_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _816_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq"));
          _815_i = (_815_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _804_params), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _808_retType), _814_whereClauses);
      if ((m).dtor_hasBody) {
        Dafny.ISequence<Dafny.Rune> _817_earlyReturn;
        _817_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return;");
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source61 = (m).dtor_outVars;
        if (_source61.is_Some) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _818___mcc_h0 = _source61.dtor_Some_a0;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _819_outVars = _818___mcc_h0;
          {
            _817_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return (");
            BigInteger _820_outI;
            _820_outI = BigInteger.Zero;
            while ((_820_outI) < (new BigInteger((_819_outVars).Count))) {
              if ((_820_outI).Sign == 1) {
                _817_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_817_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _821_outVar;
              _821_outVar = (_819_outVars).Select(_820_outI);
              _817_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_817_earlyReturn, DCOMP.__default.escapeIdent((_821_outVar)));
              _820_outI = (_820_outI) + (BigInteger.One);
            }
            _817_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_817_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
          }
        } else {
        }
        Dafny.ISequence<Dafny.Rune> _822_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _823___v15;
        Dafny.ISequence<Dafny.Rune> _out111;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out112;
        DCOMP.COMP.GenStmts((m).dtor_body, (((m).dtor_isStatic) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None()) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))), _805_paramNames, true, _817_earlyReturn, out _out111, out _out112);
        _822_body = _out111;
        _823___v15 = _out112;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _822_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n"));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      }
      return s;
    }
    public static void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _824_declarations;
      _824_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _825_i;
      _825_i = BigInteger.Zero;
      while ((_825_i) < (new BigInteger((stmts).Count))) {
        DAST._IStatement _826_stmt;
        _826_stmt = (stmts).Select(_825_i);
        Dafny.ISequence<Dafny.Rune> _827_stmtString;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _828_recIdents;
        Dafny.ISequence<Dafny.Rune> _out113;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out114;
        DCOMP.COMP.GenStmt(_826_stmt, selfIdent, @params, (isLast) && ((_825_i) == ((new BigInteger((stmts).Count)) - (BigInteger.One))), earlyReturn, out _out113, out _out114);
        _827_stmtString = _out113;
        _828_recIdents = _out114;
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_828_recIdents, _824_declarations));
        DAST._IStatement _source62 = _826_stmt;
        if (_source62.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _829___mcc_h0 = _source62.dtor_name;
          DAST._IType _830___mcc_h1 = _source62.dtor_typ;
          DAST._IOptional<DAST._IExpression> _831___mcc_h2 = _source62.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _832_name = _829___mcc_h0;
          {
            _824_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_824_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_832_name));
          }
        } else if (_source62.is_Assign) {
          DAST._IAssignLhs _833___mcc_h6 = _source62.dtor_lhs;
          DAST._IExpression _834___mcc_h7 = _source62.dtor_value;
        } else if (_source62.is_If) {
          DAST._IExpression _835___mcc_h10 = _source62.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _836___mcc_h11 = _source62.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _837___mcc_h12 = _source62.dtor_els;
        } else if (_source62.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _838___mcc_h16 = _source62.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _839___mcc_h17 = _source62.dtor_body;
        } else if (_source62.is_While) {
          DAST._IExpression _840___mcc_h20 = _source62.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _841___mcc_h21 = _source62.dtor_body;
        } else if (_source62.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _842___mcc_h24 = _source62.dtor_boundName;
          DAST._IType _843___mcc_h25 = _source62.dtor_boundType;
          DAST._IExpression _844___mcc_h26 = _source62.dtor_over;
          Dafny.ISequence<DAST._IStatement> _845___mcc_h27 = _source62.dtor_body;
        } else if (_source62.is_Call) {
          DAST._IExpression _846___mcc_h32 = _source62.dtor_on;
          Dafny.ISequence<Dafny.Rune> _847___mcc_h33 = _source62.dtor_name;
          Dafny.ISequence<DAST._IType> _848___mcc_h34 = _source62.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _849___mcc_h35 = _source62.dtor_args;
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _850___mcc_h36 = _source62.dtor_outs;
        } else if (_source62.is_Return) {
          DAST._IExpression _851___mcc_h42 = _source62.dtor_expr;
        } else if (_source62.is_EarlyReturn) {
        } else if (_source62.is_Break) {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _852___mcc_h44 = _source62.dtor_toLabel;
        } else if (_source62.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _853___mcc_h46 = _source62.dtor_body;
        } else if (_source62.is_JumpTailCallStart) {
        } else if (_source62.is_Halt) {
        } else {
          DAST._IExpression _854___mcc_h48 = _source62.dtor_Print_a0;
        }
        if ((_825_i).Sign == 1) {
          generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, _827_stmtString);
        _825_i = (_825_i) + (BigInteger.One);
      }
    }
    public static void GenAssignLhs(DAST._IAssignLhs lhs, Dafny.ISequence<Dafny.Rune> rhs, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, out Dafny.ISequence<Dafny.Rune> generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IAssignLhs _source63 = lhs;
      if (_source63.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _855___mcc_h0 = _source63.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source64 = _855___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _856___mcc_h1 = _source64;
        Dafny.ISequence<Dafny.Rune> _857_id = _856___mcc_h1;
        {
          if ((@params).Contains(_857_id)) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), DCOMP.__default.escapeIdent(_857_id));
          } else {
            generated = DCOMP.__default.escapeIdent(_857_id);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_857_id);
          needsIIFE = false;
        }
      } else if (_source63.is_Select) {
        DAST._IExpression _858___mcc_h2 = _source63.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _859___mcc_h3 = _source63.dtor_field;
        Dafny.ISequence<Dafny.Rune> _860_field = _859___mcc_h3;
        DAST._IExpression _861_on = _858___mcc_h2;
        {
          Dafny.ISequence<Dafny.Rune> _862_onExpr;
          bool _863_onOwned;
          bool _864_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _865_recIdents;
          Dafny.ISequence<Dafny.Rune> _out115;
          bool _out116;
          bool _out117;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out118;
          DCOMP.COMP.GenExpr(_861_on, selfIdent, @params, false, out _out115, out _out116, out _out117, out _out118);
          _862_onExpr = _out115;
          _863_onOwned = _out116;
          _864_onErased = _out117;
          _865_recIdents = _out118;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*("), _862_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _860_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()) = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          readIdents = _865_recIdents;
          needsIIFE = true;
        }
      } else {
        DAST._IExpression _866___mcc_h4 = _source63.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _867___mcc_h5 = _source63.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _868_indices = _867___mcc_h5;
        DAST._IExpression _869_on = _866___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _870_onExpr;
          bool _871_onOwned;
          bool _872_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _873_recIdents;
          Dafny.ISequence<Dafny.Rune> _out119;
          bool _out120;
          bool _out121;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out122;
          DCOMP.COMP.GenExpr(_869_on, selfIdent, @params, false, out _out119, out _out120, out _out121, out _out122);
          _870_onExpr = _out119;
          _871_onOwned = _out120;
          _872_onErased = _out121;
          _873_recIdents = _out122;
          readIdents = _873_recIdents;
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          BigInteger _874_i;
          _874_i = BigInteger.Zero;
          while ((_874_i) < (new BigInteger((_868_indices).Count))) {
            Dafny.ISequence<Dafny.Rune> _875_idx;
            bool _876___v19;
            bool _877_idxErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _878_recIdentsIdx;
            Dafny.ISequence<Dafny.Rune> _out123;
            bool _out124;
            bool _out125;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out126;
            DCOMP.COMP.GenExpr((_868_indices).Select(_874_i), selfIdent, @params, true, out _out123, out _out124, out _out125, out _out126);
            _875_idx = _out123;
            _876___v19 = _out124;
            _877_idxErased = _out125;
            _878_recIdentsIdx = _out126;
            if (!(_877_idxErased)) {
              _875_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _875_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let __idx")), DCOMP.__default.natToString(_874_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = <usize as ::dafny_runtime::NumCast>::from(")), _875_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap();\n"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _878_recIdentsIdx);
            _874_i = (_874_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, _870_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()"));
          _874_i = BigInteger.Zero;
          while ((_874_i) < (new BigInteger((_868_indices).Count))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[__idx")), DCOMP.__default.natToString(_874_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            _874_i = (_874_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}"));
          needsIIFE = true;
        }
      }
    }
    public static void GenStmt(DAST._IStatement stmt, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IStatement _source65 = stmt;
      if (_source65.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _879___mcc_h0 = _source65.dtor_name;
        DAST._IType _880___mcc_h1 = _source65.dtor_typ;
        DAST._IOptional<DAST._IExpression> _881___mcc_h2 = _source65.dtor_maybeValue;
        DAST._IOptional<DAST._IExpression> _source66 = _881___mcc_h2;
        if (_source66.is_Some) {
          DAST._IExpression _882___mcc_h3 = _source66.dtor_Some_a0;
          DAST._IExpression _883_expression = _882___mcc_h3;
          DAST._IType _884_typ = _880___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _885_name = _879___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _886_typeString;
            Dafny.ISequence<Dafny.Rune> _out127;
            _out127 = DCOMP.COMP.GenType(_884_typ, true, false);
            _886_typeString = _out127;
            Dafny.ISequence<Dafny.Rune> _887_expr;
            bool _888___v20;
            bool _889_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _890_recIdents;
            Dafny.ISequence<Dafny.Rune> _out128;
            bool _out129;
            bool _out130;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out131;
            DCOMP.COMP.GenExpr(_883_expression, selfIdent, @params, true, out _out128, out _out129, out _out130, out _out131);
            _887_expr = _out128;
            _888___v20 = _out129;
            _889_recErased = _out130;
            _890_recIdents = _out131;
            if (!(_889_recErased)) {
              _887_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _887_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _887_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _886_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _887_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_885_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _886_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _887_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = _890_recIdents;
          }
        } else {
          DAST._IType _891_typ = _880___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _892_name = _879___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _893_typeString;
            Dafny.ISequence<Dafny.Rune> _out132;
            _out132 = DCOMP.COMP.GenType(_891_typ, true, false);
            _893_typeString = _out132;
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_892_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _893_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source65.is_Assign) {
        DAST._IAssignLhs _894___mcc_h4 = _source65.dtor_lhs;
        DAST._IExpression _895___mcc_h5 = _source65.dtor_value;
        DAST._IExpression _896_expression = _895___mcc_h5;
        DAST._IAssignLhs _897_lhs = _894___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _898_lhsGen;
          bool _899_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _900_recIdents;
          Dafny.ISequence<Dafny.Rune> _out133;
          bool _out134;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out135;
          DCOMP.COMP.GenAssignLhs(_897_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), selfIdent, @params, out _out133, out _out134, out _out135);
          _898_lhsGen = _out133;
          _899_needsIIFE = _out134;
          _900_recIdents = _out135;
          Dafny.ISequence<Dafny.Rune> _901_exprGen;
          bool _902___v21;
          bool _903_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _904_exprIdents;
          Dafny.ISequence<Dafny.Rune> _out136;
          bool _out137;
          bool _out138;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out139;
          DCOMP.COMP.GenExpr(_896_expression, selfIdent, @params, true, out _out136, out _out137, out _out138, out _out139);
          _901_exprGen = _out136;
          _902___v21 = _out137;
          _903_exprErased = _out138;
          _904_exprIdents = _out139;
          if (!(_903_exprErased)) {
            _901_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _901_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          _901_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _901_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          if (_899_needsIIFE) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet __rhs = "), _901_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _898_lhsGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_898_lhsGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _901_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_900_recIdents, _904_exprIdents);
        }
      } else if (_source65.is_If) {
        DAST._IExpression _905___mcc_h6 = _source65.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _906___mcc_h7 = _source65.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _907___mcc_h8 = _source65.dtor_els;
        Dafny.ISequence<DAST._IStatement> _908_els = _907___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _909_thn = _906___mcc_h7;
        DAST._IExpression _910_cond = _905___mcc_h6;
        {
          Dafny.ISequence<Dafny.Rune> _911_condString;
          bool _912___v22;
          bool _913_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _914_recIdents;
          Dafny.ISequence<Dafny.Rune> _out140;
          bool _out141;
          bool _out142;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out143;
          DCOMP.COMP.GenExpr(_910_cond, selfIdent, @params, true, out _out140, out _out141, out _out142, out _out143);
          _911_condString = _out140;
          _912___v22 = _out141;
          _913_condErased = _out142;
          _914_recIdents = _out143;
          if (!(_913_condErased)) {
            _911_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _911_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _914_recIdents;
          Dafny.ISequence<Dafny.Rune> _915_thnString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _916_thnIdents;
          Dafny.ISequence<Dafny.Rune> _out144;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out145;
          DCOMP.COMP.GenStmts(_909_thn, selfIdent, @params, isLast, earlyReturn, out _out144, out _out145);
          _915_thnString = _out144;
          _916_thnIdents = _out145;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _916_thnIdents);
          Dafny.ISequence<Dafny.Rune> _917_elsString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _918_elsIdents;
          Dafny.ISequence<Dafny.Rune> _out146;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out147;
          DCOMP.COMP.GenStmts(_908_els, selfIdent, @params, isLast, earlyReturn, out _out146, out _out147);
          _917_elsString = _out146;
          _918_elsIdents = _out147;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _918_elsIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if "), _911_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _915_thnString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _917_elsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source65.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _919___mcc_h9 = _source65.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _920___mcc_h10 = _source65.dtor_body;
        Dafny.ISequence<DAST._IStatement> _921_body = _920___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _922_lbl = _919___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _923_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _924_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out148;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out149;
          DCOMP.COMP.GenStmts(_921_body, selfIdent, @params, isLast, earlyReturn, out _out148, out _out149);
          _923_bodyString = _out148;
          _924_bodyIdents = _out149;
          readIdents = _924_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'label_"), _922_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": loop {\n")), _923_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source65.is_While) {
        DAST._IExpression _925___mcc_h11 = _source65.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _926___mcc_h12 = _source65.dtor_body;
        Dafny.ISequence<DAST._IStatement> _927_body = _926___mcc_h12;
        DAST._IExpression _928_cond = _925___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _929_condString;
          bool _930___v23;
          bool _931_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _932_recIdents;
          Dafny.ISequence<Dafny.Rune> _out150;
          bool _out151;
          bool _out152;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out153;
          DCOMP.COMP.GenExpr(_928_cond, selfIdent, @params, true, out _out150, out _out151, out _out152, out _out153);
          _929_condString = _out150;
          _930___v23 = _out151;
          _931_condErased = _out152;
          _932_recIdents = _out153;
          if (!(_931_condErased)) {
            _929_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _929_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _932_recIdents;
          Dafny.ISequence<Dafny.Rune> _933_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _934_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out154;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out155;
          DCOMP.COMP.GenStmts(_927_body, selfIdent, @params, false, earlyReturn, out _out154, out _out155);
          _933_bodyString = _out154;
          _934_bodyIdents = _out155;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _934_bodyIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while "), _929_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _933_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source65.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _935___mcc_h13 = _source65.dtor_boundName;
        DAST._IType _936___mcc_h14 = _source65.dtor_boundType;
        DAST._IExpression _937___mcc_h15 = _source65.dtor_over;
        Dafny.ISequence<DAST._IStatement> _938___mcc_h16 = _source65.dtor_body;
        Dafny.ISequence<DAST._IStatement> _939_body = _938___mcc_h16;
        DAST._IExpression _940_over = _937___mcc_h15;
        DAST._IType _941_boundType = _936___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _942_boundName = _935___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _943_overString;
          bool _944___v24;
          bool _945_overErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _946_recIdents;
          Dafny.ISequence<Dafny.Rune> _out156;
          bool _out157;
          bool _out158;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out159;
          DCOMP.COMP.GenExpr(_940_over, selfIdent, @params, true, out _out156, out _out157, out _out158, out _out159);
          _943_overString = _out156;
          _944___v24 = _out157;
          _945_overErased = _out158;
          _946_recIdents = _out159;
          Dafny.ISequence<Dafny.Rune> _947_boundTypeStr;
          Dafny.ISequence<Dafny.Rune> _out160;
          _out160 = DCOMP.COMP.GenType(_941_boundType, false, false);
          _947_boundTypeStr = _out160;
          readIdents = _946_recIdents;
          Dafny.ISequence<Dafny.Rune> _948_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _949_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out161;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out162;
          DCOMP.COMP.GenStmts(_939_body, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(@params, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_942_boundName)), false, earlyReturn, out _out161, out _out162);
          _948_bodyString = _out161;
          _949_bodyIdents = _out162;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _949_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_942_boundName));
          Dafny.ISequence<Dafny.Rune> _950_unerasedIter;
          _950_unerasedIter = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_iter_erased");
          if (_945_overErased) {
            _950_unerasedIter = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _947_boundTypeStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _950_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for _iter_erased in "), _943_overString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_942_boundName)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _950_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _948_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source65.is_Call) {
        DAST._IExpression _951___mcc_h17 = _source65.dtor_on;
        Dafny.ISequence<Dafny.Rune> _952___mcc_h18 = _source65.dtor_name;
        Dafny.ISequence<DAST._IType> _953___mcc_h19 = _source65.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _954___mcc_h20 = _source65.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _955___mcc_h21 = _source65.dtor_outs;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _956_maybeOutVars = _955___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _957_args = _954___mcc_h20;
        Dafny.ISequence<DAST._IType> _958_typeArgs = _953___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _959_name = _952___mcc_h18;
        DAST._IExpression _960_on = _951___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _961_typeArgString;
          _961_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_958_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _962_typeI;
            _962_typeI = BigInteger.Zero;
            _961_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_962_typeI) < (new BigInteger((_958_typeArgs).Count))) {
              if ((_962_typeI).Sign == 1) {
                _961_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_961_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _963_typeString;
              Dafny.ISequence<Dafny.Rune> _out163;
              _out163 = DCOMP.COMP.GenType((_958_typeArgs).Select(_962_typeI), false, false);
              _963_typeString = _out163;
              _961_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_961_typeArgString, _963_typeString);
              _962_typeI = (_962_typeI) + (BigInteger.One);
            }
            _961_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_961_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _964_argString;
          _964_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _965_i;
          _965_i = BigInteger.Zero;
          while ((_965_i) < (new BigInteger((_957_args).Count))) {
            if ((_965_i).Sign == 1) {
              _964_argString = Dafny.Sequence<Dafny.Rune>.Concat(_964_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _966_argExpr;
            bool _967_isOwned;
            bool _968_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _969_argIdents;
            Dafny.ISequence<Dafny.Rune> _out164;
            bool _out165;
            bool _out166;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out167;
            DCOMP.COMP.GenExpr((_957_args).Select(_965_i), selfIdent, @params, false, out _out164, out _out165, out _out166, out _out167);
            _966_argExpr = _out164;
            _967_isOwned = _out165;
            _968_argErased = _out166;
            _969_argIdents = _out167;
            if (_967_isOwned) {
              _966_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _966_argExpr);
            }
            _964_argString = Dafny.Sequence<Dafny.Rune>.Concat(_964_argString, _966_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _969_argIdents);
            _965_i = (_965_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _970_enclosingString;
          bool _971___v25;
          bool _972___v26;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _973_enclosingIdents;
          Dafny.ISequence<Dafny.Rune> _out168;
          bool _out169;
          bool _out170;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out171;
          DCOMP.COMP.GenExpr(_960_on, selfIdent, @params, false, out _out168, out _out169, out _out170, out _out171);
          _970_enclosingString = _out168;
          _971___v25 = _out169;
          _972___v26 = _out170;
          _973_enclosingIdents = _out171;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _973_enclosingIdents);
          DAST._IExpression _source67 = _960_on;
          if (_source67.is_Literal) {
            DAST._ILiteral _974___mcc_h26 = _source67.dtor_Literal_a0;
            {
              _970_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _970_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source67.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _975___mcc_h28 = _source67.dtor_Ident_a0;
            {
              _970_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _970_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source67.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _976___mcc_h30 = _source67.dtor_Companion_a0;
            {
              _970_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(_970_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
            }
          } else if (_source67.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _977___mcc_h32 = _source67.dtor_Tuple_a0;
            {
              _970_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _970_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source67.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _978___mcc_h34 = _source67.dtor_path;
            Dafny.ISequence<DAST._IType> _979___mcc_h35 = _source67.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _980___mcc_h36 = _source67.dtor_args;
            {
              _970_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _970_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source67.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _981___mcc_h40 = _source67.dtor_dims;
            DAST._IType _982___mcc_h41 = _source67.dtor_typ;
            {
              _970_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _970_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source67.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _983___mcc_h44 = _source67.dtor_path;
            Dafny.ISequence<DAST._IType> _984___mcc_h45 = _source67.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _985___mcc_h46 = _source67.dtor_variant;
            bool _986___mcc_h47 = _source67.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _987___mcc_h48 = _source67.dtor_contents;
            {
              _970_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _970_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source67.is_Convert) {
            DAST._IExpression _988___mcc_h54 = _source67.dtor_value;
            DAST._IType _989___mcc_h55 = _source67.dtor_from;
            DAST._IType _990___mcc_h56 = _source67.dtor_typ;
            {
              _970_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _970_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source67.is_SeqConstruct) {
            DAST._IExpression _991___mcc_h60 = _source67.dtor_length;
            DAST._IExpression _992___mcc_h61 = _source67.dtor_elem;
            {
              _970_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _970_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source67.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _993___mcc_h64 = _source67.dtor_elements;
            DAST._IType _994___mcc_h65 = _source67.dtor_typ;
            {
              _970_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _970_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source67.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _995___mcc_h68 = _source67.dtor_elements;
            {
              _970_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _970_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source67.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _996___mcc_h70 = _source67.dtor_mapElems;
            {
              _970_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _970_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source67.is_This) {
            {
              _970_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _970_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source67.is_Ite) {
            DAST._IExpression _997___mcc_h72 = _source67.dtor_cond;
            DAST._IExpression _998___mcc_h73 = _source67.dtor_thn;
            DAST._IExpression _999___mcc_h74 = _source67.dtor_els;
            {
              _970_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _970_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source67.is_UnOp) {
            DAST._IUnaryOp _1000___mcc_h78 = _source67.dtor_unOp;
            DAST._IExpression _1001___mcc_h79 = _source67.dtor_expr;
            {
              _970_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _970_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source67.is_BinOp) {
            DAST._IBinOp _1002___mcc_h82 = _source67.dtor_op;
            DAST._IExpression _1003___mcc_h83 = _source67.dtor_left;
            DAST._IExpression _1004___mcc_h84 = _source67.dtor_right;
            {
              _970_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _970_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source67.is_ArrayLen) {
            DAST._IExpression _1005___mcc_h88 = _source67.dtor_expr;
            BigInteger _1006___mcc_h89 = _source67.dtor_dim;
            {
              _970_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _970_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source67.is_Select) {
            DAST._IExpression _1007___mcc_h92 = _source67.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _1008___mcc_h93 = _source67.dtor_field;
            bool _1009___mcc_h94 = _source67.dtor_isConstant;
            bool _1010___mcc_h95 = _source67.dtor_onDatatype;
            {
              _970_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _970_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source67.is_SelectFn) {
            DAST._IExpression _1011___mcc_h100 = _source67.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _1012___mcc_h101 = _source67.dtor_field;
            bool _1013___mcc_h102 = _source67.dtor_onDatatype;
            bool _1014___mcc_h103 = _source67.dtor_isStatic;
            BigInteger _1015___mcc_h104 = _source67.dtor_arity;
            {
              _970_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _970_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source67.is_Index) {
            DAST._IExpression _1016___mcc_h110 = _source67.dtor_expr;
            DAST._ICollKind _1017___mcc_h111 = _source67.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _1018___mcc_h112 = _source67.dtor_indices;
            {
              _970_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _970_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source67.is_IndexRange) {
            DAST._IExpression _1019___mcc_h116 = _source67.dtor_expr;
            bool _1020___mcc_h117 = _source67.dtor_isArray;
            DAST._IOptional<DAST._IExpression> _1021___mcc_h118 = _source67.dtor_low;
            DAST._IOptional<DAST._IExpression> _1022___mcc_h119 = _source67.dtor_high;
            {
              _970_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _970_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source67.is_TupleSelect) {
            DAST._IExpression _1023___mcc_h124 = _source67.dtor_expr;
            BigInteger _1024___mcc_h125 = _source67.dtor_index;
            {
              _970_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _970_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source67.is_Call) {
            DAST._IExpression _1025___mcc_h128 = _source67.dtor_on;
            Dafny.ISequence<Dafny.Rune> _1026___mcc_h129 = _source67.dtor_name;
            Dafny.ISequence<DAST._IType> _1027___mcc_h130 = _source67.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _1028___mcc_h131 = _source67.dtor_args;
            {
              _970_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _970_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source67.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _1029___mcc_h136 = _source67.dtor_params;
            DAST._IType _1030___mcc_h137 = _source67.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _1031___mcc_h138 = _source67.dtor_body;
            {
              _970_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _970_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source67.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _1032___mcc_h142 = _source67.dtor_values;
            DAST._IType _1033___mcc_h143 = _source67.dtor_retType;
            DAST._IExpression _1034___mcc_h144 = _source67.dtor_expr;
            {
              _970_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _970_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source67.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _1035___mcc_h148 = _source67.dtor_name;
            DAST._IType _1036___mcc_h149 = _source67.dtor_typ;
            DAST._IExpression _1037___mcc_h150 = _source67.dtor_value;
            DAST._IExpression _1038___mcc_h151 = _source67.dtor_iifeBody;
            {
              _970_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _970_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source67.is_Apply) {
            DAST._IExpression _1039___mcc_h156 = _source67.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _1040___mcc_h157 = _source67.dtor_args;
            {
              _970_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _970_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source67.is_TypeTest) {
            DAST._IExpression _1041___mcc_h160 = _source67.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1042___mcc_h161 = _source67.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _1043___mcc_h162 = _source67.dtor_variant;
            {
              _970_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _970_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source67.is_InitializationValue) {
            DAST._IType _1044___mcc_h166 = _source67.dtor_typ;
            {
              _970_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _970_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source67.is_BoolBoundedPool) {
            {
              _970_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _970_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source67.is_SetBoundedPool) {
            DAST._IExpression _1045___mcc_h168 = _source67.dtor_of;
            {
              _970_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _970_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source67.is_SeqBoundedPool) {
            DAST._IExpression _1046___mcc_h170 = _source67.dtor_of;
            bool _1047___mcc_h171 = _source67.dtor_includeDuplicates;
            {
              _970_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _970_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else {
            DAST._IExpression _1048___mcc_h174 = _source67.dtor_lo;
            DAST._IExpression _1049___mcc_h175 = _source67.dtor_hi;
            {
              _970_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _970_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          }
          Dafny.ISequence<Dafny.Rune> _1050_receiver;
          _1050_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source68 = _956_maybeOutVars;
          if (_source68.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1051___mcc_h178 = _source68.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1052_outVars = _1051___mcc_h178;
            {
              if ((new BigInteger((_1052_outVars).Count)) > (BigInteger.One)) {
                _1050_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
              }
              BigInteger _1053_outI;
              _1053_outI = BigInteger.Zero;
              while ((_1053_outI) < (new BigInteger((_1052_outVars).Count))) {
                if ((_1053_outI).Sign == 1) {
                  _1050_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_1050_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                }
                Dafny.ISequence<Dafny.Rune> _1054_outVar;
                _1054_outVar = (_1052_outVars).Select(_1053_outI);
                _1050_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_1050_receiver, (_1054_outVar));
                _1053_outI = (_1053_outI) + (BigInteger.One);
              }
              if ((new BigInteger((_1052_outVars).Count)) > (BigInteger.One)) {
                _1050_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_1050_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
          } else {
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((!(_1050_receiver).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_1050_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), _970_enclosingString), DCOMP.__default.escapeIdent(_959_name)), _961_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _964_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      } else if (_source65.is_Return) {
        DAST._IExpression _1055___mcc_h22 = _source65.dtor_expr;
        DAST._IExpression _1056_expr = _1055___mcc_h22;
        {
          Dafny.ISequence<Dafny.Rune> _1057_exprString;
          bool _1058___v29;
          bool _1059_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1060_recIdents;
          Dafny.ISequence<Dafny.Rune> _out172;
          bool _out173;
          bool _out174;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out175;
          DCOMP.COMP.GenExpr(_1056_expr, selfIdent, @params, true, out _out172, out _out173, out _out174, out _out175);
          _1057_exprString = _out172;
          _1058___v29 = _out173;
          _1059_recErased = _out174;
          _1060_recIdents = _out175;
          _1057_exprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned(::dafny_runtime::DafnyErasable::erase_owned("), _1057_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          readIdents = _1060_recIdents;
          if (isLast) {
            generated = _1057_exprString;
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return "), _1057_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
        }
      } else if (_source65.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source65.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _1061___mcc_h23 = _source65.dtor_toLabel;
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _1062_toLabel = _1061___mcc_h23;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source69 = _1062_toLabel;
          if (_source69.is_Some) {
            Dafny.ISequence<Dafny.Rune> _1063___mcc_h179 = _source69.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _1064_lbl = _1063___mcc_h179;
            {
              generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break 'label_"), _1064_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            }
          } else {
            {
              generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;");
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source65.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _1065___mcc_h24 = _source65.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1066_body = _1065___mcc_h24;
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if (!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut _this = self.clone();\n"));
          }
          BigInteger _1067_paramI;
          _1067_paramI = BigInteger.Zero;
          while ((_1067_paramI) < (new BigInteger((@params).Count))) {
            Dafny.ISequence<Dafny.Rune> _1068_param;
            _1068_param = (@params).Select(_1067_paramI);
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut ")), DCOMP.__default.escapeIdent(_1068_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_1068_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
            _1067_paramI = (_1067_paramI) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _1069_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1070_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out176;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out177;
          DCOMP.COMP.GenStmts(_1066_body, ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), false, earlyReturn, out _out176, out _out177);
          _1069_bodyString = _out176;
          _1070_bodyIdents = _out177;
          readIdents = _1070_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'TAIL_CALL_START: loop {\n")), _1069_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source65.is_JumpTailCallStart) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue 'TAIL_CALL_START;");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source65.is_Halt) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else {
        DAST._IExpression _1071___mcc_h25 = _source65.dtor_Print_a0;
        DAST._IExpression _1072_e = _1071___mcc_h25;
        {
          Dafny.ISequence<Dafny.Rune> _1073_printedExpr;
          bool _1074_isOwned;
          bool _1075___v30;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1076_recIdents;
          Dafny.ISequence<Dafny.Rune> _out178;
          bool _out179;
          bool _out180;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out181;
          DCOMP.COMP.GenExpr(_1072_e, selfIdent, @params, false, out _out178, out _out179, out _out180, out _out181);
          _1073_printedExpr = _out178;
          _1074_isOwned = _out179;
          _1075___v30 = _out180;
          _1076_recIdents = _out181;
          if (_1074_isOwned) {
            _1073_printedExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _1073_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!(\"{}\", ::dafny_runtime::DafnyPrintWrapper("), _1073_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("));"));
          readIdents = _1076_recIdents;
        }
      }
    }
    public static void GenExpr(DAST._IExpression e, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool mustOwn, out Dafny.ISequence<Dafny.Rune> s, out bool isOwned, out bool isErased, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      isOwned = false;
      isErased = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source70 = e;
      if (_source70.is_Literal) {
        DAST._ILiteral _1077___mcc_h0 = _source70.dtor_Literal_a0;
        DAST._ILiteral _source71 = _1077___mcc_h0;
        if (_source71.is_BoolLiteral) {
          bool _1078___mcc_h1 = _source71.dtor_BoolLiteral_a0;
          if ((_1078___mcc_h1) == (false)) {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          }
        } else if (_source71.is_IntLiteral) {
          Dafny.ISequence<Dafny.Rune> _1079___mcc_h2 = _source71.dtor_IntLiteral_a0;
          DAST._IType _1080___mcc_h3 = _source71.dtor_IntLiteral_a1;
          DAST._IType _1081_t = _1080___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _1082_i = _1079___mcc_h2;
          {
            DAST._IType _source72 = _1081_t;
            if (_source72.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1083___mcc_h237 = _source72.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _1084___mcc_h238 = _source72.dtor_typeArgs;
              DAST._IResolvedType _1085___mcc_h239 = _source72.dtor_resolved;
              DAST._IType _1086_o = _1081_t;
              {
                Dafny.ISequence<Dafny.Rune> _1087_genType;
                Dafny.ISequence<Dafny.Rune> _out182;
                _out182 = DCOMP.COMP.GenType(_1086_o, false, false);
                _1087_genType = _out182;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1082_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1087_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source72.is_Nullable) {
              DAST._IType _1088___mcc_h243 = _source72.dtor_Nullable_a0;
              DAST._IType _1089_o = _1081_t;
              {
                Dafny.ISequence<Dafny.Rune> _1090_genType;
                Dafny.ISequence<Dafny.Rune> _out183;
                _out183 = DCOMP.COMP.GenType(_1089_o, false, false);
                _1090_genType = _out183;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1082_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1090_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source72.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1091___mcc_h245 = _source72.dtor_Tuple_a0;
              DAST._IType _1092_o = _1081_t;
              {
                Dafny.ISequence<Dafny.Rune> _1093_genType;
                Dafny.ISequence<Dafny.Rune> _out184;
                _out184 = DCOMP.COMP.GenType(_1092_o, false, false);
                _1093_genType = _out184;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1082_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1093_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source72.is_Array) {
              DAST._IType _1094___mcc_h247 = _source72.dtor_element;
              BigInteger _1095___mcc_h248 = _source72.dtor_dims;
              DAST._IType _1096_o = _1081_t;
              {
                Dafny.ISequence<Dafny.Rune> _1097_genType;
                Dafny.ISequence<Dafny.Rune> _out185;
                _out185 = DCOMP.COMP.GenType(_1096_o, false, false);
                _1097_genType = _out185;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1082_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1097_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source72.is_Seq) {
              DAST._IType _1098___mcc_h251 = _source72.dtor_element;
              DAST._IType _1099_o = _1081_t;
              {
                Dafny.ISequence<Dafny.Rune> _1100_genType;
                Dafny.ISequence<Dafny.Rune> _out186;
                _out186 = DCOMP.COMP.GenType(_1099_o, false, false);
                _1100_genType = _out186;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1082_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1100_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source72.is_Set) {
              DAST._IType _1101___mcc_h253 = _source72.dtor_element;
              DAST._IType _1102_o = _1081_t;
              {
                Dafny.ISequence<Dafny.Rune> _1103_genType;
                Dafny.ISequence<Dafny.Rune> _out187;
                _out187 = DCOMP.COMP.GenType(_1102_o, false, false);
                _1103_genType = _out187;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1082_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1103_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source72.is_Multiset) {
              DAST._IType _1104___mcc_h255 = _source72.dtor_element;
              DAST._IType _1105_o = _1081_t;
              {
                Dafny.ISequence<Dafny.Rune> _1106_genType;
                Dafny.ISequence<Dafny.Rune> _out188;
                _out188 = DCOMP.COMP.GenType(_1105_o, false, false);
                _1106_genType = _out188;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1082_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1106_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source72.is_Map) {
              DAST._IType _1107___mcc_h257 = _source72.dtor_key;
              DAST._IType _1108___mcc_h258 = _source72.dtor_value;
              DAST._IType _1109_o = _1081_t;
              {
                Dafny.ISequence<Dafny.Rune> _1110_genType;
                Dafny.ISequence<Dafny.Rune> _out189;
                _out189 = DCOMP.COMP.GenType(_1109_o, false, false);
                _1110_genType = _out189;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1082_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1110_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source72.is_Arrow) {
              Dafny.ISequence<DAST._IType> _1111___mcc_h261 = _source72.dtor_args;
              DAST._IType _1112___mcc_h262 = _source72.dtor_result;
              DAST._IType _1113_o = _1081_t;
              {
                Dafny.ISequence<Dafny.Rune> _1114_genType;
                Dafny.ISequence<Dafny.Rune> _out190;
                _out190 = DCOMP.COMP.GenType(_1113_o, false, false);
                _1114_genType = _out190;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1082_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1114_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source72.is_Primitive) {
              DAST._IPrimitive _1115___mcc_h265 = _source72.dtor_Primitive_a0;
              DAST._IPrimitive _source73 = _1115___mcc_h265;
              if (_source73.is_Int) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::parse_bytes(b\""), _1082_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap()"));
                }
              } else if (_source73.is_Real) {
                DAST._IType _1116_o = _1081_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1117_genType;
                  Dafny.ISequence<Dafny.Rune> _out191;
                  _out191 = DCOMP.COMP.GenType(_1116_o, false, false);
                  _1117_genType = _out191;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1082_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1117_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source73.is_String) {
                DAST._IType _1118_o = _1081_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1119_genType;
                  Dafny.ISequence<Dafny.Rune> _out192;
                  _out192 = DCOMP.COMP.GenType(_1118_o, false, false);
                  _1119_genType = _out192;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1082_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1119_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source73.is_Bool) {
                DAST._IType _1120_o = _1081_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1121_genType;
                  Dafny.ISequence<Dafny.Rune> _out193;
                  _out193 = DCOMP.COMP.GenType(_1120_o, false, false);
                  _1121_genType = _out193;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1082_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1121_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _1122_o = _1081_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1123_genType;
                  Dafny.ISequence<Dafny.Rune> _out194;
                  _out194 = DCOMP.COMP.GenType(_1122_o, false, false);
                  _1123_genType = _out194;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1082_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1123_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source72.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _1124___mcc_h267 = _source72.dtor_Passthrough_a0;
              DAST._IType _1125_o = _1081_t;
              {
                Dafny.ISequence<Dafny.Rune> _1126_genType;
                Dafny.ISequence<Dafny.Rune> _out195;
                _out195 = DCOMP.COMP.GenType(_1125_o, false, false);
                _1126_genType = _out195;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1082_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1126_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _1127___mcc_h269 = _source72.dtor_TypeArg_a0;
              DAST._IType _1128_o = _1081_t;
              {
                Dafny.ISequence<Dafny.Rune> _1129_genType;
                Dafny.ISequence<Dafny.Rune> _out196;
                _out196 = DCOMP.COMP.GenType(_1128_o, false, false);
                _1129_genType = _out196;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1082_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1129_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source71.is_DecLiteral) {
          Dafny.ISequence<Dafny.Rune> _1130___mcc_h4 = _source71.dtor_DecLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _1131___mcc_h5 = _source71.dtor_DecLiteral_a1;
          DAST._IType _1132___mcc_h6 = _source71.dtor_DecLiteral_a2;
          DAST._IType _1133_t = _1132___mcc_h6;
          Dafny.ISequence<Dafny.Rune> _1134_d = _1131___mcc_h5;
          Dafny.ISequence<Dafny.Rune> _1135_n = _1130___mcc_h4;
          {
            DAST._IType _source74 = _1133_t;
            if (_source74.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1136___mcc_h271 = _source74.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _1137___mcc_h272 = _source74.dtor_typeArgs;
              DAST._IResolvedType _1138___mcc_h273 = _source74.dtor_resolved;
              DAST._IType _1139_o = _1133_t;
              {
                Dafny.ISequence<Dafny.Rune> _1140_genType;
                Dafny.ISequence<Dafny.Rune> _out197;
                _out197 = DCOMP.COMP.GenType(_1139_o, false, false);
                _1140_genType = _out197;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1135_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1134_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1140_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source74.is_Nullable) {
              DAST._IType _1141___mcc_h277 = _source74.dtor_Nullable_a0;
              DAST._IType _1142_o = _1133_t;
              {
                Dafny.ISequence<Dafny.Rune> _1143_genType;
                Dafny.ISequence<Dafny.Rune> _out198;
                _out198 = DCOMP.COMP.GenType(_1142_o, false, false);
                _1143_genType = _out198;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1135_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1134_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1143_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source74.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1144___mcc_h279 = _source74.dtor_Tuple_a0;
              DAST._IType _1145_o = _1133_t;
              {
                Dafny.ISequence<Dafny.Rune> _1146_genType;
                Dafny.ISequence<Dafny.Rune> _out199;
                _out199 = DCOMP.COMP.GenType(_1145_o, false, false);
                _1146_genType = _out199;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1135_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1134_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1146_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source74.is_Array) {
              DAST._IType _1147___mcc_h281 = _source74.dtor_element;
              BigInteger _1148___mcc_h282 = _source74.dtor_dims;
              DAST._IType _1149_o = _1133_t;
              {
                Dafny.ISequence<Dafny.Rune> _1150_genType;
                Dafny.ISequence<Dafny.Rune> _out200;
                _out200 = DCOMP.COMP.GenType(_1149_o, false, false);
                _1150_genType = _out200;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1135_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1134_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1150_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source74.is_Seq) {
              DAST._IType _1151___mcc_h285 = _source74.dtor_element;
              DAST._IType _1152_o = _1133_t;
              {
                Dafny.ISequence<Dafny.Rune> _1153_genType;
                Dafny.ISequence<Dafny.Rune> _out201;
                _out201 = DCOMP.COMP.GenType(_1152_o, false, false);
                _1153_genType = _out201;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1135_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1134_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1153_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source74.is_Set) {
              DAST._IType _1154___mcc_h287 = _source74.dtor_element;
              DAST._IType _1155_o = _1133_t;
              {
                Dafny.ISequence<Dafny.Rune> _1156_genType;
                Dafny.ISequence<Dafny.Rune> _out202;
                _out202 = DCOMP.COMP.GenType(_1155_o, false, false);
                _1156_genType = _out202;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1135_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1134_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1156_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source74.is_Multiset) {
              DAST._IType _1157___mcc_h289 = _source74.dtor_element;
              DAST._IType _1158_o = _1133_t;
              {
                Dafny.ISequence<Dafny.Rune> _1159_genType;
                Dafny.ISequence<Dafny.Rune> _out203;
                _out203 = DCOMP.COMP.GenType(_1158_o, false, false);
                _1159_genType = _out203;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1135_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1134_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1159_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source74.is_Map) {
              DAST._IType _1160___mcc_h291 = _source74.dtor_key;
              DAST._IType _1161___mcc_h292 = _source74.dtor_value;
              DAST._IType _1162_o = _1133_t;
              {
                Dafny.ISequence<Dafny.Rune> _1163_genType;
                Dafny.ISequence<Dafny.Rune> _out204;
                _out204 = DCOMP.COMP.GenType(_1162_o, false, false);
                _1163_genType = _out204;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1135_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1134_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1163_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source74.is_Arrow) {
              Dafny.ISequence<DAST._IType> _1164___mcc_h295 = _source74.dtor_args;
              DAST._IType _1165___mcc_h296 = _source74.dtor_result;
              DAST._IType _1166_o = _1133_t;
              {
                Dafny.ISequence<Dafny.Rune> _1167_genType;
                Dafny.ISequence<Dafny.Rune> _out205;
                _out205 = DCOMP.COMP.GenType(_1166_o, false, false);
                _1167_genType = _out205;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1135_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1134_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1167_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source74.is_Primitive) {
              DAST._IPrimitive _1168___mcc_h299 = _source74.dtor_Primitive_a0;
              DAST._IPrimitive _source75 = _1168___mcc_h299;
              if (_source75.is_Int) {
                DAST._IType _1169_o = _1133_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1170_genType;
                  Dafny.ISequence<Dafny.Rune> _out206;
                  _out206 = DCOMP.COMP.GenType(_1169_o, false, false);
                  _1170_genType = _out206;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1135_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1134_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1170_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source75.is_Real) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _1135_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _1134_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"));
                }
              } else if (_source75.is_String) {
                DAST._IType _1171_o = _1133_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1172_genType;
                  Dafny.ISequence<Dafny.Rune> _out207;
                  _out207 = DCOMP.COMP.GenType(_1171_o, false, false);
                  _1172_genType = _out207;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1135_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1134_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1172_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source75.is_Bool) {
                DAST._IType _1173_o = _1133_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1174_genType;
                  Dafny.ISequence<Dafny.Rune> _out208;
                  _out208 = DCOMP.COMP.GenType(_1173_o, false, false);
                  _1174_genType = _out208;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1135_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1134_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1174_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _1175_o = _1133_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1176_genType;
                  Dafny.ISequence<Dafny.Rune> _out209;
                  _out209 = DCOMP.COMP.GenType(_1175_o, false, false);
                  _1176_genType = _out209;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1135_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1134_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1176_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source74.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _1177___mcc_h301 = _source74.dtor_Passthrough_a0;
              DAST._IType _1178_o = _1133_t;
              {
                Dafny.ISequence<Dafny.Rune> _1179_genType;
                Dafny.ISequence<Dafny.Rune> _out210;
                _out210 = DCOMP.COMP.GenType(_1178_o, false, false);
                _1179_genType = _out210;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1135_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1134_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1179_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _1180___mcc_h303 = _source74.dtor_TypeArg_a0;
              DAST._IType _1181_o = _1133_t;
              {
                Dafny.ISequence<Dafny.Rune> _1182_genType;
                Dafny.ISequence<Dafny.Rune> _out211;
                _out211 = DCOMP.COMP.GenType(_1181_o, false, false);
                _1182_genType = _out211;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1135_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1134_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1182_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source71.is_StringLiteral) {
          Dafny.ISequence<Dafny.Rune> _1183___mcc_h7 = _source71.dtor_StringLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _1184_l = _1183___mcc_h7;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""), _1184_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\".chars().collect::<Vec<char>>()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source71.is_CharLiteral) {
          Dafny.Rune _1185___mcc_h8 = _source71.dtor_CharLiteral_a0;
          Dafny.Rune _1186_c = _1185___mcc_h8;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::primitive::char::from_u32("), DCOMP.__default.natToString(new BigInteger((_1186_c).Value))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IType _1187___mcc_h9 = _source71.dtor_Null_a0;
          DAST._IType _1188_tpe = _1187___mcc_h9;
          {
            Dafny.ISequence<Dafny.Rune> _1189_tpeGen;
            Dafny.ISequence<Dafny.Rune> _out212;
            _out212 = DCOMP.COMP.GenType(_1188_tpe, false, false);
            _1189_tpeGen = _out212;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(None as "), _1189_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source70.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _1190___mcc_h10 = _source70.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _1191_name = _1190___mcc_h10;
        {
          s = DCOMP.__default.escapeIdent(_1191_name);
          if (!((@params).Contains(_1191_name))) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            isOwned = false;
          }
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1191_name);
        }
      } else if (_source70.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1192___mcc_h11 = _source70.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1193_path = _1192___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _out213;
          _out213 = DCOMP.COMP.GenPath(_1193_path);
          s = _out213;
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source70.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _1194___mcc_h12 = _source70.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IExpression> _1195_values = _1194___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _1196_i;
          _1196_i = BigInteger.Zero;
          while ((_1196_i) < (new BigInteger((_1195_values).Count))) {
            if ((_1196_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _1197_recursiveGen;
            bool _1198___v31;
            bool _1199_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1200_recIdents;
            Dafny.ISequence<Dafny.Rune> _out214;
            bool _out215;
            bool _out216;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out217;
            DCOMP.COMP.GenExpr((_1195_values).Select(_1196_i), selfIdent, @params, true, out _out214, out _out215, out _out216, out _out217);
            _1197_recursiveGen = _out214;
            _1198___v31 = _out215;
            _1199_isErased = _out216;
            _1200_recIdents = _out217;
            if (_1199_isErased) {
              _1197_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1197_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _1197_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1200_recIdents);
            _1196_i = (_1196_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source70.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1201___mcc_h13 = _source70.dtor_path;
        Dafny.ISequence<DAST._IType> _1202___mcc_h14 = _source70.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _1203___mcc_h15 = _source70.dtor_args;
        Dafny.ISequence<DAST._IExpression> _1204_args = _1203___mcc_h15;
        Dafny.ISequence<DAST._IType> _1205_typeArgs = _1202___mcc_h14;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1206_path = _1201___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _1207_path;
          Dafny.ISequence<Dafny.Rune> _out218;
          _out218 = DCOMP.COMP.GenPath(_1206_path);
          _1207_path = _out218;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _1207_path);
          if ((new BigInteger((_1205_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<"));
            BigInteger _1208_i;
            _1208_i = BigInteger.Zero;
            while ((_1208_i) < (new BigInteger((_1205_typeArgs).Count))) {
              if ((_1208_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
              }
              Dafny.ISequence<Dafny.Rune> _1209_typeString;
              Dafny.ISequence<Dafny.Rune> _out219;
              _out219 = DCOMP.COMP.GenType((_1205_typeArgs).Select(_1208_i), false, false);
              _1209_typeString = _out219;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1209_typeString);
              _1208_i = (_1208_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new("));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _1210_i;
          _1210_i = BigInteger.Zero;
          while ((_1210_i) < (new BigInteger((_1204_args).Count))) {
            if ((_1210_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _1211_recursiveGen;
            bool _1212___v32;
            bool _1213_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1214_recIdents;
            Dafny.ISequence<Dafny.Rune> _out220;
            bool _out221;
            bool _out222;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out223;
            DCOMP.COMP.GenExpr((_1204_args).Select(_1210_i), selfIdent, @params, true, out _out220, out _out221, out _out222, out _out223);
            _1211_recursiveGen = _out220;
            _1212___v32 = _out221;
            _1213_isErased = _out222;
            _1214_recIdents = _out223;
            if (_1213_isErased) {
              _1211_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1211_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1211_recursiveGen);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1214_recIdents);
            _1210_i = (_1210_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = true;
        }
      } else if (_source70.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _1215___mcc_h16 = _source70.dtor_dims;
        DAST._IType _1216___mcc_h17 = _source70.dtor_typ;
        DAST._IType _1217_typ = _1216___mcc_h17;
        Dafny.ISequence<DAST._IExpression> _1218_dims = _1215___mcc_h16;
        {
          BigInteger _1219_i;
          _1219_i = (new BigInteger((_1218_dims).Count)) - (BigInteger.One);
          Dafny.ISequence<Dafny.Rune> _1220_genTyp;
          Dafny.ISequence<Dafny.Rune> _out224;
          _out224 = DCOMP.COMP.GenType(_1217_typ, false, false);
          _1220_genTyp = _out224;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1220_genTyp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::std::default::Default>::default()"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          while ((_1219_i).Sign != -1) {
            Dafny.ISequence<Dafny.Rune> _1221_recursiveGen;
            bool _1222___v33;
            bool _1223_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1224_recIdents;
            Dafny.ISequence<Dafny.Rune> _out225;
            bool _out226;
            bool _out227;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out228;
            DCOMP.COMP.GenExpr((_1218_dims).Select(_1219_i), selfIdent, @params, true, out _out225, out _out226, out _out227, out _out228);
            _1221_recursiveGen = _out225;
            _1222___v33 = _out226;
            _1223_isErased = _out227;
            _1224_recIdents = _out228;
            if (!(_1223_isErased)) {
              _1221_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1221_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::std::cell::RefCell::new(vec!["), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("; <usize as ::dafny_runtime::NumCast>::from(")), _1221_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]))"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1224_recIdents);
            _1219_i = (_1219_i) - (BigInteger.One);
          }
          isOwned = true;
          isErased = false;
        }
      } else if (_source70.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1225___mcc_h18 = _source70.dtor_path;
        Dafny.ISequence<DAST._IType> _1226___mcc_h19 = _source70.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _1227___mcc_h20 = _source70.dtor_variant;
        bool _1228___mcc_h21 = _source70.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _1229___mcc_h22 = _source70.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _1230_values = _1229___mcc_h22;
        bool _1231_isCo = _1228___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _1232_variant = _1227___mcc_h20;
        Dafny.ISequence<DAST._IType> _1233_typeArgs = _1226___mcc_h19;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1234_path = _1225___mcc_h18;
        {
          Dafny.ISequence<Dafny.Rune> _1235_path;
          Dafny.ISequence<Dafny.Rune> _out229;
          _out229 = DCOMP.COMP.GenPath(_1234_path);
          _1235_path = _out229;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _1235_path), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          if ((new BigInteger((_1233_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
            BigInteger _1236_i;
            _1236_i = BigInteger.Zero;
            while ((_1236_i) < (new BigInteger((_1233_typeArgs).Count))) {
              if ((_1236_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _1237_typeString;
              Dafny.ISequence<Dafny.Rune> _out230;
              _out230 = DCOMP.COMP.GenType((_1233_typeArgs).Select(_1236_i), false, false);
              _1237_typeString = _out230;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1237_typeString);
              _1236_i = (_1236_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_1232_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _1238_i;
          _1238_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"));
          while ((_1238_i) < (new BigInteger((_1230_values).Count))) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs1 = (_1230_values).Select(_1238_i);
            Dafny.ISequence<Dafny.Rune> _1239_name = _let_tmp_rhs1.dtor__0;
            DAST._IExpression _1240_value = _let_tmp_rhs1.dtor__1;
            if ((_1238_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            if (_1231_isCo) {
              Dafny.ISequence<Dafny.Rune> _1241_recursiveGen;
              bool _1242___v34;
              bool _1243_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1244_recIdents;
              Dafny.ISequence<Dafny.Rune> _out231;
              bool _out232;
              bool _out233;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out234;
              DCOMP.COMP.GenExpr(_1240_value, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out231, out _out232, out _out233, out _out234);
              _1241_recursiveGen = _out231;
              _1242___v34 = _out232;
              _1243_isErased = _out233;
              _1244_recIdents = _out234;
              if (!(_1243_isErased)) {
                _1241_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1241_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _1241_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1241_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1244_recIdents);
              Dafny.ISequence<Dafny.Rune> _1245_allReadCloned;
              _1245_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_1244_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _1246_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_1 in (_1244_recIdents).Elements) {
                  _1246_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_1;
                  if ((_1244_recIdents).Contains(_1246_next)) {
                    goto after__ASSIGN_SUCH_THAT_1;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 1242)");
              after__ASSIGN_SUCH_THAT_1:;
                _1245_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1245_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_1246_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_1246_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _1244_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_1244_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1246_next));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_1239_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n")), _1245_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), _1241_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
            } else {
              Dafny.ISequence<Dafny.Rune> _1247_recursiveGen;
              bool _1248___v35;
              bool _1249_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1250_recIdents;
              Dafny.ISequence<Dafny.Rune> _out235;
              bool _out236;
              bool _out237;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out238;
              DCOMP.COMP.GenExpr(_1240_value, selfIdent, @params, true, out _out235, out _out236, out _out237, out _out238);
              _1247_recursiveGen = _out235;
              _1248___v35 = _out236;
              _1249_isErased = _out237;
              _1250_recIdents = _out238;
              if (!(_1249_isErased)) {
                _1247_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1247_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _1247_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1247_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_1239_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1247_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1250_recIdents);
            }
            _1238_i = (_1238_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" })"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source70.is_Convert) {
        DAST._IExpression _1251___mcc_h23 = _source70.dtor_value;
        DAST._IType _1252___mcc_h24 = _source70.dtor_from;
        DAST._IType _1253___mcc_h25 = _source70.dtor_typ;
        DAST._IType _1254_toTpe = _1253___mcc_h25;
        DAST._IType _1255_fromTpe = _1252___mcc_h24;
        DAST._IExpression _1256_expr = _1251___mcc_h23;
        {
          if (object.Equals(_1255_fromTpe, _1254_toTpe)) {
            Dafny.ISequence<Dafny.Rune> _1257_recursiveGen;
            bool _1258_recOwned;
            bool _1259_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1260_recIdents;
            Dafny.ISequence<Dafny.Rune> _out239;
            bool _out240;
            bool _out241;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out242;
            DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out239, out _out240, out _out241, out _out242);
            _1257_recursiveGen = _out239;
            _1258_recOwned = _out240;
            _1259_recErased = _out241;
            _1260_recIdents = _out242;
            s = _1257_recursiveGen;
            isOwned = _1258_recOwned;
            isErased = _1259_recErased;
            readIdents = _1260_recIdents;
          } else {
            _System._ITuple2<DAST._IType, DAST._IType> _source76 = _System.Tuple2<DAST._IType, DAST._IType>.create(_1255_fromTpe, _1254_toTpe);
            DAST._IType _1261___mcc_h305 = _source76.dtor__0;
            DAST._IType _1262___mcc_h306 = _source76.dtor__1;
            DAST._IType _source77 = _1261___mcc_h305;
            if (_source77.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1263___mcc_h309 = _source77.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _1264___mcc_h310 = _source77.dtor_typeArgs;
              DAST._IResolvedType _1265___mcc_h311 = _source77.dtor_resolved;
              DAST._IResolvedType _source78 = _1265___mcc_h311;
              if (_source78.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1266___mcc_h321 = _source78.dtor_path;
                DAST._IType _source79 = _1262___mcc_h306;
                if (_source79.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1267___mcc_h325 = _source79.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1268___mcc_h326 = _source79.dtor_typeArgs;
                  DAST._IResolvedType _1269___mcc_h327 = _source79.dtor_resolved;
                  DAST._IResolvedType _source80 = _1269___mcc_h327;
                  if (_source80.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1270___mcc_h331 = _source80.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1271_recursiveGen;
                      bool _1272_recOwned;
                      bool _1273_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1274_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out243;
                      bool _out244;
                      bool _out245;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out246;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out243, out _out244, out _out245, out _out246);
                      _1271_recursiveGen = _out243;
                      _1272_recOwned = _out244;
                      _1273_recErased = _out245;
                      _1274_recIdents = _out246;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1271_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1272_recOwned;
                      isErased = _1273_recErased;
                      readIdents = _1274_recIdents;
                    }
                  } else if (_source80.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1275___mcc_h333 = _source80.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1276_recursiveGen;
                      bool _1277_recOwned;
                      bool _1278_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1279_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out247;
                      bool _out248;
                      bool _out249;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out250;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out247, out _out248, out _out249, out _out250);
                      _1276_recursiveGen = _out247;
                      _1277_recOwned = _out248;
                      _1278_recErased = _out249;
                      _1279_recIdents = _out250;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1276_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1277_recOwned;
                      isErased = _1278_recErased;
                      readIdents = _1279_recIdents;
                    }
                  } else {
                    DAST._IType _1280___mcc_h335 = _source80.dtor_Newtype_a0;
                    DAST._IType _1281_b = _1280___mcc_h335;
                    {
                      if (object.Equals(_1255_fromTpe, _1281_b)) {
                        Dafny.ISequence<Dafny.Rune> _1282_recursiveGen;
                        bool _1283_recOwned;
                        bool _1284_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1285_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out251;
                        bool _out252;
                        bool _out253;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out254;
                        DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out251, out _out252, out _out253, out _out254);
                        _1282_recursiveGen = _out251;
                        _1283_recOwned = _out252;
                        _1284_recErased = _out253;
                        _1285_recIdents = _out254;
                        Dafny.ISequence<Dafny.Rune> _1286_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out255;
                        _out255 = DCOMP.COMP.GenType(_1254_toTpe, true, false);
                        _1286_rhsType = _out255;
                        Dafny.ISequence<Dafny.Rune> _1287_uneraseFn;
                        _1287_uneraseFn = ((_1283_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1286_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1287_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1282_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1283_recOwned;
                        isErased = false;
                        readIdents = _1285_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out256;
                        bool _out257;
                        bool _out258;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out259;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1256_expr, _1255_fromTpe, _1281_b), _1281_b, _1254_toTpe), selfIdent, @params, mustOwn, out _out256, out _out257, out _out258, out _out259);
                        s = _out256;
                        isOwned = _out257;
                        isErased = _out258;
                        readIdents = _out259;
                      }
                    }
                  }
                } else if (_source79.is_Nullable) {
                  DAST._IType _1288___mcc_h337 = _source79.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1289_recursiveGen;
                    bool _1290_recOwned;
                    bool _1291_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1292_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out260;
                    bool _out261;
                    bool _out262;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out263;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out260, out _out261, out _out262, out _out263);
                    _1289_recursiveGen = _out260;
                    _1290_recOwned = _out261;
                    _1291_recErased = _out262;
                    _1292_recIdents = _out263;
                    if (!(_1290_recOwned)) {
                      _1289_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1289_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1289_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1291_recErased;
                    readIdents = _1292_recIdents;
                  }
                } else if (_source79.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1293___mcc_h339 = _source79.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1294_recursiveGen;
                    bool _1295_recOwned;
                    bool _1296_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1297_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out264;
                    bool _out265;
                    bool _out266;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out267;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out264, out _out265, out _out266, out _out267);
                    _1294_recursiveGen = _out264;
                    _1295_recOwned = _out265;
                    _1296_recErased = _out266;
                    _1297_recIdents = _out267;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1294_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1295_recOwned;
                    isErased = _1296_recErased;
                    readIdents = _1297_recIdents;
                  }
                } else if (_source79.is_Array) {
                  DAST._IType _1298___mcc_h341 = _source79.dtor_element;
                  BigInteger _1299___mcc_h342 = _source79.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1300_recursiveGen;
                    bool _1301_recOwned;
                    bool _1302_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1303_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out268;
                    bool _out269;
                    bool _out270;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out271;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out268, out _out269, out _out270, out _out271);
                    _1300_recursiveGen = _out268;
                    _1301_recOwned = _out269;
                    _1302_recErased = _out270;
                    _1303_recIdents = _out271;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1300_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1301_recOwned;
                    isErased = _1302_recErased;
                    readIdents = _1303_recIdents;
                  }
                } else if (_source79.is_Seq) {
                  DAST._IType _1304___mcc_h345 = _source79.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1305_recursiveGen;
                    bool _1306_recOwned;
                    bool _1307_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1308_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out272;
                    bool _out273;
                    bool _out274;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out275;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out272, out _out273, out _out274, out _out275);
                    _1305_recursiveGen = _out272;
                    _1306_recOwned = _out273;
                    _1307_recErased = _out274;
                    _1308_recIdents = _out275;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1305_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1306_recOwned;
                    isErased = _1307_recErased;
                    readIdents = _1308_recIdents;
                  }
                } else if (_source79.is_Set) {
                  DAST._IType _1309___mcc_h347 = _source79.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1310_recursiveGen;
                    bool _1311_recOwned;
                    bool _1312_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1313_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out276;
                    bool _out277;
                    bool _out278;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out279;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out276, out _out277, out _out278, out _out279);
                    _1310_recursiveGen = _out276;
                    _1311_recOwned = _out277;
                    _1312_recErased = _out278;
                    _1313_recIdents = _out279;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1310_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1311_recOwned;
                    isErased = _1312_recErased;
                    readIdents = _1313_recIdents;
                  }
                } else if (_source79.is_Multiset) {
                  DAST._IType _1314___mcc_h349 = _source79.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1315_recursiveGen;
                    bool _1316_recOwned;
                    bool _1317_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1318_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out280;
                    bool _out281;
                    bool _out282;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out283;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out280, out _out281, out _out282, out _out283);
                    _1315_recursiveGen = _out280;
                    _1316_recOwned = _out281;
                    _1317_recErased = _out282;
                    _1318_recIdents = _out283;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1315_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1316_recOwned;
                    isErased = _1317_recErased;
                    readIdents = _1318_recIdents;
                  }
                } else if (_source79.is_Map) {
                  DAST._IType _1319___mcc_h351 = _source79.dtor_key;
                  DAST._IType _1320___mcc_h352 = _source79.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1321_recursiveGen;
                    bool _1322_recOwned;
                    bool _1323_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1324_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out284;
                    bool _out285;
                    bool _out286;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out287;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out284, out _out285, out _out286, out _out287);
                    _1321_recursiveGen = _out284;
                    _1322_recOwned = _out285;
                    _1323_recErased = _out286;
                    _1324_recIdents = _out287;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1321_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1322_recOwned;
                    isErased = _1323_recErased;
                    readIdents = _1324_recIdents;
                  }
                } else if (_source79.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1325___mcc_h355 = _source79.dtor_args;
                  DAST._IType _1326___mcc_h356 = _source79.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1327_recursiveGen;
                    bool _1328_recOwned;
                    bool _1329_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1330_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out288;
                    bool _out289;
                    bool _out290;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out291;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out288, out _out289, out _out290, out _out291);
                    _1327_recursiveGen = _out288;
                    _1328_recOwned = _out289;
                    _1329_recErased = _out290;
                    _1330_recIdents = _out291;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1327_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1328_recOwned;
                    isErased = _1329_recErased;
                    readIdents = _1330_recIdents;
                  }
                } else if (_source79.is_Primitive) {
                  DAST._IPrimitive _1331___mcc_h359 = _source79.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1332_recursiveGen;
                    bool _1333_recOwned;
                    bool _1334_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1335_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out292;
                    bool _out293;
                    bool _out294;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out295;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out292, out _out293, out _out294, out _out295);
                    _1332_recursiveGen = _out292;
                    _1333_recOwned = _out293;
                    _1334_recErased = _out294;
                    _1335_recIdents = _out295;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1332_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1333_recOwned;
                    isErased = _1334_recErased;
                    readIdents = _1335_recIdents;
                  }
                } else if (_source79.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1336___mcc_h361 = _source79.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1337_recursiveGen;
                    bool _1338_recOwned;
                    bool _1339_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1340_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out296;
                    bool _out297;
                    bool _out298;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out299;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out296, out _out297, out _out298, out _out299);
                    _1337_recursiveGen = _out296;
                    _1338_recOwned = _out297;
                    _1339_recErased = _out298;
                    _1340_recIdents = _out299;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1337_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1338_recOwned;
                    isErased = _1339_recErased;
                    readIdents = _1340_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1341___mcc_h363 = _source79.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1342_recursiveGen;
                    bool _1343_recOwned;
                    bool _1344_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1345_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out300;
                    bool _out301;
                    bool _out302;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out303;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out300, out _out301, out _out302, out _out303);
                    _1342_recursiveGen = _out300;
                    _1343_recOwned = _out301;
                    _1344_recErased = _out302;
                    _1345_recIdents = _out303;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1342_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1343_recOwned;
                    isErased = _1344_recErased;
                    readIdents = _1345_recIdents;
                  }
                }
              } else if (_source78.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1346___mcc_h365 = _source78.dtor_path;
                DAST._IType _source81 = _1262___mcc_h306;
                if (_source81.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1347___mcc_h369 = _source81.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1348___mcc_h370 = _source81.dtor_typeArgs;
                  DAST._IResolvedType _1349___mcc_h371 = _source81.dtor_resolved;
                  DAST._IResolvedType _source82 = _1349___mcc_h371;
                  if (_source82.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1350___mcc_h375 = _source82.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1351_recursiveGen;
                      bool _1352_recOwned;
                      bool _1353_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1354_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out304;
                      bool _out305;
                      bool _out306;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out307;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out304, out _out305, out _out306, out _out307);
                      _1351_recursiveGen = _out304;
                      _1352_recOwned = _out305;
                      _1353_recErased = _out306;
                      _1354_recIdents = _out307;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1351_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1352_recOwned;
                      isErased = _1353_recErased;
                      readIdents = _1354_recIdents;
                    }
                  } else if (_source82.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1355___mcc_h377 = _source82.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1356_recursiveGen;
                      bool _1357_recOwned;
                      bool _1358_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1359_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out308;
                      bool _out309;
                      bool _out310;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out311;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out308, out _out309, out _out310, out _out311);
                      _1356_recursiveGen = _out308;
                      _1357_recOwned = _out309;
                      _1358_recErased = _out310;
                      _1359_recIdents = _out311;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1356_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1357_recOwned;
                      isErased = _1358_recErased;
                      readIdents = _1359_recIdents;
                    }
                  } else {
                    DAST._IType _1360___mcc_h379 = _source82.dtor_Newtype_a0;
                    DAST._IType _1361_b = _1360___mcc_h379;
                    {
                      if (object.Equals(_1255_fromTpe, _1361_b)) {
                        Dafny.ISequence<Dafny.Rune> _1362_recursiveGen;
                        bool _1363_recOwned;
                        bool _1364_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1365_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out312;
                        bool _out313;
                        bool _out314;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out315;
                        DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out312, out _out313, out _out314, out _out315);
                        _1362_recursiveGen = _out312;
                        _1363_recOwned = _out313;
                        _1364_recErased = _out314;
                        _1365_recIdents = _out315;
                        Dafny.ISequence<Dafny.Rune> _1366_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out316;
                        _out316 = DCOMP.COMP.GenType(_1254_toTpe, true, false);
                        _1366_rhsType = _out316;
                        Dafny.ISequence<Dafny.Rune> _1367_uneraseFn;
                        _1367_uneraseFn = ((_1363_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1366_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1367_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1362_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1363_recOwned;
                        isErased = false;
                        readIdents = _1365_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out317;
                        bool _out318;
                        bool _out319;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out320;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1256_expr, _1255_fromTpe, _1361_b), _1361_b, _1254_toTpe), selfIdent, @params, mustOwn, out _out317, out _out318, out _out319, out _out320);
                        s = _out317;
                        isOwned = _out318;
                        isErased = _out319;
                        readIdents = _out320;
                      }
                    }
                  }
                } else if (_source81.is_Nullable) {
                  DAST._IType _1368___mcc_h381 = _source81.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1369_recursiveGen;
                    bool _1370_recOwned;
                    bool _1371_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1372_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out321;
                    bool _out322;
                    bool _out323;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out324;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out321, out _out322, out _out323, out _out324);
                    _1369_recursiveGen = _out321;
                    _1370_recOwned = _out322;
                    _1371_recErased = _out323;
                    _1372_recIdents = _out324;
                    if (!(_1370_recOwned)) {
                      _1369_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1369_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1369_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1371_recErased;
                    readIdents = _1372_recIdents;
                  }
                } else if (_source81.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1373___mcc_h383 = _source81.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1374_recursiveGen;
                    bool _1375_recOwned;
                    bool _1376_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1377_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out325;
                    bool _out326;
                    bool _out327;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out328;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out325, out _out326, out _out327, out _out328);
                    _1374_recursiveGen = _out325;
                    _1375_recOwned = _out326;
                    _1376_recErased = _out327;
                    _1377_recIdents = _out328;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1374_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1375_recOwned;
                    isErased = _1376_recErased;
                    readIdents = _1377_recIdents;
                  }
                } else if (_source81.is_Array) {
                  DAST._IType _1378___mcc_h385 = _source81.dtor_element;
                  BigInteger _1379___mcc_h386 = _source81.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1380_recursiveGen;
                    bool _1381_recOwned;
                    bool _1382_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1383_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out329;
                    bool _out330;
                    bool _out331;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out332;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out329, out _out330, out _out331, out _out332);
                    _1380_recursiveGen = _out329;
                    _1381_recOwned = _out330;
                    _1382_recErased = _out331;
                    _1383_recIdents = _out332;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1380_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1381_recOwned;
                    isErased = _1382_recErased;
                    readIdents = _1383_recIdents;
                  }
                } else if (_source81.is_Seq) {
                  DAST._IType _1384___mcc_h389 = _source81.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1385_recursiveGen;
                    bool _1386_recOwned;
                    bool _1387_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1388_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out333;
                    bool _out334;
                    bool _out335;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out336;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out333, out _out334, out _out335, out _out336);
                    _1385_recursiveGen = _out333;
                    _1386_recOwned = _out334;
                    _1387_recErased = _out335;
                    _1388_recIdents = _out336;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1385_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1386_recOwned;
                    isErased = _1387_recErased;
                    readIdents = _1388_recIdents;
                  }
                } else if (_source81.is_Set) {
                  DAST._IType _1389___mcc_h391 = _source81.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1390_recursiveGen;
                    bool _1391_recOwned;
                    bool _1392_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1393_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out337;
                    bool _out338;
                    bool _out339;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out340;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out337, out _out338, out _out339, out _out340);
                    _1390_recursiveGen = _out337;
                    _1391_recOwned = _out338;
                    _1392_recErased = _out339;
                    _1393_recIdents = _out340;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1390_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1391_recOwned;
                    isErased = _1392_recErased;
                    readIdents = _1393_recIdents;
                  }
                } else if (_source81.is_Multiset) {
                  DAST._IType _1394___mcc_h393 = _source81.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1395_recursiveGen;
                    bool _1396_recOwned;
                    bool _1397_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1398_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out341;
                    bool _out342;
                    bool _out343;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out344;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out341, out _out342, out _out343, out _out344);
                    _1395_recursiveGen = _out341;
                    _1396_recOwned = _out342;
                    _1397_recErased = _out343;
                    _1398_recIdents = _out344;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1395_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1396_recOwned;
                    isErased = _1397_recErased;
                    readIdents = _1398_recIdents;
                  }
                } else if (_source81.is_Map) {
                  DAST._IType _1399___mcc_h395 = _source81.dtor_key;
                  DAST._IType _1400___mcc_h396 = _source81.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1401_recursiveGen;
                    bool _1402_recOwned;
                    bool _1403_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1404_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out345;
                    bool _out346;
                    bool _out347;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out348;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out345, out _out346, out _out347, out _out348);
                    _1401_recursiveGen = _out345;
                    _1402_recOwned = _out346;
                    _1403_recErased = _out347;
                    _1404_recIdents = _out348;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1401_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1402_recOwned;
                    isErased = _1403_recErased;
                    readIdents = _1404_recIdents;
                  }
                } else if (_source81.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1405___mcc_h399 = _source81.dtor_args;
                  DAST._IType _1406___mcc_h400 = _source81.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1407_recursiveGen;
                    bool _1408_recOwned;
                    bool _1409_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1410_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out349;
                    bool _out350;
                    bool _out351;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out352;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out349, out _out350, out _out351, out _out352);
                    _1407_recursiveGen = _out349;
                    _1408_recOwned = _out350;
                    _1409_recErased = _out351;
                    _1410_recIdents = _out352;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1407_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1408_recOwned;
                    isErased = _1409_recErased;
                    readIdents = _1410_recIdents;
                  }
                } else if (_source81.is_Primitive) {
                  DAST._IPrimitive _1411___mcc_h403 = _source81.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1412_recursiveGen;
                    bool _1413_recOwned;
                    bool _1414_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1415_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out353;
                    bool _out354;
                    bool _out355;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out356;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out353, out _out354, out _out355, out _out356);
                    _1412_recursiveGen = _out353;
                    _1413_recOwned = _out354;
                    _1414_recErased = _out355;
                    _1415_recIdents = _out356;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1412_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1413_recOwned;
                    isErased = _1414_recErased;
                    readIdents = _1415_recIdents;
                  }
                } else if (_source81.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1416___mcc_h405 = _source81.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1417_recursiveGen;
                    bool _1418_recOwned;
                    bool _1419_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1420_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out357;
                    bool _out358;
                    bool _out359;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out360;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out357, out _out358, out _out359, out _out360);
                    _1417_recursiveGen = _out357;
                    _1418_recOwned = _out358;
                    _1419_recErased = _out359;
                    _1420_recIdents = _out360;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1417_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1418_recOwned;
                    isErased = _1419_recErased;
                    readIdents = _1420_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1421___mcc_h407 = _source81.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1422_recursiveGen;
                    bool _1423_recOwned;
                    bool _1424_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1425_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out361;
                    bool _out362;
                    bool _out363;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out364;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out361, out _out362, out _out363, out _out364);
                    _1422_recursiveGen = _out361;
                    _1423_recOwned = _out362;
                    _1424_recErased = _out363;
                    _1425_recIdents = _out364;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1422_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1423_recOwned;
                    isErased = _1424_recErased;
                    readIdents = _1425_recIdents;
                  }
                }
              } else {
                DAST._IType _1426___mcc_h409 = _source78.dtor_Newtype_a0;
                DAST._IType _source83 = _1262___mcc_h306;
                if (_source83.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1427___mcc_h413 = _source83.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1428___mcc_h414 = _source83.dtor_typeArgs;
                  DAST._IResolvedType _1429___mcc_h415 = _source83.dtor_resolved;
                  DAST._IResolvedType _source84 = _1429___mcc_h415;
                  if (_source84.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1430___mcc_h422 = _source84.dtor_path;
                    DAST._IType _1431_b = _1426___mcc_h409;
                    {
                      if (object.Equals(_1431_b, _1254_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _1432_recursiveGen;
                        bool _1433_recOwned;
                        bool _1434_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1435_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out365;
                        bool _out366;
                        bool _out367;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out368;
                        DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out365, out _out366, out _out367, out _out368);
                        _1432_recursiveGen = _out365;
                        _1433_recOwned = _out366;
                        _1434_recErased = _out367;
                        _1435_recIdents = _out368;
                        Dafny.ISequence<Dafny.Rune> _1436_uneraseFn;
                        _1436_uneraseFn = ((_1433_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1436_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1432_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1433_recOwned;
                        isErased = true;
                        readIdents = _1435_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out369;
                        bool _out370;
                        bool _out371;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out372;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1256_expr, _1255_fromTpe, _1431_b), _1431_b, _1254_toTpe), selfIdent, @params, mustOwn, out _out369, out _out370, out _out371, out _out372);
                        s = _out369;
                        isOwned = _out370;
                        isErased = _out371;
                        readIdents = _out372;
                      }
                    }
                  } else if (_source84.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1437___mcc_h425 = _source84.dtor_path;
                    DAST._IType _1438_b = _1426___mcc_h409;
                    {
                      if (object.Equals(_1438_b, _1254_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _1439_recursiveGen;
                        bool _1440_recOwned;
                        bool _1441_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1442_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out373;
                        bool _out374;
                        bool _out375;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out376;
                        DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out373, out _out374, out _out375, out _out376);
                        _1439_recursiveGen = _out373;
                        _1440_recOwned = _out374;
                        _1441_recErased = _out375;
                        _1442_recIdents = _out376;
                        Dafny.ISequence<Dafny.Rune> _1443_uneraseFn;
                        _1443_uneraseFn = ((_1440_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1443_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1439_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1440_recOwned;
                        isErased = true;
                        readIdents = _1442_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out377;
                        bool _out378;
                        bool _out379;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out380;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1256_expr, _1255_fromTpe, _1438_b), _1438_b, _1254_toTpe), selfIdent, @params, mustOwn, out _out377, out _out378, out _out379, out _out380);
                        s = _out377;
                        isOwned = _out378;
                        isErased = _out379;
                        readIdents = _out380;
                      }
                    }
                  } else {
                    DAST._IType _1444___mcc_h428 = _source84.dtor_Newtype_a0;
                    DAST._IType _1445_b = _1444___mcc_h428;
                    {
                      if (object.Equals(_1255_fromTpe, _1445_b)) {
                        Dafny.ISequence<Dafny.Rune> _1446_recursiveGen;
                        bool _1447_recOwned;
                        bool _1448_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1449_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out381;
                        bool _out382;
                        bool _out383;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out384;
                        DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out381, out _out382, out _out383, out _out384);
                        _1446_recursiveGen = _out381;
                        _1447_recOwned = _out382;
                        _1448_recErased = _out383;
                        _1449_recIdents = _out384;
                        Dafny.ISequence<Dafny.Rune> _1450_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out385;
                        _out385 = DCOMP.COMP.GenType(_1254_toTpe, true, false);
                        _1450_rhsType = _out385;
                        Dafny.ISequence<Dafny.Rune> _1451_uneraseFn;
                        _1451_uneraseFn = ((_1447_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1450_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1451_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1446_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1447_recOwned;
                        isErased = false;
                        readIdents = _1449_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out386;
                        bool _out387;
                        bool _out388;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out389;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1256_expr, _1255_fromTpe, _1445_b), _1445_b, _1254_toTpe), selfIdent, @params, mustOwn, out _out386, out _out387, out _out388, out _out389);
                        s = _out386;
                        isOwned = _out387;
                        isErased = _out388;
                        readIdents = _out389;
                      }
                    }
                  }
                } else if (_source83.is_Nullable) {
                  DAST._IType _1452___mcc_h431 = _source83.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1453_recursiveGen;
                    bool _1454_recOwned;
                    bool _1455_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1456_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out390;
                    bool _out391;
                    bool _out392;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out393;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out390, out _out391, out _out392, out _out393);
                    _1453_recursiveGen = _out390;
                    _1454_recOwned = _out391;
                    _1455_recErased = _out392;
                    _1456_recIdents = _out393;
                    if (!(_1454_recOwned)) {
                      _1453_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1453_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1453_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1455_recErased;
                    readIdents = _1456_recIdents;
                  }
                } else if (_source83.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1457___mcc_h434 = _source83.dtor_Tuple_a0;
                  DAST._IType _1458_b = _1426___mcc_h409;
                  {
                    if (object.Equals(_1458_b, _1254_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1459_recursiveGen;
                      bool _1460_recOwned;
                      bool _1461_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1462_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out394;
                      bool _out395;
                      bool _out396;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out397;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out394, out _out395, out _out396, out _out397);
                      _1459_recursiveGen = _out394;
                      _1460_recOwned = _out395;
                      _1461_recErased = _out396;
                      _1462_recIdents = _out397;
                      Dafny.ISequence<Dafny.Rune> _1463_uneraseFn;
                      _1463_uneraseFn = ((_1460_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1463_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1459_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1460_recOwned;
                      isErased = true;
                      readIdents = _1462_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out398;
                      bool _out399;
                      bool _out400;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out401;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1256_expr, _1255_fromTpe, _1458_b), _1458_b, _1254_toTpe), selfIdent, @params, mustOwn, out _out398, out _out399, out _out400, out _out401);
                      s = _out398;
                      isOwned = _out399;
                      isErased = _out400;
                      readIdents = _out401;
                    }
                  }
                } else if (_source83.is_Array) {
                  DAST._IType _1464___mcc_h437 = _source83.dtor_element;
                  BigInteger _1465___mcc_h438 = _source83.dtor_dims;
                  DAST._IType _1466_b = _1426___mcc_h409;
                  {
                    if (object.Equals(_1466_b, _1254_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1467_recursiveGen;
                      bool _1468_recOwned;
                      bool _1469_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1470_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out402;
                      bool _out403;
                      bool _out404;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out405;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out402, out _out403, out _out404, out _out405);
                      _1467_recursiveGen = _out402;
                      _1468_recOwned = _out403;
                      _1469_recErased = _out404;
                      _1470_recIdents = _out405;
                      Dafny.ISequence<Dafny.Rune> _1471_uneraseFn;
                      _1471_uneraseFn = ((_1468_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1471_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1467_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1468_recOwned;
                      isErased = true;
                      readIdents = _1470_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out406;
                      bool _out407;
                      bool _out408;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out409;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1256_expr, _1255_fromTpe, _1466_b), _1466_b, _1254_toTpe), selfIdent, @params, mustOwn, out _out406, out _out407, out _out408, out _out409);
                      s = _out406;
                      isOwned = _out407;
                      isErased = _out408;
                      readIdents = _out409;
                    }
                  }
                } else if (_source83.is_Seq) {
                  DAST._IType _1472___mcc_h443 = _source83.dtor_element;
                  DAST._IType _1473_b = _1426___mcc_h409;
                  {
                    if (object.Equals(_1473_b, _1254_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1474_recursiveGen;
                      bool _1475_recOwned;
                      bool _1476_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1477_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out410;
                      bool _out411;
                      bool _out412;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out413;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out410, out _out411, out _out412, out _out413);
                      _1474_recursiveGen = _out410;
                      _1475_recOwned = _out411;
                      _1476_recErased = _out412;
                      _1477_recIdents = _out413;
                      Dafny.ISequence<Dafny.Rune> _1478_uneraseFn;
                      _1478_uneraseFn = ((_1475_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1478_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1474_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1475_recOwned;
                      isErased = true;
                      readIdents = _1477_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out414;
                      bool _out415;
                      bool _out416;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out417;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1256_expr, _1255_fromTpe, _1473_b), _1473_b, _1254_toTpe), selfIdent, @params, mustOwn, out _out414, out _out415, out _out416, out _out417);
                      s = _out414;
                      isOwned = _out415;
                      isErased = _out416;
                      readIdents = _out417;
                    }
                  }
                } else if (_source83.is_Set) {
                  DAST._IType _1479___mcc_h446 = _source83.dtor_element;
                  DAST._IType _1480_b = _1426___mcc_h409;
                  {
                    if (object.Equals(_1480_b, _1254_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1481_recursiveGen;
                      bool _1482_recOwned;
                      bool _1483_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1484_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out418;
                      bool _out419;
                      bool _out420;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out421;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out418, out _out419, out _out420, out _out421);
                      _1481_recursiveGen = _out418;
                      _1482_recOwned = _out419;
                      _1483_recErased = _out420;
                      _1484_recIdents = _out421;
                      Dafny.ISequence<Dafny.Rune> _1485_uneraseFn;
                      _1485_uneraseFn = ((_1482_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1485_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1481_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1482_recOwned;
                      isErased = true;
                      readIdents = _1484_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out422;
                      bool _out423;
                      bool _out424;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out425;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1256_expr, _1255_fromTpe, _1480_b), _1480_b, _1254_toTpe), selfIdent, @params, mustOwn, out _out422, out _out423, out _out424, out _out425);
                      s = _out422;
                      isOwned = _out423;
                      isErased = _out424;
                      readIdents = _out425;
                    }
                  }
                } else if (_source83.is_Multiset) {
                  DAST._IType _1486___mcc_h449 = _source83.dtor_element;
                  DAST._IType _1487_b = _1426___mcc_h409;
                  {
                    if (object.Equals(_1487_b, _1254_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1488_recursiveGen;
                      bool _1489_recOwned;
                      bool _1490_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1491_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out426;
                      bool _out427;
                      bool _out428;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out429;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out426, out _out427, out _out428, out _out429);
                      _1488_recursiveGen = _out426;
                      _1489_recOwned = _out427;
                      _1490_recErased = _out428;
                      _1491_recIdents = _out429;
                      Dafny.ISequence<Dafny.Rune> _1492_uneraseFn;
                      _1492_uneraseFn = ((_1489_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1492_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1488_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1489_recOwned;
                      isErased = true;
                      readIdents = _1491_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out430;
                      bool _out431;
                      bool _out432;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out433;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1256_expr, _1255_fromTpe, _1487_b), _1487_b, _1254_toTpe), selfIdent, @params, mustOwn, out _out430, out _out431, out _out432, out _out433);
                      s = _out430;
                      isOwned = _out431;
                      isErased = _out432;
                      readIdents = _out433;
                    }
                  }
                } else if (_source83.is_Map) {
                  DAST._IType _1493___mcc_h452 = _source83.dtor_key;
                  DAST._IType _1494___mcc_h453 = _source83.dtor_value;
                  DAST._IType _1495_b = _1426___mcc_h409;
                  {
                    if (object.Equals(_1495_b, _1254_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1496_recursiveGen;
                      bool _1497_recOwned;
                      bool _1498_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1499_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out434;
                      bool _out435;
                      bool _out436;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out437;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out434, out _out435, out _out436, out _out437);
                      _1496_recursiveGen = _out434;
                      _1497_recOwned = _out435;
                      _1498_recErased = _out436;
                      _1499_recIdents = _out437;
                      Dafny.ISequence<Dafny.Rune> _1500_uneraseFn;
                      _1500_uneraseFn = ((_1497_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1500_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1496_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1497_recOwned;
                      isErased = true;
                      readIdents = _1499_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out438;
                      bool _out439;
                      bool _out440;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out441;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1256_expr, _1255_fromTpe, _1495_b), _1495_b, _1254_toTpe), selfIdent, @params, mustOwn, out _out438, out _out439, out _out440, out _out441);
                      s = _out438;
                      isOwned = _out439;
                      isErased = _out440;
                      readIdents = _out441;
                    }
                  }
                } else if (_source83.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1501___mcc_h458 = _source83.dtor_args;
                  DAST._IType _1502___mcc_h459 = _source83.dtor_result;
                  DAST._IType _1503_b = _1426___mcc_h409;
                  {
                    if (object.Equals(_1503_b, _1254_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1504_recursiveGen;
                      bool _1505_recOwned;
                      bool _1506_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1507_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out442;
                      bool _out443;
                      bool _out444;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out445;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out442, out _out443, out _out444, out _out445);
                      _1504_recursiveGen = _out442;
                      _1505_recOwned = _out443;
                      _1506_recErased = _out444;
                      _1507_recIdents = _out445;
                      Dafny.ISequence<Dafny.Rune> _1508_uneraseFn;
                      _1508_uneraseFn = ((_1505_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1508_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1504_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1505_recOwned;
                      isErased = true;
                      readIdents = _1507_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out446;
                      bool _out447;
                      bool _out448;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out449;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1256_expr, _1255_fromTpe, _1503_b), _1503_b, _1254_toTpe), selfIdent, @params, mustOwn, out _out446, out _out447, out _out448, out _out449);
                      s = _out446;
                      isOwned = _out447;
                      isErased = _out448;
                      readIdents = _out449;
                    }
                  }
                } else if (_source83.is_Primitive) {
                  DAST._IPrimitive _1509___mcc_h464 = _source83.dtor_Primitive_a0;
                  DAST._IType _1510_b = _1426___mcc_h409;
                  {
                    if (object.Equals(_1510_b, _1254_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1511_recursiveGen;
                      bool _1512_recOwned;
                      bool _1513_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1514_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out450;
                      bool _out451;
                      bool _out452;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out453;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out450, out _out451, out _out452, out _out453);
                      _1511_recursiveGen = _out450;
                      _1512_recOwned = _out451;
                      _1513_recErased = _out452;
                      _1514_recIdents = _out453;
                      Dafny.ISequence<Dafny.Rune> _1515_uneraseFn;
                      _1515_uneraseFn = ((_1512_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1515_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1511_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1512_recOwned;
                      isErased = true;
                      readIdents = _1514_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out454;
                      bool _out455;
                      bool _out456;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out457;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1256_expr, _1255_fromTpe, _1510_b), _1510_b, _1254_toTpe), selfIdent, @params, mustOwn, out _out454, out _out455, out _out456, out _out457);
                      s = _out454;
                      isOwned = _out455;
                      isErased = _out456;
                      readIdents = _out457;
                    }
                  }
                } else if (_source83.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1516___mcc_h467 = _source83.dtor_Passthrough_a0;
                  DAST._IType _1517_b = _1426___mcc_h409;
                  {
                    if (object.Equals(_1517_b, _1254_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1518_recursiveGen;
                      bool _1519_recOwned;
                      bool _1520_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1521_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out458;
                      bool _out459;
                      bool _out460;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out461;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out458, out _out459, out _out460, out _out461);
                      _1518_recursiveGen = _out458;
                      _1519_recOwned = _out459;
                      _1520_recErased = _out460;
                      _1521_recIdents = _out461;
                      Dafny.ISequence<Dafny.Rune> _1522_uneraseFn;
                      _1522_uneraseFn = ((_1519_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1522_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1518_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1519_recOwned;
                      isErased = true;
                      readIdents = _1521_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out462;
                      bool _out463;
                      bool _out464;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out465;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1256_expr, _1255_fromTpe, _1517_b), _1517_b, _1254_toTpe), selfIdent, @params, mustOwn, out _out462, out _out463, out _out464, out _out465);
                      s = _out462;
                      isOwned = _out463;
                      isErased = _out464;
                      readIdents = _out465;
                    }
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1523___mcc_h470 = _source83.dtor_TypeArg_a0;
                  DAST._IType _1524_b = _1426___mcc_h409;
                  {
                    if (object.Equals(_1524_b, _1254_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1525_recursiveGen;
                      bool _1526_recOwned;
                      bool _1527_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1528_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out466;
                      bool _out467;
                      bool _out468;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out469;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out466, out _out467, out _out468, out _out469);
                      _1525_recursiveGen = _out466;
                      _1526_recOwned = _out467;
                      _1527_recErased = _out468;
                      _1528_recIdents = _out469;
                      Dafny.ISequence<Dafny.Rune> _1529_uneraseFn;
                      _1529_uneraseFn = ((_1526_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1529_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1525_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1526_recOwned;
                      isErased = true;
                      readIdents = _1528_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out470;
                      bool _out471;
                      bool _out472;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out473;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1256_expr, _1255_fromTpe, _1524_b), _1524_b, _1254_toTpe), selfIdent, @params, mustOwn, out _out470, out _out471, out _out472, out _out473);
                      s = _out470;
                      isOwned = _out471;
                      isErased = _out472;
                      readIdents = _out473;
                    }
                  }
                }
              }
            } else if (_source77.is_Nullable) {
              DAST._IType _1530___mcc_h473 = _source77.dtor_Nullable_a0;
              DAST._IType _source85 = _1262___mcc_h306;
              if (_source85.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1531___mcc_h477 = _source85.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1532___mcc_h478 = _source85.dtor_typeArgs;
                DAST._IResolvedType _1533___mcc_h479 = _source85.dtor_resolved;
                DAST._IResolvedType _source86 = _1533___mcc_h479;
                if (_source86.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1534___mcc_h486 = _source86.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1535_recursiveGen;
                    bool _1536_recOwned;
                    bool _1537_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1538_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out474;
                    bool _out475;
                    bool _out476;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out477;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out474, out _out475, out _out476, out _out477);
                    _1535_recursiveGen = _out474;
                    _1536_recOwned = _out475;
                    _1537_recErased = _out476;
                    _1538_recIdents = _out477;
                    if (!(_1536_recOwned)) {
                      _1535_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1535_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1535_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1536_recOwned;
                    isErased = _1537_recErased;
                    readIdents = _1538_recIdents;
                  }
                } else if (_source86.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1539___mcc_h489 = _source86.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1540_recursiveGen;
                    bool _1541_recOwned;
                    bool _1542_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1543_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out478;
                    bool _out479;
                    bool _out480;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out481;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out478, out _out479, out _out480, out _out481);
                    _1540_recursiveGen = _out478;
                    _1541_recOwned = _out479;
                    _1542_recErased = _out480;
                    _1543_recIdents = _out481;
                    if (!(_1541_recOwned)) {
                      _1540_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1540_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1540_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1541_recOwned;
                    isErased = _1542_recErased;
                    readIdents = _1543_recIdents;
                  }
                } else {
                  DAST._IType _1544___mcc_h492 = _source86.dtor_Newtype_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1545_recursiveGen;
                    bool _1546_recOwned;
                    bool _1547_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1548_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out482;
                    bool _out483;
                    bool _out484;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out485;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out482, out _out483, out _out484, out _out485);
                    _1545_recursiveGen = _out482;
                    _1546_recOwned = _out483;
                    _1547_recErased = _out484;
                    _1548_recIdents = _out485;
                    if (!(_1546_recOwned)) {
                      _1545_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1545_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1545_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1546_recOwned;
                    isErased = _1547_recErased;
                    readIdents = _1548_recIdents;
                  }
                }
              } else if (_source85.is_Nullable) {
                DAST._IType _1549___mcc_h495 = _source85.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1550_recursiveGen;
                  bool _1551_recOwned;
                  bool _1552_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1553_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out486;
                  bool _out487;
                  bool _out488;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out489;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out486, out _out487, out _out488, out _out489);
                  _1550_recursiveGen = _out486;
                  _1551_recOwned = _out487;
                  _1552_recErased = _out488;
                  _1553_recIdents = _out489;
                  if (!(_1551_recOwned)) {
                    _1550_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1550_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1550_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1551_recOwned;
                  isErased = _1552_recErased;
                  readIdents = _1553_recIdents;
                }
              } else if (_source85.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1554___mcc_h498 = _source85.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1555_recursiveGen;
                  bool _1556_recOwned;
                  bool _1557_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1558_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out490;
                  bool _out491;
                  bool _out492;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out493;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out490, out _out491, out _out492, out _out493);
                  _1555_recursiveGen = _out490;
                  _1556_recOwned = _out491;
                  _1557_recErased = _out492;
                  _1558_recIdents = _out493;
                  if (!(_1556_recOwned)) {
                    _1555_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1555_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1555_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1556_recOwned;
                  isErased = _1557_recErased;
                  readIdents = _1558_recIdents;
                }
              } else if (_source85.is_Array) {
                DAST._IType _1559___mcc_h501 = _source85.dtor_element;
                BigInteger _1560___mcc_h502 = _source85.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1561_recursiveGen;
                  bool _1562_recOwned;
                  bool _1563_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1564_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out494;
                  bool _out495;
                  bool _out496;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out497;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out494, out _out495, out _out496, out _out497);
                  _1561_recursiveGen = _out494;
                  _1562_recOwned = _out495;
                  _1563_recErased = _out496;
                  _1564_recIdents = _out497;
                  if (!(_1562_recOwned)) {
                    _1561_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1561_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1561_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1562_recOwned;
                  isErased = _1563_recErased;
                  readIdents = _1564_recIdents;
                }
              } else if (_source85.is_Seq) {
                DAST._IType _1565___mcc_h507 = _source85.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1566_recursiveGen;
                  bool _1567_recOwned;
                  bool _1568_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1569_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out498;
                  bool _out499;
                  bool _out500;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out501;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out498, out _out499, out _out500, out _out501);
                  _1566_recursiveGen = _out498;
                  _1567_recOwned = _out499;
                  _1568_recErased = _out500;
                  _1569_recIdents = _out501;
                  if (!(_1567_recOwned)) {
                    _1566_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1566_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1566_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1567_recOwned;
                  isErased = _1568_recErased;
                  readIdents = _1569_recIdents;
                }
              } else if (_source85.is_Set) {
                DAST._IType _1570___mcc_h510 = _source85.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1571_recursiveGen;
                  bool _1572_recOwned;
                  bool _1573_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1574_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out502;
                  bool _out503;
                  bool _out504;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out505;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out502, out _out503, out _out504, out _out505);
                  _1571_recursiveGen = _out502;
                  _1572_recOwned = _out503;
                  _1573_recErased = _out504;
                  _1574_recIdents = _out505;
                  if (!(_1572_recOwned)) {
                    _1571_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1571_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1571_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1572_recOwned;
                  isErased = _1573_recErased;
                  readIdents = _1574_recIdents;
                }
              } else if (_source85.is_Multiset) {
                DAST._IType _1575___mcc_h513 = _source85.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1576_recursiveGen;
                  bool _1577_recOwned;
                  bool _1578_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1579_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out506;
                  bool _out507;
                  bool _out508;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out509;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out506, out _out507, out _out508, out _out509);
                  _1576_recursiveGen = _out506;
                  _1577_recOwned = _out507;
                  _1578_recErased = _out508;
                  _1579_recIdents = _out509;
                  if (!(_1577_recOwned)) {
                    _1576_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1576_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1576_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1577_recOwned;
                  isErased = _1578_recErased;
                  readIdents = _1579_recIdents;
                }
              } else if (_source85.is_Map) {
                DAST._IType _1580___mcc_h516 = _source85.dtor_key;
                DAST._IType _1581___mcc_h517 = _source85.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1582_recursiveGen;
                  bool _1583_recOwned;
                  bool _1584_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1585_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out510;
                  bool _out511;
                  bool _out512;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out513;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out510, out _out511, out _out512, out _out513);
                  _1582_recursiveGen = _out510;
                  _1583_recOwned = _out511;
                  _1584_recErased = _out512;
                  _1585_recIdents = _out513;
                  if (!(_1583_recOwned)) {
                    _1582_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1582_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1582_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1583_recOwned;
                  isErased = _1584_recErased;
                  readIdents = _1585_recIdents;
                }
              } else if (_source85.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1586___mcc_h522 = _source85.dtor_args;
                DAST._IType _1587___mcc_h523 = _source85.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1588_recursiveGen;
                  bool _1589_recOwned;
                  bool _1590_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1591_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out514;
                  bool _out515;
                  bool _out516;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out517;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out514, out _out515, out _out516, out _out517);
                  _1588_recursiveGen = _out514;
                  _1589_recOwned = _out515;
                  _1590_recErased = _out516;
                  _1591_recIdents = _out517;
                  if (!(_1589_recOwned)) {
                    _1588_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1588_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1588_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1589_recOwned;
                  isErased = _1590_recErased;
                  readIdents = _1591_recIdents;
                }
              } else if (_source85.is_Primitive) {
                DAST._IPrimitive _1592___mcc_h528 = _source85.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1593_recursiveGen;
                  bool _1594_recOwned;
                  bool _1595_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1596_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out518;
                  bool _out519;
                  bool _out520;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out521;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out518, out _out519, out _out520, out _out521);
                  _1593_recursiveGen = _out518;
                  _1594_recOwned = _out519;
                  _1595_recErased = _out520;
                  _1596_recIdents = _out521;
                  if (!(_1594_recOwned)) {
                    _1593_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1593_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1593_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1594_recOwned;
                  isErased = _1595_recErased;
                  readIdents = _1596_recIdents;
                }
              } else if (_source85.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1597___mcc_h531 = _source85.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1598_recursiveGen;
                  bool _1599_recOwned;
                  bool _1600_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1601_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out522;
                  bool _out523;
                  bool _out524;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out525;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out522, out _out523, out _out524, out _out525);
                  _1598_recursiveGen = _out522;
                  _1599_recOwned = _out523;
                  _1600_recErased = _out524;
                  _1601_recIdents = _out525;
                  if (!(_1599_recOwned)) {
                    _1598_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1598_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1598_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1599_recOwned;
                  isErased = _1600_recErased;
                  readIdents = _1601_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1602___mcc_h534 = _source85.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1603_recursiveGen;
                  bool _1604_recOwned;
                  bool _1605_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1606_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out526;
                  bool _out527;
                  bool _out528;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out529;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out526, out _out527, out _out528, out _out529);
                  _1603_recursiveGen = _out526;
                  _1604_recOwned = _out527;
                  _1605_recErased = _out528;
                  _1606_recIdents = _out529;
                  if (!(_1604_recOwned)) {
                    _1603_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1603_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1603_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1604_recOwned;
                  isErased = _1605_recErased;
                  readIdents = _1606_recIdents;
                }
              }
            } else if (_source77.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1607___mcc_h537 = _source77.dtor_Tuple_a0;
              DAST._IType _source87 = _1262___mcc_h306;
              if (_source87.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1608___mcc_h541 = _source87.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1609___mcc_h542 = _source87.dtor_typeArgs;
                DAST._IResolvedType _1610___mcc_h543 = _source87.dtor_resolved;
                DAST._IResolvedType _source88 = _1610___mcc_h543;
                if (_source88.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1611___mcc_h547 = _source88.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1612_recursiveGen;
                    bool _1613_recOwned;
                    bool _1614_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1615_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out530;
                    bool _out531;
                    bool _out532;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out533;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out530, out _out531, out _out532, out _out533);
                    _1612_recursiveGen = _out530;
                    _1613_recOwned = _out531;
                    _1614_recErased = _out532;
                    _1615_recIdents = _out533;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1612_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1613_recOwned;
                    isErased = _1614_recErased;
                    readIdents = _1615_recIdents;
                  }
                } else if (_source88.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1616___mcc_h549 = _source88.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1617_recursiveGen;
                    bool _1618_recOwned;
                    bool _1619_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1620_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out534;
                    bool _out535;
                    bool _out536;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out537;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out534, out _out535, out _out536, out _out537);
                    _1617_recursiveGen = _out534;
                    _1618_recOwned = _out535;
                    _1619_recErased = _out536;
                    _1620_recIdents = _out537;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1617_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1618_recOwned;
                    isErased = _1619_recErased;
                    readIdents = _1620_recIdents;
                  }
                } else {
                  DAST._IType _1621___mcc_h551 = _source88.dtor_Newtype_a0;
                  DAST._IType _1622_b = _1621___mcc_h551;
                  {
                    if (object.Equals(_1255_fromTpe, _1622_b)) {
                      Dafny.ISequence<Dafny.Rune> _1623_recursiveGen;
                      bool _1624_recOwned;
                      bool _1625_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1626_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out538;
                      bool _out539;
                      bool _out540;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out541;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out538, out _out539, out _out540, out _out541);
                      _1623_recursiveGen = _out538;
                      _1624_recOwned = _out539;
                      _1625_recErased = _out540;
                      _1626_recIdents = _out541;
                      Dafny.ISequence<Dafny.Rune> _1627_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out542;
                      _out542 = DCOMP.COMP.GenType(_1254_toTpe, true, false);
                      _1627_rhsType = _out542;
                      Dafny.ISequence<Dafny.Rune> _1628_uneraseFn;
                      _1628_uneraseFn = ((_1624_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1627_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1628_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1623_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1624_recOwned;
                      isErased = false;
                      readIdents = _1626_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out543;
                      bool _out544;
                      bool _out545;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out546;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1256_expr, _1255_fromTpe, _1622_b), _1622_b, _1254_toTpe), selfIdent, @params, mustOwn, out _out543, out _out544, out _out545, out _out546);
                      s = _out543;
                      isOwned = _out544;
                      isErased = _out545;
                      readIdents = _out546;
                    }
                  }
                }
              } else if (_source87.is_Nullable) {
                DAST._IType _1629___mcc_h553 = _source87.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1630_recursiveGen;
                  bool _1631_recOwned;
                  bool _1632_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1633_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out547;
                  bool _out548;
                  bool _out549;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out550;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out547, out _out548, out _out549, out _out550);
                  _1630_recursiveGen = _out547;
                  _1631_recOwned = _out548;
                  _1632_recErased = _out549;
                  _1633_recIdents = _out550;
                  if (!(_1631_recOwned)) {
                    _1630_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1630_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1630_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1632_recErased;
                  readIdents = _1633_recIdents;
                }
              } else if (_source87.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1634___mcc_h555 = _source87.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1635_recursiveGen;
                  bool _1636_recOwned;
                  bool _1637_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1638_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out551;
                  bool _out552;
                  bool _out553;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out554;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out551, out _out552, out _out553, out _out554);
                  _1635_recursiveGen = _out551;
                  _1636_recOwned = _out552;
                  _1637_recErased = _out553;
                  _1638_recIdents = _out554;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1635_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1636_recOwned;
                  isErased = _1637_recErased;
                  readIdents = _1638_recIdents;
                }
              } else if (_source87.is_Array) {
                DAST._IType _1639___mcc_h557 = _source87.dtor_element;
                BigInteger _1640___mcc_h558 = _source87.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1641_recursiveGen;
                  bool _1642_recOwned;
                  bool _1643_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1644_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out555;
                  bool _out556;
                  bool _out557;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out558;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out555, out _out556, out _out557, out _out558);
                  _1641_recursiveGen = _out555;
                  _1642_recOwned = _out556;
                  _1643_recErased = _out557;
                  _1644_recIdents = _out558;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1641_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1642_recOwned;
                  isErased = _1643_recErased;
                  readIdents = _1644_recIdents;
                }
              } else if (_source87.is_Seq) {
                DAST._IType _1645___mcc_h561 = _source87.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1646_recursiveGen;
                  bool _1647_recOwned;
                  bool _1648_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1649_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out559;
                  bool _out560;
                  bool _out561;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out562;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out559, out _out560, out _out561, out _out562);
                  _1646_recursiveGen = _out559;
                  _1647_recOwned = _out560;
                  _1648_recErased = _out561;
                  _1649_recIdents = _out562;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1646_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1647_recOwned;
                  isErased = _1648_recErased;
                  readIdents = _1649_recIdents;
                }
              } else if (_source87.is_Set) {
                DAST._IType _1650___mcc_h563 = _source87.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1651_recursiveGen;
                  bool _1652_recOwned;
                  bool _1653_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1654_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out563;
                  bool _out564;
                  bool _out565;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out566;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out563, out _out564, out _out565, out _out566);
                  _1651_recursiveGen = _out563;
                  _1652_recOwned = _out564;
                  _1653_recErased = _out565;
                  _1654_recIdents = _out566;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1651_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1652_recOwned;
                  isErased = _1653_recErased;
                  readIdents = _1654_recIdents;
                }
              } else if (_source87.is_Multiset) {
                DAST._IType _1655___mcc_h565 = _source87.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1656_recursiveGen;
                  bool _1657_recOwned;
                  bool _1658_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1659_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out567;
                  bool _out568;
                  bool _out569;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out570;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out567, out _out568, out _out569, out _out570);
                  _1656_recursiveGen = _out567;
                  _1657_recOwned = _out568;
                  _1658_recErased = _out569;
                  _1659_recIdents = _out570;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1656_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1657_recOwned;
                  isErased = _1658_recErased;
                  readIdents = _1659_recIdents;
                }
              } else if (_source87.is_Map) {
                DAST._IType _1660___mcc_h567 = _source87.dtor_key;
                DAST._IType _1661___mcc_h568 = _source87.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1662_recursiveGen;
                  bool _1663_recOwned;
                  bool _1664_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1665_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out571;
                  bool _out572;
                  bool _out573;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out574;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out571, out _out572, out _out573, out _out574);
                  _1662_recursiveGen = _out571;
                  _1663_recOwned = _out572;
                  _1664_recErased = _out573;
                  _1665_recIdents = _out574;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1662_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1663_recOwned;
                  isErased = _1664_recErased;
                  readIdents = _1665_recIdents;
                }
              } else if (_source87.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1666___mcc_h571 = _source87.dtor_args;
                DAST._IType _1667___mcc_h572 = _source87.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1668_recursiveGen;
                  bool _1669_recOwned;
                  bool _1670_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1671_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out575;
                  bool _out576;
                  bool _out577;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out578;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out575, out _out576, out _out577, out _out578);
                  _1668_recursiveGen = _out575;
                  _1669_recOwned = _out576;
                  _1670_recErased = _out577;
                  _1671_recIdents = _out578;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1668_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1669_recOwned;
                  isErased = _1670_recErased;
                  readIdents = _1671_recIdents;
                }
              } else if (_source87.is_Primitive) {
                DAST._IPrimitive _1672___mcc_h575 = _source87.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1673_recursiveGen;
                  bool _1674_recOwned;
                  bool _1675_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1676_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out579;
                  bool _out580;
                  bool _out581;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out582;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out579, out _out580, out _out581, out _out582);
                  _1673_recursiveGen = _out579;
                  _1674_recOwned = _out580;
                  _1675_recErased = _out581;
                  _1676_recIdents = _out582;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1673_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1674_recOwned;
                  isErased = _1675_recErased;
                  readIdents = _1676_recIdents;
                }
              } else if (_source87.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1677___mcc_h577 = _source87.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1678_recursiveGen;
                  bool _1679_recOwned;
                  bool _1680_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1681_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out583;
                  bool _out584;
                  bool _out585;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out586;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out583, out _out584, out _out585, out _out586);
                  _1678_recursiveGen = _out583;
                  _1679_recOwned = _out584;
                  _1680_recErased = _out585;
                  _1681_recIdents = _out586;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1678_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1679_recOwned;
                  isErased = _1680_recErased;
                  readIdents = _1681_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1682___mcc_h579 = _source87.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1683_recursiveGen;
                  bool _1684_recOwned;
                  bool _1685_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1686_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out587;
                  bool _out588;
                  bool _out589;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out590;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out587, out _out588, out _out589, out _out590);
                  _1683_recursiveGen = _out587;
                  _1684_recOwned = _out588;
                  _1685_recErased = _out589;
                  _1686_recIdents = _out590;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1683_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1684_recOwned;
                  isErased = _1685_recErased;
                  readIdents = _1686_recIdents;
                }
              }
            } else if (_source77.is_Array) {
              DAST._IType _1687___mcc_h581 = _source77.dtor_element;
              BigInteger _1688___mcc_h582 = _source77.dtor_dims;
              DAST._IType _source89 = _1262___mcc_h306;
              if (_source89.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1689___mcc_h589 = _source89.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1690___mcc_h590 = _source89.dtor_typeArgs;
                DAST._IResolvedType _1691___mcc_h591 = _source89.dtor_resolved;
                DAST._IResolvedType _source90 = _1691___mcc_h591;
                if (_source90.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1692___mcc_h595 = _source90.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1693_recursiveGen;
                    bool _1694_recOwned;
                    bool _1695_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1696_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out591;
                    bool _out592;
                    bool _out593;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out594;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out591, out _out592, out _out593, out _out594);
                    _1693_recursiveGen = _out591;
                    _1694_recOwned = _out592;
                    _1695_recErased = _out593;
                    _1696_recIdents = _out594;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1693_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1694_recOwned;
                    isErased = _1695_recErased;
                    readIdents = _1696_recIdents;
                  }
                } else if (_source90.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1697___mcc_h597 = _source90.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1698_recursiveGen;
                    bool _1699_recOwned;
                    bool _1700_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1701_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out595;
                    bool _out596;
                    bool _out597;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out598;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out595, out _out596, out _out597, out _out598);
                    _1698_recursiveGen = _out595;
                    _1699_recOwned = _out596;
                    _1700_recErased = _out597;
                    _1701_recIdents = _out598;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1698_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1699_recOwned;
                    isErased = _1700_recErased;
                    readIdents = _1701_recIdents;
                  }
                } else {
                  DAST._IType _1702___mcc_h599 = _source90.dtor_Newtype_a0;
                  DAST._IType _1703_b = _1702___mcc_h599;
                  {
                    if (object.Equals(_1255_fromTpe, _1703_b)) {
                      Dafny.ISequence<Dafny.Rune> _1704_recursiveGen;
                      bool _1705_recOwned;
                      bool _1706_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1707_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out599;
                      bool _out600;
                      bool _out601;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out602;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out599, out _out600, out _out601, out _out602);
                      _1704_recursiveGen = _out599;
                      _1705_recOwned = _out600;
                      _1706_recErased = _out601;
                      _1707_recIdents = _out602;
                      Dafny.ISequence<Dafny.Rune> _1708_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out603;
                      _out603 = DCOMP.COMP.GenType(_1254_toTpe, true, false);
                      _1708_rhsType = _out603;
                      Dafny.ISequence<Dafny.Rune> _1709_uneraseFn;
                      _1709_uneraseFn = ((_1705_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1708_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1709_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1704_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1705_recOwned;
                      isErased = false;
                      readIdents = _1707_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out604;
                      bool _out605;
                      bool _out606;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out607;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1256_expr, _1255_fromTpe, _1703_b), _1703_b, _1254_toTpe), selfIdent, @params, mustOwn, out _out604, out _out605, out _out606, out _out607);
                      s = _out604;
                      isOwned = _out605;
                      isErased = _out606;
                      readIdents = _out607;
                    }
                  }
                }
              } else if (_source89.is_Nullable) {
                DAST._IType _1710___mcc_h601 = _source89.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1711_recursiveGen;
                  bool _1712_recOwned;
                  bool _1713_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1714_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out608;
                  bool _out609;
                  bool _out610;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out611;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out608, out _out609, out _out610, out _out611);
                  _1711_recursiveGen = _out608;
                  _1712_recOwned = _out609;
                  _1713_recErased = _out610;
                  _1714_recIdents = _out611;
                  if (!(_1712_recOwned)) {
                    _1711_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1711_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1711_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1713_recErased;
                  readIdents = _1714_recIdents;
                }
              } else if (_source89.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1715___mcc_h603 = _source89.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1716_recursiveGen;
                  bool _1717_recOwned;
                  bool _1718_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1719_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out612;
                  bool _out613;
                  bool _out614;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out615;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out612, out _out613, out _out614, out _out615);
                  _1716_recursiveGen = _out612;
                  _1717_recOwned = _out613;
                  _1718_recErased = _out614;
                  _1719_recIdents = _out615;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1716_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1717_recOwned;
                  isErased = _1718_recErased;
                  readIdents = _1719_recIdents;
                }
              } else if (_source89.is_Array) {
                DAST._IType _1720___mcc_h605 = _source89.dtor_element;
                BigInteger _1721___mcc_h606 = _source89.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1722_recursiveGen;
                  bool _1723_recOwned;
                  bool _1724_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1725_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out616;
                  bool _out617;
                  bool _out618;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out619;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out616, out _out617, out _out618, out _out619);
                  _1722_recursiveGen = _out616;
                  _1723_recOwned = _out617;
                  _1724_recErased = _out618;
                  _1725_recIdents = _out619;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1722_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1723_recOwned;
                  isErased = _1724_recErased;
                  readIdents = _1725_recIdents;
                }
              } else if (_source89.is_Seq) {
                DAST._IType _1726___mcc_h609 = _source89.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1727_recursiveGen;
                  bool _1728_recOwned;
                  bool _1729_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1730_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out620;
                  bool _out621;
                  bool _out622;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out623;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out620, out _out621, out _out622, out _out623);
                  _1727_recursiveGen = _out620;
                  _1728_recOwned = _out621;
                  _1729_recErased = _out622;
                  _1730_recIdents = _out623;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1727_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1728_recOwned;
                  isErased = _1729_recErased;
                  readIdents = _1730_recIdents;
                }
              } else if (_source89.is_Set) {
                DAST._IType _1731___mcc_h611 = _source89.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1732_recursiveGen;
                  bool _1733_recOwned;
                  bool _1734_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1735_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out624;
                  bool _out625;
                  bool _out626;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out627;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out624, out _out625, out _out626, out _out627);
                  _1732_recursiveGen = _out624;
                  _1733_recOwned = _out625;
                  _1734_recErased = _out626;
                  _1735_recIdents = _out627;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1732_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1733_recOwned;
                  isErased = _1734_recErased;
                  readIdents = _1735_recIdents;
                }
              } else if (_source89.is_Multiset) {
                DAST._IType _1736___mcc_h613 = _source89.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1737_recursiveGen;
                  bool _1738_recOwned;
                  bool _1739_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1740_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out628;
                  bool _out629;
                  bool _out630;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out631;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out628, out _out629, out _out630, out _out631);
                  _1737_recursiveGen = _out628;
                  _1738_recOwned = _out629;
                  _1739_recErased = _out630;
                  _1740_recIdents = _out631;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1737_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1738_recOwned;
                  isErased = _1739_recErased;
                  readIdents = _1740_recIdents;
                }
              } else if (_source89.is_Map) {
                DAST._IType _1741___mcc_h615 = _source89.dtor_key;
                DAST._IType _1742___mcc_h616 = _source89.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1743_recursiveGen;
                  bool _1744_recOwned;
                  bool _1745_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1746_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out632;
                  bool _out633;
                  bool _out634;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out635;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out632, out _out633, out _out634, out _out635);
                  _1743_recursiveGen = _out632;
                  _1744_recOwned = _out633;
                  _1745_recErased = _out634;
                  _1746_recIdents = _out635;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1743_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1744_recOwned;
                  isErased = _1745_recErased;
                  readIdents = _1746_recIdents;
                }
              } else if (_source89.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1747___mcc_h619 = _source89.dtor_args;
                DAST._IType _1748___mcc_h620 = _source89.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1749_recursiveGen;
                  bool _1750_recOwned;
                  bool _1751_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1752_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out636;
                  bool _out637;
                  bool _out638;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out639;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out636, out _out637, out _out638, out _out639);
                  _1749_recursiveGen = _out636;
                  _1750_recOwned = _out637;
                  _1751_recErased = _out638;
                  _1752_recIdents = _out639;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1749_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1750_recOwned;
                  isErased = _1751_recErased;
                  readIdents = _1752_recIdents;
                }
              } else if (_source89.is_Primitive) {
                DAST._IPrimitive _1753___mcc_h623 = _source89.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1754_recursiveGen;
                  bool _1755_recOwned;
                  bool _1756_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1757_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out640;
                  bool _out641;
                  bool _out642;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out643;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out640, out _out641, out _out642, out _out643);
                  _1754_recursiveGen = _out640;
                  _1755_recOwned = _out641;
                  _1756_recErased = _out642;
                  _1757_recIdents = _out643;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1754_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1755_recOwned;
                  isErased = _1756_recErased;
                  readIdents = _1757_recIdents;
                }
              } else if (_source89.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1758___mcc_h625 = _source89.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1759_recursiveGen;
                  bool _1760_recOwned;
                  bool _1761_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1762_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out644;
                  bool _out645;
                  bool _out646;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out647;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out644, out _out645, out _out646, out _out647);
                  _1759_recursiveGen = _out644;
                  _1760_recOwned = _out645;
                  _1761_recErased = _out646;
                  _1762_recIdents = _out647;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1759_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1760_recOwned;
                  isErased = _1761_recErased;
                  readIdents = _1762_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1763___mcc_h627 = _source89.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1764_recursiveGen;
                  bool _1765_recOwned;
                  bool _1766_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1767_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out648;
                  bool _out649;
                  bool _out650;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out651;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out648, out _out649, out _out650, out _out651);
                  _1764_recursiveGen = _out648;
                  _1765_recOwned = _out649;
                  _1766_recErased = _out650;
                  _1767_recIdents = _out651;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1764_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1765_recOwned;
                  isErased = _1766_recErased;
                  readIdents = _1767_recIdents;
                }
              }
            } else if (_source77.is_Seq) {
              DAST._IType _1768___mcc_h629 = _source77.dtor_element;
              DAST._IType _source91 = _1262___mcc_h306;
              if (_source91.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1769___mcc_h633 = _source91.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1770___mcc_h634 = _source91.dtor_typeArgs;
                DAST._IResolvedType _1771___mcc_h635 = _source91.dtor_resolved;
                DAST._IResolvedType _source92 = _1771___mcc_h635;
                if (_source92.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1772___mcc_h639 = _source92.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1773_recursiveGen;
                    bool _1774_recOwned;
                    bool _1775_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1776_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out652;
                    bool _out653;
                    bool _out654;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out655;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out652, out _out653, out _out654, out _out655);
                    _1773_recursiveGen = _out652;
                    _1774_recOwned = _out653;
                    _1775_recErased = _out654;
                    _1776_recIdents = _out655;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1773_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1774_recOwned;
                    isErased = _1775_recErased;
                    readIdents = _1776_recIdents;
                  }
                } else if (_source92.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1777___mcc_h641 = _source92.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1778_recursiveGen;
                    bool _1779_recOwned;
                    bool _1780_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1781_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out656;
                    bool _out657;
                    bool _out658;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out659;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out656, out _out657, out _out658, out _out659);
                    _1778_recursiveGen = _out656;
                    _1779_recOwned = _out657;
                    _1780_recErased = _out658;
                    _1781_recIdents = _out659;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1778_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1779_recOwned;
                    isErased = _1780_recErased;
                    readIdents = _1781_recIdents;
                  }
                } else {
                  DAST._IType _1782___mcc_h643 = _source92.dtor_Newtype_a0;
                  DAST._IType _1783_b = _1782___mcc_h643;
                  {
                    if (object.Equals(_1255_fromTpe, _1783_b)) {
                      Dafny.ISequence<Dafny.Rune> _1784_recursiveGen;
                      bool _1785_recOwned;
                      bool _1786_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1787_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out660;
                      bool _out661;
                      bool _out662;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out663;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out660, out _out661, out _out662, out _out663);
                      _1784_recursiveGen = _out660;
                      _1785_recOwned = _out661;
                      _1786_recErased = _out662;
                      _1787_recIdents = _out663;
                      Dafny.ISequence<Dafny.Rune> _1788_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out664;
                      _out664 = DCOMP.COMP.GenType(_1254_toTpe, true, false);
                      _1788_rhsType = _out664;
                      Dafny.ISequence<Dafny.Rune> _1789_uneraseFn;
                      _1789_uneraseFn = ((_1785_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1788_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1789_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1784_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1785_recOwned;
                      isErased = false;
                      readIdents = _1787_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out665;
                      bool _out666;
                      bool _out667;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out668;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1256_expr, _1255_fromTpe, _1783_b), _1783_b, _1254_toTpe), selfIdent, @params, mustOwn, out _out665, out _out666, out _out667, out _out668);
                      s = _out665;
                      isOwned = _out666;
                      isErased = _out667;
                      readIdents = _out668;
                    }
                  }
                }
              } else if (_source91.is_Nullable) {
                DAST._IType _1790___mcc_h645 = _source91.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1791_recursiveGen;
                  bool _1792_recOwned;
                  bool _1793_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1794_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out669;
                  bool _out670;
                  bool _out671;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out672;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out669, out _out670, out _out671, out _out672);
                  _1791_recursiveGen = _out669;
                  _1792_recOwned = _out670;
                  _1793_recErased = _out671;
                  _1794_recIdents = _out672;
                  if (!(_1792_recOwned)) {
                    _1791_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1791_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1791_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1793_recErased;
                  readIdents = _1794_recIdents;
                }
              } else if (_source91.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1795___mcc_h647 = _source91.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1796_recursiveGen;
                  bool _1797_recOwned;
                  bool _1798_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1799_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out673;
                  bool _out674;
                  bool _out675;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out676;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out673, out _out674, out _out675, out _out676);
                  _1796_recursiveGen = _out673;
                  _1797_recOwned = _out674;
                  _1798_recErased = _out675;
                  _1799_recIdents = _out676;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1796_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1797_recOwned;
                  isErased = _1798_recErased;
                  readIdents = _1799_recIdents;
                }
              } else if (_source91.is_Array) {
                DAST._IType _1800___mcc_h649 = _source91.dtor_element;
                BigInteger _1801___mcc_h650 = _source91.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1802_recursiveGen;
                  bool _1803_recOwned;
                  bool _1804_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1805_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out677;
                  bool _out678;
                  bool _out679;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out680;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out677, out _out678, out _out679, out _out680);
                  _1802_recursiveGen = _out677;
                  _1803_recOwned = _out678;
                  _1804_recErased = _out679;
                  _1805_recIdents = _out680;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1802_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1803_recOwned;
                  isErased = _1804_recErased;
                  readIdents = _1805_recIdents;
                }
              } else if (_source91.is_Seq) {
                DAST._IType _1806___mcc_h653 = _source91.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1807_recursiveGen;
                  bool _1808_recOwned;
                  bool _1809_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1810_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out681;
                  bool _out682;
                  bool _out683;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out684;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out681, out _out682, out _out683, out _out684);
                  _1807_recursiveGen = _out681;
                  _1808_recOwned = _out682;
                  _1809_recErased = _out683;
                  _1810_recIdents = _out684;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1807_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1808_recOwned;
                  isErased = _1809_recErased;
                  readIdents = _1810_recIdents;
                }
              } else if (_source91.is_Set) {
                DAST._IType _1811___mcc_h655 = _source91.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1812_recursiveGen;
                  bool _1813_recOwned;
                  bool _1814_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1815_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out685;
                  bool _out686;
                  bool _out687;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out688;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out685, out _out686, out _out687, out _out688);
                  _1812_recursiveGen = _out685;
                  _1813_recOwned = _out686;
                  _1814_recErased = _out687;
                  _1815_recIdents = _out688;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1812_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1813_recOwned;
                  isErased = _1814_recErased;
                  readIdents = _1815_recIdents;
                }
              } else if (_source91.is_Multiset) {
                DAST._IType _1816___mcc_h657 = _source91.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1817_recursiveGen;
                  bool _1818_recOwned;
                  bool _1819_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1820_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out689;
                  bool _out690;
                  bool _out691;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out692;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out689, out _out690, out _out691, out _out692);
                  _1817_recursiveGen = _out689;
                  _1818_recOwned = _out690;
                  _1819_recErased = _out691;
                  _1820_recIdents = _out692;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1817_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1818_recOwned;
                  isErased = _1819_recErased;
                  readIdents = _1820_recIdents;
                }
              } else if (_source91.is_Map) {
                DAST._IType _1821___mcc_h659 = _source91.dtor_key;
                DAST._IType _1822___mcc_h660 = _source91.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1823_recursiveGen;
                  bool _1824_recOwned;
                  bool _1825_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1826_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out693;
                  bool _out694;
                  bool _out695;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out696;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out693, out _out694, out _out695, out _out696);
                  _1823_recursiveGen = _out693;
                  _1824_recOwned = _out694;
                  _1825_recErased = _out695;
                  _1826_recIdents = _out696;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1823_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1824_recOwned;
                  isErased = _1825_recErased;
                  readIdents = _1826_recIdents;
                }
              } else if (_source91.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1827___mcc_h663 = _source91.dtor_args;
                DAST._IType _1828___mcc_h664 = _source91.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1829_recursiveGen;
                  bool _1830_recOwned;
                  bool _1831_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1832_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out697;
                  bool _out698;
                  bool _out699;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out700;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out697, out _out698, out _out699, out _out700);
                  _1829_recursiveGen = _out697;
                  _1830_recOwned = _out698;
                  _1831_recErased = _out699;
                  _1832_recIdents = _out700;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1829_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1830_recOwned;
                  isErased = _1831_recErased;
                  readIdents = _1832_recIdents;
                }
              } else if (_source91.is_Primitive) {
                DAST._IPrimitive _1833___mcc_h667 = _source91.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1834_recursiveGen;
                  bool _1835_recOwned;
                  bool _1836_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1837_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out701;
                  bool _out702;
                  bool _out703;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out704;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out701, out _out702, out _out703, out _out704);
                  _1834_recursiveGen = _out701;
                  _1835_recOwned = _out702;
                  _1836_recErased = _out703;
                  _1837_recIdents = _out704;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1834_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1835_recOwned;
                  isErased = _1836_recErased;
                  readIdents = _1837_recIdents;
                }
              } else if (_source91.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1838___mcc_h669 = _source91.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1839_recursiveGen;
                  bool _1840_recOwned;
                  bool _1841_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1842_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out705;
                  bool _out706;
                  bool _out707;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out708;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out705, out _out706, out _out707, out _out708);
                  _1839_recursiveGen = _out705;
                  _1840_recOwned = _out706;
                  _1841_recErased = _out707;
                  _1842_recIdents = _out708;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1839_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1840_recOwned;
                  isErased = _1841_recErased;
                  readIdents = _1842_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1843___mcc_h671 = _source91.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1844_recursiveGen;
                  bool _1845_recOwned;
                  bool _1846_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1847_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out709;
                  bool _out710;
                  bool _out711;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out712;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out709, out _out710, out _out711, out _out712);
                  _1844_recursiveGen = _out709;
                  _1845_recOwned = _out710;
                  _1846_recErased = _out711;
                  _1847_recIdents = _out712;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1844_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1845_recOwned;
                  isErased = _1846_recErased;
                  readIdents = _1847_recIdents;
                }
              }
            } else if (_source77.is_Set) {
              DAST._IType _1848___mcc_h673 = _source77.dtor_element;
              DAST._IType _source93 = _1262___mcc_h306;
              if (_source93.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1849___mcc_h677 = _source93.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1850___mcc_h678 = _source93.dtor_typeArgs;
                DAST._IResolvedType _1851___mcc_h679 = _source93.dtor_resolved;
                DAST._IResolvedType _source94 = _1851___mcc_h679;
                if (_source94.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1852___mcc_h683 = _source94.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1853_recursiveGen;
                    bool _1854_recOwned;
                    bool _1855_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1856_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out713;
                    bool _out714;
                    bool _out715;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out716;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out713, out _out714, out _out715, out _out716);
                    _1853_recursiveGen = _out713;
                    _1854_recOwned = _out714;
                    _1855_recErased = _out715;
                    _1856_recIdents = _out716;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1853_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1854_recOwned;
                    isErased = _1855_recErased;
                    readIdents = _1856_recIdents;
                  }
                } else if (_source94.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1857___mcc_h685 = _source94.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1858_recursiveGen;
                    bool _1859_recOwned;
                    bool _1860_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1861_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out717;
                    bool _out718;
                    bool _out719;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out720;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out717, out _out718, out _out719, out _out720);
                    _1858_recursiveGen = _out717;
                    _1859_recOwned = _out718;
                    _1860_recErased = _out719;
                    _1861_recIdents = _out720;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1858_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1859_recOwned;
                    isErased = _1860_recErased;
                    readIdents = _1861_recIdents;
                  }
                } else {
                  DAST._IType _1862___mcc_h687 = _source94.dtor_Newtype_a0;
                  DAST._IType _1863_b = _1862___mcc_h687;
                  {
                    if (object.Equals(_1255_fromTpe, _1863_b)) {
                      Dafny.ISequence<Dafny.Rune> _1864_recursiveGen;
                      bool _1865_recOwned;
                      bool _1866_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1867_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out721;
                      bool _out722;
                      bool _out723;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out724;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out721, out _out722, out _out723, out _out724);
                      _1864_recursiveGen = _out721;
                      _1865_recOwned = _out722;
                      _1866_recErased = _out723;
                      _1867_recIdents = _out724;
                      Dafny.ISequence<Dafny.Rune> _1868_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out725;
                      _out725 = DCOMP.COMP.GenType(_1254_toTpe, true, false);
                      _1868_rhsType = _out725;
                      Dafny.ISequence<Dafny.Rune> _1869_uneraseFn;
                      _1869_uneraseFn = ((_1865_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1868_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1869_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1864_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1865_recOwned;
                      isErased = false;
                      readIdents = _1867_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out726;
                      bool _out727;
                      bool _out728;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out729;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1256_expr, _1255_fromTpe, _1863_b), _1863_b, _1254_toTpe), selfIdent, @params, mustOwn, out _out726, out _out727, out _out728, out _out729);
                      s = _out726;
                      isOwned = _out727;
                      isErased = _out728;
                      readIdents = _out729;
                    }
                  }
                }
              } else if (_source93.is_Nullable) {
                DAST._IType _1870___mcc_h689 = _source93.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1871_recursiveGen;
                  bool _1872_recOwned;
                  bool _1873_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1874_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out730;
                  bool _out731;
                  bool _out732;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out733;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out730, out _out731, out _out732, out _out733);
                  _1871_recursiveGen = _out730;
                  _1872_recOwned = _out731;
                  _1873_recErased = _out732;
                  _1874_recIdents = _out733;
                  if (!(_1872_recOwned)) {
                    _1871_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1871_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1871_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1873_recErased;
                  readIdents = _1874_recIdents;
                }
              } else if (_source93.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1875___mcc_h691 = _source93.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1876_recursiveGen;
                  bool _1877_recOwned;
                  bool _1878_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1879_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out734;
                  bool _out735;
                  bool _out736;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out737;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out734, out _out735, out _out736, out _out737);
                  _1876_recursiveGen = _out734;
                  _1877_recOwned = _out735;
                  _1878_recErased = _out736;
                  _1879_recIdents = _out737;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1876_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1877_recOwned;
                  isErased = _1878_recErased;
                  readIdents = _1879_recIdents;
                }
              } else if (_source93.is_Array) {
                DAST._IType _1880___mcc_h693 = _source93.dtor_element;
                BigInteger _1881___mcc_h694 = _source93.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1882_recursiveGen;
                  bool _1883_recOwned;
                  bool _1884_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1885_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out738;
                  bool _out739;
                  bool _out740;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out741;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out738, out _out739, out _out740, out _out741);
                  _1882_recursiveGen = _out738;
                  _1883_recOwned = _out739;
                  _1884_recErased = _out740;
                  _1885_recIdents = _out741;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1882_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1883_recOwned;
                  isErased = _1884_recErased;
                  readIdents = _1885_recIdents;
                }
              } else if (_source93.is_Seq) {
                DAST._IType _1886___mcc_h697 = _source93.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1887_recursiveGen;
                  bool _1888_recOwned;
                  bool _1889_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1890_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out742;
                  bool _out743;
                  bool _out744;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out745;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out742, out _out743, out _out744, out _out745);
                  _1887_recursiveGen = _out742;
                  _1888_recOwned = _out743;
                  _1889_recErased = _out744;
                  _1890_recIdents = _out745;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1887_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1888_recOwned;
                  isErased = _1889_recErased;
                  readIdents = _1890_recIdents;
                }
              } else if (_source93.is_Set) {
                DAST._IType _1891___mcc_h699 = _source93.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1892_recursiveGen;
                  bool _1893_recOwned;
                  bool _1894_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1895_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out746;
                  bool _out747;
                  bool _out748;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out749;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out746, out _out747, out _out748, out _out749);
                  _1892_recursiveGen = _out746;
                  _1893_recOwned = _out747;
                  _1894_recErased = _out748;
                  _1895_recIdents = _out749;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1892_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1893_recOwned;
                  isErased = _1894_recErased;
                  readIdents = _1895_recIdents;
                }
              } else if (_source93.is_Multiset) {
                DAST._IType _1896___mcc_h701 = _source93.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1897_recursiveGen;
                  bool _1898_recOwned;
                  bool _1899_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1900_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out750;
                  bool _out751;
                  bool _out752;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out753;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out750, out _out751, out _out752, out _out753);
                  _1897_recursiveGen = _out750;
                  _1898_recOwned = _out751;
                  _1899_recErased = _out752;
                  _1900_recIdents = _out753;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1897_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1898_recOwned;
                  isErased = _1899_recErased;
                  readIdents = _1900_recIdents;
                }
              } else if (_source93.is_Map) {
                DAST._IType _1901___mcc_h703 = _source93.dtor_key;
                DAST._IType _1902___mcc_h704 = _source93.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1903_recursiveGen;
                  bool _1904_recOwned;
                  bool _1905_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1906_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out754;
                  bool _out755;
                  bool _out756;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out757;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out754, out _out755, out _out756, out _out757);
                  _1903_recursiveGen = _out754;
                  _1904_recOwned = _out755;
                  _1905_recErased = _out756;
                  _1906_recIdents = _out757;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1903_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1904_recOwned;
                  isErased = _1905_recErased;
                  readIdents = _1906_recIdents;
                }
              } else if (_source93.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1907___mcc_h707 = _source93.dtor_args;
                DAST._IType _1908___mcc_h708 = _source93.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1909_recursiveGen;
                  bool _1910_recOwned;
                  bool _1911_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1912_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out758;
                  bool _out759;
                  bool _out760;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out761;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out758, out _out759, out _out760, out _out761);
                  _1909_recursiveGen = _out758;
                  _1910_recOwned = _out759;
                  _1911_recErased = _out760;
                  _1912_recIdents = _out761;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1909_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1910_recOwned;
                  isErased = _1911_recErased;
                  readIdents = _1912_recIdents;
                }
              } else if (_source93.is_Primitive) {
                DAST._IPrimitive _1913___mcc_h711 = _source93.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1914_recursiveGen;
                  bool _1915_recOwned;
                  bool _1916_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1917_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out762;
                  bool _out763;
                  bool _out764;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out765;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out762, out _out763, out _out764, out _out765);
                  _1914_recursiveGen = _out762;
                  _1915_recOwned = _out763;
                  _1916_recErased = _out764;
                  _1917_recIdents = _out765;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1914_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1915_recOwned;
                  isErased = _1916_recErased;
                  readIdents = _1917_recIdents;
                }
              } else if (_source93.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1918___mcc_h713 = _source93.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1919_recursiveGen;
                  bool _1920_recOwned;
                  bool _1921_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1922_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out766;
                  bool _out767;
                  bool _out768;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out769;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out766, out _out767, out _out768, out _out769);
                  _1919_recursiveGen = _out766;
                  _1920_recOwned = _out767;
                  _1921_recErased = _out768;
                  _1922_recIdents = _out769;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1919_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1920_recOwned;
                  isErased = _1921_recErased;
                  readIdents = _1922_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1923___mcc_h715 = _source93.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1924_recursiveGen;
                  bool _1925_recOwned;
                  bool _1926_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1927_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out770;
                  bool _out771;
                  bool _out772;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out773;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out770, out _out771, out _out772, out _out773);
                  _1924_recursiveGen = _out770;
                  _1925_recOwned = _out771;
                  _1926_recErased = _out772;
                  _1927_recIdents = _out773;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1924_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1925_recOwned;
                  isErased = _1926_recErased;
                  readIdents = _1927_recIdents;
                }
              }
            } else if (_source77.is_Multiset) {
              DAST._IType _1928___mcc_h717 = _source77.dtor_element;
              DAST._IType _source95 = _1262___mcc_h306;
              if (_source95.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1929___mcc_h721 = _source95.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1930___mcc_h722 = _source95.dtor_typeArgs;
                DAST._IResolvedType _1931___mcc_h723 = _source95.dtor_resolved;
                DAST._IResolvedType _source96 = _1931___mcc_h723;
                if (_source96.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1932___mcc_h727 = _source96.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1933_recursiveGen;
                    bool _1934_recOwned;
                    bool _1935_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1936_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out774;
                    bool _out775;
                    bool _out776;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out777;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out774, out _out775, out _out776, out _out777);
                    _1933_recursiveGen = _out774;
                    _1934_recOwned = _out775;
                    _1935_recErased = _out776;
                    _1936_recIdents = _out777;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1933_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1934_recOwned;
                    isErased = _1935_recErased;
                    readIdents = _1936_recIdents;
                  }
                } else if (_source96.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1937___mcc_h729 = _source96.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1938_recursiveGen;
                    bool _1939_recOwned;
                    bool _1940_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1941_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out778;
                    bool _out779;
                    bool _out780;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out781;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out778, out _out779, out _out780, out _out781);
                    _1938_recursiveGen = _out778;
                    _1939_recOwned = _out779;
                    _1940_recErased = _out780;
                    _1941_recIdents = _out781;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1938_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1939_recOwned;
                    isErased = _1940_recErased;
                    readIdents = _1941_recIdents;
                  }
                } else {
                  DAST._IType _1942___mcc_h731 = _source96.dtor_Newtype_a0;
                  DAST._IType _1943_b = _1942___mcc_h731;
                  {
                    if (object.Equals(_1255_fromTpe, _1943_b)) {
                      Dafny.ISequence<Dafny.Rune> _1944_recursiveGen;
                      bool _1945_recOwned;
                      bool _1946_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1947_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out782;
                      bool _out783;
                      bool _out784;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out785;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out782, out _out783, out _out784, out _out785);
                      _1944_recursiveGen = _out782;
                      _1945_recOwned = _out783;
                      _1946_recErased = _out784;
                      _1947_recIdents = _out785;
                      Dafny.ISequence<Dafny.Rune> _1948_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out786;
                      _out786 = DCOMP.COMP.GenType(_1254_toTpe, true, false);
                      _1948_rhsType = _out786;
                      Dafny.ISequence<Dafny.Rune> _1949_uneraseFn;
                      _1949_uneraseFn = ((_1945_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1948_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1949_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1944_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1945_recOwned;
                      isErased = false;
                      readIdents = _1947_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out787;
                      bool _out788;
                      bool _out789;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out790;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1256_expr, _1255_fromTpe, _1943_b), _1943_b, _1254_toTpe), selfIdent, @params, mustOwn, out _out787, out _out788, out _out789, out _out790);
                      s = _out787;
                      isOwned = _out788;
                      isErased = _out789;
                      readIdents = _out790;
                    }
                  }
                }
              } else if (_source95.is_Nullable) {
                DAST._IType _1950___mcc_h733 = _source95.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1951_recursiveGen;
                  bool _1952_recOwned;
                  bool _1953_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1954_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out791;
                  bool _out792;
                  bool _out793;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out794;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out791, out _out792, out _out793, out _out794);
                  _1951_recursiveGen = _out791;
                  _1952_recOwned = _out792;
                  _1953_recErased = _out793;
                  _1954_recIdents = _out794;
                  if (!(_1952_recOwned)) {
                    _1951_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1951_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1951_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1953_recErased;
                  readIdents = _1954_recIdents;
                }
              } else if (_source95.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1955___mcc_h735 = _source95.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1956_recursiveGen;
                  bool _1957_recOwned;
                  bool _1958_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1959_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out795;
                  bool _out796;
                  bool _out797;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out798;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out795, out _out796, out _out797, out _out798);
                  _1956_recursiveGen = _out795;
                  _1957_recOwned = _out796;
                  _1958_recErased = _out797;
                  _1959_recIdents = _out798;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1956_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1957_recOwned;
                  isErased = _1958_recErased;
                  readIdents = _1959_recIdents;
                }
              } else if (_source95.is_Array) {
                DAST._IType _1960___mcc_h737 = _source95.dtor_element;
                BigInteger _1961___mcc_h738 = _source95.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1962_recursiveGen;
                  bool _1963_recOwned;
                  bool _1964_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1965_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out799;
                  bool _out800;
                  bool _out801;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out802;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out799, out _out800, out _out801, out _out802);
                  _1962_recursiveGen = _out799;
                  _1963_recOwned = _out800;
                  _1964_recErased = _out801;
                  _1965_recIdents = _out802;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1962_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1963_recOwned;
                  isErased = _1964_recErased;
                  readIdents = _1965_recIdents;
                }
              } else if (_source95.is_Seq) {
                DAST._IType _1966___mcc_h741 = _source95.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1967_recursiveGen;
                  bool _1968_recOwned;
                  bool _1969_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1970_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out803;
                  bool _out804;
                  bool _out805;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out806;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out803, out _out804, out _out805, out _out806);
                  _1967_recursiveGen = _out803;
                  _1968_recOwned = _out804;
                  _1969_recErased = _out805;
                  _1970_recIdents = _out806;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1967_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1968_recOwned;
                  isErased = _1969_recErased;
                  readIdents = _1970_recIdents;
                }
              } else if (_source95.is_Set) {
                DAST._IType _1971___mcc_h743 = _source95.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1972_recursiveGen;
                  bool _1973_recOwned;
                  bool _1974_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1975_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out807;
                  bool _out808;
                  bool _out809;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out810;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out807, out _out808, out _out809, out _out810);
                  _1972_recursiveGen = _out807;
                  _1973_recOwned = _out808;
                  _1974_recErased = _out809;
                  _1975_recIdents = _out810;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1972_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1973_recOwned;
                  isErased = _1974_recErased;
                  readIdents = _1975_recIdents;
                }
              } else if (_source95.is_Multiset) {
                DAST._IType _1976___mcc_h745 = _source95.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1977_recursiveGen;
                  bool _1978_recOwned;
                  bool _1979_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1980_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out811;
                  bool _out812;
                  bool _out813;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out814;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out811, out _out812, out _out813, out _out814);
                  _1977_recursiveGen = _out811;
                  _1978_recOwned = _out812;
                  _1979_recErased = _out813;
                  _1980_recIdents = _out814;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1977_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1978_recOwned;
                  isErased = _1979_recErased;
                  readIdents = _1980_recIdents;
                }
              } else if (_source95.is_Map) {
                DAST._IType _1981___mcc_h747 = _source95.dtor_key;
                DAST._IType _1982___mcc_h748 = _source95.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1983_recursiveGen;
                  bool _1984_recOwned;
                  bool _1985_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1986_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out815;
                  bool _out816;
                  bool _out817;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out818;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out815, out _out816, out _out817, out _out818);
                  _1983_recursiveGen = _out815;
                  _1984_recOwned = _out816;
                  _1985_recErased = _out817;
                  _1986_recIdents = _out818;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1983_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1984_recOwned;
                  isErased = _1985_recErased;
                  readIdents = _1986_recIdents;
                }
              } else if (_source95.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1987___mcc_h751 = _source95.dtor_args;
                DAST._IType _1988___mcc_h752 = _source95.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1989_recursiveGen;
                  bool _1990_recOwned;
                  bool _1991_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1992_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out819;
                  bool _out820;
                  bool _out821;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out822;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out819, out _out820, out _out821, out _out822);
                  _1989_recursiveGen = _out819;
                  _1990_recOwned = _out820;
                  _1991_recErased = _out821;
                  _1992_recIdents = _out822;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1989_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1990_recOwned;
                  isErased = _1991_recErased;
                  readIdents = _1992_recIdents;
                }
              } else if (_source95.is_Primitive) {
                DAST._IPrimitive _1993___mcc_h755 = _source95.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1994_recursiveGen;
                  bool _1995_recOwned;
                  bool _1996_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1997_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out823;
                  bool _out824;
                  bool _out825;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out826;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out823, out _out824, out _out825, out _out826);
                  _1994_recursiveGen = _out823;
                  _1995_recOwned = _out824;
                  _1996_recErased = _out825;
                  _1997_recIdents = _out826;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1994_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1995_recOwned;
                  isErased = _1996_recErased;
                  readIdents = _1997_recIdents;
                }
              } else if (_source95.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1998___mcc_h757 = _source95.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1999_recursiveGen;
                  bool _2000_recOwned;
                  bool _2001_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2002_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out827;
                  bool _out828;
                  bool _out829;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out830;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out827, out _out828, out _out829, out _out830);
                  _1999_recursiveGen = _out827;
                  _2000_recOwned = _out828;
                  _2001_recErased = _out829;
                  _2002_recIdents = _out830;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1999_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2000_recOwned;
                  isErased = _2001_recErased;
                  readIdents = _2002_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2003___mcc_h759 = _source95.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2004_recursiveGen;
                  bool _2005_recOwned;
                  bool _2006_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2007_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out831;
                  bool _out832;
                  bool _out833;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out834;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out831, out _out832, out _out833, out _out834);
                  _2004_recursiveGen = _out831;
                  _2005_recOwned = _out832;
                  _2006_recErased = _out833;
                  _2007_recIdents = _out834;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2004_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2005_recOwned;
                  isErased = _2006_recErased;
                  readIdents = _2007_recIdents;
                }
              }
            } else if (_source77.is_Map) {
              DAST._IType _2008___mcc_h761 = _source77.dtor_key;
              DAST._IType _2009___mcc_h762 = _source77.dtor_value;
              DAST._IType _source97 = _1262___mcc_h306;
              if (_source97.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2010___mcc_h769 = _source97.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2011___mcc_h770 = _source97.dtor_typeArgs;
                DAST._IResolvedType _2012___mcc_h771 = _source97.dtor_resolved;
                DAST._IResolvedType _source98 = _2012___mcc_h771;
                if (_source98.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2013___mcc_h775 = _source98.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2014_recursiveGen;
                    bool _2015_recOwned;
                    bool _2016_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2017_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out835;
                    bool _out836;
                    bool _out837;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out838;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out835, out _out836, out _out837, out _out838);
                    _2014_recursiveGen = _out835;
                    _2015_recOwned = _out836;
                    _2016_recErased = _out837;
                    _2017_recIdents = _out838;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2014_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2015_recOwned;
                    isErased = _2016_recErased;
                    readIdents = _2017_recIdents;
                  }
                } else if (_source98.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2018___mcc_h777 = _source98.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2019_recursiveGen;
                    bool _2020_recOwned;
                    bool _2021_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2022_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out839;
                    bool _out840;
                    bool _out841;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out842;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out839, out _out840, out _out841, out _out842);
                    _2019_recursiveGen = _out839;
                    _2020_recOwned = _out840;
                    _2021_recErased = _out841;
                    _2022_recIdents = _out842;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2019_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2020_recOwned;
                    isErased = _2021_recErased;
                    readIdents = _2022_recIdents;
                  }
                } else {
                  DAST._IType _2023___mcc_h779 = _source98.dtor_Newtype_a0;
                  DAST._IType _2024_b = _2023___mcc_h779;
                  {
                    if (object.Equals(_1255_fromTpe, _2024_b)) {
                      Dafny.ISequence<Dafny.Rune> _2025_recursiveGen;
                      bool _2026_recOwned;
                      bool _2027_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2028_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out843;
                      bool _out844;
                      bool _out845;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out846;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out843, out _out844, out _out845, out _out846);
                      _2025_recursiveGen = _out843;
                      _2026_recOwned = _out844;
                      _2027_recErased = _out845;
                      _2028_recIdents = _out846;
                      Dafny.ISequence<Dafny.Rune> _2029_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out847;
                      _out847 = DCOMP.COMP.GenType(_1254_toTpe, true, false);
                      _2029_rhsType = _out847;
                      Dafny.ISequence<Dafny.Rune> _2030_uneraseFn;
                      _2030_uneraseFn = ((_2026_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2029_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2030_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2025_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2026_recOwned;
                      isErased = false;
                      readIdents = _2028_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out848;
                      bool _out849;
                      bool _out850;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out851;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1256_expr, _1255_fromTpe, _2024_b), _2024_b, _1254_toTpe), selfIdent, @params, mustOwn, out _out848, out _out849, out _out850, out _out851);
                      s = _out848;
                      isOwned = _out849;
                      isErased = _out850;
                      readIdents = _out851;
                    }
                  }
                }
              } else if (_source97.is_Nullable) {
                DAST._IType _2031___mcc_h781 = _source97.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2032_recursiveGen;
                  bool _2033_recOwned;
                  bool _2034_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2035_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out852;
                  bool _out853;
                  bool _out854;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out855;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out852, out _out853, out _out854, out _out855);
                  _2032_recursiveGen = _out852;
                  _2033_recOwned = _out853;
                  _2034_recErased = _out854;
                  _2035_recIdents = _out855;
                  if (!(_2033_recOwned)) {
                    _2032_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2032_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2032_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2034_recErased;
                  readIdents = _2035_recIdents;
                }
              } else if (_source97.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2036___mcc_h783 = _source97.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2037_recursiveGen;
                  bool _2038_recOwned;
                  bool _2039_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2040_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out856;
                  bool _out857;
                  bool _out858;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out859;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out856, out _out857, out _out858, out _out859);
                  _2037_recursiveGen = _out856;
                  _2038_recOwned = _out857;
                  _2039_recErased = _out858;
                  _2040_recIdents = _out859;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2037_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2038_recOwned;
                  isErased = _2039_recErased;
                  readIdents = _2040_recIdents;
                }
              } else if (_source97.is_Array) {
                DAST._IType _2041___mcc_h785 = _source97.dtor_element;
                BigInteger _2042___mcc_h786 = _source97.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2043_recursiveGen;
                  bool _2044_recOwned;
                  bool _2045_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2046_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out860;
                  bool _out861;
                  bool _out862;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out863;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out860, out _out861, out _out862, out _out863);
                  _2043_recursiveGen = _out860;
                  _2044_recOwned = _out861;
                  _2045_recErased = _out862;
                  _2046_recIdents = _out863;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2043_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2044_recOwned;
                  isErased = _2045_recErased;
                  readIdents = _2046_recIdents;
                }
              } else if (_source97.is_Seq) {
                DAST._IType _2047___mcc_h789 = _source97.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2048_recursiveGen;
                  bool _2049_recOwned;
                  bool _2050_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2051_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out864;
                  bool _out865;
                  bool _out866;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out867;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out864, out _out865, out _out866, out _out867);
                  _2048_recursiveGen = _out864;
                  _2049_recOwned = _out865;
                  _2050_recErased = _out866;
                  _2051_recIdents = _out867;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2048_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2049_recOwned;
                  isErased = _2050_recErased;
                  readIdents = _2051_recIdents;
                }
              } else if (_source97.is_Set) {
                DAST._IType _2052___mcc_h791 = _source97.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2053_recursiveGen;
                  bool _2054_recOwned;
                  bool _2055_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2056_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out868;
                  bool _out869;
                  bool _out870;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out871;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out868, out _out869, out _out870, out _out871);
                  _2053_recursiveGen = _out868;
                  _2054_recOwned = _out869;
                  _2055_recErased = _out870;
                  _2056_recIdents = _out871;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2053_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2054_recOwned;
                  isErased = _2055_recErased;
                  readIdents = _2056_recIdents;
                }
              } else if (_source97.is_Multiset) {
                DAST._IType _2057___mcc_h793 = _source97.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2058_recursiveGen;
                  bool _2059_recOwned;
                  bool _2060_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2061_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out872;
                  bool _out873;
                  bool _out874;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out875;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out872, out _out873, out _out874, out _out875);
                  _2058_recursiveGen = _out872;
                  _2059_recOwned = _out873;
                  _2060_recErased = _out874;
                  _2061_recIdents = _out875;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2058_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2059_recOwned;
                  isErased = _2060_recErased;
                  readIdents = _2061_recIdents;
                }
              } else if (_source97.is_Map) {
                DAST._IType _2062___mcc_h795 = _source97.dtor_key;
                DAST._IType _2063___mcc_h796 = _source97.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2064_recursiveGen;
                  bool _2065_recOwned;
                  bool _2066_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2067_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out876;
                  bool _out877;
                  bool _out878;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out879;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out876, out _out877, out _out878, out _out879);
                  _2064_recursiveGen = _out876;
                  _2065_recOwned = _out877;
                  _2066_recErased = _out878;
                  _2067_recIdents = _out879;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2064_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2065_recOwned;
                  isErased = _2066_recErased;
                  readIdents = _2067_recIdents;
                }
              } else if (_source97.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2068___mcc_h799 = _source97.dtor_args;
                DAST._IType _2069___mcc_h800 = _source97.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2070_recursiveGen;
                  bool _2071_recOwned;
                  bool _2072_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2073_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out880;
                  bool _out881;
                  bool _out882;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out883;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out880, out _out881, out _out882, out _out883);
                  _2070_recursiveGen = _out880;
                  _2071_recOwned = _out881;
                  _2072_recErased = _out882;
                  _2073_recIdents = _out883;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2070_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2071_recOwned;
                  isErased = _2072_recErased;
                  readIdents = _2073_recIdents;
                }
              } else if (_source97.is_Primitive) {
                DAST._IPrimitive _2074___mcc_h803 = _source97.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2075_recursiveGen;
                  bool _2076_recOwned;
                  bool _2077_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2078_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out884;
                  bool _out885;
                  bool _out886;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out887;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out884, out _out885, out _out886, out _out887);
                  _2075_recursiveGen = _out884;
                  _2076_recOwned = _out885;
                  _2077_recErased = _out886;
                  _2078_recIdents = _out887;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2075_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2076_recOwned;
                  isErased = _2077_recErased;
                  readIdents = _2078_recIdents;
                }
              } else if (_source97.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2079___mcc_h805 = _source97.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2080_recursiveGen;
                  bool _2081_recOwned;
                  bool _2082_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2083_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out888;
                  bool _out889;
                  bool _out890;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out891;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out888, out _out889, out _out890, out _out891);
                  _2080_recursiveGen = _out888;
                  _2081_recOwned = _out889;
                  _2082_recErased = _out890;
                  _2083_recIdents = _out891;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2080_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2081_recOwned;
                  isErased = _2082_recErased;
                  readIdents = _2083_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2084___mcc_h807 = _source97.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2085_recursiveGen;
                  bool _2086_recOwned;
                  bool _2087_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2088_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out892;
                  bool _out893;
                  bool _out894;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out895;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out892, out _out893, out _out894, out _out895);
                  _2085_recursiveGen = _out892;
                  _2086_recOwned = _out893;
                  _2087_recErased = _out894;
                  _2088_recIdents = _out895;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2085_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2086_recOwned;
                  isErased = _2087_recErased;
                  readIdents = _2088_recIdents;
                }
              }
            } else if (_source77.is_Arrow) {
              Dafny.ISequence<DAST._IType> _2089___mcc_h809 = _source77.dtor_args;
              DAST._IType _2090___mcc_h810 = _source77.dtor_result;
              DAST._IType _source99 = _1262___mcc_h306;
              if (_source99.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2091___mcc_h817 = _source99.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2092___mcc_h818 = _source99.dtor_typeArgs;
                DAST._IResolvedType _2093___mcc_h819 = _source99.dtor_resolved;
                DAST._IResolvedType _source100 = _2093___mcc_h819;
                if (_source100.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2094___mcc_h823 = _source100.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2095_recursiveGen;
                    bool _2096_recOwned;
                    bool _2097_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2098_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out896;
                    bool _out897;
                    bool _out898;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out899;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out896, out _out897, out _out898, out _out899);
                    _2095_recursiveGen = _out896;
                    _2096_recOwned = _out897;
                    _2097_recErased = _out898;
                    _2098_recIdents = _out899;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2095_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2096_recOwned;
                    isErased = _2097_recErased;
                    readIdents = _2098_recIdents;
                  }
                } else if (_source100.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2099___mcc_h825 = _source100.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2100_recursiveGen;
                    bool _2101_recOwned;
                    bool _2102_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2103_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out900;
                    bool _out901;
                    bool _out902;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out903;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out900, out _out901, out _out902, out _out903);
                    _2100_recursiveGen = _out900;
                    _2101_recOwned = _out901;
                    _2102_recErased = _out902;
                    _2103_recIdents = _out903;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2100_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2101_recOwned;
                    isErased = _2102_recErased;
                    readIdents = _2103_recIdents;
                  }
                } else {
                  DAST._IType _2104___mcc_h827 = _source100.dtor_Newtype_a0;
                  DAST._IType _2105_b = _2104___mcc_h827;
                  {
                    if (object.Equals(_1255_fromTpe, _2105_b)) {
                      Dafny.ISequence<Dafny.Rune> _2106_recursiveGen;
                      bool _2107_recOwned;
                      bool _2108_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2109_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out904;
                      bool _out905;
                      bool _out906;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out907;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out904, out _out905, out _out906, out _out907);
                      _2106_recursiveGen = _out904;
                      _2107_recOwned = _out905;
                      _2108_recErased = _out906;
                      _2109_recIdents = _out907;
                      Dafny.ISequence<Dafny.Rune> _2110_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out908;
                      _out908 = DCOMP.COMP.GenType(_1254_toTpe, true, false);
                      _2110_rhsType = _out908;
                      Dafny.ISequence<Dafny.Rune> _2111_uneraseFn;
                      _2111_uneraseFn = ((_2107_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2110_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2111_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2106_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2107_recOwned;
                      isErased = false;
                      readIdents = _2109_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out909;
                      bool _out910;
                      bool _out911;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out912;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1256_expr, _1255_fromTpe, _2105_b), _2105_b, _1254_toTpe), selfIdent, @params, mustOwn, out _out909, out _out910, out _out911, out _out912);
                      s = _out909;
                      isOwned = _out910;
                      isErased = _out911;
                      readIdents = _out912;
                    }
                  }
                }
              } else if (_source99.is_Nullable) {
                DAST._IType _2112___mcc_h829 = _source99.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2113_recursiveGen;
                  bool _2114_recOwned;
                  bool _2115_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2116_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out913;
                  bool _out914;
                  bool _out915;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out916;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out913, out _out914, out _out915, out _out916);
                  _2113_recursiveGen = _out913;
                  _2114_recOwned = _out914;
                  _2115_recErased = _out915;
                  _2116_recIdents = _out916;
                  if (!(_2114_recOwned)) {
                    _2113_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2113_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2113_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2115_recErased;
                  readIdents = _2116_recIdents;
                }
              } else if (_source99.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2117___mcc_h831 = _source99.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2118_recursiveGen;
                  bool _2119_recOwned;
                  bool _2120_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2121_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out917;
                  bool _out918;
                  bool _out919;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out920;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out917, out _out918, out _out919, out _out920);
                  _2118_recursiveGen = _out917;
                  _2119_recOwned = _out918;
                  _2120_recErased = _out919;
                  _2121_recIdents = _out920;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2118_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2119_recOwned;
                  isErased = _2120_recErased;
                  readIdents = _2121_recIdents;
                }
              } else if (_source99.is_Array) {
                DAST._IType _2122___mcc_h833 = _source99.dtor_element;
                BigInteger _2123___mcc_h834 = _source99.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2124_recursiveGen;
                  bool _2125_recOwned;
                  bool _2126_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2127_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out921;
                  bool _out922;
                  bool _out923;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out924;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out921, out _out922, out _out923, out _out924);
                  _2124_recursiveGen = _out921;
                  _2125_recOwned = _out922;
                  _2126_recErased = _out923;
                  _2127_recIdents = _out924;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2124_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2125_recOwned;
                  isErased = _2126_recErased;
                  readIdents = _2127_recIdents;
                }
              } else if (_source99.is_Seq) {
                DAST._IType _2128___mcc_h837 = _source99.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2129_recursiveGen;
                  bool _2130_recOwned;
                  bool _2131_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2132_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out925;
                  bool _out926;
                  bool _out927;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out928;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out925, out _out926, out _out927, out _out928);
                  _2129_recursiveGen = _out925;
                  _2130_recOwned = _out926;
                  _2131_recErased = _out927;
                  _2132_recIdents = _out928;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2129_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2130_recOwned;
                  isErased = _2131_recErased;
                  readIdents = _2132_recIdents;
                }
              } else if (_source99.is_Set) {
                DAST._IType _2133___mcc_h839 = _source99.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2134_recursiveGen;
                  bool _2135_recOwned;
                  bool _2136_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2137_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out929;
                  bool _out930;
                  bool _out931;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out932;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out929, out _out930, out _out931, out _out932);
                  _2134_recursiveGen = _out929;
                  _2135_recOwned = _out930;
                  _2136_recErased = _out931;
                  _2137_recIdents = _out932;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2134_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2135_recOwned;
                  isErased = _2136_recErased;
                  readIdents = _2137_recIdents;
                }
              } else if (_source99.is_Multiset) {
                DAST._IType _2138___mcc_h841 = _source99.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2139_recursiveGen;
                  bool _2140_recOwned;
                  bool _2141_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2142_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out933;
                  bool _out934;
                  bool _out935;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out936;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out933, out _out934, out _out935, out _out936);
                  _2139_recursiveGen = _out933;
                  _2140_recOwned = _out934;
                  _2141_recErased = _out935;
                  _2142_recIdents = _out936;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2139_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2140_recOwned;
                  isErased = _2141_recErased;
                  readIdents = _2142_recIdents;
                }
              } else if (_source99.is_Map) {
                DAST._IType _2143___mcc_h843 = _source99.dtor_key;
                DAST._IType _2144___mcc_h844 = _source99.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2145_recursiveGen;
                  bool _2146_recOwned;
                  bool _2147_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2148_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out937;
                  bool _out938;
                  bool _out939;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out940;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out937, out _out938, out _out939, out _out940);
                  _2145_recursiveGen = _out937;
                  _2146_recOwned = _out938;
                  _2147_recErased = _out939;
                  _2148_recIdents = _out940;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2146_recOwned;
                  isErased = _2147_recErased;
                  readIdents = _2148_recIdents;
                }
              } else if (_source99.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2149___mcc_h847 = _source99.dtor_args;
                DAST._IType _2150___mcc_h848 = _source99.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2151_recursiveGen;
                  bool _2152_recOwned;
                  bool _2153_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2154_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out941;
                  bool _out942;
                  bool _out943;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out944;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out941, out _out942, out _out943, out _out944);
                  _2151_recursiveGen = _out941;
                  _2152_recOwned = _out942;
                  _2153_recErased = _out943;
                  _2154_recIdents = _out944;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2151_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2152_recOwned;
                  isErased = _2153_recErased;
                  readIdents = _2154_recIdents;
                }
              } else if (_source99.is_Primitive) {
                DAST._IPrimitive _2155___mcc_h851 = _source99.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2156_recursiveGen;
                  bool _2157_recOwned;
                  bool _2158_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2159_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out945;
                  bool _out946;
                  bool _out947;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out948;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out945, out _out946, out _out947, out _out948);
                  _2156_recursiveGen = _out945;
                  _2157_recOwned = _out946;
                  _2158_recErased = _out947;
                  _2159_recIdents = _out948;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2156_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2157_recOwned;
                  isErased = _2158_recErased;
                  readIdents = _2159_recIdents;
                }
              } else if (_source99.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2160___mcc_h853 = _source99.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2161_recursiveGen;
                  bool _2162_recOwned;
                  bool _2163_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2164_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out949;
                  bool _out950;
                  bool _out951;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out952;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out949, out _out950, out _out951, out _out952);
                  _2161_recursiveGen = _out949;
                  _2162_recOwned = _out950;
                  _2163_recErased = _out951;
                  _2164_recIdents = _out952;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2161_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2162_recOwned;
                  isErased = _2163_recErased;
                  readIdents = _2164_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2165___mcc_h855 = _source99.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2166_recursiveGen;
                  bool _2167_recOwned;
                  bool _2168_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2169_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out953;
                  bool _out954;
                  bool _out955;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out956;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out953, out _out954, out _out955, out _out956);
                  _2166_recursiveGen = _out953;
                  _2167_recOwned = _out954;
                  _2168_recErased = _out955;
                  _2169_recIdents = _out956;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2166_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2167_recOwned;
                  isErased = _2168_recErased;
                  readIdents = _2169_recIdents;
                }
              }
            } else if (_source77.is_Primitive) {
              DAST._IPrimitive _2170___mcc_h857 = _source77.dtor_Primitive_a0;
              DAST._IPrimitive _source101 = _2170___mcc_h857;
              if (_source101.is_Int) {
                DAST._IType _source102 = _1262___mcc_h306;
                if (_source102.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2171___mcc_h861 = _source102.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2172___mcc_h862 = _source102.dtor_typeArgs;
                  DAST._IResolvedType _2173___mcc_h863 = _source102.dtor_resolved;
                  DAST._IResolvedType _source103 = _2173___mcc_h863;
                  if (_source103.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2174___mcc_h867 = _source103.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2175_recursiveGen;
                      bool _2176_recOwned;
                      bool _2177_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2178_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out957;
                      bool _out958;
                      bool _out959;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out960;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out957, out _out958, out _out959, out _out960);
                      _2175_recursiveGen = _out957;
                      _2176_recOwned = _out958;
                      _2177_recErased = _out959;
                      _2178_recIdents = _out960;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2175_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2176_recOwned;
                      isErased = _2177_recErased;
                      readIdents = _2178_recIdents;
                    }
                  } else if (_source103.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2179___mcc_h869 = _source103.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2180_recursiveGen;
                      bool _2181_recOwned;
                      bool _2182_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2183_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out961;
                      bool _out962;
                      bool _out963;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out964;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out961, out _out962, out _out963, out _out964);
                      _2180_recursiveGen = _out961;
                      _2181_recOwned = _out962;
                      _2182_recErased = _out963;
                      _2183_recIdents = _out964;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2180_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2181_recOwned;
                      isErased = _2182_recErased;
                      readIdents = _2183_recIdents;
                    }
                  } else {
                    DAST._IType _2184___mcc_h871 = _source103.dtor_Newtype_a0;
                    DAST._IType _2185_b = _2184___mcc_h871;
                    {
                      if (object.Equals(_1255_fromTpe, _2185_b)) {
                        Dafny.ISequence<Dafny.Rune> _2186_recursiveGen;
                        bool _2187_recOwned;
                        bool _2188_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2189_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out965;
                        bool _out966;
                        bool _out967;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out968;
                        DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out965, out _out966, out _out967, out _out968);
                        _2186_recursiveGen = _out965;
                        _2187_recOwned = _out966;
                        _2188_recErased = _out967;
                        _2189_recIdents = _out968;
                        Dafny.ISequence<Dafny.Rune> _2190_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out969;
                        _out969 = DCOMP.COMP.GenType(_1254_toTpe, true, false);
                        _2190_rhsType = _out969;
                        Dafny.ISequence<Dafny.Rune> _2191_uneraseFn;
                        _2191_uneraseFn = ((_2187_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2190_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2191_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2186_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2187_recOwned;
                        isErased = false;
                        readIdents = _2189_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out970;
                        bool _out971;
                        bool _out972;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out973;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1256_expr, _1255_fromTpe, _2185_b), _2185_b, _1254_toTpe), selfIdent, @params, mustOwn, out _out970, out _out971, out _out972, out _out973);
                        s = _out970;
                        isOwned = _out971;
                        isErased = _out972;
                        readIdents = _out973;
                      }
                    }
                  }
                } else if (_source102.is_Nullable) {
                  DAST._IType _2192___mcc_h873 = _source102.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2193_recursiveGen;
                    bool _2194_recOwned;
                    bool _2195_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2196_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out974;
                    bool _out975;
                    bool _out976;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out977;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out974, out _out975, out _out976, out _out977);
                    _2193_recursiveGen = _out974;
                    _2194_recOwned = _out975;
                    _2195_recErased = _out976;
                    _2196_recIdents = _out977;
                    if (!(_2194_recOwned)) {
                      _2193_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2193_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2193_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2195_recErased;
                    readIdents = _2196_recIdents;
                  }
                } else if (_source102.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2197___mcc_h875 = _source102.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2198_recursiveGen;
                    bool _2199_recOwned;
                    bool _2200_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2201_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out978;
                    bool _out979;
                    bool _out980;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out981;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out978, out _out979, out _out980, out _out981);
                    _2198_recursiveGen = _out978;
                    _2199_recOwned = _out979;
                    _2200_recErased = _out980;
                    _2201_recIdents = _out981;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2198_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2199_recOwned;
                    isErased = _2200_recErased;
                    readIdents = _2201_recIdents;
                  }
                } else if (_source102.is_Array) {
                  DAST._IType _2202___mcc_h877 = _source102.dtor_element;
                  BigInteger _2203___mcc_h878 = _source102.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2204_recursiveGen;
                    bool _2205_recOwned;
                    bool _2206_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2207_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out982;
                    bool _out983;
                    bool _out984;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out985;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out982, out _out983, out _out984, out _out985);
                    _2204_recursiveGen = _out982;
                    _2205_recOwned = _out983;
                    _2206_recErased = _out984;
                    _2207_recIdents = _out985;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2204_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2205_recOwned;
                    isErased = _2206_recErased;
                    readIdents = _2207_recIdents;
                  }
                } else if (_source102.is_Seq) {
                  DAST._IType _2208___mcc_h881 = _source102.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2209_recursiveGen;
                    bool _2210_recOwned;
                    bool _2211_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2212_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out986;
                    bool _out987;
                    bool _out988;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out989;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out986, out _out987, out _out988, out _out989);
                    _2209_recursiveGen = _out986;
                    _2210_recOwned = _out987;
                    _2211_recErased = _out988;
                    _2212_recIdents = _out989;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2209_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2210_recOwned;
                    isErased = _2211_recErased;
                    readIdents = _2212_recIdents;
                  }
                } else if (_source102.is_Set) {
                  DAST._IType _2213___mcc_h883 = _source102.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2214_recursiveGen;
                    bool _2215_recOwned;
                    bool _2216_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2217_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out990;
                    bool _out991;
                    bool _out992;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out993;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out990, out _out991, out _out992, out _out993);
                    _2214_recursiveGen = _out990;
                    _2215_recOwned = _out991;
                    _2216_recErased = _out992;
                    _2217_recIdents = _out993;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2214_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2215_recOwned;
                    isErased = _2216_recErased;
                    readIdents = _2217_recIdents;
                  }
                } else if (_source102.is_Multiset) {
                  DAST._IType _2218___mcc_h885 = _source102.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2219_recursiveGen;
                    bool _2220_recOwned;
                    bool _2221_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2222_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out994;
                    bool _out995;
                    bool _out996;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out997;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out994, out _out995, out _out996, out _out997);
                    _2219_recursiveGen = _out994;
                    _2220_recOwned = _out995;
                    _2221_recErased = _out996;
                    _2222_recIdents = _out997;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2219_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2220_recOwned;
                    isErased = _2221_recErased;
                    readIdents = _2222_recIdents;
                  }
                } else if (_source102.is_Map) {
                  DAST._IType _2223___mcc_h887 = _source102.dtor_key;
                  DAST._IType _2224___mcc_h888 = _source102.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2225_recursiveGen;
                    bool _2226_recOwned;
                    bool _2227_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2228_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out998;
                    bool _out999;
                    bool _out1000;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1001;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out998, out _out999, out _out1000, out _out1001);
                    _2225_recursiveGen = _out998;
                    _2226_recOwned = _out999;
                    _2227_recErased = _out1000;
                    _2228_recIdents = _out1001;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2225_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2226_recOwned;
                    isErased = _2227_recErased;
                    readIdents = _2228_recIdents;
                  }
                } else if (_source102.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2229___mcc_h891 = _source102.dtor_args;
                  DAST._IType _2230___mcc_h892 = _source102.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2231_recursiveGen;
                    bool _2232_recOwned;
                    bool _2233_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2234_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1002;
                    bool _out1003;
                    bool _out1004;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1005;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1002, out _out1003, out _out1004, out _out1005);
                    _2231_recursiveGen = _out1002;
                    _2232_recOwned = _out1003;
                    _2233_recErased = _out1004;
                    _2234_recIdents = _out1005;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2231_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2232_recOwned;
                    isErased = _2233_recErased;
                    readIdents = _2234_recIdents;
                  }
                } else if (_source102.is_Primitive) {
                  DAST._IPrimitive _2235___mcc_h895 = _source102.dtor_Primitive_a0;
                  DAST._IPrimitive _source104 = _2235___mcc_h895;
                  if (_source104.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2236_recursiveGen;
                      bool _2237_recOwned;
                      bool _2238_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2239_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1006;
                      bool _out1007;
                      bool _out1008;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1009;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1006, out _out1007, out _out1008, out _out1009);
                      _2236_recursiveGen = _out1006;
                      _2237_recOwned = _out1007;
                      _2238_recErased = _out1008;
                      _2239_recIdents = _out1009;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2236_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2237_recOwned;
                      isErased = _2238_recErased;
                      readIdents = _2239_recIdents;
                    }
                  } else if (_source104.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2240_recursiveGen;
                      bool _2241___v46;
                      bool _2242___v47;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2243_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1010;
                      bool _out1011;
                      bool _out1012;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1013;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, true, out _out1010, out _out1011, out _out1012, out _out1013);
                      _2240_recursiveGen = _out1010;
                      _2241___v46 = _out1011;
                      _2242___v47 = _out1012;
                      _2243_recIdents = _out1013;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), _2240_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2243_recIdents;
                    }
                  } else if (_source104.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2244_recursiveGen;
                      bool _2245_recOwned;
                      bool _2246_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2247_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1014;
                      bool _out1015;
                      bool _out1016;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1017;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1014, out _out1015, out _out1016, out _out1017);
                      _2244_recursiveGen = _out1014;
                      _2245_recOwned = _out1015;
                      _2246_recErased = _out1016;
                      _2247_recIdents = _out1017;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2244_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2245_recOwned;
                      isErased = _2246_recErased;
                      readIdents = _2247_recIdents;
                    }
                  } else if (_source104.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2248_recursiveGen;
                      bool _2249_recOwned;
                      bool _2250_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2251_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1018;
                      bool _out1019;
                      bool _out1020;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1021;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1018, out _out1019, out _out1020, out _out1021);
                      _2248_recursiveGen = _out1018;
                      _2249_recOwned = _out1019;
                      _2250_recErased = _out1020;
                      _2251_recIdents = _out1021;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2248_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2249_recOwned;
                      isErased = _2250_recErased;
                      readIdents = _2251_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2252_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1022;
                      _out1022 = DCOMP.COMP.GenType(_1254_toTpe, true, false);
                      _2252_rhsType = _out1022;
                      Dafny.ISequence<Dafny.Rune> _2253_recursiveGen;
                      bool _2254___v56;
                      bool _2255___v57;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2256_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1023;
                      bool _out1024;
                      bool _out1025;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1026;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, true, out _out1023, out _out1024, out _out1025, out _out1026);
                      _2253_recursiveGen = _out1023;
                      _2254___v56 = _out1024;
                      _2255___v57 = _out1025;
                      _2256_recIdents = _out1026;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), _2253_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2256_recIdents;
                    }
                  }
                } else if (_source102.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2257___mcc_h897 = _source102.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2258_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out1027;
                    _out1027 = DCOMP.COMP.GenType(_1254_toTpe, true, false);
                    _2258_rhsType = _out1027;
                    Dafny.ISequence<Dafny.Rune> _2259_recursiveGen;
                    bool _2260___v51;
                    bool _2261___v52;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2262_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1028;
                    bool _out1029;
                    bool _out1030;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1031;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, true, out _out1028, out _out1029, out _out1030, out _out1031);
                    _2259_recursiveGen = _out1028;
                    _2260___v51 = _out1029;
                    _2261___v52 = _out1030;
                    _2262_recIdents = _out1031;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2258_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), _2259_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _2262_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2263___mcc_h899 = _source102.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2264_recursiveGen;
                    bool _2265_recOwned;
                    bool _2266_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2267_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1032;
                    bool _out1033;
                    bool _out1034;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1035;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1032, out _out1033, out _out1034, out _out1035);
                    _2264_recursiveGen = _out1032;
                    _2265_recOwned = _out1033;
                    _2266_recErased = _out1034;
                    _2267_recIdents = _out1035;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2264_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2265_recOwned;
                    isErased = _2266_recErased;
                    readIdents = _2267_recIdents;
                  }
                }
              } else if (_source101.is_Real) {
                DAST._IType _source105 = _1262___mcc_h306;
                if (_source105.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2268___mcc_h901 = _source105.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2269___mcc_h902 = _source105.dtor_typeArgs;
                  DAST._IResolvedType _2270___mcc_h903 = _source105.dtor_resolved;
                  DAST._IResolvedType _source106 = _2270___mcc_h903;
                  if (_source106.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2271___mcc_h907 = _source106.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2272_recursiveGen;
                      bool _2273_recOwned;
                      bool _2274_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2275_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1036;
                      bool _out1037;
                      bool _out1038;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1039;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1036, out _out1037, out _out1038, out _out1039);
                      _2272_recursiveGen = _out1036;
                      _2273_recOwned = _out1037;
                      _2274_recErased = _out1038;
                      _2275_recIdents = _out1039;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2272_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2273_recOwned;
                      isErased = _2274_recErased;
                      readIdents = _2275_recIdents;
                    }
                  } else if (_source106.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2276___mcc_h909 = _source106.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2277_recursiveGen;
                      bool _2278_recOwned;
                      bool _2279_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2280_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1040;
                      bool _out1041;
                      bool _out1042;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1043;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1040, out _out1041, out _out1042, out _out1043);
                      _2277_recursiveGen = _out1040;
                      _2278_recOwned = _out1041;
                      _2279_recErased = _out1042;
                      _2280_recIdents = _out1043;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2277_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2278_recOwned;
                      isErased = _2279_recErased;
                      readIdents = _2280_recIdents;
                    }
                  } else {
                    DAST._IType _2281___mcc_h911 = _source106.dtor_Newtype_a0;
                    DAST._IType _2282_b = _2281___mcc_h911;
                    {
                      if (object.Equals(_1255_fromTpe, _2282_b)) {
                        Dafny.ISequence<Dafny.Rune> _2283_recursiveGen;
                        bool _2284_recOwned;
                        bool _2285_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2286_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1044;
                        bool _out1045;
                        bool _out1046;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1047;
                        DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1044, out _out1045, out _out1046, out _out1047);
                        _2283_recursiveGen = _out1044;
                        _2284_recOwned = _out1045;
                        _2285_recErased = _out1046;
                        _2286_recIdents = _out1047;
                        Dafny.ISequence<Dafny.Rune> _2287_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1048;
                        _out1048 = DCOMP.COMP.GenType(_1254_toTpe, true, false);
                        _2287_rhsType = _out1048;
                        Dafny.ISequence<Dafny.Rune> _2288_uneraseFn;
                        _2288_uneraseFn = ((_2284_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2287_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2288_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2283_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2284_recOwned;
                        isErased = false;
                        readIdents = _2286_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1049;
                        bool _out1050;
                        bool _out1051;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1052;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1256_expr, _1255_fromTpe, _2282_b), _2282_b, _1254_toTpe), selfIdent, @params, mustOwn, out _out1049, out _out1050, out _out1051, out _out1052);
                        s = _out1049;
                        isOwned = _out1050;
                        isErased = _out1051;
                        readIdents = _out1052;
                      }
                    }
                  }
                } else if (_source105.is_Nullable) {
                  DAST._IType _2289___mcc_h913 = _source105.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2290_recursiveGen;
                    bool _2291_recOwned;
                    bool _2292_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2293_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1053;
                    bool _out1054;
                    bool _out1055;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1056;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1053, out _out1054, out _out1055, out _out1056);
                    _2290_recursiveGen = _out1053;
                    _2291_recOwned = _out1054;
                    _2292_recErased = _out1055;
                    _2293_recIdents = _out1056;
                    if (!(_2291_recOwned)) {
                      _2290_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2290_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2290_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2292_recErased;
                    readIdents = _2293_recIdents;
                  }
                } else if (_source105.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2294___mcc_h915 = _source105.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2295_recursiveGen;
                    bool _2296_recOwned;
                    bool _2297_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2298_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1057;
                    bool _out1058;
                    bool _out1059;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1060;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1057, out _out1058, out _out1059, out _out1060);
                    _2295_recursiveGen = _out1057;
                    _2296_recOwned = _out1058;
                    _2297_recErased = _out1059;
                    _2298_recIdents = _out1060;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2295_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2296_recOwned;
                    isErased = _2297_recErased;
                    readIdents = _2298_recIdents;
                  }
                } else if (_source105.is_Array) {
                  DAST._IType _2299___mcc_h917 = _source105.dtor_element;
                  BigInteger _2300___mcc_h918 = _source105.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2301_recursiveGen;
                    bool _2302_recOwned;
                    bool _2303_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2304_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1061;
                    bool _out1062;
                    bool _out1063;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1064;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1061, out _out1062, out _out1063, out _out1064);
                    _2301_recursiveGen = _out1061;
                    _2302_recOwned = _out1062;
                    _2303_recErased = _out1063;
                    _2304_recIdents = _out1064;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2301_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2302_recOwned;
                    isErased = _2303_recErased;
                    readIdents = _2304_recIdents;
                  }
                } else if (_source105.is_Seq) {
                  DAST._IType _2305___mcc_h921 = _source105.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2306_recursiveGen;
                    bool _2307_recOwned;
                    bool _2308_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2309_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1065;
                    bool _out1066;
                    bool _out1067;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1068;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1065, out _out1066, out _out1067, out _out1068);
                    _2306_recursiveGen = _out1065;
                    _2307_recOwned = _out1066;
                    _2308_recErased = _out1067;
                    _2309_recIdents = _out1068;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2306_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2307_recOwned;
                    isErased = _2308_recErased;
                    readIdents = _2309_recIdents;
                  }
                } else if (_source105.is_Set) {
                  DAST._IType _2310___mcc_h923 = _source105.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2311_recursiveGen;
                    bool _2312_recOwned;
                    bool _2313_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2314_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1069;
                    bool _out1070;
                    bool _out1071;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1072;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1069, out _out1070, out _out1071, out _out1072);
                    _2311_recursiveGen = _out1069;
                    _2312_recOwned = _out1070;
                    _2313_recErased = _out1071;
                    _2314_recIdents = _out1072;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2311_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2312_recOwned;
                    isErased = _2313_recErased;
                    readIdents = _2314_recIdents;
                  }
                } else if (_source105.is_Multiset) {
                  DAST._IType _2315___mcc_h925 = _source105.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2316_recursiveGen;
                    bool _2317_recOwned;
                    bool _2318_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2319_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1073;
                    bool _out1074;
                    bool _out1075;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1076;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1073, out _out1074, out _out1075, out _out1076);
                    _2316_recursiveGen = _out1073;
                    _2317_recOwned = _out1074;
                    _2318_recErased = _out1075;
                    _2319_recIdents = _out1076;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2316_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2317_recOwned;
                    isErased = _2318_recErased;
                    readIdents = _2319_recIdents;
                  }
                } else if (_source105.is_Map) {
                  DAST._IType _2320___mcc_h927 = _source105.dtor_key;
                  DAST._IType _2321___mcc_h928 = _source105.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2322_recursiveGen;
                    bool _2323_recOwned;
                    bool _2324_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2325_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1077;
                    bool _out1078;
                    bool _out1079;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1080;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1077, out _out1078, out _out1079, out _out1080);
                    _2322_recursiveGen = _out1077;
                    _2323_recOwned = _out1078;
                    _2324_recErased = _out1079;
                    _2325_recIdents = _out1080;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2322_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2323_recOwned;
                    isErased = _2324_recErased;
                    readIdents = _2325_recIdents;
                  }
                } else if (_source105.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2326___mcc_h931 = _source105.dtor_args;
                  DAST._IType _2327___mcc_h932 = _source105.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2328_recursiveGen;
                    bool _2329_recOwned;
                    bool _2330_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2331_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1081;
                    bool _out1082;
                    bool _out1083;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1084;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1081, out _out1082, out _out1083, out _out1084);
                    _2328_recursiveGen = _out1081;
                    _2329_recOwned = _out1082;
                    _2330_recErased = _out1083;
                    _2331_recIdents = _out1084;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2328_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2329_recOwned;
                    isErased = _2330_recErased;
                    readIdents = _2331_recIdents;
                  }
                } else if (_source105.is_Primitive) {
                  DAST._IPrimitive _2332___mcc_h935 = _source105.dtor_Primitive_a0;
                  DAST._IPrimitive _source107 = _2332___mcc_h935;
                  if (_source107.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2333_recursiveGen;
                      bool _2334___v48;
                      bool _2335___v49;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2336_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1085;
                      bool _out1086;
                      bool _out1087;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1088;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, false, out _out1085, out _out1086, out _out1087, out _out1088);
                      _2333_recursiveGen = _out1085;
                      _2334___v48 = _out1086;
                      _2335___v49 = _out1087;
                      _2336_recIdents = _out1088;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), _2333_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2336_recIdents;
                    }
                  } else if (_source107.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2337_recursiveGen;
                      bool _2338_recOwned;
                      bool _2339_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2340_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1089;
                      bool _out1090;
                      bool _out1091;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1092;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1089, out _out1090, out _out1091, out _out1092);
                      _2337_recursiveGen = _out1089;
                      _2338_recOwned = _out1090;
                      _2339_recErased = _out1091;
                      _2340_recIdents = _out1092;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2337_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2338_recOwned;
                      isErased = _2339_recErased;
                      readIdents = _2340_recIdents;
                    }
                  } else if (_source107.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2341_recursiveGen;
                      bool _2342_recOwned;
                      bool _2343_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2344_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1093;
                      bool _out1094;
                      bool _out1095;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1096;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1093, out _out1094, out _out1095, out _out1096);
                      _2341_recursiveGen = _out1093;
                      _2342_recOwned = _out1094;
                      _2343_recErased = _out1095;
                      _2344_recIdents = _out1096;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2341_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2342_recOwned;
                      isErased = _2343_recErased;
                      readIdents = _2344_recIdents;
                    }
                  } else if (_source107.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2345_recursiveGen;
                      bool _2346_recOwned;
                      bool _2347_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2348_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1097;
                      bool _out1098;
                      bool _out1099;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1100;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1097, out _out1098, out _out1099, out _out1100);
                      _2345_recursiveGen = _out1097;
                      _2346_recOwned = _out1098;
                      _2347_recErased = _out1099;
                      _2348_recIdents = _out1100;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2345_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2346_recOwned;
                      isErased = _2347_recErased;
                      readIdents = _2348_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2349_recursiveGen;
                      bool _2350_recOwned;
                      bool _2351_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2352_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1101;
                      bool _out1102;
                      bool _out1103;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1104;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1101, out _out1102, out _out1103, out _out1104);
                      _2349_recursiveGen = _out1101;
                      _2350_recOwned = _out1102;
                      _2351_recErased = _out1103;
                      _2352_recIdents = _out1104;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2349_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2350_recOwned;
                      isErased = _2351_recErased;
                      readIdents = _2352_recIdents;
                    }
                  }
                } else if (_source105.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2353___mcc_h937 = _source105.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2354_recursiveGen;
                    bool _2355_recOwned;
                    bool _2356_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2357_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1105;
                    bool _out1106;
                    bool _out1107;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1108;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1105, out _out1106, out _out1107, out _out1108);
                    _2354_recursiveGen = _out1105;
                    _2355_recOwned = _out1106;
                    _2356_recErased = _out1107;
                    _2357_recIdents = _out1108;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2354_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2355_recOwned;
                    isErased = _2356_recErased;
                    readIdents = _2357_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2358___mcc_h939 = _source105.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2359_recursiveGen;
                    bool _2360_recOwned;
                    bool _2361_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2362_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1109;
                    bool _out1110;
                    bool _out1111;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1112;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1109, out _out1110, out _out1111, out _out1112);
                    _2359_recursiveGen = _out1109;
                    _2360_recOwned = _out1110;
                    _2361_recErased = _out1111;
                    _2362_recIdents = _out1112;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2359_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2360_recOwned;
                    isErased = _2361_recErased;
                    readIdents = _2362_recIdents;
                  }
                }
              } else if (_source101.is_String) {
                DAST._IType _source108 = _1262___mcc_h306;
                if (_source108.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2363___mcc_h941 = _source108.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2364___mcc_h942 = _source108.dtor_typeArgs;
                  DAST._IResolvedType _2365___mcc_h943 = _source108.dtor_resolved;
                  DAST._IResolvedType _source109 = _2365___mcc_h943;
                  if (_source109.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2366___mcc_h947 = _source109.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2367_recursiveGen;
                      bool _2368_recOwned;
                      bool _2369_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2370_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1113;
                      bool _out1114;
                      bool _out1115;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1116;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1113, out _out1114, out _out1115, out _out1116);
                      _2367_recursiveGen = _out1113;
                      _2368_recOwned = _out1114;
                      _2369_recErased = _out1115;
                      _2370_recIdents = _out1116;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2367_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2368_recOwned;
                      isErased = _2369_recErased;
                      readIdents = _2370_recIdents;
                    }
                  } else if (_source109.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2371___mcc_h949 = _source109.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2372_recursiveGen;
                      bool _2373_recOwned;
                      bool _2374_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2375_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1117;
                      bool _out1118;
                      bool _out1119;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1120;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1117, out _out1118, out _out1119, out _out1120);
                      _2372_recursiveGen = _out1117;
                      _2373_recOwned = _out1118;
                      _2374_recErased = _out1119;
                      _2375_recIdents = _out1120;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2372_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2373_recOwned;
                      isErased = _2374_recErased;
                      readIdents = _2375_recIdents;
                    }
                  } else {
                    DAST._IType _2376___mcc_h951 = _source109.dtor_Newtype_a0;
                    DAST._IType _2377_b = _2376___mcc_h951;
                    {
                      if (object.Equals(_1255_fromTpe, _2377_b)) {
                        Dafny.ISequence<Dafny.Rune> _2378_recursiveGen;
                        bool _2379_recOwned;
                        bool _2380_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2381_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1121;
                        bool _out1122;
                        bool _out1123;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1124;
                        DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1121, out _out1122, out _out1123, out _out1124);
                        _2378_recursiveGen = _out1121;
                        _2379_recOwned = _out1122;
                        _2380_recErased = _out1123;
                        _2381_recIdents = _out1124;
                        Dafny.ISequence<Dafny.Rune> _2382_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1125;
                        _out1125 = DCOMP.COMP.GenType(_1254_toTpe, true, false);
                        _2382_rhsType = _out1125;
                        Dafny.ISequence<Dafny.Rune> _2383_uneraseFn;
                        _2383_uneraseFn = ((_2379_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2382_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2383_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2378_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2379_recOwned;
                        isErased = false;
                        readIdents = _2381_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1126;
                        bool _out1127;
                        bool _out1128;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1129;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1256_expr, _1255_fromTpe, _2377_b), _2377_b, _1254_toTpe), selfIdent, @params, mustOwn, out _out1126, out _out1127, out _out1128, out _out1129);
                        s = _out1126;
                        isOwned = _out1127;
                        isErased = _out1128;
                        readIdents = _out1129;
                      }
                    }
                  }
                } else if (_source108.is_Nullable) {
                  DAST._IType _2384___mcc_h953 = _source108.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2385_recursiveGen;
                    bool _2386_recOwned;
                    bool _2387_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2388_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1130;
                    bool _out1131;
                    bool _out1132;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1133;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1130, out _out1131, out _out1132, out _out1133);
                    _2385_recursiveGen = _out1130;
                    _2386_recOwned = _out1131;
                    _2387_recErased = _out1132;
                    _2388_recIdents = _out1133;
                    if (!(_2386_recOwned)) {
                      _2385_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2385_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2385_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2387_recErased;
                    readIdents = _2388_recIdents;
                  }
                } else if (_source108.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2389___mcc_h955 = _source108.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2390_recursiveGen;
                    bool _2391_recOwned;
                    bool _2392_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2393_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1134;
                    bool _out1135;
                    bool _out1136;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1137;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1134, out _out1135, out _out1136, out _out1137);
                    _2390_recursiveGen = _out1134;
                    _2391_recOwned = _out1135;
                    _2392_recErased = _out1136;
                    _2393_recIdents = _out1137;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2390_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2391_recOwned;
                    isErased = _2392_recErased;
                    readIdents = _2393_recIdents;
                  }
                } else if (_source108.is_Array) {
                  DAST._IType _2394___mcc_h957 = _source108.dtor_element;
                  BigInteger _2395___mcc_h958 = _source108.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2396_recursiveGen;
                    bool _2397_recOwned;
                    bool _2398_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2399_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1138;
                    bool _out1139;
                    bool _out1140;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1141;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1138, out _out1139, out _out1140, out _out1141);
                    _2396_recursiveGen = _out1138;
                    _2397_recOwned = _out1139;
                    _2398_recErased = _out1140;
                    _2399_recIdents = _out1141;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2396_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2397_recOwned;
                    isErased = _2398_recErased;
                    readIdents = _2399_recIdents;
                  }
                } else if (_source108.is_Seq) {
                  DAST._IType _2400___mcc_h961 = _source108.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2401_recursiveGen;
                    bool _2402_recOwned;
                    bool _2403_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2404_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1142;
                    bool _out1143;
                    bool _out1144;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1145;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1142, out _out1143, out _out1144, out _out1145);
                    _2401_recursiveGen = _out1142;
                    _2402_recOwned = _out1143;
                    _2403_recErased = _out1144;
                    _2404_recIdents = _out1145;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2401_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2402_recOwned;
                    isErased = _2403_recErased;
                    readIdents = _2404_recIdents;
                  }
                } else if (_source108.is_Set) {
                  DAST._IType _2405___mcc_h963 = _source108.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2406_recursiveGen;
                    bool _2407_recOwned;
                    bool _2408_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2409_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1146;
                    bool _out1147;
                    bool _out1148;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1149;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1146, out _out1147, out _out1148, out _out1149);
                    _2406_recursiveGen = _out1146;
                    _2407_recOwned = _out1147;
                    _2408_recErased = _out1148;
                    _2409_recIdents = _out1149;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2406_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2407_recOwned;
                    isErased = _2408_recErased;
                    readIdents = _2409_recIdents;
                  }
                } else if (_source108.is_Multiset) {
                  DAST._IType _2410___mcc_h965 = _source108.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2411_recursiveGen;
                    bool _2412_recOwned;
                    bool _2413_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2414_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1150;
                    bool _out1151;
                    bool _out1152;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1153;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1150, out _out1151, out _out1152, out _out1153);
                    _2411_recursiveGen = _out1150;
                    _2412_recOwned = _out1151;
                    _2413_recErased = _out1152;
                    _2414_recIdents = _out1153;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2411_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2412_recOwned;
                    isErased = _2413_recErased;
                    readIdents = _2414_recIdents;
                  }
                } else if (_source108.is_Map) {
                  DAST._IType _2415___mcc_h967 = _source108.dtor_key;
                  DAST._IType _2416___mcc_h968 = _source108.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2417_recursiveGen;
                    bool _2418_recOwned;
                    bool _2419_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2420_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1154;
                    bool _out1155;
                    bool _out1156;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1157;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1154, out _out1155, out _out1156, out _out1157);
                    _2417_recursiveGen = _out1154;
                    _2418_recOwned = _out1155;
                    _2419_recErased = _out1156;
                    _2420_recIdents = _out1157;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2417_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2418_recOwned;
                    isErased = _2419_recErased;
                    readIdents = _2420_recIdents;
                  }
                } else if (_source108.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2421___mcc_h971 = _source108.dtor_args;
                  DAST._IType _2422___mcc_h972 = _source108.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2423_recursiveGen;
                    bool _2424_recOwned;
                    bool _2425_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2426_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1158;
                    bool _out1159;
                    bool _out1160;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1161;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1158, out _out1159, out _out1160, out _out1161);
                    _2423_recursiveGen = _out1158;
                    _2424_recOwned = _out1159;
                    _2425_recErased = _out1160;
                    _2426_recIdents = _out1161;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2423_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2424_recOwned;
                    isErased = _2425_recErased;
                    readIdents = _2426_recIdents;
                  }
                } else if (_source108.is_Primitive) {
                  DAST._IPrimitive _2427___mcc_h975 = _source108.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2428_recursiveGen;
                    bool _2429_recOwned;
                    bool _2430_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2431_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1162;
                    bool _out1163;
                    bool _out1164;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1165;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1162, out _out1163, out _out1164, out _out1165);
                    _2428_recursiveGen = _out1162;
                    _2429_recOwned = _out1163;
                    _2430_recErased = _out1164;
                    _2431_recIdents = _out1165;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2428_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2429_recOwned;
                    isErased = _2430_recErased;
                    readIdents = _2431_recIdents;
                  }
                } else if (_source108.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2432___mcc_h977 = _source108.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2433_recursiveGen;
                    bool _2434_recOwned;
                    bool _2435_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2436_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1166;
                    bool _out1167;
                    bool _out1168;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1169;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1166, out _out1167, out _out1168, out _out1169);
                    _2433_recursiveGen = _out1166;
                    _2434_recOwned = _out1167;
                    _2435_recErased = _out1168;
                    _2436_recIdents = _out1169;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2433_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2434_recOwned;
                    isErased = _2435_recErased;
                    readIdents = _2436_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2437___mcc_h979 = _source108.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2438_recursiveGen;
                    bool _2439_recOwned;
                    bool _2440_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2441_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1170;
                    bool _out1171;
                    bool _out1172;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1173;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1170, out _out1171, out _out1172, out _out1173);
                    _2438_recursiveGen = _out1170;
                    _2439_recOwned = _out1171;
                    _2440_recErased = _out1172;
                    _2441_recIdents = _out1173;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2438_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2439_recOwned;
                    isErased = _2440_recErased;
                    readIdents = _2441_recIdents;
                  }
                }
              } else if (_source101.is_Bool) {
                DAST._IType _source110 = _1262___mcc_h306;
                if (_source110.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2442___mcc_h981 = _source110.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2443___mcc_h982 = _source110.dtor_typeArgs;
                  DAST._IResolvedType _2444___mcc_h983 = _source110.dtor_resolved;
                  DAST._IResolvedType _source111 = _2444___mcc_h983;
                  if (_source111.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2445___mcc_h987 = _source111.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2446_recursiveGen;
                      bool _2447_recOwned;
                      bool _2448_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2449_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1174;
                      bool _out1175;
                      bool _out1176;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1177;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1174, out _out1175, out _out1176, out _out1177);
                      _2446_recursiveGen = _out1174;
                      _2447_recOwned = _out1175;
                      _2448_recErased = _out1176;
                      _2449_recIdents = _out1177;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2446_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2447_recOwned;
                      isErased = _2448_recErased;
                      readIdents = _2449_recIdents;
                    }
                  } else if (_source111.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2450___mcc_h989 = _source111.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2451_recursiveGen;
                      bool _2452_recOwned;
                      bool _2453_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2454_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1178;
                      bool _out1179;
                      bool _out1180;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1181;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1178, out _out1179, out _out1180, out _out1181);
                      _2451_recursiveGen = _out1178;
                      _2452_recOwned = _out1179;
                      _2453_recErased = _out1180;
                      _2454_recIdents = _out1181;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2451_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2452_recOwned;
                      isErased = _2453_recErased;
                      readIdents = _2454_recIdents;
                    }
                  } else {
                    DAST._IType _2455___mcc_h991 = _source111.dtor_Newtype_a0;
                    DAST._IType _2456_b = _2455___mcc_h991;
                    {
                      if (object.Equals(_1255_fromTpe, _2456_b)) {
                        Dafny.ISequence<Dafny.Rune> _2457_recursiveGen;
                        bool _2458_recOwned;
                        bool _2459_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2460_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1182;
                        bool _out1183;
                        bool _out1184;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1185;
                        DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1182, out _out1183, out _out1184, out _out1185);
                        _2457_recursiveGen = _out1182;
                        _2458_recOwned = _out1183;
                        _2459_recErased = _out1184;
                        _2460_recIdents = _out1185;
                        Dafny.ISequence<Dafny.Rune> _2461_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1186;
                        _out1186 = DCOMP.COMP.GenType(_1254_toTpe, true, false);
                        _2461_rhsType = _out1186;
                        Dafny.ISequence<Dafny.Rune> _2462_uneraseFn;
                        _2462_uneraseFn = ((_2458_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2461_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2462_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2457_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2458_recOwned;
                        isErased = false;
                        readIdents = _2460_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1187;
                        bool _out1188;
                        bool _out1189;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1190;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1256_expr, _1255_fromTpe, _2456_b), _2456_b, _1254_toTpe), selfIdent, @params, mustOwn, out _out1187, out _out1188, out _out1189, out _out1190);
                        s = _out1187;
                        isOwned = _out1188;
                        isErased = _out1189;
                        readIdents = _out1190;
                      }
                    }
                  }
                } else if (_source110.is_Nullable) {
                  DAST._IType _2463___mcc_h993 = _source110.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2464_recursiveGen;
                    bool _2465_recOwned;
                    bool _2466_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2467_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1191;
                    bool _out1192;
                    bool _out1193;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1194;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1191, out _out1192, out _out1193, out _out1194);
                    _2464_recursiveGen = _out1191;
                    _2465_recOwned = _out1192;
                    _2466_recErased = _out1193;
                    _2467_recIdents = _out1194;
                    if (!(_2465_recOwned)) {
                      _2464_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2464_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2464_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2466_recErased;
                    readIdents = _2467_recIdents;
                  }
                } else if (_source110.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2468___mcc_h995 = _source110.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2469_recursiveGen;
                    bool _2470_recOwned;
                    bool _2471_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2472_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1195;
                    bool _out1196;
                    bool _out1197;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1198;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1195, out _out1196, out _out1197, out _out1198);
                    _2469_recursiveGen = _out1195;
                    _2470_recOwned = _out1196;
                    _2471_recErased = _out1197;
                    _2472_recIdents = _out1198;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2469_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2470_recOwned;
                    isErased = _2471_recErased;
                    readIdents = _2472_recIdents;
                  }
                } else if (_source110.is_Array) {
                  DAST._IType _2473___mcc_h997 = _source110.dtor_element;
                  BigInteger _2474___mcc_h998 = _source110.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2475_recursiveGen;
                    bool _2476_recOwned;
                    bool _2477_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2478_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1199;
                    bool _out1200;
                    bool _out1201;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1202;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1199, out _out1200, out _out1201, out _out1202);
                    _2475_recursiveGen = _out1199;
                    _2476_recOwned = _out1200;
                    _2477_recErased = _out1201;
                    _2478_recIdents = _out1202;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2475_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2476_recOwned;
                    isErased = _2477_recErased;
                    readIdents = _2478_recIdents;
                  }
                } else if (_source110.is_Seq) {
                  DAST._IType _2479___mcc_h1001 = _source110.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2480_recursiveGen;
                    bool _2481_recOwned;
                    bool _2482_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2483_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1203;
                    bool _out1204;
                    bool _out1205;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1206;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1203, out _out1204, out _out1205, out _out1206);
                    _2480_recursiveGen = _out1203;
                    _2481_recOwned = _out1204;
                    _2482_recErased = _out1205;
                    _2483_recIdents = _out1206;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2480_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2481_recOwned;
                    isErased = _2482_recErased;
                    readIdents = _2483_recIdents;
                  }
                } else if (_source110.is_Set) {
                  DAST._IType _2484___mcc_h1003 = _source110.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2485_recursiveGen;
                    bool _2486_recOwned;
                    bool _2487_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2488_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1207;
                    bool _out1208;
                    bool _out1209;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1210;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1207, out _out1208, out _out1209, out _out1210);
                    _2485_recursiveGen = _out1207;
                    _2486_recOwned = _out1208;
                    _2487_recErased = _out1209;
                    _2488_recIdents = _out1210;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2485_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2486_recOwned;
                    isErased = _2487_recErased;
                    readIdents = _2488_recIdents;
                  }
                } else if (_source110.is_Multiset) {
                  DAST._IType _2489___mcc_h1005 = _source110.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2490_recursiveGen;
                    bool _2491_recOwned;
                    bool _2492_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2493_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1211;
                    bool _out1212;
                    bool _out1213;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1214;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1211, out _out1212, out _out1213, out _out1214);
                    _2490_recursiveGen = _out1211;
                    _2491_recOwned = _out1212;
                    _2492_recErased = _out1213;
                    _2493_recIdents = _out1214;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2490_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2491_recOwned;
                    isErased = _2492_recErased;
                    readIdents = _2493_recIdents;
                  }
                } else if (_source110.is_Map) {
                  DAST._IType _2494___mcc_h1007 = _source110.dtor_key;
                  DAST._IType _2495___mcc_h1008 = _source110.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2496_recursiveGen;
                    bool _2497_recOwned;
                    bool _2498_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2499_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1215;
                    bool _out1216;
                    bool _out1217;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1218;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1215, out _out1216, out _out1217, out _out1218);
                    _2496_recursiveGen = _out1215;
                    _2497_recOwned = _out1216;
                    _2498_recErased = _out1217;
                    _2499_recIdents = _out1218;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2496_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2497_recOwned;
                    isErased = _2498_recErased;
                    readIdents = _2499_recIdents;
                  }
                } else if (_source110.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2500___mcc_h1011 = _source110.dtor_args;
                  DAST._IType _2501___mcc_h1012 = _source110.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2502_recursiveGen;
                    bool _2503_recOwned;
                    bool _2504_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2505_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1219;
                    bool _out1220;
                    bool _out1221;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1222;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1219, out _out1220, out _out1221, out _out1222);
                    _2502_recursiveGen = _out1219;
                    _2503_recOwned = _out1220;
                    _2504_recErased = _out1221;
                    _2505_recIdents = _out1222;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2502_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2503_recOwned;
                    isErased = _2504_recErased;
                    readIdents = _2505_recIdents;
                  }
                } else if (_source110.is_Primitive) {
                  DAST._IPrimitive _2506___mcc_h1015 = _source110.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2507_recursiveGen;
                    bool _2508_recOwned;
                    bool _2509_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2510_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1223;
                    bool _out1224;
                    bool _out1225;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1226;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1223, out _out1224, out _out1225, out _out1226);
                    _2507_recursiveGen = _out1223;
                    _2508_recOwned = _out1224;
                    _2509_recErased = _out1225;
                    _2510_recIdents = _out1226;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2507_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2508_recOwned;
                    isErased = _2509_recErased;
                    readIdents = _2510_recIdents;
                  }
                } else if (_source110.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2511___mcc_h1017 = _source110.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2512_recursiveGen;
                    bool _2513_recOwned;
                    bool _2514_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2515_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1227;
                    bool _out1228;
                    bool _out1229;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1230;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1227, out _out1228, out _out1229, out _out1230);
                    _2512_recursiveGen = _out1227;
                    _2513_recOwned = _out1228;
                    _2514_recErased = _out1229;
                    _2515_recIdents = _out1230;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2512_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2513_recOwned;
                    isErased = _2514_recErased;
                    readIdents = _2515_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2516___mcc_h1019 = _source110.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2517_recursiveGen;
                    bool _2518_recOwned;
                    bool _2519_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2520_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1231;
                    bool _out1232;
                    bool _out1233;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1234;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1231, out _out1232, out _out1233, out _out1234);
                    _2517_recursiveGen = _out1231;
                    _2518_recOwned = _out1232;
                    _2519_recErased = _out1233;
                    _2520_recIdents = _out1234;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2517_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2518_recOwned;
                    isErased = _2519_recErased;
                    readIdents = _2520_recIdents;
                  }
                }
              } else {
                DAST._IType _source112 = _1262___mcc_h306;
                if (_source112.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2521___mcc_h1021 = _source112.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2522___mcc_h1022 = _source112.dtor_typeArgs;
                  DAST._IResolvedType _2523___mcc_h1023 = _source112.dtor_resolved;
                  DAST._IResolvedType _source113 = _2523___mcc_h1023;
                  if (_source113.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2524___mcc_h1027 = _source113.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2525_recursiveGen;
                      bool _2526_recOwned;
                      bool _2527_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2528_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1235;
                      bool _out1236;
                      bool _out1237;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1238;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1235, out _out1236, out _out1237, out _out1238);
                      _2525_recursiveGen = _out1235;
                      _2526_recOwned = _out1236;
                      _2527_recErased = _out1237;
                      _2528_recIdents = _out1238;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2525_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2526_recOwned;
                      isErased = _2527_recErased;
                      readIdents = _2528_recIdents;
                    }
                  } else if (_source113.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2529___mcc_h1029 = _source113.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2530_recursiveGen;
                      bool _2531_recOwned;
                      bool _2532_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2533_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1239;
                      bool _out1240;
                      bool _out1241;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1242;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1239, out _out1240, out _out1241, out _out1242);
                      _2530_recursiveGen = _out1239;
                      _2531_recOwned = _out1240;
                      _2532_recErased = _out1241;
                      _2533_recIdents = _out1242;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2530_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2531_recOwned;
                      isErased = _2532_recErased;
                      readIdents = _2533_recIdents;
                    }
                  } else {
                    DAST._IType _2534___mcc_h1031 = _source113.dtor_Newtype_a0;
                    DAST._IType _2535_b = _2534___mcc_h1031;
                    {
                      if (object.Equals(_1255_fromTpe, _2535_b)) {
                        Dafny.ISequence<Dafny.Rune> _2536_recursiveGen;
                        bool _2537_recOwned;
                        bool _2538_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2539_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1243;
                        bool _out1244;
                        bool _out1245;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1246;
                        DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1243, out _out1244, out _out1245, out _out1246);
                        _2536_recursiveGen = _out1243;
                        _2537_recOwned = _out1244;
                        _2538_recErased = _out1245;
                        _2539_recIdents = _out1246;
                        Dafny.ISequence<Dafny.Rune> _2540_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1247;
                        _out1247 = DCOMP.COMP.GenType(_1254_toTpe, true, false);
                        _2540_rhsType = _out1247;
                        Dafny.ISequence<Dafny.Rune> _2541_uneraseFn;
                        _2541_uneraseFn = ((_2537_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2540_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2541_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2536_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2537_recOwned;
                        isErased = false;
                        readIdents = _2539_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1248;
                        bool _out1249;
                        bool _out1250;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1251;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1256_expr, _1255_fromTpe, _2535_b), _2535_b, _1254_toTpe), selfIdent, @params, mustOwn, out _out1248, out _out1249, out _out1250, out _out1251);
                        s = _out1248;
                        isOwned = _out1249;
                        isErased = _out1250;
                        readIdents = _out1251;
                      }
                    }
                  }
                } else if (_source112.is_Nullable) {
                  DAST._IType _2542___mcc_h1033 = _source112.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2543_recursiveGen;
                    bool _2544_recOwned;
                    bool _2545_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2546_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1252;
                    bool _out1253;
                    bool _out1254;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1255;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1252, out _out1253, out _out1254, out _out1255);
                    _2543_recursiveGen = _out1252;
                    _2544_recOwned = _out1253;
                    _2545_recErased = _out1254;
                    _2546_recIdents = _out1255;
                    if (!(_2544_recOwned)) {
                      _2543_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2543_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2543_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2545_recErased;
                    readIdents = _2546_recIdents;
                  }
                } else if (_source112.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2547___mcc_h1035 = _source112.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2548_recursiveGen;
                    bool _2549_recOwned;
                    bool _2550_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2551_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1256;
                    bool _out1257;
                    bool _out1258;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1259;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1256, out _out1257, out _out1258, out _out1259);
                    _2548_recursiveGen = _out1256;
                    _2549_recOwned = _out1257;
                    _2550_recErased = _out1258;
                    _2551_recIdents = _out1259;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2548_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2549_recOwned;
                    isErased = _2550_recErased;
                    readIdents = _2551_recIdents;
                  }
                } else if (_source112.is_Array) {
                  DAST._IType _2552___mcc_h1037 = _source112.dtor_element;
                  BigInteger _2553___mcc_h1038 = _source112.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2554_recursiveGen;
                    bool _2555_recOwned;
                    bool _2556_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2557_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1260;
                    bool _out1261;
                    bool _out1262;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1263;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1260, out _out1261, out _out1262, out _out1263);
                    _2554_recursiveGen = _out1260;
                    _2555_recOwned = _out1261;
                    _2556_recErased = _out1262;
                    _2557_recIdents = _out1263;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2554_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2555_recOwned;
                    isErased = _2556_recErased;
                    readIdents = _2557_recIdents;
                  }
                } else if (_source112.is_Seq) {
                  DAST._IType _2558___mcc_h1041 = _source112.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2559_recursiveGen;
                    bool _2560_recOwned;
                    bool _2561_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2562_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1264;
                    bool _out1265;
                    bool _out1266;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1267;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1264, out _out1265, out _out1266, out _out1267);
                    _2559_recursiveGen = _out1264;
                    _2560_recOwned = _out1265;
                    _2561_recErased = _out1266;
                    _2562_recIdents = _out1267;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2559_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2560_recOwned;
                    isErased = _2561_recErased;
                    readIdents = _2562_recIdents;
                  }
                } else if (_source112.is_Set) {
                  DAST._IType _2563___mcc_h1043 = _source112.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2564_recursiveGen;
                    bool _2565_recOwned;
                    bool _2566_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2567_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1268;
                    bool _out1269;
                    bool _out1270;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1271;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1268, out _out1269, out _out1270, out _out1271);
                    _2564_recursiveGen = _out1268;
                    _2565_recOwned = _out1269;
                    _2566_recErased = _out1270;
                    _2567_recIdents = _out1271;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2564_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2565_recOwned;
                    isErased = _2566_recErased;
                    readIdents = _2567_recIdents;
                  }
                } else if (_source112.is_Multiset) {
                  DAST._IType _2568___mcc_h1045 = _source112.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2569_recursiveGen;
                    bool _2570_recOwned;
                    bool _2571_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2572_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1272;
                    bool _out1273;
                    bool _out1274;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1275;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1272, out _out1273, out _out1274, out _out1275);
                    _2569_recursiveGen = _out1272;
                    _2570_recOwned = _out1273;
                    _2571_recErased = _out1274;
                    _2572_recIdents = _out1275;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2569_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2570_recOwned;
                    isErased = _2571_recErased;
                    readIdents = _2572_recIdents;
                  }
                } else if (_source112.is_Map) {
                  DAST._IType _2573___mcc_h1047 = _source112.dtor_key;
                  DAST._IType _2574___mcc_h1048 = _source112.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2575_recursiveGen;
                    bool _2576_recOwned;
                    bool _2577_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2578_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1276;
                    bool _out1277;
                    bool _out1278;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1279;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1276, out _out1277, out _out1278, out _out1279);
                    _2575_recursiveGen = _out1276;
                    _2576_recOwned = _out1277;
                    _2577_recErased = _out1278;
                    _2578_recIdents = _out1279;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2575_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2576_recOwned;
                    isErased = _2577_recErased;
                    readIdents = _2578_recIdents;
                  }
                } else if (_source112.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2579___mcc_h1051 = _source112.dtor_args;
                  DAST._IType _2580___mcc_h1052 = _source112.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2581_recursiveGen;
                    bool _2582_recOwned;
                    bool _2583_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2584_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1280;
                    bool _out1281;
                    bool _out1282;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1283;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1280, out _out1281, out _out1282, out _out1283);
                    _2581_recursiveGen = _out1280;
                    _2582_recOwned = _out1281;
                    _2583_recErased = _out1282;
                    _2584_recIdents = _out1283;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2581_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2582_recOwned;
                    isErased = _2583_recErased;
                    readIdents = _2584_recIdents;
                  }
                } else if (_source112.is_Primitive) {
                  DAST._IPrimitive _2585___mcc_h1055 = _source112.dtor_Primitive_a0;
                  DAST._IPrimitive _source114 = _2585___mcc_h1055;
                  if (_source114.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2586_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1284;
                      _out1284 = DCOMP.COMP.GenType(_1255_fromTpe, true, false);
                      _2586_rhsType = _out1284;
                      Dafny.ISequence<Dafny.Rune> _2587_recursiveGen;
                      bool _2588___v58;
                      bool _2589___v59;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2590_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1285;
                      bool _out1286;
                      bool _out1287;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1288;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, true, out _out1285, out _out1286, out _out1287, out _out1288);
                      _2587_recursiveGen = _out1285;
                      _2588___v58 = _out1286;
                      _2589___v59 = _out1287;
                      _2590_recIdents = _out1288;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _2587_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u32)"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2590_recIdents;
                    }
                  } else if (_source114.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2591_recursiveGen;
                      bool _2592_recOwned;
                      bool _2593_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2594_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1289;
                      bool _out1290;
                      bool _out1291;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1292;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1289, out _out1290, out _out1291, out _out1292);
                      _2591_recursiveGen = _out1289;
                      _2592_recOwned = _out1290;
                      _2593_recErased = _out1291;
                      _2594_recIdents = _out1292;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2591_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2592_recOwned;
                      isErased = _2593_recErased;
                      readIdents = _2594_recIdents;
                    }
                  } else if (_source114.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2595_recursiveGen;
                      bool _2596_recOwned;
                      bool _2597_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2598_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1293;
                      bool _out1294;
                      bool _out1295;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1296;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1293, out _out1294, out _out1295, out _out1296);
                      _2595_recursiveGen = _out1293;
                      _2596_recOwned = _out1294;
                      _2597_recErased = _out1295;
                      _2598_recIdents = _out1296;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2595_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2596_recOwned;
                      isErased = _2597_recErased;
                      readIdents = _2598_recIdents;
                    }
                  } else if (_source114.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2599_recursiveGen;
                      bool _2600_recOwned;
                      bool _2601_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2602_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1297;
                      bool _out1298;
                      bool _out1299;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1300;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1297, out _out1298, out _out1299, out _out1300);
                      _2599_recursiveGen = _out1297;
                      _2600_recOwned = _out1298;
                      _2601_recErased = _out1299;
                      _2602_recIdents = _out1300;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2599_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2600_recOwned;
                      isErased = _2601_recErased;
                      readIdents = _2602_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2603_recursiveGen;
                      bool _2604_recOwned;
                      bool _2605_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2606_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1301;
                      bool _out1302;
                      bool _out1303;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1304;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1301, out _out1302, out _out1303, out _out1304);
                      _2603_recursiveGen = _out1301;
                      _2604_recOwned = _out1302;
                      _2605_recErased = _out1303;
                      _2606_recIdents = _out1304;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2603_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2604_recOwned;
                      isErased = _2605_recErased;
                      readIdents = _2606_recIdents;
                    }
                  }
                } else if (_source112.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2607___mcc_h1057 = _source112.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2608_recursiveGen;
                    bool _2609_recOwned;
                    bool _2610_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2611_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1305;
                    bool _out1306;
                    bool _out1307;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1308;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1305, out _out1306, out _out1307, out _out1308);
                    _2608_recursiveGen = _out1305;
                    _2609_recOwned = _out1306;
                    _2610_recErased = _out1307;
                    _2611_recIdents = _out1308;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2608_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2609_recOwned;
                    isErased = _2610_recErased;
                    readIdents = _2611_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2612___mcc_h1059 = _source112.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2613_recursiveGen;
                    bool _2614_recOwned;
                    bool _2615_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2616_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1309;
                    bool _out1310;
                    bool _out1311;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1312;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1309, out _out1310, out _out1311, out _out1312);
                    _2613_recursiveGen = _out1309;
                    _2614_recOwned = _out1310;
                    _2615_recErased = _out1311;
                    _2616_recIdents = _out1312;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2614_recOwned;
                    isErased = _2615_recErased;
                    readIdents = _2616_recIdents;
                  }
                }
              }
            } else if (_source77.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _2617___mcc_h1061 = _source77.dtor_Passthrough_a0;
              DAST._IType _source115 = _1262___mcc_h306;
              if (_source115.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2618___mcc_h1065 = _source115.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2619___mcc_h1066 = _source115.dtor_typeArgs;
                DAST._IResolvedType _2620___mcc_h1067 = _source115.dtor_resolved;
                DAST._IResolvedType _source116 = _2620___mcc_h1067;
                if (_source116.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2621___mcc_h1071 = _source116.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2622_recursiveGen;
                    bool _2623_recOwned;
                    bool _2624_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2625_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1313;
                    bool _out1314;
                    bool _out1315;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1316;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1313, out _out1314, out _out1315, out _out1316);
                    _2622_recursiveGen = _out1313;
                    _2623_recOwned = _out1314;
                    _2624_recErased = _out1315;
                    _2625_recIdents = _out1316;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2622_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2623_recOwned;
                    isErased = _2624_recErased;
                    readIdents = _2625_recIdents;
                  }
                } else if (_source116.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2626___mcc_h1073 = _source116.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2627_recursiveGen;
                    bool _2628_recOwned;
                    bool _2629_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2630_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1317;
                    bool _out1318;
                    bool _out1319;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1320;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1317, out _out1318, out _out1319, out _out1320);
                    _2627_recursiveGen = _out1317;
                    _2628_recOwned = _out1318;
                    _2629_recErased = _out1319;
                    _2630_recIdents = _out1320;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2627_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2628_recOwned;
                    isErased = _2629_recErased;
                    readIdents = _2630_recIdents;
                  }
                } else {
                  DAST._IType _2631___mcc_h1075 = _source116.dtor_Newtype_a0;
                  DAST._IType _2632_b = _2631___mcc_h1075;
                  {
                    if (object.Equals(_1255_fromTpe, _2632_b)) {
                      Dafny.ISequence<Dafny.Rune> _2633_recursiveGen;
                      bool _2634_recOwned;
                      bool _2635_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2636_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1321;
                      bool _out1322;
                      bool _out1323;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1324;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1321, out _out1322, out _out1323, out _out1324);
                      _2633_recursiveGen = _out1321;
                      _2634_recOwned = _out1322;
                      _2635_recErased = _out1323;
                      _2636_recIdents = _out1324;
                      Dafny.ISequence<Dafny.Rune> _2637_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1325;
                      _out1325 = DCOMP.COMP.GenType(_1254_toTpe, true, false);
                      _2637_rhsType = _out1325;
                      Dafny.ISequence<Dafny.Rune> _2638_uneraseFn;
                      _2638_uneraseFn = ((_2634_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2637_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2638_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2633_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2634_recOwned;
                      isErased = false;
                      readIdents = _2636_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1326;
                      bool _out1327;
                      bool _out1328;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1329;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1256_expr, _1255_fromTpe, _2632_b), _2632_b, _1254_toTpe), selfIdent, @params, mustOwn, out _out1326, out _out1327, out _out1328, out _out1329);
                      s = _out1326;
                      isOwned = _out1327;
                      isErased = _out1328;
                      readIdents = _out1329;
                    }
                  }
                }
              } else if (_source115.is_Nullable) {
                DAST._IType _2639___mcc_h1077 = _source115.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2640_recursiveGen;
                  bool _2641_recOwned;
                  bool _2642_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2643_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1330;
                  bool _out1331;
                  bool _out1332;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1333;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1330, out _out1331, out _out1332, out _out1333);
                  _2640_recursiveGen = _out1330;
                  _2641_recOwned = _out1331;
                  _2642_recErased = _out1332;
                  _2643_recIdents = _out1333;
                  if (!(_2641_recOwned)) {
                    _2640_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2640_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2640_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2642_recErased;
                  readIdents = _2643_recIdents;
                }
              } else if (_source115.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2644___mcc_h1079 = _source115.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2645_recursiveGen;
                  bool _2646_recOwned;
                  bool _2647_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2648_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1334;
                  bool _out1335;
                  bool _out1336;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1337;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1334, out _out1335, out _out1336, out _out1337);
                  _2645_recursiveGen = _out1334;
                  _2646_recOwned = _out1335;
                  _2647_recErased = _out1336;
                  _2648_recIdents = _out1337;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2645_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2646_recOwned;
                  isErased = _2647_recErased;
                  readIdents = _2648_recIdents;
                }
              } else if (_source115.is_Array) {
                DAST._IType _2649___mcc_h1081 = _source115.dtor_element;
                BigInteger _2650___mcc_h1082 = _source115.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2651_recursiveGen;
                  bool _2652_recOwned;
                  bool _2653_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2654_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1338;
                  bool _out1339;
                  bool _out1340;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1341;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1338, out _out1339, out _out1340, out _out1341);
                  _2651_recursiveGen = _out1338;
                  _2652_recOwned = _out1339;
                  _2653_recErased = _out1340;
                  _2654_recIdents = _out1341;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2651_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2652_recOwned;
                  isErased = _2653_recErased;
                  readIdents = _2654_recIdents;
                }
              } else if (_source115.is_Seq) {
                DAST._IType _2655___mcc_h1085 = _source115.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2656_recursiveGen;
                  bool _2657_recOwned;
                  bool _2658_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2659_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1342;
                  bool _out1343;
                  bool _out1344;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1345;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1342, out _out1343, out _out1344, out _out1345);
                  _2656_recursiveGen = _out1342;
                  _2657_recOwned = _out1343;
                  _2658_recErased = _out1344;
                  _2659_recIdents = _out1345;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2656_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2657_recOwned;
                  isErased = _2658_recErased;
                  readIdents = _2659_recIdents;
                }
              } else if (_source115.is_Set) {
                DAST._IType _2660___mcc_h1087 = _source115.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2661_recursiveGen;
                  bool _2662_recOwned;
                  bool _2663_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2664_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1346;
                  bool _out1347;
                  bool _out1348;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1349;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1346, out _out1347, out _out1348, out _out1349);
                  _2661_recursiveGen = _out1346;
                  _2662_recOwned = _out1347;
                  _2663_recErased = _out1348;
                  _2664_recIdents = _out1349;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2661_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2662_recOwned;
                  isErased = _2663_recErased;
                  readIdents = _2664_recIdents;
                }
              } else if (_source115.is_Multiset) {
                DAST._IType _2665___mcc_h1089 = _source115.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2666_recursiveGen;
                  bool _2667_recOwned;
                  bool _2668_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2669_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1350;
                  bool _out1351;
                  bool _out1352;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1353;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1350, out _out1351, out _out1352, out _out1353);
                  _2666_recursiveGen = _out1350;
                  _2667_recOwned = _out1351;
                  _2668_recErased = _out1352;
                  _2669_recIdents = _out1353;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2666_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2667_recOwned;
                  isErased = _2668_recErased;
                  readIdents = _2669_recIdents;
                }
              } else if (_source115.is_Map) {
                DAST._IType _2670___mcc_h1091 = _source115.dtor_key;
                DAST._IType _2671___mcc_h1092 = _source115.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2672_recursiveGen;
                  bool _2673_recOwned;
                  bool _2674_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2675_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1354;
                  bool _out1355;
                  bool _out1356;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1357;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1354, out _out1355, out _out1356, out _out1357);
                  _2672_recursiveGen = _out1354;
                  _2673_recOwned = _out1355;
                  _2674_recErased = _out1356;
                  _2675_recIdents = _out1357;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2672_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2673_recOwned;
                  isErased = _2674_recErased;
                  readIdents = _2675_recIdents;
                }
              } else if (_source115.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2676___mcc_h1095 = _source115.dtor_args;
                DAST._IType _2677___mcc_h1096 = _source115.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2678_recursiveGen;
                  bool _2679_recOwned;
                  bool _2680_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2681_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1358;
                  bool _out1359;
                  bool _out1360;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1361;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1358, out _out1359, out _out1360, out _out1361);
                  _2678_recursiveGen = _out1358;
                  _2679_recOwned = _out1359;
                  _2680_recErased = _out1360;
                  _2681_recIdents = _out1361;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2678_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2679_recOwned;
                  isErased = _2680_recErased;
                  readIdents = _2681_recIdents;
                }
              } else if (_source115.is_Primitive) {
                DAST._IPrimitive _2682___mcc_h1099 = _source115.dtor_Primitive_a0;
                DAST._IPrimitive _source117 = _2682___mcc_h1099;
                if (_source117.is_Int) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2683_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out1362;
                    _out1362 = DCOMP.COMP.GenType(_1255_fromTpe, true, false);
                    _2683_rhsType = _out1362;
                    Dafny.ISequence<Dafny.Rune> _2684_recursiveGen;
                    bool _2685___v54;
                    bool _2686___v55;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2687_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1363;
                    bool _out1364;
                    bool _out1365;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1366;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, true, out _out1363, out _out1364, out _out1365, out _out1366);
                    _2684_recursiveGen = _out1363;
                    _2685___v54 = _out1364;
                    _2686___v55 = _out1365;
                    _2687_recIdents = _out1366;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _2684_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _2687_recIdents;
                  }
                } else if (_source117.is_Real) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2688_recursiveGen;
                    bool _2689_recOwned;
                    bool _2690_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2691_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1367;
                    bool _out1368;
                    bool _out1369;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1370;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1367, out _out1368, out _out1369, out _out1370);
                    _2688_recursiveGen = _out1367;
                    _2689_recOwned = _out1368;
                    _2690_recErased = _out1369;
                    _2691_recIdents = _out1370;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2688_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2689_recOwned;
                    isErased = _2690_recErased;
                    readIdents = _2691_recIdents;
                  }
                } else if (_source117.is_String) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2692_recursiveGen;
                    bool _2693_recOwned;
                    bool _2694_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2695_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1371;
                    bool _out1372;
                    bool _out1373;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1374;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1371, out _out1372, out _out1373, out _out1374);
                    _2692_recursiveGen = _out1371;
                    _2693_recOwned = _out1372;
                    _2694_recErased = _out1373;
                    _2695_recIdents = _out1374;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2692_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2693_recOwned;
                    isErased = _2694_recErased;
                    readIdents = _2695_recIdents;
                  }
                } else if (_source117.is_Bool) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2696_recursiveGen;
                    bool _2697_recOwned;
                    bool _2698_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2699_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1375;
                    bool _out1376;
                    bool _out1377;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1378;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1375, out _out1376, out _out1377, out _out1378);
                    _2696_recursiveGen = _out1375;
                    _2697_recOwned = _out1376;
                    _2698_recErased = _out1377;
                    _2699_recIdents = _out1378;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2696_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2697_recOwned;
                    isErased = _2698_recErased;
                    readIdents = _2699_recIdents;
                  }
                } else {
                  {
                    Dafny.ISequence<Dafny.Rune> _2700_recursiveGen;
                    bool _2701_recOwned;
                    bool _2702_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2703_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1379;
                    bool _out1380;
                    bool _out1381;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1382;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1379, out _out1380, out _out1381, out _out1382);
                    _2700_recursiveGen = _out1379;
                    _2701_recOwned = _out1380;
                    _2702_recErased = _out1381;
                    _2703_recIdents = _out1382;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2700_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2701_recOwned;
                    isErased = _2702_recErased;
                    readIdents = _2703_recIdents;
                  }
                }
              } else if (_source115.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2704___mcc_h1101 = _source115.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2705_recursiveGen;
                  bool _2706___v62;
                  bool _2707___v63;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2708_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1383;
                  bool _out1384;
                  bool _out1385;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1386;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, true, out _out1383, out _out1384, out _out1385, out _out1386);
                  _2705_recursiveGen = _out1383;
                  _2706___v62 = _out1384;
                  _2707___v63 = _out1385;
                  _2708_recIdents = _out1386;
                  Dafny.ISequence<Dafny.Rune> _2709_toTpeGen;
                  Dafny.ISequence<Dafny.Rune> _out1387;
                  _out1387 = DCOMP.COMP.GenType(_1254_toTpe, true, false);
                  _2709_toTpeGen = _out1387;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2705_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _2709_toTpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = true;
                  readIdents = _2708_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2710___mcc_h1103 = _source115.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2711_recursiveGen;
                  bool _2712_recOwned;
                  bool _2713_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2714_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1388;
                  bool _out1389;
                  bool _out1390;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1391;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1388, out _out1389, out _out1390, out _out1391);
                  _2711_recursiveGen = _out1388;
                  _2712_recOwned = _out1389;
                  _2713_recErased = _out1390;
                  _2714_recIdents = _out1391;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2711_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2712_recOwned;
                  isErased = _2713_recErased;
                  readIdents = _2714_recIdents;
                }
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2715___mcc_h1105 = _source77.dtor_TypeArg_a0;
              DAST._IType _source118 = _1262___mcc_h306;
              if (_source118.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2716___mcc_h1109 = _source118.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2717___mcc_h1110 = _source118.dtor_typeArgs;
                DAST._IResolvedType _2718___mcc_h1111 = _source118.dtor_resolved;
                DAST._IResolvedType _source119 = _2718___mcc_h1111;
                if (_source119.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2719___mcc_h1115 = _source119.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2720_recursiveGen;
                    bool _2721_recOwned;
                    bool _2722_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2723_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1392;
                    bool _out1393;
                    bool _out1394;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1395;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1392, out _out1393, out _out1394, out _out1395);
                    _2720_recursiveGen = _out1392;
                    _2721_recOwned = _out1393;
                    _2722_recErased = _out1394;
                    _2723_recIdents = _out1395;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2720_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2721_recOwned;
                    isErased = _2722_recErased;
                    readIdents = _2723_recIdents;
                  }
                } else if (_source119.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2724___mcc_h1117 = _source119.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2725_recursiveGen;
                    bool _2726_recOwned;
                    bool _2727_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2728_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1396;
                    bool _out1397;
                    bool _out1398;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1399;
                    DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1396, out _out1397, out _out1398, out _out1399);
                    _2725_recursiveGen = _out1396;
                    _2726_recOwned = _out1397;
                    _2727_recErased = _out1398;
                    _2728_recIdents = _out1399;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2725_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2726_recOwned;
                    isErased = _2727_recErased;
                    readIdents = _2728_recIdents;
                  }
                } else {
                  DAST._IType _2729___mcc_h1119 = _source119.dtor_Newtype_a0;
                  DAST._IType _2730_b = _2729___mcc_h1119;
                  {
                    if (object.Equals(_1255_fromTpe, _2730_b)) {
                      Dafny.ISequence<Dafny.Rune> _2731_recursiveGen;
                      bool _2732_recOwned;
                      bool _2733_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2734_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1400;
                      bool _out1401;
                      bool _out1402;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1403;
                      DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1400, out _out1401, out _out1402, out _out1403);
                      _2731_recursiveGen = _out1400;
                      _2732_recOwned = _out1401;
                      _2733_recErased = _out1402;
                      _2734_recIdents = _out1403;
                      Dafny.ISequence<Dafny.Rune> _2735_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1404;
                      _out1404 = DCOMP.COMP.GenType(_1254_toTpe, true, false);
                      _2735_rhsType = _out1404;
                      Dafny.ISequence<Dafny.Rune> _2736_uneraseFn;
                      _2736_uneraseFn = ((_2732_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2735_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2736_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2731_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2732_recOwned;
                      isErased = false;
                      readIdents = _2734_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1405;
                      bool _out1406;
                      bool _out1407;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1408;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1256_expr, _1255_fromTpe, _2730_b), _2730_b, _1254_toTpe), selfIdent, @params, mustOwn, out _out1405, out _out1406, out _out1407, out _out1408);
                      s = _out1405;
                      isOwned = _out1406;
                      isErased = _out1407;
                      readIdents = _out1408;
                    }
                  }
                }
              } else if (_source118.is_Nullable) {
                DAST._IType _2737___mcc_h1121 = _source118.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2738_recursiveGen;
                  bool _2739_recOwned;
                  bool _2740_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2741_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1409;
                  bool _out1410;
                  bool _out1411;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1412;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1409, out _out1410, out _out1411, out _out1412);
                  _2738_recursiveGen = _out1409;
                  _2739_recOwned = _out1410;
                  _2740_recErased = _out1411;
                  _2741_recIdents = _out1412;
                  if (!(_2739_recOwned)) {
                    _2738_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2738_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2738_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2740_recErased;
                  readIdents = _2741_recIdents;
                }
              } else if (_source118.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2742___mcc_h1123 = _source118.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2743_recursiveGen;
                  bool _2744_recOwned;
                  bool _2745_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2746_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1413;
                  bool _out1414;
                  bool _out1415;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1416;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1413, out _out1414, out _out1415, out _out1416);
                  _2743_recursiveGen = _out1413;
                  _2744_recOwned = _out1414;
                  _2745_recErased = _out1415;
                  _2746_recIdents = _out1416;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2743_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2744_recOwned;
                  isErased = _2745_recErased;
                  readIdents = _2746_recIdents;
                }
              } else if (_source118.is_Array) {
                DAST._IType _2747___mcc_h1125 = _source118.dtor_element;
                BigInteger _2748___mcc_h1126 = _source118.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2749_recursiveGen;
                  bool _2750_recOwned;
                  bool _2751_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2752_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1417;
                  bool _out1418;
                  bool _out1419;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1420;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1417, out _out1418, out _out1419, out _out1420);
                  _2749_recursiveGen = _out1417;
                  _2750_recOwned = _out1418;
                  _2751_recErased = _out1419;
                  _2752_recIdents = _out1420;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2749_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2750_recOwned;
                  isErased = _2751_recErased;
                  readIdents = _2752_recIdents;
                }
              } else if (_source118.is_Seq) {
                DAST._IType _2753___mcc_h1129 = _source118.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2754_recursiveGen;
                  bool _2755_recOwned;
                  bool _2756_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2757_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1421;
                  bool _out1422;
                  bool _out1423;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1424;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1421, out _out1422, out _out1423, out _out1424);
                  _2754_recursiveGen = _out1421;
                  _2755_recOwned = _out1422;
                  _2756_recErased = _out1423;
                  _2757_recIdents = _out1424;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2754_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2755_recOwned;
                  isErased = _2756_recErased;
                  readIdents = _2757_recIdents;
                }
              } else if (_source118.is_Set) {
                DAST._IType _2758___mcc_h1131 = _source118.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2759_recursiveGen;
                  bool _2760_recOwned;
                  bool _2761_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2762_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1425;
                  bool _out1426;
                  bool _out1427;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1428;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1425, out _out1426, out _out1427, out _out1428);
                  _2759_recursiveGen = _out1425;
                  _2760_recOwned = _out1426;
                  _2761_recErased = _out1427;
                  _2762_recIdents = _out1428;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2759_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2760_recOwned;
                  isErased = _2761_recErased;
                  readIdents = _2762_recIdents;
                }
              } else if (_source118.is_Multiset) {
                DAST._IType _2763___mcc_h1133 = _source118.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2764_recursiveGen;
                  bool _2765_recOwned;
                  bool _2766_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2767_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1429;
                  bool _out1430;
                  bool _out1431;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1432;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1429, out _out1430, out _out1431, out _out1432);
                  _2764_recursiveGen = _out1429;
                  _2765_recOwned = _out1430;
                  _2766_recErased = _out1431;
                  _2767_recIdents = _out1432;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2764_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2765_recOwned;
                  isErased = _2766_recErased;
                  readIdents = _2767_recIdents;
                }
              } else if (_source118.is_Map) {
                DAST._IType _2768___mcc_h1135 = _source118.dtor_key;
                DAST._IType _2769___mcc_h1136 = _source118.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2770_recursiveGen;
                  bool _2771_recOwned;
                  bool _2772_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2773_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1433;
                  bool _out1434;
                  bool _out1435;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1436;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1433, out _out1434, out _out1435, out _out1436);
                  _2770_recursiveGen = _out1433;
                  _2771_recOwned = _out1434;
                  _2772_recErased = _out1435;
                  _2773_recIdents = _out1436;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2770_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2771_recOwned;
                  isErased = _2772_recErased;
                  readIdents = _2773_recIdents;
                }
              } else if (_source118.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2774___mcc_h1139 = _source118.dtor_args;
                DAST._IType _2775___mcc_h1140 = _source118.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2776_recursiveGen;
                  bool _2777_recOwned;
                  bool _2778_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2779_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1437;
                  bool _out1438;
                  bool _out1439;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1440;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1437, out _out1438, out _out1439, out _out1440);
                  _2776_recursiveGen = _out1437;
                  _2777_recOwned = _out1438;
                  _2778_recErased = _out1439;
                  _2779_recIdents = _out1440;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2776_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2777_recOwned;
                  isErased = _2778_recErased;
                  readIdents = _2779_recIdents;
                }
              } else if (_source118.is_Primitive) {
                DAST._IPrimitive _2780___mcc_h1143 = _source118.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2781_recursiveGen;
                  bool _2782_recOwned;
                  bool _2783_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2784_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1441;
                  bool _out1442;
                  bool _out1443;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1444;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1441, out _out1442, out _out1443, out _out1444);
                  _2781_recursiveGen = _out1441;
                  _2782_recOwned = _out1442;
                  _2783_recErased = _out1443;
                  _2784_recIdents = _out1444;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2781_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2782_recOwned;
                  isErased = _2783_recErased;
                  readIdents = _2784_recIdents;
                }
              } else if (_source118.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2785___mcc_h1145 = _source118.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2786_recursiveGen;
                  bool _2787_recOwned;
                  bool _2788_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2789_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1445;
                  bool _out1446;
                  bool _out1447;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1448;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1445, out _out1446, out _out1447, out _out1448);
                  _2786_recursiveGen = _out1445;
                  _2787_recOwned = _out1446;
                  _2788_recErased = _out1447;
                  _2789_recIdents = _out1448;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2786_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2787_recOwned;
                  isErased = _2788_recErased;
                  readIdents = _2789_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2790___mcc_h1147 = _source118.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2791_recursiveGen;
                  bool _2792_recOwned;
                  bool _2793_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2794_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1449;
                  bool _out1450;
                  bool _out1451;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1452;
                  DCOMP.COMP.GenExpr(_1256_expr, selfIdent, @params, mustOwn, out _out1449, out _out1450, out _out1451, out _out1452);
                  _2791_recursiveGen = _out1449;
                  _2792_recOwned = _out1450;
                  _2793_recErased = _out1451;
                  _2794_recIdents = _out1452;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2791_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2792_recOwned;
                  isErased = _2793_recErased;
                  readIdents = _2794_recIdents;
                }
              }
            }
          }
        }
      } else if (_source70.is_SeqConstruct) {
        DAST._IExpression _2795___mcc_h26 = _source70.dtor_length;
        DAST._IExpression _2796___mcc_h27 = _source70.dtor_elem;
        DAST._IExpression _2797_expr = _2796___mcc_h27;
        DAST._IExpression _2798_length = _2795___mcc_h26;
        {
          Dafny.ISequence<Dafny.Rune> _2799_recursiveGen;
          bool _2800___v65;
          bool _2801_eErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2802_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1453;
          bool _out1454;
          bool _out1455;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1456;
          DCOMP.COMP.GenExpr(_2797_expr, selfIdent, @params, true, out _out1453, out _out1454, out _out1455, out _out1456);
          _2799_recursiveGen = _out1453;
          _2800___v65 = _out1454;
          _2801_eErased = _out1455;
          _2802_recIdents = _out1456;
          Dafny.ISequence<Dafny.Rune> _2803_lengthGen;
          bool _2804___v66;
          bool _2805_lengthErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2806_lengthIdents;
          Dafny.ISequence<Dafny.Rune> _out1457;
          bool _out1458;
          bool _out1459;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1460;
          DCOMP.COMP.GenExpr(_2798_length, selfIdent, @params, true, out _out1457, out _out1458, out _out1459, out _out1460);
          _2803_lengthGen = _out1457;
          _2804___v66 = _out1458;
          _2805_lengthErased = _out1459;
          _2806_lengthIdents = _out1460;
          if (!(_2805_lengthErased)) {
            _2803_lengthGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2803_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), _2799_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), _2803_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer.0(&i)).collect::<Vec<_>>()\n}"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2802_recIdents, _2806_lengthIdents);
          isOwned = true;
          isErased = _2801_eErased;
        }
      } else if (_source70.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _2807___mcc_h28 = _source70.dtor_elements;
        DAST._IType _2808___mcc_h29 = _source70.dtor_typ;
        DAST._IType _2809_typ = _2808___mcc_h29;
        Dafny.ISequence<DAST._IExpression> _2810_exprs = _2807___mcc_h28;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _2811_genTpe;
          Dafny.ISequence<Dafny.Rune> _out1461;
          _out1461 = DCOMP.COMP.GenType(_2809_typ, false, false);
          _2811_genTpe = _out1461;
          BigInteger _2812_i;
          _2812_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(vec![");
          _2812_i = BigInteger.Zero;
          while ((_2812_i) < (new BigInteger((_2810_exprs).Count))) {
            if ((_2812_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2813_recursiveGen;
            bool _2814___v67;
            bool _2815_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2816_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1462;
            bool _out1463;
            bool _out1464;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1465;
            DCOMP.COMP.GenExpr((_2810_exprs).Select(_2812_i), selfIdent, @params, true, out _out1462, out _out1463, out _out1464, out _out1465);
            _2813_recursiveGen = _out1462;
            _2814___v67 = _out1463;
            _2815_isErased = _out1464;
            _2816_recIdents = _out1465;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2816_recIdents);
            if (_2815_isErased) {
              _2813_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2813_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _2813_recursiveGen);
            _2812_i = (_2812_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("] as Vec<")), _2811_genTpe), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source70.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _2817___mcc_h30 = _source70.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _2818_exprs = _2817___mcc_h30;
        {
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>> _2819_generatedValues;
          _2819_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2820_i;
          _2820_i = BigInteger.Zero;
          bool _2821_allErased;
          _2821_allErased = true;
          while ((_2820_i) < (new BigInteger((_2818_exprs).Count))) {
            Dafny.ISequence<Dafny.Rune> _2822_recursiveGen;
            bool _2823___v68;
            bool _2824_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2825_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1466;
            bool _out1467;
            bool _out1468;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1469;
            DCOMP.COMP.GenExpr((_2818_exprs).Select(_2820_i), selfIdent, @params, true, out _out1466, out _out1467, out _out1468, out _out1469);
            _2822_recursiveGen = _out1466;
            _2823___v68 = _out1467;
            _2824_isErased = _out1468;
            _2825_recIdents = _out1469;
            _2821_allErased = (_2821_allErased) && (_2824_isErased);
            _2819_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.Concat(_2819_generatedValues, Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements(_System.Tuple2<Dafny.ISequence<Dafny.Rune>, bool>.create(_2822_recursiveGen, _2824_isErased)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2825_recIdents);
            _2820_i = (_2820_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _2820_i = BigInteger.Zero;
          while ((_2820_i) < (new BigInteger((_2819_generatedValues).Count))) {
            if ((_2820_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2826_gen;
            _2826_gen = ((_2819_generatedValues).Select(_2820_i)).dtor__0;
            if ((((_2819_generatedValues).Select(_2820_i)).dtor__1) && (!(_2821_allErased))) {
              _2826_gen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2826_gen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _2826_gen);
            _2820_i = (_2820_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashSet<_>>()"));
          isOwned = true;
          isErased = _2821_allErased;
        }
      } else if (_source70.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2827___mcc_h31 = _source70.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2828_mapElems = _2827___mcc_h31;
        {
          Dafny.ISequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>> _2829_generatedValues;
          _2829_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2830_i;
          _2830_i = BigInteger.Zero;
          bool _2831_allErased;
          _2831_allErased = true;
          while ((_2830_i) < (new BigInteger((_2828_mapElems).Count))) {
            Dafny.ISequence<Dafny.Rune> _2832_recursiveGenKey;
            bool _2833___v69;
            bool _2834_isErasedKey;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2835_recIdentsKey;
            Dafny.ISequence<Dafny.Rune> _out1470;
            bool _out1471;
            bool _out1472;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1473;
            DCOMP.COMP.GenExpr(((_2828_mapElems).Select(_2830_i)).dtor__0, selfIdent, @params, true, out _out1470, out _out1471, out _out1472, out _out1473);
            _2832_recursiveGenKey = _out1470;
            _2833___v69 = _out1471;
            _2834_isErasedKey = _out1472;
            _2835_recIdentsKey = _out1473;
            Dafny.ISequence<Dafny.Rune> _2836_recursiveGenValue;
            bool _2837___v70;
            bool _2838_isErasedValue;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2839_recIdentsValue;
            Dafny.ISequence<Dafny.Rune> _out1474;
            bool _out1475;
            bool _out1476;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1477;
            DCOMP.COMP.GenExpr(((_2828_mapElems).Select(_2830_i)).dtor__1, selfIdent, @params, true, out _out1474, out _out1475, out _out1476, out _out1477);
            _2836_recursiveGenValue = _out1474;
            _2837___v70 = _out1475;
            _2838_isErasedValue = _out1476;
            _2839_recIdentsValue = _out1477;
            _2831_allErased = ((_2831_allErased) && (_2834_isErasedKey)) && (_2838_isErasedValue);
            _2829_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.Concat(_2829_generatedValues, Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements(_System.Tuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>.create(_2832_recursiveGenKey, _2836_recursiveGenValue, _2834_isErasedKey, _2838_isErasedValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2835_recIdentsKey), _2839_recIdentsValue);
            _2830_i = (_2830_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _2830_i = BigInteger.Zero;
          while ((_2830_i) < (new BigInteger((_2829_generatedValues).Count))) {
            if ((_2830_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2840_genKey;
            _2840_genKey = ((_2829_generatedValues).Select(_2830_i)).dtor__0;
            Dafny.ISequence<Dafny.Rune> _2841_genValue;
            _2841_genValue = ((_2829_generatedValues).Select(_2830_i)).dtor__1;
            if ((((_2829_generatedValues).Select(_2830_i)).dtor__2) && (!(_2831_allErased))) {
              _2840_genKey = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2840_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if ((((_2829_generatedValues).Select(_2830_i)).dtor__3) && (!(_2831_allErased))) {
              _2841_genValue = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2841_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2840_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2841_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _2830_i = (_2830_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashMap<_, _>>()"));
          isOwned = true;
          isErased = _2831_allErased;
        }
      } else if (_source70.is_This) {
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source120 = selfIdent;
          if (_source120.is_Some) {
            Dafny.ISequence<Dafny.Rune> _2842___mcc_h1149 = _source120.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _2843_id = _2842___mcc_h1149;
            {
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(_2843_id, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                isOwned = true;
              } else {
                if ((_2843_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _2843_id);
                }
                isOwned = false;
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2843_id);
              isErased = false;
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")");
              isOwned = true;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
              isErased = true;
            }
          }
        }
      } else if (_source70.is_Ite) {
        DAST._IExpression _2844___mcc_h32 = _source70.dtor_cond;
        DAST._IExpression _2845___mcc_h33 = _source70.dtor_thn;
        DAST._IExpression _2846___mcc_h34 = _source70.dtor_els;
        DAST._IExpression _2847_f = _2846___mcc_h34;
        DAST._IExpression _2848_t = _2845___mcc_h33;
        DAST._IExpression _2849_cond = _2844___mcc_h32;
        {
          Dafny.ISequence<Dafny.Rune> _2850_condString;
          bool _2851___v71;
          bool _2852_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2853_recIdentsCond;
          Dafny.ISequence<Dafny.Rune> _out1478;
          bool _out1479;
          bool _out1480;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1481;
          DCOMP.COMP.GenExpr(_2849_cond, selfIdent, @params, true, out _out1478, out _out1479, out _out1480, out _out1481);
          _2850_condString = _out1478;
          _2851___v71 = _out1479;
          _2852_condErased = _out1480;
          _2853_recIdentsCond = _out1481;
          if (!(_2852_condErased)) {
            _2850_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2850_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          Dafny.ISequence<Dafny.Rune> _2854___v72;
          bool _2855_tHasToBeOwned;
          bool _2856___v73;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2857___v74;
          Dafny.ISequence<Dafny.Rune> _out1482;
          bool _out1483;
          bool _out1484;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1485;
          DCOMP.COMP.GenExpr(_2848_t, selfIdent, @params, mustOwn, out _out1482, out _out1483, out _out1484, out _out1485);
          _2854___v72 = _out1482;
          _2855_tHasToBeOwned = _out1483;
          _2856___v73 = _out1484;
          _2857___v74 = _out1485;
          Dafny.ISequence<Dafny.Rune> _2858_fString;
          bool _2859_fOwned;
          bool _2860_fErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2861_recIdentsF;
          Dafny.ISequence<Dafny.Rune> _out1486;
          bool _out1487;
          bool _out1488;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1489;
          DCOMP.COMP.GenExpr(_2847_f, selfIdent, @params, _2855_tHasToBeOwned, out _out1486, out _out1487, out _out1488, out _out1489);
          _2858_fString = _out1486;
          _2859_fOwned = _out1487;
          _2860_fErased = _out1488;
          _2861_recIdentsF = _out1489;
          Dafny.ISequence<Dafny.Rune> _2862_tString;
          bool _2863___v75;
          bool _2864_tErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2865_recIdentsT;
          Dafny.ISequence<Dafny.Rune> _out1490;
          bool _out1491;
          bool _out1492;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1493;
          DCOMP.COMP.GenExpr(_2848_t, selfIdent, @params, _2859_fOwned, out _out1490, out _out1491, out _out1492, out _out1493);
          _2862_tString = _out1490;
          _2863___v75 = _out1491;
          _2864_tErased = _out1492;
          _2865_recIdentsT = _out1493;
          if ((!(_2860_fErased)) || (!(_2864_tErased))) {
            if (_2860_fErased) {
              _2858_fString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2858_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (_2864_tErased) {
              _2862_tString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2862_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _2850_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _2862_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _2858_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})"));
          isOwned = _2859_fOwned;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2853_recIdentsCond, _2865_recIdentsT), _2861_recIdentsF);
          isErased = (_2860_fErased) || (_2864_tErased);
        }
      } else if (_source70.is_UnOp) {
        DAST._IUnaryOp _2866___mcc_h35 = _source70.dtor_unOp;
        DAST._IExpression _2867___mcc_h36 = _source70.dtor_expr;
        DAST._IUnaryOp _source121 = _2866___mcc_h35;
        if (_source121.is_Not) {
          DAST._IExpression _2868_e = _2867___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _2869_recursiveGen;
            bool _2870___v76;
            bool _2871_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2872_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1494;
            bool _out1495;
            bool _out1496;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1497;
            DCOMP.COMP.GenExpr(_2868_e, selfIdent, @params, true, out _out1494, out _out1495, out _out1496, out _out1497);
            _2869_recursiveGen = _out1494;
            _2870___v76 = _out1495;
            _2871_recErased = _out1496;
            _2872_recIdents = _out1497;
            if (!(_2871_recErased)) {
              _2869_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2869_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _2869_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _2872_recIdents;
            isErased = true;
          }
        } else if (_source121.is_BitwiseNot) {
          DAST._IExpression _2873_e = _2867___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _2874_recursiveGen;
            bool _2875___v77;
            bool _2876_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2877_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1498;
            bool _out1499;
            bool _out1500;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1501;
            DCOMP.COMP.GenExpr(_2873_e, selfIdent, @params, true, out _out1498, out _out1499, out _out1500, out _out1501);
            _2874_recursiveGen = _out1498;
            _2875___v77 = _out1499;
            _2876_recErased = _out1500;
            _2877_recIdents = _out1501;
            if (!(_2876_recErased)) {
              _2874_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2874_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~("), _2874_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _2877_recIdents;
            isErased = true;
          }
        } else {
          DAST._IExpression _2878_e = _2867___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _2879_recursiveGen;
            bool _2880_recOwned;
            bool _2881_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2882_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1502;
            bool _out1503;
            bool _out1504;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1505;
            DCOMP.COMP.GenExpr(_2878_e, selfIdent, @params, false, out _out1502, out _out1503, out _out1504, out _out1505);
            _2879_recursiveGen = _out1502;
            _2880_recOwned = _out1503;
            _2881_recErased = _out1504;
            _2882_recIdents = _out1505;
            if (!(_2881_recErased)) {
              Dafny.ISequence<Dafny.Rune> _2883_eraseFn;
              _2883_eraseFn = ((_2880_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
              _2879_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _2883_eraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2879_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _2879_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").len())"));
            isOwned = true;
            readIdents = _2882_recIdents;
            isErased = true;
          }
        }
      } else if (_source70.is_BinOp) {
        DAST._IBinOp _2884___mcc_h37 = _source70.dtor_op;
        DAST._IExpression _2885___mcc_h38 = _source70.dtor_left;
        DAST._IExpression _2886___mcc_h39 = _source70.dtor_right;
        DAST._IExpression _2887_r = _2886___mcc_h39;
        DAST._IExpression _2888_l = _2885___mcc_h38;
        DAST._IBinOp _2889_op = _2884___mcc_h37;
        {
          Dafny.ISequence<Dafny.Rune> _2890_left;
          bool _2891___v78;
          bool _2892_leftErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2893_recIdentsL;
          Dafny.ISequence<Dafny.Rune> _out1506;
          bool _out1507;
          bool _out1508;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1509;
          DCOMP.COMP.GenExpr(_2888_l, selfIdent, @params, true, out _out1506, out _out1507, out _out1508, out _out1509);
          _2890_left = _out1506;
          _2891___v78 = _out1507;
          _2892_leftErased = _out1508;
          _2893_recIdentsL = _out1509;
          Dafny.ISequence<Dafny.Rune> _2894_right;
          bool _2895___v79;
          bool _2896_rightErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2897_recIdentsR;
          Dafny.ISequence<Dafny.Rune> _out1510;
          bool _out1511;
          bool _out1512;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1513;
          DCOMP.COMP.GenExpr(_2887_r, selfIdent, @params, true, out _out1510, out _out1511, out _out1512, out _out1513);
          _2894_right = _out1510;
          _2895___v79 = _out1511;
          _2896_rightErased = _out1512;
          _2897_recIdentsR = _out1513;
          DAST._IBinOp _source122 = _2889_op;
          if (_source122.is_Eq) {
            bool _2898___mcc_h1150 = _source122.dtor_referential;
            bool _2899___mcc_h1151 = _source122.dtor_nullable;
            {
              if (!(_2892_leftErased)) {
                _2890_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2896_rightErased)) {
                _2894_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source123 = _2889_op;
              if (_source123.is_Eq) {
                bool _2900___mcc_h1160 = _source123.dtor_referential;
                bool _2901___mcc_h1161 = _source123.dtor_nullable;
                bool _2902_nullable = _2901___mcc_h1161;
                bool _2903_referential = _2900___mcc_h1160;
                {
                  if (_2903_referential) {
                    if (_2902_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2890_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2894_right);
                  }
                }
              } else if (_source123.is_Neq) {
                bool _2904___mcc_h1162 = _source123.dtor_referential;
                bool _2905___mcc_h1163 = _source123.dtor_nullable;
                bool _2906_nullable = _2905___mcc_h1163;
                bool _2907_referential = _2904___mcc_h1162;
                {
                  if (_2907_referential) {
                    if (_2906_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2890_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2894_right);
                  }
                }
              } else if (_source123.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source123.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source123.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source123.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2908___mcc_h1164 = _source123.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2909_op = _2908___mcc_h1164;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2909_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source122.is_Neq) {
            bool _2910___mcc_h1154 = _source122.dtor_referential;
            bool _2911___mcc_h1155 = _source122.dtor_nullable;
            {
              if (!(_2892_leftErased)) {
                _2890_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2896_rightErased)) {
                _2894_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source124 = _2889_op;
              if (_source124.is_Eq) {
                bool _2912___mcc_h1165 = _source124.dtor_referential;
                bool _2913___mcc_h1166 = _source124.dtor_nullable;
                bool _2914_nullable = _2913___mcc_h1166;
                bool _2915_referential = _2912___mcc_h1165;
                {
                  if (_2915_referential) {
                    if (_2914_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2890_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2894_right);
                  }
                }
              } else if (_source124.is_Neq) {
                bool _2916___mcc_h1167 = _source124.dtor_referential;
                bool _2917___mcc_h1168 = _source124.dtor_nullable;
                bool _2918_nullable = _2917___mcc_h1168;
                bool _2919_referential = _2916___mcc_h1167;
                {
                  if (_2919_referential) {
                    if (_2918_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2890_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2894_right);
                  }
                }
              } else if (_source124.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source124.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source124.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source124.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2920___mcc_h1169 = _source124.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2921_op = _2920___mcc_h1169;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2921_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source122.is_Div) {
            {
              if (!(_2892_leftErased)) {
                _2890_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2896_rightErased)) {
                _2894_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source125 = _2889_op;
              if (_source125.is_Eq) {
                bool _2922___mcc_h1170 = _source125.dtor_referential;
                bool _2923___mcc_h1171 = _source125.dtor_nullable;
                bool _2924_nullable = _2923___mcc_h1171;
                bool _2925_referential = _2922___mcc_h1170;
                {
                  if (_2925_referential) {
                    if (_2924_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2890_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2894_right);
                  }
                }
              } else if (_source125.is_Neq) {
                bool _2926___mcc_h1172 = _source125.dtor_referential;
                bool _2927___mcc_h1173 = _source125.dtor_nullable;
                bool _2928_nullable = _2927___mcc_h1173;
                bool _2929_referential = _2926___mcc_h1172;
                {
                  if (_2929_referential) {
                    if (_2928_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2890_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2894_right);
                  }
                }
              } else if (_source125.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source125.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source125.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source125.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2930___mcc_h1174 = _source125.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2931_op = _2930___mcc_h1174;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2931_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source122.is_EuclidianDiv) {
            {
              if (!(_2892_leftErased)) {
                _2890_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2896_rightErased)) {
                _2894_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source126 = _2889_op;
              if (_source126.is_Eq) {
                bool _2932___mcc_h1175 = _source126.dtor_referential;
                bool _2933___mcc_h1176 = _source126.dtor_nullable;
                bool _2934_nullable = _2933___mcc_h1176;
                bool _2935_referential = _2932___mcc_h1175;
                {
                  if (_2935_referential) {
                    if (_2934_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2890_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2894_right);
                  }
                }
              } else if (_source126.is_Neq) {
                bool _2936___mcc_h1177 = _source126.dtor_referential;
                bool _2937___mcc_h1178 = _source126.dtor_nullable;
                bool _2938_nullable = _2937___mcc_h1178;
                bool _2939_referential = _2936___mcc_h1177;
                {
                  if (_2939_referential) {
                    if (_2938_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2890_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2894_right);
                  }
                }
              } else if (_source126.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source126.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source126.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source126.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2940___mcc_h1179 = _source126.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2941_op = _2940___mcc_h1179;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2941_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source122.is_Mod) {
            {
              if (!(_2892_leftErased)) {
                _2890_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2896_rightErased)) {
                _2894_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source127 = _2889_op;
              if (_source127.is_Eq) {
                bool _2942___mcc_h1180 = _source127.dtor_referential;
                bool _2943___mcc_h1181 = _source127.dtor_nullable;
                bool _2944_nullable = _2943___mcc_h1181;
                bool _2945_referential = _2942___mcc_h1180;
                {
                  if (_2945_referential) {
                    if (_2944_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2890_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2894_right);
                  }
                }
              } else if (_source127.is_Neq) {
                bool _2946___mcc_h1182 = _source127.dtor_referential;
                bool _2947___mcc_h1183 = _source127.dtor_nullable;
                bool _2948_nullable = _2947___mcc_h1183;
                bool _2949_referential = _2946___mcc_h1182;
                {
                  if (_2949_referential) {
                    if (_2948_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2890_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2894_right);
                  }
                }
              } else if (_source127.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source127.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source127.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source127.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2950___mcc_h1184 = _source127.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2951_op = _2950___mcc_h1184;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2951_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source122.is_EuclidianMod) {
            {
              if (!(_2892_leftErased)) {
                _2890_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2896_rightErased)) {
                _2894_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source128 = _2889_op;
              if (_source128.is_Eq) {
                bool _2952___mcc_h1185 = _source128.dtor_referential;
                bool _2953___mcc_h1186 = _source128.dtor_nullable;
                bool _2954_nullable = _2953___mcc_h1186;
                bool _2955_referential = _2952___mcc_h1185;
                {
                  if (_2955_referential) {
                    if (_2954_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2890_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2894_right);
                  }
                }
              } else if (_source128.is_Neq) {
                bool _2956___mcc_h1187 = _source128.dtor_referential;
                bool _2957___mcc_h1188 = _source128.dtor_nullable;
                bool _2958_nullable = _2957___mcc_h1188;
                bool _2959_referential = _2956___mcc_h1187;
                {
                  if (_2959_referential) {
                    if (_2958_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2890_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2894_right);
                  }
                }
              } else if (_source128.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source128.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source128.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source128.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2960___mcc_h1189 = _source128.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2961_op = _2960___mcc_h1189;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2961_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source122.is_Implies) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") || ")), _2894_right);
            }
          } else if (_source122.is_In) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2894_right, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          } else if (_source122.is_NotIn) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
            }
          } else if (_source122.is_SetDifference) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2890_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".difference(&")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").cloned().collect::<::std::collections::HashSet<_>>()"));
            }
          } else if (_source122.is_Concat) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].concat()"));
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _2962___mcc_h1158 = _source122.dtor_Passthrough_a0;
            {
              if (!(_2892_leftErased)) {
                _2890_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2896_rightErased)) {
                _2894_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source129 = _2889_op;
              if (_source129.is_Eq) {
                bool _2963___mcc_h1190 = _source129.dtor_referential;
                bool _2964___mcc_h1191 = _source129.dtor_nullable;
                bool _2965_nullable = _2964___mcc_h1191;
                bool _2966_referential = _2963___mcc_h1190;
                {
                  if (_2966_referential) {
                    if (_2965_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2890_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2894_right);
                  }
                }
              } else if (_source129.is_Neq) {
                bool _2967___mcc_h1192 = _source129.dtor_referential;
                bool _2968___mcc_h1193 = _source129.dtor_nullable;
                bool _2969_nullable = _2968___mcc_h1193;
                bool _2970_referential = _2967___mcc_h1192;
                {
                  if (_2970_referential) {
                    if (_2969_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2890_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2894_right);
                  }
                }
              } else if (_source129.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source129.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source129.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source129.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2971___mcc_h1194 = _source129.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2972_op = _2971___mcc_h1194;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2890_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2972_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2894_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          }
          isOwned = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2893_recIdentsL, _2897_recIdentsR);
          isErased = true;
        }
      } else if (_source70.is_ArrayLen) {
        DAST._IExpression _2973___mcc_h40 = _source70.dtor_expr;
        BigInteger _2974___mcc_h41 = _source70.dtor_dim;
        BigInteger _2975_dim = _2974___mcc_h41;
        DAST._IExpression _2976_expr = _2973___mcc_h40;
        {
          Dafny.ISequence<Dafny.Rune> _2977_recursiveGen;
          bool _2978___v81;
          bool _2979_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2980_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1514;
          bool _out1515;
          bool _out1516;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1517;
          DCOMP.COMP.GenExpr(_2976_expr, selfIdent, @params, true, out _out1514, out _out1515, out _out1516, out _out1517);
          _2977_recursiveGen = _out1514;
          _2978___v81 = _out1515;
          _2979_recErased = _out1516;
          _2980_recIdents = _out1517;
          if ((_2975_dim).Sign == 0) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _2977_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow().len())"));
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(m.borrow().len())");
            BigInteger _2981_i;
            _2981_i = BigInteger.One;
            while ((_2981_i) < (_2975_dim)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("m.borrow().get(0).map(|m| "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
              _2981_i = (_2981_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2977_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow().get(0).map(|m| ")), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
          }
          isOwned = true;
          readIdents = _2980_recIdents;
          isErased = true;
        }
      } else if (_source70.is_Select) {
        DAST._IExpression _2982___mcc_h42 = _source70.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _2983___mcc_h43 = _source70.dtor_field;
        bool _2984___mcc_h44 = _source70.dtor_isConstant;
        bool _2985___mcc_h45 = _source70.dtor_onDatatype;
        DAST._IExpression _source130 = _2982___mcc_h42;
        if (_source130.is_Literal) {
          DAST._ILiteral _2986___mcc_h46 = _source130.dtor_Literal_a0;
          bool _2987_isDatatype = _2985___mcc_h45;
          bool _2988_isConstant = _2984___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2989_field = _2983___mcc_h43;
          DAST._IExpression _2990_on = _2982___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2991_onString;
            bool _2992_onOwned;
            bool _2993_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2994_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1518;
            bool _out1519;
            bool _out1520;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1521;
            DCOMP.COMP.GenExpr(_2990_on, selfIdent, @params, false, out _out1518, out _out1519, out _out1520, out _out1521);
            _2991_onString = _out1518;
            _2992_onOwned = _out1519;
            _2993_onErased = _out1520;
            _2994_recIdents = _out1521;
            if ((_2987_isDatatype) || (_2988_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2991_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2989_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2988_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2991_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2989_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2994_recIdents;
          }
        } else if (_source130.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _2995___mcc_h48 = _source130.dtor_Ident_a0;
          bool _2996_isDatatype = _2985___mcc_h45;
          bool _2997_isConstant = _2984___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2998_field = _2983___mcc_h43;
          DAST._IExpression _2999_on = _2982___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3000_onString;
            bool _3001_onOwned;
            bool _3002_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3003_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1522;
            bool _out1523;
            bool _out1524;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1525;
            DCOMP.COMP.GenExpr(_2999_on, selfIdent, @params, false, out _out1522, out _out1523, out _out1524, out _out1525);
            _3000_onString = _out1522;
            _3001_onOwned = _out1523;
            _3002_onErased = _out1524;
            _3003_recIdents = _out1525;
            if ((_2996_isDatatype) || (_2997_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3000_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2998_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2997_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3000_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2998_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3003_recIdents;
          }
        } else if (_source130.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3004___mcc_h50 = _source130.dtor_Companion_a0;
          bool _3005_isDatatype = _2985___mcc_h45;
          bool _3006_isConstant = _2984___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3007_field = _2983___mcc_h43;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3008_c = _3004___mcc_h50;
          {
            Dafny.ISequence<Dafny.Rune> _3009_onString;
            bool _3010_onOwned;
            bool _3011_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3012_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1526;
            bool _out1527;
            bool _out1528;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1529;
            DCOMP.COMP.GenExpr(DAST.Expression.create_Companion(_3008_c), selfIdent, @params, false, out _out1526, out _out1527, out _out1528, out _out1529);
            _3009_onString = _out1526;
            _3010_onOwned = _out1527;
            _3011_onErased = _out1528;
            _3012_recIdents = _out1529;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3009_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_3007_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
            isOwned = true;
            isErased = false;
            readIdents = _3012_recIdents;
          }
        } else if (_source130.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _3013___mcc_h52 = _source130.dtor_Tuple_a0;
          bool _3014_isDatatype = _2985___mcc_h45;
          bool _3015_isConstant = _2984___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3016_field = _2983___mcc_h43;
          DAST._IExpression _3017_on = _2982___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3018_onString;
            bool _3019_onOwned;
            bool _3020_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3021_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1530;
            bool _out1531;
            bool _out1532;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1533;
            DCOMP.COMP.GenExpr(_3017_on, selfIdent, @params, false, out _out1530, out _out1531, out _out1532, out _out1533);
            _3018_onString = _out1530;
            _3019_onOwned = _out1531;
            _3020_onErased = _out1532;
            _3021_recIdents = _out1533;
            if ((_3014_isDatatype) || (_3015_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3018_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3016_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3015_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3018_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3016_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3021_recIdents;
          }
        } else if (_source130.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3022___mcc_h54 = _source130.dtor_path;
          Dafny.ISequence<DAST._IType> _3023___mcc_h55 = _source130.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _3024___mcc_h56 = _source130.dtor_args;
          bool _3025_isDatatype = _2985___mcc_h45;
          bool _3026_isConstant = _2984___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3027_field = _2983___mcc_h43;
          DAST._IExpression _3028_on = _2982___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3029_onString;
            bool _3030_onOwned;
            bool _3031_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3032_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1534;
            bool _out1535;
            bool _out1536;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1537;
            DCOMP.COMP.GenExpr(_3028_on, selfIdent, @params, false, out _out1534, out _out1535, out _out1536, out _out1537);
            _3029_onString = _out1534;
            _3030_onOwned = _out1535;
            _3031_onErased = _out1536;
            _3032_recIdents = _out1537;
            if ((_3025_isDatatype) || (_3026_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3029_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3027_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3026_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3029_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3027_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3032_recIdents;
          }
        } else if (_source130.is_NewArray) {
          Dafny.ISequence<DAST._IExpression> _3033___mcc_h60 = _source130.dtor_dims;
          DAST._IType _3034___mcc_h61 = _source130.dtor_typ;
          bool _3035_isDatatype = _2985___mcc_h45;
          bool _3036_isConstant = _2984___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3037_field = _2983___mcc_h43;
          DAST._IExpression _3038_on = _2982___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3039_onString;
            bool _3040_onOwned;
            bool _3041_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3042_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1538;
            bool _out1539;
            bool _out1540;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1541;
            DCOMP.COMP.GenExpr(_3038_on, selfIdent, @params, false, out _out1538, out _out1539, out _out1540, out _out1541);
            _3039_onString = _out1538;
            _3040_onOwned = _out1539;
            _3041_onErased = _out1540;
            _3042_recIdents = _out1541;
            if ((_3035_isDatatype) || (_3036_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3039_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3037_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3036_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3039_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3037_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3042_recIdents;
          }
        } else if (_source130.is_DatatypeValue) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3043___mcc_h64 = _source130.dtor_path;
          Dafny.ISequence<DAST._IType> _3044___mcc_h65 = _source130.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _3045___mcc_h66 = _source130.dtor_variant;
          bool _3046___mcc_h67 = _source130.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _3047___mcc_h68 = _source130.dtor_contents;
          bool _3048_isDatatype = _2985___mcc_h45;
          bool _3049_isConstant = _2984___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3050_field = _2983___mcc_h43;
          DAST._IExpression _3051_on = _2982___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3052_onString;
            bool _3053_onOwned;
            bool _3054_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3055_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1542;
            bool _out1543;
            bool _out1544;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1545;
            DCOMP.COMP.GenExpr(_3051_on, selfIdent, @params, false, out _out1542, out _out1543, out _out1544, out _out1545);
            _3052_onString = _out1542;
            _3053_onOwned = _out1543;
            _3054_onErased = _out1544;
            _3055_recIdents = _out1545;
            if ((_3048_isDatatype) || (_3049_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3052_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3050_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3049_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3052_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3050_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3055_recIdents;
          }
        } else if (_source130.is_Convert) {
          DAST._IExpression _3056___mcc_h74 = _source130.dtor_value;
          DAST._IType _3057___mcc_h75 = _source130.dtor_from;
          DAST._IType _3058___mcc_h76 = _source130.dtor_typ;
          bool _3059_isDatatype = _2985___mcc_h45;
          bool _3060_isConstant = _2984___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3061_field = _2983___mcc_h43;
          DAST._IExpression _3062_on = _2982___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3063_onString;
            bool _3064_onOwned;
            bool _3065_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3066_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1546;
            bool _out1547;
            bool _out1548;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1549;
            DCOMP.COMP.GenExpr(_3062_on, selfIdent, @params, false, out _out1546, out _out1547, out _out1548, out _out1549);
            _3063_onString = _out1546;
            _3064_onOwned = _out1547;
            _3065_onErased = _out1548;
            _3066_recIdents = _out1549;
            if ((_3059_isDatatype) || (_3060_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3063_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3061_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3060_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3063_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3061_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3066_recIdents;
          }
        } else if (_source130.is_SeqConstruct) {
          DAST._IExpression _3067___mcc_h80 = _source130.dtor_length;
          DAST._IExpression _3068___mcc_h81 = _source130.dtor_elem;
          bool _3069_isDatatype = _2985___mcc_h45;
          bool _3070_isConstant = _2984___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3071_field = _2983___mcc_h43;
          DAST._IExpression _3072_on = _2982___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3073_onString;
            bool _3074_onOwned;
            bool _3075_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3076_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1550;
            bool _out1551;
            bool _out1552;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1553;
            DCOMP.COMP.GenExpr(_3072_on, selfIdent, @params, false, out _out1550, out _out1551, out _out1552, out _out1553);
            _3073_onString = _out1550;
            _3074_onOwned = _out1551;
            _3075_onErased = _out1552;
            _3076_recIdents = _out1553;
            if ((_3069_isDatatype) || (_3070_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3073_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3071_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3070_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3073_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3071_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3076_recIdents;
          }
        } else if (_source130.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _3077___mcc_h84 = _source130.dtor_elements;
          DAST._IType _3078___mcc_h85 = _source130.dtor_typ;
          bool _3079_isDatatype = _2985___mcc_h45;
          bool _3080_isConstant = _2984___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3081_field = _2983___mcc_h43;
          DAST._IExpression _3082_on = _2982___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3083_onString;
            bool _3084_onOwned;
            bool _3085_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3086_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1554;
            bool _out1555;
            bool _out1556;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1557;
            DCOMP.COMP.GenExpr(_3082_on, selfIdent, @params, false, out _out1554, out _out1555, out _out1556, out _out1557);
            _3083_onString = _out1554;
            _3084_onOwned = _out1555;
            _3085_onErased = _out1556;
            _3086_recIdents = _out1557;
            if ((_3079_isDatatype) || (_3080_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3083_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3081_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3080_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3083_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3081_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3086_recIdents;
          }
        } else if (_source130.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _3087___mcc_h88 = _source130.dtor_elements;
          bool _3088_isDatatype = _2985___mcc_h45;
          bool _3089_isConstant = _2984___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3090_field = _2983___mcc_h43;
          DAST._IExpression _3091_on = _2982___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3092_onString;
            bool _3093_onOwned;
            bool _3094_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3095_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1558;
            bool _out1559;
            bool _out1560;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1561;
            DCOMP.COMP.GenExpr(_3091_on, selfIdent, @params, false, out _out1558, out _out1559, out _out1560, out _out1561);
            _3092_onString = _out1558;
            _3093_onOwned = _out1559;
            _3094_onErased = _out1560;
            _3095_recIdents = _out1561;
            if ((_3088_isDatatype) || (_3089_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3092_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3090_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3089_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3092_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3090_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3095_recIdents;
          }
        } else if (_source130.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3096___mcc_h90 = _source130.dtor_mapElems;
          bool _3097_isDatatype = _2985___mcc_h45;
          bool _3098_isConstant = _2984___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3099_field = _2983___mcc_h43;
          DAST._IExpression _3100_on = _2982___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3101_onString;
            bool _3102_onOwned;
            bool _3103_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3104_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1562;
            bool _out1563;
            bool _out1564;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1565;
            DCOMP.COMP.GenExpr(_3100_on, selfIdent, @params, false, out _out1562, out _out1563, out _out1564, out _out1565);
            _3101_onString = _out1562;
            _3102_onOwned = _out1563;
            _3103_onErased = _out1564;
            _3104_recIdents = _out1565;
            if ((_3097_isDatatype) || (_3098_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3101_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3099_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3098_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3101_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3099_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3104_recIdents;
          }
        } else if (_source130.is_This) {
          bool _3105_isDatatype = _2985___mcc_h45;
          bool _3106_isConstant = _2984___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3107_field = _2983___mcc_h43;
          DAST._IExpression _3108_on = _2982___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3109_onString;
            bool _3110_onOwned;
            bool _3111_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3112_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1566;
            bool _out1567;
            bool _out1568;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1569;
            DCOMP.COMP.GenExpr(_3108_on, selfIdent, @params, false, out _out1566, out _out1567, out _out1568, out _out1569);
            _3109_onString = _out1566;
            _3110_onOwned = _out1567;
            _3111_onErased = _out1568;
            _3112_recIdents = _out1569;
            if ((_3105_isDatatype) || (_3106_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3109_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3107_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3106_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3109_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3107_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3112_recIdents;
          }
        } else if (_source130.is_Ite) {
          DAST._IExpression _3113___mcc_h92 = _source130.dtor_cond;
          DAST._IExpression _3114___mcc_h93 = _source130.dtor_thn;
          DAST._IExpression _3115___mcc_h94 = _source130.dtor_els;
          bool _3116_isDatatype = _2985___mcc_h45;
          bool _3117_isConstant = _2984___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3118_field = _2983___mcc_h43;
          DAST._IExpression _3119_on = _2982___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3120_onString;
            bool _3121_onOwned;
            bool _3122_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3123_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1570;
            bool _out1571;
            bool _out1572;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1573;
            DCOMP.COMP.GenExpr(_3119_on, selfIdent, @params, false, out _out1570, out _out1571, out _out1572, out _out1573);
            _3120_onString = _out1570;
            _3121_onOwned = _out1571;
            _3122_onErased = _out1572;
            _3123_recIdents = _out1573;
            if ((_3116_isDatatype) || (_3117_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3120_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3118_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3117_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3120_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3118_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3123_recIdents;
          }
        } else if (_source130.is_UnOp) {
          DAST._IUnaryOp _3124___mcc_h98 = _source130.dtor_unOp;
          DAST._IExpression _3125___mcc_h99 = _source130.dtor_expr;
          bool _3126_isDatatype = _2985___mcc_h45;
          bool _3127_isConstant = _2984___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3128_field = _2983___mcc_h43;
          DAST._IExpression _3129_on = _2982___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3130_onString;
            bool _3131_onOwned;
            bool _3132_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3133_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1574;
            bool _out1575;
            bool _out1576;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1577;
            DCOMP.COMP.GenExpr(_3129_on, selfIdent, @params, false, out _out1574, out _out1575, out _out1576, out _out1577);
            _3130_onString = _out1574;
            _3131_onOwned = _out1575;
            _3132_onErased = _out1576;
            _3133_recIdents = _out1577;
            if ((_3126_isDatatype) || (_3127_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3130_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3128_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3127_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3130_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3128_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3133_recIdents;
          }
        } else if (_source130.is_BinOp) {
          DAST._IBinOp _3134___mcc_h102 = _source130.dtor_op;
          DAST._IExpression _3135___mcc_h103 = _source130.dtor_left;
          DAST._IExpression _3136___mcc_h104 = _source130.dtor_right;
          bool _3137_isDatatype = _2985___mcc_h45;
          bool _3138_isConstant = _2984___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3139_field = _2983___mcc_h43;
          DAST._IExpression _3140_on = _2982___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3141_onString;
            bool _3142_onOwned;
            bool _3143_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3144_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1578;
            bool _out1579;
            bool _out1580;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1581;
            DCOMP.COMP.GenExpr(_3140_on, selfIdent, @params, false, out _out1578, out _out1579, out _out1580, out _out1581);
            _3141_onString = _out1578;
            _3142_onOwned = _out1579;
            _3143_onErased = _out1580;
            _3144_recIdents = _out1581;
            if ((_3137_isDatatype) || (_3138_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3141_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3139_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3138_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3141_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3139_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3144_recIdents;
          }
        } else if (_source130.is_ArrayLen) {
          DAST._IExpression _3145___mcc_h108 = _source130.dtor_expr;
          BigInteger _3146___mcc_h109 = _source130.dtor_dim;
          bool _3147_isDatatype = _2985___mcc_h45;
          bool _3148_isConstant = _2984___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3149_field = _2983___mcc_h43;
          DAST._IExpression _3150_on = _2982___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3151_onString;
            bool _3152_onOwned;
            bool _3153_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3154_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1582;
            bool _out1583;
            bool _out1584;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1585;
            DCOMP.COMP.GenExpr(_3150_on, selfIdent, @params, false, out _out1582, out _out1583, out _out1584, out _out1585);
            _3151_onString = _out1582;
            _3152_onOwned = _out1583;
            _3153_onErased = _out1584;
            _3154_recIdents = _out1585;
            if ((_3147_isDatatype) || (_3148_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3151_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3149_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3148_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3151_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3149_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3154_recIdents;
          }
        } else if (_source130.is_Select) {
          DAST._IExpression _3155___mcc_h112 = _source130.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _3156___mcc_h113 = _source130.dtor_field;
          bool _3157___mcc_h114 = _source130.dtor_isConstant;
          bool _3158___mcc_h115 = _source130.dtor_onDatatype;
          bool _3159_isDatatype = _2985___mcc_h45;
          bool _3160_isConstant = _2984___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3161_field = _2983___mcc_h43;
          DAST._IExpression _3162_on = _2982___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3163_onString;
            bool _3164_onOwned;
            bool _3165_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3166_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1586;
            bool _out1587;
            bool _out1588;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1589;
            DCOMP.COMP.GenExpr(_3162_on, selfIdent, @params, false, out _out1586, out _out1587, out _out1588, out _out1589);
            _3163_onString = _out1586;
            _3164_onOwned = _out1587;
            _3165_onErased = _out1588;
            _3166_recIdents = _out1589;
            if ((_3159_isDatatype) || (_3160_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3163_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3161_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3160_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3163_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3161_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3166_recIdents;
          }
        } else if (_source130.is_SelectFn) {
          DAST._IExpression _3167___mcc_h120 = _source130.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _3168___mcc_h121 = _source130.dtor_field;
          bool _3169___mcc_h122 = _source130.dtor_onDatatype;
          bool _3170___mcc_h123 = _source130.dtor_isStatic;
          BigInteger _3171___mcc_h124 = _source130.dtor_arity;
          bool _3172_isDatatype = _2985___mcc_h45;
          bool _3173_isConstant = _2984___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3174_field = _2983___mcc_h43;
          DAST._IExpression _3175_on = _2982___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3176_onString;
            bool _3177_onOwned;
            bool _3178_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3179_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1590;
            bool _out1591;
            bool _out1592;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1593;
            DCOMP.COMP.GenExpr(_3175_on, selfIdent, @params, false, out _out1590, out _out1591, out _out1592, out _out1593);
            _3176_onString = _out1590;
            _3177_onOwned = _out1591;
            _3178_onErased = _out1592;
            _3179_recIdents = _out1593;
            if ((_3172_isDatatype) || (_3173_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3176_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3174_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3173_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3176_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3174_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3179_recIdents;
          }
        } else if (_source130.is_Index) {
          DAST._IExpression _3180___mcc_h130 = _source130.dtor_expr;
          DAST._ICollKind _3181___mcc_h131 = _source130.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _3182___mcc_h132 = _source130.dtor_indices;
          bool _3183_isDatatype = _2985___mcc_h45;
          bool _3184_isConstant = _2984___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3185_field = _2983___mcc_h43;
          DAST._IExpression _3186_on = _2982___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3187_onString;
            bool _3188_onOwned;
            bool _3189_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3190_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1594;
            bool _out1595;
            bool _out1596;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1597;
            DCOMP.COMP.GenExpr(_3186_on, selfIdent, @params, false, out _out1594, out _out1595, out _out1596, out _out1597);
            _3187_onString = _out1594;
            _3188_onOwned = _out1595;
            _3189_onErased = _out1596;
            _3190_recIdents = _out1597;
            if ((_3183_isDatatype) || (_3184_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3187_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3185_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3184_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3187_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3185_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3190_recIdents;
          }
        } else if (_source130.is_IndexRange) {
          DAST._IExpression _3191___mcc_h136 = _source130.dtor_expr;
          bool _3192___mcc_h137 = _source130.dtor_isArray;
          DAST._IOptional<DAST._IExpression> _3193___mcc_h138 = _source130.dtor_low;
          DAST._IOptional<DAST._IExpression> _3194___mcc_h139 = _source130.dtor_high;
          bool _3195_isDatatype = _2985___mcc_h45;
          bool _3196_isConstant = _2984___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3197_field = _2983___mcc_h43;
          DAST._IExpression _3198_on = _2982___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3199_onString;
            bool _3200_onOwned;
            bool _3201_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3202_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1598;
            bool _out1599;
            bool _out1600;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1601;
            DCOMP.COMP.GenExpr(_3198_on, selfIdent, @params, false, out _out1598, out _out1599, out _out1600, out _out1601);
            _3199_onString = _out1598;
            _3200_onOwned = _out1599;
            _3201_onErased = _out1600;
            _3202_recIdents = _out1601;
            if ((_3195_isDatatype) || (_3196_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3199_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3197_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3196_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3199_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3197_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3202_recIdents;
          }
        } else if (_source130.is_TupleSelect) {
          DAST._IExpression _3203___mcc_h144 = _source130.dtor_expr;
          BigInteger _3204___mcc_h145 = _source130.dtor_index;
          bool _3205_isDatatype = _2985___mcc_h45;
          bool _3206_isConstant = _2984___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3207_field = _2983___mcc_h43;
          DAST._IExpression _3208_on = _2982___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3209_onString;
            bool _3210_onOwned;
            bool _3211_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3212_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1602;
            bool _out1603;
            bool _out1604;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1605;
            DCOMP.COMP.GenExpr(_3208_on, selfIdent, @params, false, out _out1602, out _out1603, out _out1604, out _out1605);
            _3209_onString = _out1602;
            _3210_onOwned = _out1603;
            _3211_onErased = _out1604;
            _3212_recIdents = _out1605;
            if ((_3205_isDatatype) || (_3206_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3209_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3207_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3206_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3209_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3207_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3212_recIdents;
          }
        } else if (_source130.is_Call) {
          DAST._IExpression _3213___mcc_h148 = _source130.dtor_on;
          Dafny.ISequence<Dafny.Rune> _3214___mcc_h149 = _source130.dtor_name;
          Dafny.ISequence<DAST._IType> _3215___mcc_h150 = _source130.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _3216___mcc_h151 = _source130.dtor_args;
          bool _3217_isDatatype = _2985___mcc_h45;
          bool _3218_isConstant = _2984___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3219_field = _2983___mcc_h43;
          DAST._IExpression _3220_on = _2982___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3221_onString;
            bool _3222_onOwned;
            bool _3223_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3224_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1606;
            bool _out1607;
            bool _out1608;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1609;
            DCOMP.COMP.GenExpr(_3220_on, selfIdent, @params, false, out _out1606, out _out1607, out _out1608, out _out1609);
            _3221_onString = _out1606;
            _3222_onOwned = _out1607;
            _3223_onErased = _out1608;
            _3224_recIdents = _out1609;
            if ((_3217_isDatatype) || (_3218_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3221_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3219_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3218_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3221_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3219_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3224_recIdents;
          }
        } else if (_source130.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _3225___mcc_h156 = _source130.dtor_params;
          DAST._IType _3226___mcc_h157 = _source130.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _3227___mcc_h158 = _source130.dtor_body;
          bool _3228_isDatatype = _2985___mcc_h45;
          bool _3229_isConstant = _2984___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3230_field = _2983___mcc_h43;
          DAST._IExpression _3231_on = _2982___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3232_onString;
            bool _3233_onOwned;
            bool _3234_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3235_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1610;
            bool _out1611;
            bool _out1612;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1613;
            DCOMP.COMP.GenExpr(_3231_on, selfIdent, @params, false, out _out1610, out _out1611, out _out1612, out _out1613);
            _3232_onString = _out1610;
            _3233_onOwned = _out1611;
            _3234_onErased = _out1612;
            _3235_recIdents = _out1613;
            if ((_3228_isDatatype) || (_3229_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3232_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3230_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3229_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3232_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3230_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3235_recIdents;
          }
        } else if (_source130.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3236___mcc_h162 = _source130.dtor_values;
          DAST._IType _3237___mcc_h163 = _source130.dtor_retType;
          DAST._IExpression _3238___mcc_h164 = _source130.dtor_expr;
          bool _3239_isDatatype = _2985___mcc_h45;
          bool _3240_isConstant = _2984___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3241_field = _2983___mcc_h43;
          DAST._IExpression _3242_on = _2982___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3243_onString;
            bool _3244_onOwned;
            bool _3245_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3246_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1614;
            bool _out1615;
            bool _out1616;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1617;
            DCOMP.COMP.GenExpr(_3242_on, selfIdent, @params, false, out _out1614, out _out1615, out _out1616, out _out1617);
            _3243_onString = _out1614;
            _3244_onOwned = _out1615;
            _3245_onErased = _out1616;
            _3246_recIdents = _out1617;
            if ((_3239_isDatatype) || (_3240_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3243_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3241_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3240_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3243_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3241_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3246_recIdents;
          }
        } else if (_source130.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _3247___mcc_h168 = _source130.dtor_name;
          DAST._IType _3248___mcc_h169 = _source130.dtor_typ;
          DAST._IExpression _3249___mcc_h170 = _source130.dtor_value;
          DAST._IExpression _3250___mcc_h171 = _source130.dtor_iifeBody;
          bool _3251_isDatatype = _2985___mcc_h45;
          bool _3252_isConstant = _2984___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3253_field = _2983___mcc_h43;
          DAST._IExpression _3254_on = _2982___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3255_onString;
            bool _3256_onOwned;
            bool _3257_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3258_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1618;
            bool _out1619;
            bool _out1620;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1621;
            DCOMP.COMP.GenExpr(_3254_on, selfIdent, @params, false, out _out1618, out _out1619, out _out1620, out _out1621);
            _3255_onString = _out1618;
            _3256_onOwned = _out1619;
            _3257_onErased = _out1620;
            _3258_recIdents = _out1621;
            if ((_3251_isDatatype) || (_3252_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3255_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3253_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3252_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3255_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3253_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3258_recIdents;
          }
        } else if (_source130.is_Apply) {
          DAST._IExpression _3259___mcc_h176 = _source130.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _3260___mcc_h177 = _source130.dtor_args;
          bool _3261_isDatatype = _2985___mcc_h45;
          bool _3262_isConstant = _2984___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3263_field = _2983___mcc_h43;
          DAST._IExpression _3264_on = _2982___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3265_onString;
            bool _3266_onOwned;
            bool _3267_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3268_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1622;
            bool _out1623;
            bool _out1624;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1625;
            DCOMP.COMP.GenExpr(_3264_on, selfIdent, @params, false, out _out1622, out _out1623, out _out1624, out _out1625);
            _3265_onString = _out1622;
            _3266_onOwned = _out1623;
            _3267_onErased = _out1624;
            _3268_recIdents = _out1625;
            if ((_3261_isDatatype) || (_3262_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3265_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3263_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3262_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3265_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3263_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3268_recIdents;
          }
        } else if (_source130.is_TypeTest) {
          DAST._IExpression _3269___mcc_h180 = _source130.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3270___mcc_h181 = _source130.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _3271___mcc_h182 = _source130.dtor_variant;
          bool _3272_isDatatype = _2985___mcc_h45;
          bool _3273_isConstant = _2984___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3274_field = _2983___mcc_h43;
          DAST._IExpression _3275_on = _2982___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3276_onString;
            bool _3277_onOwned;
            bool _3278_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3279_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1626;
            bool _out1627;
            bool _out1628;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1629;
            DCOMP.COMP.GenExpr(_3275_on, selfIdent, @params, false, out _out1626, out _out1627, out _out1628, out _out1629);
            _3276_onString = _out1626;
            _3277_onOwned = _out1627;
            _3278_onErased = _out1628;
            _3279_recIdents = _out1629;
            if ((_3272_isDatatype) || (_3273_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3276_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3274_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3273_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3276_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3274_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3279_recIdents;
          }
        } else if (_source130.is_InitializationValue) {
          DAST._IType _3280___mcc_h186 = _source130.dtor_typ;
          bool _3281_isDatatype = _2985___mcc_h45;
          bool _3282_isConstant = _2984___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3283_field = _2983___mcc_h43;
          DAST._IExpression _3284_on = _2982___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3285_onString;
            bool _3286_onOwned;
            bool _3287_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3288_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1630;
            bool _out1631;
            bool _out1632;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1633;
            DCOMP.COMP.GenExpr(_3284_on, selfIdent, @params, false, out _out1630, out _out1631, out _out1632, out _out1633);
            _3285_onString = _out1630;
            _3286_onOwned = _out1631;
            _3287_onErased = _out1632;
            _3288_recIdents = _out1633;
            if ((_3281_isDatatype) || (_3282_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3285_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3283_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3282_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3285_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3283_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3288_recIdents;
          }
        } else if (_source130.is_BoolBoundedPool) {
          bool _3289_isDatatype = _2985___mcc_h45;
          bool _3290_isConstant = _2984___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3291_field = _2983___mcc_h43;
          DAST._IExpression _3292_on = _2982___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3293_onString;
            bool _3294_onOwned;
            bool _3295_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3296_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1634;
            bool _out1635;
            bool _out1636;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1637;
            DCOMP.COMP.GenExpr(_3292_on, selfIdent, @params, false, out _out1634, out _out1635, out _out1636, out _out1637);
            _3293_onString = _out1634;
            _3294_onOwned = _out1635;
            _3295_onErased = _out1636;
            _3296_recIdents = _out1637;
            if ((_3289_isDatatype) || (_3290_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3293_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3291_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3290_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3293_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3291_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3296_recIdents;
          }
        } else if (_source130.is_SetBoundedPool) {
          DAST._IExpression _3297___mcc_h188 = _source130.dtor_of;
          bool _3298_isDatatype = _2985___mcc_h45;
          bool _3299_isConstant = _2984___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3300_field = _2983___mcc_h43;
          DAST._IExpression _3301_on = _2982___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3302_onString;
            bool _3303_onOwned;
            bool _3304_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3305_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1638;
            bool _out1639;
            bool _out1640;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1641;
            DCOMP.COMP.GenExpr(_3301_on, selfIdent, @params, false, out _out1638, out _out1639, out _out1640, out _out1641);
            _3302_onString = _out1638;
            _3303_onOwned = _out1639;
            _3304_onErased = _out1640;
            _3305_recIdents = _out1641;
            if ((_3298_isDatatype) || (_3299_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3302_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3300_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3299_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3302_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3300_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3305_recIdents;
          }
        } else if (_source130.is_SeqBoundedPool) {
          DAST._IExpression _3306___mcc_h190 = _source130.dtor_of;
          bool _3307___mcc_h191 = _source130.dtor_includeDuplicates;
          bool _3308_isDatatype = _2985___mcc_h45;
          bool _3309_isConstant = _2984___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3310_field = _2983___mcc_h43;
          DAST._IExpression _3311_on = _2982___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3312_onString;
            bool _3313_onOwned;
            bool _3314_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3315_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1642;
            bool _out1643;
            bool _out1644;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1645;
            DCOMP.COMP.GenExpr(_3311_on, selfIdent, @params, false, out _out1642, out _out1643, out _out1644, out _out1645);
            _3312_onString = _out1642;
            _3313_onOwned = _out1643;
            _3314_onErased = _out1644;
            _3315_recIdents = _out1645;
            if ((_3308_isDatatype) || (_3309_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3312_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3310_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3309_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3312_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3310_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3315_recIdents;
          }
        } else {
          DAST._IExpression _3316___mcc_h194 = _source130.dtor_lo;
          DAST._IExpression _3317___mcc_h195 = _source130.dtor_hi;
          bool _3318_isDatatype = _2985___mcc_h45;
          bool _3319_isConstant = _2984___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3320_field = _2983___mcc_h43;
          DAST._IExpression _3321_on = _2982___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3322_onString;
            bool _3323_onOwned;
            bool _3324_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3325_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1646;
            bool _out1647;
            bool _out1648;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1649;
            DCOMP.COMP.GenExpr(_3321_on, selfIdent, @params, false, out _out1646, out _out1647, out _out1648, out _out1649);
            _3322_onString = _out1646;
            _3323_onOwned = _out1647;
            _3324_onErased = _out1648;
            _3325_recIdents = _out1649;
            if ((_3318_isDatatype) || (_3319_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3322_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3320_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3319_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3322_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3320_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3325_recIdents;
          }
        }
      } else if (_source70.is_SelectFn) {
        DAST._IExpression _3326___mcc_h198 = _source70.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _3327___mcc_h199 = _source70.dtor_field;
        bool _3328___mcc_h200 = _source70.dtor_onDatatype;
        bool _3329___mcc_h201 = _source70.dtor_isStatic;
        BigInteger _3330___mcc_h202 = _source70.dtor_arity;
        BigInteger _3331_arity = _3330___mcc_h202;
        bool _3332_isStatic = _3329___mcc_h201;
        bool _3333_isDatatype = _3328___mcc_h200;
        Dafny.ISequence<Dafny.Rune> _3334_field = _3327___mcc_h199;
        DAST._IExpression _3335_on = _3326___mcc_h198;
        {
          Dafny.ISequence<Dafny.Rune> _3336_onString;
          bool _3337_onOwned;
          bool _3338___v82;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3339_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1650;
          bool _out1651;
          bool _out1652;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1653;
          DCOMP.COMP.GenExpr(_3335_on, selfIdent, @params, false, out _out1650, out _out1651, out _out1652, out _out1653);
          _3336_onString = _out1650;
          _3337_onOwned = _out1651;
          _3338___v82 = _out1652;
          _3339_recIdents = _out1653;
          if (_3332_isStatic) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3336_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _3334_field);
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _3336_onString), ((_3337_onOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _3340_args;
            _3340_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _3341_i;
            _3341_i = BigInteger.Zero;
            while ((_3341_i) < (_3331_arity)) {
              if ((_3341_i).Sign == 1) {
                _3340_args = Dafny.Sequence<Dafny.Rune>.Concat(_3340_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _3340_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3340_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), DCOMP.__default.natToString(_3341_i));
              _3341_i = (_3341_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _3340_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), _3334_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3340_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _3342_typeShape;
          _3342_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _3343_i;
          _3343_i = BigInteger.Zero;
          while ((_3343_i) < (_3331_arity)) {
            if ((_3343_i).Sign == 1) {
              _3342_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_3342_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _3342_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_3342_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _3343_i = (_3343_i) + (BigInteger.One);
          }
          _3342_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_3342_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper(::std::rc::Rc::new("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _3342_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
          readIdents = _3339_recIdents;
        }
      } else if (_source70.is_Index) {
        DAST._IExpression _3344___mcc_h203 = _source70.dtor_expr;
        DAST._ICollKind _3345___mcc_h204 = _source70.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _3346___mcc_h205 = _source70.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _3347_indices = _3346___mcc_h205;
        DAST._ICollKind _3348_collKind = _3345___mcc_h204;
        DAST._IExpression _3349_on = _3344___mcc_h203;
        {
          Dafny.ISequence<Dafny.Rune> _3350_onString;
          bool _3351_onOwned;
          bool _3352_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3353_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1654;
          bool _out1655;
          bool _out1656;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1657;
          DCOMP.COMP.GenExpr(_3349_on, selfIdent, @params, false, out _out1654, out _out1655, out _out1656, out _out1657);
          _3350_onString = _out1654;
          _3351_onOwned = _out1655;
          _3352_onErased = _out1656;
          _3353_recIdents = _out1657;
          readIdents = _3353_recIdents;
          s = _3350_onString;
          BigInteger _3354_i;
          _3354_i = BigInteger.Zero;
          while ((_3354_i) < (new BigInteger((_3347_indices).Count))) {
            if (object.Equals(_3348_collKind, DAST.CollKind.create_Array())) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
            }
            if (object.Equals(_3348_collKind, DAST.CollKind.create_Map())) {
              Dafny.ISequence<Dafny.Rune> _3355_idx;
              bool _3356_idxOwned;
              bool _3357_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3358_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1658;
              bool _out1659;
              bool _out1660;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1661;
              DCOMP.COMP.GenExpr((_3347_indices).Select(_3354_i), selfIdent, @params, false, out _out1658, out _out1659, out _out1660, out _out1661);
              _3355_idx = _out1658;
              _3356_idxOwned = _out1659;
              _3357_idxErased = _out1660;
              _3358_recIdentsIdx = _out1661;
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[")), ((_3356_idxOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), _3355_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3358_recIdentsIdx);
            } else {
              Dafny.ISequence<Dafny.Rune> _3359_idx;
              bool _3360___v83;
              bool _3361_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3362_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1662;
              bool _out1663;
              bool _out1664;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1665;
              DCOMP.COMP.GenExpr((_3347_indices).Select(_3354_i), selfIdent, @params, true, out _out1662, out _out1663, out _out1664, out _out1665);
              _3359_idx = _out1662;
              _3360___v83 = _out1663;
              _3361_idxErased = _out1664;
              _3362_recIdentsIdx = _out1665;
              if (!(_3361_idxErased)) {
                _3359_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3359_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[<usize as ::dafny_runtime::NumCast>::from(")), _3359_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3362_recIdentsIdx);
            }
            _3354_i = (_3354_i) + (BigInteger.One);
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = false;
          }
          isErased = _3352_onErased;
        }
      } else if (_source70.is_IndexRange) {
        DAST._IExpression _3363___mcc_h206 = _source70.dtor_expr;
        bool _3364___mcc_h207 = _source70.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _3365___mcc_h208 = _source70.dtor_low;
        DAST._IOptional<DAST._IExpression> _3366___mcc_h209 = _source70.dtor_high;
        DAST._IOptional<DAST._IExpression> _3367_high = _3366___mcc_h209;
        DAST._IOptional<DAST._IExpression> _3368_low = _3365___mcc_h208;
        bool _3369_isArray = _3364___mcc_h207;
        DAST._IExpression _3370_on = _3363___mcc_h206;
        {
          Dafny.ISequence<Dafny.Rune> _3371_onString;
          bool _3372_onOwned;
          bool _3373_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3374_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1666;
          bool _out1667;
          bool _out1668;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1669;
          DCOMP.COMP.GenExpr(_3370_on, selfIdent, @params, false, out _out1666, out _out1667, out _out1668, out _out1669);
          _3371_onString = _out1666;
          _3372_onOwned = _out1667;
          _3373_onErased = _out1668;
          _3374_recIdents = _out1669;
          readIdents = _3374_recIdents;
          s = _3371_onString;
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _3375_lowString;
          _3375_lowString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None();
          DAST._IOptional<DAST._IExpression> _source131 = _3368_low;
          if (_source131.is_Some) {
            DAST._IExpression _3376___mcc_h1195 = _source131.dtor_Some_a0;
            DAST._IExpression _3377_l = _3376___mcc_h1195;
            {
              Dafny.ISequence<Dafny.Rune> _3378_lString;
              bool _3379___v84;
              bool _3380_lErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3381_recIdentsL;
              Dafny.ISequence<Dafny.Rune> _out1670;
              bool _out1671;
              bool _out1672;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1673;
              DCOMP.COMP.GenExpr(_3377_l, selfIdent, @params, true, out _out1670, out _out1671, out _out1672, out _out1673);
              _3378_lString = _out1670;
              _3379___v84 = _out1671;
              _3380_lErased = _out1672;
              _3381_recIdentsL = _out1673;
              if (!(_3380_lErased)) {
                _3378_lString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3378_lString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _3375_lowString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(_3378_lString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3381_recIdentsL);
            }
          } else {
          }
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _3382_highString;
          _3382_highString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None();
          DAST._IOptional<DAST._IExpression> _source132 = _3367_high;
          if (_source132.is_Some) {
            DAST._IExpression _3383___mcc_h1196 = _source132.dtor_Some_a0;
            DAST._IExpression _3384_h = _3383___mcc_h1196;
            {
              Dafny.ISequence<Dafny.Rune> _3385_hString;
              bool _3386___v85;
              bool _3387_hErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3388_recIdentsH;
              Dafny.ISequence<Dafny.Rune> _out1674;
              bool _out1675;
              bool _out1676;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1677;
              DCOMP.COMP.GenExpr(_3384_h, selfIdent, @params, true, out _out1674, out _out1675, out _out1676, out _out1677);
              _3385_hString = _out1674;
              _3386___v85 = _out1675;
              _3387_hErased = _out1676;
              _3388_recIdentsH = _out1677;
              if (!(_3387_hErased)) {
                _3385_hString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3385_hString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _3382_highString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(_3385_hString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3388_recIdentsH);
            }
          } else {
          }
          if (_3369_isArray) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[")), ((System.Func<DAST._IOptional<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source133) => {
            if (_source133.is_Some) {
              Dafny.ISequence<Dafny.Rune> _3389___mcc_h1197 = _source133.dtor_Some_a0;
              Dafny.ISequence<Dafny.Rune> _3390_l = _3389___mcc_h1197;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _3390_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            }
          }))(_3375_lowString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("..")), ((System.Func<DAST._IOptional<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source134) => {
            if (_source134.is_Some) {
              Dafny.ISequence<Dafny.Rune> _3391___mcc_h1198 = _source134.dtor_Some_a0;
              Dafny.ISequence<Dafny.Rune> _3392_h = _3391___mcc_h1198;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _3392_h), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            }
          }))(_3382_highString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
          isErased = _3373_onErased;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".to_vec())"));
          isOwned = true;
        }
      } else if (_source70.is_TupleSelect) {
        DAST._IExpression _3393___mcc_h210 = _source70.dtor_expr;
        BigInteger _3394___mcc_h211 = _source70.dtor_index;
        BigInteger _3395_idx = _3394___mcc_h211;
        DAST._IExpression _3396_on = _3393___mcc_h210;
        {
          Dafny.ISequence<Dafny.Rune> _3397_onString;
          bool _3398___v86;
          bool _3399_tupErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3400_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1678;
          bool _out1679;
          bool _out1680;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1681;
          DCOMP.COMP.GenExpr(_3396_on, selfIdent, @params, false, out _out1678, out _out1679, out _out1680, out _out1681);
          _3397_onString = _out1678;
          _3398___v86 = _out1679;
          _3399_tupErased = _out1680;
          _3400_recIdents = _out1681;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3397_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.natToString(_3395_idx));
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
            isOwned = false;
          }
          isErased = _3399_tupErased;
          readIdents = _3400_recIdents;
        }
      } else if (_source70.is_Call) {
        DAST._IExpression _3401___mcc_h212 = _source70.dtor_on;
        Dafny.ISequence<Dafny.Rune> _3402___mcc_h213 = _source70.dtor_name;
        Dafny.ISequence<DAST._IType> _3403___mcc_h214 = _source70.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _3404___mcc_h215 = _source70.dtor_args;
        Dafny.ISequence<DAST._IExpression> _3405_args = _3404___mcc_h215;
        Dafny.ISequence<DAST._IType> _3406_typeArgs = _3403___mcc_h214;
        Dafny.ISequence<Dafny.Rune> _3407_name = _3402___mcc_h213;
        DAST._IExpression _3408_on = _3401___mcc_h212;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3409_typeArgString;
          _3409_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_3406_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _3410_typeI;
            _3410_typeI = BigInteger.Zero;
            _3409_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_3410_typeI) < (new BigInteger((_3406_typeArgs).Count))) {
              if ((_3410_typeI).Sign == 1) {
                _3409_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3409_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _3411_typeString;
              Dafny.ISequence<Dafny.Rune> _out1682;
              _out1682 = DCOMP.COMP.GenType((_3406_typeArgs).Select(_3410_typeI), false, false);
              _3411_typeString = _out1682;
              _3409_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3409_typeArgString, _3411_typeString);
              _3410_typeI = (_3410_typeI) + (BigInteger.One);
            }
            _3409_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3409_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _3412_argString;
          _3412_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _3413_i;
          _3413_i = BigInteger.Zero;
          while ((_3413_i) < (new BigInteger((_3405_args).Count))) {
            if ((_3413_i).Sign == 1) {
              _3412_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3412_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3414_argExpr;
            bool _3415_isOwned;
            bool _3416_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3417_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1683;
            bool _out1684;
            bool _out1685;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1686;
            DCOMP.COMP.GenExpr((_3405_args).Select(_3413_i), selfIdent, @params, false, out _out1683, out _out1684, out _out1685, out _out1686);
            _3414_argExpr = _out1683;
            _3415_isOwned = _out1684;
            _3416_argErased = _out1685;
            _3417_argIdents = _out1686;
            if (_3415_isOwned) {
              _3414_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _3414_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (!(_3416_argErased)) {
              _3414_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase("), _3414_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _3414_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::unerase("), _3414_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _3412_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3412_argString, _3414_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3417_argIdents);
            _3413_i = (_3413_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3418_enclosingString;
          bool _3419___v87;
          bool _3420___v88;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3421_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1687;
          bool _out1688;
          bool _out1689;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1690;
          DCOMP.COMP.GenExpr(_3408_on, selfIdent, @params, false, out _out1687, out _out1688, out _out1689, out _out1690);
          _3418_enclosingString = _out1687;
          _3419___v87 = _out1688;
          _3420___v88 = _out1689;
          _3421_recIdents = _out1690;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3421_recIdents);
          DAST._IExpression _source135 = _3408_on;
          if (_source135.is_Literal) {
            DAST._ILiteral _3422___mcc_h1199 = _source135.dtor_Literal_a0;
            {
              _3418_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3418_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3407_name)));
            }
          } else if (_source135.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _3423___mcc_h1201 = _source135.dtor_Ident_a0;
            {
              _3418_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3418_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3407_name)));
            }
          } else if (_source135.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3424___mcc_h1203 = _source135.dtor_Companion_a0;
            {
              _3418_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3418_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_3407_name)));
            }
          } else if (_source135.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _3425___mcc_h1205 = _source135.dtor_Tuple_a0;
            {
              _3418_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3418_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3407_name)));
            }
          } else if (_source135.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3426___mcc_h1207 = _source135.dtor_path;
            Dafny.ISequence<DAST._IType> _3427___mcc_h1208 = _source135.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _3428___mcc_h1209 = _source135.dtor_args;
            {
              _3418_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3418_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3407_name)));
            }
          } else if (_source135.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _3429___mcc_h1213 = _source135.dtor_dims;
            DAST._IType _3430___mcc_h1214 = _source135.dtor_typ;
            {
              _3418_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3418_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3407_name)));
            }
          } else if (_source135.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3431___mcc_h1217 = _source135.dtor_path;
            Dafny.ISequence<DAST._IType> _3432___mcc_h1218 = _source135.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _3433___mcc_h1219 = _source135.dtor_variant;
            bool _3434___mcc_h1220 = _source135.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _3435___mcc_h1221 = _source135.dtor_contents;
            {
              _3418_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3418_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3407_name)));
            }
          } else if (_source135.is_Convert) {
            DAST._IExpression _3436___mcc_h1227 = _source135.dtor_value;
            DAST._IType _3437___mcc_h1228 = _source135.dtor_from;
            DAST._IType _3438___mcc_h1229 = _source135.dtor_typ;
            {
              _3418_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3418_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3407_name)));
            }
          } else if (_source135.is_SeqConstruct) {
            DAST._IExpression _3439___mcc_h1233 = _source135.dtor_length;
            DAST._IExpression _3440___mcc_h1234 = _source135.dtor_elem;
            {
              _3418_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3418_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3407_name)));
            }
          } else if (_source135.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _3441___mcc_h1237 = _source135.dtor_elements;
            DAST._IType _3442___mcc_h1238 = _source135.dtor_typ;
            {
              _3418_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3418_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3407_name)));
            }
          } else if (_source135.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _3443___mcc_h1241 = _source135.dtor_elements;
            {
              _3418_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3418_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3407_name)));
            }
          } else if (_source135.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3444___mcc_h1243 = _source135.dtor_mapElems;
            {
              _3418_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3418_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3407_name)));
            }
          } else if (_source135.is_This) {
            {
              _3418_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3418_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3407_name)));
            }
          } else if (_source135.is_Ite) {
            DAST._IExpression _3445___mcc_h1245 = _source135.dtor_cond;
            DAST._IExpression _3446___mcc_h1246 = _source135.dtor_thn;
            DAST._IExpression _3447___mcc_h1247 = _source135.dtor_els;
            {
              _3418_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3418_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3407_name)));
            }
          } else if (_source135.is_UnOp) {
            DAST._IUnaryOp _3448___mcc_h1251 = _source135.dtor_unOp;
            DAST._IExpression _3449___mcc_h1252 = _source135.dtor_expr;
            {
              _3418_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3418_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3407_name)));
            }
          } else if (_source135.is_BinOp) {
            DAST._IBinOp _3450___mcc_h1255 = _source135.dtor_op;
            DAST._IExpression _3451___mcc_h1256 = _source135.dtor_left;
            DAST._IExpression _3452___mcc_h1257 = _source135.dtor_right;
            {
              _3418_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3418_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3407_name)));
            }
          } else if (_source135.is_ArrayLen) {
            DAST._IExpression _3453___mcc_h1261 = _source135.dtor_expr;
            BigInteger _3454___mcc_h1262 = _source135.dtor_dim;
            {
              _3418_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3418_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3407_name)));
            }
          } else if (_source135.is_Select) {
            DAST._IExpression _3455___mcc_h1265 = _source135.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _3456___mcc_h1266 = _source135.dtor_field;
            bool _3457___mcc_h1267 = _source135.dtor_isConstant;
            bool _3458___mcc_h1268 = _source135.dtor_onDatatype;
            {
              _3418_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3418_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3407_name)));
            }
          } else if (_source135.is_SelectFn) {
            DAST._IExpression _3459___mcc_h1273 = _source135.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _3460___mcc_h1274 = _source135.dtor_field;
            bool _3461___mcc_h1275 = _source135.dtor_onDatatype;
            bool _3462___mcc_h1276 = _source135.dtor_isStatic;
            BigInteger _3463___mcc_h1277 = _source135.dtor_arity;
            {
              _3418_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3418_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3407_name)));
            }
          } else if (_source135.is_Index) {
            DAST._IExpression _3464___mcc_h1283 = _source135.dtor_expr;
            DAST._ICollKind _3465___mcc_h1284 = _source135.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _3466___mcc_h1285 = _source135.dtor_indices;
            {
              _3418_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3418_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3407_name)));
            }
          } else if (_source135.is_IndexRange) {
            DAST._IExpression _3467___mcc_h1289 = _source135.dtor_expr;
            bool _3468___mcc_h1290 = _source135.dtor_isArray;
            DAST._IOptional<DAST._IExpression> _3469___mcc_h1291 = _source135.dtor_low;
            DAST._IOptional<DAST._IExpression> _3470___mcc_h1292 = _source135.dtor_high;
            {
              _3418_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3418_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3407_name)));
            }
          } else if (_source135.is_TupleSelect) {
            DAST._IExpression _3471___mcc_h1297 = _source135.dtor_expr;
            BigInteger _3472___mcc_h1298 = _source135.dtor_index;
            {
              _3418_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3418_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3407_name)));
            }
          } else if (_source135.is_Call) {
            DAST._IExpression _3473___mcc_h1301 = _source135.dtor_on;
            Dafny.ISequence<Dafny.Rune> _3474___mcc_h1302 = _source135.dtor_name;
            Dafny.ISequence<DAST._IType> _3475___mcc_h1303 = _source135.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _3476___mcc_h1304 = _source135.dtor_args;
            {
              _3418_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3418_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3407_name)));
            }
          } else if (_source135.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _3477___mcc_h1309 = _source135.dtor_params;
            DAST._IType _3478___mcc_h1310 = _source135.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _3479___mcc_h1311 = _source135.dtor_body;
            {
              _3418_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3418_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3407_name)));
            }
          } else if (_source135.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3480___mcc_h1315 = _source135.dtor_values;
            DAST._IType _3481___mcc_h1316 = _source135.dtor_retType;
            DAST._IExpression _3482___mcc_h1317 = _source135.dtor_expr;
            {
              _3418_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3418_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3407_name)));
            }
          } else if (_source135.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _3483___mcc_h1321 = _source135.dtor_name;
            DAST._IType _3484___mcc_h1322 = _source135.dtor_typ;
            DAST._IExpression _3485___mcc_h1323 = _source135.dtor_value;
            DAST._IExpression _3486___mcc_h1324 = _source135.dtor_iifeBody;
            {
              _3418_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3418_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3407_name)));
            }
          } else if (_source135.is_Apply) {
            DAST._IExpression _3487___mcc_h1329 = _source135.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _3488___mcc_h1330 = _source135.dtor_args;
            {
              _3418_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3418_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3407_name)));
            }
          } else if (_source135.is_TypeTest) {
            DAST._IExpression _3489___mcc_h1333 = _source135.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3490___mcc_h1334 = _source135.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _3491___mcc_h1335 = _source135.dtor_variant;
            {
              _3418_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3418_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3407_name)));
            }
          } else if (_source135.is_InitializationValue) {
            DAST._IType _3492___mcc_h1339 = _source135.dtor_typ;
            {
              _3418_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3418_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3407_name)));
            }
          } else if (_source135.is_BoolBoundedPool) {
            {
              _3418_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3418_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3407_name)));
            }
          } else if (_source135.is_SetBoundedPool) {
            DAST._IExpression _3493___mcc_h1341 = _source135.dtor_of;
            {
              _3418_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3418_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3407_name)));
            }
          } else if (_source135.is_SeqBoundedPool) {
            DAST._IExpression _3494___mcc_h1343 = _source135.dtor_of;
            bool _3495___mcc_h1344 = _source135.dtor_includeDuplicates;
            {
              _3418_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3418_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3407_name)));
            }
          } else {
            DAST._IExpression _3496___mcc_h1347 = _source135.dtor_lo;
            DAST._IExpression _3497___mcc_h1348 = _source135.dtor_hi;
            {
              _3418_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3418_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3407_name)));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3418_enclosingString, _3409_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3412_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source70.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _3498___mcc_h216 = _source70.dtor_params;
        DAST._IType _3499___mcc_h217 = _source70.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _3500___mcc_h218 = _source70.dtor_body;
        Dafny.ISequence<DAST._IStatement> _3501_body = _3500___mcc_h218;
        DAST._IType _3502_retType = _3499___mcc_h217;
        Dafny.ISequence<DAST._IFormal> _3503_params = _3498___mcc_h216;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3504_paramNames;
          _3504_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3505_i;
          _3505_i = BigInteger.Zero;
          while ((_3505_i) < (new BigInteger((_3503_params).Count))) {
            _3504_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_3504_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(((_3503_params).Select(_3505_i)).dtor_name));
            _3505_i = (_3505_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3506_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3507_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1691;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1692;
          DCOMP.COMP.GenStmts(_3501_body, ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())), _3504_paramNames, true, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), out _out1691, out _out1692);
          _3506_recursiveGen = _out1691;
          _3507_recIdents = _out1692;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3508_allReadCloned;
          _3508_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          while (!(_3507_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _3509_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_2 in (_3507_recIdents).Elements) {
              _3509_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_2;
              if ((_3507_recIdents).Contains(_3509_next)) {
                goto after__ASSIGN_SUCH_THAT_2;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 1933)");
          after__ASSIGN_SUCH_THAT_2:;
            if ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) && ((_3509_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              if (!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) {
                _3508_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(_3508_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let _this = self.clone();\n"));
              }
            } else if (!((_3504_paramNames).Contains(_3509_next))) {
              _3508_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3508_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_3509_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_3509_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3509_next));
            }
            _3507_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3507_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3509_next));
          }
          Dafny.ISequence<Dafny.Rune> _3510_paramsString;
          _3510_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Dafny.ISequence<Dafny.Rune> _3511_paramTypes;
          _3511_paramTypes = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _3505_i = BigInteger.Zero;
          while ((_3505_i) < (new BigInteger((_3503_params).Count))) {
            if ((_3505_i).Sign == 1) {
              _3510_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_3510_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              _3511_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_3511_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3512_typStr;
            Dafny.ISequence<Dafny.Rune> _out1693;
            _out1693 = DCOMP.COMP.GenType(((_3503_params).Select(_3505_i)).dtor_typ, false, true);
            _3512_typStr = _out1693;
            _3510_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3510_paramsString, ((_3503_params).Select(_3505_i)).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _3512_typStr);
            _3511_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3511_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _3512_typStr);
            _3505_i = (_3505_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3513_retTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1694;
          _out1694 = DCOMP.COMP.GenType(_3502_retType, false, true);
          _3513_retTypeGen = _out1694;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper::<::std::rc::Rc<dyn ::std::ops::Fn("), _3511_paramTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _3513_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>({\n")), _3508_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(move |")), _3510_paramsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| -> ")), _3513_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _3506_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})})"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source70.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3514___mcc_h219 = _source70.dtor_values;
        DAST._IType _3515___mcc_h220 = _source70.dtor_retType;
        DAST._IExpression _3516___mcc_h221 = _source70.dtor_expr;
        DAST._IExpression _3517_expr = _3516___mcc_h221;
        DAST._IType _3518_retType = _3515___mcc_h220;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3519_values = _3514___mcc_h219;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3520_paramNames;
          _3520_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3521_paramNamesSet;
          _3521_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3522_i;
          _3522_i = BigInteger.Zero;
          while ((_3522_i) < (new BigInteger((_3519_values).Count))) {
            _3520_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_3520_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((_3519_values).Select(_3522_i)).dtor__0).dtor_name));
            _3521_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3521_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((((_3519_values).Select(_3522_i)).dtor__0).dtor_name));
            _3522_i = (_3522_i) + (BigInteger.One);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          Dafny.ISequence<Dafny.Rune> _3523_paramsString;
          _3523_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _3522_i = BigInteger.Zero;
          while ((_3522_i) < (new BigInteger((_3519_values).Count))) {
            if ((_3522_i).Sign == 1) {
              _3523_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_3523_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3524_typStr;
            Dafny.ISequence<Dafny.Rune> _out1695;
            _out1695 = DCOMP.COMP.GenType((((_3519_values).Select(_3522_i)).dtor__0).dtor_typ, false, true);
            _3524_typStr = _out1695;
            Dafny.ISequence<Dafny.Rune> _3525_valueGen;
            bool _3526___v91;
            bool _3527_valueErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3528_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1696;
            bool _out1697;
            bool _out1698;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1699;
            DCOMP.COMP.GenExpr(((_3519_values).Select(_3522_i)).dtor__1, selfIdent, @params, true, out _out1696, out _out1697, out _out1698, out _out1699);
            _3525_valueGen = _out1696;
            _3526___v91 = _out1697;
            _3527_valueErased = _out1698;
            _3528_recIdents = _out1699;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent((((_3519_values).Select(_3522_i)).dtor__0).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _3524_typStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3528_recIdents);
            if (_3527_valueErased) {
              _3525_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3525_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _3525_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            _3522_i = (_3522_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3529_recGen;
          bool _3530_recOwned;
          bool _3531_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3532_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1700;
          bool _out1701;
          bool _out1702;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1703;
          DCOMP.COMP.GenExpr(_3517_expr, selfIdent, _3520_paramNames, mustOwn, out _out1700, out _out1701, out _out1702, out _out1703);
          _3529_recGen = _out1700;
          _3530_recOwned = _out1701;
          _3531_recErased = _out1702;
          _3532_recIdents = _out1703;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3532_recIdents, _3521_paramNamesSet);
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _3529_recGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = _3530_recOwned;
          isErased = _3531_recErased;
        }
      } else if (_source70.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _3533___mcc_h222 = _source70.dtor_name;
        DAST._IType _3534___mcc_h223 = _source70.dtor_typ;
        DAST._IExpression _3535___mcc_h224 = _source70.dtor_value;
        DAST._IExpression _3536___mcc_h225 = _source70.dtor_iifeBody;
        DAST._IExpression _3537_iifeBody = _3536___mcc_h225;
        DAST._IExpression _3538_value = _3535___mcc_h224;
        DAST._IType _3539_tpe = _3534___mcc_h223;
        Dafny.ISequence<Dafny.Rune> _3540_name = _3533___mcc_h222;
        {
          Dafny.ISequence<Dafny.Rune> _3541_valueGen;
          bool _3542___v92;
          bool _3543_valueErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3544_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1704;
          bool _out1705;
          bool _out1706;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1707;
          DCOMP.COMP.GenExpr(_3538_value, selfIdent, @params, true, out _out1704, out _out1705, out _out1706, out _out1707);
          _3541_valueGen = _out1704;
          _3542___v92 = _out1705;
          _3543_valueErased = _out1706;
          _3544_recIdents = _out1707;
          if (_3543_valueErased) {
            _3541_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3541_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _3544_recIdents;
          Dafny.ISequence<Dafny.Rune> _3545_valueTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1708;
          _out1708 = DCOMP.COMP.GenType(_3539_tpe, false, true);
          _3545_valueTypeGen = _out1708;
          Dafny.ISequence<Dafny.Rune> _3546_bodyGen;
          bool _3547___v93;
          bool _3548_bodyErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3549_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out1709;
          bool _out1710;
          bool _out1711;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1712;
          DCOMP.COMP.GenExpr(_3537_iifeBody, selfIdent, @params, true, out _out1709, out _out1710, out _out1711, out _out1712);
          _3546_bodyGen = _out1709;
          _3547___v93 = _out1710;
          _3548_bodyErased = _out1711;
          _3549_bodyIdents = _out1712;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3549_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_3540_name))));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet "), DCOMP.__default.escapeIdent((_3540_name))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _3545_valueTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _3541_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _3546_bodyGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = true;
          isErased = _3548_bodyErased;
        }
      } else if (_source70.is_Apply) {
        DAST._IExpression _3550___mcc_h226 = _source70.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _3551___mcc_h227 = _source70.dtor_args;
        Dafny.ISequence<DAST._IExpression> _3552_args = _3551___mcc_h227;
        DAST._IExpression _3553_func = _3550___mcc_h226;
        {
          Dafny.ISequence<Dafny.Rune> _3554_funcString;
          bool _3555___v94;
          bool _3556_funcErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3557_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1713;
          bool _out1714;
          bool _out1715;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1716;
          DCOMP.COMP.GenExpr(_3553_func, selfIdent, @params, false, out _out1713, out _out1714, out _out1715, out _out1716);
          _3554_funcString = _out1713;
          _3555___v94 = _out1714;
          _3556_funcErased = _out1715;
          _3557_recIdents = _out1716;
          readIdents = _3557_recIdents;
          Dafny.ISequence<Dafny.Rune> _3558_argString;
          _3558_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _3559_i;
          _3559_i = BigInteger.Zero;
          while ((_3559_i) < (new BigInteger((_3552_args).Count))) {
            if ((_3559_i).Sign == 1) {
              _3558_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3558_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3560_argExpr;
            bool _3561_isOwned;
            bool _3562_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3563_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1717;
            bool _out1718;
            bool _out1719;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1720;
            DCOMP.COMP.GenExpr((_3552_args).Select(_3559_i), selfIdent, @params, false, out _out1717, out _out1718, out _out1719, out _out1720);
            _3560_argExpr = _out1717;
            _3561_isOwned = _out1718;
            _3562_argErased = _out1719;
            _3563_argIdents = _out1720;
            if (_3561_isOwned) {
              _3560_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3560_argExpr);
            }
            _3558_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3558_argString, _3560_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3563_argIdents);
            _3559_i = (_3559_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _3554_funcString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3558_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source70.is_TypeTest) {
        DAST._IExpression _3564___mcc_h228 = _source70.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3565___mcc_h229 = _source70.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _3566___mcc_h230 = _source70.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _3567_variant = _3566___mcc_h230;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3568_dType = _3565___mcc_h229;
        DAST._IExpression _3569_on = _3564___mcc_h228;
        {
          Dafny.ISequence<Dafny.Rune> _3570_exprGen;
          bool _3571___v95;
          bool _3572_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3573_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1721;
          bool _out1722;
          bool _out1723;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1724;
          DCOMP.COMP.GenExpr(_3569_on, selfIdent, @params, false, out _out1721, out _out1722, out _out1723, out _out1724);
          _3570_exprGen = _out1721;
          _3571___v95 = _out1722;
          _3572_exprErased = _out1723;
          _3573_recIdents = _out1724;
          Dafny.ISequence<Dafny.Rune> _3574_dTypePath;
          Dafny.ISequence<Dafny.Rune> _out1725;
          _out1725 = DCOMP.COMP.GenPath(_3568_dType);
          _3574_dTypePath = _out1725;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!("), _3570_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref(), ")), _3574_dTypePath), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_3567_variant)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. })"));
          isOwned = true;
          isErased = true;
          readIdents = _3573_recIdents;
        }
      } else if (_source70.is_InitializationValue) {
        DAST._IType _3575___mcc_h231 = _source70.dtor_typ;
        DAST._IType _3576_typ = _3575___mcc_h231;
        {
          Dafny.ISequence<Dafny.Rune> _3577_typString;
          Dafny.ISequence<Dafny.Rune> _out1726;
          _out1726 = DCOMP.COMP.GenType(_3576_typ, false, false);
          _3577_typString = _out1726;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3577_typString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()"));
          isOwned = true;
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source70.is_BoolBoundedPool) {
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]");
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source70.is_SetBoundedPool) {
        DAST._IExpression _3578___mcc_h232 = _source70.dtor_of;
        DAST._IExpression _3579_of = _3578___mcc_h232;
        {
          Dafny.ISequence<Dafny.Rune> _3580_exprGen;
          bool _3581___v96;
          bool _3582_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3583_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1727;
          bool _out1728;
          bool _out1729;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1730;
          DCOMP.COMP.GenExpr(_3579_of, selfIdent, @params, false, out _out1727, out _out1728, out _out1729, out _out1730);
          _3580_exprGen = _out1727;
          _3581___v96 = _out1728;
          _3582_exprErased = _out1729;
          _3583_recIdents = _out1730;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3580_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          isOwned = true;
          isErased = _3582_exprErased;
          readIdents = _3583_recIdents;
        }
      } else if (_source70.is_SeqBoundedPool) {
        DAST._IExpression _3584___mcc_h233 = _source70.dtor_of;
        bool _3585___mcc_h234 = _source70.dtor_includeDuplicates;
        bool _3586_includeDuplicates = _3585___mcc_h234;
        DAST._IExpression _3587_of = _3584___mcc_h233;
        {
          Dafny.ISequence<Dafny.Rune> _3588_exprGen;
          bool _3589___v97;
          bool _3590_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3591_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1731;
          bool _out1732;
          bool _out1733;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1734;
          DCOMP.COMP.GenExpr(_3587_of, selfIdent, @params, false, out _out1731, out _out1732, out _out1733, out _out1734);
          _3588_exprGen = _out1731;
          _3589___v97 = _out1732;
          _3590_exprErased = _out1733;
          _3591_recIdents = _out1734;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3588_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          if (!(_3586_includeDuplicates)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::itertools::Itertools::unique("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          isOwned = true;
          isErased = _3590_exprErased;
          readIdents = _3591_recIdents;
        }
      } else {
        DAST._IExpression _3592___mcc_h235 = _source70.dtor_lo;
        DAST._IExpression _3593___mcc_h236 = _source70.dtor_hi;
        DAST._IExpression _3594_hi = _3593___mcc_h236;
        DAST._IExpression _3595_lo = _3592___mcc_h235;
        {
          Dafny.ISequence<Dafny.Rune> _3596_loString;
          bool _3597___v98;
          bool _3598_loErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3599_recIdentsLo;
          Dafny.ISequence<Dafny.Rune> _out1735;
          bool _out1736;
          bool _out1737;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1738;
          DCOMP.COMP.GenExpr(_3595_lo, selfIdent, @params, true, out _out1735, out _out1736, out _out1737, out _out1738);
          _3596_loString = _out1735;
          _3597___v98 = _out1736;
          _3598_loErased = _out1737;
          _3599_recIdentsLo = _out1738;
          Dafny.ISequence<Dafny.Rune> _3600_hiString;
          bool _3601___v99;
          bool _3602_hiErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3603_recIdentsHi;
          Dafny.ISequence<Dafny.Rune> _out1739;
          bool _out1740;
          bool _out1741;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1742;
          DCOMP.COMP.GenExpr(_3594_hi, selfIdent, @params, true, out _out1739, out _out1740, out _out1741, out _out1742);
          _3600_hiString = _out1739;
          _3601___v99 = _out1740;
          _3602_hiErased = _out1741;
          _3603_recIdentsHi = _out1742;
          if (!(_3598_loErased)) {
            _3596_loString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3596_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (!(_3602_hiErased)) {
            _3600_hiString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3600_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::integer_range("), _3596_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3600_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3599_recIdentsLo, _3603_recIdentsHi);
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern crate dafny_runtime;\n"));
      BigInteger _3604_i;
      _3604_i = BigInteger.Zero;
      while ((_3604_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _3605_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        Dafny.ISequence<Dafny.Rune> _out1743;
        _out1743 = DCOMP.COMP.GenModule((p).Select(_3604_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _3605_generated = _out1743;
        if ((_3604_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _3605_generated);
        _3604_i = (_3604_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _3606_i;
      _3606_i = BigInteger.Zero;
      while ((_3606_i) < (new BigInteger((fullName).Count))) {
        if ((_3606_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, (fullName).Select(_3606_i));
        _3606_i = (_3606_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
  }
} // end of namespace DCOMP

class __CallToMain {
  public static void Main(string[] args) {
    Dafny.Helpers.WithHaltHandling(() => DAM.__default._Main(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.UnicodeFromMainArguments(args)));
  }
}
