// Dafny program the_program compiled into C#
// To recompile, you will need the libraries
//     System.Runtime.Numerics.dll System.Collections.Immutable.dll
// but the 'dotnet' tool in net6.0 should pick those up automatically.
// Optionally, you may want to include compiler switches like
//     /debug /nowarn:162,164,168,183,219,436,1717,1718

using System;
using System.Numerics;
using System.Collections;
namespace Formatting {

  public partial class __default {
    public static System.String ReindentProgramFromFirstToken(Microsoft.Dafny.IToken firstToken, Formatting.IIndentationFormatter reindent) {
      System.String s = default(System.String);
      Microsoft.Dafny.IToken token;
      token = firstToken;
      System.Text.StringBuilder sb;
      System.Text.StringBuilder _nw0 = new System.Text.StringBuilder();
      sb = _nw0;
      while ((token) != (object)((Microsoft.Dafny.IToken)null)) {
        System.String newLeadingTrivia;
        newLeadingTrivia = (reindent).GetNewLeadingTrivia(token);
        System.String newTrailingTrivia;
        newTrailingTrivia = (reindent).GetNewTrailingTrivia(token);
        (sb).Append(newLeadingTrivia);
        (sb).Append(token.val);
        (sb).Append(newTrailingTrivia);
        token = token.Next;
      }
      System.String _out0;
      _out0 = (sb).ToString().ToString();
      s = _out0;
      return s;
    }
  }

  public interface IIndentationFormatter {
    System.String GetNewLeadingTrivia(Microsoft.Dafny.IToken token);
    System.String GetNewTrailingTrivia(Microsoft.Dafny.IToken token);
  }
  public class _Companion_IIndentationFormatter {
  }
} // end of namespace Formatting


namespace DAST {


  public interface _IModule {
    bool is_Module { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    bool dtor_isExtern { get; }
    Dafny.ISequence<DAST._IModuleItem> dtor_body { get; }
    _IModule DowncastClone();
  }
  public class Module : _IModule {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly bool _isExtern;
    public readonly Dafny.ISequence<DAST._IModuleItem> _body;
    public Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      this._name = name;
      this._isExtern = isExtern;
      this._body = body;
    }
    public _IModule DowncastClone() {
      if (this is _IModule dt) { return dt; }
      return new Module(_name, _isExtern, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Module;
      return oth != null && object.Equals(this._name, oth._name) && this._isExtern == oth._isExtern && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isExtern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Module.Module";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isExtern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IModule theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, false, Dafny.Sequence<DAST._IModuleItem>.Empty);
    public static DAST._IModule Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModule> _TYPE = new Dafny.TypeDescriptor<DAST._IModule>(DAST.Module.Default());
    public static Dafny.TypeDescriptor<DAST._IModule> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModule create(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return new Module(name, isExtern, body);
    }
    public static _IModule create_Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return create(name, isExtern, body);
    }
    public bool is_Module { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public bool dtor_isExtern {
      get {
        return this._isExtern;
      }
    }
    public Dafny.ISequence<DAST._IModuleItem> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IModuleItem {
    bool is_Module { get; }
    bool is_Class { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    bool is_Datatype { get; }
    DAST._IModule dtor_Module_a0 { get; }
    DAST._IClass dtor_Class_a0 { get; }
    DAST._ITrait dtor_Trait_a0 { get; }
    DAST._INewtype dtor_Newtype_a0 { get; }
    DAST._IDatatype dtor_Datatype_a0 { get; }
    _IModuleItem DowncastClone();
  }
  public abstract class ModuleItem : _IModuleItem {
    public ModuleItem() {
    }
    private static readonly DAST._IModuleItem theDefault = create_Module(DAST.Module.Default());
    public static DAST._IModuleItem Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModuleItem> _TYPE = new Dafny.TypeDescriptor<DAST._IModuleItem>(DAST.ModuleItem.Default());
    public static Dafny.TypeDescriptor<DAST._IModuleItem> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModuleItem create_Module(DAST._IModule _a0) {
      return new ModuleItem_Module(_a0);
    }
    public static _IModuleItem create_Class(DAST._IClass _a0) {
      return new ModuleItem_Class(_a0);
    }
    public static _IModuleItem create_Trait(DAST._ITrait _a0) {
      return new ModuleItem_Trait(_a0);
    }
    public static _IModuleItem create_Newtype(DAST._INewtype _a0) {
      return new ModuleItem_Newtype(_a0);
    }
    public static _IModuleItem create_Datatype(DAST._IDatatype _a0) {
      return new ModuleItem_Datatype(_a0);
    }
    public bool is_Module { get { return this is ModuleItem_Module; } }
    public bool is_Class { get { return this is ModuleItem_Class; } }
    public bool is_Trait { get { return this is ModuleItem_Trait; } }
    public bool is_Newtype { get { return this is ModuleItem_Newtype; } }
    public bool is_Datatype { get { return this is ModuleItem_Datatype; } }
    public DAST._IModule dtor_Module_a0 {
      get {
        var d = this;
        return ((ModuleItem_Module)d)._a0;
      }
    }
    public DAST._IClass dtor_Class_a0 {
      get {
        var d = this;
        return ((ModuleItem_Class)d)._a0;
      }
    }
    public DAST._ITrait dtor_Trait_a0 {
      get {
        var d = this;
        return ((ModuleItem_Trait)d)._a0;
      }
    }
    public DAST._INewtype dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Newtype)d)._a0;
      }
    }
    public DAST._IDatatype dtor_Datatype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Datatype)d)._a0;
      }
    }
    public abstract _IModuleItem DowncastClone();
  }
  public class ModuleItem_Module : ModuleItem {
    public readonly DAST._IModule _a0;
    public ModuleItem_Module(DAST._IModule _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Module(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Module;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Module";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Class : ModuleItem {
    public readonly DAST._IClass _a0;
    public ModuleItem_Class(DAST._IClass _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Class(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Class;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Class";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Trait : ModuleItem {
    public readonly DAST._ITrait _a0;
    public ModuleItem_Trait(DAST._ITrait _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Trait(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Trait;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Newtype : ModuleItem {
    public readonly DAST._INewtype _a0;
    public ModuleItem_Newtype(DAST._INewtype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Datatype : ModuleItem {
    public readonly DAST._IDatatype _a0;
    public ModuleItem_Datatype(DAST._IDatatype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Datatype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Datatype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IType {
    bool is_Path { get; }
    bool is_Nullable { get; }
    bool is_Tuple { get; }
    bool is_Array { get; }
    bool is_Seq { get; }
    bool is_Set { get; }
    bool is_Multiset { get; }
    bool is_Map { get; }
    bool is_Arrow { get; }
    bool is_Primitive { get; }
    bool is_Passthrough { get; }
    bool is_TypeArg { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    DAST._IResolvedType dtor_resolved { get; }
    DAST._IType dtor_Nullable_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_Tuple_a0 { get; }
    DAST._IType dtor_element { get; }
    BigInteger dtor_dims { get; }
    DAST._IType dtor_key { get; }
    DAST._IType dtor_value { get; }
    Dafny.ISequence<DAST._IType> dtor_args { get; }
    DAST._IType dtor_result { get; }
    DAST._IPrimitive dtor_Primitive_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 { get; }
    _IType DowncastClone();
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly DAST._IType theDefault = create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.ResolvedType.Default());
    public static DAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IType> _TYPE = new Dafny.TypeDescriptor<DAST._IType>(DAST.Type.Default());
    public static Dafny.TypeDescriptor<DAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) {
      return new Type_Path(_a0, typeArgs, resolved);
    }
    public static _IType create_Nullable(DAST._IType _a0) {
      return new Type_Nullable(_a0);
    }
    public static _IType create_Tuple(Dafny.ISequence<DAST._IType> _a0) {
      return new Type_Tuple(_a0);
    }
    public static _IType create_Array(DAST._IType element, BigInteger dims) {
      return new Type_Array(element, dims);
    }
    public static _IType create_Seq(DAST._IType element) {
      return new Type_Seq(element);
    }
    public static _IType create_Set(DAST._IType element) {
      return new Type_Set(element);
    }
    public static _IType create_Multiset(DAST._IType element) {
      return new Type_Multiset(element);
    }
    public static _IType create_Map(DAST._IType key, DAST._IType @value) {
      return new Type_Map(key, @value);
    }
    public static _IType create_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) {
      return new Type_Arrow(args, result);
    }
    public static _IType create_Primitive(DAST._IPrimitive _a0) {
      return new Type_Primitive(_a0);
    }
    public static _IType create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_Passthrough(_a0);
    }
    public static _IType create_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_TypeArg(_a0);
    }
    public bool is_Path { get { return this is Type_Path; } }
    public bool is_Nullable { get { return this is Type_Nullable; } }
    public bool is_Tuple { get { return this is Type_Tuple; } }
    public bool is_Array { get { return this is Type_Array; } }
    public bool is_Seq { get { return this is Type_Seq; } }
    public bool is_Set { get { return this is Type_Set; } }
    public bool is_Multiset { get { return this is Type_Multiset; } }
    public bool is_Map { get { return this is Type_Map; } }
    public bool is_Arrow { get { return this is Type_Arrow; } }
    public bool is_Primitive { get { return this is Type_Primitive; } }
    public bool is_Passthrough { get { return this is Type_Passthrough; } }
    public bool is_TypeArg { get { return this is Type_TypeArg; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 {
      get {
        var d = this;
        return ((Type_Path)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Type_Path)d)._typeArgs;
      }
    }
    public DAST._IResolvedType dtor_resolved {
      get {
        var d = this;
        return ((Type_Path)d)._resolved;
      }
    }
    public DAST._IType dtor_Nullable_a0 {
      get {
        var d = this;
        return ((Type_Nullable)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Type_Tuple)d)._a0;
      }
    }
    public DAST._IType dtor_element {
      get {
        var d = this;
        if (d is Type_Array) { return ((Type_Array)d)._element; }
        if (d is Type_Seq) { return ((Type_Seq)d)._element; }
        if (d is Type_Set) { return ((Type_Set)d)._element; }
        return ((Type_Multiset)d)._element;
      }
    }
    public BigInteger dtor_dims {
      get {
        var d = this;
        return ((Type_Array)d)._dims;
      }
    }
    public DAST._IType dtor_key {
      get {
        var d = this;
        return ((Type_Map)d)._key;
      }
    }
    public DAST._IType dtor_value {
      get {
        var d = this;
        return ((Type_Map)d)._value;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_args {
      get {
        var d = this;
        return ((Type_Arrow)d)._args;
      }
    }
    public DAST._IType dtor_result {
      get {
        var d = this;
        return ((Type_Arrow)d)._result;
      }
    }
    public DAST._IPrimitive dtor_Primitive_a0 {
      get {
        var d = this;
        return ((Type_Primitive)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((Type_Passthrough)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 {
      get {
        var d = this;
        return ((Type_TypeArg)d)._a0;
      }
    }
    public abstract _IType DowncastClone();
  }
  public class Type_Path : Type {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly DAST._IResolvedType _resolved;
    public Type_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) : base() {
      this._a0 = _a0;
      this._typeArgs = typeArgs;
      this._resolved = resolved;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Path(_a0, _typeArgs, _resolved);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Path;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._resolved, oth._resolved);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._resolved));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Path";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._resolved);
      s += ")";
      return s;
    }
  }
  public class Type_Nullable : Type {
    public readonly DAST._IType _a0;
    public Type_Nullable(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Nullable(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Nullable;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Nullable";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Tuple : Type {
    public readonly Dafny.ISequence<DAST._IType> _a0;
    public Type_Tuple(Dafny.ISequence<DAST._IType> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Array : Type {
    public readonly DAST._IType _element;
    public readonly BigInteger _dims;
    public Type_Array(DAST._IType element, BigInteger dims) : base() {
      this._element = element;
      this._dims = dims;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Array(_element, _dims);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Array;
      return oth != null && object.Equals(this._element, oth._element) && this._dims == oth._dims;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Array";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dims);
      s += ")";
      return s;
    }
  }
  public class Type_Seq : Type {
    public readonly DAST._IType _element;
    public Type_Seq(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Seq(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Seq;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Seq";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Set : Type {
    public readonly DAST._IType _element;
    public Type_Set(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Set(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Set;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Set";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Multiset : Type {
    public readonly DAST._IType _element;
    public Type_Multiset(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Multiset(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Multiset;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Multiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Map : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_Map(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Map(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Map;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Map";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_Arrow : Type {
    public readonly Dafny.ISequence<DAST._IType> _args;
    public readonly DAST._IType _result;
    public Type_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) : base() {
      this._args = args;
      this._result = result;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Arrow(_args, _result);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Arrow;
      return oth != null && object.Equals(this._args, oth._args) && object.Equals(this._result, oth._result);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._result));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Arrow";
      s += "(";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._result);
      s += ")";
      return s;
    }
  }
  public class Type_Primitive : Type {
    public readonly DAST._IPrimitive _a0;
    public Type_Primitive(DAST._IPrimitive _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Primitive(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Primitive;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Primitive";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Passthrough : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeArg : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeArg(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_TypeArg;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.TypeArg";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IPrimitive {
    bool is_Int { get; }
    bool is_Real { get; }
    bool is_String { get; }
    bool is_Bool { get; }
    bool is_Char { get; }
    _IPrimitive DowncastClone();
  }
  public abstract class Primitive : _IPrimitive {
    public Primitive() {
    }
    private static readonly DAST._IPrimitive theDefault = create_Int();
    public static DAST._IPrimitive Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IPrimitive> _TYPE = new Dafny.TypeDescriptor<DAST._IPrimitive>(DAST.Primitive.Default());
    public static Dafny.TypeDescriptor<DAST._IPrimitive> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrimitive create_Int() {
      return new Primitive_Int();
    }
    public static _IPrimitive create_Real() {
      return new Primitive_Real();
    }
    public static _IPrimitive create_String() {
      return new Primitive_String();
    }
    public static _IPrimitive create_Bool() {
      return new Primitive_Bool();
    }
    public static _IPrimitive create_Char() {
      return new Primitive_Char();
    }
    public bool is_Int { get { return this is Primitive_Int; } }
    public bool is_Real { get { return this is Primitive_Real; } }
    public bool is_String { get { return this is Primitive_String; } }
    public bool is_Bool { get { return this is Primitive_Bool; } }
    public bool is_Char { get { return this is Primitive_Char; } }
    public static System.Collections.Generic.IEnumerable<_IPrimitive> AllSingletonConstructors {
      get {
        yield return Primitive.create_Int();
        yield return Primitive.create_Real();
        yield return Primitive.create_String();
        yield return Primitive.create_Bool();
        yield return Primitive.create_Char();
      }
    }
    public abstract _IPrimitive DowncastClone();
  }
  public class Primitive_Int : Primitive {
    public Primitive_Int() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Int";
      return s;
    }
  }
  public class Primitive_Real : Primitive {
    public Primitive_Real() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Real();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Real;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Real";
      return s;
    }
  }
  public class Primitive_String : Primitive {
    public Primitive_String() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_String();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_String;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.String";
      return s;
    }
  }
  public class Primitive_Bool : Primitive {
    public Primitive_Bool() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Bool";
      return s;
    }
  }
  public class Primitive_Char : Primitive {
    public Primitive_Char() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Char();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Char;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Char";
      return s;
    }
  }

  public interface _IResolvedType {
    bool is_Datatype { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    DAST._IType dtor_Newtype_a0 { get; }
    _IResolvedType DowncastClone();
  }
  public abstract class ResolvedType : _IResolvedType {
    public ResolvedType() {
    }
    private static readonly DAST._IResolvedType theDefault = create_Datatype(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty);
    public static DAST._IResolvedType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IResolvedType> _TYPE = new Dafny.TypeDescriptor<DAST._IResolvedType>(DAST.ResolvedType.Default());
    public static Dafny.TypeDescriptor<DAST._IResolvedType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IResolvedType create_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Datatype(path);
    }
    public static _IResolvedType create_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Trait(path);
    }
    public static _IResolvedType create_Newtype(DAST._IType _a0) {
      return new ResolvedType_Newtype(_a0);
    }
    public bool is_Datatype { get { return this is ResolvedType_Datatype; } }
    public bool is_Trait { get { return this is ResolvedType_Trait; } }
    public bool is_Newtype { get { return this is ResolvedType_Newtype; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is ResolvedType_Datatype) { return ((ResolvedType_Datatype)d)._path; }
        return ((ResolvedType_Trait)d)._path;
      }
    }
    public DAST._IType dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._a0;
      }
    }
    public abstract _IResolvedType DowncastClone();
  }
  public class ResolvedType_Datatype : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Datatype(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Datatype;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Trait : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Trait(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Trait;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Newtype : ResolvedType {
    public readonly DAST._IType _a0;
    public ResolvedType_Newtype(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IIdent {
    bool is_Ident { get; }
    Dafny.ISequence<Dafny.Rune> dtor_id { get; }
  }
  public class Ident : _IIdent {
    public readonly Dafny.ISequence<Dafny.Rune> _id;
    public Ident(Dafny.ISequence<Dafny.Rune> id) {
      this._id = id;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Ident;
      return oth != null && object.Equals(this._id, oth._id);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._id));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Ident.Ident";
      s += "(";
      s += this._id.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IIdent create(Dafny.ISequence<Dafny.Rune> id) {
      return new Ident(id);
    }
    public static _IIdent create_Ident(Dafny.ISequence<Dafny.Rune> id) {
      return create(id);
    }
    public bool is_Ident { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_id {
      get {
        return this._id;
      }
    }
  }

  public interface _IClass {
    bool is_Class { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IType> dtor_superClasses { get; }
    Dafny.ISequence<DAST._IField> dtor_fields { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _IClass DowncastClone();
  }
  public class Class : _IClass {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IType> _superClasses;
    public readonly Dafny.ISequence<DAST._IField> _fields;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._superClasses = superClasses;
      this._fields = fields;
      this._body = body;
    }
    public _IClass DowncastClone() {
      if (this is _IClass dt) { return dt; }
      return new Class(_name, _enclosingModule, _typeParams, _superClasses, _fields, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Class;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._superClasses, oth._superClasses) && object.Equals(this._fields, oth._fields) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._superClasses));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Class.Class";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._superClasses);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IClass theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IField>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._IClass Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IClass> _TYPE = new Dafny.TypeDescriptor<DAST._IClass>(DAST.Class.Default());
    public static Dafny.TypeDescriptor<DAST._IClass> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClass create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return new Class(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public static _IClass create_Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public bool is_Class { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_superClasses {
      get {
        return this._superClasses;
      }
    }
    public Dafny.ISequence<DAST._IField> dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _ITrait DowncastClone();
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_name, _typeParams, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Trait;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Trait.Trait";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._ITrait theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ITrait> _TYPE = new Dafny.TypeDescriptor<DAST._ITrait>(DAST.Trait.Default());
    public static Dafny.TypeDescriptor<DAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return new Trait(name, typeParams, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, typeParams, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IDatatype {
    bool is_Datatype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    bool dtor_isCo { get; }
    _IDatatype DowncastClone();
  }
  public class Datatype : _IDatatype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IDatatypeCtor> _ctors;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly bool _isCo;
    public Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._ctors = ctors;
      this._body = body;
      this._isCo = isCo;
    }
    public _IDatatype DowncastClone() {
      if (this is _IDatatype dt) { return dt; }
      return new Datatype(_name, _enclosingModule, _typeParams, _ctors, _body, _isCo);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Datatype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._ctors, oth._ctors) && object.Equals(this._body, oth._body) && this._isCo == oth._isCo;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ctors));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Datatype.Datatype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ctors);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IDatatypeCtor>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, false);
    public static DAST._IDatatype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatype> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatype>(DAST.Datatype.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return new Datatype(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public static _IDatatype create_Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return create(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public bool is_Datatype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors {
      get {
        return this._ctors;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public bool dtor_isCo {
      get {
        return this._isCo;
      }
    }
  }

  public interface _IDatatypeCtor {
    bool is_DatatypeCtor { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_args { get; }
    bool dtor_hasAnyArgs { get; }
    _IDatatypeCtor DowncastClone();
  }
  public class DatatypeCtor : _IDatatypeCtor {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IFormal> _args;
    public readonly bool _hasAnyArgs;
    public DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      this._name = name;
      this._args = args;
      this._hasAnyArgs = hasAnyArgs;
    }
    public _IDatatypeCtor DowncastClone() {
      if (this is _IDatatypeCtor dt) { return dt; }
      return new DatatypeCtor(_name, _args, _hasAnyArgs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.DatatypeCtor;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._args, oth._args) && this._hasAnyArgs == oth._hasAnyArgs;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasAnyArgs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.DatatypeCtor.DatatypeCtor";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasAnyArgs);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatypeCtor theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, false);
    public static DAST._IDatatypeCtor Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatypeCtor>(DAST.DatatypeCtor.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatypeCtor create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return new DatatypeCtor(name, args, hasAnyArgs);
    }
    public static _IDatatypeCtor create_DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return create(name, args, hasAnyArgs);
    }
    public bool is_DatatypeCtor { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_args {
      get {
        return this._args;
      }
    }
    public bool dtor_hasAnyArgs {
      get {
        return this._hasAnyArgs;
      }
    }
  }

  public interface _INewtype {
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    DAST._IType dtor_base { get; }
    Dafny.ISequence<DAST._IStatement> dtor_witnessStmts { get; }
    DAST._IOptional<DAST._IExpression> dtor_witnessExpr { get; }
    _INewtype DowncastClone();
  }
  public class Newtype : _INewtype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly DAST._IType _base;
    public readonly Dafny.ISequence<DAST._IStatement> _witnessStmts;
    public readonly DAST._IOptional<DAST._IExpression> _witnessExpr;
    public Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      this._name = name;
      this._typeParams = typeParams;
      this._base = @base;
      this._witnessStmts = witnessStmts;
      this._witnessExpr = witnessExpr;
    }
    public _INewtype DowncastClone() {
      if (this is _INewtype dt) { return dt; }
      return new Newtype(_name, _typeParams, _base, _witnessStmts, _witnessExpr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Newtype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._base, oth._base) && object.Equals(this._witnessStmts, oth._witnessStmts) && object.Equals(this._witnessExpr, oth._witnessExpr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessStmts));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessExpr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Newtype.Newtype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessStmts);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessExpr);
      s += ")";
      return s;
    }
    private static readonly DAST._INewtype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Type.Default(), Dafny.Sequence<DAST._IStatement>.Empty, DAST.Optional<DAST._IExpression>.Default());
    public static DAST._INewtype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtype> _TYPE = new Dafny.TypeDescriptor<DAST._INewtype>(DAST.Newtype.Default());
    public static Dafny.TypeDescriptor<DAST._INewtype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      return new Newtype(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public static _INewtype create_Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      return create(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public bool is_Newtype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public DAST._IType dtor_base {
      get {
        return this._base;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_witnessStmts {
      get {
        return this._witnessStmts;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_witnessExpr {
      get {
        return this._witnessExpr;
      }
    }
  }

  public interface _IClassItem {
    bool is_Method { get; }
    DAST._IMethod dtor_Method_a0 { get; }
  }
  public class ClassItem : _IClassItem {
    public readonly DAST._IMethod _a0;
    public ClassItem(DAST._IMethod _a0) {
      this._a0 = _a0;
    }
    public static DAST._IMethod DowncastClone(DAST._IMethod _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ClassItem;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ClassItem.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = DAST.Method.Default();
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClassItem create(DAST._IMethod _a0) {
      return new ClassItem(_a0);
    }
    public static _IClassItem create_Method(DAST._IMethod _a0) {
      return create(_a0);
    }
    public bool is_Method { get { return true; } }
    public DAST._IMethod dtor_Method_a0 {
      get {
        return this._a0;
      }
    }
  }

  public interface _IField {
    bool is_Field { get; }
    DAST._IFormal dtor_formal { get; }
    DAST._IOptional<DAST._IExpression> dtor_defaultValue { get; }
    _IField DowncastClone();
  }
  public class Field : _IField {
    public readonly DAST._IFormal _formal;
    public readonly DAST._IOptional<DAST._IExpression> _defaultValue;
    public Field(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      this._formal = formal;
      this._defaultValue = defaultValue;
    }
    public _IField DowncastClone() {
      if (this is _IField dt) { return dt; }
      return new Field(_formal, _defaultValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Field;
      return oth != null && object.Equals(this._formal, oth._formal) && object.Equals(this._defaultValue, oth._defaultValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formal));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._defaultValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Field.Field";
      s += "(";
      s += Dafny.Helpers.ToString(this._formal);
      s += ", ";
      s += Dafny.Helpers.ToString(this._defaultValue);
      s += ")";
      return s;
    }
    private static readonly DAST._IField theDefault = create(DAST.Formal.Default(), DAST.Optional<DAST._IExpression>.Default());
    public static DAST._IField Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IField> _TYPE = new Dafny.TypeDescriptor<DAST._IField>(DAST.Field.Default());
    public static Dafny.TypeDescriptor<DAST._IField> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IField create(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      return new Field(formal, defaultValue);
    }
    public static _IField create_Field(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      return create(formal, defaultValue);
    }
    public bool is_Field { get { return true; } }
    public DAST._IFormal dtor_formal {
      get {
        return this._formal;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_defaultValue {
      get {
        return this._defaultValue;
      }
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    _IFormal DowncastClone();
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      this._name = name;
      this._typ = typ;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
    private static readonly DAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default());
    public static DAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IFormal> _TYPE = new Dafny.TypeDescriptor<DAST._IFormal>(DAST.Formal.Default());
    public static Dafny.TypeDescriptor<DAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return new Formal(name, typ);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return create(name, typ);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        return this._typ;
      }
    }
  }

  public interface _IMethod {
    bool is_Method { get; }
    bool dtor_isStatic { get; }
    bool dtor_hasBody { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<DAST._IType> dtor_outTypes { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars { get; }
    _IMethod DowncastClone();
  }
  public class Method : _IMethod {
    public readonly bool _isStatic;
    public readonly bool _hasBody;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _overridingPath;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public readonly Dafny.ISequence<DAST._IType> _outTypes;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outVars;
    public Method(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      this._isStatic = isStatic;
      this._hasBody = hasBody;
      this._overridingPath = overridingPath;
      this._name = name;
      this._typeParams = typeParams;
      this._params = @params;
      this._body = body;
      this._outTypes = outTypes;
      this._outVars = outVars;
    }
    public _IMethod DowncastClone() {
      if (this is _IMethod dt) { return dt; }
      return new Method(_isStatic, _hasBody, _overridingPath, _name, _typeParams, _params, _body, _outTypes, _outVars);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Method;
      return oth != null && this._isStatic == oth._isStatic && this._hasBody == oth._hasBody && object.Equals(this._overridingPath, oth._overridingPath) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._params, oth._params) && object.Equals(this._body, oth._body) && object.Equals(this._outTypes, oth._outTypes) && object.Equals(this._outVars, oth._outVars);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasBody));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._overridingPath));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outTypes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outVars));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Method.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasBody);
      s += ", ";
      s += Dafny.Helpers.ToString(this._overridingPath);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outTypes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outVars);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = create(false, false, DAST.Optional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, Dafny.Sequence<DAST._IStatement>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Optional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default());
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMethod create(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return new Method(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public static _IMethod create_Method(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return create(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public bool is_Method { get { return true; } }
    public bool dtor_isStatic {
      get {
        return this._isStatic;
      }
    }
    public bool dtor_hasBody {
      get {
        return this._hasBody;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath {
      get {
        return this._overridingPath;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        return this._params;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_outTypes {
      get {
        return this._outTypes;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars {
      get {
        return this._outVars;
      }
    }
  }

  public interface _IOptional<T> {
    bool is_Some { get; }
    bool is_None { get; }
    T dtor_Some_a0 { get; }
    _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public abstract class Optional<T> : _IOptional<T> {
    public Optional() {
    }
    public static DAST._IOptional<T> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<DAST._IOptional<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<DAST._IOptional<T>>(DAST.Optional<T>.Default());
    }
    public static _IOptional<T> create_Some(T _a0) {
      return new Optional_Some<T>(_a0);
    }
    public static _IOptional<T> create_None() {
      return new Optional_None<T>();
    }
    public bool is_Some { get { return this is Optional_Some<T>; } }
    public bool is_None { get { return this is Optional_None<T>; } }
    public T dtor_Some_a0 {
      get {
        var d = this;
        return ((Optional_Some<T>)d)._a0;
      }
    }
    public abstract _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public class Optional_Some<T> : Optional<T> {
    public readonly T _a0;
    public Optional_Some(T _a0) : base() {
      this._a0 = _a0;
    }
    public override _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOptional<__T> dt) { return dt; }
      return new Optional_Some<__T>(converter0(_a0));
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Optional_Some<T>;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Optional.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Optional_None<T> : Optional<T> {
    public Optional_None() : base() {
    }
    public override _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOptional<__T> dt) { return dt; }
      return new Optional_None<__T>();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Optional_None<T>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Optional.None";
      return s;
    }
  }

  public interface _IStatement {
    bool is_DeclareVar { get; }
    bool is_Assign { get; }
    bool is_If { get; }
    bool is_Labeled { get; }
    bool is_While { get; }
    bool is_Foreach { get; }
    bool is_Call { get; }
    bool is_Return { get; }
    bool is_EarlyReturn { get; }
    bool is_Break { get; }
    bool is_TailRecursive { get; }
    bool is_JumpTailCallStart { get; }
    bool is_Halt { get; }
    bool is_Print { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    DAST._IOptional<DAST._IExpression> dtor_maybeValue { get; }
    DAST._IAssignLhs dtor_lhs { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IExpression dtor_cond { get; }
    Dafny.ISequence<DAST._IStatement> dtor_thn { get; }
    Dafny.ISequence<DAST._IStatement> dtor_els { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_boundName { get; }
    DAST._IType dtor_boundType { get; }
    DAST._IExpression dtor_over { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.Rune>> dtor_toLabel { get; }
    DAST._IExpression dtor_Print_a0 { get; }
    _IStatement DowncastClone();
  }
  public abstract class Statement : _IStatement {
    public Statement() {
    }
    private static readonly DAST._IStatement theDefault = create_DeclareVar(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default(), DAST.Optional<DAST._IExpression>.Default());
    public static DAST._IStatement Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IStatement> _TYPE = new Dafny.TypeDescriptor<DAST._IStatement>(DAST.Statement.Default());
    public static Dafny.TypeDescriptor<DAST._IStatement> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStatement create_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IOptional<DAST._IExpression> maybeValue) {
      return new Statement_DeclareVar(name, typ, maybeValue);
    }
    public static _IStatement create_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) {
      return new Statement_Assign(lhs, @value);
    }
    public static _IStatement create_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) {
      return new Statement_If(cond, thn, els);
    }
    public static _IStatement create_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Labeled(lbl, body);
    }
    public static _IStatement create_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_While(cond, body);
    }
    public static _IStatement create_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Foreach(boundName, boundType, over, body);
    }
    public static _IStatement create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) {
      return new Statement_Call(@on, name, typeArgs, args, outs);
    }
    public static _IStatement create_Return(DAST._IExpression expr) {
      return new Statement_Return(expr);
    }
    public static _IStatement create_EarlyReturn() {
      return new Statement_EarlyReturn();
    }
    public static _IStatement create_Break(DAST._IOptional<Dafny.ISequence<Dafny.Rune>> toLabel) {
      return new Statement_Break(toLabel);
    }
    public static _IStatement create_TailRecursive(Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_TailRecursive(body);
    }
    public static _IStatement create_JumpTailCallStart() {
      return new Statement_JumpTailCallStart();
    }
    public static _IStatement create_Halt() {
      return new Statement_Halt();
    }
    public static _IStatement create_Print(DAST._IExpression _a0) {
      return new Statement_Print(_a0);
    }
    public bool is_DeclareVar { get { return this is Statement_DeclareVar; } }
    public bool is_Assign { get { return this is Statement_Assign; } }
    public bool is_If { get { return this is Statement_If; } }
    public bool is_Labeled { get { return this is Statement_Labeled; } }
    public bool is_While { get { return this is Statement_While; } }
    public bool is_Foreach { get { return this is Statement_Foreach; } }
    public bool is_Call { get { return this is Statement_Call; } }
    public bool is_Return { get { return this is Statement_Return; } }
    public bool is_EarlyReturn { get { return this is Statement_EarlyReturn; } }
    public bool is_Break { get { return this is Statement_Break; } }
    public bool is_TailRecursive { get { return this is Statement_TailRecursive; } }
    public bool is_JumpTailCallStart { get { return this is Statement_JumpTailCallStart; } }
    public bool is_Halt { get { return this is Statement_Halt; } }
    public bool is_Print { get { return this is Statement_Print; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Statement_DeclareVar) { return ((Statement_DeclareVar)d)._name; }
        return ((Statement_Call)d)._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._typ;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_maybeValue {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._maybeValue;
      }
    }
    public DAST._IAssignLhs dtor_lhs {
      get {
        var d = this;
        return ((Statement_Assign)d)._lhs;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        return ((Statement_Assign)d)._value;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        if (d is Statement_If) { return ((Statement_If)d)._cond; }
        return ((Statement_While)d)._cond;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_thn {
      get {
        var d = this;
        return ((Statement_If)d)._thn;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_els {
      get {
        var d = this;
        return ((Statement_If)d)._els;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Statement_Labeled)d)._lbl;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        if (d is Statement_Labeled) { return ((Statement_Labeled)d)._body; }
        if (d is Statement_While) { return ((Statement_While)d)._body; }
        if (d is Statement_Foreach) { return ((Statement_Foreach)d)._body; }
        return ((Statement_TailRecursive)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_boundName {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundName;
      }
    }
    public DAST._IType dtor_boundType {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundType;
      }
    }
    public DAST._IExpression dtor_over {
      get {
        var d = this;
        return ((Statement_Foreach)d)._over;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        return ((Statement_Call)d)._on;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Statement_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        return ((Statement_Call)d)._args;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs {
      get {
        var d = this;
        return ((Statement_Call)d)._outs;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        return ((Statement_Return)d)._expr;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.Rune>> dtor_toLabel {
      get {
        var d = this;
        return ((Statement_Break)d)._toLabel;
      }
    }
    public DAST._IExpression dtor_Print_a0 {
      get {
        var d = this;
        return ((Statement_Print)d)._a0;
      }
    }
    public abstract _IStatement DowncastClone();
  }
  public class Statement_DeclareVar : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IOptional<DAST._IExpression> _maybeValue;
    public Statement_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IOptional<DAST._IExpression> maybeValue) : base() {
      this._name = name;
      this._typ = typ;
      this._maybeValue = maybeValue;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_DeclareVar(_name, _typ, _maybeValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_DeclareVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._maybeValue, oth._maybeValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._maybeValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.DeclareVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._maybeValue);
      s += ")";
      return s;
    }
  }
  public class Statement_Assign : Statement {
    public readonly DAST._IAssignLhs _lhs;
    public readonly DAST._IExpression _value;
    public Statement_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) : base() {
      this._lhs = lhs;
      this._value = @value;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Assign(_lhs, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Assign;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Assign";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Statement_If : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _thn;
    public readonly Dafny.ISequence<DAST._IStatement> _els;
    public Statement_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_If(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_If;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.If";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Statement_Labeled : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._lbl = lbl;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Labeled(_lbl, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Labeled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Labeled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_While : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._cond = cond;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_While(_cond, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_While;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.While";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Foreach : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _boundName;
    public readonly DAST._IType _boundType;
    public readonly DAST._IExpression _over;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._boundName = boundName;
      this._boundType = boundType;
      this._over = over;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Foreach(_boundName, _boundType, _over, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Foreach;
      return oth != null && object.Equals(this._boundName, oth._boundName) && object.Equals(this._boundType, oth._boundType) && object.Equals(this._over, oth._over) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._over));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Foreach";
      s += "(";
      s += this._boundName.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._boundType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._over);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Call : Statement {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outs;
    public Statement_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
      this._outs = outs;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Call(_on, _name, _typeArgs, _args, _outs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args) && object.Equals(this._outs, oth._outs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outs);
      s += ")";
      return s;
    }
  }
  public class Statement_Return : Statement {
    public readonly DAST._IExpression _expr;
    public Statement_Return(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Return(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Return;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Statement_EarlyReturn : Statement {
    public Statement_EarlyReturn() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_EarlyReturn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_EarlyReturn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.EarlyReturn";
      return s;
    }
  }
  public class Statement_Break : Statement {
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _toLabel;
    public Statement_Break(DAST._IOptional<Dafny.ISequence<Dafny.Rune>> toLabel) : base() {
      this._toLabel = toLabel;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Break(_toLabel);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Break;
      return oth != null && object.Equals(this._toLabel, oth._toLabel);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._toLabel));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._toLabel);
      s += ")";
      return s;
    }
  }
  public class Statement_TailRecursive : Statement {
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_TailRecursive(Dafny.ISequence<DAST._IStatement> body) : base() {
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_TailRecursive(_body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_TailRecursive;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.TailRecursive";
      s += "(";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_JumpTailCallStart : Statement {
    public Statement_JumpTailCallStart() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_JumpTailCallStart();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_JumpTailCallStart;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.JumpTailCallStart";
      return s;
    }
  }
  public class Statement_Halt : Statement {
    public Statement_Halt() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Halt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Halt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Halt";
      return s;
    }
  }
  public class Statement_Print : Statement {
    public readonly DAST._IExpression _a0;
    public Statement_Print(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IAssignLhs {
    bool is_Ident { get; }
    bool is_Select { get; }
    bool is_Index { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    DAST._IExpression dtor_expr { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    _IAssignLhs DowncastClone();
  }
  public abstract class AssignLhs : _IAssignLhs {
    public AssignLhs() {
    }
    private static readonly DAST._IAssignLhs theDefault = create_Ident(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._IAssignLhs Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IAssignLhs> _TYPE = new Dafny.TypeDescriptor<DAST._IAssignLhs>(DAST.AssignLhs.Default());
    public static Dafny.TypeDescriptor<DAST._IAssignLhs> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignLhs create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new AssignLhs_Ident(_a0);
    }
    public static _IAssignLhs create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) {
      return new AssignLhs_Select(expr, field);
    }
    public static _IAssignLhs create_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) {
      return new AssignLhs_Index(expr, indices);
    }
    public bool is_Ident { get { return this is AssignLhs_Ident; } }
    public bool is_Select { get { return this is AssignLhs_Select; } }
    public bool is_Index { get { return this is AssignLhs_Index; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((AssignLhs_Ident)d)._a0;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is AssignLhs_Select) { return ((AssignLhs_Select)d)._expr; }
        return ((AssignLhs_Index)d)._expr;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((AssignLhs_Select)d)._field;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((AssignLhs_Index)d)._indices;
      }
    }
    public abstract _IAssignLhs DowncastClone();
  }
  public class AssignLhs_Ident : AssignLhs {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public AssignLhs_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Ident";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Select : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public AssignLhs_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._expr = expr;
      this._field = field;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Select(_expr, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Index : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public AssignLhs_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._indices = indices;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Index(_expr, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }

  public interface _ICollKind {
    bool is_Seq { get; }
    bool is_Array { get; }
    bool is_Map { get; }
    _ICollKind DowncastClone();
  }
  public abstract class CollKind : _ICollKind {
    public CollKind() {
    }
    private static readonly DAST._ICollKind theDefault = create_Seq();
    public static DAST._ICollKind Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICollKind> _TYPE = new Dafny.TypeDescriptor<DAST._ICollKind>(DAST.CollKind.Default());
    public static Dafny.TypeDescriptor<DAST._ICollKind> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICollKind create_Seq() {
      return new CollKind_Seq();
    }
    public static _ICollKind create_Array() {
      return new CollKind_Array();
    }
    public static _ICollKind create_Map() {
      return new CollKind_Map();
    }
    public bool is_Seq { get { return this is CollKind_Seq; } }
    public bool is_Array { get { return this is CollKind_Array; } }
    public bool is_Map { get { return this is CollKind_Map; } }
    public static System.Collections.Generic.IEnumerable<_ICollKind> AllSingletonConstructors {
      get {
        yield return CollKind.create_Seq();
        yield return CollKind.create_Array();
        yield return CollKind.create_Map();
      }
    }
    public abstract _ICollKind DowncastClone();
  }
  public class CollKind_Seq : CollKind {
    public CollKind_Seq() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Seq();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Seq;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Seq";
      return s;
    }
  }
  public class CollKind_Array : CollKind {
    public CollKind_Array() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Array();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Array;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Array";
      return s;
    }
  }
  public class CollKind_Map : CollKind {
    public CollKind_Map() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Map();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Map;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Map";
      return s;
    }
  }

  public interface _IBinOp {
    bool is_Eq { get; }
    bool is_Neq { get; }
    bool is_Div { get; }
    bool is_EuclidianDiv { get; }
    bool is_Mod { get; }
    bool is_EuclidianMod { get; }
    bool is_Implies { get; }
    bool is_In { get; }
    bool is_NotIn { get; }
    bool is_SetDifference { get; }
    bool is_Concat { get; }
    bool is_Passthrough { get; }
    bool dtor_referential { get; }
    bool dtor_nullable { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    _IBinOp DowncastClone();
  }
  public abstract class BinOp : _IBinOp {
    public BinOp() {
    }
    private static readonly DAST._IBinOp theDefault = create_Eq(false, false);
    public static DAST._IBinOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IBinOp> _TYPE = new Dafny.TypeDescriptor<DAST._IBinOp>(DAST.BinOp.Default());
    public static Dafny.TypeDescriptor<DAST._IBinOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOp create_Eq(bool referential, bool nullable) {
      return new BinOp_Eq(referential, nullable);
    }
    public static _IBinOp create_Neq(bool referential, bool nullable) {
      return new BinOp_Neq(referential, nullable);
    }
    public static _IBinOp create_Div() {
      return new BinOp_Div();
    }
    public static _IBinOp create_EuclidianDiv() {
      return new BinOp_EuclidianDiv();
    }
    public static _IBinOp create_Mod() {
      return new BinOp_Mod();
    }
    public static _IBinOp create_EuclidianMod() {
      return new BinOp_EuclidianMod();
    }
    public static _IBinOp create_Implies() {
      return new BinOp_Implies();
    }
    public static _IBinOp create_In() {
      return new BinOp_In();
    }
    public static _IBinOp create_NotIn() {
      return new BinOp_NotIn();
    }
    public static _IBinOp create_SetDifference() {
      return new BinOp_SetDifference();
    }
    public static _IBinOp create_Concat() {
      return new BinOp_Concat();
    }
    public static _IBinOp create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new BinOp_Passthrough(_a0);
    }
    public bool is_Eq { get { return this is BinOp_Eq; } }
    public bool is_Neq { get { return this is BinOp_Neq; } }
    public bool is_Div { get { return this is BinOp_Div; } }
    public bool is_EuclidianDiv { get { return this is BinOp_EuclidianDiv; } }
    public bool is_Mod { get { return this is BinOp_Mod; } }
    public bool is_EuclidianMod { get { return this is BinOp_EuclidianMod; } }
    public bool is_Implies { get { return this is BinOp_Implies; } }
    public bool is_In { get { return this is BinOp_In; } }
    public bool is_NotIn { get { return this is BinOp_NotIn; } }
    public bool is_SetDifference { get { return this is BinOp_SetDifference; } }
    public bool is_Concat { get { return this is BinOp_Concat; } }
    public bool is_Passthrough { get { return this is BinOp_Passthrough; } }
    public bool dtor_referential {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._referential; }
        return ((BinOp_Neq)d)._referential;
      }
    }
    public bool dtor_nullable {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._nullable; }
        return ((BinOp_Neq)d)._nullable;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((BinOp_Passthrough)d)._a0;
      }
    }
    public abstract _IBinOp DowncastClone();
  }
  public class BinOp_Eq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Eq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Eq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Eq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Eq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Neq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Neq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Neq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Neq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Neq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Div : BinOp {
    public BinOp_Div() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Div();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Div;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Div";
      return s;
    }
  }
  public class BinOp_EuclidianDiv : BinOp {
    public BinOp_EuclidianDiv() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianDiv();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianDiv;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianDiv";
      return s;
    }
  }
  public class BinOp_Mod : BinOp {
    public BinOp_Mod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Mod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Mod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Mod";
      return s;
    }
  }
  public class BinOp_EuclidianMod : BinOp {
    public BinOp_EuclidianMod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianMod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianMod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianMod";
      return s;
    }
  }
  public class BinOp_Implies : BinOp {
    public BinOp_Implies() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Implies();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Implies;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Implies";
      return s;
    }
  }
  public class BinOp_In : BinOp {
    public BinOp_In() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_In();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_In;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.In";
      return s;
    }
  }
  public class BinOp_NotIn : BinOp {
    public BinOp_NotIn() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_NotIn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_NotIn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.NotIn";
      return s;
    }
  }
  public class BinOp_SetDifference : BinOp {
    public BinOp_SetDifference() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetDifference();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetDifference;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetDifference";
      return s;
    }
  }
  public class BinOp_Concat : BinOp {
    public BinOp_Concat() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Concat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Concat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Concat";
      return s;
    }
  }
  public class BinOp_Passthrough : BinOp {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public BinOp_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IExpression {
    bool is_Literal { get; }
    bool is_Ident { get; }
    bool is_Companion { get; }
    bool is_Tuple { get; }
    bool is_New { get; }
    bool is_NewArray { get; }
    bool is_DatatypeValue { get; }
    bool is_Convert { get; }
    bool is_SeqConstruct { get; }
    bool is_SeqValue { get; }
    bool is_SetValue { get; }
    bool is_MapValue { get; }
    bool is_This { get; }
    bool is_Ite { get; }
    bool is_UnOp { get; }
    bool is_BinOp { get; }
    bool is_ArrayLen { get; }
    bool is_Select { get; }
    bool is_SelectFn { get; }
    bool is_Index { get; }
    bool is_IndexRange { get; }
    bool is_TupleSelect { get; }
    bool is_Call { get; }
    bool is_Lambda { get; }
    bool is_BetaRedex { get; }
    bool is_IIFE { get; }
    bool is_Apply { get; }
    bool is_TypeTest { get; }
    bool is_InitializationValue { get; }
    bool is_BoolBoundedPool { get; }
    bool is_SetBoundedPool { get; }
    bool is_SeqBoundedPool { get; }
    bool is_IntRange { get; }
    DAST._ILiteral dtor_Literal_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 { get; }
    Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Dafny.ISequence<DAST._IExpression> dtor_dims { get; }
    DAST._IType dtor_typ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_variant { get; }
    bool dtor_isCo { get; }
    Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IType dtor_from { get; }
    DAST._IExpression dtor_length { get; }
    DAST._IExpression dtor_elem { get; }
    Dafny.ISequence<DAST._IExpression> dtor_elements { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems { get; }
    DAST._IExpression dtor_cond { get; }
    DAST._IExpression dtor_thn { get; }
    DAST._IExpression dtor_els { get; }
    DAST._IUnaryOp dtor_unOp { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IBinOp dtor_op { get; }
    DAST._IExpression dtor_left { get; }
    DAST._IExpression dtor_right { get; }
    BigInteger dtor_dim { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    bool dtor_isConstant { get; }
    bool dtor_onDatatype { get; }
    bool dtor_isStatic { get; }
    BigInteger dtor_arity { get; }
    DAST._ICollKind dtor_collKind { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    bool dtor_isArray { get; }
    DAST._IOptional<DAST._IExpression> dtor_low { get; }
    DAST._IOptional<DAST._IExpression> dtor_high { get; }
    BigInteger dtor_index { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    DAST._IType dtor_retType { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values { get; }
    DAST._IExpression dtor_iifeBody { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType { get; }
    DAST._IExpression dtor_of { get; }
    bool dtor_includeDuplicates { get; }
    DAST._IExpression dtor_lo { get; }
    DAST._IExpression dtor_hi { get; }
    _IExpression DowncastClone();
  }
  public abstract class Expression : _IExpression {
    public Expression() {
    }
    private static readonly DAST._IExpression theDefault = create_Literal(DAST.Literal.Default());
    public static DAST._IExpression Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IExpression> _TYPE = new Dafny.TypeDescriptor<DAST._IExpression>(DAST.Expression.Default());
    public static Dafny.TypeDescriptor<DAST._IExpression> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpression create_Literal(DAST._ILiteral _a0) {
      return new Expression_Literal(_a0);
    }
    public static _IExpression create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expression_Ident(_a0);
    }
    public static _IExpression create_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) {
      return new Expression_Companion(_a0);
    }
    public static _IExpression create_Tuple(Dafny.ISequence<DAST._IExpression> _a0) {
      return new Expression_Tuple(_a0);
    }
    public static _IExpression create_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_New(path, typeArgs, args);
    }
    public static _IExpression create_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) {
      return new Expression_NewArray(dims, typ);
    }
    public static _IExpression create_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) {
      return new Expression_DatatypeValue(path, typeArgs, variant, isCo, contents);
    }
    public static _IExpression create_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) {
      return new Expression_Convert(@value, @from, typ);
    }
    public static _IExpression create_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) {
      return new Expression_SeqConstruct(length, elem);
    }
    public static _IExpression create_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) {
      return new Expression_SeqValue(elements, typ);
    }
    public static _IExpression create_SetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_SetValue(elements);
    }
    public static _IExpression create_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) {
      return new Expression_MapValue(mapElems);
    }
    public static _IExpression create_This() {
      return new Expression_This();
    }
    public static _IExpression create_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) {
      return new Expression_Ite(cond, thn, els);
    }
    public static _IExpression create_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) {
      return new Expression_UnOp(unOp, expr);
    }
    public static _IExpression create_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) {
      return new Expression_BinOp(op, left, right);
    }
    public static _IExpression create_ArrayLen(DAST._IExpression expr, BigInteger dim) {
      return new Expression_ArrayLen(expr, dim);
    }
    public static _IExpression create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) {
      return new Expression_Select(expr, field, isConstant, onDatatype);
    }
    public static _IExpression create_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) {
      return new Expression_SelectFn(expr, field, onDatatype, isStatic, arity);
    }
    public static _IExpression create_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) {
      return new Expression_Index(expr, collKind, indices);
    }
    public static _IExpression create_IndexRange(DAST._IExpression expr, bool isArray, DAST._IOptional<DAST._IExpression> low, DAST._IOptional<DAST._IExpression> high) {
      return new Expression_IndexRange(expr, isArray, low, high);
    }
    public static _IExpression create_TupleSelect(DAST._IExpression expr, BigInteger index) {
      return new Expression_TupleSelect(expr, index);
    }
    public static _IExpression create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Call(@on, name, typeArgs, args);
    }
    public static _IExpression create_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) {
      return new Expression_Lambda(@params, retType, body);
    }
    public static _IExpression create_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) {
      return new Expression_BetaRedex(values, retType, expr);
    }
    public static _IExpression create_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) {
      return new Expression_IIFE(name, typ, @value, iifeBody);
    }
    public static _IExpression create_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Apply(expr, args);
    }
    public static _IExpression create_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) {
      return new Expression_TypeTest(@on, dType, variant);
    }
    public static _IExpression create_InitializationValue(DAST._IType typ) {
      return new Expression_InitializationValue(typ);
    }
    public static _IExpression create_BoolBoundedPool() {
      return new Expression_BoolBoundedPool();
    }
    public static _IExpression create_SetBoundedPool(DAST._IExpression of) {
      return new Expression_SetBoundedPool(of);
    }
    public static _IExpression create_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) {
      return new Expression_SeqBoundedPool(of, includeDuplicates);
    }
    public static _IExpression create_IntRange(DAST._IExpression lo, DAST._IExpression hi) {
      return new Expression_IntRange(lo, hi);
    }
    public bool is_Literal { get { return this is Expression_Literal; } }
    public bool is_Ident { get { return this is Expression_Ident; } }
    public bool is_Companion { get { return this is Expression_Companion; } }
    public bool is_Tuple { get { return this is Expression_Tuple; } }
    public bool is_New { get { return this is Expression_New; } }
    public bool is_NewArray { get { return this is Expression_NewArray; } }
    public bool is_DatatypeValue { get { return this is Expression_DatatypeValue; } }
    public bool is_Convert { get { return this is Expression_Convert; } }
    public bool is_SeqConstruct { get { return this is Expression_SeqConstruct; } }
    public bool is_SeqValue { get { return this is Expression_SeqValue; } }
    public bool is_SetValue { get { return this is Expression_SetValue; } }
    public bool is_MapValue { get { return this is Expression_MapValue; } }
    public bool is_This { get { return this is Expression_This; } }
    public bool is_Ite { get { return this is Expression_Ite; } }
    public bool is_UnOp { get { return this is Expression_UnOp; } }
    public bool is_BinOp { get { return this is Expression_BinOp; } }
    public bool is_ArrayLen { get { return this is Expression_ArrayLen; } }
    public bool is_Select { get { return this is Expression_Select; } }
    public bool is_SelectFn { get { return this is Expression_SelectFn; } }
    public bool is_Index { get { return this is Expression_Index; } }
    public bool is_IndexRange { get { return this is Expression_IndexRange; } }
    public bool is_TupleSelect { get { return this is Expression_TupleSelect; } }
    public bool is_Call { get { return this is Expression_Call; } }
    public bool is_Lambda { get { return this is Expression_Lambda; } }
    public bool is_BetaRedex { get { return this is Expression_BetaRedex; } }
    public bool is_IIFE { get { return this is Expression_IIFE; } }
    public bool is_Apply { get { return this is Expression_Apply; } }
    public bool is_TypeTest { get { return this is Expression_TypeTest; } }
    public bool is_InitializationValue { get { return this is Expression_InitializationValue; } }
    public bool is_BoolBoundedPool { get { return this is Expression_BoolBoundedPool; } }
    public bool is_SetBoundedPool { get { return this is Expression_SetBoundedPool; } }
    public bool is_SeqBoundedPool { get { return this is Expression_SeqBoundedPool; } }
    public bool is_IntRange { get { return this is Expression_IntRange; } }
    public DAST._ILiteral dtor_Literal_a0 {
      get {
        var d = this;
        return ((Expression_Literal)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((Expression_Ident)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 {
      get {
        var d = this;
        return ((Expression_Companion)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Expression_Tuple)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._path; }
        return ((Expression_DatatypeValue)d)._path;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._typeArgs; }
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._typeArgs; }
        return ((Expression_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._args; }
        if (d is Expression_Call) { return ((Expression_Call)d)._args; }
        return ((Expression_Apply)d)._args;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_dims {
      get {
        var d = this;
        return ((Expression_NewArray)d)._dims;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        if (d is Expression_NewArray) { return ((Expression_NewArray)d)._typ; }
        if (d is Expression_Convert) { return ((Expression_Convert)d)._typ; }
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._typ; }
        if (d is Expression_IIFE) { return ((Expression_IIFE)d)._typ; }
        return ((Expression_InitializationValue)d)._typ;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_variant {
      get {
        var d = this;
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._variant; }
        return ((Expression_TypeTest)d)._variant;
      }
    }
    public bool dtor_isCo {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._isCo;
      }
    }
    public Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._contents;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        if (d is Expression_Convert) { return ((Expression_Convert)d)._value; }
        return ((Expression_IIFE)d)._value;
      }
    }
    public DAST._IType dtor_from {
      get {
        var d = this;
        return ((Expression_Convert)d)._from;
      }
    }
    public DAST._IExpression dtor_length {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._length;
      }
    }
    public DAST._IExpression dtor_elem {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._elem;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_elements {
      get {
        var d = this;
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._elements; }
        return ((Expression_SetValue)d)._elements;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems {
      get {
        var d = this;
        return ((Expression_MapValue)d)._mapElems;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        return ((Expression_Ite)d)._cond;
      }
    }
    public DAST._IExpression dtor_thn {
      get {
        var d = this;
        return ((Expression_Ite)d)._thn;
      }
    }
    public DAST._IExpression dtor_els {
      get {
        var d = this;
        return ((Expression_Ite)d)._els;
      }
    }
    public DAST._IUnaryOp dtor_unOp {
      get {
        var d = this;
        return ((Expression_UnOp)d)._unOp;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is Expression_UnOp) { return ((Expression_UnOp)d)._expr; }
        if (d is Expression_ArrayLen) { return ((Expression_ArrayLen)d)._expr; }
        if (d is Expression_Select) { return ((Expression_Select)d)._expr; }
        if (d is Expression_SelectFn) { return ((Expression_SelectFn)d)._expr; }
        if (d is Expression_Index) { return ((Expression_Index)d)._expr; }
        if (d is Expression_IndexRange) { return ((Expression_IndexRange)d)._expr; }
        if (d is Expression_TupleSelect) { return ((Expression_TupleSelect)d)._expr; }
        if (d is Expression_BetaRedex) { return ((Expression_BetaRedex)d)._expr; }
        return ((Expression_Apply)d)._expr;
      }
    }
    public DAST._IBinOp dtor_op {
      get {
        var d = this;
        return ((Expression_BinOp)d)._op;
      }
    }
    public DAST._IExpression dtor_left {
      get {
        var d = this;
        return ((Expression_BinOp)d)._left;
      }
    }
    public DAST._IExpression dtor_right {
      get {
        var d = this;
        return ((Expression_BinOp)d)._right;
      }
    }
    public BigInteger dtor_dim {
      get {
        var d = this;
        return ((Expression_ArrayLen)d)._dim;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._field; }
        return ((Expression_SelectFn)d)._field;
      }
    }
    public bool dtor_isConstant {
      get {
        var d = this;
        return ((Expression_Select)d)._isConstant;
      }
    }
    public bool dtor_onDatatype {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._onDatatype; }
        return ((Expression_SelectFn)d)._onDatatype;
      }
    }
    public bool dtor_isStatic {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._isStatic;
      }
    }
    public BigInteger dtor_arity {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._arity;
      }
    }
    public DAST._ICollKind dtor_collKind {
      get {
        var d = this;
        return ((Expression_Index)d)._collKind;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((Expression_Index)d)._indices;
      }
    }
    public bool dtor_isArray {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._isArray;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_low {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._low;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_high {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._high;
      }
    }
    public BigInteger dtor_index {
      get {
        var d = this;
        return ((Expression_TupleSelect)d)._index;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._on; }
        return ((Expression_TypeTest)d)._on;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._name; }
        return ((Expression_IIFE)d)._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        var d = this;
        return ((Expression_Lambda)d)._params;
      }
    }
    public DAST._IType dtor_retType {
      get {
        var d = this;
        if (d is Expression_Lambda) { return ((Expression_Lambda)d)._retType; }
        return ((Expression_BetaRedex)d)._retType;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        return ((Expression_Lambda)d)._body;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values {
      get {
        var d = this;
        return ((Expression_BetaRedex)d)._values;
      }
    }
    public DAST._IExpression dtor_iifeBody {
      get {
        var d = this;
        return ((Expression_IIFE)d)._iifeBody;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType {
      get {
        var d = this;
        return ((Expression_TypeTest)d)._dType;
      }
    }
    public DAST._IExpression dtor_of {
      get {
        var d = this;
        if (d is Expression_SetBoundedPool) { return ((Expression_SetBoundedPool)d)._of; }
        return ((Expression_SeqBoundedPool)d)._of;
      }
    }
    public bool dtor_includeDuplicates {
      get {
        var d = this;
        return ((Expression_SeqBoundedPool)d)._includeDuplicates;
      }
    }
    public DAST._IExpression dtor_lo {
      get {
        var d = this;
        return ((Expression_IntRange)d)._lo;
      }
    }
    public DAST._IExpression dtor_hi {
      get {
        var d = this;
        return ((Expression_IntRange)d)._hi;
      }
    }
    public abstract _IExpression DowncastClone();
  }
  public class Expression_Literal : Expression {
    public readonly DAST._ILiteral _a0;
    public Expression_Literal(DAST._ILiteral _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Literal(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Literal;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Literal";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Ident : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expression_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ident";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_Companion : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public Expression_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Companion(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Companion;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Companion";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Tuple : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _a0;
    public Expression_Tuple(Dafny.ISequence<DAST._IExpression> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_New : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_New(_path, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_New;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_NewArray : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _dims;
    public readonly DAST._IType _typ;
    public Expression_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) : base() {
      this._dims = dims;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_NewArray(_dims, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_NewArray;
      return oth != null && object.Equals(this._dims, oth._dims) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.NewArray";
      s += "(";
      s += Dafny.Helpers.ToString(this._dims);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_DatatypeValue : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public readonly bool _isCo;
    public readonly Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _contents;
    public Expression_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._variant = variant;
      this._isCo = isCo;
      this._contents = contents;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_DatatypeValue(_path, _typeArgs, _variant, _isCo, _contents);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_DatatypeValue;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._variant, oth._variant) && this._isCo == oth._isCo && object.Equals(this._contents, oth._contents);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._contents));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.DatatypeValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._contents);
      s += ")";
      return s;
    }
  }
  public class Expression_Convert : Expression {
    public readonly DAST._IExpression _value;
    public readonly DAST._IType _from;
    public readonly DAST._IType _typ;
    public Expression_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) : base() {
      this._value = @value;
      this._from = @from;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Convert(_value, _from, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Convert;
      return oth != null && object.Equals(this._value, oth._value) && object.Equals(this._from, oth._from) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._from));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Convert";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._from);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqConstruct : Expression {
    public readonly DAST._IExpression _length;
    public readonly DAST._IExpression _elem;
    public Expression_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) : base() {
      this._length = length;
      this._elem = elem;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqConstruct(_length, _elem);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqConstruct;
      return oth != null && object.Equals(this._length, oth._length) && object.Equals(this._elem, oth._elem);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._length));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elem));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqConstruct";
      s += "(";
      s += Dafny.Helpers.ToString(this._length);
      s += ", ";
      s += Dafny.Helpers.ToString(this._elem);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public readonly DAST._IType _typ;
    public Expression_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) : base() {
      this._elements = elements;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqValue(_elements, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqValue;
      return oth != null && object.Equals(this._elements, oth._elements) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_SetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValue : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _mapElems;
    public Expression_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) : base() {
      this._mapElems = mapElems;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValue(_mapElems);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValue;
      return oth != null && object.Equals(this._mapElems, oth._mapElems);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mapElems));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._mapElems);
      s += ")";
      return s;
    }
  }
  public class Expression_This : Expression {
    public Expression_This() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_This();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_This;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.This";
      return s;
    }
  }
  public class Expression_Ite : Expression {
    public readonly DAST._IExpression _cond;
    public readonly DAST._IExpression _thn;
    public readonly DAST._IExpression _els;
    public Expression_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ite(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ite;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expression_UnOp : Expression {
    public readonly DAST._IUnaryOp _unOp;
    public readonly DAST._IExpression _expr;
    public Expression_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) : base() {
      this._unOp = unOp;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_UnOp(_unOp, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_UnOp;
      return oth != null && object.Equals(this._unOp, oth._unOp) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._unOp));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.UnOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._unOp);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_BinOp : Expression {
    public readonly DAST._IBinOp _op;
    public readonly DAST._IExpression _left;
    public readonly DAST._IExpression _right;
    public Expression_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) : base() {
      this._op = op;
      this._left = left;
      this._right = right;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BinOp(_op, _left, _right);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BinOp;
      return oth != null && object.Equals(this._op, oth._op) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BinOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._op);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ")";
      return s;
    }
  }
  public class Expression_ArrayLen : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _dim;
    public Expression_ArrayLen(DAST._IExpression expr, BigInteger dim) : base() {
      this._expr = expr;
      this._dim = dim;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ArrayLen(_expr, _dim);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ArrayLen;
      return oth != null && object.Equals(this._expr, oth._expr) && this._dim == oth._dim;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dim));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ArrayLen";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dim);
      s += ")";
      return s;
    }
  }
  public class Expression_Select : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _isConstant;
    public readonly bool _onDatatype;
    public Expression_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) : base() {
      this._expr = expr;
      this._field = field;
      this._isConstant = isConstant;
      this._onDatatype = onDatatype;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Select(_expr, _field, _isConstant, _onDatatype);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._isConstant == oth._isConstant && this._onDatatype == oth._onDatatype;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isConstant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isConstant);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ")";
      return s;
    }
  }
  public class Expression_SelectFn : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _onDatatype;
    public readonly bool _isStatic;
    public readonly BigInteger _arity;
    public Expression_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) : base() {
      this._expr = expr;
      this._field = field;
      this._onDatatype = onDatatype;
      this._isStatic = isStatic;
      this._arity = arity;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SelectFn(_expr, _field, _onDatatype, _isStatic, _arity);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SelectFn;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._onDatatype == oth._onDatatype && this._isStatic == oth._isStatic && this._arity == oth._arity;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arity));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SelectFn";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arity);
      s += ")";
      return s;
    }
  }
  public class Expression_Index : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._ICollKind _collKind;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public Expression_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._collKind = collKind;
      this._indices = indices;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Index(_expr, _collKind, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._collKind, oth._collKind) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._collKind));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._collKind);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }
  public class Expression_IndexRange : Expression {
    public readonly DAST._IExpression _expr;
    public readonly bool _isArray;
    public readonly DAST._IOptional<DAST._IExpression> _low;
    public readonly DAST._IOptional<DAST._IExpression> _high;
    public Expression_IndexRange(DAST._IExpression expr, bool isArray, DAST._IOptional<DAST._IExpression> low, DAST._IOptional<DAST._IExpression> high) : base() {
      this._expr = expr;
      this._isArray = isArray;
      this._low = low;
      this._high = high;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IndexRange(_expr, _isArray, _low, _high);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IndexRange;
      return oth != null && object.Equals(this._expr, oth._expr) && this._isArray == oth._isArray && object.Equals(this._low, oth._low) && object.Equals(this._high, oth._high);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isArray));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._low));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._high));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IndexRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isArray);
      s += ", ";
      s += Dafny.Helpers.ToString(this._low);
      s += ", ";
      s += Dafny.Helpers.ToString(this._high);
      s += ")";
      return s;
    }
  }
  public class Expression_TupleSelect : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _index;
    public Expression_TupleSelect(DAST._IExpression expr, BigInteger index) : base() {
      this._expr = expr;
      this._index = index;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TupleSelect(_expr, _index);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TupleSelect;
      return oth != null && object.Equals(this._expr, oth._expr) && this._index == oth._index;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._index));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TupleSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._index);
      s += ")";
      return s;
    }
  }
  public class Expression_Call : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Call(_on, _name, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_Lambda : Expression {
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly DAST._IType _retType;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Expression_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._params = @params;
      this._retType = retType;
      this._body = body;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Lambda(_params, _retType, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Lambda;
      return oth != null && object.Equals(this._params, oth._params) && object.Equals(this._retType, oth._retType) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Lambda";
      s += "(";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expression_BetaRedex : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _values;
    public readonly DAST._IType _retType;
    public readonly DAST._IExpression _expr;
    public Expression_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) : base() {
      this._values = values;
      this._retType = retType;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BetaRedex(_values, _retType, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BetaRedex;
      return oth != null && object.Equals(this._values, oth._values) && object.Equals(this._retType, oth._retType) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._values));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BetaRedex";
      s += "(";
      s += Dafny.Helpers.ToString(this._values);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_IIFE : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IExpression _value;
    public readonly DAST._IExpression _iifeBody;
    public Expression_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) : base() {
      this._name = name;
      this._typ = typ;
      this._value = @value;
      this._iifeBody = iifeBody;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IIFE(_name, _typ, _value, _iifeBody);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IIFE;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._value, oth._value) && object.Equals(this._iifeBody, oth._iifeBody);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._iifeBody));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IIFE";
      s += "(";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._iifeBody);
      s += ")";
      return s;
    }
  }
  public class Expression_Apply : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._expr = expr;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Apply(_expr, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Apply;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Apply";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_TypeTest : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _dType;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public Expression_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) : base() {
      this._on = @on;
      this._dType = dType;
      this._variant = variant;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TypeTest(_on, _dType, _variant);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TypeTest;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._dType, oth._dType) && object.Equals(this._variant, oth._variant);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TypeTest";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dType);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_InitializationValue : Expression {
    public readonly DAST._IType _typ;
    public Expression_InitializationValue(DAST._IType typ) : base() {
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_InitializationValue(_typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_InitializationValue;
      return oth != null && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.InitializationValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_BoolBoundedPool : Expression {
    public Expression_BoolBoundedPool() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BoolBoundedPool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BoolBoundedPool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BoolBoundedPool";
      return s;
    }
  }
  public class Expression_SetBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public Expression_SetBoundedPool(DAST._IExpression of) : base() {
      this._of = of;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBoundedPool(_of);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBoundedPool;
      return oth != null && object.Equals(this._of, oth._of);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public readonly bool _includeDuplicates;
    public Expression_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) : base() {
      this._of = of;
      this._includeDuplicates = includeDuplicates;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqBoundedPool(_of, _includeDuplicates);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqBoundedPool;
      return oth != null && object.Equals(this._of, oth._of) && this._includeDuplicates == oth._includeDuplicates;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._includeDuplicates));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ", ";
      s += Dafny.Helpers.ToString(this._includeDuplicates);
      s += ")";
      return s;
    }
  }
  public class Expression_IntRange : Expression {
    public readonly DAST._IExpression _lo;
    public readonly DAST._IExpression _hi;
    public Expression_IntRange(DAST._IExpression lo, DAST._IExpression hi) : base() {
      this._lo = lo;
      this._hi = hi;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IntRange(_lo, _hi);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IntRange;
      return oth != null && object.Equals(this._lo, oth._lo) && object.Equals(this._hi, oth._hi);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hi));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IntRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._lo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hi);
      s += ")";
      return s;
    }
  }

  public interface _IUnaryOp {
    bool is_Not { get; }
    bool is_BitwiseNot { get; }
    bool is_Cardinality { get; }
    _IUnaryOp DowncastClone();
  }
  public abstract class UnaryOp : _IUnaryOp {
    public UnaryOp() {
    }
    private static readonly DAST._IUnaryOp theDefault = create_Not();
    public static DAST._IUnaryOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IUnaryOp> _TYPE = new Dafny.TypeDescriptor<DAST._IUnaryOp>(DAST.UnaryOp.Default());
    public static Dafny.TypeDescriptor<DAST._IUnaryOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnaryOp create_Not() {
      return new UnaryOp_Not();
    }
    public static _IUnaryOp create_BitwiseNot() {
      return new UnaryOp_BitwiseNot();
    }
    public static _IUnaryOp create_Cardinality() {
      return new UnaryOp_Cardinality();
    }
    public bool is_Not { get { return this is UnaryOp_Not; } }
    public bool is_BitwiseNot { get { return this is UnaryOp_BitwiseNot; } }
    public bool is_Cardinality { get { return this is UnaryOp_Cardinality; } }
    public static System.Collections.Generic.IEnumerable<_IUnaryOp> AllSingletonConstructors {
      get {
        yield return UnaryOp.create_Not();
        yield return UnaryOp.create_BitwiseNot();
        yield return UnaryOp.create_Cardinality();
      }
    }
    public abstract _IUnaryOp DowncastClone();
  }
  public class UnaryOp_Not : UnaryOp {
    public UnaryOp_Not() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Not();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Not;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Not";
      return s;
    }
  }
  public class UnaryOp_BitwiseNot : UnaryOp {
    public UnaryOp_BitwiseNot() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_BitwiseNot();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_BitwiseNot;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.BitwiseNot";
      return s;
    }
  }
  public class UnaryOp_Cardinality : UnaryOp {
    public UnaryOp_Cardinality() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Cardinality();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Cardinality;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Cardinality";
      return s;
    }
  }

  public interface _ILiteral {
    bool is_BoolLiteral { get; }
    bool is_IntLiteral { get; }
    bool is_DecLiteral { get; }
    bool is_StringLiteral { get; }
    bool is_CharLiteral { get; }
    bool is_Null { get; }
    bool dtor_BoolLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 { get; }
    DAST._IType dtor_IntLiteral_a1 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 { get; }
    DAST._IType dtor_DecLiteral_a2 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 { get; }
    Dafny.Rune dtor_CharLiteral_a0 { get; }
    DAST._IType dtor_Null_a0 { get; }
    _ILiteral DowncastClone();
  }
  public abstract class Literal : _ILiteral {
    public Literal() {
    }
    private static readonly DAST._ILiteral theDefault = create_BoolLiteral(false);
    public static DAST._ILiteral Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ILiteral> _TYPE = new Dafny.TypeDescriptor<DAST._ILiteral>(DAST.Literal.Default());
    public static Dafny.TypeDescriptor<DAST._ILiteral> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ILiteral create_BoolLiteral(bool _a0) {
      return new Literal_BoolLiteral(_a0);
    }
    public static _ILiteral create_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) {
      return new Literal_IntLiteral(_a0, _a1);
    }
    public static _ILiteral create_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) {
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public static _ILiteral create_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Literal_StringLiteral(_a0);
    }
    public static _ILiteral create_CharLiteral(Dafny.Rune _a0) {
      return new Literal_CharLiteral(_a0);
    }
    public static _ILiteral create_Null(DAST._IType _a0) {
      return new Literal_Null(_a0);
    }
    public bool is_BoolLiteral { get { return this is Literal_BoolLiteral; } }
    public bool is_IntLiteral { get { return this is Literal_IntLiteral; } }
    public bool is_DecLiteral { get { return this is Literal_DecLiteral; } }
    public bool is_StringLiteral { get { return this is Literal_StringLiteral; } }
    public bool is_CharLiteral { get { return this is Literal_CharLiteral; } }
    public bool is_Null { get { return this is Literal_Null; } }
    public bool dtor_BoolLiteral_a0 {
      get {
        var d = this;
        return ((Literal_BoolLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_IntLiteral_a1 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a1;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a1;
      }
    }
    public DAST._IType dtor_DecLiteral_a2 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a2;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 {
      get {
        var d = this;
        return ((Literal_StringLiteral)d)._a0;
      }
    }
    public Dafny.Rune dtor_CharLiteral_a0 {
      get {
        var d = this;
        return ((Literal_CharLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_Null_a0 {
      get {
        var d = this;
        return ((Literal_Null)d)._a0;
      }
    }
    public abstract _ILiteral DowncastClone();
  }
  public class Literal_BoolLiteral : Literal {
    public readonly bool _a0;
    public Literal_BoolLiteral(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_BoolLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_BoolLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.BoolLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_IntLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly DAST._IType _a1;
    public Literal_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_IntLiteral(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_IntLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.IntLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Literal_DecLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly Dafny.ISequence<Dafny.Rune> _a1;
    public readonly DAST._IType _a2;
    public Literal_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
      this._a2 = _a2;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_DecLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1) && object.Equals(this._a2, oth._a2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a2));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.DecLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += this._a1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a2);
      s += ")";
      return s;
    }
  }
  public class Literal_StringLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Literal_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_StringLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_StringLiteral;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.StringLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Literal_CharLiteral : Literal {
    public readonly Dafny.Rune _a0;
    public Literal_CharLiteral(Dafny.Rune _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_CharLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_CharLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.CharLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_Null : Literal {
    public readonly DAST._IType _a0;
    public Literal_Null(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_Null(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_Null;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.Null";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
} // end of namespace DAST
namespace DAM {

  public partial class __default {
    public static DAM._IVal Eval(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> env, DAM._IExpr expr) {
      DAM._IExpr _source0 = expr;
      if (_source0.is_Var) {
        Dafny.ISequence<Dafny.Rune> __mcc_h0 = _source0.dtor_Var_a0;
        Dafny.ISequence<Dafny.Rune> x = __mcc_h0;
        return Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IVal>.Select(env, x);
      } else if (_source0.is_Bool) {
        bool __mcc_h1 = _source0.dtor_Bool_a0;
        bool b = __mcc_h1;
        return DAM.Val.create_Bool(b);
      } else if (_source0.is_Int) {
        BigInteger __mcc_h2 = _source0.dtor_Int_a0;
        BigInteger i = __mcc_h2;
        return DAM.Val.create_Int(i);
      } else if (_source0.is_Thunk) {
        DAM._IStmt _10___mcc_h3 = _source0.dtor_Thunk_a0;
        DAM._IStmt _11_c = _10___mcc_h3;
        return DAM.Val.create_Thunk(env, _11_c);
      } else {
        DAM.Ptr<DAM._IVal> _12___mcc_h4 = _source0.dtor_Ref_a0;
        DAM.Ptr<DAM._IVal> _13_ptr = _12___mcc_h4;
        return DAM.Val.create_Ref(_13_ptr);
      }
    }
    public static DAM._IOut Step(_System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> state) {
      _System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> _let_tmp_rhs0 = state;
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _14_env = _let_tmp_rhs0.dtor__0;
      DAM._IStmt _15_comp = _let_tmp_rhs0.dtor__1;
      DAM._IStack _16_stack = _let_tmp_rhs0.dtor__2;
      DAM._IStmt _source1 = _15_comp;
      if (_source1.is_Pure) {
        DAM._IExpr _17___mcc_h0 = _source1.dtor_Pure_a0;
        DAM._IExpr _18_expr = _17___mcc_h0;
        DAM._IOption<_System._ITuple2<DAM._IFrame, DAM._IStack>> _source2 = (_16_stack).Pop();
        if (_source2.is_None) {
          return DAM.Out.create_Terminal(DAM.__default.Eval(_14_env, _18_expr));
        } else {
          _System._ITuple2<DAM._IFrame, DAM._IStack> _19___mcc_h18 = _source2.dtor_value;
          _System._ITuple2<DAM._IFrame, DAM._IStack> _source3 = _19___mcc_h18;
          DAM._IFrame _20___mcc_h19 = _source3.dtor__0;
          DAM._IStack _21___mcc_h20 = _source3.dtor__1;
          DAM._IFrame _source4 = _20___mcc_h19;
          if (_source4.is_Bind) {
            Dafny.ISequence<Dafny.Rune> _22___mcc_h23 = _source4.dtor_var__;
            DAM._IStmt _23___mcc_h24 = _source4.dtor_rhs;
            DAM._IStack _24_stack = _21___mcc_h20;
            DAM._IStmt _25_rhs = _23___mcc_h24;
            Dafny.ISequence<Dafny.Rune> _26_var__ = _22___mcc_h23;
            return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IVal>.Update(_14_env, _26_var__, DAM.__default.Eval(_14_env, _18_expr)), _25_rhs, _24_stack));
          } else {
            DAM._IExpr _27___mcc_h27 = _source4.dtor_arg;
            return DAM.Out.create_Stuck();
          }
        }
      } else if (_source1.is_Bind) {
        DAM._IStmt _28___mcc_h1 = _source1.dtor_lhs;
        Dafny.ISequence<Dafny.Rune> _29___mcc_h2 = _source1.dtor_var__;
        DAM._IStmt _30___mcc_h3 = _source1.dtor_rhs;
        DAM._IStmt _31_rhs = _30___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _32_var__ = _29___mcc_h2;
        DAM._IStmt _33_lhs = _28___mcc_h1;
        return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(_14_env, _33_lhs, DAM.Stack.create_Push(DAM.Frame.create_Bind(_32_var__, _31_rhs), _16_stack)));
      } else if (_source1.is_Ite) {
        DAM._IExpr _34___mcc_h4 = _source1.dtor_guard;
        DAM._IStmt _35___mcc_h5 = _source1.dtor_then__;
        DAM._IStmt _36___mcc_h6 = _source1.dtor_else__;
        DAM._IStmt _37_else__ = _36___mcc_h6;
        DAM._IStmt _38_then__ = _35___mcc_h5;
        DAM._IExpr _39_guard = _34___mcc_h4;
        DAM._IVal _source5 = DAM.__default.Eval(_14_env, _39_guard);
        if (_source5.is_Bool) {
          bool _40___mcc_h29 = _source5.dtor_Bool_a0;
          bool _41_guard = _40___mcc_h29;
          return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(_14_env, ((_41_guard) ? (_38_then__) : (_37_else__)), _16_stack));
        } else if (_source5.is_Int) {
          BigInteger _42___mcc_h31 = _source5.dtor_Int_a0;
          return DAM.Out.create_Stuck();
        } else if (_source5.is_Thunk) {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _43___mcc_h33 = _source5.dtor_Thunk_a0;
          DAM._IStmt _44___mcc_h34 = _source5.dtor_Thunk_a1;
          return DAM.Out.create_Stuck();
        } else {
          DAM.Ptr<DAM._IVal> _45___mcc_h37 = _source5.dtor_Ref_a0;
          return DAM.Out.create_Stuck();
        }
      } else if (_source1.is_Func) {
        Dafny.ISequence<Dafny.Rune> _46___mcc_h7 = _source1.dtor_bound;
        DAM._IStmt _47___mcc_h8 = _source1.dtor_body;
        DAM._IStmt _48_body = _47___mcc_h8;
        Dafny.ISequence<Dafny.Rune> _49_bound = _46___mcc_h7;
        DAM._IOption<_System._ITuple2<DAM._IFrame, DAM._IStack>> _source6 = (_16_stack).Pop();
        if (_source6.is_None) {
          return DAM.Out.create_Terminal(DAM.Val.create_Thunk(_14_env, _15_comp));
        } else {
          _System._ITuple2<DAM._IFrame, DAM._IStack> _50___mcc_h39 = _source6.dtor_value;
          _System._ITuple2<DAM._IFrame, DAM._IStack> _source7 = _50___mcc_h39;
          DAM._IFrame _51___mcc_h40 = _source7.dtor__0;
          DAM._IStack _52___mcc_h41 = _source7.dtor__1;
          DAM._IFrame _source8 = _51___mcc_h40;
          if (_source8.is_Bind) {
            Dafny.ISequence<Dafny.Rune> _53___mcc_h44 = _source8.dtor_var__;
            DAM._IStmt _54___mcc_h45 = _source8.dtor_rhs;
            return DAM.Out.create_Stuck();
          } else {
            DAM._IExpr _55___mcc_h48 = _source8.dtor_arg;
            DAM._IStack _56_stack = _52___mcc_h41;
            DAM._IExpr _57_arg = _55___mcc_h48;
            return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IVal>.Update(_14_env, _49_bound, DAM.__default.Eval(_14_env, _57_arg)), _48_body, _56_stack));
          }
        }
      } else if (_source1.is_Call) {
        DAM._IStmt _58___mcc_h9 = _source1.dtor_func;
        DAM._IExpr _59___mcc_h10 = _source1.dtor_arg;
        DAM._IExpr _60_arg = _59___mcc_h10;
        DAM._IStmt _61_func = _58___mcc_h9;
        return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(_14_env, _61_func, DAM.Stack.create_Push(DAM.Frame.create_Call(_60_arg), _16_stack)));
      } else if (_source1.is_Force) {
        DAM._IExpr _62___mcc_h11 = _source1.dtor_Force_a0;
        DAM._IExpr _63_thunk = _62___mcc_h11;
        DAM._IVal _source9 = DAM.__default.Eval(_14_env, _63_thunk);
        if (_source9.is_Bool) {
          bool _64___mcc_h50 = _source9.dtor_Bool_a0;
          return DAM.Out.create_Stuck();
        } else if (_source9.is_Int) {
          BigInteger _65___mcc_h52 = _source9.dtor_Int_a0;
          return DAM.Out.create_Stuck();
        } else if (_source9.is_Thunk) {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _66___mcc_h54 = _source9.dtor_Thunk_a0;
          DAM._IStmt _67___mcc_h55 = _source9.dtor_Thunk_a1;
          DAM._IStmt _68_c = _67___mcc_h55;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _69_env = _66___mcc_h54;
          return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(_69_env, _68_c, _16_stack));
        } else {
          DAM.Ptr<DAM._IVal> _70___mcc_h58 = _source9.dtor_Ref_a0;
          return DAM.Out.create_Stuck();
        }
      } else if (_source1.is_Read) {
        DAM._IExpr _71___mcc_h12 = _source1.dtor_ref;
        Dafny.ISequence<Dafny.Rune> _72___mcc_h13 = _source1.dtor_var__;
        DAM._IStmt _73___mcc_h14 = _source1.dtor_cont;
        DAM._IStmt _74_cont = _73___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _75_var__ = _72___mcc_h13;
        DAM._IExpr _76_ref = _71___mcc_h12;
        DAM._IVal _source10 = DAM.__default.Eval(_14_env, _76_ref);
        if (_source10.is_Bool) {
          bool _77___mcc_h60 = _source10.dtor_Bool_a0;
          return DAM.Out.create_Stuck();
        } else if (_source10.is_Int) {
          BigInteger _78___mcc_h62 = _source10.dtor_Int_a0;
          return DAM.Out.create_Stuck();
        } else if (_source10.is_Thunk) {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _79___mcc_h64 = _source10.dtor_Thunk_a0;
          DAM._IStmt _80___mcc_h65 = _source10.dtor_Thunk_a1;
          return DAM.Out.create_Stuck();
        } else {
          DAM.Ptr<DAM._IVal> _81___mcc_h68 = _source10.dtor_Ref_a0;
          DAM.Ptr<DAM._IVal> _82_ptr = _81___mcc_h68;
          return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IVal>.Update(_14_env, _75_var__, _82_ptr.deref), _74_cont, _16_stack));
        }
      } else {
        DAM._IExpr _83___mcc_h15 = _source1.dtor_l;
        DAM._IExpr _84___mcc_h16 = _source1.dtor_r;
        DAM._IStmt _85___mcc_h17 = _source1.dtor_cont;
        DAM._IStmt _86_cont = _85___mcc_h17;
        DAM._IExpr _87_rhs = _84___mcc_h16;
        DAM._IExpr _88_lhs = _83___mcc_h15;
        DAM._IVal _source11 = DAM.__default.Eval(_14_env, _88_lhs);
        if (_source11.is_Bool) {
          bool _89___mcc_h70 = _source11.dtor_Bool_a0;
          return DAM.Out.create_Stuck();
        } else if (_source11.is_Int) {
          BigInteger _90___mcc_h72 = _source11.dtor_Int_a0;
          return DAM.Out.create_Stuck();
        } else if (_source11.is_Thunk) {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _91___mcc_h74 = _source11.dtor_Thunk_a0;
          DAM._IStmt _92___mcc_h75 = _source11.dtor_Thunk_a1;
          return DAM.Out.create_Stuck();
        } else {
          DAM.Ptr<DAM._IVal> _93___mcc_h78 = _source11.dtor_Ref_a0;
          DAM.Ptr<DAM._IVal> _94_ptr = _93___mcc_h78;
          return DAM.Out.create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(_14_env, _86_cont, _16_stack));
        }
      }
    }
    public static void Run(_System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> s) {
    TAIL_CALL_START:;
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      DAM._IOut _source12 = DAM.__default.Step(s);
      if (_source12.is_Next) {
        _System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> _95___mcc_h0 = _source12.dtor_Next_a0;
        _System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> _96_s = _95___mcc_h0;
        Dafny.Helpers.Print((_System.Tuple2<_System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>, Dafny.ISequence<Dafny.Rune>>.create(_96_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"))));
        _System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> _in0 = _96_s;
        s = _in0;
        goto TAIL_CALL_START;
      } else if (_source12.is_Stuck) {
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("done/stuck\n")).ToVerbatimString(false));
        return;
      } else {
        DAM._IVal _97___mcc_h2 = _source12.dtor_Terminal_a0;
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("done/stuck\n")).ToVerbatimString(false));
        return;
      }
    }
    public static _System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> Initial(DAM._IStmt comp) {
      return _System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IVal>.FromElements(), comp, DAM.Stack.create_Empty());
    }
    public static DAM._IStmt Let(DAM._IExpr lhs, Dafny.ISequence<Dafny.Rune> var__, DAM._IStmt rhs) {
      return DAM.Stmt.create_Call(DAM.Stmt.create_Func(var__, rhs), lhs);
    }
    public static void _Main(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> __noArgsParameter) {
      DAM.__default.Run(DAM.__default.Initial(DAM.Stmt.create_Bind(DAM.Stmt.create_Pure(DAM.Expr.create_Bool(true)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("x"), DAM.Stmt.create_Ite(DAM.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("x")), DAM.Stmt.create_Pure(DAM.Expr.create_Bool(false)), DAM.Stmt.create_Pure(DAM.Expr.create_Bool(true))))));
      DAM._IExpr _98_fc;
      _98_fc = DAM.Expr.create_Thunk(DAM.Stmt.create_Func(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("y"), DAM.Stmt.create_Pure(DAM.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("x")))));
      DAM._IStmt _99_fv;
      _99_fv = DAM.Stmt.create_Force(DAM.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("f")));
      DAM._IExpr _100_x1;
      _100_x1 = DAM.Expr.create_Int(BigInteger.One);
      DAM._IExpr _101_x2;
      _101_x2 = DAM.Expr.create_Int(new BigInteger(2));
      DAM._IExpr _102_z;
      _102_z = DAM.Expr.create_Int(BigInteger.Zero);
      DAM.__default.Run(DAM.__default.Initial(DAM.__default.Let(_100_x1, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("x"), DAM.__default.Let(_98_fc, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("f"), DAM.__default.Let(_101_x2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("x"), DAM.Stmt.create_Call(_99_fv, _102_z))))));
    }
  }

  public interface _IOption<A> {
    bool is_None { get; }
    bool is_Some { get; }
    A dtor_value { get; }
    _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0);
    bool IsFailure();
    DAM._IOption<A> PropagateFailure();
    A Extract();
  }
  public abstract class Option<A> : _IOption<A> {
    public Option() {
    }
    public static DAM._IOption<A> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<DAM._IOption<A>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<DAM._IOption<A>>(DAM.Option<A>.Default());
    }
    public static _IOption<A> create_None() {
      return new Option_None<A>();
    }
    public static _IOption<A> create_Some(A @value) {
      return new Option_Some<A>(@value);
    }
    public bool is_None { get { return this is Option_None<A>; } }
    public bool is_Some { get { return this is Option_Some<A>; } }
    public A dtor_value {
      get {
        var d = this;
        return ((Option_Some<A>)d)._value;
      }
    }
    public abstract _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0);
    public bool IsFailure() {
      return (this).is_None;
    }
    public DAM._IOption<A> PropagateFailure() {
      return DAM.Option<A>.create_None();
    }
    public A Extract() {
      return (this).dtor_value;
    }
  }
  public class Option_None<A> : Option<A> {
    public Option_None() : base() {
    }
    public override _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0) {
      if (this is _IOption<__A> dt) { return dt; }
      return new Option_None<__A>();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Option_None<A>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Option.None";
      return s;
    }
  }
  public class Option_Some<A> : Option<A> {
    public readonly A _value;
    public Option_Some(A @value) : base() {
      this._value = @value;
    }
    public override _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0) {
      if (this is _IOption<__A> dt) { return dt; }
      return new Option_Some<__A>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Option_Some<A>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Option.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }

  public partial class Ptr<A> {
    public Ptr() {
      this.deref = default(A);
    }
    public A deref { get; set; }
    public void __ctor(A expr) {
      (this).deref = expr;
    }
  }

  public interface _IExpr {
    bool is_Var { get; }
    bool is_Bool { get; }
    bool is_Int { get; }
    bool is_Thunk { get; }
    bool is_Ref { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Var_a0 { get; }
    bool dtor_Bool_a0 { get; }
    BigInteger dtor_Int_a0 { get; }
    DAM._IStmt dtor_Thunk_a0 { get; }
    DAM.Ptr<DAM._IVal> dtor_Ref_a0 { get; }
    _IExpr DowncastClone();
  }
  public abstract class Expr : _IExpr {
    public Expr() {
    }
    private static readonly DAM._IExpr theDefault = create_Var(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAM._IExpr Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM._IExpr> _TYPE = new Dafny.TypeDescriptor<DAM._IExpr>(DAM.Expr.Default());
    public static Dafny.TypeDescriptor<DAM._IExpr> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpr create_Var(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expr_Var(_a0);
    }
    public static _IExpr create_Bool(bool _a0) {
      return new Expr_Bool(_a0);
    }
    public static _IExpr create_Int(BigInteger _a0) {
      return new Expr_Int(_a0);
    }
    public static _IExpr create_Thunk(DAM._IStmt _a0) {
      return new Expr_Thunk(_a0);
    }
    public static _IExpr create_Ref(DAM.Ptr<DAM._IVal> _a0) {
      return new Expr_Ref(_a0);
    }
    public bool is_Var { get { return this is Expr_Var; } }
    public bool is_Bool { get { return this is Expr_Bool; } }
    public bool is_Int { get { return this is Expr_Int; } }
    public bool is_Thunk { get { return this is Expr_Thunk; } }
    public bool is_Ref { get { return this is Expr_Ref; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Var_a0 {
      get {
        var d = this;
        return ((Expr_Var)d)._a0;
      }
    }
    public bool dtor_Bool_a0 {
      get {
        var d = this;
        return ((Expr_Bool)d)._a0;
      }
    }
    public BigInteger dtor_Int_a0 {
      get {
        var d = this;
        return ((Expr_Int)d)._a0;
      }
    }
    public DAM._IStmt dtor_Thunk_a0 {
      get {
        var d = this;
        return ((Expr_Thunk)d)._a0;
      }
    }
    public DAM.Ptr<DAM._IVal> dtor_Ref_a0 {
      get {
        var d = this;
        return ((Expr_Ref)d)._a0;
      }
    }
    public abstract _IExpr DowncastClone();
  }
  public class Expr_Var : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expr_Var(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Var(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Expr_Var;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Expr.Var";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_Bool : Expr {
    public readonly bool _a0;
    public Expr_Bool(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Bool(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Expr_Bool;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Expr.Bool";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expr_Int : Expr {
    public readonly BigInteger _a0;
    public Expr_Int(BigInteger _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Int(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Expr_Int;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Expr.Int";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expr_Thunk : Expr {
    public readonly DAM._IStmt _a0;
    public Expr_Thunk(DAM._IStmt _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Thunk(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Expr_Thunk;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Expr.Thunk";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expr_Ref : Expr {
    public readonly DAM.Ptr<DAM._IVal> _a0;
    public Expr_Ref(DAM.Ptr<DAM._IVal> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Ref(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Expr_Ref;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Expr.Ref";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IStmt {
    bool is_Pure { get; }
    bool is_Bind { get; }
    bool is_Ite { get; }
    bool is_Func { get; }
    bool is_Call { get; }
    bool is_Force { get; }
    bool is_Read { get; }
    bool is_Write { get; }
    DAM._IExpr dtor_Pure_a0 { get; }
    DAM._IStmt dtor_lhs { get; }
    Dafny.ISequence<Dafny.Rune> dtor_var__ { get; }
    DAM._IStmt dtor_rhs { get; }
    DAM._IExpr dtor_guard { get; }
    DAM._IStmt dtor_then__ { get; }
    DAM._IStmt dtor_else__ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_bound { get; }
    DAM._IStmt dtor_body { get; }
    DAM._IStmt dtor_func { get; }
    DAM._IExpr dtor_arg { get; }
    DAM._IExpr dtor_Force_a0 { get; }
    DAM._IExpr dtor_ref { get; }
    DAM._IStmt dtor_cont { get; }
    DAM._IExpr dtor_l { get; }
    DAM._IExpr dtor_r { get; }
    _IStmt DowncastClone();
  }
  public abstract class Stmt : _IStmt {
    public Stmt() {
    }
    private static readonly DAM._IStmt theDefault = create_Pure(DAM.Expr.Default());
    public static DAM._IStmt Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM._IStmt> _TYPE = new Dafny.TypeDescriptor<DAM._IStmt>(DAM.Stmt.Default());
    public static Dafny.TypeDescriptor<DAM._IStmt> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStmt create_Pure(DAM._IExpr _a0) {
      return new Stmt_Pure(_a0);
    }
    public static _IStmt create_Bind(DAM._IStmt lhs, Dafny.ISequence<Dafny.Rune> var__, DAM._IStmt rhs) {
      return new Stmt_Bind(lhs, var__, rhs);
    }
    public static _IStmt create_Ite(DAM._IExpr guard, DAM._IStmt then__, DAM._IStmt else__) {
      return new Stmt_Ite(guard, then__, else__);
    }
    public static _IStmt create_Func(Dafny.ISequence<Dafny.Rune> bound, DAM._IStmt body) {
      return new Stmt_Func(bound, body);
    }
    public static _IStmt create_Call(DAM._IStmt func, DAM._IExpr arg) {
      return new Stmt_Call(func, arg);
    }
    public static _IStmt create_Force(DAM._IExpr _a0) {
      return new Stmt_Force(_a0);
    }
    public static _IStmt create_Read(DAM._IExpr @ref, Dafny.ISequence<Dafny.Rune> var__, DAM._IStmt cont) {
      return new Stmt_Read(@ref, var__, cont);
    }
    public static _IStmt create_Write(DAM._IExpr l, DAM._IExpr r, DAM._IStmt cont) {
      return new Stmt_Write(l, r, cont);
    }
    public bool is_Pure { get { return this is Stmt_Pure; } }
    public bool is_Bind { get { return this is Stmt_Bind; } }
    public bool is_Ite { get { return this is Stmt_Ite; } }
    public bool is_Func { get { return this is Stmt_Func; } }
    public bool is_Call { get { return this is Stmt_Call; } }
    public bool is_Force { get { return this is Stmt_Force; } }
    public bool is_Read { get { return this is Stmt_Read; } }
    public bool is_Write { get { return this is Stmt_Write; } }
    public DAM._IExpr dtor_Pure_a0 {
      get {
        var d = this;
        return ((Stmt_Pure)d)._a0;
      }
    }
    public DAM._IStmt dtor_lhs {
      get {
        var d = this;
        return ((Stmt_Bind)d)._lhs;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_var__ {
      get {
        var d = this;
        if (d is Stmt_Bind) { return ((Stmt_Bind)d)._var__; }
        return ((Stmt_Read)d)._var__;
      }
    }
    public DAM._IStmt dtor_rhs {
      get {
        var d = this;
        return ((Stmt_Bind)d)._rhs;
      }
    }
    public DAM._IExpr dtor_guard {
      get {
        var d = this;
        return ((Stmt_Ite)d)._guard;
      }
    }
    public DAM._IStmt dtor_then__ {
      get {
        var d = this;
        return ((Stmt_Ite)d)._then__;
      }
    }
    public DAM._IStmt dtor_else__ {
      get {
        var d = this;
        return ((Stmt_Ite)d)._else__;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_bound {
      get {
        var d = this;
        return ((Stmt_Func)d)._bound;
      }
    }
    public DAM._IStmt dtor_body {
      get {
        var d = this;
        return ((Stmt_Func)d)._body;
      }
    }
    public DAM._IStmt dtor_func {
      get {
        var d = this;
        return ((Stmt_Call)d)._func;
      }
    }
    public DAM._IExpr dtor_arg {
      get {
        var d = this;
        return ((Stmt_Call)d)._arg;
      }
    }
    public DAM._IExpr dtor_Force_a0 {
      get {
        var d = this;
        return ((Stmt_Force)d)._a0;
      }
    }
    public DAM._IExpr dtor_ref {
      get {
        var d = this;
        return ((Stmt_Read)d)._ref;
      }
    }
    public DAM._IStmt dtor_cont {
      get {
        var d = this;
        if (d is Stmt_Read) { return ((Stmt_Read)d)._cont; }
        return ((Stmt_Write)d)._cont;
      }
    }
    public DAM._IExpr dtor_l {
      get {
        var d = this;
        return ((Stmt_Write)d)._l;
      }
    }
    public DAM._IExpr dtor_r {
      get {
        var d = this;
        return ((Stmt_Write)d)._r;
      }
    }
    public abstract _IStmt DowncastClone();
  }
  public class Stmt_Pure : Stmt {
    public readonly DAM._IExpr _a0;
    public Stmt_Pure(DAM._IExpr _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Pure(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_Pure;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.Pure";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Stmt_Bind : Stmt {
    public readonly DAM._IStmt _lhs;
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly DAM._IStmt _rhs;
    public Stmt_Bind(DAM._IStmt lhs, Dafny.ISequence<Dafny.Rune> var__, DAM._IStmt rhs) : base() {
      this._lhs = lhs;
      this._var__ = var__;
      this._rhs = rhs;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Bind(_lhs, _var__, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_Bind;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._var__, oth._var__) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.Bind";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Stmt_Ite : Stmt {
    public readonly DAM._IExpr _guard;
    public readonly DAM._IStmt _then__;
    public readonly DAM._IStmt _else__;
    public Stmt_Ite(DAM._IExpr guard, DAM._IStmt then__, DAM._IStmt else__) : base() {
      this._guard = guard;
      this._then__ = then__;
      this._else__ = else__;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Ite(_guard, _then__, _else__);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_Ite;
      return oth != null && object.Equals(this._guard, oth._guard) && object.Equals(this._then__, oth._then__) && object.Equals(this._else__, oth._else__);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._guard));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._then__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._else__));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._guard);
      s += ", ";
      s += Dafny.Helpers.ToString(this._then__);
      s += ", ";
      s += Dafny.Helpers.ToString(this._else__);
      s += ")";
      return s;
    }
  }
  public class Stmt_Func : Stmt {
    public readonly Dafny.ISequence<Dafny.Rune> _bound;
    public readonly DAM._IStmt _body;
    public Stmt_Func(Dafny.ISequence<Dafny.Rune> bound, DAM._IStmt body) : base() {
      this._bound = bound;
      this._body = body;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Func(_bound, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_Func;
      return oth != null && object.Equals(this._bound, oth._bound) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._bound));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.Func";
      s += "(";
      s += this._bound.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Stmt_Call : Stmt {
    public readonly DAM._IStmt _func;
    public readonly DAM._IExpr _arg;
    public Stmt_Call(DAM._IStmt func, DAM._IExpr arg) : base() {
      this._func = func;
      this._arg = arg;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Call(_func, _arg);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_Call;
      return oth != null && object.Equals(this._func, oth._func) && object.Equals(this._arg, oth._arg);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._func));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arg));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._func);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arg);
      s += ")";
      return s;
    }
  }
  public class Stmt_Force : Stmt {
    public readonly DAM._IExpr _a0;
    public Stmt_Force(DAM._IExpr _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Force(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_Force;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.Force";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Stmt_Read : Stmt {
    public readonly DAM._IExpr _ref;
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly DAM._IStmt _cont;
    public Stmt_Read(DAM._IExpr @ref, Dafny.ISequence<Dafny.Rune> var__, DAM._IStmt cont) : base() {
      this._ref = @ref;
      this._var__ = var__;
      this._cont = cont;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Read(_ref, _var__, _cont);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_Read;
      return oth != null && object.Equals(this._ref, oth._ref) && object.Equals(this._var__, oth._var__) && object.Equals(this._cont, oth._cont);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ref));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cont));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.Read";
      s += "(";
      s += Dafny.Helpers.ToString(this._ref);
      s += ", ";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._cont);
      s += ")";
      return s;
    }
  }
  public class Stmt_Write : Stmt {
    public readonly DAM._IExpr _l;
    public readonly DAM._IExpr _r;
    public readonly DAM._IStmt _cont;
    public Stmt_Write(DAM._IExpr l, DAM._IExpr r, DAM._IStmt cont) : base() {
      this._l = l;
      this._r = r;
      this._cont = cont;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Write(_l, _r, _cont);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stmt_Write;
      return oth != null && object.Equals(this._l, oth._l) && object.Equals(this._r, oth._r) && object.Equals(this._cont, oth._cont);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._l));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._r));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cont));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stmt.Write";
      s += "(";
      s += Dafny.Helpers.ToString(this._l);
      s += ", ";
      s += Dafny.Helpers.ToString(this._r);
      s += ", ";
      s += Dafny.Helpers.ToString(this._cont);
      s += ")";
      return s;
    }
  }

  public interface _IVal {
    bool is_Bool { get; }
    bool is_Int { get; }
    bool is_Thunk { get; }
    bool is_Ref { get; }
    bool dtor_Bool_a0 { get; }
    BigInteger dtor_Int_a0 { get; }
    Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> dtor_Thunk_a0 { get; }
    DAM._IStmt dtor_Thunk_a1 { get; }
    DAM.Ptr<DAM._IVal> dtor_Ref_a0 { get; }
    _IVal DowncastClone();
  }
  public abstract class Val : _IVal {
    public Val() {
    }
    private static readonly DAM._IVal theDefault = create_Bool(false);
    public static DAM._IVal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM._IVal> _TYPE = new Dafny.TypeDescriptor<DAM._IVal>(DAM.Val.Default());
    public static Dafny.TypeDescriptor<DAM._IVal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IVal create_Bool(bool _a0) {
      return new Val_Bool(_a0);
    }
    public static _IVal create_Int(BigInteger _a0) {
      return new Val_Int(_a0);
    }
    public static _IVal create_Thunk(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _a0, DAM._IStmt _a1) {
      return new Val_Thunk(_a0, _a1);
    }
    public static _IVal create_Ref(DAM.Ptr<DAM._IVal> _a0) {
      return new Val_Ref(_a0);
    }
    public bool is_Bool { get { return this is Val_Bool; } }
    public bool is_Int { get { return this is Val_Int; } }
    public bool is_Thunk { get { return this is Val_Thunk; } }
    public bool is_Ref { get { return this is Val_Ref; } }
    public bool dtor_Bool_a0 {
      get {
        var d = this;
        return ((Val_Bool)d)._a0;
      }
    }
    public BigInteger dtor_Int_a0 {
      get {
        var d = this;
        return ((Val_Int)d)._a0;
      }
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> dtor_Thunk_a0 {
      get {
        var d = this;
        return ((Val_Thunk)d)._a0;
      }
    }
    public DAM._IStmt dtor_Thunk_a1 {
      get {
        var d = this;
        return ((Val_Thunk)d)._a1;
      }
    }
    public DAM.Ptr<DAM._IVal> dtor_Ref_a0 {
      get {
        var d = this;
        return ((Val_Ref)d)._a0;
      }
    }
    public abstract _IVal DowncastClone();
  }
  public class Val_Bool : Val {
    public readonly bool _a0;
    public Val_Bool(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Bool(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Val_Bool;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Val.Bool";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Val_Int : Val {
    public readonly BigInteger _a0;
    public Val_Int(BigInteger _a0) : base() {
      this._a0 = _a0;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Int(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Val_Int;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Val.Int";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Val_Thunk : Val {
    public readonly Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _a0;
    public readonly DAM._IStmt _a1;
    public Val_Thunk(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal> _a0, DAM._IStmt _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Thunk(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Val_Thunk;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Val.Thunk";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Val_Ref : Val {
    public readonly DAM.Ptr<DAM._IVal> _a0;
    public Val_Ref(DAM.Ptr<DAM._IVal> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Ref(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Val_Ref;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Val.Ref";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IFrame {
    bool is_Bind { get; }
    bool is_Call { get; }
    Dafny.ISequence<Dafny.Rune> dtor_var__ { get; }
    DAM._IStmt dtor_rhs { get; }
    DAM._IExpr dtor_arg { get; }
    _IFrame DowncastClone();
  }
  public abstract class Frame : _IFrame {
    public Frame() {
    }
    private static readonly DAM._IFrame theDefault = create_Bind(Dafny.Sequence<Dafny.Rune>.Empty, DAM.Stmt.Default());
    public static DAM._IFrame Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM._IFrame> _TYPE = new Dafny.TypeDescriptor<DAM._IFrame>(DAM.Frame.Default());
    public static Dafny.TypeDescriptor<DAM._IFrame> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFrame create_Bind(Dafny.ISequence<Dafny.Rune> var__, DAM._IStmt rhs) {
      return new Frame_Bind(var__, rhs);
    }
    public static _IFrame create_Call(DAM._IExpr arg) {
      return new Frame_Call(arg);
    }
    public bool is_Bind { get { return this is Frame_Bind; } }
    public bool is_Call { get { return this is Frame_Call; } }
    public Dafny.ISequence<Dafny.Rune> dtor_var__ {
      get {
        var d = this;
        return ((Frame_Bind)d)._var__;
      }
    }
    public DAM._IStmt dtor_rhs {
      get {
        var d = this;
        return ((Frame_Bind)d)._rhs;
      }
    }
    public DAM._IExpr dtor_arg {
      get {
        var d = this;
        return ((Frame_Call)d)._arg;
      }
    }
    public abstract _IFrame DowncastClone();
  }
  public class Frame_Bind : Frame {
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly DAM._IStmt _rhs;
    public Frame_Bind(Dafny.ISequence<Dafny.Rune> var__, DAM._IStmt rhs) : base() {
      this._var__ = var__;
      this._rhs = rhs;
    }
    public override _IFrame DowncastClone() {
      if (this is _IFrame dt) { return dt; }
      return new Frame_Bind(_var__, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Frame_Bind;
      return oth != null && object.Equals(this._var__, oth._var__) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Frame.Bind";
      s += "(";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Frame_Call : Frame {
    public readonly DAM._IExpr _arg;
    public Frame_Call(DAM._IExpr arg) : base() {
      this._arg = arg;
    }
    public override _IFrame DowncastClone() {
      if (this is _IFrame dt) { return dt; }
      return new Frame_Call(_arg);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Frame_Call;
      return oth != null && object.Equals(this._arg, oth._arg);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arg));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Frame.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._arg);
      s += ")";
      return s;
    }
  }

  public interface _IStack {
    bool is_Empty { get; }
    bool is_Push { get; }
    DAM._IFrame dtor_top { get; }
    DAM._IStack dtor_rest { get; }
    _IStack DowncastClone();
    DAM._IOption<_System._ITuple2<DAM._IFrame, DAM._IStack>> Pop();
  }
  public abstract class Stack : _IStack {
    public Stack() {
    }
    private static readonly DAM._IStack theDefault = create_Empty();
    public static DAM._IStack Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM._IStack> _TYPE = new Dafny.TypeDescriptor<DAM._IStack>(DAM.Stack.Default());
    public static Dafny.TypeDescriptor<DAM._IStack> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStack create_Empty() {
      return new Stack_Empty();
    }
    public static _IStack create_Push(DAM._IFrame top, DAM._IStack rest) {
      return new Stack_Push(top, rest);
    }
    public bool is_Empty { get { return this is Stack_Empty; } }
    public bool is_Push { get { return this is Stack_Push; } }
    public DAM._IFrame dtor_top {
      get {
        var d = this;
        return ((Stack_Push)d)._top;
      }
    }
    public DAM._IStack dtor_rest {
      get {
        var d = this;
        return ((Stack_Push)d)._rest;
      }
    }
    public abstract _IStack DowncastClone();
    public DAM._IOption<_System._ITuple2<DAM._IFrame, DAM._IStack>> Pop() {
      DAM._IStack _source13 = this;
      if (_source13.is_Empty) {
        return DAM.Option<_System._ITuple2<DAM._IFrame, DAM._IStack>>.create_None();
      } else {
        DAM._IFrame _103___mcc_h0 = _source13.dtor_top;
        DAM._IStack _104___mcc_h1 = _source13.dtor_rest;
        DAM._IStack _105_r = _104___mcc_h1;
        DAM._IFrame _106_t = _103___mcc_h0;
        return DAM.Option<_System._ITuple2<DAM._IFrame, DAM._IStack>>.create_Some(_System.Tuple2<DAM._IFrame, DAM._IStack>.create(_106_t, _105_r));
      }
    }
  }
  public class Stack_Empty : Stack {
    public Stack_Empty() : base() {
    }
    public override _IStack DowncastClone() {
      if (this is _IStack dt) { return dt; }
      return new Stack_Empty();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stack_Empty;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stack.Empty";
      return s;
    }
  }
  public class Stack_Push : Stack {
    public readonly DAM._IFrame _top;
    public readonly DAM._IStack _rest;
    public Stack_Push(DAM._IFrame top, DAM._IStack rest) : base() {
      this._top = top;
      this._rest = rest;
    }
    public override _IStack DowncastClone() {
      if (this is _IStack dt) { return dt; }
      return new Stack_Push(_top, _rest);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Stack_Push;
      return oth != null && object.Equals(this._top, oth._top) && object.Equals(this._rest, oth._rest);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._top));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rest));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Stack.Push";
      s += "(";
      s += Dafny.Helpers.ToString(this._top);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rest);
      s += ")";
      return s;
    }
  }

  public interface _IOut {
    bool is_Next { get; }
    bool is_Stuck { get; }
    bool is_Terminal { get; }
    _System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> dtor_Next_a0 { get; }
    DAM._IVal dtor_Terminal_a0 { get; }
    _IOut DowncastClone();
  }
  public abstract class Out : _IOut {
    public Out() {
    }
    private static readonly DAM._IOut theDefault = create_Next(_System.Tuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack>.Default(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM._IVal>.Empty, DAM.Stmt.Default(), DAM.Stack.Default()));
    public static DAM._IOut Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM._IOut> _TYPE = new Dafny.TypeDescriptor<DAM._IOut>(DAM.Out.Default());
    public static Dafny.TypeDescriptor<DAM._IOut> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IOut create_Next(_System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> _a0) {
      return new Out_Next(_a0);
    }
    public static _IOut create_Stuck() {
      return new Out_Stuck();
    }
    public static _IOut create_Terminal(DAM._IVal _a0) {
      return new Out_Terminal(_a0);
    }
    public bool is_Next { get { return this is Out_Next; } }
    public bool is_Stuck { get { return this is Out_Stuck; } }
    public bool is_Terminal { get { return this is Out_Terminal; } }
    public _System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> dtor_Next_a0 {
      get {
        var d = this;
        return ((Out_Next)d)._a0;
      }
    }
    public DAM._IVal dtor_Terminal_a0 {
      get {
        var d = this;
        return ((Out_Terminal)d)._a0;
      }
    }
    public abstract _IOut DowncastClone();
  }
  public class Out_Next : Out {
    public readonly _System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> _a0;
    public Out_Next(_System._ITuple3<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM._IVal>, DAM._IStmt, DAM._IStack> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IOut DowncastClone() {
      if (this is _IOut dt) { return dt; }
      return new Out_Next(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Out_Next;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Out.Next";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Out_Stuck : Out {
    public Out_Stuck() : base() {
    }
    public override _IOut DowncastClone() {
      if (this is _IOut dt) { return dt; }
      return new Out_Stuck();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Out_Stuck;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Out.Stuck";
      return s;
    }
  }
  public class Out_Terminal : Out {
    public readonly DAM._IVal _a0;
    public Out_Terminal(DAM._IVal _a0) : base() {
      this._a0 = _a0;
    }
    public override _IOut DowncastClone() {
      if (this is _IOut dt) { return dt; }
      return new Out_Terminal(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Out_Terminal;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAM.Out.Terminal";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
} // end of namespace DAM

namespace D2DPrettyPrinter {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> PrettyPrint(Dafny.ISequence<DAST._IModule> d) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _hi0 = new BigInteger((d).Count);
      for (BigInteger _107_i = BigInteger.Zero; _107_i < _hi0; _107_i++) {
        Dafny.ISequence<Dafny.Rune> _108_s_k;
        Dafny.ISequence<Dafny.Rune> _out1;
        _out1 = D2DPrettyPrinter.__default.PModule((d).Select(_107_i));
        _108_s_k = _out1;
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _108_s_k);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PModule(DAST._IModule mod) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("module "), (mod).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      BigInteger _hi1 = new BigInteger(((mod).dtor_body).Count);
      for (BigInteger _109_i = BigInteger.Zero; _109_i < _hi1; _109_i++) {
        DAST._IModuleItem _source14 = ((mod).dtor_body).Select(_109_i);
        if (_source14.is_Module) {
          DAST._IModule _110___mcc_h0 = _source14.dtor_Module_a0;
          DAST._IModule _111_m = _110___mcc_h0;
          Dafny.ISequence<Dafny.Rune> _112_s_k;
          Dafny.ISequence<Dafny.Rune> _out2;
          _out2 = D2DPrettyPrinter.__default.PModule(_111_m);
          _112_s_k = _out2;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _112_s_k);
        } else if (_source14.is_Class) {
          DAST._IClass _113___mcc_h1 = _source14.dtor_Class_a0;
          DAST._IClass _114_c = _113___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _115_s_k;
          Dafny.ISequence<Dafny.Rune> _out3;
          _out3 = D2DPrettyPrinter.__default.PClass(_114_c);
          _115_s_k = _out3;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _115_s_k);
        } else if (_source14.is_Trait) {
          DAST._ITrait _116___mcc_h2 = _source14.dtor_Trait_a0;
          DAST._ITrait _117_c = _116___mcc_h2;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        } else if (_source14.is_Newtype) {
          DAST._INewtype _118___mcc_h3 = _source14.dtor_Newtype_a0;
          DAST._INewtype _119_n = _118___mcc_h3;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        } else {
          DAST._IDatatype _120___mcc_h4 = _source14.dtor_Datatype_a0;
          DAST._IDatatype _121_d = _120___mcc_h4;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        }
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PClass(DAST._IClass c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("class "), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      BigInteger _hi2 = new BigInteger(((c).dtor_body).Count);
      for (BigInteger _122_i = BigInteger.Zero; _122_i < _hi2; _122_i++) {
        DAST._IMethod _source15 = ((c).dtor_body).Select(_122_i);
        DAST._IMethod _123___mcc_h0 = _source15;
        DAST._IMethod _124_m = _123___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _125_s_k;
        Dafny.ISequence<Dafny.Rune> _out4;
        _out4 = D2DPrettyPrinter.__default.PMethod(_124_m);
        _125_s_k = _out4;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _125_s_k), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PMethod(DAST._IMethod meth) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("method "), (meth).dtor_name);
      Dafny.ISequence<Dafny.Rune> _126_s_k;
      Dafny.ISequence<Dafny.Rune> _out5;
      _out5 = D2DPrettyPrinter.__default.PFormals((meth).dtor_params, (meth).dtor_typeParams);
      _126_s_k = _out5;
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, _126_s_k);
      Dafny.ISequence<Dafny.Rune> _out6;
      _out6 = D2DPrettyPrinter.__default.PBlock((meth).dtor_body);
      _126_s_k = _out6;
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, _126_s_k);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PFormals(Dafny.ISequence<DAST._IFormal> names, Dafny.ISequence<DAST._IType> types) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
      BigInteger _hi3 = new BigInteger((names).Count);
      for (BigInteger _127_i = BigInteger.Zero; _127_i < _hi3; _127_i++) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, ((names).Select(_127_i)).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": _,"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PBlock(Dafny.ISequence<DAST._IStatement> stmt) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((stmt).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
      }
      BigInteger _hi4 = new BigInteger((stmt).Count);
      for (BigInteger _128_i = BigInteger.Zero; _128_i < _hi4; _128_i++) {
        Dafny.ISequence<Dafny.Rune> _129_s_k;
        Dafny.ISequence<Dafny.Rune> _out7;
        _out7 = D2DPrettyPrinter.__default.PStatement((stmt).Select(_128_i));
        _129_s_k = _out7;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _129_s_k), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      }
      if ((new BigInteger((stmt).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PStatement(DAST._IStatement st) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IStatement _source16 = st;
      if (_source16.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _130___mcc_h0 = _source16.dtor_name;
        DAST._IType _131___mcc_h1 = _source16.dtor_typ;
        DAST._IOptional<DAST._IExpression> _132___mcc_h2 = _source16.dtor_maybeValue;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source16.is_Assign) {
        DAST._IAssignLhs _133___mcc_h6 = _source16.dtor_lhs;
        DAST._IExpression _134___mcc_h7 = _source16.dtor_value;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source16.is_If) {
        DAST._IExpression _135___mcc_h10 = _source16.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _136___mcc_h11 = _source16.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _137___mcc_h12 = _source16.dtor_els;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source16.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _138___mcc_h16 = _source16.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _139___mcc_h17 = _source16.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source16.is_While) {
        DAST._IExpression _140___mcc_h20 = _source16.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _141___mcc_h21 = _source16.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source16.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _142___mcc_h24 = _source16.dtor_boundName;
        DAST._IType _143___mcc_h25 = _source16.dtor_boundType;
        DAST._IExpression _144___mcc_h26 = _source16.dtor_over;
        Dafny.ISequence<DAST._IStatement> _145___mcc_h27 = _source16.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source16.is_Call) {
        DAST._IExpression _146___mcc_h32 = _source16.dtor_on;
        Dafny.ISequence<Dafny.Rune> _147___mcc_h33 = _source16.dtor_name;
        Dafny.ISequence<DAST._IType> _148___mcc_h34 = _source16.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _149___mcc_h35 = _source16.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _150___mcc_h36 = _source16.dtor_outs;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source16.is_Return) {
        DAST._IExpression _151___mcc_h42 = _source16.dtor_expr;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source16.is_EarlyReturn) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return");
      } else if (_source16.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _152___mcc_h44 = _source16.dtor_toLabel;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source16.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _153___mcc_h46 = _source16.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source16.is_JumpTailCallStart) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source16.is_Halt) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else {
        DAST._IExpression _154___mcc_h48 = _source16.dtor_Print_a0;
        DAST._IExpression _155_e = _154___mcc_h48;
        Dafny.ISequence<Dafny.Rune> _156_s_k;
        Dafny.ISequence<Dafny.Rune> _out8;
        _out8 = D2DPrettyPrinter.__default.PExpression(_155_e);
        _156_s_k = _out8;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print "), _156_s_k);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PExpression(DAST._IExpression e) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IExpression _source17 = e;
      if (_source17.is_Literal) {
        DAST._ILiteral _157___mcc_h0 = _source17.dtor_Literal_a0;
        DAST._ILiteral _158_l = _157___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _out9;
        _out9 = D2DPrettyPrinter.__default.PLiteral(_158_l);
        s = _out9;
      } else if (_source17.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _159___mcc_h2 = _source17.dtor_Ident_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source17.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _160___mcc_h4 = _source17.dtor_Companion_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source17.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _161___mcc_h6 = _source17.dtor_Tuple_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source17.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _162___mcc_h8 = _source17.dtor_path;
        Dafny.ISequence<DAST._IType> _163___mcc_h9 = _source17.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _164___mcc_h10 = _source17.dtor_args;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source17.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _165___mcc_h14 = _source17.dtor_dims;
        DAST._IType _166___mcc_h15 = _source17.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source17.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _167___mcc_h18 = _source17.dtor_path;
        Dafny.ISequence<DAST._IType> _168___mcc_h19 = _source17.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _169___mcc_h20 = _source17.dtor_variant;
        bool _170___mcc_h21 = _source17.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _171___mcc_h22 = _source17.dtor_contents;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source17.is_Convert) {
        DAST._IExpression _172___mcc_h28 = _source17.dtor_value;
        DAST._IType _173___mcc_h29 = _source17.dtor_from;
        DAST._IType _174___mcc_h30 = _source17.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source17.is_SeqConstruct) {
        DAST._IExpression _175___mcc_h34 = _source17.dtor_length;
        DAST._IExpression _176___mcc_h35 = _source17.dtor_elem;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source17.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _177___mcc_h38 = _source17.dtor_elements;
        DAST._IType _178___mcc_h39 = _source17.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source17.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _179___mcc_h42 = _source17.dtor_elements;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source17.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _180___mcc_h44 = _source17.dtor_mapElems;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source17.is_This) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source17.is_Ite) {
        DAST._IExpression _181___mcc_h46 = _source17.dtor_cond;
        DAST._IExpression _182___mcc_h47 = _source17.dtor_thn;
        DAST._IExpression _183___mcc_h48 = _source17.dtor_els;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source17.is_UnOp) {
        DAST._IUnaryOp _184___mcc_h52 = _source17.dtor_unOp;
        DAST._IExpression _185___mcc_h53 = _source17.dtor_expr;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source17.is_BinOp) {
        DAST._IBinOp _186___mcc_h56 = _source17.dtor_op;
        DAST._IExpression _187___mcc_h57 = _source17.dtor_left;
        DAST._IExpression _188___mcc_h58 = _source17.dtor_right;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source17.is_ArrayLen) {
        DAST._IExpression _189___mcc_h62 = _source17.dtor_expr;
        BigInteger _190___mcc_h63 = _source17.dtor_dim;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source17.is_Select) {
        DAST._IExpression _191___mcc_h66 = _source17.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _192___mcc_h67 = _source17.dtor_field;
        bool _193___mcc_h68 = _source17.dtor_isConstant;
        bool _194___mcc_h69 = _source17.dtor_onDatatype;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source17.is_SelectFn) {
        DAST._IExpression _195___mcc_h74 = _source17.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _196___mcc_h75 = _source17.dtor_field;
        bool _197___mcc_h76 = _source17.dtor_onDatatype;
        bool _198___mcc_h77 = _source17.dtor_isStatic;
        BigInteger _199___mcc_h78 = _source17.dtor_arity;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source17.is_Index) {
        DAST._IExpression _200___mcc_h84 = _source17.dtor_expr;
        DAST._ICollKind _201___mcc_h85 = _source17.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _202___mcc_h86 = _source17.dtor_indices;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source17.is_IndexRange) {
        DAST._IExpression _203___mcc_h90 = _source17.dtor_expr;
        bool _204___mcc_h91 = _source17.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _205___mcc_h92 = _source17.dtor_low;
        DAST._IOptional<DAST._IExpression> _206___mcc_h93 = _source17.dtor_high;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source17.is_TupleSelect) {
        DAST._IExpression _207___mcc_h98 = _source17.dtor_expr;
        BigInteger _208___mcc_h99 = _source17.dtor_index;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source17.is_Call) {
        DAST._IExpression _209___mcc_h102 = _source17.dtor_on;
        Dafny.ISequence<Dafny.Rune> _210___mcc_h103 = _source17.dtor_name;
        Dafny.ISequence<DAST._IType> _211___mcc_h104 = _source17.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _212___mcc_h105 = _source17.dtor_args;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source17.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _213___mcc_h110 = _source17.dtor_params;
        DAST._IType _214___mcc_h111 = _source17.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _215___mcc_h112 = _source17.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source17.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _216___mcc_h116 = _source17.dtor_values;
        DAST._IType _217___mcc_h117 = _source17.dtor_retType;
        DAST._IExpression _218___mcc_h118 = _source17.dtor_expr;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source17.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _219___mcc_h122 = _source17.dtor_name;
        DAST._IType _220___mcc_h123 = _source17.dtor_typ;
        DAST._IExpression _221___mcc_h124 = _source17.dtor_value;
        DAST._IExpression _222___mcc_h125 = _source17.dtor_iifeBody;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source17.is_Apply) {
        DAST._IExpression _223___mcc_h130 = _source17.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _224___mcc_h131 = _source17.dtor_args;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source17.is_TypeTest) {
        DAST._IExpression _225___mcc_h134 = _source17.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _226___mcc_h135 = _source17.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _227___mcc_h136 = _source17.dtor_variant;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source17.is_InitializationValue) {
        DAST._IType _228___mcc_h140 = _source17.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source17.is_BoolBoundedPool) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source17.is_SetBoundedPool) {
        DAST._IExpression _229___mcc_h142 = _source17.dtor_of;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source17.is_SeqBoundedPool) {
        DAST._IExpression _230___mcc_h144 = _source17.dtor_of;
        bool _231___mcc_h145 = _source17.dtor_includeDuplicates;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else {
        DAST._IExpression _232___mcc_h148 = _source17.dtor_lo;
        DAST._IExpression _233___mcc_h149 = _source17.dtor_hi;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PLiteral(DAST._ILiteral l) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._ILiteral _source18 = l;
      if (_source18.is_BoolLiteral) {
        bool _234___mcc_h0 = _source18.dtor_BoolLiteral_a0;
        bool _235_b = _234___mcc_h0;
        s = ((_235_b) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")));
      } else if (_source18.is_IntLiteral) {
        Dafny.ISequence<Dafny.Rune> _236___mcc_h1 = _source18.dtor_IntLiteral_a0;
        DAST._IType _237___mcc_h2 = _source18.dtor_IntLiteral_a1;
        Dafny.ISequence<Dafny.Rune> _238_i = _236___mcc_h1;
        s = _238_i;
      } else if (_source18.is_DecLiteral) {
        Dafny.ISequence<Dafny.Rune> _239___mcc_h3 = _source18.dtor_DecLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _240___mcc_h4 = _source18.dtor_DecLiteral_a1;
        DAST._IType _241___mcc_h5 = _source18.dtor_DecLiteral_a2;
        Dafny.ISequence<Dafny.Rune> _242_r = _240___mcc_h4;
        Dafny.ISequence<Dafny.Rune> _243_l = _239___mcc_h3;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_243_l, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _242_r);
      } else if (_source18.is_StringLiteral) {
        Dafny.ISequence<Dafny.Rune> _244___mcc_h6 = _source18.dtor_StringLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _245_s_k = _244___mcc_h6;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""), _245_s_k), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""));
      } else if (_source18.is_CharLiteral) {
        Dafny.Rune _246___mcc_h7 = _source18.dtor_CharLiteral_a0;
        Dafny.Rune _247_c = _246___mcc_h7;
        s = Dafny.Sequence<Dafny.Rune>.FromElements(_247_c);
      } else {
        DAST._IType _248___mcc_h8 = _source18.dtor_Null_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("null");
      }
      return s;
    }
  }
} // end of namespace D2DPrettyPrinter
namespace ResolvedDesugaredExecutableDafnyPlugin {


  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _out10;
      _out10 = D2DPrettyPrinter.__default.PrettyPrint(p);
      s = _out10;
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      return s;
    }
  }
} // end of namespace ResolvedDesugaredExecutableDafnyPlugin
namespace DCOMP {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> natToString(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0");
      } else if ((n) == (BigInteger.One)) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1");
      } else if ((n) == (new BigInteger(2))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("2");
      } else if ((n) == (new BigInteger(3))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("3");
      } else if ((n) == (new BigInteger(4))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("4");
      } else if ((n) == (new BigInteger(5))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("5");
      } else if ((n) == (new BigInteger(6))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("6");
      } else if ((n) == (new BigInteger(7))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("7");
      } else if ((n) == (new BigInteger(8))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("8");
      } else if ((n) == (new BigInteger(9))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("9");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.natToString(Dafny.Helpers.EuclideanDivision(n, new BigInteger(10))), DCOMP.__default.natToString(Dafny.Helpers.EuclideanModulus(n, new BigInteger(10))));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _249___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_249___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else {
        if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
          _249___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_249___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
          Dafny.ISequence<Dafny.Rune> _in1 = (i).Drop(BigInteger.One);
          i = _in1;
          goto TAIL_CALL_START;
        } else {
          _249___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_249___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
          Dafny.ISequence<Dafny.Rune> _in2 = (i).Drop(BigInteger.One);
          i = _in2;
          goto TAIL_CALL_START;
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), DCOMP.__default.replaceDots(i));
    }
  }

  public partial class stringNat {
    private static readonly Dafny.ISequence<Dafny.Rune> Witness = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1");
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(DCOMP.stringNat.Default());
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _250_body;
      Dafny.ISequence<Dafny.Rune> _out11;
      _out11 = DCOMP.COMP.GenModuleBody((mod).dtor_body, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
      _250_body = _out11;
      if ((mod).dtor_isExtern) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), DCOMP.__default.escapeIdent((mod).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), DCOMP.__default.escapeIdent((mod).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _250_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _251_i;
      _251_i = BigInteger.Zero;
      while ((_251_i) < (new BigInteger((body).Count))) {
        Dafny.ISequence<Dafny.Rune> _252_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        DAST._IModuleItem _source19 = (body).Select(_251_i);
        if (_source19.is_Module) {
          DAST._IModule _253___mcc_h0 = _source19.dtor_Module_a0;
          DAST._IModule _254_m = _253___mcc_h0;
          Dafny.ISequence<Dafny.Rune> _out12;
          _out12 = DCOMP.COMP.GenModule(_254_m, containingPath);
          _252_generated = _out12;
        } else if (_source19.is_Class) {
          DAST._IClass _255___mcc_h1 = _source19.dtor_Class_a0;
          DAST._IClass _256_c = _255___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _out13;
          _out13 = DCOMP.COMP.GenClass(_256_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_256_c).dtor_name)));
          _252_generated = _out13;
        } else if (_source19.is_Trait) {
          DAST._ITrait _257___mcc_h2 = _source19.dtor_Trait_a0;
          DAST._ITrait _258_t = _257___mcc_h2;
          Dafny.ISequence<Dafny.Rune> _out14;
          _out14 = DCOMP.COMP.GenTrait(_258_t, containingPath);
          _252_generated = _out14;
        } else if (_source19.is_Newtype) {
          DAST._INewtype _259___mcc_h3 = _source19.dtor_Newtype_a0;
          DAST._INewtype _260_n = _259___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _out15;
          _out15 = DCOMP.COMP.GenNewtype(_260_n);
          _252_generated = _out15;
        } else {
          DAST._IDatatype _261___mcc_h4 = _source19.dtor_Datatype_a0;
          DAST._IDatatype _262_d = _261___mcc_h4;
          Dafny.ISequence<Dafny.Rune> _out16;
          _out16 = DCOMP.COMP.GenDatatype(_262_d);
          _252_generated = _out16;
        }
        if ((_251_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _252_generated);
        _251_i = (_251_i) + (BigInteger.One);
      }
      return s;
    }
    public static void GenTypeParameters(Dafny.ISequence<DAST._IType> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<Dafny.Rune> typeParams, out Dafny.ISequence<Dafny.Rune> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints, out Dafny.ISequence<Dafny.Rune> constrainedEraseParams, out Dafny.ISequence<Dafny.Rune> unerasedParams, out Dafny.ISequence<Dafny.Rune> erasedParams) {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Empty;
      unerasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      erasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _263_tpI;
      _263_tpI = BigInteger.Zero;
      if ((new BigInteger((@params).Count)).Sign == 1) {
        typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where ");
        constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_263_tpI) < (new BigInteger((@params).Count))) {
          DAST._IType _264_tp;
          _264_tp = (@params).Select(_263_tpI);
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_264_tp));
          Dafny.ISequence<Dafny.Rune> _265_genTp;
          Dafny.ISequence<Dafny.Rune> _out17;
          _out17 = DCOMP.COMP.GenType(_264_tp, false, false);
          _265_genTp = _out17;
          typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(typeParams, _265_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          Dafny.ISequence<Dafny.Rune> _266_baseConstraints;
          _266_baseConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<"), _265_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default"));
          constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(constrainedTypeParams, _265_genTp), _266_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static, "));
          whereConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(whereConstraints, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _265_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(constrainedEraseParams, _265_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _265_genTp), _266_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + ::dafny_runtime::DafnyUnerasable<")), _265_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased> + 'static, "));
          unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, _265_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, _265_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _263_tpI = (_263_tpI) + (BigInteger.One);
        }
        typeParams = Dafny.Sequence<Dafny.Rune>.Concat(typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Concat(constrainedTypeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Concat(constrainedEraseParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _267_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _268_typeParams;
      Dafny.ISequence<Dafny.Rune> _269_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _270_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _271_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _272_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _273_erasedParams;
      Dafny.ISet<DAST._IType> _out18;
      Dafny.ISequence<Dafny.Rune> _out19;
      Dafny.ISequence<Dafny.Rune> _out20;
      Dafny.ISequence<Dafny.Rune> _out21;
      Dafny.ISequence<Dafny.Rune> _out22;
      Dafny.ISequence<Dafny.Rune> _out23;
      Dafny.ISequence<Dafny.Rune> _out24;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out18, out _out19, out _out20, out _out21, out _out22, out _out23, out _out24);
      _267_typeParamsSet = _out18;
      _268_typeParams = _out19;
      _269_constrainedTypeParams = _out20;
      _270_whereConstraints = _out21;
      _271_constrainedEraseParams = _out22;
      _272_unerasedParams = _out23;
      _273_erasedParams = _out24;
      Dafny.ISequence<Dafny.Rune> _274_fields;
      _274_fields = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<Dafny.Rune> _275_fieldInits;
      _275_fieldInits = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _276_fieldI;
      _276_fieldI = BigInteger.Zero;
      while ((_276_fieldI) < (new BigInteger(((c).dtor_fields).Count))) {
        DAST._IField _277_field;
        _277_field = ((c).dtor_fields).Select(_276_fieldI);
        Dafny.ISequence<Dafny.Rune> _278_fieldType;
        Dafny.ISequence<Dafny.Rune> _out25;
        _out25 = DCOMP.COMP.GenType(((_277_field).dtor_formal).dtor_typ, false, false);
        _278_fieldType = _out25;
        _274_fields = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_274_fields, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")), DCOMP.__default.escapeIdent(((_277_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell<")), _278_fieldType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">,\n"));
        DAST._IOptional<DAST._IExpression> _source20 = (_277_field).dtor_defaultValue;
        if (_source20.is_Some) {
          DAST._IExpression _279___mcc_h0 = _source20.dtor_Some_a0;
          DAST._IExpression _280_e = _279___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _281_eStr;
            bool _282___v1;
            bool _283___v2;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _284___v3;
            Dafny.ISequence<Dafny.Rune> _out26;
            bool _out27;
            bool _out28;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out29;
            DCOMP.COMP.GenExpr(_280_e, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out26, out _out27, out _out28, out _out29);
            _281_eStr = _out26;
            _282___v1 = _out27;
            _283___v2 = _out28;
            _284___v3 = _out29;
            _275_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_275_fieldInits, DCOMP.__default.escapeIdent(((_277_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell::new(")), _281_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("),\n"));
          }
        } else {
          {
            _275_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_275_fieldInits, DCOMP.__default.escapeIdent(((_277_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell::new(::std::default::Default::default()),\n"));
          }
        }
        _276_fieldI = (_276_fieldI) + (BigInteger.One);
      }
      BigInteger _285_typeParamI;
      _285_typeParamI = BigInteger.Zero;
      while ((_285_typeParamI) < (new BigInteger(((c).dtor_typeParams).Count))) {
        Dafny.ISequence<Dafny.Rune> _286_tpeGen;
        Dafny.ISequence<Dafny.Rune> _out30;
        _out30 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_285_typeParamI), false, false);
        _286_tpeGen = _out30;
        _274_fields = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_274_fields, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_")), DCOMP.__default.natToString(_285_typeParamI)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::marker::PhantomData<")), _286_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">,\n"));
        _275_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_275_fieldInits, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_")), DCOMP.__default.natToString(_285_typeParamI)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::marker::PhantomData,\n"));
        _285_typeParamI = (_285_typeParamI) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub struct "), DCOMP.__default.escapeIdent((c).dtor_name)), _268_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _274_fields), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      Dafny.ISequence<Dafny.Rune> _287_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _288_traitBodies;
      Dafny.ISequence<Dafny.Rune> _out31;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out32;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(path)), _267_typeParamsSet, out _out31, out _out32);
      _287_implBody = _out31;
      _288_traitBodies = _out32;
      _287_implBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn new() -> Self {\n"), DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _275_fieldInits), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n}\n")), _287_implBody);
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _269_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), DCOMP.__default.escapeIdent((c).dtor_name)), _268_typeParams), _270_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _287_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _289_i;
        _289_i = BigInteger.Zero;
        while ((_289_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _290_superClass;
          _290_superClass = ((c).dtor_superClasses).Select(_289_i);
          DAST._IType _source21 = _290_superClass;
          if (_source21.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _291___mcc_h1 = _source21.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _292___mcc_h2 = _source21.dtor_typeArgs;
            DAST._IResolvedType _293___mcc_h3 = _source21.dtor_resolved;
            DAST._IResolvedType _source22 = _293___mcc_h3;
            if (_source22.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _294___mcc_h7 = _source22.dtor_path;
            } else if (_source22.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _295___mcc_h9 = _source22.dtor_path;
              Dafny.ISequence<DAST._IType> _296_typeArgs = _292___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _297_traitPath = _291___mcc_h1;
              {
                Dafny.ISequence<Dafny.Rune> _298_pathStr;
                Dafny.ISequence<Dafny.Rune> _out33;
                _out33 = DCOMP.COMP.GenPath(_297_traitPath);
                _298_pathStr = _out33;
                Dafny.ISequence<Dafny.Rune> _299_typeArgs;
                Dafny.ISequence<Dafny.Rune> _out34;
                _out34 = DCOMP.COMP.GenTypeArgs(_296_typeArgs, false, false);
                _299_typeArgs = _out34;
                Dafny.ISequence<Dafny.Rune> _300_body;
                _300_body = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
                if ((_288_traitBodies).Contains(_297_traitPath)) {
                  _300_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Select(_288_traitBodies, _297_traitPath);
                }
                Dafny.ISequence<Dafny.Rune> _301_genSelfPath;
                Dafny.ISequence<Dafny.Rune> _out35;
                _out35 = DCOMP.COMP.GenPath(path);
                _301_genSelfPath = _out35;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nimpl ")), _269_constrainedTypeParams), _298_pathStr), _299_typeArgs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" for ::std::rc::Rc<")), _301_genSelfPath), _268_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")), _270_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _300_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
              }
            } else {
              DAST._IType _302___mcc_h11 = _source22.dtor_Newtype_a0;
            }
          } else if (_source21.is_Nullable) {
            DAST._IType _303___mcc_h13 = _source21.dtor_Nullable_a0;
          } else if (_source21.is_Tuple) {
            Dafny.ISequence<DAST._IType> _304___mcc_h15 = _source21.dtor_Tuple_a0;
          } else if (_source21.is_Array) {
            DAST._IType _305___mcc_h17 = _source21.dtor_element;
            BigInteger _306___mcc_h18 = _source21.dtor_dims;
          } else if (_source21.is_Seq) {
            DAST._IType _307___mcc_h21 = _source21.dtor_element;
          } else if (_source21.is_Set) {
            DAST._IType _308___mcc_h23 = _source21.dtor_element;
          } else if (_source21.is_Multiset) {
            DAST._IType _309___mcc_h25 = _source21.dtor_element;
          } else if (_source21.is_Map) {
            DAST._IType _310___mcc_h27 = _source21.dtor_key;
            DAST._IType _311___mcc_h28 = _source21.dtor_value;
          } else if (_source21.is_Arrow) {
            Dafny.ISequence<DAST._IType> _312___mcc_h31 = _source21.dtor_args;
            DAST._IType _313___mcc_h32 = _source21.dtor_result;
          } else if (_source21.is_Primitive) {
            DAST._IPrimitive _314___mcc_h35 = _source21.dtor_Primitive_a0;
          } else if (_source21.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _315___mcc_h37 = _source21.dtor_Passthrough_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _316___mcc_h39 = _source21.dtor_TypeArg_a0;
          }
          _289_i = (_289_i) + (BigInteger.One);
        }
      }
      Dafny.ISequence<Dafny.Rune> _317_defaultImpl;
      _317_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _269_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _268_typeParams), _270_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      _317_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_317_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n"));
      _317_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_317_defaultImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new()\n"));
      _317_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_317_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      _317_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_317_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      Dafny.ISequence<Dafny.Rune> _318_printImpl;
      _318_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _269_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _268_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {\n"));
      _318_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_318_printImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(__fmt_print_formatter, \"")), ((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _319_ptrPartialEqImpl;
      _319_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _268_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::cmp::PartialEq for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _268_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      _319_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_319_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn eq(&self, other: &Self) -> bool {\n"));
      _319_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_319_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ptr::eq(self, other)"));
      _319_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_319_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _320_identEraseImpls;
      _320_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _269_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _268_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), DCOMP.__default.escapeIdent((c).dtor_name)), _273_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}\n"));
      _320_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_320_identEraseImpls, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _271_constrainedEraseParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _272_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _268_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _317_defaultImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _318_printImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _319_ptrPartialEqImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _320_identEraseImpls);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _321_typeParamsSet;
      _321_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<Dafny.Rune> _322_typeParams;
      _322_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _323_tpI;
      _323_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        _322_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_323_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._IType _324_tp;
          _324_tp = ((t).dtor_typeParams).Select(_323_tpI);
          _321_typeParamsSet = Dafny.Set<DAST._IType>.Union(_321_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_324_tp));
          Dafny.ISequence<Dafny.Rune> _325_genTp;
          Dafny.ISequence<Dafny.Rune> _out36;
          _out36 = DCOMP.COMP.GenType(_324_tp, false, false);
          _325_genTp = _out36;
          _322_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_322_typeParams, _325_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _323_tpI = (_323_tpI) + (BigInteger.One);
        }
        _322_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(_322_typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _326_fullPath;
      _326_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<Dafny.Rune> _327_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _328___v6;
      Dafny.ISequence<Dafny.Rune> _out37;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out38;
      DCOMP.COMP.GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_326_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_326_fullPath)), _321_typeParamsSet, out _out37, out _out38);
      _327_implBody = _out37;
      _328___v6 = _out38;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub trait "), DCOMP.__default.escapeIdent((t).dtor_name)), _322_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _327_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenNewtype(DAST._INewtype c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _329_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _330_typeParams;
      Dafny.ISequence<Dafny.Rune> _331_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _332_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _333___v7;
      Dafny.ISequence<Dafny.Rune> _334___v8;
      Dafny.ISequence<Dafny.Rune> _335___v9;
      Dafny.ISet<DAST._IType> _out39;
      Dafny.ISequence<Dafny.Rune> _out40;
      Dafny.ISequence<Dafny.Rune> _out41;
      Dafny.ISequence<Dafny.Rune> _out42;
      Dafny.ISequence<Dafny.Rune> _out43;
      Dafny.ISequence<Dafny.Rune> _out44;
      Dafny.ISequence<Dafny.Rune> _out45;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out39, out _out40, out _out41, out _out42, out _out43, out _out44, out _out45);
      _329_typeParamsSet = _out39;
      _330_typeParams = _out40;
      _331_constrainedTypeParams = _out41;
      _332_whereConstraints = _out42;
      _333___v7 = _out43;
      _334___v8 = _out44;
      _335___v9 = _out45;
      Dafny.ISequence<Dafny.Rune> _336_underlyingType;
      Dafny.ISequence<Dafny.Rune> _out46;
      _out46 = DCOMP.COMP.GenType((c).dtor_base, false, false);
      _336_underlyingType = _out46;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]\n#[repr(transparent)]\npub struct "), DCOMP.__default.escapeIdent((c).dtor_name)), _330_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(pub ")), _336_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _331_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _330_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), _336_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _331_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), _336_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _330_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _331_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _330_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _330_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _331_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _330_typeParams), _332_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n"));
      DAST._IOptional<DAST._IExpression> _source23 = (c).dtor_witnessExpr;
      if (_source23.is_Some) {
        DAST._IExpression _337___mcc_h0 = _source23.dtor_Some_a0;
        DAST._IExpression _338_e = _337___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _339_eStr;
          bool _340___v10;
          bool _341___v11;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _342___v12;
          Dafny.ISequence<Dafny.Rune> _out47;
          bool _out48;
          bool _out49;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out50;
          DCOMP.COMP.GenExpr(_338_e, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out47, out _out48, out _out49, out _out50);
          _339_eStr = _out47;
          _340___v10 = _out48;
          _341___v11 = _out49;
          _342___v12 = _out50;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _339_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
        }
      } else {
        {
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(::std::default::Default::default())\n"));
        }
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _331_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _330_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, in_seq: bool) -> ::std::fmt::Result {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, __fmt_print_formatter, in_seq)\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _331_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::ops::Deref for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _330_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = ")), _336_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn deref(&self) -> &Self::Target {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenDatatype(DAST._IDatatype c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _343_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _344_typeParams;
      Dafny.ISequence<Dafny.Rune> _345_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _346_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _347_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _348_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _349_erasedParams;
      Dafny.ISet<DAST._IType> _out51;
      Dafny.ISequence<Dafny.Rune> _out52;
      Dafny.ISequence<Dafny.Rune> _out53;
      Dafny.ISequence<Dafny.Rune> _out54;
      Dafny.ISequence<Dafny.Rune> _out55;
      Dafny.ISequence<Dafny.Rune> _out56;
      Dafny.ISequence<Dafny.Rune> _out57;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out51, out _out52, out _out53, out _out54, out _out55, out _out56, out _out57);
      _343_typeParamsSet = _out51;
      _344_typeParams = _out52;
      _345_constrainedTypeParams = _out53;
      _346_whereConstraints = _out54;
      _347_constrainedEraseParams = _out55;
      _348_unerasedParams = _out56;
      _349_erasedParams = _out57;
      Dafny.ISequence<Dafny.Rune> _350_ctors;
      _350_ctors = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _351_i;
      _351_i = BigInteger.Zero;
      while ((_351_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _352_ctor;
        _352_ctor = ((c).dtor_ctors).Select(_351_i);
        Dafny.ISequence<Dafny.Rune> _353_ctorBody;
        _353_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_352_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        BigInteger _354_j;
        _354_j = BigInteger.Zero;
        while ((_354_j) < (new BigInteger(((_352_ctor).dtor_args).Count))) {
          DAST._IFormal _355_formal;
          _355_formal = ((_352_ctor).dtor_args).Select(_354_j);
          Dafny.ISequence<Dafny.Rune> _356_formalType;
          Dafny.ISequence<Dafny.Rune> _out58;
          _out58 = DCOMP.COMP.GenType((_355_formal).dtor_typ, false, false);
          _356_formalType = _out58;
          if ((c).dtor_isCo) {
            _353_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_353_ctorBody, DCOMP.__default.escapeIdent((_355_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper<")), _356_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">, "));
          } else {
            _353_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_353_ctorBody, DCOMP.__default.escapeIdent((_355_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _356_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          _354_j = (_354_j) + (BigInteger.One);
        }
        _353_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(_353_ctorBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        _350_ctors = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_350_ctors, _353_ctorBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"));
        _351_i = (_351_i) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _357_selfPath;
      _357_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<Dafny.Rune> _358_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _359_traitBodies;
      Dafny.ISequence<Dafny.Rune> _out59;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out60;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(_357_selfPath)), _343_typeParamsSet, out _out59, out _out60);
      _358_implBody = _out59;
      _359_traitBodies = _out60;
      _351_i = BigInteger.Zero;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _360_emittedFields;
      _360_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      while ((_351_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _361_ctor;
        _361_ctor = ((c).dtor_ctors).Select(_351_i);
        BigInteger _362_j;
        _362_j = BigInteger.Zero;
        while ((_362_j) < (new BigInteger(((_361_ctor).dtor_args).Count))) {
          DAST._IFormal _363_formal;
          _363_formal = ((_361_ctor).dtor_args).Select(_362_j);
          if (!((_360_emittedFields).Contains((_363_formal).dtor_name))) {
            _360_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_360_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_363_formal).dtor_name));
            Dafny.ISequence<Dafny.Rune> _364_formalType;
            Dafny.ISequence<Dafny.Rune> _out61;
            _out61 = DCOMP.COMP.GenType((_363_formal).dtor_typ, false, false);
            _364_formalType = _out61;
            Dafny.ISequence<Dafny.Rune> _365_methodBody;
            _365_methodBody = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match self {\n");
            BigInteger _366_k;
            _366_k = BigInteger.Zero;
            while ((_366_k) < (new BigInteger(((c).dtor_ctors).Count))) {
              DAST._IDatatypeCtor _367_ctor2;
              _367_ctor2 = ((c).dtor_ctors).Select(_366_k);
              Dafny.ISequence<Dafny.Rune> _368_ctorMatch;
              _368_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_367_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              BigInteger _369_l;
              _369_l = BigInteger.Zero;
              bool _370_hasMatchingField;
              _370_hasMatchingField = false;
              while ((_369_l) < (new BigInteger(((_367_ctor2).dtor_args).Count))) {
                DAST._IFormal _371_formal2;
                _371_formal2 = ((_367_ctor2).dtor_args).Select(_369_l);
                if (((_363_formal).dtor_name).Equals((_371_formal2).dtor_name)) {
                  _370_hasMatchingField = true;
                }
                _368_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_368_ctorMatch, DCOMP.__default.escapeIdent((_371_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                _369_l = (_369_l) + (BigInteger.One);
              }
              if (_370_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _368_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_368_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => ::std::ops::Deref::deref(&")), DCOMP.__default.escapeIdent((_363_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0),\n"));
                } else {
                  _368_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_368_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => ")), DCOMP.__default.escapeIdent((_363_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"));
                }
              } else {
                _368_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_368_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => panic!(\"field does not exist on this variant\"),\n"));
              }
              _365_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(_365_methodBody, _368_ctorMatch);
              _366_k = (_366_k) + (BigInteger.One);
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _365_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_365_methodBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..) => panic!(),\n"));
            }
            _365_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(_365_methodBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            _358_implBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_358_implBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn ")), DCOMP.__default.escapeIdent((_363_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&self) -> &")), _364_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _365_methodBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
          }
          _362_j = (_362_j) + (BigInteger.One);
        }
        _351_i = (_351_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _350_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_350_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant("));
        BigInteger _372_typeI;
        _372_typeI = BigInteger.Zero;
        while ((_372_typeI) < (new BigInteger(((c).dtor_typeParams).Count))) {
          if ((_372_typeI).Sign == 1) {
            _350_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_350_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _373_genTp;
          Dafny.ISequence<Dafny.Rune> _out62;
          _out62 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_372_typeI), false, false);
          _373_genTp = _out62;
          _350_ctors = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_350_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData::<")), _373_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          _372_typeI = (_372_typeI) + (BigInteger.One);
        }
        _350_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_350_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      Dafny.ISequence<Dafny.Rune> _374_enumBody;
      _374_enumBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq)]\npub enum "), DCOMP.__default.escapeIdent((c).dtor_name)), _344_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _350_ctors), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _345_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), DCOMP.__default.escapeIdent((c).dtor_name)), _344_typeParams), _346_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _358_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      Dafny.ISequence<Dafny.Rune> _375_identEraseImpls;
      _375_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _345_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _344_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), DCOMP.__default.escapeIdent((c).dtor_name)), _349_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}\n"));
      _375_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_375_identEraseImpls, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _347_constrainedEraseParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _348_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _344_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      Dafny.ISequence<Dafny.Rune> _376_printImpl;
      _376_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _345_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _344_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match self {\n"));
      _351_i = BigInteger.Zero;
      while ((_351_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _377_ctor;
        _377_ctor = ((c).dtor_ctors).Select(_351_i);
        Dafny.ISequence<Dafny.Rune> _378_ctorMatch;
        _378_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_377_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _379_modulePrefix;
        _379_modulePrefix = (((((c).dtor_enclosingModule)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(((c).dtor_enclosingModule), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        Dafny.ISequence<Dafny.Rune> _380_printRhs;
        _380_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(__fmt_print_formatter, \""), _379_modulePrefix), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (_377_ctor).dtor_name), (((_377_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?;")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?;"))));
        BigInteger _381_j;
        _381_j = BigInteger.Zero;
        while ((_381_j) < (new BigInteger(((_377_ctor).dtor_args).Count))) {
          DAST._IFormal _382_formal;
          _382_formal = ((_377_ctor).dtor_args).Select(_381_j);
          _378_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_378_ctorMatch, DCOMP.__default.escapeIdent((_382_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          if ((_381_j).Sign == 1) {
            _380_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_380_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nwrite!(__fmt_print_formatter, \", \")?;"));
          }
          _380_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_380_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n::dafny_runtime::DafnyPrint::fmt_print(")), DCOMP.__default.escapeIdent((_382_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", __fmt_print_formatter, false)?;"));
          _381_j = (_381_j) + (BigInteger.One);
        }
        _378_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_378_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_377_ctor).dtor_hasAnyArgs) {
          _380_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_380_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nwrite!(__fmt_print_formatter, \")\")?;"));
        }
        _380_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_380_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nOk(())"));
        _376_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_376_printImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _378_ctorMatch), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" => {\n")), _380_printRhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n"));
        _351_i = (_351_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _376_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_376_printImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..) => {panic!()\n}\n"));
      }
      _376_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(_376_printImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _383_defaultImpl;
      _383_defaultImpl = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        _383_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _345_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _344_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n")), DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
        _351_i = BigInteger.Zero;
        while ((_351_i) < (new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count))) {
          DAST._IFormal _384_formal;
          _384_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_351_i);
          _383_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_383_defaultImpl, DCOMP.__default.escapeIdent((_384_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::default::Default::default(),\n"));
          _351_i = (_351_i) + (BigInteger.One);
        }
        _383_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_383_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n}\n}\n"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_374_enumBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _375_identEraseImpls), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _376_printImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _383_defaultImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      if ((new BigInteger((p).Count)).Sign == 0) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
        return s;
      } else {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super::");
        BigInteger _385_i;
        _385_i = BigInteger.Zero;
        while ((_385_i) < (new BigInteger((p).Count))) {
          if ((_385_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(((p).Select(_385_i))));
          _385_i = (_385_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((args).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        BigInteger _386_i;
        _386_i = BigInteger.Zero;
        while ((_386_i) < (new BigInteger((args).Count))) {
          if ((_386_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _387_genTp;
          Dafny.ISequence<Dafny.Rune> _out63;
          _out63 = DCOMP.COMP.GenType((args).Select(_386_i), inBinding, inFn);
          _387_genTp = _out63;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _387_genTp);
          _386_i = (_386_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenType(DAST._IType c, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IType _source24 = c;
      if (_source24.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _388___mcc_h0 = _source24.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _389___mcc_h1 = _source24.dtor_typeArgs;
        DAST._IResolvedType _390___mcc_h2 = _source24.dtor_resolved;
        DAST._IResolvedType _391_resolved = _390___mcc_h2;
        Dafny.ISequence<DAST._IType> _392_args = _389___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _393_p = _388___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _out64;
          _out64 = DCOMP.COMP.GenPath(_393_p);
          s = _out64;
          Dafny.ISequence<Dafny.Rune> _394_typeArgs;
          Dafny.ISequence<Dafny.Rune> _out65;
          _out65 = DCOMP.COMP.GenTypeArgs(_392_args, inBinding, inFn);
          _394_typeArgs = _out65;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _394_typeArgs);
          DAST._IResolvedType _source25 = _391_resolved;
          if (_source25.is_Datatype) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _395___mcc_h18 = _source25.dtor_path;
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
            }
          } else if (_source25.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _396___mcc_h20 = _source25.dtor_path;
            {
              if ((_393_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
                s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<dyn ::std::any::Any>");
              } else {
                if (inBinding) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              }
            }
          } else {
            DAST._IType _397___mcc_h22 = _source25.dtor_Newtype_a0;
            DAST._IResolvedType _398_Primitive = _391_resolved;
          }
        }
      } else if (_source24.is_Nullable) {
        DAST._IType _399___mcc_h3 = _source24.dtor_Nullable_a0;
        DAST._IType _400_inner = _399___mcc_h3;
        {
          Dafny.ISequence<Dafny.Rune> _401_innerStr;
          Dafny.ISequence<Dafny.Rune> _out66;
          _out66 = DCOMP.COMP.GenType(_400_inner, inBinding, inFn);
          _401_innerStr = _out66;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option<"), _401_innerStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source24.is_Tuple) {
        Dafny.ISequence<DAST._IType> _402___mcc_h4 = _source24.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IType> _403_types = _402___mcc_h4;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          BigInteger _404_i;
          _404_i = BigInteger.Zero;
          while ((_404_i) < (new BigInteger((_403_types).Count))) {
            if ((_404_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _405_generated;
            Dafny.ISequence<Dafny.Rune> _out67;
            _out67 = DCOMP.COMP.GenType((_403_types).Select(_404_i), inBinding, inFn);
            _405_generated = _out67;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _405_generated), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            _404_i = (_404_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
        }
      } else if (_source24.is_Array) {
        DAST._IType _406___mcc_h5 = _source24.dtor_element;
        BigInteger _407___mcc_h6 = _source24.dtor_dims;
        BigInteger _408_dims = _407___mcc_h6;
        DAST._IType _409_element = _406___mcc_h5;
        {
          Dafny.ISequence<Dafny.Rune> _410_elemStr;
          Dafny.ISequence<Dafny.Rune> _out68;
          _out68 = DCOMP.COMP.GenType(_409_element, inBinding, inFn);
          _410_elemStr = _out68;
          s = _410_elemStr;
          BigInteger _411_i;
          _411_i = BigInteger.Zero;
          while ((_411_i) < (_408_dims)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<::std::cell::RefCell<::std::vec::Vec<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>>"));
            _411_i = (_411_i) + (BigInteger.One);
          }
        }
      } else if (_source24.is_Seq) {
        DAST._IType _412___mcc_h7 = _source24.dtor_element;
        DAST._IType _413_element = _412___mcc_h7;
        {
          Dafny.ISequence<Dafny.Rune> _414_elemStr;
          Dafny.ISequence<Dafny.Rune> _out69;
          _out69 = DCOMP.COMP.GenType(_413_element, inBinding, inFn);
          _414_elemStr = _out69;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::vec::Vec<"), _414_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source24.is_Set) {
        DAST._IType _415___mcc_h8 = _source24.dtor_element;
        DAST._IType _416_element = _415___mcc_h8;
        {
          Dafny.ISequence<Dafny.Rune> _417_elemStr;
          Dafny.ISequence<Dafny.Rune> _out70;
          _out70 = DCOMP.COMP.GenType(_416_element, inBinding, inFn);
          _417_elemStr = _out70;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashSet<"), _417_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source24.is_Multiset) {
        DAST._IType _418___mcc_h9 = _source24.dtor_element;
        DAST._IType _419_element = _418___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _420_elemStr;
          Dafny.ISequence<Dafny.Rune> _out71;
          _out71 = DCOMP.COMP.GenType(_419_element, inBinding, inFn);
          _420_elemStr = _out71;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _420_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", u64>"));
        }
      } else if (_source24.is_Map) {
        DAST._IType _421___mcc_h10 = _source24.dtor_key;
        DAST._IType _422___mcc_h11 = _source24.dtor_value;
        DAST._IType _423_value = _422___mcc_h11;
        DAST._IType _424_key = _421___mcc_h10;
        {
          Dafny.ISequence<Dafny.Rune> _425_keyStr;
          Dafny.ISequence<Dafny.Rune> _out72;
          _out72 = DCOMP.COMP.GenType(_424_key, inBinding, inFn);
          _425_keyStr = _out72;
          Dafny.ISequence<Dafny.Rune> _426_valueStr;
          Dafny.ISequence<Dafny.Rune> _out73;
          _out73 = DCOMP.COMP.GenType(_423_value, inBinding, inFn);
          _426_valueStr = _out73;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _425_keyStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _426_valueStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source24.is_Arrow) {
        Dafny.ISequence<DAST._IType> _427___mcc_h12 = _source24.dtor_args;
        DAST._IType _428___mcc_h13 = _source24.dtor_result;
        DAST._IType _429_result = _428___mcc_h13;
        Dafny.ISequence<DAST._IType> _430_args = _427___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper<::std::rc::Rc<dyn ::std::ops::Fn(");
          BigInteger _431_i;
          _431_i = BigInteger.Zero;
          while ((_431_i) < (new BigInteger((_430_args).Count))) {
            if ((_431_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _432_generated;
            Dafny.ISequence<Dafny.Rune> _out74;
            _out74 = DCOMP.COMP.GenType((_430_args).Select(_431_i), inBinding, true);
            _432_generated = _out74;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _432_generated);
            _431_i = (_431_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _433_resultType;
          Dafny.ISequence<Dafny.Rune> _out75;
          _out75 = DCOMP.COMP.GenType(_429_result, inBinding, (inFn) || (inBinding));
          _433_resultType = _out75;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _433_resultType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static>>"));
        }
      } else if (_source24.is_Primitive) {
        DAST._IPrimitive _434___mcc_h14 = _source24.dtor_Primitive_a0;
        DAST._IPrimitive _435_p = _434___mcc_h14;
        {
          DAST._IPrimitive _source26 = _435_p;
          if (_source26.is_Int) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt");
          } else if (_source26.is_Real) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational");
          } else if (_source26.is_String) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Vec<char>");
          } else if (_source26.is_Bool) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool");
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char");
          }
        }
      } else if (_source24.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _436___mcc_h15 = _source24.dtor_Passthrough_a0;
        Dafny.ISequence<Dafny.Rune> _437_v = _436___mcc_h15;
        s = _437_v;
      } else {
        Dafny.ISequence<Dafny.Rune> _438___mcc_h16 = _source24.dtor_TypeArg_a0;
        Dafny.ISequence<Dafny.Rune> _source27 = _438___mcc_h16;
        Dafny.ISequence<Dafny.Rune> _439___mcc_h17 = _source27;
        Dafny.ISequence<Dafny.Rune> _440_name = _439___mcc_h17;
        s = DCOMP.__default.escapeIdent(_440_name);
      }
      return s;
    }
    public static void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<Dafny.Rune> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> traitBodies) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _441_i;
      _441_i = BigInteger.Zero;
      while ((_441_i) < (new BigInteger((body).Count))) {
        DAST._IMethod _source28 = (body).Select(_441_i);
        DAST._IMethod _442___mcc_h0 = _source28;
        DAST._IMethod _443_m = _442___mcc_h0;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source29 = (_443_m).dtor_overridingPath;
          if (_source29.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _444___mcc_h1 = _source29.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _445_p = _444___mcc_h1;
            {
              Dafny.ISequence<Dafny.Rune> _446_existing;
              _446_existing = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              if ((traitBodies).Contains(_445_p)) {
                _446_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Select(traitBodies, _445_p);
              }
              if ((new BigInteger((_446_existing).Count)).Sign == 1) {
                _446_existing = Dafny.Sequence<Dafny.Rune>.Concat(_446_existing, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
              }
              Dafny.ISequence<Dafny.Rune> _447_genMethod;
              Dafny.ISequence<Dafny.Rune> _out76;
              _out76 = DCOMP.COMP.GenMethod(_443_m, true, enclosingType, enclosingTypeParams);
              _447_genMethod = _out76;
              _446_existing = Dafny.Sequence<Dafny.Rune>.Concat(_446_existing, _447_genMethod);
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>(_445_p, _446_existing)));
            }
          } else {
            {
              Dafny.ISequence<Dafny.Rune> _448_generated;
              Dafny.ISequence<Dafny.Rune> _out77;
              _out77 = DCOMP.COMP.GenMethod(_443_m, forTrait, enclosingType, enclosingTypeParams);
              _448_generated = _out77;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _448_generated);
            }
          }
        }
        if ((new BigInteger((s).Count)).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        _441_i = (_441_i) + (BigInteger.One);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> GenParams(Dafny.ISequence<DAST._IFormal> @params) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _449_i;
      _449_i = BigInteger.Zero;
      while ((_449_i) < (new BigInteger((@params).Count))) {
        DAST._IFormal _450_param;
        _450_param = (@params).Select(_449_i);
        Dafny.ISequence<Dafny.Rune> _451_paramType;
        Dafny.ISequence<Dafny.Rune> _out78;
        _out78 = DCOMP.COMP.GenType((_450_param).dtor_typ, false, false);
        _451_paramType = _out78;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((_450_param).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _451_paramType);
        if ((_449_i) < ((new BigInteger((@params).Count)) - (BigInteger.One))) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        _449_i = (_449_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _452_params;
      Dafny.ISequence<Dafny.Rune> _out79;
      _out79 = DCOMP.COMP.GenParams((m).dtor_params);
      _452_params = _out79;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _453_paramNames;
      _453_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _454_paramI;
      _454_paramI = BigInteger.Zero;
      while ((_454_paramI) < (new BigInteger(((m).dtor_params).Count))) {
        _453_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_453_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((m).dtor_params).Select(_454_paramI)).dtor_name));
        _454_paramI = (_454_paramI) + (BigInteger.One);
      }
      if (!((m).dtor_isStatic)) {
        if (forTrait) {
          _452_params = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _452_params);
        } else {
          Dafny.ISequence<Dafny.Rune> _455_enclosingTypeString;
          Dafny.ISequence<Dafny.Rune> _out80;
          _out80 = DCOMP.COMP.GenType(enclosingType, false, false);
          _455_enclosingTypeString = _out80;
          _452_params = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self: &"), _455_enclosingTypeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _452_params);
        }
      }
      Dafny.ISequence<Dafny.Rune> _456_retType;
      _456_retType = (((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")));
      BigInteger _457_typeI;
      _457_typeI = BigInteger.Zero;
      while ((_457_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        if ((_457_typeI).Sign == 1) {
          _456_retType = Dafny.Sequence<Dafny.Rune>.Concat(_456_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        Dafny.ISequence<Dafny.Rune> _458_typeString;
        Dafny.ISequence<Dafny.Rune> _out81;
        _out81 = DCOMP.COMP.GenType(((m).dtor_outTypes).Select(_457_typeI), false, false);
        _458_typeString = _out81;
        _456_retType = Dafny.Sequence<Dafny.Rune>.Concat(_456_retType, _458_typeString);
        _457_typeI = (_457_typeI) + (BigInteger.One);
      }
      if ((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) {
        _456_retType = Dafny.Sequence<Dafny.Rune>.Concat(_456_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      if (forTrait) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn "), DCOMP.__default.escapeIdent((m).dtor_name));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn "), DCOMP.__default.escapeIdent((m).dtor_name));
      }
      Dafny.ISequence<DAST._IType> _459_typeParamsFiltered;
      _459_typeParamsFiltered = Dafny.Sequence<DAST._IType>.FromElements();
      BigInteger _460_typeParamI;
      _460_typeParamI = BigInteger.Zero;
      while ((_460_typeParamI) < (new BigInteger(((m).dtor_typeParams).Count))) {
        DAST._IType _461_typeParam;
        _461_typeParam = ((m).dtor_typeParams).Select(_460_typeParamI);
        if (!((enclosingTypeParams).Contains(_461_typeParam))) {
          _459_typeParamsFiltered = Dafny.Sequence<DAST._IType>.Concat(_459_typeParamsFiltered, Dafny.Sequence<DAST._IType>.FromElements(_461_typeParam));
        }
        _460_typeParamI = (_460_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _462_whereClauses;
      _462_whereClauses = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((_459_typeParamsFiltered).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        _462_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_462_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where "));
        BigInteger _463_i;
        _463_i = BigInteger.Zero;
        while ((_463_i) < (new BigInteger((_459_typeParamsFiltered).Count))) {
          if ((_463_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            _462_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_462_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _464_typeString;
          Dafny.ISequence<Dafny.Rune> _out82;
          _out82 = DCOMP.COMP.GenType((_459_typeParamsFiltered).Select(_463_i), false, false);
          _464_typeString = _out82;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _464_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<")), _464_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default + 'static"));
          _462_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_462_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _464_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq"));
          _463_i = (_463_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _452_params), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _456_retType), _462_whereClauses);
      if ((m).dtor_hasBody) {
        Dafny.ISequence<Dafny.Rune> _465_earlyReturn;
        _465_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return;");
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source30 = (m).dtor_outVars;
        if (_source30.is_Some) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _466___mcc_h0 = _source30.dtor_Some_a0;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _467_outVars = _466___mcc_h0;
          {
            _465_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return (");
            BigInteger _468_outI;
            _468_outI = BigInteger.Zero;
            while ((_468_outI) < (new BigInteger((_467_outVars).Count))) {
              if ((_468_outI).Sign == 1) {
                _465_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_465_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _469_outVar;
              _469_outVar = (_467_outVars).Select(_468_outI);
              _465_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_465_earlyReturn, DCOMP.__default.escapeIdent((_469_outVar)));
              _468_outI = (_468_outI) + (BigInteger.One);
            }
            _465_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_465_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
          }
        } else {
        }
        Dafny.ISequence<Dafny.Rune> _470_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _471___v15;
        Dafny.ISequence<Dafny.Rune> _out83;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out84;
        DCOMP.COMP.GenStmts((m).dtor_body, (((m).dtor_isStatic) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None()) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))), _453_paramNames, true, _465_earlyReturn, out _out83, out _out84);
        _470_body = _out83;
        _471___v15 = _out84;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _470_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n"));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      }
      return s;
    }
    public static void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _472_declarations;
      _472_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _473_i;
      _473_i = BigInteger.Zero;
      while ((_473_i) < (new BigInteger((stmts).Count))) {
        DAST._IStatement _474_stmt;
        _474_stmt = (stmts).Select(_473_i);
        Dafny.ISequence<Dafny.Rune> _475_stmtString;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _476_recIdents;
        Dafny.ISequence<Dafny.Rune> _out85;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out86;
        DCOMP.COMP.GenStmt(_474_stmt, selfIdent, @params, (isLast) && ((_473_i) == ((new BigInteger((stmts).Count)) - (BigInteger.One))), earlyReturn, out _out85, out _out86);
        _475_stmtString = _out85;
        _476_recIdents = _out86;
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_476_recIdents, _472_declarations));
        DAST._IStatement _source31 = _474_stmt;
        if (_source31.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _477___mcc_h0 = _source31.dtor_name;
          DAST._IType _478___mcc_h1 = _source31.dtor_typ;
          DAST._IOptional<DAST._IExpression> _479___mcc_h2 = _source31.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _480_name = _477___mcc_h0;
          {
            _472_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_472_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_480_name));
          }
        } else if (_source31.is_Assign) {
          DAST._IAssignLhs _481___mcc_h6 = _source31.dtor_lhs;
          DAST._IExpression _482___mcc_h7 = _source31.dtor_value;
        } else if (_source31.is_If) {
          DAST._IExpression _483___mcc_h10 = _source31.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _484___mcc_h11 = _source31.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _485___mcc_h12 = _source31.dtor_els;
        } else if (_source31.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _486___mcc_h16 = _source31.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _487___mcc_h17 = _source31.dtor_body;
        } else if (_source31.is_While) {
          DAST._IExpression _488___mcc_h20 = _source31.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _489___mcc_h21 = _source31.dtor_body;
        } else if (_source31.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _490___mcc_h24 = _source31.dtor_boundName;
          DAST._IType _491___mcc_h25 = _source31.dtor_boundType;
          DAST._IExpression _492___mcc_h26 = _source31.dtor_over;
          Dafny.ISequence<DAST._IStatement> _493___mcc_h27 = _source31.dtor_body;
        } else if (_source31.is_Call) {
          DAST._IExpression _494___mcc_h32 = _source31.dtor_on;
          Dafny.ISequence<Dafny.Rune> _495___mcc_h33 = _source31.dtor_name;
          Dafny.ISequence<DAST._IType> _496___mcc_h34 = _source31.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _497___mcc_h35 = _source31.dtor_args;
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _498___mcc_h36 = _source31.dtor_outs;
        } else if (_source31.is_Return) {
          DAST._IExpression _499___mcc_h42 = _source31.dtor_expr;
        } else if (_source31.is_EarlyReturn) {
        } else if (_source31.is_Break) {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _500___mcc_h44 = _source31.dtor_toLabel;
        } else if (_source31.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _501___mcc_h46 = _source31.dtor_body;
        } else if (_source31.is_JumpTailCallStart) {
        } else if (_source31.is_Halt) {
        } else {
          DAST._IExpression _502___mcc_h48 = _source31.dtor_Print_a0;
        }
        if ((_473_i).Sign == 1) {
          generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, _475_stmtString);
        _473_i = (_473_i) + (BigInteger.One);
      }
    }
    public static void GenAssignLhs(DAST._IAssignLhs lhs, Dafny.ISequence<Dafny.Rune> rhs, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, out Dafny.ISequence<Dafny.Rune> generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IAssignLhs _source32 = lhs;
      if (_source32.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _503___mcc_h0 = _source32.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source33 = _503___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _504___mcc_h1 = _source33;
        Dafny.ISequence<Dafny.Rune> _505_id = _504___mcc_h1;
        {
          if ((@params).Contains(_505_id)) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), DCOMP.__default.escapeIdent(_505_id));
          } else {
            generated = DCOMP.__default.escapeIdent(_505_id);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_505_id);
          needsIIFE = false;
        }
      } else if (_source32.is_Select) {
        DAST._IExpression _506___mcc_h2 = _source32.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _507___mcc_h3 = _source32.dtor_field;
        Dafny.ISequence<Dafny.Rune> _508_field = _507___mcc_h3;
        DAST._IExpression _509_on = _506___mcc_h2;
        {
          Dafny.ISequence<Dafny.Rune> _510_onExpr;
          bool _511_onOwned;
          bool _512_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _513_recIdents;
          Dafny.ISequence<Dafny.Rune> _out87;
          bool _out88;
          bool _out89;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out90;
          DCOMP.COMP.GenExpr(_509_on, selfIdent, @params, false, out _out87, out _out88, out _out89, out _out90);
          _510_onExpr = _out87;
          _511_onOwned = _out88;
          _512_onErased = _out89;
          _513_recIdents = _out90;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*("), _510_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _508_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()) = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          readIdents = _513_recIdents;
          needsIIFE = true;
        }
      } else {
        DAST._IExpression _514___mcc_h4 = _source32.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _515___mcc_h5 = _source32.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _516_indices = _515___mcc_h5;
        DAST._IExpression _517_on = _514___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _518_onExpr;
          bool _519_onOwned;
          bool _520_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _521_recIdents;
          Dafny.ISequence<Dafny.Rune> _out91;
          bool _out92;
          bool _out93;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out94;
          DCOMP.COMP.GenExpr(_517_on, selfIdent, @params, false, out _out91, out _out92, out _out93, out _out94);
          _518_onExpr = _out91;
          _519_onOwned = _out92;
          _520_onErased = _out93;
          _521_recIdents = _out94;
          readIdents = _521_recIdents;
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          BigInteger _522_i;
          _522_i = BigInteger.Zero;
          while ((_522_i) < (new BigInteger((_516_indices).Count))) {
            Dafny.ISequence<Dafny.Rune> _523_idx;
            bool _524___v19;
            bool _525_idxErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _526_recIdentsIdx;
            Dafny.ISequence<Dafny.Rune> _out95;
            bool _out96;
            bool _out97;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out98;
            DCOMP.COMP.GenExpr((_516_indices).Select(_522_i), selfIdent, @params, true, out _out95, out _out96, out _out97, out _out98);
            _523_idx = _out95;
            _524___v19 = _out96;
            _525_idxErased = _out97;
            _526_recIdentsIdx = _out98;
            if (!(_525_idxErased)) {
              _523_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _523_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let __idx")), DCOMP.__default.natToString(_522_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = <usize as ::dafny_runtime::NumCast>::from(")), _523_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap();\n"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _526_recIdentsIdx);
            _522_i = (_522_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, _518_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()"));
          _522_i = BigInteger.Zero;
          while ((_522_i) < (new BigInteger((_516_indices).Count))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[__idx")), DCOMP.__default.natToString(_522_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            _522_i = (_522_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}"));
          needsIIFE = true;
        }
      }
    }
    public static void GenStmt(DAST._IStatement stmt, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IStatement _source34 = stmt;
      if (_source34.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _527___mcc_h0 = _source34.dtor_name;
        DAST._IType _528___mcc_h1 = _source34.dtor_typ;
        DAST._IOptional<DAST._IExpression> _529___mcc_h2 = _source34.dtor_maybeValue;
        DAST._IOptional<DAST._IExpression> _source35 = _529___mcc_h2;
        if (_source35.is_Some) {
          DAST._IExpression _530___mcc_h3 = _source35.dtor_Some_a0;
          DAST._IExpression _531_expression = _530___mcc_h3;
          DAST._IType _532_typ = _528___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _533_name = _527___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _534_typeString;
            Dafny.ISequence<Dafny.Rune> _out99;
            _out99 = DCOMP.COMP.GenType(_532_typ, true, false);
            _534_typeString = _out99;
            Dafny.ISequence<Dafny.Rune> _535_expr;
            bool _536___v20;
            bool _537_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _538_recIdents;
            Dafny.ISequence<Dafny.Rune> _out100;
            bool _out101;
            bool _out102;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out103;
            DCOMP.COMP.GenExpr(_531_expression, selfIdent, @params, true, out _out100, out _out101, out _out102, out _out103);
            _535_expr = _out100;
            _536___v20 = _out101;
            _537_recErased = _out102;
            _538_recIdents = _out103;
            if (!(_537_recErased)) {
              _535_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _535_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _535_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _534_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _535_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_533_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _534_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _535_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = _538_recIdents;
          }
        } else {
          DAST._IType _539_typ = _528___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _540_name = _527___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _541_typeString;
            Dafny.ISequence<Dafny.Rune> _out104;
            _out104 = DCOMP.COMP.GenType(_539_typ, true, false);
            _541_typeString = _out104;
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_540_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _541_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source34.is_Assign) {
        DAST._IAssignLhs _542___mcc_h4 = _source34.dtor_lhs;
        DAST._IExpression _543___mcc_h5 = _source34.dtor_value;
        DAST._IExpression _544_expression = _543___mcc_h5;
        DAST._IAssignLhs _545_lhs = _542___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _546_lhsGen;
          bool _547_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _548_recIdents;
          Dafny.ISequence<Dafny.Rune> _out105;
          bool _out106;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out107;
          DCOMP.COMP.GenAssignLhs(_545_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), selfIdent, @params, out _out105, out _out106, out _out107);
          _546_lhsGen = _out105;
          _547_needsIIFE = _out106;
          _548_recIdents = _out107;
          Dafny.ISequence<Dafny.Rune> _549_exprGen;
          bool _550___v21;
          bool _551_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _552_exprIdents;
          Dafny.ISequence<Dafny.Rune> _out108;
          bool _out109;
          bool _out110;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out111;
          DCOMP.COMP.GenExpr(_544_expression, selfIdent, @params, true, out _out108, out _out109, out _out110, out _out111);
          _549_exprGen = _out108;
          _550___v21 = _out109;
          _551_exprErased = _out110;
          _552_exprIdents = _out111;
          if (!(_551_exprErased)) {
            _549_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _549_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          _549_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _549_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          if (_547_needsIIFE) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet __rhs = "), _549_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _546_lhsGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_546_lhsGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _549_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_548_recIdents, _552_exprIdents);
        }
      } else if (_source34.is_If) {
        DAST._IExpression _553___mcc_h6 = _source34.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _554___mcc_h7 = _source34.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _555___mcc_h8 = _source34.dtor_els;
        Dafny.ISequence<DAST._IStatement> _556_els = _555___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _557_thn = _554___mcc_h7;
        DAST._IExpression _558_cond = _553___mcc_h6;
        {
          Dafny.ISequence<Dafny.Rune> _559_condString;
          bool _560___v22;
          bool _561_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _562_recIdents;
          Dafny.ISequence<Dafny.Rune> _out112;
          bool _out113;
          bool _out114;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out115;
          DCOMP.COMP.GenExpr(_558_cond, selfIdent, @params, true, out _out112, out _out113, out _out114, out _out115);
          _559_condString = _out112;
          _560___v22 = _out113;
          _561_condErased = _out114;
          _562_recIdents = _out115;
          if (!(_561_condErased)) {
            _559_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _559_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _562_recIdents;
          Dafny.ISequence<Dafny.Rune> _563_thnString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _564_thnIdents;
          Dafny.ISequence<Dafny.Rune> _out116;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out117;
          DCOMP.COMP.GenStmts(_557_thn, selfIdent, @params, isLast, earlyReturn, out _out116, out _out117);
          _563_thnString = _out116;
          _564_thnIdents = _out117;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _564_thnIdents);
          Dafny.ISequence<Dafny.Rune> _565_elsString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _566_elsIdents;
          Dafny.ISequence<Dafny.Rune> _out118;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out119;
          DCOMP.COMP.GenStmts(_556_els, selfIdent, @params, isLast, earlyReturn, out _out118, out _out119);
          _565_elsString = _out118;
          _566_elsIdents = _out119;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _566_elsIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if "), _559_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _563_thnString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _565_elsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source34.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _567___mcc_h9 = _source34.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _568___mcc_h10 = _source34.dtor_body;
        Dafny.ISequence<DAST._IStatement> _569_body = _568___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _570_lbl = _567___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _571_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _572_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out120;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out121;
          DCOMP.COMP.GenStmts(_569_body, selfIdent, @params, isLast, earlyReturn, out _out120, out _out121);
          _571_bodyString = _out120;
          _572_bodyIdents = _out121;
          readIdents = _572_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'label_"), _570_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": loop {\n")), _571_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source34.is_While) {
        DAST._IExpression _573___mcc_h11 = _source34.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _574___mcc_h12 = _source34.dtor_body;
        Dafny.ISequence<DAST._IStatement> _575_body = _574___mcc_h12;
        DAST._IExpression _576_cond = _573___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _577_condString;
          bool _578___v23;
          bool _579_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _580_recIdents;
          Dafny.ISequence<Dafny.Rune> _out122;
          bool _out123;
          bool _out124;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out125;
          DCOMP.COMP.GenExpr(_576_cond, selfIdent, @params, true, out _out122, out _out123, out _out124, out _out125);
          _577_condString = _out122;
          _578___v23 = _out123;
          _579_condErased = _out124;
          _580_recIdents = _out125;
          if (!(_579_condErased)) {
            _577_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _577_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _580_recIdents;
          Dafny.ISequence<Dafny.Rune> _581_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _582_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out126;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out127;
          DCOMP.COMP.GenStmts(_575_body, selfIdent, @params, false, earlyReturn, out _out126, out _out127);
          _581_bodyString = _out126;
          _582_bodyIdents = _out127;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _582_bodyIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while "), _577_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _581_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source34.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _583___mcc_h13 = _source34.dtor_boundName;
        DAST._IType _584___mcc_h14 = _source34.dtor_boundType;
        DAST._IExpression _585___mcc_h15 = _source34.dtor_over;
        Dafny.ISequence<DAST._IStatement> _586___mcc_h16 = _source34.dtor_body;
        Dafny.ISequence<DAST._IStatement> _587_body = _586___mcc_h16;
        DAST._IExpression _588_over = _585___mcc_h15;
        DAST._IType _589_boundType = _584___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _590_boundName = _583___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _591_overString;
          bool _592___v24;
          bool _593_overErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _594_recIdents;
          Dafny.ISequence<Dafny.Rune> _out128;
          bool _out129;
          bool _out130;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out131;
          DCOMP.COMP.GenExpr(_588_over, selfIdent, @params, true, out _out128, out _out129, out _out130, out _out131);
          _591_overString = _out128;
          _592___v24 = _out129;
          _593_overErased = _out130;
          _594_recIdents = _out131;
          Dafny.ISequence<Dafny.Rune> _595_boundTypeStr;
          Dafny.ISequence<Dafny.Rune> _out132;
          _out132 = DCOMP.COMP.GenType(_589_boundType, false, false);
          _595_boundTypeStr = _out132;
          readIdents = _594_recIdents;
          Dafny.ISequence<Dafny.Rune> _596_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _597_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out133;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out134;
          DCOMP.COMP.GenStmts(_587_body, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(@params, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_590_boundName)), false, earlyReturn, out _out133, out _out134);
          _596_bodyString = _out133;
          _597_bodyIdents = _out134;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _597_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_590_boundName));
          Dafny.ISequence<Dafny.Rune> _598_unerasedIter;
          _598_unerasedIter = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_iter_erased");
          if (_593_overErased) {
            _598_unerasedIter = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _595_boundTypeStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _598_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for _iter_erased in "), _591_overString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_590_boundName)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _598_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _596_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source34.is_Call) {
        DAST._IExpression _599___mcc_h17 = _source34.dtor_on;
        Dafny.ISequence<Dafny.Rune> _600___mcc_h18 = _source34.dtor_name;
        Dafny.ISequence<DAST._IType> _601___mcc_h19 = _source34.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _602___mcc_h20 = _source34.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _603___mcc_h21 = _source34.dtor_outs;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _604_maybeOutVars = _603___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _605_args = _602___mcc_h20;
        Dafny.ISequence<DAST._IType> _606_typeArgs = _601___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _607_name = _600___mcc_h18;
        DAST._IExpression _608_on = _599___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _609_typeArgString;
          _609_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_606_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _610_typeI;
            _610_typeI = BigInteger.Zero;
            _609_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_610_typeI) < (new BigInteger((_606_typeArgs).Count))) {
              if ((_610_typeI).Sign == 1) {
                _609_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_609_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _611_typeString;
              Dafny.ISequence<Dafny.Rune> _out135;
              _out135 = DCOMP.COMP.GenType((_606_typeArgs).Select(_610_typeI), false, false);
              _611_typeString = _out135;
              _609_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_609_typeArgString, _611_typeString);
              _610_typeI = (_610_typeI) + (BigInteger.One);
            }
            _609_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_609_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _612_argString;
          _612_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _613_i;
          _613_i = BigInteger.Zero;
          while ((_613_i) < (new BigInteger((_605_args).Count))) {
            if ((_613_i).Sign == 1) {
              _612_argString = Dafny.Sequence<Dafny.Rune>.Concat(_612_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _614_argExpr;
            bool _615_isOwned;
            bool _616_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _617_argIdents;
            Dafny.ISequence<Dafny.Rune> _out136;
            bool _out137;
            bool _out138;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out139;
            DCOMP.COMP.GenExpr((_605_args).Select(_613_i), selfIdent, @params, false, out _out136, out _out137, out _out138, out _out139);
            _614_argExpr = _out136;
            _615_isOwned = _out137;
            _616_argErased = _out138;
            _617_argIdents = _out139;
            if (_615_isOwned) {
              _614_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _614_argExpr);
            }
            _612_argString = Dafny.Sequence<Dafny.Rune>.Concat(_612_argString, _614_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _617_argIdents);
            _613_i = (_613_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _618_enclosingString;
          bool _619___v25;
          bool _620___v26;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _621_enclosingIdents;
          Dafny.ISequence<Dafny.Rune> _out140;
          bool _out141;
          bool _out142;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out143;
          DCOMP.COMP.GenExpr(_608_on, selfIdent, @params, false, out _out140, out _out141, out _out142, out _out143);
          _618_enclosingString = _out140;
          _619___v25 = _out141;
          _620___v26 = _out142;
          _621_enclosingIdents = _out143;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _621_enclosingIdents);
          DAST._IExpression _source36 = _608_on;
          if (_source36.is_Literal) {
            DAST._ILiteral _622___mcc_h26 = _source36.dtor_Literal_a0;
            {
              _618_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _618_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source36.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _623___mcc_h28 = _source36.dtor_Ident_a0;
            {
              _618_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _618_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source36.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _624___mcc_h30 = _source36.dtor_Companion_a0;
            {
              _618_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(_618_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
            }
          } else if (_source36.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _625___mcc_h32 = _source36.dtor_Tuple_a0;
            {
              _618_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _618_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source36.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _626___mcc_h34 = _source36.dtor_path;
            Dafny.ISequence<DAST._IType> _627___mcc_h35 = _source36.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _628___mcc_h36 = _source36.dtor_args;
            {
              _618_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _618_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source36.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _629___mcc_h40 = _source36.dtor_dims;
            DAST._IType _630___mcc_h41 = _source36.dtor_typ;
            {
              _618_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _618_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source36.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _631___mcc_h44 = _source36.dtor_path;
            Dafny.ISequence<DAST._IType> _632___mcc_h45 = _source36.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _633___mcc_h46 = _source36.dtor_variant;
            bool _634___mcc_h47 = _source36.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _635___mcc_h48 = _source36.dtor_contents;
            {
              _618_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _618_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source36.is_Convert) {
            DAST._IExpression _636___mcc_h54 = _source36.dtor_value;
            DAST._IType _637___mcc_h55 = _source36.dtor_from;
            DAST._IType _638___mcc_h56 = _source36.dtor_typ;
            {
              _618_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _618_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source36.is_SeqConstruct) {
            DAST._IExpression _639___mcc_h60 = _source36.dtor_length;
            DAST._IExpression _640___mcc_h61 = _source36.dtor_elem;
            {
              _618_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _618_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source36.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _641___mcc_h64 = _source36.dtor_elements;
            DAST._IType _642___mcc_h65 = _source36.dtor_typ;
            {
              _618_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _618_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source36.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _643___mcc_h68 = _source36.dtor_elements;
            {
              _618_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _618_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source36.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _644___mcc_h70 = _source36.dtor_mapElems;
            {
              _618_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _618_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source36.is_This) {
            {
              _618_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _618_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source36.is_Ite) {
            DAST._IExpression _645___mcc_h72 = _source36.dtor_cond;
            DAST._IExpression _646___mcc_h73 = _source36.dtor_thn;
            DAST._IExpression _647___mcc_h74 = _source36.dtor_els;
            {
              _618_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _618_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source36.is_UnOp) {
            DAST._IUnaryOp _648___mcc_h78 = _source36.dtor_unOp;
            DAST._IExpression _649___mcc_h79 = _source36.dtor_expr;
            {
              _618_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _618_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source36.is_BinOp) {
            DAST._IBinOp _650___mcc_h82 = _source36.dtor_op;
            DAST._IExpression _651___mcc_h83 = _source36.dtor_left;
            DAST._IExpression _652___mcc_h84 = _source36.dtor_right;
            {
              _618_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _618_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source36.is_ArrayLen) {
            DAST._IExpression _653___mcc_h88 = _source36.dtor_expr;
            BigInteger _654___mcc_h89 = _source36.dtor_dim;
            {
              _618_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _618_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source36.is_Select) {
            DAST._IExpression _655___mcc_h92 = _source36.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _656___mcc_h93 = _source36.dtor_field;
            bool _657___mcc_h94 = _source36.dtor_isConstant;
            bool _658___mcc_h95 = _source36.dtor_onDatatype;
            {
              _618_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _618_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source36.is_SelectFn) {
            DAST._IExpression _659___mcc_h100 = _source36.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _660___mcc_h101 = _source36.dtor_field;
            bool _661___mcc_h102 = _source36.dtor_onDatatype;
            bool _662___mcc_h103 = _source36.dtor_isStatic;
            BigInteger _663___mcc_h104 = _source36.dtor_arity;
            {
              _618_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _618_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source36.is_Index) {
            DAST._IExpression _664___mcc_h110 = _source36.dtor_expr;
            DAST._ICollKind _665___mcc_h111 = _source36.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _666___mcc_h112 = _source36.dtor_indices;
            {
              _618_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _618_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source36.is_IndexRange) {
            DAST._IExpression _667___mcc_h116 = _source36.dtor_expr;
            bool _668___mcc_h117 = _source36.dtor_isArray;
            DAST._IOptional<DAST._IExpression> _669___mcc_h118 = _source36.dtor_low;
            DAST._IOptional<DAST._IExpression> _670___mcc_h119 = _source36.dtor_high;
            {
              _618_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _618_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source36.is_TupleSelect) {
            DAST._IExpression _671___mcc_h124 = _source36.dtor_expr;
            BigInteger _672___mcc_h125 = _source36.dtor_index;
            {
              _618_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _618_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source36.is_Call) {
            DAST._IExpression _673___mcc_h128 = _source36.dtor_on;
            Dafny.ISequence<Dafny.Rune> _674___mcc_h129 = _source36.dtor_name;
            Dafny.ISequence<DAST._IType> _675___mcc_h130 = _source36.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _676___mcc_h131 = _source36.dtor_args;
            {
              _618_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _618_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source36.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _677___mcc_h136 = _source36.dtor_params;
            DAST._IType _678___mcc_h137 = _source36.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _679___mcc_h138 = _source36.dtor_body;
            {
              _618_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _618_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source36.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _680___mcc_h142 = _source36.dtor_values;
            DAST._IType _681___mcc_h143 = _source36.dtor_retType;
            DAST._IExpression _682___mcc_h144 = _source36.dtor_expr;
            {
              _618_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _618_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source36.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _683___mcc_h148 = _source36.dtor_name;
            DAST._IType _684___mcc_h149 = _source36.dtor_typ;
            DAST._IExpression _685___mcc_h150 = _source36.dtor_value;
            DAST._IExpression _686___mcc_h151 = _source36.dtor_iifeBody;
            {
              _618_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _618_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source36.is_Apply) {
            DAST._IExpression _687___mcc_h156 = _source36.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _688___mcc_h157 = _source36.dtor_args;
            {
              _618_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _618_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source36.is_TypeTest) {
            DAST._IExpression _689___mcc_h160 = _source36.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _690___mcc_h161 = _source36.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _691___mcc_h162 = _source36.dtor_variant;
            {
              _618_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _618_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source36.is_InitializationValue) {
            DAST._IType _692___mcc_h166 = _source36.dtor_typ;
            {
              _618_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _618_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source36.is_BoolBoundedPool) {
            {
              _618_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _618_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source36.is_SetBoundedPool) {
            DAST._IExpression _693___mcc_h168 = _source36.dtor_of;
            {
              _618_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _618_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source36.is_SeqBoundedPool) {
            DAST._IExpression _694___mcc_h170 = _source36.dtor_of;
            bool _695___mcc_h171 = _source36.dtor_includeDuplicates;
            {
              _618_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _618_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else {
            DAST._IExpression _696___mcc_h174 = _source36.dtor_lo;
            DAST._IExpression _697___mcc_h175 = _source36.dtor_hi;
            {
              _618_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _618_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          }
          Dafny.ISequence<Dafny.Rune> _698_receiver;
          _698_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source37 = _604_maybeOutVars;
          if (_source37.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _699___mcc_h178 = _source37.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _700_outVars = _699___mcc_h178;
            {
              if ((new BigInteger((_700_outVars).Count)) > (BigInteger.One)) {
                _698_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
              }
              BigInteger _701_outI;
              _701_outI = BigInteger.Zero;
              while ((_701_outI) < (new BigInteger((_700_outVars).Count))) {
                if ((_701_outI).Sign == 1) {
                  _698_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_698_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                }
                Dafny.ISequence<Dafny.Rune> _702_outVar;
                _702_outVar = (_700_outVars).Select(_701_outI);
                _698_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_698_receiver, (_702_outVar));
                _701_outI = (_701_outI) + (BigInteger.One);
              }
              if ((new BigInteger((_700_outVars).Count)) > (BigInteger.One)) {
                _698_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_698_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
          } else {
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((!(_698_receiver).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_698_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), _618_enclosingString), DCOMP.__default.escapeIdent(_607_name)), _609_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _612_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      } else if (_source34.is_Return) {
        DAST._IExpression _703___mcc_h22 = _source34.dtor_expr;
        DAST._IExpression _704_expr = _703___mcc_h22;
        {
          Dafny.ISequence<Dafny.Rune> _705_exprString;
          bool _706___v29;
          bool _707_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _708_recIdents;
          Dafny.ISequence<Dafny.Rune> _out144;
          bool _out145;
          bool _out146;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out147;
          DCOMP.COMP.GenExpr(_704_expr, selfIdent, @params, true, out _out144, out _out145, out _out146, out _out147);
          _705_exprString = _out144;
          _706___v29 = _out145;
          _707_recErased = _out146;
          _708_recIdents = _out147;
          _705_exprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned(::dafny_runtime::DafnyErasable::erase_owned("), _705_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          readIdents = _708_recIdents;
          if (isLast) {
            generated = _705_exprString;
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return "), _705_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
        }
      } else if (_source34.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source34.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _709___mcc_h23 = _source34.dtor_toLabel;
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _710_toLabel = _709___mcc_h23;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source38 = _710_toLabel;
          if (_source38.is_Some) {
            Dafny.ISequence<Dafny.Rune> _711___mcc_h179 = _source38.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _712_lbl = _711___mcc_h179;
            {
              generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break 'label_"), _712_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            }
          } else {
            {
              generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;");
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source34.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _713___mcc_h24 = _source34.dtor_body;
        Dafny.ISequence<DAST._IStatement> _714_body = _713___mcc_h24;
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if (!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut _this = self.clone();\n"));
          }
          BigInteger _715_paramI;
          _715_paramI = BigInteger.Zero;
          while ((_715_paramI) < (new BigInteger((@params).Count))) {
            Dafny.ISequence<Dafny.Rune> _716_param;
            _716_param = (@params).Select(_715_paramI);
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut ")), DCOMP.__default.escapeIdent(_716_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_716_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
            _715_paramI = (_715_paramI) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _717_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _718_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out148;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out149;
          DCOMP.COMP.GenStmts(_714_body, ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), false, earlyReturn, out _out148, out _out149);
          _717_bodyString = _out148;
          _718_bodyIdents = _out149;
          readIdents = _718_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'TAIL_CALL_START: loop {\n")), _717_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source34.is_JumpTailCallStart) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue 'TAIL_CALL_START;");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source34.is_Halt) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else {
        DAST._IExpression _719___mcc_h25 = _source34.dtor_Print_a0;
        DAST._IExpression _720_e = _719___mcc_h25;
        {
          Dafny.ISequence<Dafny.Rune> _721_printedExpr;
          bool _722_isOwned;
          bool _723___v30;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _724_recIdents;
          Dafny.ISequence<Dafny.Rune> _out150;
          bool _out151;
          bool _out152;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out153;
          DCOMP.COMP.GenExpr(_720_e, selfIdent, @params, false, out _out150, out _out151, out _out152, out _out153);
          _721_printedExpr = _out150;
          _722_isOwned = _out151;
          _723___v30 = _out152;
          _724_recIdents = _out153;
          if (_722_isOwned) {
            _721_printedExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _721_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!(\"{}\", ::dafny_runtime::DafnyPrintWrapper("), _721_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("));"));
          readIdents = _724_recIdents;
        }
      }
    }
    public static void GenExpr(DAST._IExpression e, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool mustOwn, out Dafny.ISequence<Dafny.Rune> s, out bool isOwned, out bool isErased, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      isOwned = false;
      isErased = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source39 = e;
      if (_source39.is_Literal) {
        DAST._ILiteral _725___mcc_h0 = _source39.dtor_Literal_a0;
        DAST._ILiteral _source40 = _725___mcc_h0;
        if (_source40.is_BoolLiteral) {
          bool _726___mcc_h1 = _source40.dtor_BoolLiteral_a0;
          if ((_726___mcc_h1) == (false)) {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          }
        } else if (_source40.is_IntLiteral) {
          Dafny.ISequence<Dafny.Rune> _727___mcc_h2 = _source40.dtor_IntLiteral_a0;
          DAST._IType _728___mcc_h3 = _source40.dtor_IntLiteral_a1;
          DAST._IType _729_t = _728___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _730_i = _727___mcc_h2;
          {
            DAST._IType _source41 = _729_t;
            if (_source41.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _731___mcc_h237 = _source41.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _732___mcc_h238 = _source41.dtor_typeArgs;
              DAST._IResolvedType _733___mcc_h239 = _source41.dtor_resolved;
              DAST._IType _734_o = _729_t;
              {
                Dafny.ISequence<Dafny.Rune> _735_genType;
                Dafny.ISequence<Dafny.Rune> _out154;
                _out154 = DCOMP.COMP.GenType(_734_o, false, false);
                _735_genType = _out154;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _730_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _735_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source41.is_Nullable) {
              DAST._IType _736___mcc_h243 = _source41.dtor_Nullable_a0;
              DAST._IType _737_o = _729_t;
              {
                Dafny.ISequence<Dafny.Rune> _738_genType;
                Dafny.ISequence<Dafny.Rune> _out155;
                _out155 = DCOMP.COMP.GenType(_737_o, false, false);
                _738_genType = _out155;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _730_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _738_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source41.is_Tuple) {
              Dafny.ISequence<DAST._IType> _739___mcc_h245 = _source41.dtor_Tuple_a0;
              DAST._IType _740_o = _729_t;
              {
                Dafny.ISequence<Dafny.Rune> _741_genType;
                Dafny.ISequence<Dafny.Rune> _out156;
                _out156 = DCOMP.COMP.GenType(_740_o, false, false);
                _741_genType = _out156;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _730_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _741_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source41.is_Array) {
              DAST._IType _742___mcc_h247 = _source41.dtor_element;
              BigInteger _743___mcc_h248 = _source41.dtor_dims;
              DAST._IType _744_o = _729_t;
              {
                Dafny.ISequence<Dafny.Rune> _745_genType;
                Dafny.ISequence<Dafny.Rune> _out157;
                _out157 = DCOMP.COMP.GenType(_744_o, false, false);
                _745_genType = _out157;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _730_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _745_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source41.is_Seq) {
              DAST._IType _746___mcc_h251 = _source41.dtor_element;
              DAST._IType _747_o = _729_t;
              {
                Dafny.ISequence<Dafny.Rune> _748_genType;
                Dafny.ISequence<Dafny.Rune> _out158;
                _out158 = DCOMP.COMP.GenType(_747_o, false, false);
                _748_genType = _out158;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _730_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _748_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source41.is_Set) {
              DAST._IType _749___mcc_h253 = _source41.dtor_element;
              DAST._IType _750_o = _729_t;
              {
                Dafny.ISequence<Dafny.Rune> _751_genType;
                Dafny.ISequence<Dafny.Rune> _out159;
                _out159 = DCOMP.COMP.GenType(_750_o, false, false);
                _751_genType = _out159;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _730_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _751_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source41.is_Multiset) {
              DAST._IType _752___mcc_h255 = _source41.dtor_element;
              DAST._IType _753_o = _729_t;
              {
                Dafny.ISequence<Dafny.Rune> _754_genType;
                Dafny.ISequence<Dafny.Rune> _out160;
                _out160 = DCOMP.COMP.GenType(_753_o, false, false);
                _754_genType = _out160;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _730_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _754_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source41.is_Map) {
              DAST._IType _755___mcc_h257 = _source41.dtor_key;
              DAST._IType _756___mcc_h258 = _source41.dtor_value;
              DAST._IType _757_o = _729_t;
              {
                Dafny.ISequence<Dafny.Rune> _758_genType;
                Dafny.ISequence<Dafny.Rune> _out161;
                _out161 = DCOMP.COMP.GenType(_757_o, false, false);
                _758_genType = _out161;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _730_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _758_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source41.is_Arrow) {
              Dafny.ISequence<DAST._IType> _759___mcc_h261 = _source41.dtor_args;
              DAST._IType _760___mcc_h262 = _source41.dtor_result;
              DAST._IType _761_o = _729_t;
              {
                Dafny.ISequence<Dafny.Rune> _762_genType;
                Dafny.ISequence<Dafny.Rune> _out162;
                _out162 = DCOMP.COMP.GenType(_761_o, false, false);
                _762_genType = _out162;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _730_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _762_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source41.is_Primitive) {
              DAST._IPrimitive _763___mcc_h265 = _source41.dtor_Primitive_a0;
              DAST._IPrimitive _source42 = _763___mcc_h265;
              if (_source42.is_Int) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::parse_bytes(b\""), _730_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap()"));
                }
              } else if (_source42.is_Real) {
                DAST._IType _764_o = _729_t;
                {
                  Dafny.ISequence<Dafny.Rune> _765_genType;
                  Dafny.ISequence<Dafny.Rune> _out163;
                  _out163 = DCOMP.COMP.GenType(_764_o, false, false);
                  _765_genType = _out163;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _730_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _765_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source42.is_String) {
                DAST._IType _766_o = _729_t;
                {
                  Dafny.ISequence<Dafny.Rune> _767_genType;
                  Dafny.ISequence<Dafny.Rune> _out164;
                  _out164 = DCOMP.COMP.GenType(_766_o, false, false);
                  _767_genType = _out164;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _730_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _767_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source42.is_Bool) {
                DAST._IType _768_o = _729_t;
                {
                  Dafny.ISequence<Dafny.Rune> _769_genType;
                  Dafny.ISequence<Dafny.Rune> _out165;
                  _out165 = DCOMP.COMP.GenType(_768_o, false, false);
                  _769_genType = _out165;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _730_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _769_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _770_o = _729_t;
                {
                  Dafny.ISequence<Dafny.Rune> _771_genType;
                  Dafny.ISequence<Dafny.Rune> _out166;
                  _out166 = DCOMP.COMP.GenType(_770_o, false, false);
                  _771_genType = _out166;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _730_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _771_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source41.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _772___mcc_h267 = _source41.dtor_Passthrough_a0;
              DAST._IType _773_o = _729_t;
              {
                Dafny.ISequence<Dafny.Rune> _774_genType;
                Dafny.ISequence<Dafny.Rune> _out167;
                _out167 = DCOMP.COMP.GenType(_773_o, false, false);
                _774_genType = _out167;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _730_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _774_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _775___mcc_h269 = _source41.dtor_TypeArg_a0;
              DAST._IType _776_o = _729_t;
              {
                Dafny.ISequence<Dafny.Rune> _777_genType;
                Dafny.ISequence<Dafny.Rune> _out168;
                _out168 = DCOMP.COMP.GenType(_776_o, false, false);
                _777_genType = _out168;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _730_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _777_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source40.is_DecLiteral) {
          Dafny.ISequence<Dafny.Rune> _778___mcc_h4 = _source40.dtor_DecLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _779___mcc_h5 = _source40.dtor_DecLiteral_a1;
          DAST._IType _780___mcc_h6 = _source40.dtor_DecLiteral_a2;
          DAST._IType _781_t = _780___mcc_h6;
          Dafny.ISequence<Dafny.Rune> _782_d = _779___mcc_h5;
          Dafny.ISequence<Dafny.Rune> _783_n = _778___mcc_h4;
          {
            DAST._IType _source43 = _781_t;
            if (_source43.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _784___mcc_h271 = _source43.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _785___mcc_h272 = _source43.dtor_typeArgs;
              DAST._IResolvedType _786___mcc_h273 = _source43.dtor_resolved;
              DAST._IType _787_o = _781_t;
              {
                Dafny.ISequence<Dafny.Rune> _788_genType;
                Dafny.ISequence<Dafny.Rune> _out169;
                _out169 = DCOMP.COMP.GenType(_787_o, false, false);
                _788_genType = _out169;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _783_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _782_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _788_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source43.is_Nullable) {
              DAST._IType _789___mcc_h277 = _source43.dtor_Nullable_a0;
              DAST._IType _790_o = _781_t;
              {
                Dafny.ISequence<Dafny.Rune> _791_genType;
                Dafny.ISequence<Dafny.Rune> _out170;
                _out170 = DCOMP.COMP.GenType(_790_o, false, false);
                _791_genType = _out170;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _783_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _782_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _791_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source43.is_Tuple) {
              Dafny.ISequence<DAST._IType> _792___mcc_h279 = _source43.dtor_Tuple_a0;
              DAST._IType _793_o = _781_t;
              {
                Dafny.ISequence<Dafny.Rune> _794_genType;
                Dafny.ISequence<Dafny.Rune> _out171;
                _out171 = DCOMP.COMP.GenType(_793_o, false, false);
                _794_genType = _out171;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _783_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _782_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _794_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source43.is_Array) {
              DAST._IType _795___mcc_h281 = _source43.dtor_element;
              BigInteger _796___mcc_h282 = _source43.dtor_dims;
              DAST._IType _797_o = _781_t;
              {
                Dafny.ISequence<Dafny.Rune> _798_genType;
                Dafny.ISequence<Dafny.Rune> _out172;
                _out172 = DCOMP.COMP.GenType(_797_o, false, false);
                _798_genType = _out172;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _783_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _782_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _798_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source43.is_Seq) {
              DAST._IType _799___mcc_h285 = _source43.dtor_element;
              DAST._IType _800_o = _781_t;
              {
                Dafny.ISequence<Dafny.Rune> _801_genType;
                Dafny.ISequence<Dafny.Rune> _out173;
                _out173 = DCOMP.COMP.GenType(_800_o, false, false);
                _801_genType = _out173;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _783_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _782_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _801_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source43.is_Set) {
              DAST._IType _802___mcc_h287 = _source43.dtor_element;
              DAST._IType _803_o = _781_t;
              {
                Dafny.ISequence<Dafny.Rune> _804_genType;
                Dafny.ISequence<Dafny.Rune> _out174;
                _out174 = DCOMP.COMP.GenType(_803_o, false, false);
                _804_genType = _out174;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _783_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _782_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _804_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source43.is_Multiset) {
              DAST._IType _805___mcc_h289 = _source43.dtor_element;
              DAST._IType _806_o = _781_t;
              {
                Dafny.ISequence<Dafny.Rune> _807_genType;
                Dafny.ISequence<Dafny.Rune> _out175;
                _out175 = DCOMP.COMP.GenType(_806_o, false, false);
                _807_genType = _out175;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _783_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _782_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _807_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source43.is_Map) {
              DAST._IType _808___mcc_h291 = _source43.dtor_key;
              DAST._IType _809___mcc_h292 = _source43.dtor_value;
              DAST._IType _810_o = _781_t;
              {
                Dafny.ISequence<Dafny.Rune> _811_genType;
                Dafny.ISequence<Dafny.Rune> _out176;
                _out176 = DCOMP.COMP.GenType(_810_o, false, false);
                _811_genType = _out176;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _783_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _782_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _811_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source43.is_Arrow) {
              Dafny.ISequence<DAST._IType> _812___mcc_h295 = _source43.dtor_args;
              DAST._IType _813___mcc_h296 = _source43.dtor_result;
              DAST._IType _814_o = _781_t;
              {
                Dafny.ISequence<Dafny.Rune> _815_genType;
                Dafny.ISequence<Dafny.Rune> _out177;
                _out177 = DCOMP.COMP.GenType(_814_o, false, false);
                _815_genType = _out177;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _783_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _782_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _815_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source43.is_Primitive) {
              DAST._IPrimitive _816___mcc_h299 = _source43.dtor_Primitive_a0;
              DAST._IPrimitive _source44 = _816___mcc_h299;
              if (_source44.is_Int) {
                DAST._IType _817_o = _781_t;
                {
                  Dafny.ISequence<Dafny.Rune> _818_genType;
                  Dafny.ISequence<Dafny.Rune> _out178;
                  _out178 = DCOMP.COMP.GenType(_817_o, false, false);
                  _818_genType = _out178;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _783_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _782_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _818_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source44.is_Real) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _783_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _782_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"));
                }
              } else if (_source44.is_String) {
                DAST._IType _819_o = _781_t;
                {
                  Dafny.ISequence<Dafny.Rune> _820_genType;
                  Dafny.ISequence<Dafny.Rune> _out179;
                  _out179 = DCOMP.COMP.GenType(_819_o, false, false);
                  _820_genType = _out179;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _783_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _782_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _820_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source44.is_Bool) {
                DAST._IType _821_o = _781_t;
                {
                  Dafny.ISequence<Dafny.Rune> _822_genType;
                  Dafny.ISequence<Dafny.Rune> _out180;
                  _out180 = DCOMP.COMP.GenType(_821_o, false, false);
                  _822_genType = _out180;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _783_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _782_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _822_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _823_o = _781_t;
                {
                  Dafny.ISequence<Dafny.Rune> _824_genType;
                  Dafny.ISequence<Dafny.Rune> _out181;
                  _out181 = DCOMP.COMP.GenType(_823_o, false, false);
                  _824_genType = _out181;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _783_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _782_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _824_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source43.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _825___mcc_h301 = _source43.dtor_Passthrough_a0;
              DAST._IType _826_o = _781_t;
              {
                Dafny.ISequence<Dafny.Rune> _827_genType;
                Dafny.ISequence<Dafny.Rune> _out182;
                _out182 = DCOMP.COMP.GenType(_826_o, false, false);
                _827_genType = _out182;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _783_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _782_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _827_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _828___mcc_h303 = _source43.dtor_TypeArg_a0;
              DAST._IType _829_o = _781_t;
              {
                Dafny.ISequence<Dafny.Rune> _830_genType;
                Dafny.ISequence<Dafny.Rune> _out183;
                _out183 = DCOMP.COMP.GenType(_829_o, false, false);
                _830_genType = _out183;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _783_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _782_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _830_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source40.is_StringLiteral) {
          Dafny.ISequence<Dafny.Rune> _831___mcc_h7 = _source40.dtor_StringLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _832_l = _831___mcc_h7;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""), _832_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\".chars().collect::<Vec<char>>()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source40.is_CharLiteral) {
          Dafny.Rune _833___mcc_h8 = _source40.dtor_CharLiteral_a0;
          Dafny.Rune _834_c = _833___mcc_h8;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::primitive::char::from_u32("), DCOMP.__default.natToString(new BigInteger((_834_c).Value))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IType _835___mcc_h9 = _source40.dtor_Null_a0;
          DAST._IType _836_tpe = _835___mcc_h9;
          {
            Dafny.ISequence<Dafny.Rune> _837_tpeGen;
            Dafny.ISequence<Dafny.Rune> _out184;
            _out184 = DCOMP.COMP.GenType(_836_tpe, false, false);
            _837_tpeGen = _out184;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(None as "), _837_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source39.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _838___mcc_h10 = _source39.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _839_name = _838___mcc_h10;
        {
          s = DCOMP.__default.escapeIdent(_839_name);
          if (!((@params).Contains(_839_name))) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            isOwned = false;
          }
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_839_name);
        }
      } else if (_source39.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _840___mcc_h11 = _source39.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _841_path = _840___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _out185;
          _out185 = DCOMP.COMP.GenPath(_841_path);
          s = _out185;
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source39.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _842___mcc_h12 = _source39.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IExpression> _843_values = _842___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _844_i;
          _844_i = BigInteger.Zero;
          while ((_844_i) < (new BigInteger((_843_values).Count))) {
            if ((_844_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _845_recursiveGen;
            bool _846___v31;
            bool _847_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _848_recIdents;
            Dafny.ISequence<Dafny.Rune> _out186;
            bool _out187;
            bool _out188;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out189;
            DCOMP.COMP.GenExpr((_843_values).Select(_844_i), selfIdent, @params, true, out _out186, out _out187, out _out188, out _out189);
            _845_recursiveGen = _out186;
            _846___v31 = _out187;
            _847_isErased = _out188;
            _848_recIdents = _out189;
            if (_847_isErased) {
              _845_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _845_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _845_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _848_recIdents);
            _844_i = (_844_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source39.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _849___mcc_h13 = _source39.dtor_path;
        Dafny.ISequence<DAST._IType> _850___mcc_h14 = _source39.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _851___mcc_h15 = _source39.dtor_args;
        Dafny.ISequence<DAST._IExpression> _852_args = _851___mcc_h15;
        Dafny.ISequence<DAST._IType> _853_typeArgs = _850___mcc_h14;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _854_path = _849___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _855_path;
          Dafny.ISequence<Dafny.Rune> _out190;
          _out190 = DCOMP.COMP.GenPath(_854_path);
          _855_path = _out190;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _855_path);
          if ((new BigInteger((_853_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<"));
            BigInteger _856_i;
            _856_i = BigInteger.Zero;
            while ((_856_i) < (new BigInteger((_853_typeArgs).Count))) {
              if ((_856_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
              }
              Dafny.ISequence<Dafny.Rune> _857_typeString;
              Dafny.ISequence<Dafny.Rune> _out191;
              _out191 = DCOMP.COMP.GenType((_853_typeArgs).Select(_856_i), false, false);
              _857_typeString = _out191;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _857_typeString);
              _856_i = (_856_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new("));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _858_i;
          _858_i = BigInteger.Zero;
          while ((_858_i) < (new BigInteger((_852_args).Count))) {
            if ((_858_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _859_recursiveGen;
            bool _860___v32;
            bool _861_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _862_recIdents;
            Dafny.ISequence<Dafny.Rune> _out192;
            bool _out193;
            bool _out194;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out195;
            DCOMP.COMP.GenExpr((_852_args).Select(_858_i), selfIdent, @params, true, out _out192, out _out193, out _out194, out _out195);
            _859_recursiveGen = _out192;
            _860___v32 = _out193;
            _861_isErased = _out194;
            _862_recIdents = _out195;
            if (_861_isErased) {
              _859_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _859_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _859_recursiveGen);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _862_recIdents);
            _858_i = (_858_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = true;
        }
      } else if (_source39.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _863___mcc_h16 = _source39.dtor_dims;
        DAST._IType _864___mcc_h17 = _source39.dtor_typ;
        DAST._IType _865_typ = _864___mcc_h17;
        Dafny.ISequence<DAST._IExpression> _866_dims = _863___mcc_h16;
        {
          BigInteger _867_i;
          _867_i = (new BigInteger((_866_dims).Count)) - (BigInteger.One);
          Dafny.ISequence<Dafny.Rune> _868_genTyp;
          Dafny.ISequence<Dafny.Rune> _out196;
          _out196 = DCOMP.COMP.GenType(_865_typ, false, false);
          _868_genTyp = _out196;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _868_genTyp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::std::default::Default>::default()"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          while ((_867_i).Sign != -1) {
            Dafny.ISequence<Dafny.Rune> _869_recursiveGen;
            bool _870___v33;
            bool _871_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _872_recIdents;
            Dafny.ISequence<Dafny.Rune> _out197;
            bool _out198;
            bool _out199;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out200;
            DCOMP.COMP.GenExpr((_866_dims).Select(_867_i), selfIdent, @params, true, out _out197, out _out198, out _out199, out _out200);
            _869_recursiveGen = _out197;
            _870___v33 = _out198;
            _871_isErased = _out199;
            _872_recIdents = _out200;
            if (!(_871_isErased)) {
              _869_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _869_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::std::cell::RefCell::new(vec!["), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("; <usize as ::dafny_runtime::NumCast>::from(")), _869_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]))"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _872_recIdents);
            _867_i = (_867_i) - (BigInteger.One);
          }
          isOwned = true;
          isErased = false;
        }
      } else if (_source39.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _873___mcc_h18 = _source39.dtor_path;
        Dafny.ISequence<DAST._IType> _874___mcc_h19 = _source39.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _875___mcc_h20 = _source39.dtor_variant;
        bool _876___mcc_h21 = _source39.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _877___mcc_h22 = _source39.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _878_values = _877___mcc_h22;
        bool _879_isCo = _876___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _880_variant = _875___mcc_h20;
        Dafny.ISequence<DAST._IType> _881_typeArgs = _874___mcc_h19;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _882_path = _873___mcc_h18;
        {
          Dafny.ISequence<Dafny.Rune> _883_path;
          Dafny.ISequence<Dafny.Rune> _out201;
          _out201 = DCOMP.COMP.GenPath(_882_path);
          _883_path = _out201;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _883_path), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          if ((new BigInteger((_881_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
            BigInteger _884_i;
            _884_i = BigInteger.Zero;
            while ((_884_i) < (new BigInteger((_881_typeArgs).Count))) {
              if ((_884_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _885_typeString;
              Dafny.ISequence<Dafny.Rune> _out202;
              _out202 = DCOMP.COMP.GenType((_881_typeArgs).Select(_884_i), false, false);
              _885_typeString = _out202;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _885_typeString);
              _884_i = (_884_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_880_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _886_i;
          _886_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"));
          while ((_886_i) < (new BigInteger((_878_values).Count))) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs1 = (_878_values).Select(_886_i);
            Dafny.ISequence<Dafny.Rune> _887_name = _let_tmp_rhs1.dtor__0;
            DAST._IExpression _888_value = _let_tmp_rhs1.dtor__1;
            if ((_886_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            if (_879_isCo) {
              Dafny.ISequence<Dafny.Rune> _889_recursiveGen;
              bool _890___v34;
              bool _891_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _892_recIdents;
              Dafny.ISequence<Dafny.Rune> _out203;
              bool _out204;
              bool _out205;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out206;
              DCOMP.COMP.GenExpr(_888_value, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out203, out _out204, out _out205, out _out206);
              _889_recursiveGen = _out203;
              _890___v34 = _out204;
              _891_isErased = _out205;
              _892_recIdents = _out206;
              if (!(_891_isErased)) {
                _889_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _889_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _889_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _889_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _892_recIdents);
              Dafny.ISequence<Dafny.Rune> _893_allReadCloned;
              _893_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_892_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _894_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_0 in (_892_recIdents).Elements) {
                  _894_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_0;
                  if ((_892_recIdents).Contains(_894_next)) {
                    goto after__ASSIGN_SUCH_THAT_0;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 1242)");
              after__ASSIGN_SUCH_THAT_0:;
                _893_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_893_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_894_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_894_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _892_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_892_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_894_next));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_887_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n")), _893_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), _889_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
            } else {
              Dafny.ISequence<Dafny.Rune> _895_recursiveGen;
              bool _896___v35;
              bool _897_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _898_recIdents;
              Dafny.ISequence<Dafny.Rune> _out207;
              bool _out208;
              bool _out209;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out210;
              DCOMP.COMP.GenExpr(_888_value, selfIdent, @params, true, out _out207, out _out208, out _out209, out _out210);
              _895_recursiveGen = _out207;
              _896___v35 = _out208;
              _897_isErased = _out209;
              _898_recIdents = _out210;
              if (!(_897_isErased)) {
                _895_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _895_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _895_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _895_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_887_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _895_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _898_recIdents);
            }
            _886_i = (_886_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" })"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source39.is_Convert) {
        DAST._IExpression _899___mcc_h23 = _source39.dtor_value;
        DAST._IType _900___mcc_h24 = _source39.dtor_from;
        DAST._IType _901___mcc_h25 = _source39.dtor_typ;
        DAST._IType _902_toTpe = _901___mcc_h25;
        DAST._IType _903_fromTpe = _900___mcc_h24;
        DAST._IExpression _904_expr = _899___mcc_h23;
        {
          if (object.Equals(_903_fromTpe, _902_toTpe)) {
            Dafny.ISequence<Dafny.Rune> _905_recursiveGen;
            bool _906_recOwned;
            bool _907_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _908_recIdents;
            Dafny.ISequence<Dafny.Rune> _out211;
            bool _out212;
            bool _out213;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out214;
            DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out211, out _out212, out _out213, out _out214);
            _905_recursiveGen = _out211;
            _906_recOwned = _out212;
            _907_recErased = _out213;
            _908_recIdents = _out214;
            s = _905_recursiveGen;
            isOwned = _906_recOwned;
            isErased = _907_recErased;
            readIdents = _908_recIdents;
          } else {
            _System._ITuple2<DAST._IType, DAST._IType> _source45 = _System.Tuple2<DAST._IType, DAST._IType>.create(_903_fromTpe, _902_toTpe);
            DAST._IType _909___mcc_h305 = _source45.dtor__0;
            DAST._IType _910___mcc_h306 = _source45.dtor__1;
            DAST._IType _source46 = _909___mcc_h305;
            if (_source46.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _911___mcc_h309 = _source46.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _912___mcc_h310 = _source46.dtor_typeArgs;
              DAST._IResolvedType _913___mcc_h311 = _source46.dtor_resolved;
              DAST._IResolvedType _source47 = _913___mcc_h311;
              if (_source47.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _914___mcc_h321 = _source47.dtor_path;
                DAST._IType _source48 = _910___mcc_h306;
                if (_source48.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _915___mcc_h325 = _source48.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _916___mcc_h326 = _source48.dtor_typeArgs;
                  DAST._IResolvedType _917___mcc_h327 = _source48.dtor_resolved;
                  DAST._IResolvedType _source49 = _917___mcc_h327;
                  if (_source49.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _918___mcc_h331 = _source49.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _919_recursiveGen;
                      bool _920_recOwned;
                      bool _921_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _922_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out215;
                      bool _out216;
                      bool _out217;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out218;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out215, out _out216, out _out217, out _out218);
                      _919_recursiveGen = _out215;
                      _920_recOwned = _out216;
                      _921_recErased = _out217;
                      _922_recIdents = _out218;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _919_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _920_recOwned;
                      isErased = _921_recErased;
                      readIdents = _922_recIdents;
                    }
                  } else if (_source49.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _923___mcc_h333 = _source49.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _924_recursiveGen;
                      bool _925_recOwned;
                      bool _926_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _927_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out219;
                      bool _out220;
                      bool _out221;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out222;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out219, out _out220, out _out221, out _out222);
                      _924_recursiveGen = _out219;
                      _925_recOwned = _out220;
                      _926_recErased = _out221;
                      _927_recIdents = _out222;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _924_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _925_recOwned;
                      isErased = _926_recErased;
                      readIdents = _927_recIdents;
                    }
                  } else {
                    DAST._IType _928___mcc_h335 = _source49.dtor_Newtype_a0;
                    DAST._IType _929_b = _928___mcc_h335;
                    {
                      if (object.Equals(_903_fromTpe, _929_b)) {
                        Dafny.ISequence<Dafny.Rune> _930_recursiveGen;
                        bool _931_recOwned;
                        bool _932_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _933_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out223;
                        bool _out224;
                        bool _out225;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out226;
                        DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out223, out _out224, out _out225, out _out226);
                        _930_recursiveGen = _out223;
                        _931_recOwned = _out224;
                        _932_recErased = _out225;
                        _933_recIdents = _out226;
                        Dafny.ISequence<Dafny.Rune> _934_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out227;
                        _out227 = DCOMP.COMP.GenType(_902_toTpe, true, false);
                        _934_rhsType = _out227;
                        Dafny.ISequence<Dafny.Rune> _935_uneraseFn;
                        _935_uneraseFn = ((_931_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _934_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _935_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _930_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _931_recOwned;
                        isErased = false;
                        readIdents = _933_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out228;
                        bool _out229;
                        bool _out230;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out231;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_904_expr, _903_fromTpe, _929_b), _929_b, _902_toTpe), selfIdent, @params, mustOwn, out _out228, out _out229, out _out230, out _out231);
                        s = _out228;
                        isOwned = _out229;
                        isErased = _out230;
                        readIdents = _out231;
                      }
                    }
                  }
                } else if (_source48.is_Nullable) {
                  DAST._IType _936___mcc_h337 = _source48.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _937_recursiveGen;
                    bool _938_recOwned;
                    bool _939_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _940_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out232;
                    bool _out233;
                    bool _out234;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out235;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out232, out _out233, out _out234, out _out235);
                    _937_recursiveGen = _out232;
                    _938_recOwned = _out233;
                    _939_recErased = _out234;
                    _940_recIdents = _out235;
                    if (!(_938_recOwned)) {
                      _937_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_937_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _937_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _939_recErased;
                    readIdents = _940_recIdents;
                  }
                } else if (_source48.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _941___mcc_h339 = _source48.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _942_recursiveGen;
                    bool _943_recOwned;
                    bool _944_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _945_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out236;
                    bool _out237;
                    bool _out238;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out239;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out236, out _out237, out _out238, out _out239);
                    _942_recursiveGen = _out236;
                    _943_recOwned = _out237;
                    _944_recErased = _out238;
                    _945_recIdents = _out239;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _942_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _943_recOwned;
                    isErased = _944_recErased;
                    readIdents = _945_recIdents;
                  }
                } else if (_source48.is_Array) {
                  DAST._IType _946___mcc_h341 = _source48.dtor_element;
                  BigInteger _947___mcc_h342 = _source48.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _948_recursiveGen;
                    bool _949_recOwned;
                    bool _950_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _951_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out240;
                    bool _out241;
                    bool _out242;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out243;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out240, out _out241, out _out242, out _out243);
                    _948_recursiveGen = _out240;
                    _949_recOwned = _out241;
                    _950_recErased = _out242;
                    _951_recIdents = _out243;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _948_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _949_recOwned;
                    isErased = _950_recErased;
                    readIdents = _951_recIdents;
                  }
                } else if (_source48.is_Seq) {
                  DAST._IType _952___mcc_h345 = _source48.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _953_recursiveGen;
                    bool _954_recOwned;
                    bool _955_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _956_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out244;
                    bool _out245;
                    bool _out246;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out247;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out244, out _out245, out _out246, out _out247);
                    _953_recursiveGen = _out244;
                    _954_recOwned = _out245;
                    _955_recErased = _out246;
                    _956_recIdents = _out247;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _953_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _954_recOwned;
                    isErased = _955_recErased;
                    readIdents = _956_recIdents;
                  }
                } else if (_source48.is_Set) {
                  DAST._IType _957___mcc_h347 = _source48.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _958_recursiveGen;
                    bool _959_recOwned;
                    bool _960_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _961_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out248;
                    bool _out249;
                    bool _out250;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out251;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out248, out _out249, out _out250, out _out251);
                    _958_recursiveGen = _out248;
                    _959_recOwned = _out249;
                    _960_recErased = _out250;
                    _961_recIdents = _out251;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _958_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _959_recOwned;
                    isErased = _960_recErased;
                    readIdents = _961_recIdents;
                  }
                } else if (_source48.is_Multiset) {
                  DAST._IType _962___mcc_h349 = _source48.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _963_recursiveGen;
                    bool _964_recOwned;
                    bool _965_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _966_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out252;
                    bool _out253;
                    bool _out254;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out255;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out252, out _out253, out _out254, out _out255);
                    _963_recursiveGen = _out252;
                    _964_recOwned = _out253;
                    _965_recErased = _out254;
                    _966_recIdents = _out255;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _963_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _964_recOwned;
                    isErased = _965_recErased;
                    readIdents = _966_recIdents;
                  }
                } else if (_source48.is_Map) {
                  DAST._IType _967___mcc_h351 = _source48.dtor_key;
                  DAST._IType _968___mcc_h352 = _source48.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _969_recursiveGen;
                    bool _970_recOwned;
                    bool _971_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _972_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out256;
                    bool _out257;
                    bool _out258;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out259;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out256, out _out257, out _out258, out _out259);
                    _969_recursiveGen = _out256;
                    _970_recOwned = _out257;
                    _971_recErased = _out258;
                    _972_recIdents = _out259;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _969_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _970_recOwned;
                    isErased = _971_recErased;
                    readIdents = _972_recIdents;
                  }
                } else if (_source48.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _973___mcc_h355 = _source48.dtor_args;
                  DAST._IType _974___mcc_h356 = _source48.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _975_recursiveGen;
                    bool _976_recOwned;
                    bool _977_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _978_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out260;
                    bool _out261;
                    bool _out262;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out263;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out260, out _out261, out _out262, out _out263);
                    _975_recursiveGen = _out260;
                    _976_recOwned = _out261;
                    _977_recErased = _out262;
                    _978_recIdents = _out263;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _975_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _976_recOwned;
                    isErased = _977_recErased;
                    readIdents = _978_recIdents;
                  }
                } else if (_source48.is_Primitive) {
                  DAST._IPrimitive _979___mcc_h359 = _source48.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _980_recursiveGen;
                    bool _981_recOwned;
                    bool _982_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _983_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out264;
                    bool _out265;
                    bool _out266;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out267;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out264, out _out265, out _out266, out _out267);
                    _980_recursiveGen = _out264;
                    _981_recOwned = _out265;
                    _982_recErased = _out266;
                    _983_recIdents = _out267;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _980_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _981_recOwned;
                    isErased = _982_recErased;
                    readIdents = _983_recIdents;
                  }
                } else if (_source48.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _984___mcc_h361 = _source48.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _985_recursiveGen;
                    bool _986_recOwned;
                    bool _987_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _988_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out268;
                    bool _out269;
                    bool _out270;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out271;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out268, out _out269, out _out270, out _out271);
                    _985_recursiveGen = _out268;
                    _986_recOwned = _out269;
                    _987_recErased = _out270;
                    _988_recIdents = _out271;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _985_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _986_recOwned;
                    isErased = _987_recErased;
                    readIdents = _988_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _989___mcc_h363 = _source48.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _990_recursiveGen;
                    bool _991_recOwned;
                    bool _992_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _993_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out272;
                    bool _out273;
                    bool _out274;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out275;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out272, out _out273, out _out274, out _out275);
                    _990_recursiveGen = _out272;
                    _991_recOwned = _out273;
                    _992_recErased = _out274;
                    _993_recIdents = _out275;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _990_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _991_recOwned;
                    isErased = _992_recErased;
                    readIdents = _993_recIdents;
                  }
                }
              } else if (_source47.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _994___mcc_h365 = _source47.dtor_path;
                DAST._IType _source50 = _910___mcc_h306;
                if (_source50.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _995___mcc_h369 = _source50.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _996___mcc_h370 = _source50.dtor_typeArgs;
                  DAST._IResolvedType _997___mcc_h371 = _source50.dtor_resolved;
                  DAST._IResolvedType _source51 = _997___mcc_h371;
                  if (_source51.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _998___mcc_h375 = _source51.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _999_recursiveGen;
                      bool _1000_recOwned;
                      bool _1001_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1002_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out276;
                      bool _out277;
                      bool _out278;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out279;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out276, out _out277, out _out278, out _out279);
                      _999_recursiveGen = _out276;
                      _1000_recOwned = _out277;
                      _1001_recErased = _out278;
                      _1002_recIdents = _out279;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _999_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1000_recOwned;
                      isErased = _1001_recErased;
                      readIdents = _1002_recIdents;
                    }
                  } else if (_source51.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1003___mcc_h377 = _source51.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1004_recursiveGen;
                      bool _1005_recOwned;
                      bool _1006_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1007_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out280;
                      bool _out281;
                      bool _out282;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out283;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out280, out _out281, out _out282, out _out283);
                      _1004_recursiveGen = _out280;
                      _1005_recOwned = _out281;
                      _1006_recErased = _out282;
                      _1007_recIdents = _out283;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1004_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1005_recOwned;
                      isErased = _1006_recErased;
                      readIdents = _1007_recIdents;
                    }
                  } else {
                    DAST._IType _1008___mcc_h379 = _source51.dtor_Newtype_a0;
                    DAST._IType _1009_b = _1008___mcc_h379;
                    {
                      if (object.Equals(_903_fromTpe, _1009_b)) {
                        Dafny.ISequence<Dafny.Rune> _1010_recursiveGen;
                        bool _1011_recOwned;
                        bool _1012_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1013_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out284;
                        bool _out285;
                        bool _out286;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out287;
                        DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out284, out _out285, out _out286, out _out287);
                        _1010_recursiveGen = _out284;
                        _1011_recOwned = _out285;
                        _1012_recErased = _out286;
                        _1013_recIdents = _out287;
                        Dafny.ISequence<Dafny.Rune> _1014_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out288;
                        _out288 = DCOMP.COMP.GenType(_902_toTpe, true, false);
                        _1014_rhsType = _out288;
                        Dafny.ISequence<Dafny.Rune> _1015_uneraseFn;
                        _1015_uneraseFn = ((_1011_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1014_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1015_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1010_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1011_recOwned;
                        isErased = false;
                        readIdents = _1013_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out289;
                        bool _out290;
                        bool _out291;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out292;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_904_expr, _903_fromTpe, _1009_b), _1009_b, _902_toTpe), selfIdent, @params, mustOwn, out _out289, out _out290, out _out291, out _out292);
                        s = _out289;
                        isOwned = _out290;
                        isErased = _out291;
                        readIdents = _out292;
                      }
                    }
                  }
                } else if (_source50.is_Nullable) {
                  DAST._IType _1016___mcc_h381 = _source50.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1017_recursiveGen;
                    bool _1018_recOwned;
                    bool _1019_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1020_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out293;
                    bool _out294;
                    bool _out295;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out296;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out293, out _out294, out _out295, out _out296);
                    _1017_recursiveGen = _out293;
                    _1018_recOwned = _out294;
                    _1019_recErased = _out295;
                    _1020_recIdents = _out296;
                    if (!(_1018_recOwned)) {
                      _1017_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1017_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1017_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1019_recErased;
                    readIdents = _1020_recIdents;
                  }
                } else if (_source50.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1021___mcc_h383 = _source50.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1022_recursiveGen;
                    bool _1023_recOwned;
                    bool _1024_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1025_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out297;
                    bool _out298;
                    bool _out299;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out300;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out297, out _out298, out _out299, out _out300);
                    _1022_recursiveGen = _out297;
                    _1023_recOwned = _out298;
                    _1024_recErased = _out299;
                    _1025_recIdents = _out300;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1022_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1023_recOwned;
                    isErased = _1024_recErased;
                    readIdents = _1025_recIdents;
                  }
                } else if (_source50.is_Array) {
                  DAST._IType _1026___mcc_h385 = _source50.dtor_element;
                  BigInteger _1027___mcc_h386 = _source50.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1028_recursiveGen;
                    bool _1029_recOwned;
                    bool _1030_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1031_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out301;
                    bool _out302;
                    bool _out303;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out304;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out301, out _out302, out _out303, out _out304);
                    _1028_recursiveGen = _out301;
                    _1029_recOwned = _out302;
                    _1030_recErased = _out303;
                    _1031_recIdents = _out304;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1028_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1029_recOwned;
                    isErased = _1030_recErased;
                    readIdents = _1031_recIdents;
                  }
                } else if (_source50.is_Seq) {
                  DAST._IType _1032___mcc_h389 = _source50.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1033_recursiveGen;
                    bool _1034_recOwned;
                    bool _1035_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1036_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out305;
                    bool _out306;
                    bool _out307;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out308;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out305, out _out306, out _out307, out _out308);
                    _1033_recursiveGen = _out305;
                    _1034_recOwned = _out306;
                    _1035_recErased = _out307;
                    _1036_recIdents = _out308;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1033_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1034_recOwned;
                    isErased = _1035_recErased;
                    readIdents = _1036_recIdents;
                  }
                } else if (_source50.is_Set) {
                  DAST._IType _1037___mcc_h391 = _source50.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1038_recursiveGen;
                    bool _1039_recOwned;
                    bool _1040_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1041_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out309;
                    bool _out310;
                    bool _out311;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out312;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out309, out _out310, out _out311, out _out312);
                    _1038_recursiveGen = _out309;
                    _1039_recOwned = _out310;
                    _1040_recErased = _out311;
                    _1041_recIdents = _out312;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1038_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1039_recOwned;
                    isErased = _1040_recErased;
                    readIdents = _1041_recIdents;
                  }
                } else if (_source50.is_Multiset) {
                  DAST._IType _1042___mcc_h393 = _source50.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1043_recursiveGen;
                    bool _1044_recOwned;
                    bool _1045_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1046_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out313;
                    bool _out314;
                    bool _out315;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out316;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out313, out _out314, out _out315, out _out316);
                    _1043_recursiveGen = _out313;
                    _1044_recOwned = _out314;
                    _1045_recErased = _out315;
                    _1046_recIdents = _out316;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1043_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1044_recOwned;
                    isErased = _1045_recErased;
                    readIdents = _1046_recIdents;
                  }
                } else if (_source50.is_Map) {
                  DAST._IType _1047___mcc_h395 = _source50.dtor_key;
                  DAST._IType _1048___mcc_h396 = _source50.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1049_recursiveGen;
                    bool _1050_recOwned;
                    bool _1051_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1052_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out317;
                    bool _out318;
                    bool _out319;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out320;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out317, out _out318, out _out319, out _out320);
                    _1049_recursiveGen = _out317;
                    _1050_recOwned = _out318;
                    _1051_recErased = _out319;
                    _1052_recIdents = _out320;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1049_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1050_recOwned;
                    isErased = _1051_recErased;
                    readIdents = _1052_recIdents;
                  }
                } else if (_source50.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1053___mcc_h399 = _source50.dtor_args;
                  DAST._IType _1054___mcc_h400 = _source50.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1055_recursiveGen;
                    bool _1056_recOwned;
                    bool _1057_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1058_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out321;
                    bool _out322;
                    bool _out323;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out324;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out321, out _out322, out _out323, out _out324);
                    _1055_recursiveGen = _out321;
                    _1056_recOwned = _out322;
                    _1057_recErased = _out323;
                    _1058_recIdents = _out324;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1055_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1056_recOwned;
                    isErased = _1057_recErased;
                    readIdents = _1058_recIdents;
                  }
                } else if (_source50.is_Primitive) {
                  DAST._IPrimitive _1059___mcc_h403 = _source50.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1060_recursiveGen;
                    bool _1061_recOwned;
                    bool _1062_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1063_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out325;
                    bool _out326;
                    bool _out327;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out328;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out325, out _out326, out _out327, out _out328);
                    _1060_recursiveGen = _out325;
                    _1061_recOwned = _out326;
                    _1062_recErased = _out327;
                    _1063_recIdents = _out328;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1060_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1061_recOwned;
                    isErased = _1062_recErased;
                    readIdents = _1063_recIdents;
                  }
                } else if (_source50.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1064___mcc_h405 = _source50.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1065_recursiveGen;
                    bool _1066_recOwned;
                    bool _1067_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1068_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out329;
                    bool _out330;
                    bool _out331;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out332;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out329, out _out330, out _out331, out _out332);
                    _1065_recursiveGen = _out329;
                    _1066_recOwned = _out330;
                    _1067_recErased = _out331;
                    _1068_recIdents = _out332;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1065_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1066_recOwned;
                    isErased = _1067_recErased;
                    readIdents = _1068_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1069___mcc_h407 = _source50.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1070_recursiveGen;
                    bool _1071_recOwned;
                    bool _1072_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1073_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out333;
                    bool _out334;
                    bool _out335;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out336;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out333, out _out334, out _out335, out _out336);
                    _1070_recursiveGen = _out333;
                    _1071_recOwned = _out334;
                    _1072_recErased = _out335;
                    _1073_recIdents = _out336;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1070_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1071_recOwned;
                    isErased = _1072_recErased;
                    readIdents = _1073_recIdents;
                  }
                }
              } else {
                DAST._IType _1074___mcc_h409 = _source47.dtor_Newtype_a0;
                DAST._IType _source52 = _910___mcc_h306;
                if (_source52.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1075___mcc_h413 = _source52.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1076___mcc_h414 = _source52.dtor_typeArgs;
                  DAST._IResolvedType _1077___mcc_h415 = _source52.dtor_resolved;
                  DAST._IResolvedType _source53 = _1077___mcc_h415;
                  if (_source53.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1078___mcc_h422 = _source53.dtor_path;
                    DAST._IType _1079_b = _1074___mcc_h409;
                    {
                      if (object.Equals(_1079_b, _902_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _1080_recursiveGen;
                        bool _1081_recOwned;
                        bool _1082_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1083_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out337;
                        bool _out338;
                        bool _out339;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out340;
                        DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out337, out _out338, out _out339, out _out340);
                        _1080_recursiveGen = _out337;
                        _1081_recOwned = _out338;
                        _1082_recErased = _out339;
                        _1083_recIdents = _out340;
                        Dafny.ISequence<Dafny.Rune> _1084_uneraseFn;
                        _1084_uneraseFn = ((_1081_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1084_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1080_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1081_recOwned;
                        isErased = true;
                        readIdents = _1083_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out341;
                        bool _out342;
                        bool _out343;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out344;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_904_expr, _903_fromTpe, _1079_b), _1079_b, _902_toTpe), selfIdent, @params, mustOwn, out _out341, out _out342, out _out343, out _out344);
                        s = _out341;
                        isOwned = _out342;
                        isErased = _out343;
                        readIdents = _out344;
                      }
                    }
                  } else if (_source53.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1085___mcc_h425 = _source53.dtor_path;
                    DAST._IType _1086_b = _1074___mcc_h409;
                    {
                      if (object.Equals(_1086_b, _902_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _1087_recursiveGen;
                        bool _1088_recOwned;
                        bool _1089_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1090_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out345;
                        bool _out346;
                        bool _out347;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out348;
                        DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out345, out _out346, out _out347, out _out348);
                        _1087_recursiveGen = _out345;
                        _1088_recOwned = _out346;
                        _1089_recErased = _out347;
                        _1090_recIdents = _out348;
                        Dafny.ISequence<Dafny.Rune> _1091_uneraseFn;
                        _1091_uneraseFn = ((_1088_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1091_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1087_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1088_recOwned;
                        isErased = true;
                        readIdents = _1090_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out349;
                        bool _out350;
                        bool _out351;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out352;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_904_expr, _903_fromTpe, _1086_b), _1086_b, _902_toTpe), selfIdent, @params, mustOwn, out _out349, out _out350, out _out351, out _out352);
                        s = _out349;
                        isOwned = _out350;
                        isErased = _out351;
                        readIdents = _out352;
                      }
                    }
                  } else {
                    DAST._IType _1092___mcc_h428 = _source53.dtor_Newtype_a0;
                    DAST._IType _1093_b = _1092___mcc_h428;
                    {
                      if (object.Equals(_903_fromTpe, _1093_b)) {
                        Dafny.ISequence<Dafny.Rune> _1094_recursiveGen;
                        bool _1095_recOwned;
                        bool _1096_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1097_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out353;
                        bool _out354;
                        bool _out355;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out356;
                        DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out353, out _out354, out _out355, out _out356);
                        _1094_recursiveGen = _out353;
                        _1095_recOwned = _out354;
                        _1096_recErased = _out355;
                        _1097_recIdents = _out356;
                        Dafny.ISequence<Dafny.Rune> _1098_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out357;
                        _out357 = DCOMP.COMP.GenType(_902_toTpe, true, false);
                        _1098_rhsType = _out357;
                        Dafny.ISequence<Dafny.Rune> _1099_uneraseFn;
                        _1099_uneraseFn = ((_1095_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1098_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1099_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1094_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1095_recOwned;
                        isErased = false;
                        readIdents = _1097_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out358;
                        bool _out359;
                        bool _out360;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out361;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_904_expr, _903_fromTpe, _1093_b), _1093_b, _902_toTpe), selfIdent, @params, mustOwn, out _out358, out _out359, out _out360, out _out361);
                        s = _out358;
                        isOwned = _out359;
                        isErased = _out360;
                        readIdents = _out361;
                      }
                    }
                  }
                } else if (_source52.is_Nullable) {
                  DAST._IType _1100___mcc_h431 = _source52.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1101_recursiveGen;
                    bool _1102_recOwned;
                    bool _1103_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1104_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out362;
                    bool _out363;
                    bool _out364;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out365;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out362, out _out363, out _out364, out _out365);
                    _1101_recursiveGen = _out362;
                    _1102_recOwned = _out363;
                    _1103_recErased = _out364;
                    _1104_recIdents = _out365;
                    if (!(_1102_recOwned)) {
                      _1101_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1101_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1101_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1103_recErased;
                    readIdents = _1104_recIdents;
                  }
                } else if (_source52.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1105___mcc_h434 = _source52.dtor_Tuple_a0;
                  DAST._IType _1106_b = _1074___mcc_h409;
                  {
                    if (object.Equals(_1106_b, _902_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1107_recursiveGen;
                      bool _1108_recOwned;
                      bool _1109_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1110_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out366;
                      bool _out367;
                      bool _out368;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out369;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out366, out _out367, out _out368, out _out369);
                      _1107_recursiveGen = _out366;
                      _1108_recOwned = _out367;
                      _1109_recErased = _out368;
                      _1110_recIdents = _out369;
                      Dafny.ISequence<Dafny.Rune> _1111_uneraseFn;
                      _1111_uneraseFn = ((_1108_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1111_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1107_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1108_recOwned;
                      isErased = true;
                      readIdents = _1110_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out370;
                      bool _out371;
                      bool _out372;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out373;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_904_expr, _903_fromTpe, _1106_b), _1106_b, _902_toTpe), selfIdent, @params, mustOwn, out _out370, out _out371, out _out372, out _out373);
                      s = _out370;
                      isOwned = _out371;
                      isErased = _out372;
                      readIdents = _out373;
                    }
                  }
                } else if (_source52.is_Array) {
                  DAST._IType _1112___mcc_h437 = _source52.dtor_element;
                  BigInteger _1113___mcc_h438 = _source52.dtor_dims;
                  DAST._IType _1114_b = _1074___mcc_h409;
                  {
                    if (object.Equals(_1114_b, _902_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1115_recursiveGen;
                      bool _1116_recOwned;
                      bool _1117_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1118_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out374;
                      bool _out375;
                      bool _out376;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out377;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out374, out _out375, out _out376, out _out377);
                      _1115_recursiveGen = _out374;
                      _1116_recOwned = _out375;
                      _1117_recErased = _out376;
                      _1118_recIdents = _out377;
                      Dafny.ISequence<Dafny.Rune> _1119_uneraseFn;
                      _1119_uneraseFn = ((_1116_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1119_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1115_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1116_recOwned;
                      isErased = true;
                      readIdents = _1118_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out378;
                      bool _out379;
                      bool _out380;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out381;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_904_expr, _903_fromTpe, _1114_b), _1114_b, _902_toTpe), selfIdent, @params, mustOwn, out _out378, out _out379, out _out380, out _out381);
                      s = _out378;
                      isOwned = _out379;
                      isErased = _out380;
                      readIdents = _out381;
                    }
                  }
                } else if (_source52.is_Seq) {
                  DAST._IType _1120___mcc_h443 = _source52.dtor_element;
                  DAST._IType _1121_b = _1074___mcc_h409;
                  {
                    if (object.Equals(_1121_b, _902_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1122_recursiveGen;
                      bool _1123_recOwned;
                      bool _1124_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1125_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out382;
                      bool _out383;
                      bool _out384;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out385;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out382, out _out383, out _out384, out _out385);
                      _1122_recursiveGen = _out382;
                      _1123_recOwned = _out383;
                      _1124_recErased = _out384;
                      _1125_recIdents = _out385;
                      Dafny.ISequence<Dafny.Rune> _1126_uneraseFn;
                      _1126_uneraseFn = ((_1123_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1126_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1122_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1123_recOwned;
                      isErased = true;
                      readIdents = _1125_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out386;
                      bool _out387;
                      bool _out388;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out389;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_904_expr, _903_fromTpe, _1121_b), _1121_b, _902_toTpe), selfIdent, @params, mustOwn, out _out386, out _out387, out _out388, out _out389);
                      s = _out386;
                      isOwned = _out387;
                      isErased = _out388;
                      readIdents = _out389;
                    }
                  }
                } else if (_source52.is_Set) {
                  DAST._IType _1127___mcc_h446 = _source52.dtor_element;
                  DAST._IType _1128_b = _1074___mcc_h409;
                  {
                    if (object.Equals(_1128_b, _902_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1129_recursiveGen;
                      bool _1130_recOwned;
                      bool _1131_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1132_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out390;
                      bool _out391;
                      bool _out392;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out393;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out390, out _out391, out _out392, out _out393);
                      _1129_recursiveGen = _out390;
                      _1130_recOwned = _out391;
                      _1131_recErased = _out392;
                      _1132_recIdents = _out393;
                      Dafny.ISequence<Dafny.Rune> _1133_uneraseFn;
                      _1133_uneraseFn = ((_1130_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1133_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1129_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1130_recOwned;
                      isErased = true;
                      readIdents = _1132_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out394;
                      bool _out395;
                      bool _out396;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out397;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_904_expr, _903_fromTpe, _1128_b), _1128_b, _902_toTpe), selfIdent, @params, mustOwn, out _out394, out _out395, out _out396, out _out397);
                      s = _out394;
                      isOwned = _out395;
                      isErased = _out396;
                      readIdents = _out397;
                    }
                  }
                } else if (_source52.is_Multiset) {
                  DAST._IType _1134___mcc_h449 = _source52.dtor_element;
                  DAST._IType _1135_b = _1074___mcc_h409;
                  {
                    if (object.Equals(_1135_b, _902_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1136_recursiveGen;
                      bool _1137_recOwned;
                      bool _1138_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1139_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out398;
                      bool _out399;
                      bool _out400;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out401;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out398, out _out399, out _out400, out _out401);
                      _1136_recursiveGen = _out398;
                      _1137_recOwned = _out399;
                      _1138_recErased = _out400;
                      _1139_recIdents = _out401;
                      Dafny.ISequence<Dafny.Rune> _1140_uneraseFn;
                      _1140_uneraseFn = ((_1137_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1140_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1136_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1137_recOwned;
                      isErased = true;
                      readIdents = _1139_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out402;
                      bool _out403;
                      bool _out404;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out405;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_904_expr, _903_fromTpe, _1135_b), _1135_b, _902_toTpe), selfIdent, @params, mustOwn, out _out402, out _out403, out _out404, out _out405);
                      s = _out402;
                      isOwned = _out403;
                      isErased = _out404;
                      readIdents = _out405;
                    }
                  }
                } else if (_source52.is_Map) {
                  DAST._IType _1141___mcc_h452 = _source52.dtor_key;
                  DAST._IType _1142___mcc_h453 = _source52.dtor_value;
                  DAST._IType _1143_b = _1074___mcc_h409;
                  {
                    if (object.Equals(_1143_b, _902_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1144_recursiveGen;
                      bool _1145_recOwned;
                      bool _1146_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1147_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out406;
                      bool _out407;
                      bool _out408;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out409;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out406, out _out407, out _out408, out _out409);
                      _1144_recursiveGen = _out406;
                      _1145_recOwned = _out407;
                      _1146_recErased = _out408;
                      _1147_recIdents = _out409;
                      Dafny.ISequence<Dafny.Rune> _1148_uneraseFn;
                      _1148_uneraseFn = ((_1145_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1148_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1144_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1145_recOwned;
                      isErased = true;
                      readIdents = _1147_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out410;
                      bool _out411;
                      bool _out412;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out413;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_904_expr, _903_fromTpe, _1143_b), _1143_b, _902_toTpe), selfIdent, @params, mustOwn, out _out410, out _out411, out _out412, out _out413);
                      s = _out410;
                      isOwned = _out411;
                      isErased = _out412;
                      readIdents = _out413;
                    }
                  }
                } else if (_source52.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1149___mcc_h458 = _source52.dtor_args;
                  DAST._IType _1150___mcc_h459 = _source52.dtor_result;
                  DAST._IType _1151_b = _1074___mcc_h409;
                  {
                    if (object.Equals(_1151_b, _902_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1152_recursiveGen;
                      bool _1153_recOwned;
                      bool _1154_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1155_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out414;
                      bool _out415;
                      bool _out416;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out417;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out414, out _out415, out _out416, out _out417);
                      _1152_recursiveGen = _out414;
                      _1153_recOwned = _out415;
                      _1154_recErased = _out416;
                      _1155_recIdents = _out417;
                      Dafny.ISequence<Dafny.Rune> _1156_uneraseFn;
                      _1156_uneraseFn = ((_1153_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1156_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1152_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1153_recOwned;
                      isErased = true;
                      readIdents = _1155_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out418;
                      bool _out419;
                      bool _out420;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out421;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_904_expr, _903_fromTpe, _1151_b), _1151_b, _902_toTpe), selfIdent, @params, mustOwn, out _out418, out _out419, out _out420, out _out421);
                      s = _out418;
                      isOwned = _out419;
                      isErased = _out420;
                      readIdents = _out421;
                    }
                  }
                } else if (_source52.is_Primitive) {
                  DAST._IPrimitive _1157___mcc_h464 = _source52.dtor_Primitive_a0;
                  DAST._IType _1158_b = _1074___mcc_h409;
                  {
                    if (object.Equals(_1158_b, _902_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1159_recursiveGen;
                      bool _1160_recOwned;
                      bool _1161_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1162_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out422;
                      bool _out423;
                      bool _out424;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out425;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out422, out _out423, out _out424, out _out425);
                      _1159_recursiveGen = _out422;
                      _1160_recOwned = _out423;
                      _1161_recErased = _out424;
                      _1162_recIdents = _out425;
                      Dafny.ISequence<Dafny.Rune> _1163_uneraseFn;
                      _1163_uneraseFn = ((_1160_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1163_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1159_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1160_recOwned;
                      isErased = true;
                      readIdents = _1162_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out426;
                      bool _out427;
                      bool _out428;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out429;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_904_expr, _903_fromTpe, _1158_b), _1158_b, _902_toTpe), selfIdent, @params, mustOwn, out _out426, out _out427, out _out428, out _out429);
                      s = _out426;
                      isOwned = _out427;
                      isErased = _out428;
                      readIdents = _out429;
                    }
                  }
                } else if (_source52.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1164___mcc_h467 = _source52.dtor_Passthrough_a0;
                  DAST._IType _1165_b = _1074___mcc_h409;
                  {
                    if (object.Equals(_1165_b, _902_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1166_recursiveGen;
                      bool _1167_recOwned;
                      bool _1168_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1169_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out430;
                      bool _out431;
                      bool _out432;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out433;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out430, out _out431, out _out432, out _out433);
                      _1166_recursiveGen = _out430;
                      _1167_recOwned = _out431;
                      _1168_recErased = _out432;
                      _1169_recIdents = _out433;
                      Dafny.ISequence<Dafny.Rune> _1170_uneraseFn;
                      _1170_uneraseFn = ((_1167_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1170_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1166_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1167_recOwned;
                      isErased = true;
                      readIdents = _1169_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out434;
                      bool _out435;
                      bool _out436;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out437;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_904_expr, _903_fromTpe, _1165_b), _1165_b, _902_toTpe), selfIdent, @params, mustOwn, out _out434, out _out435, out _out436, out _out437);
                      s = _out434;
                      isOwned = _out435;
                      isErased = _out436;
                      readIdents = _out437;
                    }
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1171___mcc_h470 = _source52.dtor_TypeArg_a0;
                  DAST._IType _1172_b = _1074___mcc_h409;
                  {
                    if (object.Equals(_1172_b, _902_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1173_recursiveGen;
                      bool _1174_recOwned;
                      bool _1175_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1176_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out438;
                      bool _out439;
                      bool _out440;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out441;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out438, out _out439, out _out440, out _out441);
                      _1173_recursiveGen = _out438;
                      _1174_recOwned = _out439;
                      _1175_recErased = _out440;
                      _1176_recIdents = _out441;
                      Dafny.ISequence<Dafny.Rune> _1177_uneraseFn;
                      _1177_uneraseFn = ((_1174_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1177_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1173_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1174_recOwned;
                      isErased = true;
                      readIdents = _1176_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out442;
                      bool _out443;
                      bool _out444;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out445;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_904_expr, _903_fromTpe, _1172_b), _1172_b, _902_toTpe), selfIdent, @params, mustOwn, out _out442, out _out443, out _out444, out _out445);
                      s = _out442;
                      isOwned = _out443;
                      isErased = _out444;
                      readIdents = _out445;
                    }
                  }
                }
              }
            } else if (_source46.is_Nullable) {
              DAST._IType _1178___mcc_h473 = _source46.dtor_Nullable_a0;
              DAST._IType _source54 = _910___mcc_h306;
              if (_source54.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1179___mcc_h477 = _source54.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1180___mcc_h478 = _source54.dtor_typeArgs;
                DAST._IResolvedType _1181___mcc_h479 = _source54.dtor_resolved;
                DAST._IResolvedType _source55 = _1181___mcc_h479;
                if (_source55.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1182___mcc_h486 = _source55.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1183_recursiveGen;
                    bool _1184_recOwned;
                    bool _1185_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1186_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out446;
                    bool _out447;
                    bool _out448;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out449;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out446, out _out447, out _out448, out _out449);
                    _1183_recursiveGen = _out446;
                    _1184_recOwned = _out447;
                    _1185_recErased = _out448;
                    _1186_recIdents = _out449;
                    if (!(_1184_recOwned)) {
                      _1183_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1183_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1183_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1184_recOwned;
                    isErased = _1185_recErased;
                    readIdents = _1186_recIdents;
                  }
                } else if (_source55.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1187___mcc_h489 = _source55.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1188_recursiveGen;
                    bool _1189_recOwned;
                    bool _1190_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1191_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out450;
                    bool _out451;
                    bool _out452;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out453;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out450, out _out451, out _out452, out _out453);
                    _1188_recursiveGen = _out450;
                    _1189_recOwned = _out451;
                    _1190_recErased = _out452;
                    _1191_recIdents = _out453;
                    if (!(_1189_recOwned)) {
                      _1188_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1188_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1188_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1189_recOwned;
                    isErased = _1190_recErased;
                    readIdents = _1191_recIdents;
                  }
                } else {
                  DAST._IType _1192___mcc_h492 = _source55.dtor_Newtype_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1193_recursiveGen;
                    bool _1194_recOwned;
                    bool _1195_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1196_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out454;
                    bool _out455;
                    bool _out456;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out457;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out454, out _out455, out _out456, out _out457);
                    _1193_recursiveGen = _out454;
                    _1194_recOwned = _out455;
                    _1195_recErased = _out456;
                    _1196_recIdents = _out457;
                    if (!(_1194_recOwned)) {
                      _1193_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1193_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1193_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1194_recOwned;
                    isErased = _1195_recErased;
                    readIdents = _1196_recIdents;
                  }
                }
              } else if (_source54.is_Nullable) {
                DAST._IType _1197___mcc_h495 = _source54.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1198_recursiveGen;
                  bool _1199_recOwned;
                  bool _1200_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1201_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out458;
                  bool _out459;
                  bool _out460;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out461;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out458, out _out459, out _out460, out _out461);
                  _1198_recursiveGen = _out458;
                  _1199_recOwned = _out459;
                  _1200_recErased = _out460;
                  _1201_recIdents = _out461;
                  if (!(_1199_recOwned)) {
                    _1198_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1198_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1198_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1199_recOwned;
                  isErased = _1200_recErased;
                  readIdents = _1201_recIdents;
                }
              } else if (_source54.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1202___mcc_h498 = _source54.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1203_recursiveGen;
                  bool _1204_recOwned;
                  bool _1205_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1206_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out462;
                  bool _out463;
                  bool _out464;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out465;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out462, out _out463, out _out464, out _out465);
                  _1203_recursiveGen = _out462;
                  _1204_recOwned = _out463;
                  _1205_recErased = _out464;
                  _1206_recIdents = _out465;
                  if (!(_1204_recOwned)) {
                    _1203_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1203_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1203_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1204_recOwned;
                  isErased = _1205_recErased;
                  readIdents = _1206_recIdents;
                }
              } else if (_source54.is_Array) {
                DAST._IType _1207___mcc_h501 = _source54.dtor_element;
                BigInteger _1208___mcc_h502 = _source54.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1209_recursiveGen;
                  bool _1210_recOwned;
                  bool _1211_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1212_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out466;
                  bool _out467;
                  bool _out468;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out469;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out466, out _out467, out _out468, out _out469);
                  _1209_recursiveGen = _out466;
                  _1210_recOwned = _out467;
                  _1211_recErased = _out468;
                  _1212_recIdents = _out469;
                  if (!(_1210_recOwned)) {
                    _1209_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1209_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1209_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1210_recOwned;
                  isErased = _1211_recErased;
                  readIdents = _1212_recIdents;
                }
              } else if (_source54.is_Seq) {
                DAST._IType _1213___mcc_h507 = _source54.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1214_recursiveGen;
                  bool _1215_recOwned;
                  bool _1216_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1217_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out470;
                  bool _out471;
                  bool _out472;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out473;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out470, out _out471, out _out472, out _out473);
                  _1214_recursiveGen = _out470;
                  _1215_recOwned = _out471;
                  _1216_recErased = _out472;
                  _1217_recIdents = _out473;
                  if (!(_1215_recOwned)) {
                    _1214_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1214_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1214_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1215_recOwned;
                  isErased = _1216_recErased;
                  readIdents = _1217_recIdents;
                }
              } else if (_source54.is_Set) {
                DAST._IType _1218___mcc_h510 = _source54.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1219_recursiveGen;
                  bool _1220_recOwned;
                  bool _1221_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1222_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out474;
                  bool _out475;
                  bool _out476;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out477;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out474, out _out475, out _out476, out _out477);
                  _1219_recursiveGen = _out474;
                  _1220_recOwned = _out475;
                  _1221_recErased = _out476;
                  _1222_recIdents = _out477;
                  if (!(_1220_recOwned)) {
                    _1219_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1219_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1219_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1220_recOwned;
                  isErased = _1221_recErased;
                  readIdents = _1222_recIdents;
                }
              } else if (_source54.is_Multiset) {
                DAST._IType _1223___mcc_h513 = _source54.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1224_recursiveGen;
                  bool _1225_recOwned;
                  bool _1226_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1227_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out478;
                  bool _out479;
                  bool _out480;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out481;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out478, out _out479, out _out480, out _out481);
                  _1224_recursiveGen = _out478;
                  _1225_recOwned = _out479;
                  _1226_recErased = _out480;
                  _1227_recIdents = _out481;
                  if (!(_1225_recOwned)) {
                    _1224_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1224_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1224_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1225_recOwned;
                  isErased = _1226_recErased;
                  readIdents = _1227_recIdents;
                }
              } else if (_source54.is_Map) {
                DAST._IType _1228___mcc_h516 = _source54.dtor_key;
                DAST._IType _1229___mcc_h517 = _source54.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1230_recursiveGen;
                  bool _1231_recOwned;
                  bool _1232_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1233_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out482;
                  bool _out483;
                  bool _out484;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out485;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out482, out _out483, out _out484, out _out485);
                  _1230_recursiveGen = _out482;
                  _1231_recOwned = _out483;
                  _1232_recErased = _out484;
                  _1233_recIdents = _out485;
                  if (!(_1231_recOwned)) {
                    _1230_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1230_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1230_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1231_recOwned;
                  isErased = _1232_recErased;
                  readIdents = _1233_recIdents;
                }
              } else if (_source54.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1234___mcc_h522 = _source54.dtor_args;
                DAST._IType _1235___mcc_h523 = _source54.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1236_recursiveGen;
                  bool _1237_recOwned;
                  bool _1238_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1239_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out486;
                  bool _out487;
                  bool _out488;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out489;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out486, out _out487, out _out488, out _out489);
                  _1236_recursiveGen = _out486;
                  _1237_recOwned = _out487;
                  _1238_recErased = _out488;
                  _1239_recIdents = _out489;
                  if (!(_1237_recOwned)) {
                    _1236_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1236_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1236_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1237_recOwned;
                  isErased = _1238_recErased;
                  readIdents = _1239_recIdents;
                }
              } else if (_source54.is_Primitive) {
                DAST._IPrimitive _1240___mcc_h528 = _source54.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1241_recursiveGen;
                  bool _1242_recOwned;
                  bool _1243_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1244_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out490;
                  bool _out491;
                  bool _out492;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out493;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out490, out _out491, out _out492, out _out493);
                  _1241_recursiveGen = _out490;
                  _1242_recOwned = _out491;
                  _1243_recErased = _out492;
                  _1244_recIdents = _out493;
                  if (!(_1242_recOwned)) {
                    _1241_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1241_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1241_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1242_recOwned;
                  isErased = _1243_recErased;
                  readIdents = _1244_recIdents;
                }
              } else if (_source54.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1245___mcc_h531 = _source54.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1246_recursiveGen;
                  bool _1247_recOwned;
                  bool _1248_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1249_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out494;
                  bool _out495;
                  bool _out496;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out497;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out494, out _out495, out _out496, out _out497);
                  _1246_recursiveGen = _out494;
                  _1247_recOwned = _out495;
                  _1248_recErased = _out496;
                  _1249_recIdents = _out497;
                  if (!(_1247_recOwned)) {
                    _1246_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1246_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1246_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1247_recOwned;
                  isErased = _1248_recErased;
                  readIdents = _1249_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1250___mcc_h534 = _source54.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1251_recursiveGen;
                  bool _1252_recOwned;
                  bool _1253_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1254_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out498;
                  bool _out499;
                  bool _out500;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out501;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out498, out _out499, out _out500, out _out501);
                  _1251_recursiveGen = _out498;
                  _1252_recOwned = _out499;
                  _1253_recErased = _out500;
                  _1254_recIdents = _out501;
                  if (!(_1252_recOwned)) {
                    _1251_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1251_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1251_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1252_recOwned;
                  isErased = _1253_recErased;
                  readIdents = _1254_recIdents;
                }
              }
            } else if (_source46.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1255___mcc_h537 = _source46.dtor_Tuple_a0;
              DAST._IType _source56 = _910___mcc_h306;
              if (_source56.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1256___mcc_h541 = _source56.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1257___mcc_h542 = _source56.dtor_typeArgs;
                DAST._IResolvedType _1258___mcc_h543 = _source56.dtor_resolved;
                DAST._IResolvedType _source57 = _1258___mcc_h543;
                if (_source57.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1259___mcc_h547 = _source57.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1260_recursiveGen;
                    bool _1261_recOwned;
                    bool _1262_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1263_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out502;
                    bool _out503;
                    bool _out504;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out505;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out502, out _out503, out _out504, out _out505);
                    _1260_recursiveGen = _out502;
                    _1261_recOwned = _out503;
                    _1262_recErased = _out504;
                    _1263_recIdents = _out505;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1260_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1261_recOwned;
                    isErased = _1262_recErased;
                    readIdents = _1263_recIdents;
                  }
                } else if (_source57.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1264___mcc_h549 = _source57.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1265_recursiveGen;
                    bool _1266_recOwned;
                    bool _1267_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1268_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out506;
                    bool _out507;
                    bool _out508;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out509;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out506, out _out507, out _out508, out _out509);
                    _1265_recursiveGen = _out506;
                    _1266_recOwned = _out507;
                    _1267_recErased = _out508;
                    _1268_recIdents = _out509;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1265_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1266_recOwned;
                    isErased = _1267_recErased;
                    readIdents = _1268_recIdents;
                  }
                } else {
                  DAST._IType _1269___mcc_h551 = _source57.dtor_Newtype_a0;
                  DAST._IType _1270_b = _1269___mcc_h551;
                  {
                    if (object.Equals(_903_fromTpe, _1270_b)) {
                      Dafny.ISequence<Dafny.Rune> _1271_recursiveGen;
                      bool _1272_recOwned;
                      bool _1273_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1274_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out510;
                      bool _out511;
                      bool _out512;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out513;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out510, out _out511, out _out512, out _out513);
                      _1271_recursiveGen = _out510;
                      _1272_recOwned = _out511;
                      _1273_recErased = _out512;
                      _1274_recIdents = _out513;
                      Dafny.ISequence<Dafny.Rune> _1275_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out514;
                      _out514 = DCOMP.COMP.GenType(_902_toTpe, true, false);
                      _1275_rhsType = _out514;
                      Dafny.ISequence<Dafny.Rune> _1276_uneraseFn;
                      _1276_uneraseFn = ((_1272_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1275_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1276_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1271_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1272_recOwned;
                      isErased = false;
                      readIdents = _1274_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out515;
                      bool _out516;
                      bool _out517;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out518;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_904_expr, _903_fromTpe, _1270_b), _1270_b, _902_toTpe), selfIdent, @params, mustOwn, out _out515, out _out516, out _out517, out _out518);
                      s = _out515;
                      isOwned = _out516;
                      isErased = _out517;
                      readIdents = _out518;
                    }
                  }
                }
              } else if (_source56.is_Nullable) {
                DAST._IType _1277___mcc_h553 = _source56.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1278_recursiveGen;
                  bool _1279_recOwned;
                  bool _1280_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1281_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out519;
                  bool _out520;
                  bool _out521;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out522;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out519, out _out520, out _out521, out _out522);
                  _1278_recursiveGen = _out519;
                  _1279_recOwned = _out520;
                  _1280_recErased = _out521;
                  _1281_recIdents = _out522;
                  if (!(_1279_recOwned)) {
                    _1278_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1278_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1278_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1280_recErased;
                  readIdents = _1281_recIdents;
                }
              } else if (_source56.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1282___mcc_h555 = _source56.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1283_recursiveGen;
                  bool _1284_recOwned;
                  bool _1285_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1286_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out523;
                  bool _out524;
                  bool _out525;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out526;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out523, out _out524, out _out525, out _out526);
                  _1283_recursiveGen = _out523;
                  _1284_recOwned = _out524;
                  _1285_recErased = _out525;
                  _1286_recIdents = _out526;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1283_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1284_recOwned;
                  isErased = _1285_recErased;
                  readIdents = _1286_recIdents;
                }
              } else if (_source56.is_Array) {
                DAST._IType _1287___mcc_h557 = _source56.dtor_element;
                BigInteger _1288___mcc_h558 = _source56.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1289_recursiveGen;
                  bool _1290_recOwned;
                  bool _1291_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1292_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out527;
                  bool _out528;
                  bool _out529;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out530;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out527, out _out528, out _out529, out _out530);
                  _1289_recursiveGen = _out527;
                  _1290_recOwned = _out528;
                  _1291_recErased = _out529;
                  _1292_recIdents = _out530;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1289_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1290_recOwned;
                  isErased = _1291_recErased;
                  readIdents = _1292_recIdents;
                }
              } else if (_source56.is_Seq) {
                DAST._IType _1293___mcc_h561 = _source56.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1294_recursiveGen;
                  bool _1295_recOwned;
                  bool _1296_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1297_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out531;
                  bool _out532;
                  bool _out533;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out534;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out531, out _out532, out _out533, out _out534);
                  _1294_recursiveGen = _out531;
                  _1295_recOwned = _out532;
                  _1296_recErased = _out533;
                  _1297_recIdents = _out534;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1294_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1295_recOwned;
                  isErased = _1296_recErased;
                  readIdents = _1297_recIdents;
                }
              } else if (_source56.is_Set) {
                DAST._IType _1298___mcc_h563 = _source56.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1299_recursiveGen;
                  bool _1300_recOwned;
                  bool _1301_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1302_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out535;
                  bool _out536;
                  bool _out537;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out538;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out535, out _out536, out _out537, out _out538);
                  _1299_recursiveGen = _out535;
                  _1300_recOwned = _out536;
                  _1301_recErased = _out537;
                  _1302_recIdents = _out538;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1299_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1300_recOwned;
                  isErased = _1301_recErased;
                  readIdents = _1302_recIdents;
                }
              } else if (_source56.is_Multiset) {
                DAST._IType _1303___mcc_h565 = _source56.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1304_recursiveGen;
                  bool _1305_recOwned;
                  bool _1306_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1307_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out539;
                  bool _out540;
                  bool _out541;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out542;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out539, out _out540, out _out541, out _out542);
                  _1304_recursiveGen = _out539;
                  _1305_recOwned = _out540;
                  _1306_recErased = _out541;
                  _1307_recIdents = _out542;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1304_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1305_recOwned;
                  isErased = _1306_recErased;
                  readIdents = _1307_recIdents;
                }
              } else if (_source56.is_Map) {
                DAST._IType _1308___mcc_h567 = _source56.dtor_key;
                DAST._IType _1309___mcc_h568 = _source56.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1310_recursiveGen;
                  bool _1311_recOwned;
                  bool _1312_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1313_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out543;
                  bool _out544;
                  bool _out545;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out546;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out543, out _out544, out _out545, out _out546);
                  _1310_recursiveGen = _out543;
                  _1311_recOwned = _out544;
                  _1312_recErased = _out545;
                  _1313_recIdents = _out546;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1310_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1311_recOwned;
                  isErased = _1312_recErased;
                  readIdents = _1313_recIdents;
                }
              } else if (_source56.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1314___mcc_h571 = _source56.dtor_args;
                DAST._IType _1315___mcc_h572 = _source56.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1316_recursiveGen;
                  bool _1317_recOwned;
                  bool _1318_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1319_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out547;
                  bool _out548;
                  bool _out549;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out550;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out547, out _out548, out _out549, out _out550);
                  _1316_recursiveGen = _out547;
                  _1317_recOwned = _out548;
                  _1318_recErased = _out549;
                  _1319_recIdents = _out550;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1316_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1317_recOwned;
                  isErased = _1318_recErased;
                  readIdents = _1319_recIdents;
                }
              } else if (_source56.is_Primitive) {
                DAST._IPrimitive _1320___mcc_h575 = _source56.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1321_recursiveGen;
                  bool _1322_recOwned;
                  bool _1323_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1324_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out551;
                  bool _out552;
                  bool _out553;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out554;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out551, out _out552, out _out553, out _out554);
                  _1321_recursiveGen = _out551;
                  _1322_recOwned = _out552;
                  _1323_recErased = _out553;
                  _1324_recIdents = _out554;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1321_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1322_recOwned;
                  isErased = _1323_recErased;
                  readIdents = _1324_recIdents;
                }
              } else if (_source56.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1325___mcc_h577 = _source56.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1326_recursiveGen;
                  bool _1327_recOwned;
                  bool _1328_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1329_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out555;
                  bool _out556;
                  bool _out557;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out558;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out555, out _out556, out _out557, out _out558);
                  _1326_recursiveGen = _out555;
                  _1327_recOwned = _out556;
                  _1328_recErased = _out557;
                  _1329_recIdents = _out558;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1326_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1327_recOwned;
                  isErased = _1328_recErased;
                  readIdents = _1329_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1330___mcc_h579 = _source56.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1331_recursiveGen;
                  bool _1332_recOwned;
                  bool _1333_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1334_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out559;
                  bool _out560;
                  bool _out561;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out562;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out559, out _out560, out _out561, out _out562);
                  _1331_recursiveGen = _out559;
                  _1332_recOwned = _out560;
                  _1333_recErased = _out561;
                  _1334_recIdents = _out562;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1331_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1332_recOwned;
                  isErased = _1333_recErased;
                  readIdents = _1334_recIdents;
                }
              }
            } else if (_source46.is_Array) {
              DAST._IType _1335___mcc_h581 = _source46.dtor_element;
              BigInteger _1336___mcc_h582 = _source46.dtor_dims;
              DAST._IType _source58 = _910___mcc_h306;
              if (_source58.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1337___mcc_h589 = _source58.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1338___mcc_h590 = _source58.dtor_typeArgs;
                DAST._IResolvedType _1339___mcc_h591 = _source58.dtor_resolved;
                DAST._IResolvedType _source59 = _1339___mcc_h591;
                if (_source59.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1340___mcc_h595 = _source59.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1341_recursiveGen;
                    bool _1342_recOwned;
                    bool _1343_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1344_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out563;
                    bool _out564;
                    bool _out565;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out566;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out563, out _out564, out _out565, out _out566);
                    _1341_recursiveGen = _out563;
                    _1342_recOwned = _out564;
                    _1343_recErased = _out565;
                    _1344_recIdents = _out566;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1341_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1342_recOwned;
                    isErased = _1343_recErased;
                    readIdents = _1344_recIdents;
                  }
                } else if (_source59.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1345___mcc_h597 = _source59.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1346_recursiveGen;
                    bool _1347_recOwned;
                    bool _1348_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1349_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out567;
                    bool _out568;
                    bool _out569;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out570;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out567, out _out568, out _out569, out _out570);
                    _1346_recursiveGen = _out567;
                    _1347_recOwned = _out568;
                    _1348_recErased = _out569;
                    _1349_recIdents = _out570;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1346_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1347_recOwned;
                    isErased = _1348_recErased;
                    readIdents = _1349_recIdents;
                  }
                } else {
                  DAST._IType _1350___mcc_h599 = _source59.dtor_Newtype_a0;
                  DAST._IType _1351_b = _1350___mcc_h599;
                  {
                    if (object.Equals(_903_fromTpe, _1351_b)) {
                      Dafny.ISequence<Dafny.Rune> _1352_recursiveGen;
                      bool _1353_recOwned;
                      bool _1354_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1355_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out571;
                      bool _out572;
                      bool _out573;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out574;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out571, out _out572, out _out573, out _out574);
                      _1352_recursiveGen = _out571;
                      _1353_recOwned = _out572;
                      _1354_recErased = _out573;
                      _1355_recIdents = _out574;
                      Dafny.ISequence<Dafny.Rune> _1356_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out575;
                      _out575 = DCOMP.COMP.GenType(_902_toTpe, true, false);
                      _1356_rhsType = _out575;
                      Dafny.ISequence<Dafny.Rune> _1357_uneraseFn;
                      _1357_uneraseFn = ((_1353_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1356_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1357_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1352_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1353_recOwned;
                      isErased = false;
                      readIdents = _1355_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out576;
                      bool _out577;
                      bool _out578;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out579;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_904_expr, _903_fromTpe, _1351_b), _1351_b, _902_toTpe), selfIdent, @params, mustOwn, out _out576, out _out577, out _out578, out _out579);
                      s = _out576;
                      isOwned = _out577;
                      isErased = _out578;
                      readIdents = _out579;
                    }
                  }
                }
              } else if (_source58.is_Nullable) {
                DAST._IType _1358___mcc_h601 = _source58.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1359_recursiveGen;
                  bool _1360_recOwned;
                  bool _1361_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1362_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out580;
                  bool _out581;
                  bool _out582;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out583;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out580, out _out581, out _out582, out _out583);
                  _1359_recursiveGen = _out580;
                  _1360_recOwned = _out581;
                  _1361_recErased = _out582;
                  _1362_recIdents = _out583;
                  if (!(_1360_recOwned)) {
                    _1359_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1359_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1359_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1361_recErased;
                  readIdents = _1362_recIdents;
                }
              } else if (_source58.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1363___mcc_h603 = _source58.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1364_recursiveGen;
                  bool _1365_recOwned;
                  bool _1366_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1367_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out584;
                  bool _out585;
                  bool _out586;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out587;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out584, out _out585, out _out586, out _out587);
                  _1364_recursiveGen = _out584;
                  _1365_recOwned = _out585;
                  _1366_recErased = _out586;
                  _1367_recIdents = _out587;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1364_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1365_recOwned;
                  isErased = _1366_recErased;
                  readIdents = _1367_recIdents;
                }
              } else if (_source58.is_Array) {
                DAST._IType _1368___mcc_h605 = _source58.dtor_element;
                BigInteger _1369___mcc_h606 = _source58.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1370_recursiveGen;
                  bool _1371_recOwned;
                  bool _1372_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1373_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out588;
                  bool _out589;
                  bool _out590;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out591;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out588, out _out589, out _out590, out _out591);
                  _1370_recursiveGen = _out588;
                  _1371_recOwned = _out589;
                  _1372_recErased = _out590;
                  _1373_recIdents = _out591;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1370_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1371_recOwned;
                  isErased = _1372_recErased;
                  readIdents = _1373_recIdents;
                }
              } else if (_source58.is_Seq) {
                DAST._IType _1374___mcc_h609 = _source58.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1375_recursiveGen;
                  bool _1376_recOwned;
                  bool _1377_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1378_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out592;
                  bool _out593;
                  bool _out594;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out595;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out592, out _out593, out _out594, out _out595);
                  _1375_recursiveGen = _out592;
                  _1376_recOwned = _out593;
                  _1377_recErased = _out594;
                  _1378_recIdents = _out595;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1375_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1376_recOwned;
                  isErased = _1377_recErased;
                  readIdents = _1378_recIdents;
                }
              } else if (_source58.is_Set) {
                DAST._IType _1379___mcc_h611 = _source58.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1380_recursiveGen;
                  bool _1381_recOwned;
                  bool _1382_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1383_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out596;
                  bool _out597;
                  bool _out598;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out599;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out596, out _out597, out _out598, out _out599);
                  _1380_recursiveGen = _out596;
                  _1381_recOwned = _out597;
                  _1382_recErased = _out598;
                  _1383_recIdents = _out599;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1380_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1381_recOwned;
                  isErased = _1382_recErased;
                  readIdents = _1383_recIdents;
                }
              } else if (_source58.is_Multiset) {
                DAST._IType _1384___mcc_h613 = _source58.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1385_recursiveGen;
                  bool _1386_recOwned;
                  bool _1387_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1388_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out600;
                  bool _out601;
                  bool _out602;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out603;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out600, out _out601, out _out602, out _out603);
                  _1385_recursiveGen = _out600;
                  _1386_recOwned = _out601;
                  _1387_recErased = _out602;
                  _1388_recIdents = _out603;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1385_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1386_recOwned;
                  isErased = _1387_recErased;
                  readIdents = _1388_recIdents;
                }
              } else if (_source58.is_Map) {
                DAST._IType _1389___mcc_h615 = _source58.dtor_key;
                DAST._IType _1390___mcc_h616 = _source58.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1391_recursiveGen;
                  bool _1392_recOwned;
                  bool _1393_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1394_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out604;
                  bool _out605;
                  bool _out606;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out607;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out604, out _out605, out _out606, out _out607);
                  _1391_recursiveGen = _out604;
                  _1392_recOwned = _out605;
                  _1393_recErased = _out606;
                  _1394_recIdents = _out607;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1391_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1392_recOwned;
                  isErased = _1393_recErased;
                  readIdents = _1394_recIdents;
                }
              } else if (_source58.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1395___mcc_h619 = _source58.dtor_args;
                DAST._IType _1396___mcc_h620 = _source58.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1397_recursiveGen;
                  bool _1398_recOwned;
                  bool _1399_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1400_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out608;
                  bool _out609;
                  bool _out610;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out611;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out608, out _out609, out _out610, out _out611);
                  _1397_recursiveGen = _out608;
                  _1398_recOwned = _out609;
                  _1399_recErased = _out610;
                  _1400_recIdents = _out611;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1397_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1398_recOwned;
                  isErased = _1399_recErased;
                  readIdents = _1400_recIdents;
                }
              } else if (_source58.is_Primitive) {
                DAST._IPrimitive _1401___mcc_h623 = _source58.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1402_recursiveGen;
                  bool _1403_recOwned;
                  bool _1404_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1405_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out612;
                  bool _out613;
                  bool _out614;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out615;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out612, out _out613, out _out614, out _out615);
                  _1402_recursiveGen = _out612;
                  _1403_recOwned = _out613;
                  _1404_recErased = _out614;
                  _1405_recIdents = _out615;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1402_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1403_recOwned;
                  isErased = _1404_recErased;
                  readIdents = _1405_recIdents;
                }
              } else if (_source58.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1406___mcc_h625 = _source58.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1407_recursiveGen;
                  bool _1408_recOwned;
                  bool _1409_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1410_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out616;
                  bool _out617;
                  bool _out618;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out619;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out616, out _out617, out _out618, out _out619);
                  _1407_recursiveGen = _out616;
                  _1408_recOwned = _out617;
                  _1409_recErased = _out618;
                  _1410_recIdents = _out619;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1407_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1408_recOwned;
                  isErased = _1409_recErased;
                  readIdents = _1410_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1411___mcc_h627 = _source58.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1412_recursiveGen;
                  bool _1413_recOwned;
                  bool _1414_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1415_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out620;
                  bool _out621;
                  bool _out622;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out623;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out620, out _out621, out _out622, out _out623);
                  _1412_recursiveGen = _out620;
                  _1413_recOwned = _out621;
                  _1414_recErased = _out622;
                  _1415_recIdents = _out623;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1412_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1413_recOwned;
                  isErased = _1414_recErased;
                  readIdents = _1415_recIdents;
                }
              }
            } else if (_source46.is_Seq) {
              DAST._IType _1416___mcc_h629 = _source46.dtor_element;
              DAST._IType _source60 = _910___mcc_h306;
              if (_source60.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1417___mcc_h633 = _source60.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1418___mcc_h634 = _source60.dtor_typeArgs;
                DAST._IResolvedType _1419___mcc_h635 = _source60.dtor_resolved;
                DAST._IResolvedType _source61 = _1419___mcc_h635;
                if (_source61.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1420___mcc_h639 = _source61.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1421_recursiveGen;
                    bool _1422_recOwned;
                    bool _1423_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1424_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out624;
                    bool _out625;
                    bool _out626;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out627;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out624, out _out625, out _out626, out _out627);
                    _1421_recursiveGen = _out624;
                    _1422_recOwned = _out625;
                    _1423_recErased = _out626;
                    _1424_recIdents = _out627;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1421_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1422_recOwned;
                    isErased = _1423_recErased;
                    readIdents = _1424_recIdents;
                  }
                } else if (_source61.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1425___mcc_h641 = _source61.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1426_recursiveGen;
                    bool _1427_recOwned;
                    bool _1428_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1429_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out628;
                    bool _out629;
                    bool _out630;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out631;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out628, out _out629, out _out630, out _out631);
                    _1426_recursiveGen = _out628;
                    _1427_recOwned = _out629;
                    _1428_recErased = _out630;
                    _1429_recIdents = _out631;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1426_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1427_recOwned;
                    isErased = _1428_recErased;
                    readIdents = _1429_recIdents;
                  }
                } else {
                  DAST._IType _1430___mcc_h643 = _source61.dtor_Newtype_a0;
                  DAST._IType _1431_b = _1430___mcc_h643;
                  {
                    if (object.Equals(_903_fromTpe, _1431_b)) {
                      Dafny.ISequence<Dafny.Rune> _1432_recursiveGen;
                      bool _1433_recOwned;
                      bool _1434_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1435_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out632;
                      bool _out633;
                      bool _out634;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out635;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out632, out _out633, out _out634, out _out635);
                      _1432_recursiveGen = _out632;
                      _1433_recOwned = _out633;
                      _1434_recErased = _out634;
                      _1435_recIdents = _out635;
                      Dafny.ISequence<Dafny.Rune> _1436_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out636;
                      _out636 = DCOMP.COMP.GenType(_902_toTpe, true, false);
                      _1436_rhsType = _out636;
                      Dafny.ISequence<Dafny.Rune> _1437_uneraseFn;
                      _1437_uneraseFn = ((_1433_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1436_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1437_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1432_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1433_recOwned;
                      isErased = false;
                      readIdents = _1435_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out637;
                      bool _out638;
                      bool _out639;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out640;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_904_expr, _903_fromTpe, _1431_b), _1431_b, _902_toTpe), selfIdent, @params, mustOwn, out _out637, out _out638, out _out639, out _out640);
                      s = _out637;
                      isOwned = _out638;
                      isErased = _out639;
                      readIdents = _out640;
                    }
                  }
                }
              } else if (_source60.is_Nullable) {
                DAST._IType _1438___mcc_h645 = _source60.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1439_recursiveGen;
                  bool _1440_recOwned;
                  bool _1441_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1442_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out641;
                  bool _out642;
                  bool _out643;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out644;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out641, out _out642, out _out643, out _out644);
                  _1439_recursiveGen = _out641;
                  _1440_recOwned = _out642;
                  _1441_recErased = _out643;
                  _1442_recIdents = _out644;
                  if (!(_1440_recOwned)) {
                    _1439_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1439_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1439_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1441_recErased;
                  readIdents = _1442_recIdents;
                }
              } else if (_source60.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1443___mcc_h647 = _source60.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1444_recursiveGen;
                  bool _1445_recOwned;
                  bool _1446_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1447_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out645;
                  bool _out646;
                  bool _out647;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out648;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out645, out _out646, out _out647, out _out648);
                  _1444_recursiveGen = _out645;
                  _1445_recOwned = _out646;
                  _1446_recErased = _out647;
                  _1447_recIdents = _out648;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1444_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1445_recOwned;
                  isErased = _1446_recErased;
                  readIdents = _1447_recIdents;
                }
              } else if (_source60.is_Array) {
                DAST._IType _1448___mcc_h649 = _source60.dtor_element;
                BigInteger _1449___mcc_h650 = _source60.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1450_recursiveGen;
                  bool _1451_recOwned;
                  bool _1452_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1453_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out649;
                  bool _out650;
                  bool _out651;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out652;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out649, out _out650, out _out651, out _out652);
                  _1450_recursiveGen = _out649;
                  _1451_recOwned = _out650;
                  _1452_recErased = _out651;
                  _1453_recIdents = _out652;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1450_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1451_recOwned;
                  isErased = _1452_recErased;
                  readIdents = _1453_recIdents;
                }
              } else if (_source60.is_Seq) {
                DAST._IType _1454___mcc_h653 = _source60.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1455_recursiveGen;
                  bool _1456_recOwned;
                  bool _1457_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1458_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out653;
                  bool _out654;
                  bool _out655;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out656;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out653, out _out654, out _out655, out _out656);
                  _1455_recursiveGen = _out653;
                  _1456_recOwned = _out654;
                  _1457_recErased = _out655;
                  _1458_recIdents = _out656;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1455_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1456_recOwned;
                  isErased = _1457_recErased;
                  readIdents = _1458_recIdents;
                }
              } else if (_source60.is_Set) {
                DAST._IType _1459___mcc_h655 = _source60.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1460_recursiveGen;
                  bool _1461_recOwned;
                  bool _1462_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1463_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out657;
                  bool _out658;
                  bool _out659;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out660;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out657, out _out658, out _out659, out _out660);
                  _1460_recursiveGen = _out657;
                  _1461_recOwned = _out658;
                  _1462_recErased = _out659;
                  _1463_recIdents = _out660;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1460_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1461_recOwned;
                  isErased = _1462_recErased;
                  readIdents = _1463_recIdents;
                }
              } else if (_source60.is_Multiset) {
                DAST._IType _1464___mcc_h657 = _source60.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1465_recursiveGen;
                  bool _1466_recOwned;
                  bool _1467_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1468_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out661;
                  bool _out662;
                  bool _out663;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out664;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out661, out _out662, out _out663, out _out664);
                  _1465_recursiveGen = _out661;
                  _1466_recOwned = _out662;
                  _1467_recErased = _out663;
                  _1468_recIdents = _out664;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1465_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1466_recOwned;
                  isErased = _1467_recErased;
                  readIdents = _1468_recIdents;
                }
              } else if (_source60.is_Map) {
                DAST._IType _1469___mcc_h659 = _source60.dtor_key;
                DAST._IType _1470___mcc_h660 = _source60.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1471_recursiveGen;
                  bool _1472_recOwned;
                  bool _1473_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1474_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out665;
                  bool _out666;
                  bool _out667;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out668;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out665, out _out666, out _out667, out _out668);
                  _1471_recursiveGen = _out665;
                  _1472_recOwned = _out666;
                  _1473_recErased = _out667;
                  _1474_recIdents = _out668;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1471_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1472_recOwned;
                  isErased = _1473_recErased;
                  readIdents = _1474_recIdents;
                }
              } else if (_source60.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1475___mcc_h663 = _source60.dtor_args;
                DAST._IType _1476___mcc_h664 = _source60.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1477_recursiveGen;
                  bool _1478_recOwned;
                  bool _1479_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1480_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out669;
                  bool _out670;
                  bool _out671;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out672;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out669, out _out670, out _out671, out _out672);
                  _1477_recursiveGen = _out669;
                  _1478_recOwned = _out670;
                  _1479_recErased = _out671;
                  _1480_recIdents = _out672;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1477_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1478_recOwned;
                  isErased = _1479_recErased;
                  readIdents = _1480_recIdents;
                }
              } else if (_source60.is_Primitive) {
                DAST._IPrimitive _1481___mcc_h667 = _source60.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1482_recursiveGen;
                  bool _1483_recOwned;
                  bool _1484_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1485_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out673;
                  bool _out674;
                  bool _out675;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out676;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out673, out _out674, out _out675, out _out676);
                  _1482_recursiveGen = _out673;
                  _1483_recOwned = _out674;
                  _1484_recErased = _out675;
                  _1485_recIdents = _out676;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1482_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1483_recOwned;
                  isErased = _1484_recErased;
                  readIdents = _1485_recIdents;
                }
              } else if (_source60.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1486___mcc_h669 = _source60.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1487_recursiveGen;
                  bool _1488_recOwned;
                  bool _1489_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1490_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out677;
                  bool _out678;
                  bool _out679;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out680;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out677, out _out678, out _out679, out _out680);
                  _1487_recursiveGen = _out677;
                  _1488_recOwned = _out678;
                  _1489_recErased = _out679;
                  _1490_recIdents = _out680;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1487_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1488_recOwned;
                  isErased = _1489_recErased;
                  readIdents = _1490_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1491___mcc_h671 = _source60.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1492_recursiveGen;
                  bool _1493_recOwned;
                  bool _1494_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1495_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out681;
                  bool _out682;
                  bool _out683;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out684;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out681, out _out682, out _out683, out _out684);
                  _1492_recursiveGen = _out681;
                  _1493_recOwned = _out682;
                  _1494_recErased = _out683;
                  _1495_recIdents = _out684;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1492_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1493_recOwned;
                  isErased = _1494_recErased;
                  readIdents = _1495_recIdents;
                }
              }
            } else if (_source46.is_Set) {
              DAST._IType _1496___mcc_h673 = _source46.dtor_element;
              DAST._IType _source62 = _910___mcc_h306;
              if (_source62.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1497___mcc_h677 = _source62.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1498___mcc_h678 = _source62.dtor_typeArgs;
                DAST._IResolvedType _1499___mcc_h679 = _source62.dtor_resolved;
                DAST._IResolvedType _source63 = _1499___mcc_h679;
                if (_source63.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1500___mcc_h683 = _source63.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1501_recursiveGen;
                    bool _1502_recOwned;
                    bool _1503_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1504_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out685;
                    bool _out686;
                    bool _out687;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out688;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out685, out _out686, out _out687, out _out688);
                    _1501_recursiveGen = _out685;
                    _1502_recOwned = _out686;
                    _1503_recErased = _out687;
                    _1504_recIdents = _out688;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1501_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1502_recOwned;
                    isErased = _1503_recErased;
                    readIdents = _1504_recIdents;
                  }
                } else if (_source63.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1505___mcc_h685 = _source63.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1506_recursiveGen;
                    bool _1507_recOwned;
                    bool _1508_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1509_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out689;
                    bool _out690;
                    bool _out691;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out692;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out689, out _out690, out _out691, out _out692);
                    _1506_recursiveGen = _out689;
                    _1507_recOwned = _out690;
                    _1508_recErased = _out691;
                    _1509_recIdents = _out692;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1506_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1507_recOwned;
                    isErased = _1508_recErased;
                    readIdents = _1509_recIdents;
                  }
                } else {
                  DAST._IType _1510___mcc_h687 = _source63.dtor_Newtype_a0;
                  DAST._IType _1511_b = _1510___mcc_h687;
                  {
                    if (object.Equals(_903_fromTpe, _1511_b)) {
                      Dafny.ISequence<Dafny.Rune> _1512_recursiveGen;
                      bool _1513_recOwned;
                      bool _1514_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1515_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out693;
                      bool _out694;
                      bool _out695;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out696;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out693, out _out694, out _out695, out _out696);
                      _1512_recursiveGen = _out693;
                      _1513_recOwned = _out694;
                      _1514_recErased = _out695;
                      _1515_recIdents = _out696;
                      Dafny.ISequence<Dafny.Rune> _1516_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out697;
                      _out697 = DCOMP.COMP.GenType(_902_toTpe, true, false);
                      _1516_rhsType = _out697;
                      Dafny.ISequence<Dafny.Rune> _1517_uneraseFn;
                      _1517_uneraseFn = ((_1513_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1516_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1517_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1512_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1513_recOwned;
                      isErased = false;
                      readIdents = _1515_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out698;
                      bool _out699;
                      bool _out700;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out701;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_904_expr, _903_fromTpe, _1511_b), _1511_b, _902_toTpe), selfIdent, @params, mustOwn, out _out698, out _out699, out _out700, out _out701);
                      s = _out698;
                      isOwned = _out699;
                      isErased = _out700;
                      readIdents = _out701;
                    }
                  }
                }
              } else if (_source62.is_Nullable) {
                DAST._IType _1518___mcc_h689 = _source62.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1519_recursiveGen;
                  bool _1520_recOwned;
                  bool _1521_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1522_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out702;
                  bool _out703;
                  bool _out704;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out705;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out702, out _out703, out _out704, out _out705);
                  _1519_recursiveGen = _out702;
                  _1520_recOwned = _out703;
                  _1521_recErased = _out704;
                  _1522_recIdents = _out705;
                  if (!(_1520_recOwned)) {
                    _1519_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1519_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1519_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1521_recErased;
                  readIdents = _1522_recIdents;
                }
              } else if (_source62.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1523___mcc_h691 = _source62.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1524_recursiveGen;
                  bool _1525_recOwned;
                  bool _1526_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1527_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out706;
                  bool _out707;
                  bool _out708;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out709;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out706, out _out707, out _out708, out _out709);
                  _1524_recursiveGen = _out706;
                  _1525_recOwned = _out707;
                  _1526_recErased = _out708;
                  _1527_recIdents = _out709;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1524_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1525_recOwned;
                  isErased = _1526_recErased;
                  readIdents = _1527_recIdents;
                }
              } else if (_source62.is_Array) {
                DAST._IType _1528___mcc_h693 = _source62.dtor_element;
                BigInteger _1529___mcc_h694 = _source62.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1530_recursiveGen;
                  bool _1531_recOwned;
                  bool _1532_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1533_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out710;
                  bool _out711;
                  bool _out712;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out713;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out710, out _out711, out _out712, out _out713);
                  _1530_recursiveGen = _out710;
                  _1531_recOwned = _out711;
                  _1532_recErased = _out712;
                  _1533_recIdents = _out713;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1530_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1531_recOwned;
                  isErased = _1532_recErased;
                  readIdents = _1533_recIdents;
                }
              } else if (_source62.is_Seq) {
                DAST._IType _1534___mcc_h697 = _source62.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1535_recursiveGen;
                  bool _1536_recOwned;
                  bool _1537_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1538_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out714;
                  bool _out715;
                  bool _out716;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out717;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out714, out _out715, out _out716, out _out717);
                  _1535_recursiveGen = _out714;
                  _1536_recOwned = _out715;
                  _1537_recErased = _out716;
                  _1538_recIdents = _out717;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1535_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1536_recOwned;
                  isErased = _1537_recErased;
                  readIdents = _1538_recIdents;
                }
              } else if (_source62.is_Set) {
                DAST._IType _1539___mcc_h699 = _source62.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1540_recursiveGen;
                  bool _1541_recOwned;
                  bool _1542_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1543_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out718;
                  bool _out719;
                  bool _out720;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out721;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out718, out _out719, out _out720, out _out721);
                  _1540_recursiveGen = _out718;
                  _1541_recOwned = _out719;
                  _1542_recErased = _out720;
                  _1543_recIdents = _out721;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1540_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1541_recOwned;
                  isErased = _1542_recErased;
                  readIdents = _1543_recIdents;
                }
              } else if (_source62.is_Multiset) {
                DAST._IType _1544___mcc_h701 = _source62.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1545_recursiveGen;
                  bool _1546_recOwned;
                  bool _1547_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1548_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out722;
                  bool _out723;
                  bool _out724;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out725;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out722, out _out723, out _out724, out _out725);
                  _1545_recursiveGen = _out722;
                  _1546_recOwned = _out723;
                  _1547_recErased = _out724;
                  _1548_recIdents = _out725;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1545_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1546_recOwned;
                  isErased = _1547_recErased;
                  readIdents = _1548_recIdents;
                }
              } else if (_source62.is_Map) {
                DAST._IType _1549___mcc_h703 = _source62.dtor_key;
                DAST._IType _1550___mcc_h704 = _source62.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1551_recursiveGen;
                  bool _1552_recOwned;
                  bool _1553_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1554_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out726;
                  bool _out727;
                  bool _out728;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out729;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out726, out _out727, out _out728, out _out729);
                  _1551_recursiveGen = _out726;
                  _1552_recOwned = _out727;
                  _1553_recErased = _out728;
                  _1554_recIdents = _out729;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1551_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1552_recOwned;
                  isErased = _1553_recErased;
                  readIdents = _1554_recIdents;
                }
              } else if (_source62.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1555___mcc_h707 = _source62.dtor_args;
                DAST._IType _1556___mcc_h708 = _source62.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1557_recursiveGen;
                  bool _1558_recOwned;
                  bool _1559_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1560_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out730;
                  bool _out731;
                  bool _out732;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out733;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out730, out _out731, out _out732, out _out733);
                  _1557_recursiveGen = _out730;
                  _1558_recOwned = _out731;
                  _1559_recErased = _out732;
                  _1560_recIdents = _out733;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1557_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1558_recOwned;
                  isErased = _1559_recErased;
                  readIdents = _1560_recIdents;
                }
              } else if (_source62.is_Primitive) {
                DAST._IPrimitive _1561___mcc_h711 = _source62.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1562_recursiveGen;
                  bool _1563_recOwned;
                  bool _1564_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1565_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out734;
                  bool _out735;
                  bool _out736;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out737;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out734, out _out735, out _out736, out _out737);
                  _1562_recursiveGen = _out734;
                  _1563_recOwned = _out735;
                  _1564_recErased = _out736;
                  _1565_recIdents = _out737;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1562_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1563_recOwned;
                  isErased = _1564_recErased;
                  readIdents = _1565_recIdents;
                }
              } else if (_source62.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1566___mcc_h713 = _source62.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1567_recursiveGen;
                  bool _1568_recOwned;
                  bool _1569_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1570_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out738;
                  bool _out739;
                  bool _out740;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out741;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out738, out _out739, out _out740, out _out741);
                  _1567_recursiveGen = _out738;
                  _1568_recOwned = _out739;
                  _1569_recErased = _out740;
                  _1570_recIdents = _out741;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1567_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1568_recOwned;
                  isErased = _1569_recErased;
                  readIdents = _1570_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1571___mcc_h715 = _source62.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1572_recursiveGen;
                  bool _1573_recOwned;
                  bool _1574_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1575_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out742;
                  bool _out743;
                  bool _out744;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out745;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out742, out _out743, out _out744, out _out745);
                  _1572_recursiveGen = _out742;
                  _1573_recOwned = _out743;
                  _1574_recErased = _out744;
                  _1575_recIdents = _out745;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1572_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1573_recOwned;
                  isErased = _1574_recErased;
                  readIdents = _1575_recIdents;
                }
              }
            } else if (_source46.is_Multiset) {
              DAST._IType _1576___mcc_h717 = _source46.dtor_element;
              DAST._IType _source64 = _910___mcc_h306;
              if (_source64.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1577___mcc_h721 = _source64.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1578___mcc_h722 = _source64.dtor_typeArgs;
                DAST._IResolvedType _1579___mcc_h723 = _source64.dtor_resolved;
                DAST._IResolvedType _source65 = _1579___mcc_h723;
                if (_source65.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1580___mcc_h727 = _source65.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1581_recursiveGen;
                    bool _1582_recOwned;
                    bool _1583_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1584_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out746;
                    bool _out747;
                    bool _out748;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out749;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out746, out _out747, out _out748, out _out749);
                    _1581_recursiveGen = _out746;
                    _1582_recOwned = _out747;
                    _1583_recErased = _out748;
                    _1584_recIdents = _out749;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1581_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1582_recOwned;
                    isErased = _1583_recErased;
                    readIdents = _1584_recIdents;
                  }
                } else if (_source65.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1585___mcc_h729 = _source65.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1586_recursiveGen;
                    bool _1587_recOwned;
                    bool _1588_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1589_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out750;
                    bool _out751;
                    bool _out752;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out753;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out750, out _out751, out _out752, out _out753);
                    _1586_recursiveGen = _out750;
                    _1587_recOwned = _out751;
                    _1588_recErased = _out752;
                    _1589_recIdents = _out753;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1586_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1587_recOwned;
                    isErased = _1588_recErased;
                    readIdents = _1589_recIdents;
                  }
                } else {
                  DAST._IType _1590___mcc_h731 = _source65.dtor_Newtype_a0;
                  DAST._IType _1591_b = _1590___mcc_h731;
                  {
                    if (object.Equals(_903_fromTpe, _1591_b)) {
                      Dafny.ISequence<Dafny.Rune> _1592_recursiveGen;
                      bool _1593_recOwned;
                      bool _1594_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1595_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out754;
                      bool _out755;
                      bool _out756;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out757;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out754, out _out755, out _out756, out _out757);
                      _1592_recursiveGen = _out754;
                      _1593_recOwned = _out755;
                      _1594_recErased = _out756;
                      _1595_recIdents = _out757;
                      Dafny.ISequence<Dafny.Rune> _1596_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out758;
                      _out758 = DCOMP.COMP.GenType(_902_toTpe, true, false);
                      _1596_rhsType = _out758;
                      Dafny.ISequence<Dafny.Rune> _1597_uneraseFn;
                      _1597_uneraseFn = ((_1593_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1596_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1597_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1592_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1593_recOwned;
                      isErased = false;
                      readIdents = _1595_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out759;
                      bool _out760;
                      bool _out761;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out762;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_904_expr, _903_fromTpe, _1591_b), _1591_b, _902_toTpe), selfIdent, @params, mustOwn, out _out759, out _out760, out _out761, out _out762);
                      s = _out759;
                      isOwned = _out760;
                      isErased = _out761;
                      readIdents = _out762;
                    }
                  }
                }
              } else if (_source64.is_Nullable) {
                DAST._IType _1598___mcc_h733 = _source64.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1599_recursiveGen;
                  bool _1600_recOwned;
                  bool _1601_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1602_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out763;
                  bool _out764;
                  bool _out765;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out766;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out763, out _out764, out _out765, out _out766);
                  _1599_recursiveGen = _out763;
                  _1600_recOwned = _out764;
                  _1601_recErased = _out765;
                  _1602_recIdents = _out766;
                  if (!(_1600_recOwned)) {
                    _1599_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1599_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1599_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1601_recErased;
                  readIdents = _1602_recIdents;
                }
              } else if (_source64.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1603___mcc_h735 = _source64.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1604_recursiveGen;
                  bool _1605_recOwned;
                  bool _1606_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1607_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out767;
                  bool _out768;
                  bool _out769;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out770;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out767, out _out768, out _out769, out _out770);
                  _1604_recursiveGen = _out767;
                  _1605_recOwned = _out768;
                  _1606_recErased = _out769;
                  _1607_recIdents = _out770;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1604_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1605_recOwned;
                  isErased = _1606_recErased;
                  readIdents = _1607_recIdents;
                }
              } else if (_source64.is_Array) {
                DAST._IType _1608___mcc_h737 = _source64.dtor_element;
                BigInteger _1609___mcc_h738 = _source64.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1610_recursiveGen;
                  bool _1611_recOwned;
                  bool _1612_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1613_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out771;
                  bool _out772;
                  bool _out773;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out774;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out771, out _out772, out _out773, out _out774);
                  _1610_recursiveGen = _out771;
                  _1611_recOwned = _out772;
                  _1612_recErased = _out773;
                  _1613_recIdents = _out774;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1610_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1611_recOwned;
                  isErased = _1612_recErased;
                  readIdents = _1613_recIdents;
                }
              } else if (_source64.is_Seq) {
                DAST._IType _1614___mcc_h741 = _source64.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1615_recursiveGen;
                  bool _1616_recOwned;
                  bool _1617_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1618_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out775;
                  bool _out776;
                  bool _out777;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out778;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out775, out _out776, out _out777, out _out778);
                  _1615_recursiveGen = _out775;
                  _1616_recOwned = _out776;
                  _1617_recErased = _out777;
                  _1618_recIdents = _out778;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1615_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1616_recOwned;
                  isErased = _1617_recErased;
                  readIdents = _1618_recIdents;
                }
              } else if (_source64.is_Set) {
                DAST._IType _1619___mcc_h743 = _source64.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1620_recursiveGen;
                  bool _1621_recOwned;
                  bool _1622_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1623_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out779;
                  bool _out780;
                  bool _out781;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out782;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out779, out _out780, out _out781, out _out782);
                  _1620_recursiveGen = _out779;
                  _1621_recOwned = _out780;
                  _1622_recErased = _out781;
                  _1623_recIdents = _out782;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1620_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1621_recOwned;
                  isErased = _1622_recErased;
                  readIdents = _1623_recIdents;
                }
              } else if (_source64.is_Multiset) {
                DAST._IType _1624___mcc_h745 = _source64.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1625_recursiveGen;
                  bool _1626_recOwned;
                  bool _1627_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1628_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out783;
                  bool _out784;
                  bool _out785;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out786;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out783, out _out784, out _out785, out _out786);
                  _1625_recursiveGen = _out783;
                  _1626_recOwned = _out784;
                  _1627_recErased = _out785;
                  _1628_recIdents = _out786;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1625_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1626_recOwned;
                  isErased = _1627_recErased;
                  readIdents = _1628_recIdents;
                }
              } else if (_source64.is_Map) {
                DAST._IType _1629___mcc_h747 = _source64.dtor_key;
                DAST._IType _1630___mcc_h748 = _source64.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1631_recursiveGen;
                  bool _1632_recOwned;
                  bool _1633_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1634_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out787;
                  bool _out788;
                  bool _out789;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out790;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out787, out _out788, out _out789, out _out790);
                  _1631_recursiveGen = _out787;
                  _1632_recOwned = _out788;
                  _1633_recErased = _out789;
                  _1634_recIdents = _out790;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1631_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1632_recOwned;
                  isErased = _1633_recErased;
                  readIdents = _1634_recIdents;
                }
              } else if (_source64.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1635___mcc_h751 = _source64.dtor_args;
                DAST._IType _1636___mcc_h752 = _source64.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1637_recursiveGen;
                  bool _1638_recOwned;
                  bool _1639_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1640_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out791;
                  bool _out792;
                  bool _out793;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out794;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out791, out _out792, out _out793, out _out794);
                  _1637_recursiveGen = _out791;
                  _1638_recOwned = _out792;
                  _1639_recErased = _out793;
                  _1640_recIdents = _out794;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1637_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1638_recOwned;
                  isErased = _1639_recErased;
                  readIdents = _1640_recIdents;
                }
              } else if (_source64.is_Primitive) {
                DAST._IPrimitive _1641___mcc_h755 = _source64.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1642_recursiveGen;
                  bool _1643_recOwned;
                  bool _1644_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1645_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out795;
                  bool _out796;
                  bool _out797;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out798;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out795, out _out796, out _out797, out _out798);
                  _1642_recursiveGen = _out795;
                  _1643_recOwned = _out796;
                  _1644_recErased = _out797;
                  _1645_recIdents = _out798;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1642_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1643_recOwned;
                  isErased = _1644_recErased;
                  readIdents = _1645_recIdents;
                }
              } else if (_source64.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1646___mcc_h757 = _source64.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1647_recursiveGen;
                  bool _1648_recOwned;
                  bool _1649_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1650_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out799;
                  bool _out800;
                  bool _out801;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out802;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out799, out _out800, out _out801, out _out802);
                  _1647_recursiveGen = _out799;
                  _1648_recOwned = _out800;
                  _1649_recErased = _out801;
                  _1650_recIdents = _out802;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1647_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1648_recOwned;
                  isErased = _1649_recErased;
                  readIdents = _1650_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1651___mcc_h759 = _source64.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1652_recursiveGen;
                  bool _1653_recOwned;
                  bool _1654_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1655_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out803;
                  bool _out804;
                  bool _out805;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out806;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out803, out _out804, out _out805, out _out806);
                  _1652_recursiveGen = _out803;
                  _1653_recOwned = _out804;
                  _1654_recErased = _out805;
                  _1655_recIdents = _out806;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1652_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1653_recOwned;
                  isErased = _1654_recErased;
                  readIdents = _1655_recIdents;
                }
              }
            } else if (_source46.is_Map) {
              DAST._IType _1656___mcc_h761 = _source46.dtor_key;
              DAST._IType _1657___mcc_h762 = _source46.dtor_value;
              DAST._IType _source66 = _910___mcc_h306;
              if (_source66.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1658___mcc_h769 = _source66.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1659___mcc_h770 = _source66.dtor_typeArgs;
                DAST._IResolvedType _1660___mcc_h771 = _source66.dtor_resolved;
                DAST._IResolvedType _source67 = _1660___mcc_h771;
                if (_source67.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1661___mcc_h775 = _source67.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1662_recursiveGen;
                    bool _1663_recOwned;
                    bool _1664_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1665_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out807;
                    bool _out808;
                    bool _out809;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out810;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out807, out _out808, out _out809, out _out810);
                    _1662_recursiveGen = _out807;
                    _1663_recOwned = _out808;
                    _1664_recErased = _out809;
                    _1665_recIdents = _out810;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1662_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1663_recOwned;
                    isErased = _1664_recErased;
                    readIdents = _1665_recIdents;
                  }
                } else if (_source67.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1666___mcc_h777 = _source67.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1667_recursiveGen;
                    bool _1668_recOwned;
                    bool _1669_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1670_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out811;
                    bool _out812;
                    bool _out813;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out814;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out811, out _out812, out _out813, out _out814);
                    _1667_recursiveGen = _out811;
                    _1668_recOwned = _out812;
                    _1669_recErased = _out813;
                    _1670_recIdents = _out814;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1667_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1668_recOwned;
                    isErased = _1669_recErased;
                    readIdents = _1670_recIdents;
                  }
                } else {
                  DAST._IType _1671___mcc_h779 = _source67.dtor_Newtype_a0;
                  DAST._IType _1672_b = _1671___mcc_h779;
                  {
                    if (object.Equals(_903_fromTpe, _1672_b)) {
                      Dafny.ISequence<Dafny.Rune> _1673_recursiveGen;
                      bool _1674_recOwned;
                      bool _1675_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1676_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out815;
                      bool _out816;
                      bool _out817;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out818;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out815, out _out816, out _out817, out _out818);
                      _1673_recursiveGen = _out815;
                      _1674_recOwned = _out816;
                      _1675_recErased = _out817;
                      _1676_recIdents = _out818;
                      Dafny.ISequence<Dafny.Rune> _1677_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out819;
                      _out819 = DCOMP.COMP.GenType(_902_toTpe, true, false);
                      _1677_rhsType = _out819;
                      Dafny.ISequence<Dafny.Rune> _1678_uneraseFn;
                      _1678_uneraseFn = ((_1674_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1677_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1678_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1673_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1674_recOwned;
                      isErased = false;
                      readIdents = _1676_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out820;
                      bool _out821;
                      bool _out822;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out823;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_904_expr, _903_fromTpe, _1672_b), _1672_b, _902_toTpe), selfIdent, @params, mustOwn, out _out820, out _out821, out _out822, out _out823);
                      s = _out820;
                      isOwned = _out821;
                      isErased = _out822;
                      readIdents = _out823;
                    }
                  }
                }
              } else if (_source66.is_Nullable) {
                DAST._IType _1679___mcc_h781 = _source66.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1680_recursiveGen;
                  bool _1681_recOwned;
                  bool _1682_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1683_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out824;
                  bool _out825;
                  bool _out826;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out827;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out824, out _out825, out _out826, out _out827);
                  _1680_recursiveGen = _out824;
                  _1681_recOwned = _out825;
                  _1682_recErased = _out826;
                  _1683_recIdents = _out827;
                  if (!(_1681_recOwned)) {
                    _1680_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1680_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1680_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1682_recErased;
                  readIdents = _1683_recIdents;
                }
              } else if (_source66.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1684___mcc_h783 = _source66.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1685_recursiveGen;
                  bool _1686_recOwned;
                  bool _1687_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1688_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out828;
                  bool _out829;
                  bool _out830;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out831;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out828, out _out829, out _out830, out _out831);
                  _1685_recursiveGen = _out828;
                  _1686_recOwned = _out829;
                  _1687_recErased = _out830;
                  _1688_recIdents = _out831;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1685_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1686_recOwned;
                  isErased = _1687_recErased;
                  readIdents = _1688_recIdents;
                }
              } else if (_source66.is_Array) {
                DAST._IType _1689___mcc_h785 = _source66.dtor_element;
                BigInteger _1690___mcc_h786 = _source66.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1691_recursiveGen;
                  bool _1692_recOwned;
                  bool _1693_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1694_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out832;
                  bool _out833;
                  bool _out834;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out835;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out832, out _out833, out _out834, out _out835);
                  _1691_recursiveGen = _out832;
                  _1692_recOwned = _out833;
                  _1693_recErased = _out834;
                  _1694_recIdents = _out835;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1691_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1692_recOwned;
                  isErased = _1693_recErased;
                  readIdents = _1694_recIdents;
                }
              } else if (_source66.is_Seq) {
                DAST._IType _1695___mcc_h789 = _source66.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1696_recursiveGen;
                  bool _1697_recOwned;
                  bool _1698_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1699_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out836;
                  bool _out837;
                  bool _out838;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out839;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out836, out _out837, out _out838, out _out839);
                  _1696_recursiveGen = _out836;
                  _1697_recOwned = _out837;
                  _1698_recErased = _out838;
                  _1699_recIdents = _out839;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1696_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1697_recOwned;
                  isErased = _1698_recErased;
                  readIdents = _1699_recIdents;
                }
              } else if (_source66.is_Set) {
                DAST._IType _1700___mcc_h791 = _source66.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1701_recursiveGen;
                  bool _1702_recOwned;
                  bool _1703_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1704_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out840;
                  bool _out841;
                  bool _out842;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out843;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out840, out _out841, out _out842, out _out843);
                  _1701_recursiveGen = _out840;
                  _1702_recOwned = _out841;
                  _1703_recErased = _out842;
                  _1704_recIdents = _out843;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1701_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1702_recOwned;
                  isErased = _1703_recErased;
                  readIdents = _1704_recIdents;
                }
              } else if (_source66.is_Multiset) {
                DAST._IType _1705___mcc_h793 = _source66.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1706_recursiveGen;
                  bool _1707_recOwned;
                  bool _1708_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1709_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out844;
                  bool _out845;
                  bool _out846;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out847;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out844, out _out845, out _out846, out _out847);
                  _1706_recursiveGen = _out844;
                  _1707_recOwned = _out845;
                  _1708_recErased = _out846;
                  _1709_recIdents = _out847;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1706_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1707_recOwned;
                  isErased = _1708_recErased;
                  readIdents = _1709_recIdents;
                }
              } else if (_source66.is_Map) {
                DAST._IType _1710___mcc_h795 = _source66.dtor_key;
                DAST._IType _1711___mcc_h796 = _source66.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1712_recursiveGen;
                  bool _1713_recOwned;
                  bool _1714_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1715_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out848;
                  bool _out849;
                  bool _out850;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out851;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out848, out _out849, out _out850, out _out851);
                  _1712_recursiveGen = _out848;
                  _1713_recOwned = _out849;
                  _1714_recErased = _out850;
                  _1715_recIdents = _out851;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1712_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1713_recOwned;
                  isErased = _1714_recErased;
                  readIdents = _1715_recIdents;
                }
              } else if (_source66.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1716___mcc_h799 = _source66.dtor_args;
                DAST._IType _1717___mcc_h800 = _source66.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1718_recursiveGen;
                  bool _1719_recOwned;
                  bool _1720_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1721_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out852;
                  bool _out853;
                  bool _out854;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out855;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out852, out _out853, out _out854, out _out855);
                  _1718_recursiveGen = _out852;
                  _1719_recOwned = _out853;
                  _1720_recErased = _out854;
                  _1721_recIdents = _out855;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1718_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1719_recOwned;
                  isErased = _1720_recErased;
                  readIdents = _1721_recIdents;
                }
              } else if (_source66.is_Primitive) {
                DAST._IPrimitive _1722___mcc_h803 = _source66.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1723_recursiveGen;
                  bool _1724_recOwned;
                  bool _1725_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1726_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out856;
                  bool _out857;
                  bool _out858;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out859;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out856, out _out857, out _out858, out _out859);
                  _1723_recursiveGen = _out856;
                  _1724_recOwned = _out857;
                  _1725_recErased = _out858;
                  _1726_recIdents = _out859;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1723_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1724_recOwned;
                  isErased = _1725_recErased;
                  readIdents = _1726_recIdents;
                }
              } else if (_source66.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1727___mcc_h805 = _source66.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1728_recursiveGen;
                  bool _1729_recOwned;
                  bool _1730_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1731_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out860;
                  bool _out861;
                  bool _out862;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out863;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out860, out _out861, out _out862, out _out863);
                  _1728_recursiveGen = _out860;
                  _1729_recOwned = _out861;
                  _1730_recErased = _out862;
                  _1731_recIdents = _out863;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1728_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1729_recOwned;
                  isErased = _1730_recErased;
                  readIdents = _1731_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1732___mcc_h807 = _source66.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1733_recursiveGen;
                  bool _1734_recOwned;
                  bool _1735_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1736_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out864;
                  bool _out865;
                  bool _out866;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out867;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out864, out _out865, out _out866, out _out867);
                  _1733_recursiveGen = _out864;
                  _1734_recOwned = _out865;
                  _1735_recErased = _out866;
                  _1736_recIdents = _out867;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1733_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1734_recOwned;
                  isErased = _1735_recErased;
                  readIdents = _1736_recIdents;
                }
              }
            } else if (_source46.is_Arrow) {
              Dafny.ISequence<DAST._IType> _1737___mcc_h809 = _source46.dtor_args;
              DAST._IType _1738___mcc_h810 = _source46.dtor_result;
              DAST._IType _source68 = _910___mcc_h306;
              if (_source68.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1739___mcc_h817 = _source68.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1740___mcc_h818 = _source68.dtor_typeArgs;
                DAST._IResolvedType _1741___mcc_h819 = _source68.dtor_resolved;
                DAST._IResolvedType _source69 = _1741___mcc_h819;
                if (_source69.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1742___mcc_h823 = _source69.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1743_recursiveGen;
                    bool _1744_recOwned;
                    bool _1745_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1746_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out868;
                    bool _out869;
                    bool _out870;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out871;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out868, out _out869, out _out870, out _out871);
                    _1743_recursiveGen = _out868;
                    _1744_recOwned = _out869;
                    _1745_recErased = _out870;
                    _1746_recIdents = _out871;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1743_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1744_recOwned;
                    isErased = _1745_recErased;
                    readIdents = _1746_recIdents;
                  }
                } else if (_source69.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1747___mcc_h825 = _source69.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1748_recursiveGen;
                    bool _1749_recOwned;
                    bool _1750_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1751_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out872;
                    bool _out873;
                    bool _out874;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out875;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out872, out _out873, out _out874, out _out875);
                    _1748_recursiveGen = _out872;
                    _1749_recOwned = _out873;
                    _1750_recErased = _out874;
                    _1751_recIdents = _out875;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1748_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1749_recOwned;
                    isErased = _1750_recErased;
                    readIdents = _1751_recIdents;
                  }
                } else {
                  DAST._IType _1752___mcc_h827 = _source69.dtor_Newtype_a0;
                  DAST._IType _1753_b = _1752___mcc_h827;
                  {
                    if (object.Equals(_903_fromTpe, _1753_b)) {
                      Dafny.ISequence<Dafny.Rune> _1754_recursiveGen;
                      bool _1755_recOwned;
                      bool _1756_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1757_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out876;
                      bool _out877;
                      bool _out878;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out879;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out876, out _out877, out _out878, out _out879);
                      _1754_recursiveGen = _out876;
                      _1755_recOwned = _out877;
                      _1756_recErased = _out878;
                      _1757_recIdents = _out879;
                      Dafny.ISequence<Dafny.Rune> _1758_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out880;
                      _out880 = DCOMP.COMP.GenType(_902_toTpe, true, false);
                      _1758_rhsType = _out880;
                      Dafny.ISequence<Dafny.Rune> _1759_uneraseFn;
                      _1759_uneraseFn = ((_1755_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1758_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1759_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1754_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1755_recOwned;
                      isErased = false;
                      readIdents = _1757_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out881;
                      bool _out882;
                      bool _out883;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out884;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_904_expr, _903_fromTpe, _1753_b), _1753_b, _902_toTpe), selfIdent, @params, mustOwn, out _out881, out _out882, out _out883, out _out884);
                      s = _out881;
                      isOwned = _out882;
                      isErased = _out883;
                      readIdents = _out884;
                    }
                  }
                }
              } else if (_source68.is_Nullable) {
                DAST._IType _1760___mcc_h829 = _source68.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1761_recursiveGen;
                  bool _1762_recOwned;
                  bool _1763_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1764_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out885;
                  bool _out886;
                  bool _out887;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out888;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out885, out _out886, out _out887, out _out888);
                  _1761_recursiveGen = _out885;
                  _1762_recOwned = _out886;
                  _1763_recErased = _out887;
                  _1764_recIdents = _out888;
                  if (!(_1762_recOwned)) {
                    _1761_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1761_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1761_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1763_recErased;
                  readIdents = _1764_recIdents;
                }
              } else if (_source68.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1765___mcc_h831 = _source68.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1766_recursiveGen;
                  bool _1767_recOwned;
                  bool _1768_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1769_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out889;
                  bool _out890;
                  bool _out891;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out892;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out889, out _out890, out _out891, out _out892);
                  _1766_recursiveGen = _out889;
                  _1767_recOwned = _out890;
                  _1768_recErased = _out891;
                  _1769_recIdents = _out892;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1766_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1767_recOwned;
                  isErased = _1768_recErased;
                  readIdents = _1769_recIdents;
                }
              } else if (_source68.is_Array) {
                DAST._IType _1770___mcc_h833 = _source68.dtor_element;
                BigInteger _1771___mcc_h834 = _source68.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1772_recursiveGen;
                  bool _1773_recOwned;
                  bool _1774_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1775_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out893;
                  bool _out894;
                  bool _out895;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out896;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out893, out _out894, out _out895, out _out896);
                  _1772_recursiveGen = _out893;
                  _1773_recOwned = _out894;
                  _1774_recErased = _out895;
                  _1775_recIdents = _out896;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1772_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1773_recOwned;
                  isErased = _1774_recErased;
                  readIdents = _1775_recIdents;
                }
              } else if (_source68.is_Seq) {
                DAST._IType _1776___mcc_h837 = _source68.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1777_recursiveGen;
                  bool _1778_recOwned;
                  bool _1779_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1780_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out897;
                  bool _out898;
                  bool _out899;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out900;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out897, out _out898, out _out899, out _out900);
                  _1777_recursiveGen = _out897;
                  _1778_recOwned = _out898;
                  _1779_recErased = _out899;
                  _1780_recIdents = _out900;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1777_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1778_recOwned;
                  isErased = _1779_recErased;
                  readIdents = _1780_recIdents;
                }
              } else if (_source68.is_Set) {
                DAST._IType _1781___mcc_h839 = _source68.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1782_recursiveGen;
                  bool _1783_recOwned;
                  bool _1784_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1785_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out901;
                  bool _out902;
                  bool _out903;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out904;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out901, out _out902, out _out903, out _out904);
                  _1782_recursiveGen = _out901;
                  _1783_recOwned = _out902;
                  _1784_recErased = _out903;
                  _1785_recIdents = _out904;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1782_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1783_recOwned;
                  isErased = _1784_recErased;
                  readIdents = _1785_recIdents;
                }
              } else if (_source68.is_Multiset) {
                DAST._IType _1786___mcc_h841 = _source68.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1787_recursiveGen;
                  bool _1788_recOwned;
                  bool _1789_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1790_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out905;
                  bool _out906;
                  bool _out907;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out908;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out905, out _out906, out _out907, out _out908);
                  _1787_recursiveGen = _out905;
                  _1788_recOwned = _out906;
                  _1789_recErased = _out907;
                  _1790_recIdents = _out908;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1787_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1788_recOwned;
                  isErased = _1789_recErased;
                  readIdents = _1790_recIdents;
                }
              } else if (_source68.is_Map) {
                DAST._IType _1791___mcc_h843 = _source68.dtor_key;
                DAST._IType _1792___mcc_h844 = _source68.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1793_recursiveGen;
                  bool _1794_recOwned;
                  bool _1795_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1796_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out909;
                  bool _out910;
                  bool _out911;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out912;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out909, out _out910, out _out911, out _out912);
                  _1793_recursiveGen = _out909;
                  _1794_recOwned = _out910;
                  _1795_recErased = _out911;
                  _1796_recIdents = _out912;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1793_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1794_recOwned;
                  isErased = _1795_recErased;
                  readIdents = _1796_recIdents;
                }
              } else if (_source68.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1797___mcc_h847 = _source68.dtor_args;
                DAST._IType _1798___mcc_h848 = _source68.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1799_recursiveGen;
                  bool _1800_recOwned;
                  bool _1801_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1802_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out913;
                  bool _out914;
                  bool _out915;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out916;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out913, out _out914, out _out915, out _out916);
                  _1799_recursiveGen = _out913;
                  _1800_recOwned = _out914;
                  _1801_recErased = _out915;
                  _1802_recIdents = _out916;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1799_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1800_recOwned;
                  isErased = _1801_recErased;
                  readIdents = _1802_recIdents;
                }
              } else if (_source68.is_Primitive) {
                DAST._IPrimitive _1803___mcc_h851 = _source68.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1804_recursiveGen;
                  bool _1805_recOwned;
                  bool _1806_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1807_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out917;
                  bool _out918;
                  bool _out919;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out920;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out917, out _out918, out _out919, out _out920);
                  _1804_recursiveGen = _out917;
                  _1805_recOwned = _out918;
                  _1806_recErased = _out919;
                  _1807_recIdents = _out920;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1804_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1805_recOwned;
                  isErased = _1806_recErased;
                  readIdents = _1807_recIdents;
                }
              } else if (_source68.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1808___mcc_h853 = _source68.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1809_recursiveGen;
                  bool _1810_recOwned;
                  bool _1811_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1812_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out921;
                  bool _out922;
                  bool _out923;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out924;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out921, out _out922, out _out923, out _out924);
                  _1809_recursiveGen = _out921;
                  _1810_recOwned = _out922;
                  _1811_recErased = _out923;
                  _1812_recIdents = _out924;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1809_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1810_recOwned;
                  isErased = _1811_recErased;
                  readIdents = _1812_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1813___mcc_h855 = _source68.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1814_recursiveGen;
                  bool _1815_recOwned;
                  bool _1816_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1817_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out925;
                  bool _out926;
                  bool _out927;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out928;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out925, out _out926, out _out927, out _out928);
                  _1814_recursiveGen = _out925;
                  _1815_recOwned = _out926;
                  _1816_recErased = _out927;
                  _1817_recIdents = _out928;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1814_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1815_recOwned;
                  isErased = _1816_recErased;
                  readIdents = _1817_recIdents;
                }
              }
            } else if (_source46.is_Primitive) {
              DAST._IPrimitive _1818___mcc_h857 = _source46.dtor_Primitive_a0;
              DAST._IPrimitive _source70 = _1818___mcc_h857;
              if (_source70.is_Int) {
                DAST._IType _source71 = _910___mcc_h306;
                if (_source71.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1819___mcc_h861 = _source71.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1820___mcc_h862 = _source71.dtor_typeArgs;
                  DAST._IResolvedType _1821___mcc_h863 = _source71.dtor_resolved;
                  DAST._IResolvedType _source72 = _1821___mcc_h863;
                  if (_source72.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1822___mcc_h867 = _source72.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1823_recursiveGen;
                      bool _1824_recOwned;
                      bool _1825_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1826_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out929;
                      bool _out930;
                      bool _out931;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out932;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out929, out _out930, out _out931, out _out932);
                      _1823_recursiveGen = _out929;
                      _1824_recOwned = _out930;
                      _1825_recErased = _out931;
                      _1826_recIdents = _out932;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1823_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1824_recOwned;
                      isErased = _1825_recErased;
                      readIdents = _1826_recIdents;
                    }
                  } else if (_source72.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1827___mcc_h869 = _source72.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1828_recursiveGen;
                      bool _1829_recOwned;
                      bool _1830_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1831_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out933;
                      bool _out934;
                      bool _out935;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out936;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out933, out _out934, out _out935, out _out936);
                      _1828_recursiveGen = _out933;
                      _1829_recOwned = _out934;
                      _1830_recErased = _out935;
                      _1831_recIdents = _out936;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1828_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1829_recOwned;
                      isErased = _1830_recErased;
                      readIdents = _1831_recIdents;
                    }
                  } else {
                    DAST._IType _1832___mcc_h871 = _source72.dtor_Newtype_a0;
                    DAST._IType _1833_b = _1832___mcc_h871;
                    {
                      if (object.Equals(_903_fromTpe, _1833_b)) {
                        Dafny.ISequence<Dafny.Rune> _1834_recursiveGen;
                        bool _1835_recOwned;
                        bool _1836_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1837_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out937;
                        bool _out938;
                        bool _out939;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out940;
                        DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out937, out _out938, out _out939, out _out940);
                        _1834_recursiveGen = _out937;
                        _1835_recOwned = _out938;
                        _1836_recErased = _out939;
                        _1837_recIdents = _out940;
                        Dafny.ISequence<Dafny.Rune> _1838_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out941;
                        _out941 = DCOMP.COMP.GenType(_902_toTpe, true, false);
                        _1838_rhsType = _out941;
                        Dafny.ISequence<Dafny.Rune> _1839_uneraseFn;
                        _1839_uneraseFn = ((_1835_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1838_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1839_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1834_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1835_recOwned;
                        isErased = false;
                        readIdents = _1837_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out942;
                        bool _out943;
                        bool _out944;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out945;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_904_expr, _903_fromTpe, _1833_b), _1833_b, _902_toTpe), selfIdent, @params, mustOwn, out _out942, out _out943, out _out944, out _out945);
                        s = _out942;
                        isOwned = _out943;
                        isErased = _out944;
                        readIdents = _out945;
                      }
                    }
                  }
                } else if (_source71.is_Nullable) {
                  DAST._IType _1840___mcc_h873 = _source71.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1841_recursiveGen;
                    bool _1842_recOwned;
                    bool _1843_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1844_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out946;
                    bool _out947;
                    bool _out948;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out949;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out946, out _out947, out _out948, out _out949);
                    _1841_recursiveGen = _out946;
                    _1842_recOwned = _out947;
                    _1843_recErased = _out948;
                    _1844_recIdents = _out949;
                    if (!(_1842_recOwned)) {
                      _1841_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1841_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1841_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1843_recErased;
                    readIdents = _1844_recIdents;
                  }
                } else if (_source71.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1845___mcc_h875 = _source71.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1846_recursiveGen;
                    bool _1847_recOwned;
                    bool _1848_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1849_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out950;
                    bool _out951;
                    bool _out952;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out953;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out950, out _out951, out _out952, out _out953);
                    _1846_recursiveGen = _out950;
                    _1847_recOwned = _out951;
                    _1848_recErased = _out952;
                    _1849_recIdents = _out953;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1846_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1847_recOwned;
                    isErased = _1848_recErased;
                    readIdents = _1849_recIdents;
                  }
                } else if (_source71.is_Array) {
                  DAST._IType _1850___mcc_h877 = _source71.dtor_element;
                  BigInteger _1851___mcc_h878 = _source71.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1852_recursiveGen;
                    bool _1853_recOwned;
                    bool _1854_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1855_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out954;
                    bool _out955;
                    bool _out956;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out957;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out954, out _out955, out _out956, out _out957);
                    _1852_recursiveGen = _out954;
                    _1853_recOwned = _out955;
                    _1854_recErased = _out956;
                    _1855_recIdents = _out957;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1852_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1853_recOwned;
                    isErased = _1854_recErased;
                    readIdents = _1855_recIdents;
                  }
                } else if (_source71.is_Seq) {
                  DAST._IType _1856___mcc_h881 = _source71.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1857_recursiveGen;
                    bool _1858_recOwned;
                    bool _1859_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1860_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out958;
                    bool _out959;
                    bool _out960;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out961;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out958, out _out959, out _out960, out _out961);
                    _1857_recursiveGen = _out958;
                    _1858_recOwned = _out959;
                    _1859_recErased = _out960;
                    _1860_recIdents = _out961;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1857_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1858_recOwned;
                    isErased = _1859_recErased;
                    readIdents = _1860_recIdents;
                  }
                } else if (_source71.is_Set) {
                  DAST._IType _1861___mcc_h883 = _source71.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1862_recursiveGen;
                    bool _1863_recOwned;
                    bool _1864_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1865_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out962;
                    bool _out963;
                    bool _out964;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out965;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out962, out _out963, out _out964, out _out965);
                    _1862_recursiveGen = _out962;
                    _1863_recOwned = _out963;
                    _1864_recErased = _out964;
                    _1865_recIdents = _out965;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1862_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1863_recOwned;
                    isErased = _1864_recErased;
                    readIdents = _1865_recIdents;
                  }
                } else if (_source71.is_Multiset) {
                  DAST._IType _1866___mcc_h885 = _source71.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1867_recursiveGen;
                    bool _1868_recOwned;
                    bool _1869_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1870_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out966;
                    bool _out967;
                    bool _out968;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out969;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out966, out _out967, out _out968, out _out969);
                    _1867_recursiveGen = _out966;
                    _1868_recOwned = _out967;
                    _1869_recErased = _out968;
                    _1870_recIdents = _out969;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1867_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1868_recOwned;
                    isErased = _1869_recErased;
                    readIdents = _1870_recIdents;
                  }
                } else if (_source71.is_Map) {
                  DAST._IType _1871___mcc_h887 = _source71.dtor_key;
                  DAST._IType _1872___mcc_h888 = _source71.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1873_recursiveGen;
                    bool _1874_recOwned;
                    bool _1875_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1876_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out970;
                    bool _out971;
                    bool _out972;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out973;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out970, out _out971, out _out972, out _out973);
                    _1873_recursiveGen = _out970;
                    _1874_recOwned = _out971;
                    _1875_recErased = _out972;
                    _1876_recIdents = _out973;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1873_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1874_recOwned;
                    isErased = _1875_recErased;
                    readIdents = _1876_recIdents;
                  }
                } else if (_source71.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1877___mcc_h891 = _source71.dtor_args;
                  DAST._IType _1878___mcc_h892 = _source71.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1879_recursiveGen;
                    bool _1880_recOwned;
                    bool _1881_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1882_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out974;
                    bool _out975;
                    bool _out976;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out977;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out974, out _out975, out _out976, out _out977);
                    _1879_recursiveGen = _out974;
                    _1880_recOwned = _out975;
                    _1881_recErased = _out976;
                    _1882_recIdents = _out977;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1879_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1880_recOwned;
                    isErased = _1881_recErased;
                    readIdents = _1882_recIdents;
                  }
                } else if (_source71.is_Primitive) {
                  DAST._IPrimitive _1883___mcc_h895 = _source71.dtor_Primitive_a0;
                  DAST._IPrimitive _source73 = _1883___mcc_h895;
                  if (_source73.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1884_recursiveGen;
                      bool _1885_recOwned;
                      bool _1886_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1887_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out978;
                      bool _out979;
                      bool _out980;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out981;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out978, out _out979, out _out980, out _out981);
                      _1884_recursiveGen = _out978;
                      _1885_recOwned = _out979;
                      _1886_recErased = _out980;
                      _1887_recIdents = _out981;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1884_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1885_recOwned;
                      isErased = _1886_recErased;
                      readIdents = _1887_recIdents;
                    }
                  } else if (_source73.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1888_recursiveGen;
                      bool _1889___v46;
                      bool _1890___v47;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1891_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out982;
                      bool _out983;
                      bool _out984;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out985;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, true, out _out982, out _out983, out _out984, out _out985);
                      _1888_recursiveGen = _out982;
                      _1889___v46 = _out983;
                      _1890___v47 = _out984;
                      _1891_recIdents = _out985;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), _1888_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _1891_recIdents;
                    }
                  } else if (_source73.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1892_recursiveGen;
                      bool _1893_recOwned;
                      bool _1894_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1895_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out986;
                      bool _out987;
                      bool _out988;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out989;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out986, out _out987, out _out988, out _out989);
                      _1892_recursiveGen = _out986;
                      _1893_recOwned = _out987;
                      _1894_recErased = _out988;
                      _1895_recIdents = _out989;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1892_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1893_recOwned;
                      isErased = _1894_recErased;
                      readIdents = _1895_recIdents;
                    }
                  } else if (_source73.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1896_recursiveGen;
                      bool _1897_recOwned;
                      bool _1898_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1899_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out990;
                      bool _out991;
                      bool _out992;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out993;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out990, out _out991, out _out992, out _out993);
                      _1896_recursiveGen = _out990;
                      _1897_recOwned = _out991;
                      _1898_recErased = _out992;
                      _1899_recIdents = _out993;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1896_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1897_recOwned;
                      isErased = _1898_recErased;
                      readIdents = _1899_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _1900_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out994;
                      _out994 = DCOMP.COMP.GenType(_902_toTpe, true, false);
                      _1900_rhsType = _out994;
                      Dafny.ISequence<Dafny.Rune> _1901_recursiveGen;
                      bool _1902___v56;
                      bool _1903___v57;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1904_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out995;
                      bool _out996;
                      bool _out997;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out998;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, true, out _out995, out _out996, out _out997, out _out998);
                      _1901_recursiveGen = _out995;
                      _1902___v56 = _out996;
                      _1903___v57 = _out997;
                      _1904_recIdents = _out998;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), _1901_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _1904_recIdents;
                    }
                  }
                } else if (_source71.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1905___mcc_h897 = _source71.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1906_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out999;
                    _out999 = DCOMP.COMP.GenType(_902_toTpe, true, false);
                    _1906_rhsType = _out999;
                    Dafny.ISequence<Dafny.Rune> _1907_recursiveGen;
                    bool _1908___v51;
                    bool _1909___v52;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1910_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1000;
                    bool _out1001;
                    bool _out1002;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1003;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, true, out _out1000, out _out1001, out _out1002, out _out1003);
                    _1907_recursiveGen = _out1000;
                    _1908___v51 = _out1001;
                    _1909___v52 = _out1002;
                    _1910_recIdents = _out1003;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1906_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), _1907_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _1910_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1911___mcc_h899 = _source71.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1912_recursiveGen;
                    bool _1913_recOwned;
                    bool _1914_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1915_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1004;
                    bool _out1005;
                    bool _out1006;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1007;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1004, out _out1005, out _out1006, out _out1007);
                    _1912_recursiveGen = _out1004;
                    _1913_recOwned = _out1005;
                    _1914_recErased = _out1006;
                    _1915_recIdents = _out1007;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1912_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1913_recOwned;
                    isErased = _1914_recErased;
                    readIdents = _1915_recIdents;
                  }
                }
              } else if (_source70.is_Real) {
                DAST._IType _source74 = _910___mcc_h306;
                if (_source74.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1916___mcc_h901 = _source74.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1917___mcc_h902 = _source74.dtor_typeArgs;
                  DAST._IResolvedType _1918___mcc_h903 = _source74.dtor_resolved;
                  DAST._IResolvedType _source75 = _1918___mcc_h903;
                  if (_source75.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1919___mcc_h907 = _source75.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1920_recursiveGen;
                      bool _1921_recOwned;
                      bool _1922_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1923_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1008;
                      bool _out1009;
                      bool _out1010;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1011;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1008, out _out1009, out _out1010, out _out1011);
                      _1920_recursiveGen = _out1008;
                      _1921_recOwned = _out1009;
                      _1922_recErased = _out1010;
                      _1923_recIdents = _out1011;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1920_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1921_recOwned;
                      isErased = _1922_recErased;
                      readIdents = _1923_recIdents;
                    }
                  } else if (_source75.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1924___mcc_h909 = _source75.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1925_recursiveGen;
                      bool _1926_recOwned;
                      bool _1927_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1928_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1012;
                      bool _out1013;
                      bool _out1014;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1015;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1012, out _out1013, out _out1014, out _out1015);
                      _1925_recursiveGen = _out1012;
                      _1926_recOwned = _out1013;
                      _1927_recErased = _out1014;
                      _1928_recIdents = _out1015;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1925_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1926_recOwned;
                      isErased = _1927_recErased;
                      readIdents = _1928_recIdents;
                    }
                  } else {
                    DAST._IType _1929___mcc_h911 = _source75.dtor_Newtype_a0;
                    DAST._IType _1930_b = _1929___mcc_h911;
                    {
                      if (object.Equals(_903_fromTpe, _1930_b)) {
                        Dafny.ISequence<Dafny.Rune> _1931_recursiveGen;
                        bool _1932_recOwned;
                        bool _1933_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1934_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1016;
                        bool _out1017;
                        bool _out1018;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1019;
                        DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1016, out _out1017, out _out1018, out _out1019);
                        _1931_recursiveGen = _out1016;
                        _1932_recOwned = _out1017;
                        _1933_recErased = _out1018;
                        _1934_recIdents = _out1019;
                        Dafny.ISequence<Dafny.Rune> _1935_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1020;
                        _out1020 = DCOMP.COMP.GenType(_902_toTpe, true, false);
                        _1935_rhsType = _out1020;
                        Dafny.ISequence<Dafny.Rune> _1936_uneraseFn;
                        _1936_uneraseFn = ((_1932_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1935_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1936_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1931_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1932_recOwned;
                        isErased = false;
                        readIdents = _1934_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1021;
                        bool _out1022;
                        bool _out1023;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1024;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_904_expr, _903_fromTpe, _1930_b), _1930_b, _902_toTpe), selfIdent, @params, mustOwn, out _out1021, out _out1022, out _out1023, out _out1024);
                        s = _out1021;
                        isOwned = _out1022;
                        isErased = _out1023;
                        readIdents = _out1024;
                      }
                    }
                  }
                } else if (_source74.is_Nullable) {
                  DAST._IType _1937___mcc_h913 = _source74.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1938_recursiveGen;
                    bool _1939_recOwned;
                    bool _1940_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1941_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1025;
                    bool _out1026;
                    bool _out1027;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1028;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1025, out _out1026, out _out1027, out _out1028);
                    _1938_recursiveGen = _out1025;
                    _1939_recOwned = _out1026;
                    _1940_recErased = _out1027;
                    _1941_recIdents = _out1028;
                    if (!(_1939_recOwned)) {
                      _1938_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1938_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1938_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1940_recErased;
                    readIdents = _1941_recIdents;
                  }
                } else if (_source74.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1942___mcc_h915 = _source74.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1943_recursiveGen;
                    bool _1944_recOwned;
                    bool _1945_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1946_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1029;
                    bool _out1030;
                    bool _out1031;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1032;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1029, out _out1030, out _out1031, out _out1032);
                    _1943_recursiveGen = _out1029;
                    _1944_recOwned = _out1030;
                    _1945_recErased = _out1031;
                    _1946_recIdents = _out1032;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1943_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1944_recOwned;
                    isErased = _1945_recErased;
                    readIdents = _1946_recIdents;
                  }
                } else if (_source74.is_Array) {
                  DAST._IType _1947___mcc_h917 = _source74.dtor_element;
                  BigInteger _1948___mcc_h918 = _source74.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1949_recursiveGen;
                    bool _1950_recOwned;
                    bool _1951_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1952_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1033;
                    bool _out1034;
                    bool _out1035;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1036;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1033, out _out1034, out _out1035, out _out1036);
                    _1949_recursiveGen = _out1033;
                    _1950_recOwned = _out1034;
                    _1951_recErased = _out1035;
                    _1952_recIdents = _out1036;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1949_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1950_recOwned;
                    isErased = _1951_recErased;
                    readIdents = _1952_recIdents;
                  }
                } else if (_source74.is_Seq) {
                  DAST._IType _1953___mcc_h921 = _source74.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1954_recursiveGen;
                    bool _1955_recOwned;
                    bool _1956_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1957_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1037;
                    bool _out1038;
                    bool _out1039;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1040;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1037, out _out1038, out _out1039, out _out1040);
                    _1954_recursiveGen = _out1037;
                    _1955_recOwned = _out1038;
                    _1956_recErased = _out1039;
                    _1957_recIdents = _out1040;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1954_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1955_recOwned;
                    isErased = _1956_recErased;
                    readIdents = _1957_recIdents;
                  }
                } else if (_source74.is_Set) {
                  DAST._IType _1958___mcc_h923 = _source74.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1959_recursiveGen;
                    bool _1960_recOwned;
                    bool _1961_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1962_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1041;
                    bool _out1042;
                    bool _out1043;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1044;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1041, out _out1042, out _out1043, out _out1044);
                    _1959_recursiveGen = _out1041;
                    _1960_recOwned = _out1042;
                    _1961_recErased = _out1043;
                    _1962_recIdents = _out1044;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1959_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1960_recOwned;
                    isErased = _1961_recErased;
                    readIdents = _1962_recIdents;
                  }
                } else if (_source74.is_Multiset) {
                  DAST._IType _1963___mcc_h925 = _source74.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1964_recursiveGen;
                    bool _1965_recOwned;
                    bool _1966_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1967_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1045;
                    bool _out1046;
                    bool _out1047;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1048;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1045, out _out1046, out _out1047, out _out1048);
                    _1964_recursiveGen = _out1045;
                    _1965_recOwned = _out1046;
                    _1966_recErased = _out1047;
                    _1967_recIdents = _out1048;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1964_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1965_recOwned;
                    isErased = _1966_recErased;
                    readIdents = _1967_recIdents;
                  }
                } else if (_source74.is_Map) {
                  DAST._IType _1968___mcc_h927 = _source74.dtor_key;
                  DAST._IType _1969___mcc_h928 = _source74.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1970_recursiveGen;
                    bool _1971_recOwned;
                    bool _1972_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1973_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1049;
                    bool _out1050;
                    bool _out1051;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1052;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1049, out _out1050, out _out1051, out _out1052);
                    _1970_recursiveGen = _out1049;
                    _1971_recOwned = _out1050;
                    _1972_recErased = _out1051;
                    _1973_recIdents = _out1052;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1970_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1971_recOwned;
                    isErased = _1972_recErased;
                    readIdents = _1973_recIdents;
                  }
                } else if (_source74.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1974___mcc_h931 = _source74.dtor_args;
                  DAST._IType _1975___mcc_h932 = _source74.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1976_recursiveGen;
                    bool _1977_recOwned;
                    bool _1978_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1979_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1053;
                    bool _out1054;
                    bool _out1055;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1056;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1053, out _out1054, out _out1055, out _out1056);
                    _1976_recursiveGen = _out1053;
                    _1977_recOwned = _out1054;
                    _1978_recErased = _out1055;
                    _1979_recIdents = _out1056;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1976_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1977_recOwned;
                    isErased = _1978_recErased;
                    readIdents = _1979_recIdents;
                  }
                } else if (_source74.is_Primitive) {
                  DAST._IPrimitive _1980___mcc_h935 = _source74.dtor_Primitive_a0;
                  DAST._IPrimitive _source76 = _1980___mcc_h935;
                  if (_source76.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1981_recursiveGen;
                      bool _1982___v48;
                      bool _1983___v49;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1984_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1057;
                      bool _out1058;
                      bool _out1059;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1060;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, false, out _out1057, out _out1058, out _out1059, out _out1060);
                      _1981_recursiveGen = _out1057;
                      _1982___v48 = _out1058;
                      _1983___v49 = _out1059;
                      _1984_recIdents = _out1060;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), _1981_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _1984_recIdents;
                    }
                  } else if (_source76.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1985_recursiveGen;
                      bool _1986_recOwned;
                      bool _1987_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1988_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1061;
                      bool _out1062;
                      bool _out1063;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1064;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1061, out _out1062, out _out1063, out _out1064);
                      _1985_recursiveGen = _out1061;
                      _1986_recOwned = _out1062;
                      _1987_recErased = _out1063;
                      _1988_recIdents = _out1064;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1985_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1986_recOwned;
                      isErased = _1987_recErased;
                      readIdents = _1988_recIdents;
                    }
                  } else if (_source76.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1989_recursiveGen;
                      bool _1990_recOwned;
                      bool _1991_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1992_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1065;
                      bool _out1066;
                      bool _out1067;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1068;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1065, out _out1066, out _out1067, out _out1068);
                      _1989_recursiveGen = _out1065;
                      _1990_recOwned = _out1066;
                      _1991_recErased = _out1067;
                      _1992_recIdents = _out1068;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1989_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1990_recOwned;
                      isErased = _1991_recErased;
                      readIdents = _1992_recIdents;
                    }
                  } else if (_source76.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1993_recursiveGen;
                      bool _1994_recOwned;
                      bool _1995_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1996_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1069;
                      bool _out1070;
                      bool _out1071;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1072;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1069, out _out1070, out _out1071, out _out1072);
                      _1993_recursiveGen = _out1069;
                      _1994_recOwned = _out1070;
                      _1995_recErased = _out1071;
                      _1996_recIdents = _out1072;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1993_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1994_recOwned;
                      isErased = _1995_recErased;
                      readIdents = _1996_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _1997_recursiveGen;
                      bool _1998_recOwned;
                      bool _1999_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2000_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1073;
                      bool _out1074;
                      bool _out1075;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1076;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1073, out _out1074, out _out1075, out _out1076);
                      _1997_recursiveGen = _out1073;
                      _1998_recOwned = _out1074;
                      _1999_recErased = _out1075;
                      _2000_recIdents = _out1076;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1997_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1998_recOwned;
                      isErased = _1999_recErased;
                      readIdents = _2000_recIdents;
                    }
                  }
                } else if (_source74.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2001___mcc_h937 = _source74.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2002_recursiveGen;
                    bool _2003_recOwned;
                    bool _2004_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2005_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1077;
                    bool _out1078;
                    bool _out1079;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1080;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1077, out _out1078, out _out1079, out _out1080);
                    _2002_recursiveGen = _out1077;
                    _2003_recOwned = _out1078;
                    _2004_recErased = _out1079;
                    _2005_recIdents = _out1080;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2002_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2003_recOwned;
                    isErased = _2004_recErased;
                    readIdents = _2005_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2006___mcc_h939 = _source74.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2007_recursiveGen;
                    bool _2008_recOwned;
                    bool _2009_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2010_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1081;
                    bool _out1082;
                    bool _out1083;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1084;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1081, out _out1082, out _out1083, out _out1084);
                    _2007_recursiveGen = _out1081;
                    _2008_recOwned = _out1082;
                    _2009_recErased = _out1083;
                    _2010_recIdents = _out1084;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2007_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2008_recOwned;
                    isErased = _2009_recErased;
                    readIdents = _2010_recIdents;
                  }
                }
              } else if (_source70.is_String) {
                DAST._IType _source77 = _910___mcc_h306;
                if (_source77.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2011___mcc_h941 = _source77.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2012___mcc_h942 = _source77.dtor_typeArgs;
                  DAST._IResolvedType _2013___mcc_h943 = _source77.dtor_resolved;
                  DAST._IResolvedType _source78 = _2013___mcc_h943;
                  if (_source78.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2014___mcc_h947 = _source78.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2015_recursiveGen;
                      bool _2016_recOwned;
                      bool _2017_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2018_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1085;
                      bool _out1086;
                      bool _out1087;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1088;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1085, out _out1086, out _out1087, out _out1088);
                      _2015_recursiveGen = _out1085;
                      _2016_recOwned = _out1086;
                      _2017_recErased = _out1087;
                      _2018_recIdents = _out1088;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2015_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2016_recOwned;
                      isErased = _2017_recErased;
                      readIdents = _2018_recIdents;
                    }
                  } else if (_source78.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2019___mcc_h949 = _source78.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2020_recursiveGen;
                      bool _2021_recOwned;
                      bool _2022_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2023_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1089;
                      bool _out1090;
                      bool _out1091;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1092;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1089, out _out1090, out _out1091, out _out1092);
                      _2020_recursiveGen = _out1089;
                      _2021_recOwned = _out1090;
                      _2022_recErased = _out1091;
                      _2023_recIdents = _out1092;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2020_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2021_recOwned;
                      isErased = _2022_recErased;
                      readIdents = _2023_recIdents;
                    }
                  } else {
                    DAST._IType _2024___mcc_h951 = _source78.dtor_Newtype_a0;
                    DAST._IType _2025_b = _2024___mcc_h951;
                    {
                      if (object.Equals(_903_fromTpe, _2025_b)) {
                        Dafny.ISequence<Dafny.Rune> _2026_recursiveGen;
                        bool _2027_recOwned;
                        bool _2028_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2029_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1093;
                        bool _out1094;
                        bool _out1095;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1096;
                        DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1093, out _out1094, out _out1095, out _out1096);
                        _2026_recursiveGen = _out1093;
                        _2027_recOwned = _out1094;
                        _2028_recErased = _out1095;
                        _2029_recIdents = _out1096;
                        Dafny.ISequence<Dafny.Rune> _2030_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1097;
                        _out1097 = DCOMP.COMP.GenType(_902_toTpe, true, false);
                        _2030_rhsType = _out1097;
                        Dafny.ISequence<Dafny.Rune> _2031_uneraseFn;
                        _2031_uneraseFn = ((_2027_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2030_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2031_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2026_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2027_recOwned;
                        isErased = false;
                        readIdents = _2029_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1098;
                        bool _out1099;
                        bool _out1100;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1101;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_904_expr, _903_fromTpe, _2025_b), _2025_b, _902_toTpe), selfIdent, @params, mustOwn, out _out1098, out _out1099, out _out1100, out _out1101);
                        s = _out1098;
                        isOwned = _out1099;
                        isErased = _out1100;
                        readIdents = _out1101;
                      }
                    }
                  }
                } else if (_source77.is_Nullable) {
                  DAST._IType _2032___mcc_h953 = _source77.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2033_recursiveGen;
                    bool _2034_recOwned;
                    bool _2035_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2036_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1102;
                    bool _out1103;
                    bool _out1104;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1105;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1102, out _out1103, out _out1104, out _out1105);
                    _2033_recursiveGen = _out1102;
                    _2034_recOwned = _out1103;
                    _2035_recErased = _out1104;
                    _2036_recIdents = _out1105;
                    if (!(_2034_recOwned)) {
                      _2033_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2033_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2033_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2035_recErased;
                    readIdents = _2036_recIdents;
                  }
                } else if (_source77.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2037___mcc_h955 = _source77.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2038_recursiveGen;
                    bool _2039_recOwned;
                    bool _2040_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2041_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1106;
                    bool _out1107;
                    bool _out1108;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1109;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1106, out _out1107, out _out1108, out _out1109);
                    _2038_recursiveGen = _out1106;
                    _2039_recOwned = _out1107;
                    _2040_recErased = _out1108;
                    _2041_recIdents = _out1109;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2038_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2039_recOwned;
                    isErased = _2040_recErased;
                    readIdents = _2041_recIdents;
                  }
                } else if (_source77.is_Array) {
                  DAST._IType _2042___mcc_h957 = _source77.dtor_element;
                  BigInteger _2043___mcc_h958 = _source77.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2044_recursiveGen;
                    bool _2045_recOwned;
                    bool _2046_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2047_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1110;
                    bool _out1111;
                    bool _out1112;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1113;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1110, out _out1111, out _out1112, out _out1113);
                    _2044_recursiveGen = _out1110;
                    _2045_recOwned = _out1111;
                    _2046_recErased = _out1112;
                    _2047_recIdents = _out1113;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2044_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2045_recOwned;
                    isErased = _2046_recErased;
                    readIdents = _2047_recIdents;
                  }
                } else if (_source77.is_Seq) {
                  DAST._IType _2048___mcc_h961 = _source77.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2049_recursiveGen;
                    bool _2050_recOwned;
                    bool _2051_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2052_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1114;
                    bool _out1115;
                    bool _out1116;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1117;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1114, out _out1115, out _out1116, out _out1117);
                    _2049_recursiveGen = _out1114;
                    _2050_recOwned = _out1115;
                    _2051_recErased = _out1116;
                    _2052_recIdents = _out1117;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2049_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2050_recOwned;
                    isErased = _2051_recErased;
                    readIdents = _2052_recIdents;
                  }
                } else if (_source77.is_Set) {
                  DAST._IType _2053___mcc_h963 = _source77.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2054_recursiveGen;
                    bool _2055_recOwned;
                    bool _2056_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2057_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1118;
                    bool _out1119;
                    bool _out1120;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1121;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1118, out _out1119, out _out1120, out _out1121);
                    _2054_recursiveGen = _out1118;
                    _2055_recOwned = _out1119;
                    _2056_recErased = _out1120;
                    _2057_recIdents = _out1121;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2054_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2055_recOwned;
                    isErased = _2056_recErased;
                    readIdents = _2057_recIdents;
                  }
                } else if (_source77.is_Multiset) {
                  DAST._IType _2058___mcc_h965 = _source77.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2059_recursiveGen;
                    bool _2060_recOwned;
                    bool _2061_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2062_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1122;
                    bool _out1123;
                    bool _out1124;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1125;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1122, out _out1123, out _out1124, out _out1125);
                    _2059_recursiveGen = _out1122;
                    _2060_recOwned = _out1123;
                    _2061_recErased = _out1124;
                    _2062_recIdents = _out1125;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2059_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2060_recOwned;
                    isErased = _2061_recErased;
                    readIdents = _2062_recIdents;
                  }
                } else if (_source77.is_Map) {
                  DAST._IType _2063___mcc_h967 = _source77.dtor_key;
                  DAST._IType _2064___mcc_h968 = _source77.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2065_recursiveGen;
                    bool _2066_recOwned;
                    bool _2067_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2068_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1126;
                    bool _out1127;
                    bool _out1128;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1129;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1126, out _out1127, out _out1128, out _out1129);
                    _2065_recursiveGen = _out1126;
                    _2066_recOwned = _out1127;
                    _2067_recErased = _out1128;
                    _2068_recIdents = _out1129;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2065_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2066_recOwned;
                    isErased = _2067_recErased;
                    readIdents = _2068_recIdents;
                  }
                } else if (_source77.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2069___mcc_h971 = _source77.dtor_args;
                  DAST._IType _2070___mcc_h972 = _source77.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2071_recursiveGen;
                    bool _2072_recOwned;
                    bool _2073_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2074_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1130;
                    bool _out1131;
                    bool _out1132;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1133;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1130, out _out1131, out _out1132, out _out1133);
                    _2071_recursiveGen = _out1130;
                    _2072_recOwned = _out1131;
                    _2073_recErased = _out1132;
                    _2074_recIdents = _out1133;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2071_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2072_recOwned;
                    isErased = _2073_recErased;
                    readIdents = _2074_recIdents;
                  }
                } else if (_source77.is_Primitive) {
                  DAST._IPrimitive _2075___mcc_h975 = _source77.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2076_recursiveGen;
                    bool _2077_recOwned;
                    bool _2078_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2079_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1134;
                    bool _out1135;
                    bool _out1136;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1137;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1134, out _out1135, out _out1136, out _out1137);
                    _2076_recursiveGen = _out1134;
                    _2077_recOwned = _out1135;
                    _2078_recErased = _out1136;
                    _2079_recIdents = _out1137;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2076_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2077_recOwned;
                    isErased = _2078_recErased;
                    readIdents = _2079_recIdents;
                  }
                } else if (_source77.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2080___mcc_h977 = _source77.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2081_recursiveGen;
                    bool _2082_recOwned;
                    bool _2083_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2084_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1138;
                    bool _out1139;
                    bool _out1140;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1141;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1138, out _out1139, out _out1140, out _out1141);
                    _2081_recursiveGen = _out1138;
                    _2082_recOwned = _out1139;
                    _2083_recErased = _out1140;
                    _2084_recIdents = _out1141;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2081_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2082_recOwned;
                    isErased = _2083_recErased;
                    readIdents = _2084_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2085___mcc_h979 = _source77.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2086_recursiveGen;
                    bool _2087_recOwned;
                    bool _2088_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2089_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1142;
                    bool _out1143;
                    bool _out1144;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1145;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1142, out _out1143, out _out1144, out _out1145);
                    _2086_recursiveGen = _out1142;
                    _2087_recOwned = _out1143;
                    _2088_recErased = _out1144;
                    _2089_recIdents = _out1145;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2086_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2087_recOwned;
                    isErased = _2088_recErased;
                    readIdents = _2089_recIdents;
                  }
                }
              } else if (_source70.is_Bool) {
                DAST._IType _source79 = _910___mcc_h306;
                if (_source79.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2090___mcc_h981 = _source79.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2091___mcc_h982 = _source79.dtor_typeArgs;
                  DAST._IResolvedType _2092___mcc_h983 = _source79.dtor_resolved;
                  DAST._IResolvedType _source80 = _2092___mcc_h983;
                  if (_source80.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2093___mcc_h987 = _source80.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2094_recursiveGen;
                      bool _2095_recOwned;
                      bool _2096_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2097_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1146;
                      bool _out1147;
                      bool _out1148;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1149;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1146, out _out1147, out _out1148, out _out1149);
                      _2094_recursiveGen = _out1146;
                      _2095_recOwned = _out1147;
                      _2096_recErased = _out1148;
                      _2097_recIdents = _out1149;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2094_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2095_recOwned;
                      isErased = _2096_recErased;
                      readIdents = _2097_recIdents;
                    }
                  } else if (_source80.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2098___mcc_h989 = _source80.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2099_recursiveGen;
                      bool _2100_recOwned;
                      bool _2101_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2102_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1150;
                      bool _out1151;
                      bool _out1152;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1153;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1150, out _out1151, out _out1152, out _out1153);
                      _2099_recursiveGen = _out1150;
                      _2100_recOwned = _out1151;
                      _2101_recErased = _out1152;
                      _2102_recIdents = _out1153;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2099_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2100_recOwned;
                      isErased = _2101_recErased;
                      readIdents = _2102_recIdents;
                    }
                  } else {
                    DAST._IType _2103___mcc_h991 = _source80.dtor_Newtype_a0;
                    DAST._IType _2104_b = _2103___mcc_h991;
                    {
                      if (object.Equals(_903_fromTpe, _2104_b)) {
                        Dafny.ISequence<Dafny.Rune> _2105_recursiveGen;
                        bool _2106_recOwned;
                        bool _2107_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2108_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1154;
                        bool _out1155;
                        bool _out1156;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1157;
                        DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1154, out _out1155, out _out1156, out _out1157);
                        _2105_recursiveGen = _out1154;
                        _2106_recOwned = _out1155;
                        _2107_recErased = _out1156;
                        _2108_recIdents = _out1157;
                        Dafny.ISequence<Dafny.Rune> _2109_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1158;
                        _out1158 = DCOMP.COMP.GenType(_902_toTpe, true, false);
                        _2109_rhsType = _out1158;
                        Dafny.ISequence<Dafny.Rune> _2110_uneraseFn;
                        _2110_uneraseFn = ((_2106_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2109_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2110_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2105_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2106_recOwned;
                        isErased = false;
                        readIdents = _2108_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1159;
                        bool _out1160;
                        bool _out1161;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1162;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_904_expr, _903_fromTpe, _2104_b), _2104_b, _902_toTpe), selfIdent, @params, mustOwn, out _out1159, out _out1160, out _out1161, out _out1162);
                        s = _out1159;
                        isOwned = _out1160;
                        isErased = _out1161;
                        readIdents = _out1162;
                      }
                    }
                  }
                } else if (_source79.is_Nullable) {
                  DAST._IType _2111___mcc_h993 = _source79.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2112_recursiveGen;
                    bool _2113_recOwned;
                    bool _2114_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2115_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1163;
                    bool _out1164;
                    bool _out1165;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1166;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1163, out _out1164, out _out1165, out _out1166);
                    _2112_recursiveGen = _out1163;
                    _2113_recOwned = _out1164;
                    _2114_recErased = _out1165;
                    _2115_recIdents = _out1166;
                    if (!(_2113_recOwned)) {
                      _2112_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2112_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2112_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2114_recErased;
                    readIdents = _2115_recIdents;
                  }
                } else if (_source79.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2116___mcc_h995 = _source79.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2117_recursiveGen;
                    bool _2118_recOwned;
                    bool _2119_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2120_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1167;
                    bool _out1168;
                    bool _out1169;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1170;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1167, out _out1168, out _out1169, out _out1170);
                    _2117_recursiveGen = _out1167;
                    _2118_recOwned = _out1168;
                    _2119_recErased = _out1169;
                    _2120_recIdents = _out1170;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2117_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2118_recOwned;
                    isErased = _2119_recErased;
                    readIdents = _2120_recIdents;
                  }
                } else if (_source79.is_Array) {
                  DAST._IType _2121___mcc_h997 = _source79.dtor_element;
                  BigInteger _2122___mcc_h998 = _source79.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2123_recursiveGen;
                    bool _2124_recOwned;
                    bool _2125_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2126_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1171;
                    bool _out1172;
                    bool _out1173;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1174;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1171, out _out1172, out _out1173, out _out1174);
                    _2123_recursiveGen = _out1171;
                    _2124_recOwned = _out1172;
                    _2125_recErased = _out1173;
                    _2126_recIdents = _out1174;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2123_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2124_recOwned;
                    isErased = _2125_recErased;
                    readIdents = _2126_recIdents;
                  }
                } else if (_source79.is_Seq) {
                  DAST._IType _2127___mcc_h1001 = _source79.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2128_recursiveGen;
                    bool _2129_recOwned;
                    bool _2130_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2131_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1175;
                    bool _out1176;
                    bool _out1177;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1178;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1175, out _out1176, out _out1177, out _out1178);
                    _2128_recursiveGen = _out1175;
                    _2129_recOwned = _out1176;
                    _2130_recErased = _out1177;
                    _2131_recIdents = _out1178;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2128_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2129_recOwned;
                    isErased = _2130_recErased;
                    readIdents = _2131_recIdents;
                  }
                } else if (_source79.is_Set) {
                  DAST._IType _2132___mcc_h1003 = _source79.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2133_recursiveGen;
                    bool _2134_recOwned;
                    bool _2135_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2136_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1179;
                    bool _out1180;
                    bool _out1181;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1182;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1179, out _out1180, out _out1181, out _out1182);
                    _2133_recursiveGen = _out1179;
                    _2134_recOwned = _out1180;
                    _2135_recErased = _out1181;
                    _2136_recIdents = _out1182;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2133_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2134_recOwned;
                    isErased = _2135_recErased;
                    readIdents = _2136_recIdents;
                  }
                } else if (_source79.is_Multiset) {
                  DAST._IType _2137___mcc_h1005 = _source79.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2138_recursiveGen;
                    bool _2139_recOwned;
                    bool _2140_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2141_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1183;
                    bool _out1184;
                    bool _out1185;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1186;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1183, out _out1184, out _out1185, out _out1186);
                    _2138_recursiveGen = _out1183;
                    _2139_recOwned = _out1184;
                    _2140_recErased = _out1185;
                    _2141_recIdents = _out1186;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2138_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2139_recOwned;
                    isErased = _2140_recErased;
                    readIdents = _2141_recIdents;
                  }
                } else if (_source79.is_Map) {
                  DAST._IType _2142___mcc_h1007 = _source79.dtor_key;
                  DAST._IType _2143___mcc_h1008 = _source79.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2144_recursiveGen;
                    bool _2145_recOwned;
                    bool _2146_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2147_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1187;
                    bool _out1188;
                    bool _out1189;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1190;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1187, out _out1188, out _out1189, out _out1190);
                    _2144_recursiveGen = _out1187;
                    _2145_recOwned = _out1188;
                    _2146_recErased = _out1189;
                    _2147_recIdents = _out1190;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2144_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2145_recOwned;
                    isErased = _2146_recErased;
                    readIdents = _2147_recIdents;
                  }
                } else if (_source79.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2148___mcc_h1011 = _source79.dtor_args;
                  DAST._IType _2149___mcc_h1012 = _source79.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2150_recursiveGen;
                    bool _2151_recOwned;
                    bool _2152_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2153_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1191;
                    bool _out1192;
                    bool _out1193;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1194;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1191, out _out1192, out _out1193, out _out1194);
                    _2150_recursiveGen = _out1191;
                    _2151_recOwned = _out1192;
                    _2152_recErased = _out1193;
                    _2153_recIdents = _out1194;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2150_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2151_recOwned;
                    isErased = _2152_recErased;
                    readIdents = _2153_recIdents;
                  }
                } else if (_source79.is_Primitive) {
                  DAST._IPrimitive _2154___mcc_h1015 = _source79.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2155_recursiveGen;
                    bool _2156_recOwned;
                    bool _2157_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2158_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1195;
                    bool _out1196;
                    bool _out1197;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1198;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1195, out _out1196, out _out1197, out _out1198);
                    _2155_recursiveGen = _out1195;
                    _2156_recOwned = _out1196;
                    _2157_recErased = _out1197;
                    _2158_recIdents = _out1198;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2155_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2156_recOwned;
                    isErased = _2157_recErased;
                    readIdents = _2158_recIdents;
                  }
                } else if (_source79.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2159___mcc_h1017 = _source79.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2160_recursiveGen;
                    bool _2161_recOwned;
                    bool _2162_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2163_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1199;
                    bool _out1200;
                    bool _out1201;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1202;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1199, out _out1200, out _out1201, out _out1202);
                    _2160_recursiveGen = _out1199;
                    _2161_recOwned = _out1200;
                    _2162_recErased = _out1201;
                    _2163_recIdents = _out1202;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2160_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2161_recOwned;
                    isErased = _2162_recErased;
                    readIdents = _2163_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2164___mcc_h1019 = _source79.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2165_recursiveGen;
                    bool _2166_recOwned;
                    bool _2167_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2168_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1203;
                    bool _out1204;
                    bool _out1205;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1206;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1203, out _out1204, out _out1205, out _out1206);
                    _2165_recursiveGen = _out1203;
                    _2166_recOwned = _out1204;
                    _2167_recErased = _out1205;
                    _2168_recIdents = _out1206;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2165_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2166_recOwned;
                    isErased = _2167_recErased;
                    readIdents = _2168_recIdents;
                  }
                }
              } else {
                DAST._IType _source81 = _910___mcc_h306;
                if (_source81.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2169___mcc_h1021 = _source81.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2170___mcc_h1022 = _source81.dtor_typeArgs;
                  DAST._IResolvedType _2171___mcc_h1023 = _source81.dtor_resolved;
                  DAST._IResolvedType _source82 = _2171___mcc_h1023;
                  if (_source82.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2172___mcc_h1027 = _source82.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2173_recursiveGen;
                      bool _2174_recOwned;
                      bool _2175_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2176_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1207;
                      bool _out1208;
                      bool _out1209;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1210;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1207, out _out1208, out _out1209, out _out1210);
                      _2173_recursiveGen = _out1207;
                      _2174_recOwned = _out1208;
                      _2175_recErased = _out1209;
                      _2176_recIdents = _out1210;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2173_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2174_recOwned;
                      isErased = _2175_recErased;
                      readIdents = _2176_recIdents;
                    }
                  } else if (_source82.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2177___mcc_h1029 = _source82.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2178_recursiveGen;
                      bool _2179_recOwned;
                      bool _2180_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2181_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1211;
                      bool _out1212;
                      bool _out1213;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1214;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1211, out _out1212, out _out1213, out _out1214);
                      _2178_recursiveGen = _out1211;
                      _2179_recOwned = _out1212;
                      _2180_recErased = _out1213;
                      _2181_recIdents = _out1214;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2178_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2179_recOwned;
                      isErased = _2180_recErased;
                      readIdents = _2181_recIdents;
                    }
                  } else {
                    DAST._IType _2182___mcc_h1031 = _source82.dtor_Newtype_a0;
                    DAST._IType _2183_b = _2182___mcc_h1031;
                    {
                      if (object.Equals(_903_fromTpe, _2183_b)) {
                        Dafny.ISequence<Dafny.Rune> _2184_recursiveGen;
                        bool _2185_recOwned;
                        bool _2186_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2187_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1215;
                        bool _out1216;
                        bool _out1217;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1218;
                        DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1215, out _out1216, out _out1217, out _out1218);
                        _2184_recursiveGen = _out1215;
                        _2185_recOwned = _out1216;
                        _2186_recErased = _out1217;
                        _2187_recIdents = _out1218;
                        Dafny.ISequence<Dafny.Rune> _2188_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1219;
                        _out1219 = DCOMP.COMP.GenType(_902_toTpe, true, false);
                        _2188_rhsType = _out1219;
                        Dafny.ISequence<Dafny.Rune> _2189_uneraseFn;
                        _2189_uneraseFn = ((_2185_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2188_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2189_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2184_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2185_recOwned;
                        isErased = false;
                        readIdents = _2187_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1220;
                        bool _out1221;
                        bool _out1222;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1223;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_904_expr, _903_fromTpe, _2183_b), _2183_b, _902_toTpe), selfIdent, @params, mustOwn, out _out1220, out _out1221, out _out1222, out _out1223);
                        s = _out1220;
                        isOwned = _out1221;
                        isErased = _out1222;
                        readIdents = _out1223;
                      }
                    }
                  }
                } else if (_source81.is_Nullable) {
                  DAST._IType _2190___mcc_h1033 = _source81.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2191_recursiveGen;
                    bool _2192_recOwned;
                    bool _2193_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2194_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1224;
                    bool _out1225;
                    bool _out1226;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1227;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1224, out _out1225, out _out1226, out _out1227);
                    _2191_recursiveGen = _out1224;
                    _2192_recOwned = _out1225;
                    _2193_recErased = _out1226;
                    _2194_recIdents = _out1227;
                    if (!(_2192_recOwned)) {
                      _2191_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2191_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2191_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2193_recErased;
                    readIdents = _2194_recIdents;
                  }
                } else if (_source81.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2195___mcc_h1035 = _source81.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2196_recursiveGen;
                    bool _2197_recOwned;
                    bool _2198_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2199_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1228;
                    bool _out1229;
                    bool _out1230;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1231;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1228, out _out1229, out _out1230, out _out1231);
                    _2196_recursiveGen = _out1228;
                    _2197_recOwned = _out1229;
                    _2198_recErased = _out1230;
                    _2199_recIdents = _out1231;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2196_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2197_recOwned;
                    isErased = _2198_recErased;
                    readIdents = _2199_recIdents;
                  }
                } else if (_source81.is_Array) {
                  DAST._IType _2200___mcc_h1037 = _source81.dtor_element;
                  BigInteger _2201___mcc_h1038 = _source81.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2202_recursiveGen;
                    bool _2203_recOwned;
                    bool _2204_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2205_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1232;
                    bool _out1233;
                    bool _out1234;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1235;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1232, out _out1233, out _out1234, out _out1235);
                    _2202_recursiveGen = _out1232;
                    _2203_recOwned = _out1233;
                    _2204_recErased = _out1234;
                    _2205_recIdents = _out1235;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2202_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2203_recOwned;
                    isErased = _2204_recErased;
                    readIdents = _2205_recIdents;
                  }
                } else if (_source81.is_Seq) {
                  DAST._IType _2206___mcc_h1041 = _source81.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2207_recursiveGen;
                    bool _2208_recOwned;
                    bool _2209_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2210_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1236;
                    bool _out1237;
                    bool _out1238;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1239;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1236, out _out1237, out _out1238, out _out1239);
                    _2207_recursiveGen = _out1236;
                    _2208_recOwned = _out1237;
                    _2209_recErased = _out1238;
                    _2210_recIdents = _out1239;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2207_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2208_recOwned;
                    isErased = _2209_recErased;
                    readIdents = _2210_recIdents;
                  }
                } else if (_source81.is_Set) {
                  DAST._IType _2211___mcc_h1043 = _source81.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2212_recursiveGen;
                    bool _2213_recOwned;
                    bool _2214_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2215_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1240;
                    bool _out1241;
                    bool _out1242;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1243;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1240, out _out1241, out _out1242, out _out1243);
                    _2212_recursiveGen = _out1240;
                    _2213_recOwned = _out1241;
                    _2214_recErased = _out1242;
                    _2215_recIdents = _out1243;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2212_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2213_recOwned;
                    isErased = _2214_recErased;
                    readIdents = _2215_recIdents;
                  }
                } else if (_source81.is_Multiset) {
                  DAST._IType _2216___mcc_h1045 = _source81.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2217_recursiveGen;
                    bool _2218_recOwned;
                    bool _2219_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2220_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1244;
                    bool _out1245;
                    bool _out1246;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1247;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1244, out _out1245, out _out1246, out _out1247);
                    _2217_recursiveGen = _out1244;
                    _2218_recOwned = _out1245;
                    _2219_recErased = _out1246;
                    _2220_recIdents = _out1247;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2217_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2218_recOwned;
                    isErased = _2219_recErased;
                    readIdents = _2220_recIdents;
                  }
                } else if (_source81.is_Map) {
                  DAST._IType _2221___mcc_h1047 = _source81.dtor_key;
                  DAST._IType _2222___mcc_h1048 = _source81.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2223_recursiveGen;
                    bool _2224_recOwned;
                    bool _2225_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2226_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1248;
                    bool _out1249;
                    bool _out1250;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1251;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1248, out _out1249, out _out1250, out _out1251);
                    _2223_recursiveGen = _out1248;
                    _2224_recOwned = _out1249;
                    _2225_recErased = _out1250;
                    _2226_recIdents = _out1251;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2223_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2224_recOwned;
                    isErased = _2225_recErased;
                    readIdents = _2226_recIdents;
                  }
                } else if (_source81.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2227___mcc_h1051 = _source81.dtor_args;
                  DAST._IType _2228___mcc_h1052 = _source81.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2229_recursiveGen;
                    bool _2230_recOwned;
                    bool _2231_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2232_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1252;
                    bool _out1253;
                    bool _out1254;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1255;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1252, out _out1253, out _out1254, out _out1255);
                    _2229_recursiveGen = _out1252;
                    _2230_recOwned = _out1253;
                    _2231_recErased = _out1254;
                    _2232_recIdents = _out1255;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2229_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2230_recOwned;
                    isErased = _2231_recErased;
                    readIdents = _2232_recIdents;
                  }
                } else if (_source81.is_Primitive) {
                  DAST._IPrimitive _2233___mcc_h1055 = _source81.dtor_Primitive_a0;
                  DAST._IPrimitive _source83 = _2233___mcc_h1055;
                  if (_source83.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2234_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1256;
                      _out1256 = DCOMP.COMP.GenType(_903_fromTpe, true, false);
                      _2234_rhsType = _out1256;
                      Dafny.ISequence<Dafny.Rune> _2235_recursiveGen;
                      bool _2236___v58;
                      bool _2237___v59;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2238_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1257;
                      bool _out1258;
                      bool _out1259;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1260;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, true, out _out1257, out _out1258, out _out1259, out _out1260);
                      _2235_recursiveGen = _out1257;
                      _2236___v58 = _out1258;
                      _2237___v59 = _out1259;
                      _2238_recIdents = _out1260;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _2235_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u32)"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2238_recIdents;
                    }
                  } else if (_source83.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2239_recursiveGen;
                      bool _2240_recOwned;
                      bool _2241_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2242_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1261;
                      bool _out1262;
                      bool _out1263;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1264;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1261, out _out1262, out _out1263, out _out1264);
                      _2239_recursiveGen = _out1261;
                      _2240_recOwned = _out1262;
                      _2241_recErased = _out1263;
                      _2242_recIdents = _out1264;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2239_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2240_recOwned;
                      isErased = _2241_recErased;
                      readIdents = _2242_recIdents;
                    }
                  } else if (_source83.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2243_recursiveGen;
                      bool _2244_recOwned;
                      bool _2245_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2246_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1265;
                      bool _out1266;
                      bool _out1267;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1268;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1265, out _out1266, out _out1267, out _out1268);
                      _2243_recursiveGen = _out1265;
                      _2244_recOwned = _out1266;
                      _2245_recErased = _out1267;
                      _2246_recIdents = _out1268;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2243_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2244_recOwned;
                      isErased = _2245_recErased;
                      readIdents = _2246_recIdents;
                    }
                  } else if (_source83.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2247_recursiveGen;
                      bool _2248_recOwned;
                      bool _2249_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2250_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1269;
                      bool _out1270;
                      bool _out1271;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1272;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1269, out _out1270, out _out1271, out _out1272);
                      _2247_recursiveGen = _out1269;
                      _2248_recOwned = _out1270;
                      _2249_recErased = _out1271;
                      _2250_recIdents = _out1272;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2247_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2248_recOwned;
                      isErased = _2249_recErased;
                      readIdents = _2250_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2251_recursiveGen;
                      bool _2252_recOwned;
                      bool _2253_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2254_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1273;
                      bool _out1274;
                      bool _out1275;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1276;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1273, out _out1274, out _out1275, out _out1276);
                      _2251_recursiveGen = _out1273;
                      _2252_recOwned = _out1274;
                      _2253_recErased = _out1275;
                      _2254_recIdents = _out1276;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2251_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2252_recOwned;
                      isErased = _2253_recErased;
                      readIdents = _2254_recIdents;
                    }
                  }
                } else if (_source81.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2255___mcc_h1057 = _source81.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2256_recursiveGen;
                    bool _2257_recOwned;
                    bool _2258_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2259_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1277;
                    bool _out1278;
                    bool _out1279;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1280;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1277, out _out1278, out _out1279, out _out1280);
                    _2256_recursiveGen = _out1277;
                    _2257_recOwned = _out1278;
                    _2258_recErased = _out1279;
                    _2259_recIdents = _out1280;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2256_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2257_recOwned;
                    isErased = _2258_recErased;
                    readIdents = _2259_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2260___mcc_h1059 = _source81.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2261_recursiveGen;
                    bool _2262_recOwned;
                    bool _2263_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2264_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1281;
                    bool _out1282;
                    bool _out1283;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1284;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1281, out _out1282, out _out1283, out _out1284);
                    _2261_recursiveGen = _out1281;
                    _2262_recOwned = _out1282;
                    _2263_recErased = _out1283;
                    _2264_recIdents = _out1284;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2261_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2262_recOwned;
                    isErased = _2263_recErased;
                    readIdents = _2264_recIdents;
                  }
                }
              }
            } else if (_source46.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _2265___mcc_h1061 = _source46.dtor_Passthrough_a0;
              DAST._IType _source84 = _910___mcc_h306;
              if (_source84.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2266___mcc_h1065 = _source84.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2267___mcc_h1066 = _source84.dtor_typeArgs;
                DAST._IResolvedType _2268___mcc_h1067 = _source84.dtor_resolved;
                DAST._IResolvedType _source85 = _2268___mcc_h1067;
                if (_source85.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2269___mcc_h1071 = _source85.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2270_recursiveGen;
                    bool _2271_recOwned;
                    bool _2272_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2273_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1285;
                    bool _out1286;
                    bool _out1287;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1288;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1285, out _out1286, out _out1287, out _out1288);
                    _2270_recursiveGen = _out1285;
                    _2271_recOwned = _out1286;
                    _2272_recErased = _out1287;
                    _2273_recIdents = _out1288;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2270_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2271_recOwned;
                    isErased = _2272_recErased;
                    readIdents = _2273_recIdents;
                  }
                } else if (_source85.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2274___mcc_h1073 = _source85.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2275_recursiveGen;
                    bool _2276_recOwned;
                    bool _2277_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2278_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1289;
                    bool _out1290;
                    bool _out1291;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1292;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1289, out _out1290, out _out1291, out _out1292);
                    _2275_recursiveGen = _out1289;
                    _2276_recOwned = _out1290;
                    _2277_recErased = _out1291;
                    _2278_recIdents = _out1292;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2275_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2276_recOwned;
                    isErased = _2277_recErased;
                    readIdents = _2278_recIdents;
                  }
                } else {
                  DAST._IType _2279___mcc_h1075 = _source85.dtor_Newtype_a0;
                  DAST._IType _2280_b = _2279___mcc_h1075;
                  {
                    if (object.Equals(_903_fromTpe, _2280_b)) {
                      Dafny.ISequence<Dafny.Rune> _2281_recursiveGen;
                      bool _2282_recOwned;
                      bool _2283_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2284_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1293;
                      bool _out1294;
                      bool _out1295;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1296;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1293, out _out1294, out _out1295, out _out1296);
                      _2281_recursiveGen = _out1293;
                      _2282_recOwned = _out1294;
                      _2283_recErased = _out1295;
                      _2284_recIdents = _out1296;
                      Dafny.ISequence<Dafny.Rune> _2285_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1297;
                      _out1297 = DCOMP.COMP.GenType(_902_toTpe, true, false);
                      _2285_rhsType = _out1297;
                      Dafny.ISequence<Dafny.Rune> _2286_uneraseFn;
                      _2286_uneraseFn = ((_2282_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2285_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2286_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2281_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2282_recOwned;
                      isErased = false;
                      readIdents = _2284_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1298;
                      bool _out1299;
                      bool _out1300;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1301;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_904_expr, _903_fromTpe, _2280_b), _2280_b, _902_toTpe), selfIdent, @params, mustOwn, out _out1298, out _out1299, out _out1300, out _out1301);
                      s = _out1298;
                      isOwned = _out1299;
                      isErased = _out1300;
                      readIdents = _out1301;
                    }
                  }
                }
              } else if (_source84.is_Nullable) {
                DAST._IType _2287___mcc_h1077 = _source84.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2288_recursiveGen;
                  bool _2289_recOwned;
                  bool _2290_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2291_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1302;
                  bool _out1303;
                  bool _out1304;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1305;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1302, out _out1303, out _out1304, out _out1305);
                  _2288_recursiveGen = _out1302;
                  _2289_recOwned = _out1303;
                  _2290_recErased = _out1304;
                  _2291_recIdents = _out1305;
                  if (!(_2289_recOwned)) {
                    _2288_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2288_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2288_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2290_recErased;
                  readIdents = _2291_recIdents;
                }
              } else if (_source84.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2292___mcc_h1079 = _source84.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2293_recursiveGen;
                  bool _2294_recOwned;
                  bool _2295_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2296_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1306;
                  bool _out1307;
                  bool _out1308;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1309;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1306, out _out1307, out _out1308, out _out1309);
                  _2293_recursiveGen = _out1306;
                  _2294_recOwned = _out1307;
                  _2295_recErased = _out1308;
                  _2296_recIdents = _out1309;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2293_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2294_recOwned;
                  isErased = _2295_recErased;
                  readIdents = _2296_recIdents;
                }
              } else if (_source84.is_Array) {
                DAST._IType _2297___mcc_h1081 = _source84.dtor_element;
                BigInteger _2298___mcc_h1082 = _source84.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2299_recursiveGen;
                  bool _2300_recOwned;
                  bool _2301_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2302_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1310;
                  bool _out1311;
                  bool _out1312;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1313;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1310, out _out1311, out _out1312, out _out1313);
                  _2299_recursiveGen = _out1310;
                  _2300_recOwned = _out1311;
                  _2301_recErased = _out1312;
                  _2302_recIdents = _out1313;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2299_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2300_recOwned;
                  isErased = _2301_recErased;
                  readIdents = _2302_recIdents;
                }
              } else if (_source84.is_Seq) {
                DAST._IType _2303___mcc_h1085 = _source84.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2304_recursiveGen;
                  bool _2305_recOwned;
                  bool _2306_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2307_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1314;
                  bool _out1315;
                  bool _out1316;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1317;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1314, out _out1315, out _out1316, out _out1317);
                  _2304_recursiveGen = _out1314;
                  _2305_recOwned = _out1315;
                  _2306_recErased = _out1316;
                  _2307_recIdents = _out1317;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2304_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2305_recOwned;
                  isErased = _2306_recErased;
                  readIdents = _2307_recIdents;
                }
              } else if (_source84.is_Set) {
                DAST._IType _2308___mcc_h1087 = _source84.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2309_recursiveGen;
                  bool _2310_recOwned;
                  bool _2311_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2312_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1318;
                  bool _out1319;
                  bool _out1320;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1321;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1318, out _out1319, out _out1320, out _out1321);
                  _2309_recursiveGen = _out1318;
                  _2310_recOwned = _out1319;
                  _2311_recErased = _out1320;
                  _2312_recIdents = _out1321;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2309_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2310_recOwned;
                  isErased = _2311_recErased;
                  readIdents = _2312_recIdents;
                }
              } else if (_source84.is_Multiset) {
                DAST._IType _2313___mcc_h1089 = _source84.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2314_recursiveGen;
                  bool _2315_recOwned;
                  bool _2316_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2317_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1322;
                  bool _out1323;
                  bool _out1324;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1325;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1322, out _out1323, out _out1324, out _out1325);
                  _2314_recursiveGen = _out1322;
                  _2315_recOwned = _out1323;
                  _2316_recErased = _out1324;
                  _2317_recIdents = _out1325;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2314_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2315_recOwned;
                  isErased = _2316_recErased;
                  readIdents = _2317_recIdents;
                }
              } else if (_source84.is_Map) {
                DAST._IType _2318___mcc_h1091 = _source84.dtor_key;
                DAST._IType _2319___mcc_h1092 = _source84.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2320_recursiveGen;
                  bool _2321_recOwned;
                  bool _2322_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2323_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1326;
                  bool _out1327;
                  bool _out1328;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1329;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1326, out _out1327, out _out1328, out _out1329);
                  _2320_recursiveGen = _out1326;
                  _2321_recOwned = _out1327;
                  _2322_recErased = _out1328;
                  _2323_recIdents = _out1329;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2320_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2321_recOwned;
                  isErased = _2322_recErased;
                  readIdents = _2323_recIdents;
                }
              } else if (_source84.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2324___mcc_h1095 = _source84.dtor_args;
                DAST._IType _2325___mcc_h1096 = _source84.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2326_recursiveGen;
                  bool _2327_recOwned;
                  bool _2328_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2329_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1330;
                  bool _out1331;
                  bool _out1332;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1333;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1330, out _out1331, out _out1332, out _out1333);
                  _2326_recursiveGen = _out1330;
                  _2327_recOwned = _out1331;
                  _2328_recErased = _out1332;
                  _2329_recIdents = _out1333;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2326_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2327_recOwned;
                  isErased = _2328_recErased;
                  readIdents = _2329_recIdents;
                }
              } else if (_source84.is_Primitive) {
                DAST._IPrimitive _2330___mcc_h1099 = _source84.dtor_Primitive_a0;
                DAST._IPrimitive _source86 = _2330___mcc_h1099;
                if (_source86.is_Int) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2331_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out1334;
                    _out1334 = DCOMP.COMP.GenType(_903_fromTpe, true, false);
                    _2331_rhsType = _out1334;
                    Dafny.ISequence<Dafny.Rune> _2332_recursiveGen;
                    bool _2333___v54;
                    bool _2334___v55;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2335_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1335;
                    bool _out1336;
                    bool _out1337;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1338;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, true, out _out1335, out _out1336, out _out1337, out _out1338);
                    _2332_recursiveGen = _out1335;
                    _2333___v54 = _out1336;
                    _2334___v55 = _out1337;
                    _2335_recIdents = _out1338;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _2332_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _2335_recIdents;
                  }
                } else if (_source86.is_Real) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2336_recursiveGen;
                    bool _2337_recOwned;
                    bool _2338_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2339_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1339;
                    bool _out1340;
                    bool _out1341;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1342;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1339, out _out1340, out _out1341, out _out1342);
                    _2336_recursiveGen = _out1339;
                    _2337_recOwned = _out1340;
                    _2338_recErased = _out1341;
                    _2339_recIdents = _out1342;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2336_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2337_recOwned;
                    isErased = _2338_recErased;
                    readIdents = _2339_recIdents;
                  }
                } else if (_source86.is_String) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2340_recursiveGen;
                    bool _2341_recOwned;
                    bool _2342_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2343_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1343;
                    bool _out1344;
                    bool _out1345;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1346;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1343, out _out1344, out _out1345, out _out1346);
                    _2340_recursiveGen = _out1343;
                    _2341_recOwned = _out1344;
                    _2342_recErased = _out1345;
                    _2343_recIdents = _out1346;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2340_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2341_recOwned;
                    isErased = _2342_recErased;
                    readIdents = _2343_recIdents;
                  }
                } else if (_source86.is_Bool) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2344_recursiveGen;
                    bool _2345_recOwned;
                    bool _2346_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2347_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1347;
                    bool _out1348;
                    bool _out1349;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1350;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1347, out _out1348, out _out1349, out _out1350);
                    _2344_recursiveGen = _out1347;
                    _2345_recOwned = _out1348;
                    _2346_recErased = _out1349;
                    _2347_recIdents = _out1350;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2344_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2345_recOwned;
                    isErased = _2346_recErased;
                    readIdents = _2347_recIdents;
                  }
                } else {
                  {
                    Dafny.ISequence<Dafny.Rune> _2348_recursiveGen;
                    bool _2349_recOwned;
                    bool _2350_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2351_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1351;
                    bool _out1352;
                    bool _out1353;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1354;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1351, out _out1352, out _out1353, out _out1354);
                    _2348_recursiveGen = _out1351;
                    _2349_recOwned = _out1352;
                    _2350_recErased = _out1353;
                    _2351_recIdents = _out1354;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2348_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2349_recOwned;
                    isErased = _2350_recErased;
                    readIdents = _2351_recIdents;
                  }
                }
              } else if (_source84.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2352___mcc_h1101 = _source84.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2353_recursiveGen;
                  bool _2354___v62;
                  bool _2355___v63;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2356_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1355;
                  bool _out1356;
                  bool _out1357;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1358;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, true, out _out1355, out _out1356, out _out1357, out _out1358);
                  _2353_recursiveGen = _out1355;
                  _2354___v62 = _out1356;
                  _2355___v63 = _out1357;
                  _2356_recIdents = _out1358;
                  Dafny.ISequence<Dafny.Rune> _2357_toTpeGen;
                  Dafny.ISequence<Dafny.Rune> _out1359;
                  _out1359 = DCOMP.COMP.GenType(_902_toTpe, true, false);
                  _2357_toTpeGen = _out1359;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2353_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _2357_toTpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = true;
                  readIdents = _2356_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2358___mcc_h1103 = _source84.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2359_recursiveGen;
                  bool _2360_recOwned;
                  bool _2361_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2362_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1360;
                  bool _out1361;
                  bool _out1362;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1363;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1360, out _out1361, out _out1362, out _out1363);
                  _2359_recursiveGen = _out1360;
                  _2360_recOwned = _out1361;
                  _2361_recErased = _out1362;
                  _2362_recIdents = _out1363;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2359_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2360_recOwned;
                  isErased = _2361_recErased;
                  readIdents = _2362_recIdents;
                }
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2363___mcc_h1105 = _source46.dtor_TypeArg_a0;
              DAST._IType _source87 = _910___mcc_h306;
              if (_source87.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2364___mcc_h1109 = _source87.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2365___mcc_h1110 = _source87.dtor_typeArgs;
                DAST._IResolvedType _2366___mcc_h1111 = _source87.dtor_resolved;
                DAST._IResolvedType _source88 = _2366___mcc_h1111;
                if (_source88.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2367___mcc_h1115 = _source88.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2368_recursiveGen;
                    bool _2369_recOwned;
                    bool _2370_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2371_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1364;
                    bool _out1365;
                    bool _out1366;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1367;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1364, out _out1365, out _out1366, out _out1367);
                    _2368_recursiveGen = _out1364;
                    _2369_recOwned = _out1365;
                    _2370_recErased = _out1366;
                    _2371_recIdents = _out1367;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2368_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2369_recOwned;
                    isErased = _2370_recErased;
                    readIdents = _2371_recIdents;
                  }
                } else if (_source88.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2372___mcc_h1117 = _source88.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2373_recursiveGen;
                    bool _2374_recOwned;
                    bool _2375_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2376_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1368;
                    bool _out1369;
                    bool _out1370;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1371;
                    DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1368, out _out1369, out _out1370, out _out1371);
                    _2373_recursiveGen = _out1368;
                    _2374_recOwned = _out1369;
                    _2375_recErased = _out1370;
                    _2376_recIdents = _out1371;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2373_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2374_recOwned;
                    isErased = _2375_recErased;
                    readIdents = _2376_recIdents;
                  }
                } else {
                  DAST._IType _2377___mcc_h1119 = _source88.dtor_Newtype_a0;
                  DAST._IType _2378_b = _2377___mcc_h1119;
                  {
                    if (object.Equals(_903_fromTpe, _2378_b)) {
                      Dafny.ISequence<Dafny.Rune> _2379_recursiveGen;
                      bool _2380_recOwned;
                      bool _2381_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2382_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1372;
                      bool _out1373;
                      bool _out1374;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1375;
                      DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1372, out _out1373, out _out1374, out _out1375);
                      _2379_recursiveGen = _out1372;
                      _2380_recOwned = _out1373;
                      _2381_recErased = _out1374;
                      _2382_recIdents = _out1375;
                      Dafny.ISequence<Dafny.Rune> _2383_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1376;
                      _out1376 = DCOMP.COMP.GenType(_902_toTpe, true, false);
                      _2383_rhsType = _out1376;
                      Dafny.ISequence<Dafny.Rune> _2384_uneraseFn;
                      _2384_uneraseFn = ((_2380_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2383_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2384_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2379_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2380_recOwned;
                      isErased = false;
                      readIdents = _2382_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1377;
                      bool _out1378;
                      bool _out1379;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1380;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_904_expr, _903_fromTpe, _2378_b), _2378_b, _902_toTpe), selfIdent, @params, mustOwn, out _out1377, out _out1378, out _out1379, out _out1380);
                      s = _out1377;
                      isOwned = _out1378;
                      isErased = _out1379;
                      readIdents = _out1380;
                    }
                  }
                }
              } else if (_source87.is_Nullable) {
                DAST._IType _2385___mcc_h1121 = _source87.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2386_recursiveGen;
                  bool _2387_recOwned;
                  bool _2388_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2389_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1381;
                  bool _out1382;
                  bool _out1383;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1384;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1381, out _out1382, out _out1383, out _out1384);
                  _2386_recursiveGen = _out1381;
                  _2387_recOwned = _out1382;
                  _2388_recErased = _out1383;
                  _2389_recIdents = _out1384;
                  if (!(_2387_recOwned)) {
                    _2386_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2386_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2386_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2388_recErased;
                  readIdents = _2389_recIdents;
                }
              } else if (_source87.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2390___mcc_h1123 = _source87.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2391_recursiveGen;
                  bool _2392_recOwned;
                  bool _2393_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2394_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1385;
                  bool _out1386;
                  bool _out1387;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1388;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1385, out _out1386, out _out1387, out _out1388);
                  _2391_recursiveGen = _out1385;
                  _2392_recOwned = _out1386;
                  _2393_recErased = _out1387;
                  _2394_recIdents = _out1388;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2391_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2392_recOwned;
                  isErased = _2393_recErased;
                  readIdents = _2394_recIdents;
                }
              } else if (_source87.is_Array) {
                DAST._IType _2395___mcc_h1125 = _source87.dtor_element;
                BigInteger _2396___mcc_h1126 = _source87.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2397_recursiveGen;
                  bool _2398_recOwned;
                  bool _2399_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2400_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1389;
                  bool _out1390;
                  bool _out1391;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1392;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1389, out _out1390, out _out1391, out _out1392);
                  _2397_recursiveGen = _out1389;
                  _2398_recOwned = _out1390;
                  _2399_recErased = _out1391;
                  _2400_recIdents = _out1392;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2397_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2398_recOwned;
                  isErased = _2399_recErased;
                  readIdents = _2400_recIdents;
                }
              } else if (_source87.is_Seq) {
                DAST._IType _2401___mcc_h1129 = _source87.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2402_recursiveGen;
                  bool _2403_recOwned;
                  bool _2404_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2405_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1393;
                  bool _out1394;
                  bool _out1395;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1396;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1393, out _out1394, out _out1395, out _out1396);
                  _2402_recursiveGen = _out1393;
                  _2403_recOwned = _out1394;
                  _2404_recErased = _out1395;
                  _2405_recIdents = _out1396;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2402_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2403_recOwned;
                  isErased = _2404_recErased;
                  readIdents = _2405_recIdents;
                }
              } else if (_source87.is_Set) {
                DAST._IType _2406___mcc_h1131 = _source87.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2407_recursiveGen;
                  bool _2408_recOwned;
                  bool _2409_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2410_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1397;
                  bool _out1398;
                  bool _out1399;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1400;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1397, out _out1398, out _out1399, out _out1400);
                  _2407_recursiveGen = _out1397;
                  _2408_recOwned = _out1398;
                  _2409_recErased = _out1399;
                  _2410_recIdents = _out1400;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2407_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2408_recOwned;
                  isErased = _2409_recErased;
                  readIdents = _2410_recIdents;
                }
              } else if (_source87.is_Multiset) {
                DAST._IType _2411___mcc_h1133 = _source87.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2412_recursiveGen;
                  bool _2413_recOwned;
                  bool _2414_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2415_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1401;
                  bool _out1402;
                  bool _out1403;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1404;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1401, out _out1402, out _out1403, out _out1404);
                  _2412_recursiveGen = _out1401;
                  _2413_recOwned = _out1402;
                  _2414_recErased = _out1403;
                  _2415_recIdents = _out1404;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2412_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2413_recOwned;
                  isErased = _2414_recErased;
                  readIdents = _2415_recIdents;
                }
              } else if (_source87.is_Map) {
                DAST._IType _2416___mcc_h1135 = _source87.dtor_key;
                DAST._IType _2417___mcc_h1136 = _source87.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2418_recursiveGen;
                  bool _2419_recOwned;
                  bool _2420_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2421_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1405;
                  bool _out1406;
                  bool _out1407;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1408;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1405, out _out1406, out _out1407, out _out1408);
                  _2418_recursiveGen = _out1405;
                  _2419_recOwned = _out1406;
                  _2420_recErased = _out1407;
                  _2421_recIdents = _out1408;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2418_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2419_recOwned;
                  isErased = _2420_recErased;
                  readIdents = _2421_recIdents;
                }
              } else if (_source87.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2422___mcc_h1139 = _source87.dtor_args;
                DAST._IType _2423___mcc_h1140 = _source87.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2424_recursiveGen;
                  bool _2425_recOwned;
                  bool _2426_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2427_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1409;
                  bool _out1410;
                  bool _out1411;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1412;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1409, out _out1410, out _out1411, out _out1412);
                  _2424_recursiveGen = _out1409;
                  _2425_recOwned = _out1410;
                  _2426_recErased = _out1411;
                  _2427_recIdents = _out1412;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2424_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2425_recOwned;
                  isErased = _2426_recErased;
                  readIdents = _2427_recIdents;
                }
              } else if (_source87.is_Primitive) {
                DAST._IPrimitive _2428___mcc_h1143 = _source87.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2429_recursiveGen;
                  bool _2430_recOwned;
                  bool _2431_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2432_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1413;
                  bool _out1414;
                  bool _out1415;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1416;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1413, out _out1414, out _out1415, out _out1416);
                  _2429_recursiveGen = _out1413;
                  _2430_recOwned = _out1414;
                  _2431_recErased = _out1415;
                  _2432_recIdents = _out1416;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2429_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2430_recOwned;
                  isErased = _2431_recErased;
                  readIdents = _2432_recIdents;
                }
              } else if (_source87.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2433___mcc_h1145 = _source87.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2434_recursiveGen;
                  bool _2435_recOwned;
                  bool _2436_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2437_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1417;
                  bool _out1418;
                  bool _out1419;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1420;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1417, out _out1418, out _out1419, out _out1420);
                  _2434_recursiveGen = _out1417;
                  _2435_recOwned = _out1418;
                  _2436_recErased = _out1419;
                  _2437_recIdents = _out1420;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2434_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2435_recOwned;
                  isErased = _2436_recErased;
                  readIdents = _2437_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2438___mcc_h1147 = _source87.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2439_recursiveGen;
                  bool _2440_recOwned;
                  bool _2441_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2442_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1421;
                  bool _out1422;
                  bool _out1423;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1424;
                  DCOMP.COMP.GenExpr(_904_expr, selfIdent, @params, mustOwn, out _out1421, out _out1422, out _out1423, out _out1424);
                  _2439_recursiveGen = _out1421;
                  _2440_recOwned = _out1422;
                  _2441_recErased = _out1423;
                  _2442_recIdents = _out1424;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2439_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2440_recOwned;
                  isErased = _2441_recErased;
                  readIdents = _2442_recIdents;
                }
              }
            }
          }
        }
      } else if (_source39.is_SeqConstruct) {
        DAST._IExpression _2443___mcc_h26 = _source39.dtor_length;
        DAST._IExpression _2444___mcc_h27 = _source39.dtor_elem;
        DAST._IExpression _2445_expr = _2444___mcc_h27;
        DAST._IExpression _2446_length = _2443___mcc_h26;
        {
          Dafny.ISequence<Dafny.Rune> _2447_recursiveGen;
          bool _2448___v65;
          bool _2449_eErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2450_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1425;
          bool _out1426;
          bool _out1427;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1428;
          DCOMP.COMP.GenExpr(_2445_expr, selfIdent, @params, true, out _out1425, out _out1426, out _out1427, out _out1428);
          _2447_recursiveGen = _out1425;
          _2448___v65 = _out1426;
          _2449_eErased = _out1427;
          _2450_recIdents = _out1428;
          Dafny.ISequence<Dafny.Rune> _2451_lengthGen;
          bool _2452___v66;
          bool _2453_lengthErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2454_lengthIdents;
          Dafny.ISequence<Dafny.Rune> _out1429;
          bool _out1430;
          bool _out1431;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1432;
          DCOMP.COMP.GenExpr(_2446_length, selfIdent, @params, true, out _out1429, out _out1430, out _out1431, out _out1432);
          _2451_lengthGen = _out1429;
          _2452___v66 = _out1430;
          _2453_lengthErased = _out1431;
          _2454_lengthIdents = _out1432;
          if (!(_2453_lengthErased)) {
            _2451_lengthGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2451_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), _2447_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), _2451_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer.0(&i)).collect::<Vec<_>>()\n}"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2450_recIdents, _2454_lengthIdents);
          isOwned = true;
          isErased = _2449_eErased;
        }
      } else if (_source39.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _2455___mcc_h28 = _source39.dtor_elements;
        DAST._IType _2456___mcc_h29 = _source39.dtor_typ;
        DAST._IType _2457_typ = _2456___mcc_h29;
        Dafny.ISequence<DAST._IExpression> _2458_exprs = _2455___mcc_h28;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _2459_genTpe;
          Dafny.ISequence<Dafny.Rune> _out1433;
          _out1433 = DCOMP.COMP.GenType(_2457_typ, false, false);
          _2459_genTpe = _out1433;
          BigInteger _2460_i;
          _2460_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(vec![");
          _2460_i = BigInteger.Zero;
          while ((_2460_i) < (new BigInteger((_2458_exprs).Count))) {
            if ((_2460_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2461_recursiveGen;
            bool _2462___v67;
            bool _2463_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2464_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1434;
            bool _out1435;
            bool _out1436;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1437;
            DCOMP.COMP.GenExpr((_2458_exprs).Select(_2460_i), selfIdent, @params, true, out _out1434, out _out1435, out _out1436, out _out1437);
            _2461_recursiveGen = _out1434;
            _2462___v67 = _out1435;
            _2463_isErased = _out1436;
            _2464_recIdents = _out1437;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2464_recIdents);
            if (_2463_isErased) {
              _2461_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2461_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _2461_recursiveGen);
            _2460_i = (_2460_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("] as Vec<")), _2459_genTpe), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source39.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _2465___mcc_h30 = _source39.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _2466_exprs = _2465___mcc_h30;
        {
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>> _2467_generatedValues;
          _2467_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2468_i;
          _2468_i = BigInteger.Zero;
          bool _2469_allErased;
          _2469_allErased = true;
          while ((_2468_i) < (new BigInteger((_2466_exprs).Count))) {
            Dafny.ISequence<Dafny.Rune> _2470_recursiveGen;
            bool _2471___v68;
            bool _2472_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2473_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1438;
            bool _out1439;
            bool _out1440;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1441;
            DCOMP.COMP.GenExpr((_2466_exprs).Select(_2468_i), selfIdent, @params, true, out _out1438, out _out1439, out _out1440, out _out1441);
            _2470_recursiveGen = _out1438;
            _2471___v68 = _out1439;
            _2472_isErased = _out1440;
            _2473_recIdents = _out1441;
            _2469_allErased = (_2469_allErased) && (_2472_isErased);
            _2467_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.Concat(_2467_generatedValues, Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements(_System.Tuple2<Dafny.ISequence<Dafny.Rune>, bool>.create(_2470_recursiveGen, _2472_isErased)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2473_recIdents);
            _2468_i = (_2468_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _2468_i = BigInteger.Zero;
          while ((_2468_i) < (new BigInteger((_2467_generatedValues).Count))) {
            if ((_2468_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2474_gen;
            _2474_gen = ((_2467_generatedValues).Select(_2468_i)).dtor__0;
            if ((((_2467_generatedValues).Select(_2468_i)).dtor__1) && (!(_2469_allErased))) {
              _2474_gen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2474_gen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _2474_gen);
            _2468_i = (_2468_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashSet<_>>()"));
          isOwned = true;
          isErased = _2469_allErased;
        }
      } else if (_source39.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2475___mcc_h31 = _source39.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2476_mapElems = _2475___mcc_h31;
        {
          Dafny.ISequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>> _2477_generatedValues;
          _2477_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2478_i;
          _2478_i = BigInteger.Zero;
          bool _2479_allErased;
          _2479_allErased = true;
          while ((_2478_i) < (new BigInteger((_2476_mapElems).Count))) {
            Dafny.ISequence<Dafny.Rune> _2480_recursiveGenKey;
            bool _2481___v69;
            bool _2482_isErasedKey;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2483_recIdentsKey;
            Dafny.ISequence<Dafny.Rune> _out1442;
            bool _out1443;
            bool _out1444;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1445;
            DCOMP.COMP.GenExpr(((_2476_mapElems).Select(_2478_i)).dtor__0, selfIdent, @params, true, out _out1442, out _out1443, out _out1444, out _out1445);
            _2480_recursiveGenKey = _out1442;
            _2481___v69 = _out1443;
            _2482_isErasedKey = _out1444;
            _2483_recIdentsKey = _out1445;
            Dafny.ISequence<Dafny.Rune> _2484_recursiveGenValue;
            bool _2485___v70;
            bool _2486_isErasedValue;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2487_recIdentsValue;
            Dafny.ISequence<Dafny.Rune> _out1446;
            bool _out1447;
            bool _out1448;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1449;
            DCOMP.COMP.GenExpr(((_2476_mapElems).Select(_2478_i)).dtor__1, selfIdent, @params, true, out _out1446, out _out1447, out _out1448, out _out1449);
            _2484_recursiveGenValue = _out1446;
            _2485___v70 = _out1447;
            _2486_isErasedValue = _out1448;
            _2487_recIdentsValue = _out1449;
            _2479_allErased = ((_2479_allErased) && (_2482_isErasedKey)) && (_2486_isErasedValue);
            _2477_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.Concat(_2477_generatedValues, Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements(_System.Tuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>.create(_2480_recursiveGenKey, _2484_recursiveGenValue, _2482_isErasedKey, _2486_isErasedValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2483_recIdentsKey), _2487_recIdentsValue);
            _2478_i = (_2478_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _2478_i = BigInteger.Zero;
          while ((_2478_i) < (new BigInteger((_2477_generatedValues).Count))) {
            if ((_2478_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2488_genKey;
            _2488_genKey = ((_2477_generatedValues).Select(_2478_i)).dtor__0;
            Dafny.ISequence<Dafny.Rune> _2489_genValue;
            _2489_genValue = ((_2477_generatedValues).Select(_2478_i)).dtor__1;
            if ((((_2477_generatedValues).Select(_2478_i)).dtor__2) && (!(_2479_allErased))) {
              _2488_genKey = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2488_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if ((((_2477_generatedValues).Select(_2478_i)).dtor__3) && (!(_2479_allErased))) {
              _2489_genValue = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2489_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2488_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2489_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _2478_i = (_2478_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashMap<_, _>>()"));
          isOwned = true;
          isErased = _2479_allErased;
        }
      } else if (_source39.is_This) {
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source89 = selfIdent;
          if (_source89.is_Some) {
            Dafny.ISequence<Dafny.Rune> _2490___mcc_h1149 = _source89.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _2491_id = _2490___mcc_h1149;
            {
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(_2491_id, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                isOwned = true;
              } else {
                if ((_2491_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _2491_id);
                }
                isOwned = false;
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2491_id);
              isErased = false;
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")");
              isOwned = true;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
              isErased = true;
            }
          }
        }
      } else if (_source39.is_Ite) {
        DAST._IExpression _2492___mcc_h32 = _source39.dtor_cond;
        DAST._IExpression _2493___mcc_h33 = _source39.dtor_thn;
        DAST._IExpression _2494___mcc_h34 = _source39.dtor_els;
        DAST._IExpression _2495_f = _2494___mcc_h34;
        DAST._IExpression _2496_t = _2493___mcc_h33;
        DAST._IExpression _2497_cond = _2492___mcc_h32;
        {
          Dafny.ISequence<Dafny.Rune> _2498_condString;
          bool _2499___v71;
          bool _2500_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2501_recIdentsCond;
          Dafny.ISequence<Dafny.Rune> _out1450;
          bool _out1451;
          bool _out1452;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1453;
          DCOMP.COMP.GenExpr(_2497_cond, selfIdent, @params, true, out _out1450, out _out1451, out _out1452, out _out1453);
          _2498_condString = _out1450;
          _2499___v71 = _out1451;
          _2500_condErased = _out1452;
          _2501_recIdentsCond = _out1453;
          if (!(_2500_condErased)) {
            _2498_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2498_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          Dafny.ISequence<Dafny.Rune> _2502___v72;
          bool _2503_tHasToBeOwned;
          bool _2504___v73;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2505___v74;
          Dafny.ISequence<Dafny.Rune> _out1454;
          bool _out1455;
          bool _out1456;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1457;
          DCOMP.COMP.GenExpr(_2496_t, selfIdent, @params, mustOwn, out _out1454, out _out1455, out _out1456, out _out1457);
          _2502___v72 = _out1454;
          _2503_tHasToBeOwned = _out1455;
          _2504___v73 = _out1456;
          _2505___v74 = _out1457;
          Dafny.ISequence<Dafny.Rune> _2506_fString;
          bool _2507_fOwned;
          bool _2508_fErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2509_recIdentsF;
          Dafny.ISequence<Dafny.Rune> _out1458;
          bool _out1459;
          bool _out1460;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1461;
          DCOMP.COMP.GenExpr(_2495_f, selfIdent, @params, _2503_tHasToBeOwned, out _out1458, out _out1459, out _out1460, out _out1461);
          _2506_fString = _out1458;
          _2507_fOwned = _out1459;
          _2508_fErased = _out1460;
          _2509_recIdentsF = _out1461;
          Dafny.ISequence<Dafny.Rune> _2510_tString;
          bool _2511___v75;
          bool _2512_tErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2513_recIdentsT;
          Dafny.ISequence<Dafny.Rune> _out1462;
          bool _out1463;
          bool _out1464;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1465;
          DCOMP.COMP.GenExpr(_2496_t, selfIdent, @params, _2507_fOwned, out _out1462, out _out1463, out _out1464, out _out1465);
          _2510_tString = _out1462;
          _2511___v75 = _out1463;
          _2512_tErased = _out1464;
          _2513_recIdentsT = _out1465;
          if ((!(_2508_fErased)) || (!(_2512_tErased))) {
            if (_2508_fErased) {
              _2506_fString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2506_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (_2512_tErased) {
              _2510_tString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2510_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _2498_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _2510_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _2506_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})"));
          isOwned = _2507_fOwned;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2501_recIdentsCond, _2513_recIdentsT), _2509_recIdentsF);
          isErased = (_2508_fErased) || (_2512_tErased);
        }
      } else if (_source39.is_UnOp) {
        DAST._IUnaryOp _2514___mcc_h35 = _source39.dtor_unOp;
        DAST._IExpression _2515___mcc_h36 = _source39.dtor_expr;
        DAST._IUnaryOp _source90 = _2514___mcc_h35;
        if (_source90.is_Not) {
          DAST._IExpression _2516_e = _2515___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _2517_recursiveGen;
            bool _2518___v76;
            bool _2519_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2520_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1466;
            bool _out1467;
            bool _out1468;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1469;
            DCOMP.COMP.GenExpr(_2516_e, selfIdent, @params, true, out _out1466, out _out1467, out _out1468, out _out1469);
            _2517_recursiveGen = _out1466;
            _2518___v76 = _out1467;
            _2519_recErased = _out1468;
            _2520_recIdents = _out1469;
            if (!(_2519_recErased)) {
              _2517_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2517_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _2517_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _2520_recIdents;
            isErased = true;
          }
        } else if (_source90.is_BitwiseNot) {
          DAST._IExpression _2521_e = _2515___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _2522_recursiveGen;
            bool _2523___v77;
            bool _2524_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2525_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1470;
            bool _out1471;
            bool _out1472;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1473;
            DCOMP.COMP.GenExpr(_2521_e, selfIdent, @params, true, out _out1470, out _out1471, out _out1472, out _out1473);
            _2522_recursiveGen = _out1470;
            _2523___v77 = _out1471;
            _2524_recErased = _out1472;
            _2525_recIdents = _out1473;
            if (!(_2524_recErased)) {
              _2522_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2522_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~("), _2522_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _2525_recIdents;
            isErased = true;
          }
        } else {
          DAST._IExpression _2526_e = _2515___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _2527_recursiveGen;
            bool _2528_recOwned;
            bool _2529_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2530_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1474;
            bool _out1475;
            bool _out1476;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1477;
            DCOMP.COMP.GenExpr(_2526_e, selfIdent, @params, false, out _out1474, out _out1475, out _out1476, out _out1477);
            _2527_recursiveGen = _out1474;
            _2528_recOwned = _out1475;
            _2529_recErased = _out1476;
            _2530_recIdents = _out1477;
            if (!(_2529_recErased)) {
              Dafny.ISequence<Dafny.Rune> _2531_eraseFn;
              _2531_eraseFn = ((_2528_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
              _2527_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _2531_eraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2527_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _2527_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").len())"));
            isOwned = true;
            readIdents = _2530_recIdents;
            isErased = true;
          }
        }
      } else if (_source39.is_BinOp) {
        DAST._IBinOp _2532___mcc_h37 = _source39.dtor_op;
        DAST._IExpression _2533___mcc_h38 = _source39.dtor_left;
        DAST._IExpression _2534___mcc_h39 = _source39.dtor_right;
        DAST._IExpression _2535_r = _2534___mcc_h39;
        DAST._IExpression _2536_l = _2533___mcc_h38;
        DAST._IBinOp _2537_op = _2532___mcc_h37;
        {
          Dafny.ISequence<Dafny.Rune> _2538_left;
          bool _2539___v78;
          bool _2540_leftErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2541_recIdentsL;
          Dafny.ISequence<Dafny.Rune> _out1478;
          bool _out1479;
          bool _out1480;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1481;
          DCOMP.COMP.GenExpr(_2536_l, selfIdent, @params, true, out _out1478, out _out1479, out _out1480, out _out1481);
          _2538_left = _out1478;
          _2539___v78 = _out1479;
          _2540_leftErased = _out1480;
          _2541_recIdentsL = _out1481;
          Dafny.ISequence<Dafny.Rune> _2542_right;
          bool _2543___v79;
          bool _2544_rightErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2545_recIdentsR;
          Dafny.ISequence<Dafny.Rune> _out1482;
          bool _out1483;
          bool _out1484;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1485;
          DCOMP.COMP.GenExpr(_2535_r, selfIdent, @params, true, out _out1482, out _out1483, out _out1484, out _out1485);
          _2542_right = _out1482;
          _2543___v79 = _out1483;
          _2544_rightErased = _out1484;
          _2545_recIdentsR = _out1485;
          DAST._IBinOp _source91 = _2537_op;
          if (_source91.is_Eq) {
            bool _2546___mcc_h1150 = _source91.dtor_referential;
            bool _2547___mcc_h1151 = _source91.dtor_nullable;
            {
              if (!(_2540_leftErased)) {
                _2538_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2544_rightErased)) {
                _2542_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source92 = _2537_op;
              if (_source92.is_Eq) {
                bool _2548___mcc_h1160 = _source92.dtor_referential;
                bool _2549___mcc_h1161 = _source92.dtor_nullable;
                bool _2550_nullable = _2549___mcc_h1161;
                bool _2551_referential = _2548___mcc_h1160;
                {
                  if (_2551_referential) {
                    if (_2550_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2538_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2542_right);
                  }
                }
              } else if (_source92.is_Neq) {
                bool _2552___mcc_h1162 = _source92.dtor_referential;
                bool _2553___mcc_h1163 = _source92.dtor_nullable;
                bool _2554_nullable = _2553___mcc_h1163;
                bool _2555_referential = _2552___mcc_h1162;
                {
                  if (_2555_referential) {
                    if (_2554_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2538_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2542_right);
                  }
                }
              } else if (_source92.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source92.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source92.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source92.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2556___mcc_h1164 = _source92.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2557_op = _2556___mcc_h1164;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2557_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source91.is_Neq) {
            bool _2558___mcc_h1154 = _source91.dtor_referential;
            bool _2559___mcc_h1155 = _source91.dtor_nullable;
            {
              if (!(_2540_leftErased)) {
                _2538_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2544_rightErased)) {
                _2542_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source93 = _2537_op;
              if (_source93.is_Eq) {
                bool _2560___mcc_h1165 = _source93.dtor_referential;
                bool _2561___mcc_h1166 = _source93.dtor_nullable;
                bool _2562_nullable = _2561___mcc_h1166;
                bool _2563_referential = _2560___mcc_h1165;
                {
                  if (_2563_referential) {
                    if (_2562_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2538_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2542_right);
                  }
                }
              } else if (_source93.is_Neq) {
                bool _2564___mcc_h1167 = _source93.dtor_referential;
                bool _2565___mcc_h1168 = _source93.dtor_nullable;
                bool _2566_nullable = _2565___mcc_h1168;
                bool _2567_referential = _2564___mcc_h1167;
                {
                  if (_2567_referential) {
                    if (_2566_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2538_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2542_right);
                  }
                }
              } else if (_source93.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source93.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source93.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source93.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2568___mcc_h1169 = _source93.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2569_op = _2568___mcc_h1169;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2569_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source91.is_Div) {
            {
              if (!(_2540_leftErased)) {
                _2538_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2544_rightErased)) {
                _2542_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source94 = _2537_op;
              if (_source94.is_Eq) {
                bool _2570___mcc_h1170 = _source94.dtor_referential;
                bool _2571___mcc_h1171 = _source94.dtor_nullable;
                bool _2572_nullable = _2571___mcc_h1171;
                bool _2573_referential = _2570___mcc_h1170;
                {
                  if (_2573_referential) {
                    if (_2572_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2538_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2542_right);
                  }
                }
              } else if (_source94.is_Neq) {
                bool _2574___mcc_h1172 = _source94.dtor_referential;
                bool _2575___mcc_h1173 = _source94.dtor_nullable;
                bool _2576_nullable = _2575___mcc_h1173;
                bool _2577_referential = _2574___mcc_h1172;
                {
                  if (_2577_referential) {
                    if (_2576_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2538_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2542_right);
                  }
                }
              } else if (_source94.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source94.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source94.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source94.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2578___mcc_h1174 = _source94.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2579_op = _2578___mcc_h1174;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2579_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source91.is_EuclidianDiv) {
            {
              if (!(_2540_leftErased)) {
                _2538_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2544_rightErased)) {
                _2542_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source95 = _2537_op;
              if (_source95.is_Eq) {
                bool _2580___mcc_h1175 = _source95.dtor_referential;
                bool _2581___mcc_h1176 = _source95.dtor_nullable;
                bool _2582_nullable = _2581___mcc_h1176;
                bool _2583_referential = _2580___mcc_h1175;
                {
                  if (_2583_referential) {
                    if (_2582_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2538_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2542_right);
                  }
                }
              } else if (_source95.is_Neq) {
                bool _2584___mcc_h1177 = _source95.dtor_referential;
                bool _2585___mcc_h1178 = _source95.dtor_nullable;
                bool _2586_nullable = _2585___mcc_h1178;
                bool _2587_referential = _2584___mcc_h1177;
                {
                  if (_2587_referential) {
                    if (_2586_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2538_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2542_right);
                  }
                }
              } else if (_source95.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source95.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source95.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source95.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2588___mcc_h1179 = _source95.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2589_op = _2588___mcc_h1179;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2589_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source91.is_Mod) {
            {
              if (!(_2540_leftErased)) {
                _2538_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2544_rightErased)) {
                _2542_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source96 = _2537_op;
              if (_source96.is_Eq) {
                bool _2590___mcc_h1180 = _source96.dtor_referential;
                bool _2591___mcc_h1181 = _source96.dtor_nullable;
                bool _2592_nullable = _2591___mcc_h1181;
                bool _2593_referential = _2590___mcc_h1180;
                {
                  if (_2593_referential) {
                    if (_2592_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2538_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2542_right);
                  }
                }
              } else if (_source96.is_Neq) {
                bool _2594___mcc_h1182 = _source96.dtor_referential;
                bool _2595___mcc_h1183 = _source96.dtor_nullable;
                bool _2596_nullable = _2595___mcc_h1183;
                bool _2597_referential = _2594___mcc_h1182;
                {
                  if (_2597_referential) {
                    if (_2596_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2538_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2542_right);
                  }
                }
              } else if (_source96.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source96.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source96.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source96.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2598___mcc_h1184 = _source96.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2599_op = _2598___mcc_h1184;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2599_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source91.is_EuclidianMod) {
            {
              if (!(_2540_leftErased)) {
                _2538_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2544_rightErased)) {
                _2542_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source97 = _2537_op;
              if (_source97.is_Eq) {
                bool _2600___mcc_h1185 = _source97.dtor_referential;
                bool _2601___mcc_h1186 = _source97.dtor_nullable;
                bool _2602_nullable = _2601___mcc_h1186;
                bool _2603_referential = _2600___mcc_h1185;
                {
                  if (_2603_referential) {
                    if (_2602_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2538_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2542_right);
                  }
                }
              } else if (_source97.is_Neq) {
                bool _2604___mcc_h1187 = _source97.dtor_referential;
                bool _2605___mcc_h1188 = _source97.dtor_nullable;
                bool _2606_nullable = _2605___mcc_h1188;
                bool _2607_referential = _2604___mcc_h1187;
                {
                  if (_2607_referential) {
                    if (_2606_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2538_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2542_right);
                  }
                }
              } else if (_source97.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source97.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source97.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source97.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2608___mcc_h1189 = _source97.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2609_op = _2608___mcc_h1189;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2609_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source91.is_Implies) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") || ")), _2542_right);
            }
          } else if (_source91.is_In) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2542_right, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          } else if (_source91.is_NotIn) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
            }
          } else if (_source91.is_SetDifference) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2538_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".difference(&")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").cloned().collect::<::std::collections::HashSet<_>>()"));
            }
          } else if (_source91.is_Concat) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].concat()"));
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _2610___mcc_h1158 = _source91.dtor_Passthrough_a0;
            {
              if (!(_2540_leftErased)) {
                _2538_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2544_rightErased)) {
                _2542_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source98 = _2537_op;
              if (_source98.is_Eq) {
                bool _2611___mcc_h1190 = _source98.dtor_referential;
                bool _2612___mcc_h1191 = _source98.dtor_nullable;
                bool _2613_nullable = _2612___mcc_h1191;
                bool _2614_referential = _2611___mcc_h1190;
                {
                  if (_2614_referential) {
                    if (_2613_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2538_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2542_right);
                  }
                }
              } else if (_source98.is_Neq) {
                bool _2615___mcc_h1192 = _source98.dtor_referential;
                bool _2616___mcc_h1193 = _source98.dtor_nullable;
                bool _2617_nullable = _2616___mcc_h1193;
                bool _2618_referential = _2615___mcc_h1192;
                {
                  if (_2618_referential) {
                    if (_2617_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2538_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2542_right);
                  }
                }
              } else if (_source98.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source98.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source98.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source98.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2619___mcc_h1194 = _source98.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2620_op = _2619___mcc_h1194;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2538_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2620_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2542_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          }
          isOwned = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2541_recIdentsL, _2545_recIdentsR);
          isErased = true;
        }
      } else if (_source39.is_ArrayLen) {
        DAST._IExpression _2621___mcc_h40 = _source39.dtor_expr;
        BigInteger _2622___mcc_h41 = _source39.dtor_dim;
        BigInteger _2623_dim = _2622___mcc_h41;
        DAST._IExpression _2624_expr = _2621___mcc_h40;
        {
          Dafny.ISequence<Dafny.Rune> _2625_recursiveGen;
          bool _2626___v81;
          bool _2627_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2628_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1486;
          bool _out1487;
          bool _out1488;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1489;
          DCOMP.COMP.GenExpr(_2624_expr, selfIdent, @params, true, out _out1486, out _out1487, out _out1488, out _out1489);
          _2625_recursiveGen = _out1486;
          _2626___v81 = _out1487;
          _2627_recErased = _out1488;
          _2628_recIdents = _out1489;
          if ((_2623_dim).Sign == 0) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _2625_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow().len())"));
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(m.borrow().len())");
            BigInteger _2629_i;
            _2629_i = BigInteger.One;
            while ((_2629_i) < (_2623_dim)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("m.borrow().get(0).map(|m| "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
              _2629_i = (_2629_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2625_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow().get(0).map(|m| ")), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
          }
          isOwned = true;
          readIdents = _2628_recIdents;
          isErased = true;
        }
      } else if (_source39.is_Select) {
        DAST._IExpression _2630___mcc_h42 = _source39.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _2631___mcc_h43 = _source39.dtor_field;
        bool _2632___mcc_h44 = _source39.dtor_isConstant;
        bool _2633___mcc_h45 = _source39.dtor_onDatatype;
        DAST._IExpression _source99 = _2630___mcc_h42;
        if (_source99.is_Literal) {
          DAST._ILiteral _2634___mcc_h46 = _source99.dtor_Literal_a0;
          bool _2635_isDatatype = _2633___mcc_h45;
          bool _2636_isConstant = _2632___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2637_field = _2631___mcc_h43;
          DAST._IExpression _2638_on = _2630___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2639_onString;
            bool _2640_onOwned;
            bool _2641_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2642_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1490;
            bool _out1491;
            bool _out1492;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1493;
            DCOMP.COMP.GenExpr(_2638_on, selfIdent, @params, false, out _out1490, out _out1491, out _out1492, out _out1493);
            _2639_onString = _out1490;
            _2640_onOwned = _out1491;
            _2641_onErased = _out1492;
            _2642_recIdents = _out1493;
            if ((_2635_isDatatype) || (_2636_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2639_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2637_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2636_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2639_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2637_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2642_recIdents;
          }
        } else if (_source99.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _2643___mcc_h48 = _source99.dtor_Ident_a0;
          bool _2644_isDatatype = _2633___mcc_h45;
          bool _2645_isConstant = _2632___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2646_field = _2631___mcc_h43;
          DAST._IExpression _2647_on = _2630___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2648_onString;
            bool _2649_onOwned;
            bool _2650_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2651_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1494;
            bool _out1495;
            bool _out1496;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1497;
            DCOMP.COMP.GenExpr(_2647_on, selfIdent, @params, false, out _out1494, out _out1495, out _out1496, out _out1497);
            _2648_onString = _out1494;
            _2649_onOwned = _out1495;
            _2650_onErased = _out1496;
            _2651_recIdents = _out1497;
            if ((_2644_isDatatype) || (_2645_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2648_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2646_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2645_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2648_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2646_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2651_recIdents;
          }
        } else if (_source99.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2652___mcc_h50 = _source99.dtor_Companion_a0;
          bool _2653_isDatatype = _2633___mcc_h45;
          bool _2654_isConstant = _2632___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2655_field = _2631___mcc_h43;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2656_c = _2652___mcc_h50;
          {
            Dafny.ISequence<Dafny.Rune> _2657_onString;
            bool _2658_onOwned;
            bool _2659_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2660_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1498;
            bool _out1499;
            bool _out1500;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1501;
            DCOMP.COMP.GenExpr(DAST.Expression.create_Companion(_2656_c), selfIdent, @params, false, out _out1498, out _out1499, out _out1500, out _out1501);
            _2657_onString = _out1498;
            _2658_onOwned = _out1499;
            _2659_onErased = _out1500;
            _2660_recIdents = _out1501;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2657_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_2655_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
            isOwned = true;
            isErased = false;
            readIdents = _2660_recIdents;
          }
        } else if (_source99.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _2661___mcc_h52 = _source99.dtor_Tuple_a0;
          bool _2662_isDatatype = _2633___mcc_h45;
          bool _2663_isConstant = _2632___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2664_field = _2631___mcc_h43;
          DAST._IExpression _2665_on = _2630___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2666_onString;
            bool _2667_onOwned;
            bool _2668_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2669_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1502;
            bool _out1503;
            bool _out1504;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1505;
            DCOMP.COMP.GenExpr(_2665_on, selfIdent, @params, false, out _out1502, out _out1503, out _out1504, out _out1505);
            _2666_onString = _out1502;
            _2667_onOwned = _out1503;
            _2668_onErased = _out1504;
            _2669_recIdents = _out1505;
            if ((_2662_isDatatype) || (_2663_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2666_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2664_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2663_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2666_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2664_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2669_recIdents;
          }
        } else if (_source99.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2670___mcc_h54 = _source99.dtor_path;
          Dafny.ISequence<DAST._IType> _2671___mcc_h55 = _source99.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _2672___mcc_h56 = _source99.dtor_args;
          bool _2673_isDatatype = _2633___mcc_h45;
          bool _2674_isConstant = _2632___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2675_field = _2631___mcc_h43;
          DAST._IExpression _2676_on = _2630___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2677_onString;
            bool _2678_onOwned;
            bool _2679_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2680_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1506;
            bool _out1507;
            bool _out1508;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1509;
            DCOMP.COMP.GenExpr(_2676_on, selfIdent, @params, false, out _out1506, out _out1507, out _out1508, out _out1509);
            _2677_onString = _out1506;
            _2678_onOwned = _out1507;
            _2679_onErased = _out1508;
            _2680_recIdents = _out1509;
            if ((_2673_isDatatype) || (_2674_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2677_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2675_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2674_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2677_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2675_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2680_recIdents;
          }
        } else if (_source99.is_NewArray) {
          Dafny.ISequence<DAST._IExpression> _2681___mcc_h60 = _source99.dtor_dims;
          DAST._IType _2682___mcc_h61 = _source99.dtor_typ;
          bool _2683_isDatatype = _2633___mcc_h45;
          bool _2684_isConstant = _2632___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2685_field = _2631___mcc_h43;
          DAST._IExpression _2686_on = _2630___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2687_onString;
            bool _2688_onOwned;
            bool _2689_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2690_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1510;
            bool _out1511;
            bool _out1512;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1513;
            DCOMP.COMP.GenExpr(_2686_on, selfIdent, @params, false, out _out1510, out _out1511, out _out1512, out _out1513);
            _2687_onString = _out1510;
            _2688_onOwned = _out1511;
            _2689_onErased = _out1512;
            _2690_recIdents = _out1513;
            if ((_2683_isDatatype) || (_2684_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2687_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2685_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2684_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2687_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2685_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2690_recIdents;
          }
        } else if (_source99.is_DatatypeValue) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2691___mcc_h64 = _source99.dtor_path;
          Dafny.ISequence<DAST._IType> _2692___mcc_h65 = _source99.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _2693___mcc_h66 = _source99.dtor_variant;
          bool _2694___mcc_h67 = _source99.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _2695___mcc_h68 = _source99.dtor_contents;
          bool _2696_isDatatype = _2633___mcc_h45;
          bool _2697_isConstant = _2632___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2698_field = _2631___mcc_h43;
          DAST._IExpression _2699_on = _2630___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2700_onString;
            bool _2701_onOwned;
            bool _2702_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2703_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1514;
            bool _out1515;
            bool _out1516;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1517;
            DCOMP.COMP.GenExpr(_2699_on, selfIdent, @params, false, out _out1514, out _out1515, out _out1516, out _out1517);
            _2700_onString = _out1514;
            _2701_onOwned = _out1515;
            _2702_onErased = _out1516;
            _2703_recIdents = _out1517;
            if ((_2696_isDatatype) || (_2697_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2700_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2698_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2697_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2700_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2698_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2703_recIdents;
          }
        } else if (_source99.is_Convert) {
          DAST._IExpression _2704___mcc_h74 = _source99.dtor_value;
          DAST._IType _2705___mcc_h75 = _source99.dtor_from;
          DAST._IType _2706___mcc_h76 = _source99.dtor_typ;
          bool _2707_isDatatype = _2633___mcc_h45;
          bool _2708_isConstant = _2632___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2709_field = _2631___mcc_h43;
          DAST._IExpression _2710_on = _2630___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2711_onString;
            bool _2712_onOwned;
            bool _2713_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2714_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1518;
            bool _out1519;
            bool _out1520;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1521;
            DCOMP.COMP.GenExpr(_2710_on, selfIdent, @params, false, out _out1518, out _out1519, out _out1520, out _out1521);
            _2711_onString = _out1518;
            _2712_onOwned = _out1519;
            _2713_onErased = _out1520;
            _2714_recIdents = _out1521;
            if ((_2707_isDatatype) || (_2708_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2711_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2709_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2708_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2711_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2709_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2714_recIdents;
          }
        } else if (_source99.is_SeqConstruct) {
          DAST._IExpression _2715___mcc_h80 = _source99.dtor_length;
          DAST._IExpression _2716___mcc_h81 = _source99.dtor_elem;
          bool _2717_isDatatype = _2633___mcc_h45;
          bool _2718_isConstant = _2632___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2719_field = _2631___mcc_h43;
          DAST._IExpression _2720_on = _2630___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2721_onString;
            bool _2722_onOwned;
            bool _2723_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2724_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1522;
            bool _out1523;
            bool _out1524;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1525;
            DCOMP.COMP.GenExpr(_2720_on, selfIdent, @params, false, out _out1522, out _out1523, out _out1524, out _out1525);
            _2721_onString = _out1522;
            _2722_onOwned = _out1523;
            _2723_onErased = _out1524;
            _2724_recIdents = _out1525;
            if ((_2717_isDatatype) || (_2718_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2721_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2719_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2718_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2721_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2719_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2724_recIdents;
          }
        } else if (_source99.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _2725___mcc_h84 = _source99.dtor_elements;
          DAST._IType _2726___mcc_h85 = _source99.dtor_typ;
          bool _2727_isDatatype = _2633___mcc_h45;
          bool _2728_isConstant = _2632___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2729_field = _2631___mcc_h43;
          DAST._IExpression _2730_on = _2630___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2731_onString;
            bool _2732_onOwned;
            bool _2733_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2734_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1526;
            bool _out1527;
            bool _out1528;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1529;
            DCOMP.COMP.GenExpr(_2730_on, selfIdent, @params, false, out _out1526, out _out1527, out _out1528, out _out1529);
            _2731_onString = _out1526;
            _2732_onOwned = _out1527;
            _2733_onErased = _out1528;
            _2734_recIdents = _out1529;
            if ((_2727_isDatatype) || (_2728_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2731_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2729_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2728_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2731_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2729_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2734_recIdents;
          }
        } else if (_source99.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _2735___mcc_h88 = _source99.dtor_elements;
          bool _2736_isDatatype = _2633___mcc_h45;
          bool _2737_isConstant = _2632___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2738_field = _2631___mcc_h43;
          DAST._IExpression _2739_on = _2630___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2740_onString;
            bool _2741_onOwned;
            bool _2742_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2743_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1530;
            bool _out1531;
            bool _out1532;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1533;
            DCOMP.COMP.GenExpr(_2739_on, selfIdent, @params, false, out _out1530, out _out1531, out _out1532, out _out1533);
            _2740_onString = _out1530;
            _2741_onOwned = _out1531;
            _2742_onErased = _out1532;
            _2743_recIdents = _out1533;
            if ((_2736_isDatatype) || (_2737_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2740_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2738_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2737_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2740_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2738_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2743_recIdents;
          }
        } else if (_source99.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2744___mcc_h90 = _source99.dtor_mapElems;
          bool _2745_isDatatype = _2633___mcc_h45;
          bool _2746_isConstant = _2632___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2747_field = _2631___mcc_h43;
          DAST._IExpression _2748_on = _2630___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2749_onString;
            bool _2750_onOwned;
            bool _2751_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2752_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1534;
            bool _out1535;
            bool _out1536;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1537;
            DCOMP.COMP.GenExpr(_2748_on, selfIdent, @params, false, out _out1534, out _out1535, out _out1536, out _out1537);
            _2749_onString = _out1534;
            _2750_onOwned = _out1535;
            _2751_onErased = _out1536;
            _2752_recIdents = _out1537;
            if ((_2745_isDatatype) || (_2746_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2749_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2747_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2746_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2749_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2747_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2752_recIdents;
          }
        } else if (_source99.is_This) {
          bool _2753_isDatatype = _2633___mcc_h45;
          bool _2754_isConstant = _2632___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2755_field = _2631___mcc_h43;
          DAST._IExpression _2756_on = _2630___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2757_onString;
            bool _2758_onOwned;
            bool _2759_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2760_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1538;
            bool _out1539;
            bool _out1540;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1541;
            DCOMP.COMP.GenExpr(_2756_on, selfIdent, @params, false, out _out1538, out _out1539, out _out1540, out _out1541);
            _2757_onString = _out1538;
            _2758_onOwned = _out1539;
            _2759_onErased = _out1540;
            _2760_recIdents = _out1541;
            if ((_2753_isDatatype) || (_2754_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2757_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2755_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2754_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2757_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2755_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2760_recIdents;
          }
        } else if (_source99.is_Ite) {
          DAST._IExpression _2761___mcc_h92 = _source99.dtor_cond;
          DAST._IExpression _2762___mcc_h93 = _source99.dtor_thn;
          DAST._IExpression _2763___mcc_h94 = _source99.dtor_els;
          bool _2764_isDatatype = _2633___mcc_h45;
          bool _2765_isConstant = _2632___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2766_field = _2631___mcc_h43;
          DAST._IExpression _2767_on = _2630___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2768_onString;
            bool _2769_onOwned;
            bool _2770_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2771_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1542;
            bool _out1543;
            bool _out1544;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1545;
            DCOMP.COMP.GenExpr(_2767_on, selfIdent, @params, false, out _out1542, out _out1543, out _out1544, out _out1545);
            _2768_onString = _out1542;
            _2769_onOwned = _out1543;
            _2770_onErased = _out1544;
            _2771_recIdents = _out1545;
            if ((_2764_isDatatype) || (_2765_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2768_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2766_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2765_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2768_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2766_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2771_recIdents;
          }
        } else if (_source99.is_UnOp) {
          DAST._IUnaryOp _2772___mcc_h98 = _source99.dtor_unOp;
          DAST._IExpression _2773___mcc_h99 = _source99.dtor_expr;
          bool _2774_isDatatype = _2633___mcc_h45;
          bool _2775_isConstant = _2632___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2776_field = _2631___mcc_h43;
          DAST._IExpression _2777_on = _2630___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2778_onString;
            bool _2779_onOwned;
            bool _2780_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2781_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1546;
            bool _out1547;
            bool _out1548;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1549;
            DCOMP.COMP.GenExpr(_2777_on, selfIdent, @params, false, out _out1546, out _out1547, out _out1548, out _out1549);
            _2778_onString = _out1546;
            _2779_onOwned = _out1547;
            _2780_onErased = _out1548;
            _2781_recIdents = _out1549;
            if ((_2774_isDatatype) || (_2775_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2778_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2776_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2775_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2778_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2776_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2781_recIdents;
          }
        } else if (_source99.is_BinOp) {
          DAST._IBinOp _2782___mcc_h102 = _source99.dtor_op;
          DAST._IExpression _2783___mcc_h103 = _source99.dtor_left;
          DAST._IExpression _2784___mcc_h104 = _source99.dtor_right;
          bool _2785_isDatatype = _2633___mcc_h45;
          bool _2786_isConstant = _2632___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2787_field = _2631___mcc_h43;
          DAST._IExpression _2788_on = _2630___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2789_onString;
            bool _2790_onOwned;
            bool _2791_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2792_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1550;
            bool _out1551;
            bool _out1552;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1553;
            DCOMP.COMP.GenExpr(_2788_on, selfIdent, @params, false, out _out1550, out _out1551, out _out1552, out _out1553);
            _2789_onString = _out1550;
            _2790_onOwned = _out1551;
            _2791_onErased = _out1552;
            _2792_recIdents = _out1553;
            if ((_2785_isDatatype) || (_2786_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2789_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2787_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2786_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2789_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2787_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2792_recIdents;
          }
        } else if (_source99.is_ArrayLen) {
          DAST._IExpression _2793___mcc_h108 = _source99.dtor_expr;
          BigInteger _2794___mcc_h109 = _source99.dtor_dim;
          bool _2795_isDatatype = _2633___mcc_h45;
          bool _2796_isConstant = _2632___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2797_field = _2631___mcc_h43;
          DAST._IExpression _2798_on = _2630___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2799_onString;
            bool _2800_onOwned;
            bool _2801_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2802_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1554;
            bool _out1555;
            bool _out1556;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1557;
            DCOMP.COMP.GenExpr(_2798_on, selfIdent, @params, false, out _out1554, out _out1555, out _out1556, out _out1557);
            _2799_onString = _out1554;
            _2800_onOwned = _out1555;
            _2801_onErased = _out1556;
            _2802_recIdents = _out1557;
            if ((_2795_isDatatype) || (_2796_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2799_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2797_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2796_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2799_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2797_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2802_recIdents;
          }
        } else if (_source99.is_Select) {
          DAST._IExpression _2803___mcc_h112 = _source99.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _2804___mcc_h113 = _source99.dtor_field;
          bool _2805___mcc_h114 = _source99.dtor_isConstant;
          bool _2806___mcc_h115 = _source99.dtor_onDatatype;
          bool _2807_isDatatype = _2633___mcc_h45;
          bool _2808_isConstant = _2632___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2809_field = _2631___mcc_h43;
          DAST._IExpression _2810_on = _2630___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2811_onString;
            bool _2812_onOwned;
            bool _2813_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2814_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1558;
            bool _out1559;
            bool _out1560;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1561;
            DCOMP.COMP.GenExpr(_2810_on, selfIdent, @params, false, out _out1558, out _out1559, out _out1560, out _out1561);
            _2811_onString = _out1558;
            _2812_onOwned = _out1559;
            _2813_onErased = _out1560;
            _2814_recIdents = _out1561;
            if ((_2807_isDatatype) || (_2808_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2811_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2809_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2808_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2811_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2809_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2814_recIdents;
          }
        } else if (_source99.is_SelectFn) {
          DAST._IExpression _2815___mcc_h120 = _source99.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _2816___mcc_h121 = _source99.dtor_field;
          bool _2817___mcc_h122 = _source99.dtor_onDatatype;
          bool _2818___mcc_h123 = _source99.dtor_isStatic;
          BigInteger _2819___mcc_h124 = _source99.dtor_arity;
          bool _2820_isDatatype = _2633___mcc_h45;
          bool _2821_isConstant = _2632___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2822_field = _2631___mcc_h43;
          DAST._IExpression _2823_on = _2630___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2824_onString;
            bool _2825_onOwned;
            bool _2826_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2827_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1562;
            bool _out1563;
            bool _out1564;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1565;
            DCOMP.COMP.GenExpr(_2823_on, selfIdent, @params, false, out _out1562, out _out1563, out _out1564, out _out1565);
            _2824_onString = _out1562;
            _2825_onOwned = _out1563;
            _2826_onErased = _out1564;
            _2827_recIdents = _out1565;
            if ((_2820_isDatatype) || (_2821_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2824_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2822_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2821_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2824_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2822_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2827_recIdents;
          }
        } else if (_source99.is_Index) {
          DAST._IExpression _2828___mcc_h130 = _source99.dtor_expr;
          DAST._ICollKind _2829___mcc_h131 = _source99.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _2830___mcc_h132 = _source99.dtor_indices;
          bool _2831_isDatatype = _2633___mcc_h45;
          bool _2832_isConstant = _2632___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2833_field = _2631___mcc_h43;
          DAST._IExpression _2834_on = _2630___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2835_onString;
            bool _2836_onOwned;
            bool _2837_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2838_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1566;
            bool _out1567;
            bool _out1568;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1569;
            DCOMP.COMP.GenExpr(_2834_on, selfIdent, @params, false, out _out1566, out _out1567, out _out1568, out _out1569);
            _2835_onString = _out1566;
            _2836_onOwned = _out1567;
            _2837_onErased = _out1568;
            _2838_recIdents = _out1569;
            if ((_2831_isDatatype) || (_2832_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2835_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2833_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2832_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2835_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2833_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2838_recIdents;
          }
        } else if (_source99.is_IndexRange) {
          DAST._IExpression _2839___mcc_h136 = _source99.dtor_expr;
          bool _2840___mcc_h137 = _source99.dtor_isArray;
          DAST._IOptional<DAST._IExpression> _2841___mcc_h138 = _source99.dtor_low;
          DAST._IOptional<DAST._IExpression> _2842___mcc_h139 = _source99.dtor_high;
          bool _2843_isDatatype = _2633___mcc_h45;
          bool _2844_isConstant = _2632___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2845_field = _2631___mcc_h43;
          DAST._IExpression _2846_on = _2630___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2847_onString;
            bool _2848_onOwned;
            bool _2849_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2850_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1570;
            bool _out1571;
            bool _out1572;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1573;
            DCOMP.COMP.GenExpr(_2846_on, selfIdent, @params, false, out _out1570, out _out1571, out _out1572, out _out1573);
            _2847_onString = _out1570;
            _2848_onOwned = _out1571;
            _2849_onErased = _out1572;
            _2850_recIdents = _out1573;
            if ((_2843_isDatatype) || (_2844_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2847_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2845_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2844_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2847_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2845_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2850_recIdents;
          }
        } else if (_source99.is_TupleSelect) {
          DAST._IExpression _2851___mcc_h144 = _source99.dtor_expr;
          BigInteger _2852___mcc_h145 = _source99.dtor_index;
          bool _2853_isDatatype = _2633___mcc_h45;
          bool _2854_isConstant = _2632___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2855_field = _2631___mcc_h43;
          DAST._IExpression _2856_on = _2630___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2857_onString;
            bool _2858_onOwned;
            bool _2859_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2860_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1574;
            bool _out1575;
            bool _out1576;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1577;
            DCOMP.COMP.GenExpr(_2856_on, selfIdent, @params, false, out _out1574, out _out1575, out _out1576, out _out1577);
            _2857_onString = _out1574;
            _2858_onOwned = _out1575;
            _2859_onErased = _out1576;
            _2860_recIdents = _out1577;
            if ((_2853_isDatatype) || (_2854_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2857_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2855_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2854_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2857_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2855_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2860_recIdents;
          }
        } else if (_source99.is_Call) {
          DAST._IExpression _2861___mcc_h148 = _source99.dtor_on;
          Dafny.ISequence<Dafny.Rune> _2862___mcc_h149 = _source99.dtor_name;
          Dafny.ISequence<DAST._IType> _2863___mcc_h150 = _source99.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _2864___mcc_h151 = _source99.dtor_args;
          bool _2865_isDatatype = _2633___mcc_h45;
          bool _2866_isConstant = _2632___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2867_field = _2631___mcc_h43;
          DAST._IExpression _2868_on = _2630___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2869_onString;
            bool _2870_onOwned;
            bool _2871_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2872_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1578;
            bool _out1579;
            bool _out1580;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1581;
            DCOMP.COMP.GenExpr(_2868_on, selfIdent, @params, false, out _out1578, out _out1579, out _out1580, out _out1581);
            _2869_onString = _out1578;
            _2870_onOwned = _out1579;
            _2871_onErased = _out1580;
            _2872_recIdents = _out1581;
            if ((_2865_isDatatype) || (_2866_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2869_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2867_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2866_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2869_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2867_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2872_recIdents;
          }
        } else if (_source99.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _2873___mcc_h156 = _source99.dtor_params;
          DAST._IType _2874___mcc_h157 = _source99.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _2875___mcc_h158 = _source99.dtor_body;
          bool _2876_isDatatype = _2633___mcc_h45;
          bool _2877_isConstant = _2632___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2878_field = _2631___mcc_h43;
          DAST._IExpression _2879_on = _2630___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2880_onString;
            bool _2881_onOwned;
            bool _2882_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2883_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1582;
            bool _out1583;
            bool _out1584;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1585;
            DCOMP.COMP.GenExpr(_2879_on, selfIdent, @params, false, out _out1582, out _out1583, out _out1584, out _out1585);
            _2880_onString = _out1582;
            _2881_onOwned = _out1583;
            _2882_onErased = _out1584;
            _2883_recIdents = _out1585;
            if ((_2876_isDatatype) || (_2877_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2880_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2878_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2877_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2880_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2878_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2883_recIdents;
          }
        } else if (_source99.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _2884___mcc_h162 = _source99.dtor_values;
          DAST._IType _2885___mcc_h163 = _source99.dtor_retType;
          DAST._IExpression _2886___mcc_h164 = _source99.dtor_expr;
          bool _2887_isDatatype = _2633___mcc_h45;
          bool _2888_isConstant = _2632___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2889_field = _2631___mcc_h43;
          DAST._IExpression _2890_on = _2630___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2891_onString;
            bool _2892_onOwned;
            bool _2893_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2894_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1586;
            bool _out1587;
            bool _out1588;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1589;
            DCOMP.COMP.GenExpr(_2890_on, selfIdent, @params, false, out _out1586, out _out1587, out _out1588, out _out1589);
            _2891_onString = _out1586;
            _2892_onOwned = _out1587;
            _2893_onErased = _out1588;
            _2894_recIdents = _out1589;
            if ((_2887_isDatatype) || (_2888_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2891_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2889_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2888_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2891_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2889_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2894_recIdents;
          }
        } else if (_source99.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _2895___mcc_h168 = _source99.dtor_name;
          DAST._IType _2896___mcc_h169 = _source99.dtor_typ;
          DAST._IExpression _2897___mcc_h170 = _source99.dtor_value;
          DAST._IExpression _2898___mcc_h171 = _source99.dtor_iifeBody;
          bool _2899_isDatatype = _2633___mcc_h45;
          bool _2900_isConstant = _2632___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2901_field = _2631___mcc_h43;
          DAST._IExpression _2902_on = _2630___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2903_onString;
            bool _2904_onOwned;
            bool _2905_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2906_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1590;
            bool _out1591;
            bool _out1592;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1593;
            DCOMP.COMP.GenExpr(_2902_on, selfIdent, @params, false, out _out1590, out _out1591, out _out1592, out _out1593);
            _2903_onString = _out1590;
            _2904_onOwned = _out1591;
            _2905_onErased = _out1592;
            _2906_recIdents = _out1593;
            if ((_2899_isDatatype) || (_2900_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2903_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2901_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2900_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2903_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2901_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2906_recIdents;
          }
        } else if (_source99.is_Apply) {
          DAST._IExpression _2907___mcc_h176 = _source99.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _2908___mcc_h177 = _source99.dtor_args;
          bool _2909_isDatatype = _2633___mcc_h45;
          bool _2910_isConstant = _2632___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2911_field = _2631___mcc_h43;
          DAST._IExpression _2912_on = _2630___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2913_onString;
            bool _2914_onOwned;
            bool _2915_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2916_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1594;
            bool _out1595;
            bool _out1596;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1597;
            DCOMP.COMP.GenExpr(_2912_on, selfIdent, @params, false, out _out1594, out _out1595, out _out1596, out _out1597);
            _2913_onString = _out1594;
            _2914_onOwned = _out1595;
            _2915_onErased = _out1596;
            _2916_recIdents = _out1597;
            if ((_2909_isDatatype) || (_2910_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2913_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2911_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2910_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2913_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2911_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2916_recIdents;
          }
        } else if (_source99.is_TypeTest) {
          DAST._IExpression _2917___mcc_h180 = _source99.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2918___mcc_h181 = _source99.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _2919___mcc_h182 = _source99.dtor_variant;
          bool _2920_isDatatype = _2633___mcc_h45;
          bool _2921_isConstant = _2632___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2922_field = _2631___mcc_h43;
          DAST._IExpression _2923_on = _2630___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2924_onString;
            bool _2925_onOwned;
            bool _2926_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2927_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1598;
            bool _out1599;
            bool _out1600;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1601;
            DCOMP.COMP.GenExpr(_2923_on, selfIdent, @params, false, out _out1598, out _out1599, out _out1600, out _out1601);
            _2924_onString = _out1598;
            _2925_onOwned = _out1599;
            _2926_onErased = _out1600;
            _2927_recIdents = _out1601;
            if ((_2920_isDatatype) || (_2921_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2924_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2922_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2921_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2924_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2922_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2927_recIdents;
          }
        } else if (_source99.is_InitializationValue) {
          DAST._IType _2928___mcc_h186 = _source99.dtor_typ;
          bool _2929_isDatatype = _2633___mcc_h45;
          bool _2930_isConstant = _2632___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2931_field = _2631___mcc_h43;
          DAST._IExpression _2932_on = _2630___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2933_onString;
            bool _2934_onOwned;
            bool _2935_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2936_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1602;
            bool _out1603;
            bool _out1604;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1605;
            DCOMP.COMP.GenExpr(_2932_on, selfIdent, @params, false, out _out1602, out _out1603, out _out1604, out _out1605);
            _2933_onString = _out1602;
            _2934_onOwned = _out1603;
            _2935_onErased = _out1604;
            _2936_recIdents = _out1605;
            if ((_2929_isDatatype) || (_2930_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2933_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2931_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2930_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2933_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2931_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2936_recIdents;
          }
        } else if (_source99.is_BoolBoundedPool) {
          bool _2937_isDatatype = _2633___mcc_h45;
          bool _2938_isConstant = _2632___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2939_field = _2631___mcc_h43;
          DAST._IExpression _2940_on = _2630___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2941_onString;
            bool _2942_onOwned;
            bool _2943_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2944_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1606;
            bool _out1607;
            bool _out1608;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1609;
            DCOMP.COMP.GenExpr(_2940_on, selfIdent, @params, false, out _out1606, out _out1607, out _out1608, out _out1609);
            _2941_onString = _out1606;
            _2942_onOwned = _out1607;
            _2943_onErased = _out1608;
            _2944_recIdents = _out1609;
            if ((_2937_isDatatype) || (_2938_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2941_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2939_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2938_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2941_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2939_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2944_recIdents;
          }
        } else if (_source99.is_SetBoundedPool) {
          DAST._IExpression _2945___mcc_h188 = _source99.dtor_of;
          bool _2946_isDatatype = _2633___mcc_h45;
          bool _2947_isConstant = _2632___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2948_field = _2631___mcc_h43;
          DAST._IExpression _2949_on = _2630___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2950_onString;
            bool _2951_onOwned;
            bool _2952_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2953_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1610;
            bool _out1611;
            bool _out1612;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1613;
            DCOMP.COMP.GenExpr(_2949_on, selfIdent, @params, false, out _out1610, out _out1611, out _out1612, out _out1613);
            _2950_onString = _out1610;
            _2951_onOwned = _out1611;
            _2952_onErased = _out1612;
            _2953_recIdents = _out1613;
            if ((_2946_isDatatype) || (_2947_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2950_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2948_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2947_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2950_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2948_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2953_recIdents;
          }
        } else if (_source99.is_SeqBoundedPool) {
          DAST._IExpression _2954___mcc_h190 = _source99.dtor_of;
          bool _2955___mcc_h191 = _source99.dtor_includeDuplicates;
          bool _2956_isDatatype = _2633___mcc_h45;
          bool _2957_isConstant = _2632___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2958_field = _2631___mcc_h43;
          DAST._IExpression _2959_on = _2630___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2960_onString;
            bool _2961_onOwned;
            bool _2962_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2963_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1614;
            bool _out1615;
            bool _out1616;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1617;
            DCOMP.COMP.GenExpr(_2959_on, selfIdent, @params, false, out _out1614, out _out1615, out _out1616, out _out1617);
            _2960_onString = _out1614;
            _2961_onOwned = _out1615;
            _2962_onErased = _out1616;
            _2963_recIdents = _out1617;
            if ((_2956_isDatatype) || (_2957_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2960_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2958_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2957_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2960_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2958_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2963_recIdents;
          }
        } else {
          DAST._IExpression _2964___mcc_h194 = _source99.dtor_lo;
          DAST._IExpression _2965___mcc_h195 = _source99.dtor_hi;
          bool _2966_isDatatype = _2633___mcc_h45;
          bool _2967_isConstant = _2632___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2968_field = _2631___mcc_h43;
          DAST._IExpression _2969_on = _2630___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2970_onString;
            bool _2971_onOwned;
            bool _2972_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2973_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1618;
            bool _out1619;
            bool _out1620;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1621;
            DCOMP.COMP.GenExpr(_2969_on, selfIdent, @params, false, out _out1618, out _out1619, out _out1620, out _out1621);
            _2970_onString = _out1618;
            _2971_onOwned = _out1619;
            _2972_onErased = _out1620;
            _2973_recIdents = _out1621;
            if ((_2966_isDatatype) || (_2967_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2970_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2968_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2967_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2970_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2968_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2973_recIdents;
          }
        }
      } else if (_source39.is_SelectFn) {
        DAST._IExpression _2974___mcc_h198 = _source39.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _2975___mcc_h199 = _source39.dtor_field;
        bool _2976___mcc_h200 = _source39.dtor_onDatatype;
        bool _2977___mcc_h201 = _source39.dtor_isStatic;
        BigInteger _2978___mcc_h202 = _source39.dtor_arity;
        BigInteger _2979_arity = _2978___mcc_h202;
        bool _2980_isStatic = _2977___mcc_h201;
        bool _2981_isDatatype = _2976___mcc_h200;
        Dafny.ISequence<Dafny.Rune> _2982_field = _2975___mcc_h199;
        DAST._IExpression _2983_on = _2974___mcc_h198;
        {
          Dafny.ISequence<Dafny.Rune> _2984_onString;
          bool _2985_onOwned;
          bool _2986___v82;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2987_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1622;
          bool _out1623;
          bool _out1624;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1625;
          DCOMP.COMP.GenExpr(_2983_on, selfIdent, @params, false, out _out1622, out _out1623, out _out1624, out _out1625);
          _2984_onString = _out1622;
          _2985_onOwned = _out1623;
          _2986___v82 = _out1624;
          _2987_recIdents = _out1625;
          if (_2980_isStatic) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2984_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _2982_field);
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _2984_onString), ((_2985_onOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _2988_args;
            _2988_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _2989_i;
            _2989_i = BigInteger.Zero;
            while ((_2989_i) < (_2979_arity)) {
              if ((_2989_i).Sign == 1) {
                _2988_args = Dafny.Sequence<Dafny.Rune>.Concat(_2988_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _2988_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2988_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), DCOMP.__default.natToString(_2989_i));
              _2989_i = (_2989_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _2988_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), _2982_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2988_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _2990_typeShape;
          _2990_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _2991_i;
          _2991_i = BigInteger.Zero;
          while ((_2991_i) < (_2979_arity)) {
            if ((_2991_i).Sign == 1) {
              _2990_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_2990_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _2990_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_2990_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _2991_i = (_2991_i) + (BigInteger.One);
          }
          _2990_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_2990_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper(::std::rc::Rc::new("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _2990_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
          readIdents = _2987_recIdents;
        }
      } else if (_source39.is_Index) {
        DAST._IExpression _2992___mcc_h203 = _source39.dtor_expr;
        DAST._ICollKind _2993___mcc_h204 = _source39.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _2994___mcc_h205 = _source39.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _2995_indices = _2994___mcc_h205;
        DAST._ICollKind _2996_collKind = _2993___mcc_h204;
        DAST._IExpression _2997_on = _2992___mcc_h203;
        {
          Dafny.ISequence<Dafny.Rune> _2998_onString;
          bool _2999_onOwned;
          bool _3000_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3001_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1626;
          bool _out1627;
          bool _out1628;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1629;
          DCOMP.COMP.GenExpr(_2997_on, selfIdent, @params, false, out _out1626, out _out1627, out _out1628, out _out1629);
          _2998_onString = _out1626;
          _2999_onOwned = _out1627;
          _3000_onErased = _out1628;
          _3001_recIdents = _out1629;
          readIdents = _3001_recIdents;
          s = _2998_onString;
          BigInteger _3002_i;
          _3002_i = BigInteger.Zero;
          while ((_3002_i) < (new BigInteger((_2995_indices).Count))) {
            if (object.Equals(_2996_collKind, DAST.CollKind.create_Array())) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
            }
            if (object.Equals(_2996_collKind, DAST.CollKind.create_Map())) {
              Dafny.ISequence<Dafny.Rune> _3003_idx;
              bool _3004_idxOwned;
              bool _3005_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3006_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1630;
              bool _out1631;
              bool _out1632;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1633;
              DCOMP.COMP.GenExpr((_2995_indices).Select(_3002_i), selfIdent, @params, false, out _out1630, out _out1631, out _out1632, out _out1633);
              _3003_idx = _out1630;
              _3004_idxOwned = _out1631;
              _3005_idxErased = _out1632;
              _3006_recIdentsIdx = _out1633;
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[")), ((_3004_idxOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), _3003_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3006_recIdentsIdx);
            } else {
              Dafny.ISequence<Dafny.Rune> _3007_idx;
              bool _3008___v83;
              bool _3009_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3010_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1634;
              bool _out1635;
              bool _out1636;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1637;
              DCOMP.COMP.GenExpr((_2995_indices).Select(_3002_i), selfIdent, @params, true, out _out1634, out _out1635, out _out1636, out _out1637);
              _3007_idx = _out1634;
              _3008___v83 = _out1635;
              _3009_idxErased = _out1636;
              _3010_recIdentsIdx = _out1637;
              if (!(_3009_idxErased)) {
                _3007_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3007_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[<usize as ::dafny_runtime::NumCast>::from(")), _3007_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3010_recIdentsIdx);
            }
            _3002_i = (_3002_i) + (BigInteger.One);
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = false;
          }
          isErased = _3000_onErased;
        }
      } else if (_source39.is_IndexRange) {
        DAST._IExpression _3011___mcc_h206 = _source39.dtor_expr;
        bool _3012___mcc_h207 = _source39.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _3013___mcc_h208 = _source39.dtor_low;
        DAST._IOptional<DAST._IExpression> _3014___mcc_h209 = _source39.dtor_high;
        DAST._IOptional<DAST._IExpression> _3015_high = _3014___mcc_h209;
        DAST._IOptional<DAST._IExpression> _3016_low = _3013___mcc_h208;
        bool _3017_isArray = _3012___mcc_h207;
        DAST._IExpression _3018_on = _3011___mcc_h206;
        {
          Dafny.ISequence<Dafny.Rune> _3019_onString;
          bool _3020_onOwned;
          bool _3021_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3022_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1638;
          bool _out1639;
          bool _out1640;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1641;
          DCOMP.COMP.GenExpr(_3018_on, selfIdent, @params, false, out _out1638, out _out1639, out _out1640, out _out1641);
          _3019_onString = _out1638;
          _3020_onOwned = _out1639;
          _3021_onErased = _out1640;
          _3022_recIdents = _out1641;
          readIdents = _3022_recIdents;
          s = _3019_onString;
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _3023_lowString;
          _3023_lowString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None();
          DAST._IOptional<DAST._IExpression> _source100 = _3016_low;
          if (_source100.is_Some) {
            DAST._IExpression _3024___mcc_h1195 = _source100.dtor_Some_a0;
            DAST._IExpression _3025_l = _3024___mcc_h1195;
            {
              Dafny.ISequence<Dafny.Rune> _3026_lString;
              bool _3027___v84;
              bool _3028_lErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3029_recIdentsL;
              Dafny.ISequence<Dafny.Rune> _out1642;
              bool _out1643;
              bool _out1644;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1645;
              DCOMP.COMP.GenExpr(_3025_l, selfIdent, @params, true, out _out1642, out _out1643, out _out1644, out _out1645);
              _3026_lString = _out1642;
              _3027___v84 = _out1643;
              _3028_lErased = _out1644;
              _3029_recIdentsL = _out1645;
              if (!(_3028_lErased)) {
                _3026_lString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3026_lString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _3023_lowString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(_3026_lString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3029_recIdentsL);
            }
          } else {
          }
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _3030_highString;
          _3030_highString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None();
          DAST._IOptional<DAST._IExpression> _source101 = _3015_high;
          if (_source101.is_Some) {
            DAST._IExpression _3031___mcc_h1196 = _source101.dtor_Some_a0;
            DAST._IExpression _3032_h = _3031___mcc_h1196;
            {
              Dafny.ISequence<Dafny.Rune> _3033_hString;
              bool _3034___v85;
              bool _3035_hErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3036_recIdentsH;
              Dafny.ISequence<Dafny.Rune> _out1646;
              bool _out1647;
              bool _out1648;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1649;
              DCOMP.COMP.GenExpr(_3032_h, selfIdent, @params, true, out _out1646, out _out1647, out _out1648, out _out1649);
              _3033_hString = _out1646;
              _3034___v85 = _out1647;
              _3035_hErased = _out1648;
              _3036_recIdentsH = _out1649;
              if (!(_3035_hErased)) {
                _3033_hString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3033_hString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _3030_highString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(_3033_hString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3036_recIdentsH);
            }
          } else {
          }
          if (_3017_isArray) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[")), ((System.Func<DAST._IOptional<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source102) => {
            if (_source102.is_Some) {
              Dafny.ISequence<Dafny.Rune> _3037___mcc_h1197 = _source102.dtor_Some_a0;
              Dafny.ISequence<Dafny.Rune> _3038_l = _3037___mcc_h1197;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _3038_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            }
          }))(_3023_lowString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("..")), ((System.Func<DAST._IOptional<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source103) => {
            if (_source103.is_Some) {
              Dafny.ISequence<Dafny.Rune> _3039___mcc_h1198 = _source103.dtor_Some_a0;
              Dafny.ISequence<Dafny.Rune> _3040_h = _3039___mcc_h1198;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _3040_h), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            }
          }))(_3030_highString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
          isErased = _3021_onErased;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".to_vec())"));
          isOwned = true;
        }
      } else if (_source39.is_TupleSelect) {
        DAST._IExpression _3041___mcc_h210 = _source39.dtor_expr;
        BigInteger _3042___mcc_h211 = _source39.dtor_index;
        BigInteger _3043_idx = _3042___mcc_h211;
        DAST._IExpression _3044_on = _3041___mcc_h210;
        {
          Dafny.ISequence<Dafny.Rune> _3045_onString;
          bool _3046___v86;
          bool _3047_tupErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3048_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1650;
          bool _out1651;
          bool _out1652;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1653;
          DCOMP.COMP.GenExpr(_3044_on, selfIdent, @params, false, out _out1650, out _out1651, out _out1652, out _out1653);
          _3045_onString = _out1650;
          _3046___v86 = _out1651;
          _3047_tupErased = _out1652;
          _3048_recIdents = _out1653;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3045_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.natToString(_3043_idx));
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
            isOwned = false;
          }
          isErased = _3047_tupErased;
          readIdents = _3048_recIdents;
        }
      } else if (_source39.is_Call) {
        DAST._IExpression _3049___mcc_h212 = _source39.dtor_on;
        Dafny.ISequence<Dafny.Rune> _3050___mcc_h213 = _source39.dtor_name;
        Dafny.ISequence<DAST._IType> _3051___mcc_h214 = _source39.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _3052___mcc_h215 = _source39.dtor_args;
        Dafny.ISequence<DAST._IExpression> _3053_args = _3052___mcc_h215;
        Dafny.ISequence<DAST._IType> _3054_typeArgs = _3051___mcc_h214;
        Dafny.ISequence<Dafny.Rune> _3055_name = _3050___mcc_h213;
        DAST._IExpression _3056_on = _3049___mcc_h212;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3057_typeArgString;
          _3057_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_3054_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _3058_typeI;
            _3058_typeI = BigInteger.Zero;
            _3057_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_3058_typeI) < (new BigInteger((_3054_typeArgs).Count))) {
              if ((_3058_typeI).Sign == 1) {
                _3057_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3057_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _3059_typeString;
              Dafny.ISequence<Dafny.Rune> _out1654;
              _out1654 = DCOMP.COMP.GenType((_3054_typeArgs).Select(_3058_typeI), false, false);
              _3059_typeString = _out1654;
              _3057_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3057_typeArgString, _3059_typeString);
              _3058_typeI = (_3058_typeI) + (BigInteger.One);
            }
            _3057_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3057_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _3060_argString;
          _3060_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _3061_i;
          _3061_i = BigInteger.Zero;
          while ((_3061_i) < (new BigInteger((_3053_args).Count))) {
            if ((_3061_i).Sign == 1) {
              _3060_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3060_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3062_argExpr;
            bool _3063_isOwned;
            bool _3064_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3065_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1655;
            bool _out1656;
            bool _out1657;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1658;
            DCOMP.COMP.GenExpr((_3053_args).Select(_3061_i), selfIdent, @params, false, out _out1655, out _out1656, out _out1657, out _out1658);
            _3062_argExpr = _out1655;
            _3063_isOwned = _out1656;
            _3064_argErased = _out1657;
            _3065_argIdents = _out1658;
            if (_3063_isOwned) {
              _3062_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _3062_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (!(_3064_argErased)) {
              _3062_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase("), _3062_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _3062_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::unerase("), _3062_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _3060_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3060_argString, _3062_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3065_argIdents);
            _3061_i = (_3061_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3066_enclosingString;
          bool _3067___v87;
          bool _3068___v88;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3069_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1659;
          bool _out1660;
          bool _out1661;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1662;
          DCOMP.COMP.GenExpr(_3056_on, selfIdent, @params, false, out _out1659, out _out1660, out _out1661, out _out1662);
          _3066_enclosingString = _out1659;
          _3067___v87 = _out1660;
          _3068___v88 = _out1661;
          _3069_recIdents = _out1662;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3069_recIdents);
          DAST._IExpression _source104 = _3056_on;
          if (_source104.is_Literal) {
            DAST._ILiteral _3070___mcc_h1199 = _source104.dtor_Literal_a0;
            {
              _3066_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3066_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3055_name)));
            }
          } else if (_source104.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _3071___mcc_h1201 = _source104.dtor_Ident_a0;
            {
              _3066_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3066_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3055_name)));
            }
          } else if (_source104.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3072___mcc_h1203 = _source104.dtor_Companion_a0;
            {
              _3066_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3066_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_3055_name)));
            }
          } else if (_source104.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _3073___mcc_h1205 = _source104.dtor_Tuple_a0;
            {
              _3066_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3066_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3055_name)));
            }
          } else if (_source104.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3074___mcc_h1207 = _source104.dtor_path;
            Dafny.ISequence<DAST._IType> _3075___mcc_h1208 = _source104.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _3076___mcc_h1209 = _source104.dtor_args;
            {
              _3066_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3066_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3055_name)));
            }
          } else if (_source104.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _3077___mcc_h1213 = _source104.dtor_dims;
            DAST._IType _3078___mcc_h1214 = _source104.dtor_typ;
            {
              _3066_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3066_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3055_name)));
            }
          } else if (_source104.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3079___mcc_h1217 = _source104.dtor_path;
            Dafny.ISequence<DAST._IType> _3080___mcc_h1218 = _source104.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _3081___mcc_h1219 = _source104.dtor_variant;
            bool _3082___mcc_h1220 = _source104.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _3083___mcc_h1221 = _source104.dtor_contents;
            {
              _3066_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3066_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3055_name)));
            }
          } else if (_source104.is_Convert) {
            DAST._IExpression _3084___mcc_h1227 = _source104.dtor_value;
            DAST._IType _3085___mcc_h1228 = _source104.dtor_from;
            DAST._IType _3086___mcc_h1229 = _source104.dtor_typ;
            {
              _3066_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3066_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3055_name)));
            }
          } else if (_source104.is_SeqConstruct) {
            DAST._IExpression _3087___mcc_h1233 = _source104.dtor_length;
            DAST._IExpression _3088___mcc_h1234 = _source104.dtor_elem;
            {
              _3066_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3066_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3055_name)));
            }
          } else if (_source104.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _3089___mcc_h1237 = _source104.dtor_elements;
            DAST._IType _3090___mcc_h1238 = _source104.dtor_typ;
            {
              _3066_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3066_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3055_name)));
            }
          } else if (_source104.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _3091___mcc_h1241 = _source104.dtor_elements;
            {
              _3066_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3066_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3055_name)));
            }
          } else if (_source104.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3092___mcc_h1243 = _source104.dtor_mapElems;
            {
              _3066_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3066_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3055_name)));
            }
          } else if (_source104.is_This) {
            {
              _3066_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3066_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3055_name)));
            }
          } else if (_source104.is_Ite) {
            DAST._IExpression _3093___mcc_h1245 = _source104.dtor_cond;
            DAST._IExpression _3094___mcc_h1246 = _source104.dtor_thn;
            DAST._IExpression _3095___mcc_h1247 = _source104.dtor_els;
            {
              _3066_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3066_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3055_name)));
            }
          } else if (_source104.is_UnOp) {
            DAST._IUnaryOp _3096___mcc_h1251 = _source104.dtor_unOp;
            DAST._IExpression _3097___mcc_h1252 = _source104.dtor_expr;
            {
              _3066_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3066_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3055_name)));
            }
          } else if (_source104.is_BinOp) {
            DAST._IBinOp _3098___mcc_h1255 = _source104.dtor_op;
            DAST._IExpression _3099___mcc_h1256 = _source104.dtor_left;
            DAST._IExpression _3100___mcc_h1257 = _source104.dtor_right;
            {
              _3066_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3066_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3055_name)));
            }
          } else if (_source104.is_ArrayLen) {
            DAST._IExpression _3101___mcc_h1261 = _source104.dtor_expr;
            BigInteger _3102___mcc_h1262 = _source104.dtor_dim;
            {
              _3066_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3066_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3055_name)));
            }
          } else if (_source104.is_Select) {
            DAST._IExpression _3103___mcc_h1265 = _source104.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _3104___mcc_h1266 = _source104.dtor_field;
            bool _3105___mcc_h1267 = _source104.dtor_isConstant;
            bool _3106___mcc_h1268 = _source104.dtor_onDatatype;
            {
              _3066_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3066_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3055_name)));
            }
          } else if (_source104.is_SelectFn) {
            DAST._IExpression _3107___mcc_h1273 = _source104.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _3108___mcc_h1274 = _source104.dtor_field;
            bool _3109___mcc_h1275 = _source104.dtor_onDatatype;
            bool _3110___mcc_h1276 = _source104.dtor_isStatic;
            BigInteger _3111___mcc_h1277 = _source104.dtor_arity;
            {
              _3066_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3066_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3055_name)));
            }
          } else if (_source104.is_Index) {
            DAST._IExpression _3112___mcc_h1283 = _source104.dtor_expr;
            DAST._ICollKind _3113___mcc_h1284 = _source104.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _3114___mcc_h1285 = _source104.dtor_indices;
            {
              _3066_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3066_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3055_name)));
            }
          } else if (_source104.is_IndexRange) {
            DAST._IExpression _3115___mcc_h1289 = _source104.dtor_expr;
            bool _3116___mcc_h1290 = _source104.dtor_isArray;
            DAST._IOptional<DAST._IExpression> _3117___mcc_h1291 = _source104.dtor_low;
            DAST._IOptional<DAST._IExpression> _3118___mcc_h1292 = _source104.dtor_high;
            {
              _3066_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3066_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3055_name)));
            }
          } else if (_source104.is_TupleSelect) {
            DAST._IExpression _3119___mcc_h1297 = _source104.dtor_expr;
            BigInteger _3120___mcc_h1298 = _source104.dtor_index;
            {
              _3066_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3066_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3055_name)));
            }
          } else if (_source104.is_Call) {
            DAST._IExpression _3121___mcc_h1301 = _source104.dtor_on;
            Dafny.ISequence<Dafny.Rune> _3122___mcc_h1302 = _source104.dtor_name;
            Dafny.ISequence<DAST._IType> _3123___mcc_h1303 = _source104.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _3124___mcc_h1304 = _source104.dtor_args;
            {
              _3066_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3066_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3055_name)));
            }
          } else if (_source104.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _3125___mcc_h1309 = _source104.dtor_params;
            DAST._IType _3126___mcc_h1310 = _source104.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _3127___mcc_h1311 = _source104.dtor_body;
            {
              _3066_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3066_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3055_name)));
            }
          } else if (_source104.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3128___mcc_h1315 = _source104.dtor_values;
            DAST._IType _3129___mcc_h1316 = _source104.dtor_retType;
            DAST._IExpression _3130___mcc_h1317 = _source104.dtor_expr;
            {
              _3066_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3066_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3055_name)));
            }
          } else if (_source104.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _3131___mcc_h1321 = _source104.dtor_name;
            DAST._IType _3132___mcc_h1322 = _source104.dtor_typ;
            DAST._IExpression _3133___mcc_h1323 = _source104.dtor_value;
            DAST._IExpression _3134___mcc_h1324 = _source104.dtor_iifeBody;
            {
              _3066_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3066_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3055_name)));
            }
          } else if (_source104.is_Apply) {
            DAST._IExpression _3135___mcc_h1329 = _source104.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _3136___mcc_h1330 = _source104.dtor_args;
            {
              _3066_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3066_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3055_name)));
            }
          } else if (_source104.is_TypeTest) {
            DAST._IExpression _3137___mcc_h1333 = _source104.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3138___mcc_h1334 = _source104.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _3139___mcc_h1335 = _source104.dtor_variant;
            {
              _3066_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3066_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3055_name)));
            }
          } else if (_source104.is_InitializationValue) {
            DAST._IType _3140___mcc_h1339 = _source104.dtor_typ;
            {
              _3066_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3066_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3055_name)));
            }
          } else if (_source104.is_BoolBoundedPool) {
            {
              _3066_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3066_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3055_name)));
            }
          } else if (_source104.is_SetBoundedPool) {
            DAST._IExpression _3141___mcc_h1341 = _source104.dtor_of;
            {
              _3066_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3066_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3055_name)));
            }
          } else if (_source104.is_SeqBoundedPool) {
            DAST._IExpression _3142___mcc_h1343 = _source104.dtor_of;
            bool _3143___mcc_h1344 = _source104.dtor_includeDuplicates;
            {
              _3066_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3066_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3055_name)));
            }
          } else {
            DAST._IExpression _3144___mcc_h1347 = _source104.dtor_lo;
            DAST._IExpression _3145___mcc_h1348 = _source104.dtor_hi;
            {
              _3066_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3066_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3055_name)));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3066_enclosingString, _3057_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3060_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source39.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _3146___mcc_h216 = _source39.dtor_params;
        DAST._IType _3147___mcc_h217 = _source39.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _3148___mcc_h218 = _source39.dtor_body;
        Dafny.ISequence<DAST._IStatement> _3149_body = _3148___mcc_h218;
        DAST._IType _3150_retType = _3147___mcc_h217;
        Dafny.ISequence<DAST._IFormal> _3151_params = _3146___mcc_h216;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3152_paramNames;
          _3152_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3153_i;
          _3153_i = BigInteger.Zero;
          while ((_3153_i) < (new BigInteger((_3151_params).Count))) {
            _3152_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_3152_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(((_3151_params).Select(_3153_i)).dtor_name));
            _3153_i = (_3153_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3154_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3155_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1663;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1664;
          DCOMP.COMP.GenStmts(_3149_body, ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())), _3152_paramNames, true, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), out _out1663, out _out1664);
          _3154_recursiveGen = _out1663;
          _3155_recIdents = _out1664;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3156_allReadCloned;
          _3156_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          while (!(_3155_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _3157_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_1 in (_3155_recIdents).Elements) {
              _3157_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_1;
              if ((_3155_recIdents).Contains(_3157_next)) {
                goto after__ASSIGN_SUCH_THAT_1;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 1933)");
          after__ASSIGN_SUCH_THAT_1:;
            if ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) && ((_3157_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              if (!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) {
                _3156_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(_3156_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let _this = self.clone();\n"));
              }
            } else if (!((_3152_paramNames).Contains(_3157_next))) {
              _3156_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3156_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_3157_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_3157_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3157_next));
            }
            _3155_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3155_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3157_next));
          }
          Dafny.ISequence<Dafny.Rune> _3158_paramsString;
          _3158_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Dafny.ISequence<Dafny.Rune> _3159_paramTypes;
          _3159_paramTypes = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _3153_i = BigInteger.Zero;
          while ((_3153_i) < (new BigInteger((_3151_params).Count))) {
            if ((_3153_i).Sign == 1) {
              _3158_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_3158_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              _3159_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_3159_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3160_typStr;
            Dafny.ISequence<Dafny.Rune> _out1665;
            _out1665 = DCOMP.COMP.GenType(((_3151_params).Select(_3153_i)).dtor_typ, false, true);
            _3160_typStr = _out1665;
            _3158_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3158_paramsString, ((_3151_params).Select(_3153_i)).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _3160_typStr);
            _3159_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3159_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _3160_typStr);
            _3153_i = (_3153_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3161_retTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1666;
          _out1666 = DCOMP.COMP.GenType(_3150_retType, false, true);
          _3161_retTypeGen = _out1666;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper::<::std::rc::Rc<dyn ::std::ops::Fn("), _3159_paramTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _3161_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>({\n")), _3156_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(move |")), _3158_paramsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| -> ")), _3161_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _3154_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})})"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source39.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3162___mcc_h219 = _source39.dtor_values;
        DAST._IType _3163___mcc_h220 = _source39.dtor_retType;
        DAST._IExpression _3164___mcc_h221 = _source39.dtor_expr;
        DAST._IExpression _3165_expr = _3164___mcc_h221;
        DAST._IType _3166_retType = _3163___mcc_h220;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3167_values = _3162___mcc_h219;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3168_paramNames;
          _3168_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3169_paramNamesSet;
          _3169_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3170_i;
          _3170_i = BigInteger.Zero;
          while ((_3170_i) < (new BigInteger((_3167_values).Count))) {
            _3168_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_3168_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((_3167_values).Select(_3170_i)).dtor__0).dtor_name));
            _3169_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3169_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((((_3167_values).Select(_3170_i)).dtor__0).dtor_name));
            _3170_i = (_3170_i) + (BigInteger.One);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          Dafny.ISequence<Dafny.Rune> _3171_paramsString;
          _3171_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _3170_i = BigInteger.Zero;
          while ((_3170_i) < (new BigInteger((_3167_values).Count))) {
            if ((_3170_i).Sign == 1) {
              _3171_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_3171_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3172_typStr;
            Dafny.ISequence<Dafny.Rune> _out1667;
            _out1667 = DCOMP.COMP.GenType((((_3167_values).Select(_3170_i)).dtor__0).dtor_typ, false, true);
            _3172_typStr = _out1667;
            Dafny.ISequence<Dafny.Rune> _3173_valueGen;
            bool _3174___v91;
            bool _3175_valueErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3176_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1668;
            bool _out1669;
            bool _out1670;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1671;
            DCOMP.COMP.GenExpr(((_3167_values).Select(_3170_i)).dtor__1, selfIdent, @params, true, out _out1668, out _out1669, out _out1670, out _out1671);
            _3173_valueGen = _out1668;
            _3174___v91 = _out1669;
            _3175_valueErased = _out1670;
            _3176_recIdents = _out1671;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent((((_3167_values).Select(_3170_i)).dtor__0).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _3172_typStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3176_recIdents);
            if (_3175_valueErased) {
              _3173_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3173_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _3173_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            _3170_i = (_3170_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3177_recGen;
          bool _3178_recOwned;
          bool _3179_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3180_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1672;
          bool _out1673;
          bool _out1674;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1675;
          DCOMP.COMP.GenExpr(_3165_expr, selfIdent, _3168_paramNames, mustOwn, out _out1672, out _out1673, out _out1674, out _out1675);
          _3177_recGen = _out1672;
          _3178_recOwned = _out1673;
          _3179_recErased = _out1674;
          _3180_recIdents = _out1675;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3180_recIdents, _3169_paramNamesSet);
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _3177_recGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = _3178_recOwned;
          isErased = _3179_recErased;
        }
      } else if (_source39.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _3181___mcc_h222 = _source39.dtor_name;
        DAST._IType _3182___mcc_h223 = _source39.dtor_typ;
        DAST._IExpression _3183___mcc_h224 = _source39.dtor_value;
        DAST._IExpression _3184___mcc_h225 = _source39.dtor_iifeBody;
        DAST._IExpression _3185_iifeBody = _3184___mcc_h225;
        DAST._IExpression _3186_value = _3183___mcc_h224;
        DAST._IType _3187_tpe = _3182___mcc_h223;
        Dafny.ISequence<Dafny.Rune> _3188_name = _3181___mcc_h222;
        {
          Dafny.ISequence<Dafny.Rune> _3189_valueGen;
          bool _3190___v92;
          bool _3191_valueErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3192_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1676;
          bool _out1677;
          bool _out1678;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1679;
          DCOMP.COMP.GenExpr(_3186_value, selfIdent, @params, true, out _out1676, out _out1677, out _out1678, out _out1679);
          _3189_valueGen = _out1676;
          _3190___v92 = _out1677;
          _3191_valueErased = _out1678;
          _3192_recIdents = _out1679;
          if (_3191_valueErased) {
            _3189_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3189_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _3192_recIdents;
          Dafny.ISequence<Dafny.Rune> _3193_valueTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1680;
          _out1680 = DCOMP.COMP.GenType(_3187_tpe, false, true);
          _3193_valueTypeGen = _out1680;
          Dafny.ISequence<Dafny.Rune> _3194_bodyGen;
          bool _3195___v93;
          bool _3196_bodyErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3197_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out1681;
          bool _out1682;
          bool _out1683;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1684;
          DCOMP.COMP.GenExpr(_3185_iifeBody, selfIdent, @params, true, out _out1681, out _out1682, out _out1683, out _out1684);
          _3194_bodyGen = _out1681;
          _3195___v93 = _out1682;
          _3196_bodyErased = _out1683;
          _3197_bodyIdents = _out1684;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3197_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_3188_name))));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet "), DCOMP.__default.escapeIdent((_3188_name))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _3193_valueTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _3189_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _3194_bodyGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = true;
          isErased = _3196_bodyErased;
        }
      } else if (_source39.is_Apply) {
        DAST._IExpression _3198___mcc_h226 = _source39.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _3199___mcc_h227 = _source39.dtor_args;
        Dafny.ISequence<DAST._IExpression> _3200_args = _3199___mcc_h227;
        DAST._IExpression _3201_func = _3198___mcc_h226;
        {
          Dafny.ISequence<Dafny.Rune> _3202_funcString;
          bool _3203___v94;
          bool _3204_funcErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3205_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1685;
          bool _out1686;
          bool _out1687;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1688;
          DCOMP.COMP.GenExpr(_3201_func, selfIdent, @params, false, out _out1685, out _out1686, out _out1687, out _out1688);
          _3202_funcString = _out1685;
          _3203___v94 = _out1686;
          _3204_funcErased = _out1687;
          _3205_recIdents = _out1688;
          readIdents = _3205_recIdents;
          Dafny.ISequence<Dafny.Rune> _3206_argString;
          _3206_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _3207_i;
          _3207_i = BigInteger.Zero;
          while ((_3207_i) < (new BigInteger((_3200_args).Count))) {
            if ((_3207_i).Sign == 1) {
              _3206_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3206_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3208_argExpr;
            bool _3209_isOwned;
            bool _3210_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3211_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1689;
            bool _out1690;
            bool _out1691;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1692;
            DCOMP.COMP.GenExpr((_3200_args).Select(_3207_i), selfIdent, @params, false, out _out1689, out _out1690, out _out1691, out _out1692);
            _3208_argExpr = _out1689;
            _3209_isOwned = _out1690;
            _3210_argErased = _out1691;
            _3211_argIdents = _out1692;
            if (_3209_isOwned) {
              _3208_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3208_argExpr);
            }
            _3206_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3206_argString, _3208_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3211_argIdents);
            _3207_i = (_3207_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _3202_funcString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3206_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source39.is_TypeTest) {
        DAST._IExpression _3212___mcc_h228 = _source39.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3213___mcc_h229 = _source39.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _3214___mcc_h230 = _source39.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _3215_variant = _3214___mcc_h230;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3216_dType = _3213___mcc_h229;
        DAST._IExpression _3217_on = _3212___mcc_h228;
        {
          Dafny.ISequence<Dafny.Rune> _3218_exprGen;
          bool _3219___v95;
          bool _3220_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3221_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1693;
          bool _out1694;
          bool _out1695;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1696;
          DCOMP.COMP.GenExpr(_3217_on, selfIdent, @params, false, out _out1693, out _out1694, out _out1695, out _out1696);
          _3218_exprGen = _out1693;
          _3219___v95 = _out1694;
          _3220_exprErased = _out1695;
          _3221_recIdents = _out1696;
          Dafny.ISequence<Dafny.Rune> _3222_dTypePath;
          Dafny.ISequence<Dafny.Rune> _out1697;
          _out1697 = DCOMP.COMP.GenPath(_3216_dType);
          _3222_dTypePath = _out1697;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!("), _3218_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref(), ")), _3222_dTypePath), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_3215_variant)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. })"));
          isOwned = true;
          isErased = true;
          readIdents = _3221_recIdents;
        }
      } else if (_source39.is_InitializationValue) {
        DAST._IType _3223___mcc_h231 = _source39.dtor_typ;
        DAST._IType _3224_typ = _3223___mcc_h231;
        {
          Dafny.ISequence<Dafny.Rune> _3225_typString;
          Dafny.ISequence<Dafny.Rune> _out1698;
          _out1698 = DCOMP.COMP.GenType(_3224_typ, false, false);
          _3225_typString = _out1698;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3225_typString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()"));
          isOwned = true;
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source39.is_BoolBoundedPool) {
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]");
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source39.is_SetBoundedPool) {
        DAST._IExpression _3226___mcc_h232 = _source39.dtor_of;
        DAST._IExpression _3227_of = _3226___mcc_h232;
        {
          Dafny.ISequence<Dafny.Rune> _3228_exprGen;
          bool _3229___v96;
          bool _3230_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3231_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1699;
          bool _out1700;
          bool _out1701;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1702;
          DCOMP.COMP.GenExpr(_3227_of, selfIdent, @params, false, out _out1699, out _out1700, out _out1701, out _out1702);
          _3228_exprGen = _out1699;
          _3229___v96 = _out1700;
          _3230_exprErased = _out1701;
          _3231_recIdents = _out1702;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3228_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          isOwned = true;
          isErased = _3230_exprErased;
          readIdents = _3231_recIdents;
        }
      } else if (_source39.is_SeqBoundedPool) {
        DAST._IExpression _3232___mcc_h233 = _source39.dtor_of;
        bool _3233___mcc_h234 = _source39.dtor_includeDuplicates;
        bool _3234_includeDuplicates = _3233___mcc_h234;
        DAST._IExpression _3235_of = _3232___mcc_h233;
        {
          Dafny.ISequence<Dafny.Rune> _3236_exprGen;
          bool _3237___v97;
          bool _3238_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3239_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1703;
          bool _out1704;
          bool _out1705;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1706;
          DCOMP.COMP.GenExpr(_3235_of, selfIdent, @params, false, out _out1703, out _out1704, out _out1705, out _out1706);
          _3236_exprGen = _out1703;
          _3237___v97 = _out1704;
          _3238_exprErased = _out1705;
          _3239_recIdents = _out1706;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3236_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          if (!(_3234_includeDuplicates)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::itertools::Itertools::unique("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          isOwned = true;
          isErased = _3238_exprErased;
          readIdents = _3239_recIdents;
        }
      } else {
        DAST._IExpression _3240___mcc_h235 = _source39.dtor_lo;
        DAST._IExpression _3241___mcc_h236 = _source39.dtor_hi;
        DAST._IExpression _3242_hi = _3241___mcc_h236;
        DAST._IExpression _3243_lo = _3240___mcc_h235;
        {
          Dafny.ISequence<Dafny.Rune> _3244_loString;
          bool _3245___v98;
          bool _3246_loErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3247_recIdentsLo;
          Dafny.ISequence<Dafny.Rune> _out1707;
          bool _out1708;
          bool _out1709;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1710;
          DCOMP.COMP.GenExpr(_3243_lo, selfIdent, @params, true, out _out1707, out _out1708, out _out1709, out _out1710);
          _3244_loString = _out1707;
          _3245___v98 = _out1708;
          _3246_loErased = _out1709;
          _3247_recIdentsLo = _out1710;
          Dafny.ISequence<Dafny.Rune> _3248_hiString;
          bool _3249___v99;
          bool _3250_hiErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3251_recIdentsHi;
          Dafny.ISequence<Dafny.Rune> _out1711;
          bool _out1712;
          bool _out1713;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1714;
          DCOMP.COMP.GenExpr(_3242_hi, selfIdent, @params, true, out _out1711, out _out1712, out _out1713, out _out1714);
          _3248_hiString = _out1711;
          _3249___v99 = _out1712;
          _3250_hiErased = _out1713;
          _3251_recIdentsHi = _out1714;
          if (!(_3246_loErased)) {
            _3244_loString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3244_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (!(_3250_hiErased)) {
            _3248_hiString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3248_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::integer_range("), _3244_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3248_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3247_recIdentsLo, _3251_recIdentsHi);
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern crate dafny_runtime;\n"));
      BigInteger _3252_i;
      _3252_i = BigInteger.Zero;
      while ((_3252_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _3253_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        Dafny.ISequence<Dafny.Rune> _out1715;
        _out1715 = DCOMP.COMP.GenModule((p).Select(_3252_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _3253_generated = _out1715;
        if ((_3252_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _3253_generated);
        _3252_i = (_3252_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _3254_i;
      _3254_i = BigInteger.Zero;
      while ((_3254_i) < (new BigInteger((fullName).Count))) {
        if ((_3254_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, (fullName).Select(_3254_i));
        _3254_i = (_3254_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
  }
} // end of namespace DCOMP

class __CallToMain {
  public static void Main(string[] args) {
    Dafny.Helpers.WithHaltHandling(() => DAM.__default._Main(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.UnicodeFromMainArguments(args)));
  }
}
