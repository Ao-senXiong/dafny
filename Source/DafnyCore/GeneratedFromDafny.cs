// Dafny program the_program compiled into C#
// To recompile, you will need the libraries
//     System.Runtime.Numerics.dll System.Collections.Immutable.dll
// but the 'dotnet' tool in net6.0 should pick those up automatically.
// Optionally, you may want to include compiler switches like
//     /debug /nowarn:162,164,168,183,219,436,1717,1718

using System;
using System.Numerics;
using System.Collections;
namespace Formatting {

  public partial class __default {
    public static System.String ReindentProgramFromFirstToken(Microsoft.Dafny.IToken firstToken, Formatting.IIndentationFormatter reindent) {
      System.String s = default(System.String);
      Microsoft.Dafny.IToken token;
      token = firstToken;
      System.Text.StringBuilder sb;
      System.Text.StringBuilder _nw0 = new System.Text.StringBuilder();
      sb = _nw0;
      while ((token) != (object)((Microsoft.Dafny.IToken)null)) {
        System.String newLeadingTrivia;
        newLeadingTrivia = (reindent).GetNewLeadingTrivia(token);
        System.String newTrailingTrivia;
        newTrailingTrivia = (reindent).GetNewTrailingTrivia(token);
        (sb).Append(newLeadingTrivia);
        (sb).Append(token.val);
        (sb).Append(newTrailingTrivia);
        token = token.Next;
      }
      System.String _out0;
      _out0 = (sb).ToString().ToString();
      s = _out0;
      return s;
    }
  }

  public interface IIndentationFormatter {
    System.String GetNewLeadingTrivia(Microsoft.Dafny.IToken token);
    System.String GetNewTrailingTrivia(Microsoft.Dafny.IToken token);
  }
  public class _Companion_IIndentationFormatter {
  }
} // end of namespace Formatting


namespace Std.Wrappers {

  public partial class __default {
    public static Std.Wrappers._IOutcomeResult<__E> Need<__E>(bool condition, __E error) {
      if (condition) {
        return Std.Wrappers.OutcomeResult<__E>.create_Pass_k();
      } else {
        return Std.Wrappers.OutcomeResult<__E>.create_Fail_k(error);
      }
    }
  }

  public interface _IOption<out T> {
    bool is_None { get; }
    bool is_Some { get; }
    T dtor_value { get; }
    _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0);
    bool IsFailure();
    Std.Wrappers._IOption<__U> PropagateFailure<__U>();
    T Extract();
    Std.Wrappers._IResult<T, __E> ToResult<__E>(__E error);
    Std.Wrappers._IOutcome<__E> ToOutcome<__E>(__E error);
  }
  public abstract class Option<T> : _IOption<T> {
    public Option() {
    }
    public static Std.Wrappers._IOption<T> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOption<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOption<T>>(Std.Wrappers.Option<T>.Default());
    }
    public static _IOption<T> create_None() {
      return new Option_None<T>();
    }
    public static _IOption<T> create_Some(T @value) {
      return new Option_Some<T>(@value);
    }
    public bool is_None { get { return this is Option_None<T>; } }
    public bool is_Some { get { return this is Option_Some<T>; } }
    public T dtor_value {
      get {
        var d = this;
        return ((Option_Some<T>)d)._value;
      }
    }
    public abstract _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0);
    public bool IsFailure() {
      return (this).is_None;
    }
    public Std.Wrappers._IOption<__U> PropagateFailure<__U>() {
      return Std.Wrappers.Option<__U>.create_None();
    }
    public T Extract() {
      return (this).dtor_value;
    }
    public static T GetOr(Std.Wrappers._IOption<T> _this, T @default) {
      Std.Wrappers._IOption<T> _source0 = _this;
      if (_source0.is_None) {
        return @default;
      } else {
        T __mcc_h0 = _source0.dtor_value;
        T v = __mcc_h0;
        return v;
      }
    }
    public Std.Wrappers._IResult<T, __E> ToResult<__E>(__E error) {
      Std.Wrappers._IOption<T> _source1 = this;
      if (_source1.is_None) {
        return Std.Wrappers.Result<T, __E>.create_Failure(error);
      } else {
        T __mcc_h0 = _source1.dtor_value;
        T v = __mcc_h0;
        return Std.Wrappers.Result<T, __E>.create_Success(v);
      }
    }
    public Std.Wrappers._IOutcome<__E> ToOutcome<__E>(__E error) {
      Std.Wrappers._IOption<T> _source2 = this;
      if (_source2.is_None) {
        return Std.Wrappers.Outcome<__E>.create_Fail(error);
      } else {
        T __mcc_h0 = _source2.dtor_value;
        T v = __mcc_h0;
        return Std.Wrappers.Outcome<__E>.create_Pass();
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IOption<T> _this, Func<Std.Wrappers._IOption<T>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IOption<T>, __FC>>(rewrap)(_this);
    }
  }
  public class Option_None<T> : Option<T> {
    public Option_None() : base() {
    }
    public override _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOption<__T> dt) { return dt; }
      return new Option_None<__T>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Option_None<T>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Option.None";
      return s;
    }
  }
  public class Option_Some<T> : Option<T> {
    public readonly T _value;
    public Option_Some(T @value) : base() {
      this._value = @value;
    }
    public override _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOption<__T> dt) { return dt; }
      return new Option_Some<__T>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Option_Some<T>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Option.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }

  public interface _IResult<out R, out E> {
    bool is_Success { get; }
    bool is_Failure { get; }
    R dtor_value { get; }
    E dtor_error { get; }
    _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1);
    bool IsFailure();
    Std.Wrappers._IResult<__U, E> PropagateFailure<__U>();
    R Extract();
    Std.Wrappers._IOption<R> ToOption();
    Std.Wrappers._IOutcome<E> ToOutcome();
  }
  public abstract class Result<R, E> : _IResult<R, E> {
    public Result() {
    }
    public static Std.Wrappers._IResult<R, E> Default(R _default_R) {
      return create_Success(_default_R);
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IResult<R, E>> _TypeDescriptor(Dafny.TypeDescriptor<R> _td_R) {
      return new Dafny.TypeDescriptor<Std.Wrappers._IResult<R, E>>(Std.Wrappers.Result<R, E>.Default(_td_R.Default()));
    }
    public static _IResult<R, E> create_Success(R @value) {
      return new Result_Success<R, E>(@value);
    }
    public static _IResult<R, E> create_Failure(E error) {
      return new Result_Failure<R, E>(error);
    }
    public bool is_Success { get { return this is Result_Success<R, E>; } }
    public bool is_Failure { get { return this is Result_Failure<R, E>; } }
    public R dtor_value {
      get {
        var d = this;
        return ((Result_Success<R, E>)d)._value;
      }
    }
    public E dtor_error {
      get {
        var d = this;
        return ((Result_Failure<R, E>)d)._error;
      }
    }
    public abstract _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1);
    public bool IsFailure() {
      return (this).is_Failure;
    }
    public Std.Wrappers._IResult<__U, E> PropagateFailure<__U>() {
      return Std.Wrappers.Result<__U, E>.create_Failure((this).dtor_error);
    }
    public R Extract() {
      return (this).dtor_value;
    }
    public static R GetOr(Std.Wrappers._IResult<R, E> _this, R @default) {
      Std.Wrappers._IResult<R, E> _source3 = _this;
      if (_source3.is_Success) {
        R _10___mcc_h0 = _source3.dtor_value;
        R _11_s = _10___mcc_h0;
        return _11_s;
      } else {
        E _12___mcc_h1 = _source3.dtor_error;
        E _13_e = _12___mcc_h1;
        return @default;
      }
    }
    public Std.Wrappers._IOption<R> ToOption() {
      Std.Wrappers._IResult<R, E> _source4 = this;
      if (_source4.is_Success) {
        R _14___mcc_h0 = _source4.dtor_value;
        R _15_s = _14___mcc_h0;
        return Std.Wrappers.Option<R>.create_Some(_15_s);
      } else {
        E _16___mcc_h1 = _source4.dtor_error;
        E _17_e = _16___mcc_h1;
        return Std.Wrappers.Option<R>.create_None();
      }
    }
    public Std.Wrappers._IOutcome<E> ToOutcome() {
      Std.Wrappers._IResult<R, E> _source5 = this;
      if (_source5.is_Success) {
        R _18___mcc_h0 = _source5.dtor_value;
        R _19_s = _18___mcc_h0;
        return Std.Wrappers.Outcome<E>.create_Pass();
      } else {
        E _20___mcc_h1 = _source5.dtor_error;
        E _21_e = _20___mcc_h1;
        return Std.Wrappers.Outcome<E>.create_Fail(_21_e);
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IResult<R, E> _this, Func<Std.Wrappers._IResult<R, E>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IResult<R, E>, __FC>>(rewrap)(_this);
    }
    public static Std.Wrappers._IResult<R, __NewE> MapFailure<__NewE>(Std.Wrappers._IResult<R, E> _this, Func<E, __NewE> reWrap) {
      Std.Wrappers._IResult<R, E> _source6 = _this;
      if (_source6.is_Success) {
        R _22___mcc_h0 = _source6.dtor_value;
        R _23_s = _22___mcc_h0;
        return Std.Wrappers.Result<R, __NewE>.create_Success(_23_s);
      } else {
        E _24___mcc_h1 = _source6.dtor_error;
        E _25_e = _24___mcc_h1;
        return Std.Wrappers.Result<R, __NewE>.create_Failure(Dafny.Helpers.Id<Func<E, __NewE>>(reWrap)(_25_e));
      }
    }
  }
  public class Result_Success<R, E> : Result<R, E> {
    public readonly R _value;
    public Result_Success(R @value) : base() {
      this._value = @value;
    }
    public override _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1) {
      if (this is _IResult<__R, __E> dt) { return dt; }
      return new Result_Success<__R, __E>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Result_Success<R, E>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Result.Success";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Result_Failure<R, E> : Result<R, E> {
    public readonly E _error;
    public Result_Failure(E error) : base() {
      this._error = error;
    }
    public override _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1) {
      if (this is _IResult<__R, __E> dt) { return dt; }
      return new Result_Failure<__R, __E>(converter1(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Result_Failure<R, E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Result.Failure";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }

  public interface _IOutcome<out E> {
    bool is_Pass { get; }
    bool is_Fail { get; }
    E dtor_error { get; }
    _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0);
    bool IsFailure();
    Std.Wrappers._IOutcome<E> PropagateFailure();
    Std.Wrappers._IOption<__R> ToOption<__R>(__R r);
    Std.Wrappers._IResult<__R, E> ToResult<__R>(__R r);
  }
  public abstract class Outcome<E> : _IOutcome<E> {
    public Outcome() {
    }
    public static Std.Wrappers._IOutcome<E> Default() {
      return create_Pass();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOutcome<E>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOutcome<E>>(Std.Wrappers.Outcome<E>.Default());
    }
    public static _IOutcome<E> create_Pass() {
      return new Outcome_Pass<E>();
    }
    public static _IOutcome<E> create_Fail(E error) {
      return new Outcome_Fail<E>(error);
    }
    public bool is_Pass { get { return this is Outcome_Pass<E>; } }
    public bool is_Fail { get { return this is Outcome_Fail<E>; } }
    public E dtor_error {
      get {
        var d = this;
        return ((Outcome_Fail<E>)d)._error;
      }
    }
    public abstract _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0);
    public bool IsFailure() {
      return (this).is_Fail;
    }
    public Std.Wrappers._IOutcome<E> PropagateFailure() {
      return this;
    }
    public Std.Wrappers._IOption<__R> ToOption<__R>(__R r) {
      Std.Wrappers._IOutcome<E> _source7 = this;
      if (_source7.is_Pass) {
        return Std.Wrappers.Option<__R>.create_Some(r);
      } else {
        E _26___mcc_h0 = _source7.dtor_error;
        E _27_e = _26___mcc_h0;
        return Std.Wrappers.Option<__R>.create_None();
      }
    }
    public Std.Wrappers._IResult<__R, E> ToResult<__R>(__R r) {
      Std.Wrappers._IOutcome<E> _source8 = this;
      if (_source8.is_Pass) {
        return Std.Wrappers.Result<__R, E>.create_Success(r);
      } else {
        E _28___mcc_h0 = _source8.dtor_error;
        E _29_e = _28___mcc_h0;
        return Std.Wrappers.Result<__R, E>.create_Failure(_29_e);
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IOutcome<E> _this, Func<Std.Wrappers._IOutcome<E>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IOutcome<E>, __FC>>(rewrap)(_this);
    }
    public static Std.Wrappers._IResult<__T, __NewE> MapFailure<__T, __NewE>(Std.Wrappers._IOutcome<E> _this, Func<E, __NewE> rewrap, __T @default) {
      Std.Wrappers._IOutcome<E> _source9 = _this;
      if (_source9.is_Pass) {
        return Std.Wrappers.Result<__T, __NewE>.create_Success(@default);
      } else {
        E _30___mcc_h0 = _source9.dtor_error;
        E _31_e = _30___mcc_h0;
        return Std.Wrappers.Result<__T, __NewE>.create_Failure(Dafny.Helpers.Id<Func<E, __NewE>>(rewrap)(_31_e));
      }
    }
    public static Std.Wrappers._IOutcome<E> Need(bool condition, E error) {
      if (condition) {
        return Std.Wrappers.Outcome<E>.create_Pass();
      } else {
        return Std.Wrappers.Outcome<E>.create_Fail(error);
      }
    }
  }
  public class Outcome_Pass<E> : Outcome<E> {
    public Outcome_Pass() : base() {
    }
    public override _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcome<__E> dt) { return dt; }
      return new Outcome_Pass<__E>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Outcome_Pass<E>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Outcome.Pass";
      return s;
    }
  }
  public class Outcome_Fail<E> : Outcome<E> {
    public readonly E _error;
    public Outcome_Fail(E error) : base() {
      this._error = error;
    }
    public override _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcome<__E> dt) { return dt; }
      return new Outcome_Fail<__E>(converter0(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Outcome_Fail<E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Outcome.Fail";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }

  public interface _IOutcomeResult<out E> {
    bool is_Pass_k { get; }
    bool is_Fail_k { get; }
    E dtor_error { get; }
    _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0);
    bool IsFailure();
    Std.Wrappers._IResult<__U, E> PropagateFailure<__U>();
  }
  public abstract class OutcomeResult<E> : _IOutcomeResult<E> {
    public OutcomeResult() {
    }
    public static Std.Wrappers._IOutcomeResult<E> Default() {
      return create_Pass_k();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOutcomeResult<E>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOutcomeResult<E>>(Std.Wrappers.OutcomeResult<E>.Default());
    }
    public static _IOutcomeResult<E> create_Pass_k() {
      return new OutcomeResult_Pass_k<E>();
    }
    public static _IOutcomeResult<E> create_Fail_k(E error) {
      return new OutcomeResult_Fail_k<E>(error);
    }
    public bool is_Pass_k { get { return this is OutcomeResult_Pass_k<E>; } }
    public bool is_Fail_k { get { return this is OutcomeResult_Fail_k<E>; } }
    public E dtor_error {
      get {
        var d = this;
        return ((OutcomeResult_Fail_k<E>)d)._error;
      }
    }
    public abstract _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0);
    public bool IsFailure() {
      return (this).is_Fail_k;
    }
    public Std.Wrappers._IResult<__U, E> PropagateFailure<__U>() {
      return Std.Wrappers.Result<__U, E>.create_Failure((this).dtor_error);
    }
  }
  public class OutcomeResult_Pass_k<E> : OutcomeResult<E> {
    public OutcomeResult_Pass_k() : base() {
    }
    public override _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcomeResult<__E> dt) { return dt; }
      return new OutcomeResult_Pass_k<__E>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.OutcomeResult_Pass_k<E>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.OutcomeResult.Pass'";
      return s;
    }
  }
  public class OutcomeResult_Fail_k<E> : OutcomeResult<E> {
    public readonly E _error;
    public OutcomeResult_Fail_k(E error) : base() {
      this._error = error;
    }
    public override _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcomeResult<__E> dt) { return dt; }
      return new OutcomeResult_Fail_k<__E>(converter0(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.OutcomeResult_Fail_k<E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.OutcomeResult.Fail'";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }
} // end of namespace Std.Wrappers
namespace Std.Math {

  public partial class __default {
    public static BigInteger Min(BigInteger a, BigInteger b) {
      if ((a) < (b)) {
        return a;
      } else {
        return b;
      }
    }
    public static BigInteger Min3(BigInteger a, BigInteger b, BigInteger c) {
      return Std.Math.__default.Min(a, Std.Math.__default.Min(b, c));
    }
    public static BigInteger Max(BigInteger a, BigInteger b) {
      if ((a) < (b)) {
        return b;
      } else {
        return a;
      }
    }
    public static BigInteger Max3(BigInteger a, BigInteger b, BigInteger c) {
      return Std.Math.__default.Max(a, Std.Math.__default.Max(b, c));
    }
    public static BigInteger Abs(BigInteger a) {
      if ((a).Sign == -1) {
        return (BigInteger.Zero) - (a);
      } else {
        return a;
      }
    }
  }
} // end of namespace Std.Math
namespace Std.Collections.Seq {

  public partial class __default {
    public static __T First<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Select(BigInteger.Zero);
    }
    public static Dafny.ISequence<__T> DropFirst<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Drop(BigInteger.One);
    }
    public static __T Last<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Select((new BigInteger((xs).Count)) - (BigInteger.One));
    }
    public static Dafny.ISequence<__T> DropLast<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
    }
    public static __T[] ToArray<__T>(Dafny.ISequence<__T> xs) {
      __T[] a = new __T[0];
      Func<BigInteger, __T> _init2 = Dafny.Helpers.Id<Func<Dafny.ISequence<__T>, Func<BigInteger, __T>>>((_75_xs) => ((System.Func<BigInteger, __T>)((_76_i) => {
        return (_75_xs).Select(_76_i);
      })))(xs);
      __T[] _nw3 = new __T[Dafny.Helpers.ToIntChecked(new BigInteger((xs).Count), "array size exceeds memory limit")];
      for (var _i0_2 = 0; _i0_2 < new BigInteger(_nw3.Length); _i0_2++) {
        _nw3[(int)(_i0_2)] = _init2(_i0_2);
      }
      a = _nw3;
      return a;
    }
    public static Dafny.ISet<__T> ToSet<__T>(Dafny.ISequence<__T> xs) {
      return Dafny.Helpers.Id<Func<Dafny.ISequence<__T>, Dafny.ISet<__T>>>((_77_xs) => ((System.Func<Dafny.ISet<__T>>)(() => {
        var _coll0 = new System.Collections.Generic.List<__T>();
        foreach (__T _compr_0 in (_77_xs).Elements) {
          __T _78_x = (__T)_compr_0;
          if ((_77_xs).Contains(_78_x)) {
            _coll0.Add(_78_x);
          }
        }
        return Dafny.Set<__T>.FromCollection(_coll0);
      }))())(xs);
    }
    public static BigInteger IndexOf<__T>(Dafny.ISequence<__T> xs, __T v) {
      BigInteger _79___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if (object.Equals((xs).Select(BigInteger.Zero), v)) {
        return (BigInteger.Zero) + (_79___accumulator);
      } else {
        _79___accumulator = (_79___accumulator) + (BigInteger.One);
        Dafny.ISequence<__T> _in0 = (xs).Drop(BigInteger.One);
        __T _in1 = v;
        xs = _in0;
        v = _in1;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<BigInteger> IndexOfOption<__T>(Dafny.ISequence<__T> xs, __T v) {
      return Std.Collections.Seq.__default.IndexByOption<__T>(xs, Dafny.Helpers.Id<Func<__T, Func<__T, bool>>>((_80_v) => ((System.Func<__T, bool>)((_81_x) => {
        return object.Equals(_81_x, _80_v);
      })))(v));
    }
    public static Std.Wrappers._IOption<BigInteger> IndexByOption<__T>(Dafny.ISequence<__T> xs, Func<__T, bool> p) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Option<BigInteger>.create_None();
      } else if (Dafny.Helpers.Id<Func<__T, bool>>(p)((xs).Select(BigInteger.Zero))) {
        return Std.Wrappers.Option<BigInteger>.create_Some(BigInteger.Zero);
      } else {
        Std.Wrappers._IOption<BigInteger> _82_o_k = Std.Collections.Seq.__default.IndexByOption<__T>((xs).Drop(BigInteger.One), p);
        if ((_82_o_k).is_Some) {
          return Std.Wrappers.Option<BigInteger>.create_Some(((_82_o_k).dtor_value) + (BigInteger.One));
        } else {
          return Std.Wrappers.Option<BigInteger>.create_None();
        }
      }
    }
    public static BigInteger LastIndexOf<__T>(Dafny.ISequence<__T> xs, __T v) {
    TAIL_CALL_START:;
      if (object.Equals((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One)), v)) {
        return (new BigInteger((xs).Count)) - (BigInteger.One);
      } else {
        Dafny.ISequence<__T> _in2 = (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
        __T _in3 = v;
        xs = _in2;
        v = _in3;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<BigInteger> LastIndexOfOption<__T>(Dafny.ISequence<__T> xs, __T v) {
      return Std.Collections.Seq.__default.LastIndexByOption<__T>(xs, Dafny.Helpers.Id<Func<__T, Func<__T, bool>>>((_83_v) => ((System.Func<__T, bool>)((_84_x) => {
        return object.Equals(_84_x, _83_v);
      })))(v));
    }
    public static Std.Wrappers._IOption<BigInteger> LastIndexByOption<__T>(Dafny.ISequence<__T> xs, Func<__T, bool> p) {
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Option<BigInteger>.create_None();
      } else if (Dafny.Helpers.Id<Func<__T, bool>>(p)((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One)))) {
        return Std.Wrappers.Option<BigInteger>.create_Some((new BigInteger((xs).Count)) - (BigInteger.One));
      } else {
        Dafny.ISequence<__T> _in4 = (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
        Func<__T, bool> _in5 = p;
        xs = _in4;
        p = _in5;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Remove<__T>(Dafny.ISequence<__T> xs, BigInteger pos) {
      return Dafny.Sequence<__T>.Concat((xs).Take(pos), (xs).Drop((pos) + (BigInteger.One)));
    }
    public static Dafny.ISequence<__T> RemoveValue<__T>(Dafny.ISequence<__T> xs, __T v) {
      if (!(xs).Contains(v)) {
        return xs;
      } else {
        BigInteger _85_i = Std.Collections.Seq.__default.IndexOf<__T>(xs, v);
        return Dafny.Sequence<__T>.Concat((xs).Take(_85_i), (xs).Drop((_85_i) + (BigInteger.One)));
      }
    }
    public static Dafny.ISequence<__T> Insert<__T>(Dafny.ISequence<__T> xs, __T a, BigInteger pos) {
      return Dafny.Sequence<__T>.Concat(Dafny.Sequence<__T>.Concat((xs).Take(pos), Dafny.Sequence<__T>.FromElements(a)), (xs).Drop(pos));
    }
    public static Dafny.ISequence<__T> Reverse<__T>(Dafny.ISequence<__T> xs) {
      Dafny.ISequence<__T> _86___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((xs).Equals(Dafny.Sequence<__T>.FromElements())) {
        return Dafny.Sequence<__T>.Concat(_86___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _86___accumulator = Dafny.Sequence<__T>.Concat(_86___accumulator, Dafny.Sequence<__T>.FromElements((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One))));
        Dafny.ISequence<__T> _in6 = (xs).Subsequence(BigInteger.Zero, (new BigInteger((xs).Count)) - (BigInteger.One));
        xs = _in6;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Repeat<__T>(__T v, BigInteger length) {
      Dafny.ISequence<__T> _87___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((length).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_87___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _87___accumulator = Dafny.Sequence<__T>.Concat(_87___accumulator, Dafny.Sequence<__T>.FromElements(v));
        __T _in7 = v;
        BigInteger _in8 = (length) - (BigInteger.One);
        v = _in7;
        length = _in8;
        goto TAIL_CALL_START;
      }
    }
    public static _System._ITuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>> Unzip<__A, __B>(Dafny.ISequence<_System._ITuple2<__A, __B>> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>>.create(Dafny.Sequence<__A>.FromElements(), Dafny.Sequence<__B>.FromElements());
      } else {
        _System._ITuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>> _let_tmp_rhs0 = Std.Collections.Seq.__default.Unzip<__A, __B>(Std.Collections.Seq.__default.DropLast<_System._ITuple2<__A, __B>>(xs));
        Dafny.ISequence<__A> _88_a = _let_tmp_rhs0.dtor__0;
        Dafny.ISequence<__B> _89_b = _let_tmp_rhs0.dtor__1;
        return _System.Tuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>>.create(Dafny.Sequence<__A>.Concat(_88_a, Dafny.Sequence<__A>.FromElements((Std.Collections.Seq.__default.Last<_System._ITuple2<__A, __B>>(xs)).dtor__0)), Dafny.Sequence<__B>.Concat(_89_b, Dafny.Sequence<__B>.FromElements((Std.Collections.Seq.__default.Last<_System._ITuple2<__A, __B>>(xs)).dtor__1)));
      }
    }
    public static Dafny.ISequence<_System._ITuple2<__A, __B>> Zip<__A, __B>(Dafny.ISequence<__A> xs, Dafny.ISequence<__B> ys) {
      Dafny.ISequence<_System._ITuple2<__A, __B>> _90___accumulator = Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<_System._ITuple2<__A, __B>>.Concat(Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements(), _90___accumulator);
      } else {
        _90___accumulator = Dafny.Sequence<_System._ITuple2<__A, __B>>.Concat(Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements(_System.Tuple2<__A, __B>.create(Std.Collections.Seq.__default.Last<__A>(xs), Std.Collections.Seq.__default.Last<__B>(ys))), _90___accumulator);
        Dafny.ISequence<__A> _in9 = Std.Collections.Seq.__default.DropLast<__A>(xs);
        Dafny.ISequence<__B> _in10 = Std.Collections.Seq.__default.DropLast<__B>(ys);
        xs = _in9;
        ys = _in10;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger Max(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)) == (BigInteger.One)) {
        return (xs).Select(BigInteger.Zero);
      } else {
        return Std.Math.__default.Max((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.Max((xs).Drop(BigInteger.One)));
      }
    }
    public static BigInteger Min(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)) == (BigInteger.One)) {
        return (xs).Select(BigInteger.Zero);
      } else {
        return Std.Math.__default.Min((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.Min((xs).Drop(BigInteger.One)));
      }
    }
    public static Dafny.ISequence<__T> Flatten<__T>(Dafny.ISequence<Dafny.ISequence<__T>> xs) {
      Dafny.ISequence<__T> _91___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_91___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _91___accumulator = Dafny.Sequence<__T>.Concat(_91___accumulator, (xs).Select(BigInteger.Zero));
        Dafny.ISequence<Dafny.ISequence<__T>> _in11 = (xs).Drop(BigInteger.One);
        xs = _in11;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> FlattenReverse<__T>(Dafny.ISequence<Dafny.ISequence<__T>> xs) {
      Dafny.ISequence<__T> _92___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(Dafny.Sequence<__T>.FromElements(), _92___accumulator);
      } else {
        _92___accumulator = Dafny.Sequence<__T>.Concat(Std.Collections.Seq.__default.Last<Dafny.ISequence<__T>>(xs), _92___accumulator);
        Dafny.ISequence<Dafny.ISequence<__T>> _in12 = Std.Collections.Seq.__default.DropLast<Dafny.ISequence<__T>>(xs);
        xs = _in12;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Join<__T>(Dafny.ISequence<Dafny.ISequence<__T>> seqs, Dafny.ISequence<__T> separator) {
      Dafny.ISequence<__T> _93___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((seqs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_93___accumulator, Dafny.Sequence<__T>.FromElements());
      } else if ((new BigInteger((seqs).Count)) == (BigInteger.One)) {
        return Dafny.Sequence<__T>.Concat(_93___accumulator, (seqs).Select(BigInteger.Zero));
      } else {
        _93___accumulator = Dafny.Sequence<__T>.Concat(_93___accumulator, Dafny.Sequence<__T>.Concat((seqs).Select(BigInteger.Zero), separator));
        Dafny.ISequence<Dafny.ISequence<__T>> _in13 = (seqs).Drop(BigInteger.One);
        Dafny.ISequence<__T> _in14 = separator;
        seqs = _in13;
        separator = _in14;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.ISequence<__T>> Split<__T>(Dafny.ISequence<__T> s, __T delim) {
      Dafny.ISequence<Dafny.ISequence<__T>> _94___accumulator = Dafny.Sequence<Dafny.ISequence<__T>>.FromElements();
    TAIL_CALL_START:;
      Std.Wrappers._IOption<BigInteger> _95_i = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      if ((_95_i).is_Some) {
        _94___accumulator = Dafny.Sequence<Dafny.ISequence<__T>>.Concat(_94___accumulator, Dafny.Sequence<Dafny.ISequence<__T>>.FromElements((s).Take((_95_i).dtor_value)));
        Dafny.ISequence<__T> _in15 = (s).Drop(((_95_i).dtor_value) + (BigInteger.One));
        __T _in16 = delim;
        s = _in15;
        delim = _in16;
        goto TAIL_CALL_START;
      } else {
        return Dafny.Sequence<Dafny.ISequence<__T>>.Concat(_94___accumulator, Dafny.Sequence<Dafny.ISequence<__T>>.FromElements(s));
      }
    }
    public static _System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>> SplitOnce<__T>(Dafny.ISequence<__T> s, __T delim) {
      Std.Wrappers._IOption<BigInteger> _96_i = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      return _System.Tuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>.create((s).Take((_96_i).dtor_value), (s).Drop(((_96_i).dtor_value) + (BigInteger.One)));
    }
    public static Std.Wrappers._IOption<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>> SplitOnceOption<__T>(Dafny.ISequence<__T> s, __T delim) {
      Std.Wrappers._IOption<BigInteger> _97_valueOrError0 = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      if ((_97_valueOrError0).IsFailure()) {
        return (_97_valueOrError0).PropagateFailure<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>>();
      } else {
        BigInteger _98_i = (_97_valueOrError0).Extract();
        return Std.Wrappers.Option<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>>.create_Some(_System.Tuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>.create((s).Take(_98_i), (s).Drop((_98_i) + (BigInteger.One))));
      }
    }
    public static Dafny.ISequence<__R> Map<__T, __R>(Func<__T, __R> f, Dafny.ISequence<__T> xs) {
      Dafny.ISequence<__R> _99___accumulator = Dafny.Sequence<__R>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__R>.Concat(_99___accumulator, Dafny.Sequence<__R>.FromElements());
      } else {
        _99___accumulator = Dafny.Sequence<__R>.Concat(_99___accumulator, Dafny.Sequence<__R>.FromElements(Dafny.Helpers.Id<Func<__T, __R>>(f)((xs).Select(BigInteger.Zero))));
        Func<__T, __R> _in17 = f;
        Dafny.ISequence<__T> _in18 = (xs).Drop(BigInteger.One);
        f = _in17;
        xs = _in18;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IResult<Dafny.ISequence<__R>, __E> MapWithResult<__T, __R, __E>(Func<__T, Std.Wrappers._IResult<__R, __E>> f, Dafny.ISequence<__T> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Result<Dafny.ISequence<__R>, __E>.create_Success(Dafny.Sequence<__R>.FromElements());
      } else {
        Std.Wrappers._IResult<__R, __E> _100_valueOrError0 = Dafny.Helpers.Id<Func<__T, Std.Wrappers._IResult<__R, __E>>>(f)((xs).Select(BigInteger.Zero));
        if ((_100_valueOrError0).IsFailure()) {
          return (_100_valueOrError0).PropagateFailure<Dafny.ISequence<__R>>();
        } else {
          __R _101_head = (_100_valueOrError0).Extract();
          Std.Wrappers._IResult<Dafny.ISequence<__R>, __E> _102_valueOrError1 = Std.Collections.Seq.__default.MapWithResult<__T, __R, __E>(f, (xs).Drop(BigInteger.One));
          if ((_102_valueOrError1).IsFailure()) {
            return (_102_valueOrError1).PropagateFailure<Dafny.ISequence<__R>>();
          } else {
            Dafny.ISequence<__R> _103_tail = (_102_valueOrError1).Extract();
            return Std.Wrappers.Result<Dafny.ISequence<__R>, __E>.create_Success(Dafny.Sequence<__R>.Concat(Dafny.Sequence<__R>.FromElements(_101_head), _103_tail));
          }
        }
      }
    }
    public static Dafny.ISequence<__T> Filter<__T>(Func<__T, bool> f, Dafny.ISequence<__T> xs) {
      Dafny.ISequence<__T> _104___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_104___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _104___accumulator = Dafny.Sequence<__T>.Concat(_104___accumulator, ((Dafny.Helpers.Id<Func<__T, bool>>(f)((xs).Select(BigInteger.Zero))) ? (Dafny.Sequence<__T>.FromElements((xs).Select(BigInteger.Zero))) : (Dafny.Sequence<__T>.FromElements())));
        Func<__T, bool> _in19 = f;
        Dafny.ISequence<__T> _in20 = (xs).Drop(BigInteger.One);
        f = _in19;
        xs = _in20;
        goto TAIL_CALL_START;
      }
    }
    public static __A FoldLeft<__A, __T>(Func<__A, __T, __A> f, __A init, Dafny.ISequence<__T> xs) {
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return init;
      } else {
        Func<__A, __T, __A> _in21 = f;
        __A _in22 = Dafny.Helpers.Id<Func<__A, __T, __A>>(f)(init, (xs).Select(BigInteger.Zero));
        Dafny.ISequence<__T> _in23 = (xs).Drop(BigInteger.One);
        f = _in21;
        init = _in22;
        xs = _in23;
        goto TAIL_CALL_START;
      }
    }
    public static __A FoldRight<__A, __T>(Func<__T, __A, __A> f, Dafny.ISequence<__T> xs, __A init) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return init;
      } else {
        return Dafny.Helpers.Id<Func<__T, __A, __A>>(f)((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.FoldRight<__A, __T>(f, (xs).Drop(BigInteger.One), init));
      }
    }
    public static Dafny.ISequence<__T> SetToSeq<__T>(Dafny.ISet<__T> s) {
      Dafny.ISequence<__T> xs = Dafny.Sequence<__T>.Empty;
      xs = Dafny.Sequence<__T>.FromElements();
      Dafny.ISet<__T> _105_left;
      _105_left = s;
      while (!(_105_left).Equals(Dafny.Set<__T>.FromElements())) {
        __T _106_x;
        foreach (__T _assign_such_that_0 in (_105_left).Elements) {
          _106_x = (__T)_assign_such_that_0;
          if ((_105_left).Contains(_106_x)) {
            goto after__ASSIGN_SUCH_THAT_0;
          }
        }
        throw new System.Exception("assign-such-that search produced no value (line 7231)");
      after__ASSIGN_SUCH_THAT_0:;
        _105_left = Dafny.Set<__T>.Difference(_105_left, Dafny.Set<__T>.FromElements(_106_x));
        xs = Dafny.Sequence<__T>.Concat(xs, Dafny.Sequence<__T>.FromElements(_106_x));
      }
      return xs;
    }
    public static Dafny.ISequence<__T> SetToSortedSeq<__T>(Dafny.ISet<__T> s, Func<__T, __T, bool> R) {
      Dafny.ISequence<__T> xs = Dafny.Sequence<__T>.Empty;
      Dafny.ISequence<__T> _out6;
      _out6 = Std.Collections.Seq.__default.SetToSeq<__T>(s);
      xs = _out6;
      xs = Std.Collections.Seq.__default.MergeSortBy<__T>(R, xs);
      return xs;
    }
    public static Dafny.ISequence<__T> MergeSortBy<__T>(Func<__T, __T, bool> lessThanOrEq, Dafny.ISequence<__T> a) {
      if ((new BigInteger((a).Count)) <= (BigInteger.One)) {
        return a;
      } else {
        BigInteger _107_splitIndex = Dafny.Helpers.EuclideanDivision(new BigInteger((a).Count), new BigInteger(2));
        Dafny.ISequence<__T> _108_left = (a).Take(_107_splitIndex);
        Dafny.ISequence<__T> _109_right = (a).Drop(_107_splitIndex);
        Dafny.ISequence<__T> _110_leftSorted = Std.Collections.Seq.__default.MergeSortBy<__T>(lessThanOrEq, _108_left);
        Dafny.ISequence<__T> _111_rightSorted = Std.Collections.Seq.__default.MergeSortBy<__T>(lessThanOrEq, _109_right);
        return Std.Collections.Seq.__default.MergeSortedWith<__T>(_110_leftSorted, _111_rightSorted, lessThanOrEq);
      }
    }
    public static Dafny.ISequence<__T> MergeSortedWith<__T>(Dafny.ISequence<__T> left, Dafny.ISequence<__T> right, Func<__T, __T, bool> lessThanOrEq) {
      Dafny.ISequence<__T> _112___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((left).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_112___accumulator, right);
      } else if ((new BigInteger((right).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_112___accumulator, left);
      } else if (Dafny.Helpers.Id<Func<__T, __T, bool>>(lessThanOrEq)((left).Select(BigInteger.Zero), (right).Select(BigInteger.Zero))) {
        _112___accumulator = Dafny.Sequence<__T>.Concat(_112___accumulator, Dafny.Sequence<__T>.FromElements((left).Select(BigInteger.Zero)));
        Dafny.ISequence<__T> _in24 = (left).Drop(BigInteger.One);
        Dafny.ISequence<__T> _in25 = right;
        Func<__T, __T, bool> _in26 = lessThanOrEq;
        left = _in24;
        right = _in25;
        lessThanOrEq = _in26;
        goto TAIL_CALL_START;
      } else {
        _112___accumulator = Dafny.Sequence<__T>.Concat(_112___accumulator, Dafny.Sequence<__T>.FromElements((right).Select(BigInteger.Zero)));
        Dafny.ISequence<__T> _in27 = left;
        Dafny.ISequence<__T> _in28 = (right).Drop(BigInteger.One);
        Func<__T, __T, bool> _in29 = lessThanOrEq;
        left = _in27;
        right = _in28;
        lessThanOrEq = _in29;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Collections.Seq
namespace Std.Arithmetic.GeneralInternals {

} // end of namespace Std.Arithmetic.GeneralInternals
namespace Std.Arithmetic.MulInternalsNonlinear {

} // end of namespace Std.Arithmetic.MulInternalsNonlinear
namespace Std.Arithmetic.MulInternals {

  public partial class __default {
    public static BigInteger MulPos(BigInteger x, BigInteger y) {
      BigInteger _141___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if ((x).Sign == 0) {
        return (BigInteger.Zero) + (_141___accumulator);
      } else {
        _141___accumulator = (_141___accumulator) + (y);
        BigInteger _in32 = (x) - (BigInteger.One);
        BigInteger _in33 = y;
        x = _in32;
        y = _in33;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger MulRecursive(BigInteger x, BigInteger y) {
      if ((x).Sign != -1) {
        return Std.Arithmetic.MulInternals.__default.MulPos(x, y);
      } else {
        return (new BigInteger(-1)) * (Std.Arithmetic.MulInternals.__default.MulPos((new BigInteger(-1)) * (x), y));
      }
    }
  }
} // end of namespace Std.Arithmetic.MulInternals
namespace Std.Arithmetic.Mul {

} // end of namespace Std.Arithmetic.Mul
namespace Std.Arithmetic.ModInternalsNonlinear {

} // end of namespace Std.Arithmetic.ModInternalsNonlinear
namespace Std.Arithmetic.DivInternalsNonlinear {

} // end of namespace Std.Arithmetic.DivInternalsNonlinear
namespace Std.Arithmetic.ModInternals {

  public partial class __default {
    public static BigInteger ModRecursive(BigInteger x, BigInteger d) {
    TAIL_CALL_START:;
      if ((x).Sign == -1) {
        BigInteger _in34 = (d) + (x);
        BigInteger _in35 = d;
        x = _in34;
        d = _in35;
        goto TAIL_CALL_START;
      } else if ((x) < (d)) {
        return x;
      } else {
        BigInteger _in36 = (x) - (d);
        BigInteger _in37 = d;
        x = _in36;
        d = _in37;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.ModInternals
namespace Std.Arithmetic.DivInternals {

  public partial class __default {
    public static BigInteger DivPos(BigInteger x, BigInteger d) {
      BigInteger _142___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if ((x).Sign == -1) {
        _142___accumulator = (_142___accumulator) + (new BigInteger(-1));
        BigInteger _in38 = (x) + (d);
        BigInteger _in39 = d;
        x = _in38;
        d = _in39;
        goto TAIL_CALL_START;
      } else if ((x) < (d)) {
        return (BigInteger.Zero) + (_142___accumulator);
      } else {
        _142___accumulator = (_142___accumulator) + (BigInteger.One);
        BigInteger _in40 = (x) - (d);
        BigInteger _in41 = d;
        x = _in40;
        d = _in41;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger DivRecursive(BigInteger x, BigInteger d) {
      if ((d).Sign == 1) {
        return Std.Arithmetic.DivInternals.__default.DivPos(x, d);
      } else {
        return (new BigInteger(-1)) * (Std.Arithmetic.DivInternals.__default.DivPos(x, (new BigInteger(-1)) * (d)));
      }
    }
  }
} // end of namespace Std.Arithmetic.DivInternals
namespace Std.Arithmetic.DivMod {

  public partial class __default {
    public static bool MultiplesVanish(BigInteger a, BigInteger b, BigInteger m) {
      return (Dafny.Helpers.EuclideanModulus(((m) * (a)) + (b), m)) == (Dafny.Helpers.EuclideanModulus(b, m));
    }
  }
} // end of namespace Std.Arithmetic.DivMod
namespace Std.Arithmetic.Power {

  public partial class __default {
    public static BigInteger Pow(BigInteger b, BigInteger e) {
      BigInteger _143___accumulator = BigInteger.One;
    TAIL_CALL_START:;
      if ((e).Sign == 0) {
        return (BigInteger.One) * (_143___accumulator);
      } else {
        _143___accumulator = (_143___accumulator) * (b);
        BigInteger _in42 = b;
        BigInteger _in43 = (e) - (BigInteger.One);
        b = _in42;
        e = _in43;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.Power
namespace Std.Arithmetic.Logarithm {

  public partial class __default {
    public static BigInteger Log(BigInteger @base, BigInteger pow) {
      BigInteger _144___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if ((pow) < (@base)) {
        return (BigInteger.Zero) + (_144___accumulator);
      } else {
        _144___accumulator = (_144___accumulator) + (BigInteger.One);
        BigInteger _in44 = @base;
        BigInteger _in45 = Dafny.Helpers.EuclideanDivision(pow, @base);
        @base = _in44;
        pow = _in45;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.Logarithm
namespace Std.Arithmetic.Power2 {

  public partial class __default {
    public static BigInteger Pow2(BigInteger e) {
      return Std.Arithmetic.Power.__default.Pow(new BigInteger(2), e);
    }
  }
} // end of namespace Std.Arithmetic.Power2
namespace Std.Arithmetic {

} // end of namespace Std.Arithmetic
namespace Std.Strings.HexConversion {

  public partial class __default {
    public static BigInteger BASE() {
      return Std.Strings.HexConversion.__default.@base;
    }
    public static bool IsDigitChar(Dafny.Rune c) {
      return (Std.Strings.HexConversion.__default.charToDigit).Contains(c);
    }
    public static Dafny.ISequence<Dafny.Rune> OfDigits(Dafny.ISequence<BigInteger> digits) {
      Dafny.ISequence<Dafny.Rune> _145___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((digits).Equals(Dafny.Sequence<BigInteger>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(), _145___accumulator);
      } else {
        _145___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.HexConversion.__default.chars).Select((digits).Select(BigInteger.Zero))), _145___accumulator);
        Dafny.ISequence<BigInteger> _in46 = (digits).Drop(BigInteger.One);
        digits = _in46;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.HexConversion.__default.chars).Select(BigInteger.Zero));
      } else {
        return Std.Strings.HexConversion.__default.OfDigits(Std.Strings.HexConversion.__default.FromNat(n));
      }
    }
    public static bool IsNumberStr(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus) {
      return !(!(str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) || (((((str).Select(BigInteger.Zero)) == (minus)) || ((Std.Strings.HexConversion.__default.charToDigit).Contains((str).Select(BigInteger.Zero)))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, bool>>((_146_str) => Dafny.Helpers.Quantifier<Dafny.Rune>(((_146_str).Drop(BigInteger.One)).UniqueElements, true, (((_forall_var_1) => {
        Dafny.Rune _147_c = (Dafny.Rune)_forall_var_1;
        return !(((_146_str).Drop(BigInteger.One)).Contains(_147_c)) || (Std.Strings.HexConversion.__default.IsDigitChar(_147_c));
      }))))(str)));
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n, Dafny.Rune minus) {
      if ((n).Sign != -1) {
        return Std.Strings.HexConversion.__default.OfNat(n);
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(minus), Std.Strings.HexConversion.__default.OfNat((BigInteger.Zero) - (n)));
      }
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return BigInteger.Zero;
      } else {
        Dafny.Rune _148_c = (str).Select((new BigInteger((str).Count)) - (BigInteger.One));
        return ((Std.Strings.HexConversion.__default.ToNat((str).Take((new BigInteger((str).Count)) - (BigInteger.One)))) * (Std.Strings.HexConversion.__default.@base)) + (Dafny.Map<Dafny.Rune, BigInteger>.Select(Std.Strings.HexConversion.__default.charToDigit, _148_c));
      }
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus) {
      if (Dafny.Sequence<Dafny.Rune>.IsPrefixOf(Dafny.Sequence<Dafny.Rune>.FromElements(minus), str)) {
        return (BigInteger.Zero) - (Std.Strings.HexConversion.__default.ToNat((str).Drop(BigInteger.One)));
      } else {
        return Std.Strings.HexConversion.__default.ToNat(str);
      }
    }
    public static BigInteger ToNatRight(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        return ((Std.Strings.HexConversion.__default.ToNatRight(Std.Collections.Seq.__default.DropFirst<BigInteger>(xs))) * (Std.Strings.HexConversion.__default.BASE())) + (Std.Collections.Seq.__default.First<BigInteger>(xs));
      }
    }
    public static BigInteger ToNatLeft(Dafny.ISequence<BigInteger> xs) {
      BigInteger _149___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return (BigInteger.Zero) + (_149___accumulator);
      } else {
        _149___accumulator = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) * (Std.Arithmetic.Power.__default.Pow(Std.Strings.HexConversion.__default.BASE(), (new BigInteger((xs).Count)) - (BigInteger.One)))) + (_149___accumulator);
        Dafny.ISequence<BigInteger> _in47 = Std.Collections.Seq.__default.DropLast<BigInteger>(xs);
        xs = _in47;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> FromNat(BigInteger n) {
      Dafny.ISequence<BigInteger> _150___accumulator = Dafny.Sequence<BigInteger>.FromElements();
    TAIL_CALL_START:;
      if ((n).Sign == 0) {
        return Dafny.Sequence<BigInteger>.Concat(_150___accumulator, Dafny.Sequence<BigInteger>.FromElements());
      } else {
        _150___accumulator = Dafny.Sequence<BigInteger>.Concat(_150___accumulator, Dafny.Sequence<BigInteger>.FromElements(Dafny.Helpers.EuclideanModulus(n, Std.Strings.HexConversion.__default.BASE())));
        BigInteger _in48 = Dafny.Helpers.EuclideanDivision(n, Std.Strings.HexConversion.__default.BASE());
        n = _in48;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtend(Dafny.ISequence<BigInteger> xs, BigInteger n) {
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)) >= (n)) {
        return xs;
      } else {
        Dafny.ISequence<BigInteger> _in49 = Dafny.Sequence<BigInteger>.Concat(xs, Dafny.Sequence<BigInteger>.FromElements(BigInteger.Zero));
        BigInteger _in50 = n;
        xs = _in49;
        n = _in50;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtendMultiple(Dafny.ISequence<BigInteger> xs, BigInteger n) {
      BigInteger _151_newLen = ((new BigInteger((xs).Count)) + (n)) - (Dafny.Helpers.EuclideanModulus(new BigInteger((xs).Count), n));
      return Std.Strings.HexConversion.__default.SeqExtend(xs, _151_newLen);
    }
    public static Dafny.ISequence<BigInteger> FromNatWithLen(BigInteger n, BigInteger len) {
      return Std.Strings.HexConversion.__default.SeqExtend(Std.Strings.HexConversion.__default.FromNat(n), len);
    }
    public static Dafny.ISequence<BigInteger> SeqZero(BigInteger len) {
      Dafny.ISequence<BigInteger> _152_xs = Std.Strings.HexConversion.__default.FromNatWithLen(BigInteger.Zero, len);
      return _152_xs;
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqAdd(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs1 = Std.Strings.HexConversion.__default.SeqAdd(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _153_zs_k = _let_tmp_rhs1.dtor__0;
        BigInteger _154_cin = _let_tmp_rhs1.dtor__1;
        BigInteger _155_sum = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) + (Std.Collections.Seq.__default.Last<BigInteger>(ys))) + (_154_cin);
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs2 = (((_155_sum) < (Std.Strings.HexConversion.__default.BASE())) ? (_System.Tuple2<BigInteger, BigInteger>.create(_155_sum, BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((_155_sum) - (Std.Strings.HexConversion.__default.BASE()), BigInteger.One)));
        BigInteger _156_sum__out = _let_tmp_rhs2.dtor__0;
        BigInteger _157_cout = _let_tmp_rhs2.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_153_zs_k, Dafny.Sequence<BigInteger>.FromElements(_156_sum__out)), _157_cout);
      }
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqSub(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs3 = Std.Strings.HexConversion.__default.SeqSub(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _158_zs = _let_tmp_rhs3.dtor__0;
        BigInteger _159_cin = _let_tmp_rhs3.dtor__1;
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs4 = (((Std.Collections.Seq.__default.Last<BigInteger>(xs)) >= ((Std.Collections.Seq.__default.Last<BigInteger>(ys)) + (_159_cin))) ? (_System.Tuple2<BigInteger, BigInteger>.create(((Std.Collections.Seq.__default.Last<BigInteger>(xs)) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_159_cin), BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((((Std.Strings.HexConversion.__default.BASE()) + (Std.Collections.Seq.__default.Last<BigInteger>(xs))) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_159_cin), BigInteger.One)));
        BigInteger _160_diff__out = _let_tmp_rhs4.dtor__0;
        BigInteger _161_cout = _let_tmp_rhs4.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_158_zs, Dafny.Sequence<BigInteger>.FromElements(_160_diff__out)), _161_cout);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> HEX__DIGITS {
      get {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789ABCDEF");
      }
    }
    public static Dafny.ISequence<Dafny.Rune> chars {
      get {
        return Std.Strings.HexConversion.__default.HEX__DIGITS;
      }
    }
    public static BigInteger @base {
      get {
        return new BigInteger((Std.Strings.HexConversion.__default.chars).Count);
      }
    }
    public static Dafny.IMap<Dafny.Rune, BigInteger> charToDigit {
      get {
        return Dafny.Map<Dafny.Rune, BigInteger>.FromElements(new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('0'), BigInteger.Zero), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('1'), BigInteger.One), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('2'), new BigInteger(2)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('3'), new BigInteger(3)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('4'), new BigInteger(4)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('5'), new BigInteger(5)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('6'), new BigInteger(6)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('7'), new BigInteger(7)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('8'), new BigInteger(8)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('9'), new BigInteger(9)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('a'), new BigInteger(10)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('b'), new BigInteger(11)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('c'), new BigInteger(12)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('d'), new BigInteger(13)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('e'), new BigInteger(14)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('f'), new BigInteger(15)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('A'), new BigInteger(10)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('B'), new BigInteger(11)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('C'), new BigInteger(12)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('D'), new BigInteger(13)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('E'), new BigInteger(14)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('F'), new BigInteger(15)));
      }
    }
  }

  public partial class CharSeq {
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class digit {
    private static readonly Dafny.TypeDescriptor<BigInteger> _TYPE = new Dafny.TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static Dafny.TypeDescriptor<BigInteger> _TypeDescriptor() {
      return _TYPE;
    }
  }
} // end of namespace Std.Strings.HexConversion
namespace Std.Strings.DecimalConversion {

  public partial class __default {
    public static BigInteger BASE() {
      return Std.Strings.DecimalConversion.__default.@base;
    }
    public static bool IsDigitChar(Dafny.Rune c) {
      return (Std.Strings.DecimalConversion.__default.charToDigit).Contains(c);
    }
    public static Dafny.ISequence<Dafny.Rune> OfDigits(Dafny.ISequence<BigInteger> digits) {
      Dafny.ISequence<Dafny.Rune> _162___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((digits).Equals(Dafny.Sequence<BigInteger>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(), _162___accumulator);
      } else {
        _162___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.DecimalConversion.__default.chars).Select((digits).Select(BigInteger.Zero))), _162___accumulator);
        Dafny.ISequence<BigInteger> _in51 = (digits).Drop(BigInteger.One);
        digits = _in51;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.DecimalConversion.__default.chars).Select(BigInteger.Zero));
      } else {
        return Std.Strings.DecimalConversion.__default.OfDigits(Std.Strings.DecimalConversion.__default.FromNat(n));
      }
    }
    public static bool IsNumberStr(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus) {
      return !(!(str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) || (((((str).Select(BigInteger.Zero)) == (minus)) || ((Std.Strings.DecimalConversion.__default.charToDigit).Contains((str).Select(BigInteger.Zero)))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, bool>>((_163_str) => Dafny.Helpers.Quantifier<Dafny.Rune>(((_163_str).Drop(BigInteger.One)).UniqueElements, true, (((_forall_var_2) => {
        Dafny.Rune _164_c = (Dafny.Rune)_forall_var_2;
        return !(((_163_str).Drop(BigInteger.One)).Contains(_164_c)) || (Std.Strings.DecimalConversion.__default.IsDigitChar(_164_c));
      }))))(str)));
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n, Dafny.Rune minus) {
      if ((n).Sign != -1) {
        return Std.Strings.DecimalConversion.__default.OfNat(n);
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(minus), Std.Strings.DecimalConversion.__default.OfNat((BigInteger.Zero) - (n)));
      }
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return BigInteger.Zero;
      } else {
        Dafny.Rune _165_c = (str).Select((new BigInteger((str).Count)) - (BigInteger.One));
        return ((Std.Strings.DecimalConversion.__default.ToNat((str).Take((new BigInteger((str).Count)) - (BigInteger.One)))) * (Std.Strings.DecimalConversion.__default.@base)) + (Dafny.Map<Dafny.Rune, BigInteger>.Select(Std.Strings.DecimalConversion.__default.charToDigit, _165_c));
      }
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus) {
      if (Dafny.Sequence<Dafny.Rune>.IsPrefixOf(Dafny.Sequence<Dafny.Rune>.FromElements(minus), str)) {
        return (BigInteger.Zero) - (Std.Strings.DecimalConversion.__default.ToNat((str).Drop(BigInteger.One)));
      } else {
        return Std.Strings.DecimalConversion.__default.ToNat(str);
      }
    }
    public static BigInteger ToNatRight(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        return ((Std.Strings.DecimalConversion.__default.ToNatRight(Std.Collections.Seq.__default.DropFirst<BigInteger>(xs))) * (Std.Strings.DecimalConversion.__default.BASE())) + (Std.Collections.Seq.__default.First<BigInteger>(xs));
      }
    }
    public static BigInteger ToNatLeft(Dafny.ISequence<BigInteger> xs) {
      BigInteger _166___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return (BigInteger.Zero) + (_166___accumulator);
      } else {
        _166___accumulator = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) * (Std.Arithmetic.Power.__default.Pow(Std.Strings.DecimalConversion.__default.BASE(), (new BigInteger((xs).Count)) - (BigInteger.One)))) + (_166___accumulator);
        Dafny.ISequence<BigInteger> _in52 = Std.Collections.Seq.__default.DropLast<BigInteger>(xs);
        xs = _in52;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> FromNat(BigInteger n) {
      Dafny.ISequence<BigInteger> _167___accumulator = Dafny.Sequence<BigInteger>.FromElements();
    TAIL_CALL_START:;
      if ((n).Sign == 0) {
        return Dafny.Sequence<BigInteger>.Concat(_167___accumulator, Dafny.Sequence<BigInteger>.FromElements());
      } else {
        _167___accumulator = Dafny.Sequence<BigInteger>.Concat(_167___accumulator, Dafny.Sequence<BigInteger>.FromElements(Dafny.Helpers.EuclideanModulus(n, Std.Strings.DecimalConversion.__default.BASE())));
        BigInteger _in53 = Dafny.Helpers.EuclideanDivision(n, Std.Strings.DecimalConversion.__default.BASE());
        n = _in53;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtend(Dafny.ISequence<BigInteger> xs, BigInteger n) {
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)) >= (n)) {
        return xs;
      } else {
        Dafny.ISequence<BigInteger> _in54 = Dafny.Sequence<BigInteger>.Concat(xs, Dafny.Sequence<BigInteger>.FromElements(BigInteger.Zero));
        BigInteger _in55 = n;
        xs = _in54;
        n = _in55;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtendMultiple(Dafny.ISequence<BigInteger> xs, BigInteger n) {
      BigInteger _168_newLen = ((new BigInteger((xs).Count)) + (n)) - (Dafny.Helpers.EuclideanModulus(new BigInteger((xs).Count), n));
      return Std.Strings.DecimalConversion.__default.SeqExtend(xs, _168_newLen);
    }
    public static Dafny.ISequence<BigInteger> FromNatWithLen(BigInteger n, BigInteger len) {
      return Std.Strings.DecimalConversion.__default.SeqExtend(Std.Strings.DecimalConversion.__default.FromNat(n), len);
    }
    public static Dafny.ISequence<BigInteger> SeqZero(BigInteger len) {
      Dafny.ISequence<BigInteger> _169_xs = Std.Strings.DecimalConversion.__default.FromNatWithLen(BigInteger.Zero, len);
      return _169_xs;
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqAdd(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs5 = Std.Strings.DecimalConversion.__default.SeqAdd(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _170_zs_k = _let_tmp_rhs5.dtor__0;
        BigInteger _171_cin = _let_tmp_rhs5.dtor__1;
        BigInteger _172_sum = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) + (Std.Collections.Seq.__default.Last<BigInteger>(ys))) + (_171_cin);
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs6 = (((_172_sum) < (Std.Strings.DecimalConversion.__default.BASE())) ? (_System.Tuple2<BigInteger, BigInteger>.create(_172_sum, BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((_172_sum) - (Std.Strings.DecimalConversion.__default.BASE()), BigInteger.One)));
        BigInteger _173_sum__out = _let_tmp_rhs6.dtor__0;
        BigInteger _174_cout = _let_tmp_rhs6.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_170_zs_k, Dafny.Sequence<BigInteger>.FromElements(_173_sum__out)), _174_cout);
      }
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqSub(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs7 = Std.Strings.DecimalConversion.__default.SeqSub(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _175_zs = _let_tmp_rhs7.dtor__0;
        BigInteger _176_cin = _let_tmp_rhs7.dtor__1;
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs8 = (((Std.Collections.Seq.__default.Last<BigInteger>(xs)) >= ((Std.Collections.Seq.__default.Last<BigInteger>(ys)) + (_176_cin))) ? (_System.Tuple2<BigInteger, BigInteger>.create(((Std.Collections.Seq.__default.Last<BigInteger>(xs)) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_176_cin), BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((((Std.Strings.DecimalConversion.__default.BASE()) + (Std.Collections.Seq.__default.Last<BigInteger>(xs))) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_176_cin), BigInteger.One)));
        BigInteger _177_diff__out = _let_tmp_rhs8.dtor__0;
        BigInteger _178_cout = _let_tmp_rhs8.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_175_zs, Dafny.Sequence<BigInteger>.FromElements(_177_diff__out)), _178_cout);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> DIGITS {
      get {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789");
      }
    }
    public static Dafny.ISequence<Dafny.Rune> chars {
      get {
        return Std.Strings.DecimalConversion.__default.DIGITS;
      }
    }
    public static BigInteger @base {
      get {
        return new BigInteger((Std.Strings.DecimalConversion.__default.chars).Count);
      }
    }
    public static Dafny.IMap<Dafny.Rune, BigInteger> charToDigit {
      get {
        return Dafny.Map<Dafny.Rune, BigInteger>.FromElements(new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('0'), BigInteger.Zero), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('1'), BigInteger.One), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('2'), new BigInteger(2)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('3'), new BigInteger(3)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('4'), new BigInteger(4)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('5'), new BigInteger(5)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('6'), new BigInteger(6)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('7'), new BigInteger(7)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('8'), new BigInteger(8)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('9'), new BigInteger(9)));
      }
    }
  }

  public partial class CharSeq {
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class digit {
    private static readonly Dafny.TypeDescriptor<BigInteger> _TYPE = new Dafny.TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static Dafny.TypeDescriptor<BigInteger> _TypeDescriptor() {
      return _TYPE;
    }
  }
} // end of namespace Std.Strings.DecimalConversion
namespace Std.Strings.CharStrEscaping {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> Escape(Dafny.ISequence<Dafny.Rune> str, Dafny.ISet<Dafny.Rune> mustEscape, Dafny.Rune escape) {
      Dafny.ISequence<Dafny.Rune> _179___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_179___accumulator, str);
      } else if ((mustEscape).Contains((str).Select(BigInteger.Zero))) {
        _179___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_179___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements(escape, (str).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in56 = (str).Drop(BigInteger.One);
        Dafny.ISet<Dafny.Rune> _in57 = mustEscape;
        Dafny.Rune _in58 = escape;
        str = _in56;
        mustEscape = _in57;
        escape = _in58;
        goto TAIL_CALL_START;
      } else {
        _179___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_179___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in59 = (str).Drop(BigInteger.One);
        Dafny.ISet<Dafny.Rune> _in60 = mustEscape;
        Dafny.Rune _in61 = escape;
        str = _in59;
        mustEscape = _in60;
        escape = _in61;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> Unescape(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune escape) {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(str);
      } else if (((str).Select(BigInteger.Zero)) == (escape)) {
        if ((new BigInteger((str).Count)) > (BigInteger.One)) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _180_valueOrError0 = Std.Strings.CharStrEscaping.__default.Unescape((str).Drop(new BigInteger(2)), escape);
          if ((_180_valueOrError0).IsFailure()) {
            return (_180_valueOrError0).PropagateFailure<Dafny.ISequence<Dafny.Rune>>();
          } else {
            Dafny.ISequence<Dafny.Rune> _181_tl = (_180_valueOrError0).Extract();
            return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.One)), _181_tl));
          }
        } else {
          return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
        }
      } else {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _182_valueOrError1 = Std.Strings.CharStrEscaping.__default.Unescape((str).Drop(BigInteger.One), escape);
        if ((_182_valueOrError1).IsFailure()) {
          return (_182_valueOrError1).PropagateFailure<Dafny.ISequence<Dafny.Rune>>();
        } else {
          Dafny.ISequence<Dafny.Rune> _183_tl = (_182_valueOrError1).Extract();
          return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.Zero)), _183_tl));
        }
      }
    }
  }
} // end of namespace Std.Strings.CharStrEscaping
namespace Std.Strings {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      return Std.Strings.DecimalConversion.__default.OfNat(n);
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n) {
      return Std.Strings.DecimalConversion.__default.OfInt(n, new Dafny.Rune('-'));
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.DecimalConversion.__default.ToNat(str);
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.DecimalConversion.__default.ToInt(str, new Dafny.Rune('-'));
    }
    public static Dafny.ISequence<Dafny.Rune> EscapeQuotes(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.CharStrEscaping.__default.Escape(str, Dafny.Set<Dafny.Rune>.FromElements(new Dafny.Rune('\"'), new Dafny.Rune('\'')), new Dafny.Rune('\\'));
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> UnescapeQuotes(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.CharStrEscaping.__default.Unescape(str, new Dafny.Rune('\\'));
    }
    public static Dafny.ISequence<Dafny.Rune> OfBool(bool b) {
      if (b) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false");
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfChar(Dafny.Rune c) {
      return Dafny.Sequence<Dafny.Rune>.FromElements(c);
    }
  }
} // end of namespace Std.Strings

namespace DAST.Format {


  public interface _IUnOpFormat {
    bool is_NoFormat { get; }
    bool is_CombineNotInner { get; }
    _IUnOpFormat DowncastClone();
  }
  public abstract class UnOpFormat : _IUnOpFormat {
    public UnOpFormat() {
    }
    private static readonly DAST.Format._IUnOpFormat theDefault = create_NoFormat();
    public static DAST.Format._IUnOpFormat Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST.Format._IUnOpFormat> _TYPE = new Dafny.TypeDescriptor<DAST.Format._IUnOpFormat>(DAST.Format.UnOpFormat.Default());
    public static Dafny.TypeDescriptor<DAST.Format._IUnOpFormat> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnOpFormat create_NoFormat() {
      return new UnOpFormat_NoFormat();
    }
    public static _IUnOpFormat create_CombineNotInner() {
      return new UnOpFormat_CombineNotInner();
    }
    public bool is_NoFormat { get { return this is UnOpFormat_NoFormat; } }
    public bool is_CombineNotInner { get { return this is UnOpFormat_CombineNotInner; } }
    public static System.Collections.Generic.IEnumerable<_IUnOpFormat> AllSingletonConstructors {
      get {
        yield return UnOpFormat.create_NoFormat();
        yield return UnOpFormat.create_CombineNotInner();
      }
    }
    public abstract _IUnOpFormat DowncastClone();
  }
  public class UnOpFormat_NoFormat : UnOpFormat {
    public UnOpFormat_NoFormat() : base() {
    }
    public override _IUnOpFormat DowncastClone() {
      if (this is _IUnOpFormat dt) { return dt; }
      return new UnOpFormat_NoFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.UnOpFormat_NoFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Format.UnOpFormat.NoFormat";
      return s;
    }
  }
  public class UnOpFormat_CombineNotInner : UnOpFormat {
    public UnOpFormat_CombineNotInner() : base() {
    }
    public override _IUnOpFormat DowncastClone() {
      if (this is _IUnOpFormat dt) { return dt; }
      return new UnOpFormat_CombineNotInner();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.UnOpFormat_CombineNotInner;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Format.UnOpFormat.CombineNotInner";
      return s;
    }
  }

  public interface _IBinOpFormat {
    bool is_NoFormat { get; }
    bool is_ImpliesFormat { get; }
    bool is_Equivalence { get; }
    bool is_ReverseOperands { get; }
    _IBinOpFormat DowncastClone();
  }
  public abstract class BinOpFormat : _IBinOpFormat {
    public BinOpFormat() {
    }
    private static readonly DAST.Format._IBinOpFormat theDefault = create_NoFormat();
    public static DAST.Format._IBinOpFormat Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST.Format._IBinOpFormat> _TYPE = new Dafny.TypeDescriptor<DAST.Format._IBinOpFormat>(DAST.Format.BinOpFormat.Default());
    public static Dafny.TypeDescriptor<DAST.Format._IBinOpFormat> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOpFormat create_NoFormat() {
      return new BinOpFormat_NoFormat();
    }
    public static _IBinOpFormat create_ImpliesFormat() {
      return new BinOpFormat_ImpliesFormat();
    }
    public static _IBinOpFormat create_Equivalence() {
      return new BinOpFormat_Equivalence();
    }
    public static _IBinOpFormat create_ReverseOperands() {
      return new BinOpFormat_ReverseOperands();
    }
    public bool is_NoFormat { get { return this is BinOpFormat_NoFormat; } }
    public bool is_ImpliesFormat { get { return this is BinOpFormat_ImpliesFormat; } }
    public bool is_Equivalence { get { return this is BinOpFormat_Equivalence; } }
    public bool is_ReverseOperands { get { return this is BinOpFormat_ReverseOperands; } }
    public static System.Collections.Generic.IEnumerable<_IBinOpFormat> AllSingletonConstructors {
      get {
        yield return BinOpFormat.create_NoFormat();
        yield return BinOpFormat.create_ImpliesFormat();
        yield return BinOpFormat.create_Equivalence();
        yield return BinOpFormat.create_ReverseOperands();
      }
    }
    public abstract _IBinOpFormat DowncastClone();
  }
  public class BinOpFormat_NoFormat : BinOpFormat {
    public BinOpFormat_NoFormat() : base() {
    }
    public override _IBinOpFormat DowncastClone() {
      if (this is _IBinOpFormat dt) { return dt; }
      return new BinOpFormat_NoFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinOpFormat_NoFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Format.BinOpFormat.NoFormat";
      return s;
    }
  }
  public class BinOpFormat_ImpliesFormat : BinOpFormat {
    public BinOpFormat_ImpliesFormat() : base() {
    }
    public override _IBinOpFormat DowncastClone() {
      if (this is _IBinOpFormat dt) { return dt; }
      return new BinOpFormat_ImpliesFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinOpFormat_ImpliesFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Format.BinOpFormat.ImpliesFormat";
      return s;
    }
  }
  public class BinOpFormat_Equivalence : BinOpFormat {
    public BinOpFormat_Equivalence() : base() {
    }
    public override _IBinOpFormat DowncastClone() {
      if (this is _IBinOpFormat dt) { return dt; }
      return new BinOpFormat_Equivalence();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinOpFormat_Equivalence;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Format.BinOpFormat.Equivalence";
      return s;
    }
  }
  public class BinOpFormat_ReverseOperands : BinOpFormat {
    public BinOpFormat_ReverseOperands() : base() {
    }
    public override _IBinOpFormat DowncastClone() {
      if (this is _IBinOpFormat dt) { return dt; }
      return new BinOpFormat_ReverseOperands();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinOpFormat_ReverseOperands;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Format.BinOpFormat.ReverseOperands";
      return s;
    }
  }
} // end of namespace DAST.Format
namespace DAST {


  public interface _IModule {
    bool is_Module { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    bool dtor_isExtern { get; }
    Dafny.ISequence<DAST._IModuleItem> dtor_body { get; }
    _IModule DowncastClone();
  }
  public class Module : _IModule {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly bool _isExtern;
    public readonly Dafny.ISequence<DAST._IModuleItem> _body;
    public Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      this._name = name;
      this._isExtern = isExtern;
      this._body = body;
    }
    public _IModule DowncastClone() {
      if (this is _IModule dt) { return dt; }
      return new Module(_name, _isExtern, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Module;
      return oth != null && object.Equals(this._name, oth._name) && this._isExtern == oth._isExtern && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isExtern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Module.Module";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isExtern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IModule theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, false, Dafny.Sequence<DAST._IModuleItem>.Empty);
    public static DAST._IModule Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModule> _TYPE = new Dafny.TypeDescriptor<DAST._IModule>(DAST.Module.Default());
    public static Dafny.TypeDescriptor<DAST._IModule> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModule create(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return new Module(name, isExtern, body);
    }
    public static _IModule create_Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return create(name, isExtern, body);
    }
    public bool is_Module { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public bool dtor_isExtern {
      get {
        return this._isExtern;
      }
    }
    public Dafny.ISequence<DAST._IModuleItem> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IModuleItem {
    bool is_Module { get; }
    bool is_Class { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    bool is_Datatype { get; }
    DAST._IModule dtor_Module_a0 { get; }
    DAST._IClass dtor_Class_a0 { get; }
    DAST._ITrait dtor_Trait_a0 { get; }
    DAST._INewtype dtor_Newtype_a0 { get; }
    DAST._IDatatype dtor_Datatype_a0 { get; }
    _IModuleItem DowncastClone();
  }
  public abstract class ModuleItem : _IModuleItem {
    public ModuleItem() {
    }
    private static readonly DAST._IModuleItem theDefault = create_Module(DAST.Module.Default());
    public static DAST._IModuleItem Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModuleItem> _TYPE = new Dafny.TypeDescriptor<DAST._IModuleItem>(DAST.ModuleItem.Default());
    public static Dafny.TypeDescriptor<DAST._IModuleItem> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModuleItem create_Module(DAST._IModule _a0) {
      return new ModuleItem_Module(_a0);
    }
    public static _IModuleItem create_Class(DAST._IClass _a0) {
      return new ModuleItem_Class(_a0);
    }
    public static _IModuleItem create_Trait(DAST._ITrait _a0) {
      return new ModuleItem_Trait(_a0);
    }
    public static _IModuleItem create_Newtype(DAST._INewtype _a0) {
      return new ModuleItem_Newtype(_a0);
    }
    public static _IModuleItem create_Datatype(DAST._IDatatype _a0) {
      return new ModuleItem_Datatype(_a0);
    }
    public bool is_Module { get { return this is ModuleItem_Module; } }
    public bool is_Class { get { return this is ModuleItem_Class; } }
    public bool is_Trait { get { return this is ModuleItem_Trait; } }
    public bool is_Newtype { get { return this is ModuleItem_Newtype; } }
    public bool is_Datatype { get { return this is ModuleItem_Datatype; } }
    public DAST._IModule dtor_Module_a0 {
      get {
        var d = this;
        return ((ModuleItem_Module)d)._a0;
      }
    }
    public DAST._IClass dtor_Class_a0 {
      get {
        var d = this;
        return ((ModuleItem_Class)d)._a0;
      }
    }
    public DAST._ITrait dtor_Trait_a0 {
      get {
        var d = this;
        return ((ModuleItem_Trait)d)._a0;
      }
    }
    public DAST._INewtype dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Newtype)d)._a0;
      }
    }
    public DAST._IDatatype dtor_Datatype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Datatype)d)._a0;
      }
    }
    public abstract _IModuleItem DowncastClone();
  }
  public class ModuleItem_Module : ModuleItem {
    public readonly DAST._IModule _a0;
    public ModuleItem_Module(DAST._IModule _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Module(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Module;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Module";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Class : ModuleItem {
    public readonly DAST._IClass _a0;
    public ModuleItem_Class(DAST._IClass _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Class(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Class;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Class";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Trait : ModuleItem {
    public readonly DAST._ITrait _a0;
    public ModuleItem_Trait(DAST._ITrait _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Trait(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Trait;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Newtype : ModuleItem {
    public readonly DAST._INewtype _a0;
    public ModuleItem_Newtype(DAST._INewtype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Datatype : ModuleItem {
    public readonly DAST._IDatatype _a0;
    public ModuleItem_Datatype(DAST._IDatatype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Datatype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Datatype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IType {
    bool is_Path { get; }
    bool is_Nullable { get; }
    bool is_Tuple { get; }
    bool is_Array { get; }
    bool is_Seq { get; }
    bool is_Set { get; }
    bool is_Multiset { get; }
    bool is_Map { get; }
    bool is_Arrow { get; }
    bool is_Primitive { get; }
    bool is_Passthrough { get; }
    bool is_TypeArg { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    DAST._IResolvedType dtor_resolved { get; }
    DAST._IType dtor_Nullable_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_Tuple_a0 { get; }
    DAST._IType dtor_element { get; }
    BigInteger dtor_dims { get; }
    DAST._IType dtor_key { get; }
    DAST._IType dtor_value { get; }
    Dafny.ISequence<DAST._IType> dtor_args { get; }
    DAST._IType dtor_result { get; }
    DAST._IPrimitive dtor_Primitive_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 { get; }
    _IType DowncastClone();
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly DAST._IType theDefault = create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.ResolvedType.Default());
    public static DAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IType> _TYPE = new Dafny.TypeDescriptor<DAST._IType>(DAST.Type.Default());
    public static Dafny.TypeDescriptor<DAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) {
      return new Type_Path(_a0, typeArgs, resolved);
    }
    public static _IType create_Nullable(DAST._IType _a0) {
      return new Type_Nullable(_a0);
    }
    public static _IType create_Tuple(Dafny.ISequence<DAST._IType> _a0) {
      return new Type_Tuple(_a0);
    }
    public static _IType create_Array(DAST._IType element, BigInteger dims) {
      return new Type_Array(element, dims);
    }
    public static _IType create_Seq(DAST._IType element) {
      return new Type_Seq(element);
    }
    public static _IType create_Set(DAST._IType element) {
      return new Type_Set(element);
    }
    public static _IType create_Multiset(DAST._IType element) {
      return new Type_Multiset(element);
    }
    public static _IType create_Map(DAST._IType key, DAST._IType @value) {
      return new Type_Map(key, @value);
    }
    public static _IType create_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) {
      return new Type_Arrow(args, result);
    }
    public static _IType create_Primitive(DAST._IPrimitive _a0) {
      return new Type_Primitive(_a0);
    }
    public static _IType create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_Passthrough(_a0);
    }
    public static _IType create_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_TypeArg(_a0);
    }
    public bool is_Path { get { return this is Type_Path; } }
    public bool is_Nullable { get { return this is Type_Nullable; } }
    public bool is_Tuple { get { return this is Type_Tuple; } }
    public bool is_Array { get { return this is Type_Array; } }
    public bool is_Seq { get { return this is Type_Seq; } }
    public bool is_Set { get { return this is Type_Set; } }
    public bool is_Multiset { get { return this is Type_Multiset; } }
    public bool is_Map { get { return this is Type_Map; } }
    public bool is_Arrow { get { return this is Type_Arrow; } }
    public bool is_Primitive { get { return this is Type_Primitive; } }
    public bool is_Passthrough { get { return this is Type_Passthrough; } }
    public bool is_TypeArg { get { return this is Type_TypeArg; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 {
      get {
        var d = this;
        return ((Type_Path)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Type_Path)d)._typeArgs;
      }
    }
    public DAST._IResolvedType dtor_resolved {
      get {
        var d = this;
        return ((Type_Path)d)._resolved;
      }
    }
    public DAST._IType dtor_Nullable_a0 {
      get {
        var d = this;
        return ((Type_Nullable)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Type_Tuple)d)._a0;
      }
    }
    public DAST._IType dtor_element {
      get {
        var d = this;
        if (d is Type_Array) { return ((Type_Array)d)._element; }
        if (d is Type_Seq) { return ((Type_Seq)d)._element; }
        if (d is Type_Set) { return ((Type_Set)d)._element; }
        return ((Type_Multiset)d)._element;
      }
    }
    public BigInteger dtor_dims {
      get {
        var d = this;
        return ((Type_Array)d)._dims;
      }
    }
    public DAST._IType dtor_key {
      get {
        var d = this;
        return ((Type_Map)d)._key;
      }
    }
    public DAST._IType dtor_value {
      get {
        var d = this;
        return ((Type_Map)d)._value;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_args {
      get {
        var d = this;
        return ((Type_Arrow)d)._args;
      }
    }
    public DAST._IType dtor_result {
      get {
        var d = this;
        return ((Type_Arrow)d)._result;
      }
    }
    public DAST._IPrimitive dtor_Primitive_a0 {
      get {
        var d = this;
        return ((Type_Primitive)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((Type_Passthrough)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 {
      get {
        var d = this;
        return ((Type_TypeArg)d)._a0;
      }
    }
    public abstract _IType DowncastClone();
  }
  public class Type_Path : Type {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly DAST._IResolvedType _resolved;
    public Type_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) : base() {
      this._a0 = _a0;
      this._typeArgs = typeArgs;
      this._resolved = resolved;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Path(_a0, _typeArgs, _resolved);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Path;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._resolved, oth._resolved);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._resolved));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Path";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._resolved);
      s += ")";
      return s;
    }
  }
  public class Type_Nullable : Type {
    public readonly DAST._IType _a0;
    public Type_Nullable(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Nullable(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Nullable;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Nullable";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Tuple : Type {
    public readonly Dafny.ISequence<DAST._IType> _a0;
    public Type_Tuple(Dafny.ISequence<DAST._IType> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Array : Type {
    public readonly DAST._IType _element;
    public readonly BigInteger _dims;
    public Type_Array(DAST._IType element, BigInteger dims) : base() {
      this._element = element;
      this._dims = dims;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Array(_element, _dims);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Array;
      return oth != null && object.Equals(this._element, oth._element) && this._dims == oth._dims;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Array";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dims);
      s += ")";
      return s;
    }
  }
  public class Type_Seq : Type {
    public readonly DAST._IType _element;
    public Type_Seq(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Seq(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Seq;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Seq";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Set : Type {
    public readonly DAST._IType _element;
    public Type_Set(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Set(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Set;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Set";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Multiset : Type {
    public readonly DAST._IType _element;
    public Type_Multiset(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Multiset(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Multiset;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Multiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Map : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_Map(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Map(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Map;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Map";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_Arrow : Type {
    public readonly Dafny.ISequence<DAST._IType> _args;
    public readonly DAST._IType _result;
    public Type_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) : base() {
      this._args = args;
      this._result = result;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Arrow(_args, _result);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Arrow;
      return oth != null && object.Equals(this._args, oth._args) && object.Equals(this._result, oth._result);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._result));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Arrow";
      s += "(";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._result);
      s += ")";
      return s;
    }
  }
  public class Type_Primitive : Type {
    public readonly DAST._IPrimitive _a0;
    public Type_Primitive(DAST._IPrimitive _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Primitive(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Primitive;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Primitive";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Passthrough : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeArg : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeArg(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_TypeArg;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.TypeArg";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IPrimitive {
    bool is_Int { get; }
    bool is_Real { get; }
    bool is_String { get; }
    bool is_Bool { get; }
    bool is_Char { get; }
    _IPrimitive DowncastClone();
  }
  public abstract class Primitive : _IPrimitive {
    public Primitive() {
    }
    private static readonly DAST._IPrimitive theDefault = create_Int();
    public static DAST._IPrimitive Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IPrimitive> _TYPE = new Dafny.TypeDescriptor<DAST._IPrimitive>(DAST.Primitive.Default());
    public static Dafny.TypeDescriptor<DAST._IPrimitive> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrimitive create_Int() {
      return new Primitive_Int();
    }
    public static _IPrimitive create_Real() {
      return new Primitive_Real();
    }
    public static _IPrimitive create_String() {
      return new Primitive_String();
    }
    public static _IPrimitive create_Bool() {
      return new Primitive_Bool();
    }
    public static _IPrimitive create_Char() {
      return new Primitive_Char();
    }
    public bool is_Int { get { return this is Primitive_Int; } }
    public bool is_Real { get { return this is Primitive_Real; } }
    public bool is_String { get { return this is Primitive_String; } }
    public bool is_Bool { get { return this is Primitive_Bool; } }
    public bool is_Char { get { return this is Primitive_Char; } }
    public static System.Collections.Generic.IEnumerable<_IPrimitive> AllSingletonConstructors {
      get {
        yield return Primitive.create_Int();
        yield return Primitive.create_Real();
        yield return Primitive.create_String();
        yield return Primitive.create_Bool();
        yield return Primitive.create_Char();
      }
    }
    public abstract _IPrimitive DowncastClone();
  }
  public class Primitive_Int : Primitive {
    public Primitive_Int() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Int";
      return s;
    }
  }
  public class Primitive_Real : Primitive {
    public Primitive_Real() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Real();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Real;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Real";
      return s;
    }
  }
  public class Primitive_String : Primitive {
    public Primitive_String() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_String();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_String;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.String";
      return s;
    }
  }
  public class Primitive_Bool : Primitive {
    public Primitive_Bool() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Bool";
      return s;
    }
  }
  public class Primitive_Char : Primitive {
    public Primitive_Char() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Char();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Char;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Char";
      return s;
    }
  }

  public interface _IResolvedType {
    bool is_Datatype { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    DAST._IType dtor_Newtype_a0 { get; }
    _IResolvedType DowncastClone();
  }
  public abstract class ResolvedType : _IResolvedType {
    public ResolvedType() {
    }
    private static readonly DAST._IResolvedType theDefault = create_Datatype(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty);
    public static DAST._IResolvedType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IResolvedType> _TYPE = new Dafny.TypeDescriptor<DAST._IResolvedType>(DAST.ResolvedType.Default());
    public static Dafny.TypeDescriptor<DAST._IResolvedType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IResolvedType create_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Datatype(path);
    }
    public static _IResolvedType create_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Trait(path);
    }
    public static _IResolvedType create_Newtype(DAST._IType _a0) {
      return new ResolvedType_Newtype(_a0);
    }
    public bool is_Datatype { get { return this is ResolvedType_Datatype; } }
    public bool is_Trait { get { return this is ResolvedType_Trait; } }
    public bool is_Newtype { get { return this is ResolvedType_Newtype; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is ResolvedType_Datatype) { return ((ResolvedType_Datatype)d)._path; }
        return ((ResolvedType_Trait)d)._path;
      }
    }
    public DAST._IType dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._a0;
      }
    }
    public abstract _IResolvedType DowncastClone();
  }
  public class ResolvedType_Datatype : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Datatype(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Datatype;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Trait : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Trait(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Trait;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Newtype : ResolvedType {
    public readonly DAST._IType _a0;
    public ResolvedType_Newtype(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IIdent {
    bool is_Ident { get; }
    Dafny.ISequence<Dafny.Rune> dtor_id { get; }
  }
  public class Ident : _IIdent {
    public readonly Dafny.ISequence<Dafny.Rune> _id;
    public Ident(Dafny.ISequence<Dafny.Rune> id) {
      this._id = id;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Ident;
      return oth != null && object.Equals(this._id, oth._id);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._id));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Ident.Ident";
      s += "(";
      s += this._id.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IIdent create(Dafny.ISequence<Dafny.Rune> id) {
      return new Ident(id);
    }
    public static _IIdent create_Ident(Dafny.ISequence<Dafny.Rune> id) {
      return create(id);
    }
    public bool is_Ident { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_id {
      get {
        return this._id;
      }
    }
  }

  public interface _IClass {
    bool is_Class { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IType> dtor_superClasses { get; }
    Dafny.ISequence<DAST._IField> dtor_fields { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _IClass DowncastClone();
  }
  public class Class : _IClass {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IType> _superClasses;
    public readonly Dafny.ISequence<DAST._IField> _fields;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._superClasses = superClasses;
      this._fields = fields;
      this._body = body;
    }
    public _IClass DowncastClone() {
      if (this is _IClass dt) { return dt; }
      return new Class(_name, _enclosingModule, _typeParams, _superClasses, _fields, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Class;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._superClasses, oth._superClasses) && object.Equals(this._fields, oth._fields) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._superClasses));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Class.Class";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._superClasses);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IClass theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IField>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._IClass Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IClass> _TYPE = new Dafny.TypeDescriptor<DAST._IClass>(DAST.Class.Default());
    public static Dafny.TypeDescriptor<DAST._IClass> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClass create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return new Class(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public static _IClass create_Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public bool is_Class { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_superClasses {
      get {
        return this._superClasses;
      }
    }
    public Dafny.ISequence<DAST._IField> dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _ITrait DowncastClone();
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_name, _typeParams, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Trait;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Trait.Trait";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._ITrait theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ITrait> _TYPE = new Dafny.TypeDescriptor<DAST._ITrait>(DAST.Trait.Default());
    public static Dafny.TypeDescriptor<DAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return new Trait(name, typeParams, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, typeParams, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IDatatype {
    bool is_Datatype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    bool dtor_isCo { get; }
    _IDatatype DowncastClone();
  }
  public class Datatype : _IDatatype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IDatatypeCtor> _ctors;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly bool _isCo;
    public Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._ctors = ctors;
      this._body = body;
      this._isCo = isCo;
    }
    public _IDatatype DowncastClone() {
      if (this is _IDatatype dt) { return dt; }
      return new Datatype(_name, _enclosingModule, _typeParams, _ctors, _body, _isCo);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Datatype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._ctors, oth._ctors) && object.Equals(this._body, oth._body) && this._isCo == oth._isCo;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ctors));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Datatype.Datatype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ctors);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IDatatypeCtor>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, false);
    public static DAST._IDatatype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatype> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatype>(DAST.Datatype.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return new Datatype(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public static _IDatatype create_Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return create(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public bool is_Datatype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors {
      get {
        return this._ctors;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public bool dtor_isCo {
      get {
        return this._isCo;
      }
    }
  }

  public interface _IDatatypeCtor {
    bool is_DatatypeCtor { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_args { get; }
    bool dtor_hasAnyArgs { get; }
    _IDatatypeCtor DowncastClone();
  }
  public class DatatypeCtor : _IDatatypeCtor {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IFormal> _args;
    public readonly bool _hasAnyArgs;
    public DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      this._name = name;
      this._args = args;
      this._hasAnyArgs = hasAnyArgs;
    }
    public _IDatatypeCtor DowncastClone() {
      if (this is _IDatatypeCtor dt) { return dt; }
      return new DatatypeCtor(_name, _args, _hasAnyArgs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.DatatypeCtor;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._args, oth._args) && this._hasAnyArgs == oth._hasAnyArgs;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasAnyArgs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.DatatypeCtor.DatatypeCtor";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasAnyArgs);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatypeCtor theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, false);
    public static DAST._IDatatypeCtor Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatypeCtor>(DAST.DatatypeCtor.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatypeCtor create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return new DatatypeCtor(name, args, hasAnyArgs);
    }
    public static _IDatatypeCtor create_DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return create(name, args, hasAnyArgs);
    }
    public bool is_DatatypeCtor { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_args {
      get {
        return this._args;
      }
    }
    public bool dtor_hasAnyArgs {
      get {
        return this._hasAnyArgs;
      }
    }
  }

  public interface _INewtype {
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    DAST._IType dtor_base { get; }
    Dafny.ISequence<DAST._IStatement> dtor_witnessStmts { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_witnessExpr { get; }
    _INewtype DowncastClone();
  }
  public class Newtype : _INewtype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly DAST._IType _base;
    public readonly Dafny.ISequence<DAST._IStatement> _witnessStmts;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _witnessExpr;
    public Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr) {
      this._name = name;
      this._typeParams = typeParams;
      this._base = @base;
      this._witnessStmts = witnessStmts;
      this._witnessExpr = witnessExpr;
    }
    public _INewtype DowncastClone() {
      if (this is _INewtype dt) { return dt; }
      return new Newtype(_name, _typeParams, _base, _witnessStmts, _witnessExpr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Newtype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._base, oth._base) && object.Equals(this._witnessStmts, oth._witnessStmts) && object.Equals(this._witnessExpr, oth._witnessExpr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessStmts));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessExpr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Newtype.Newtype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessStmts);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessExpr);
      s += ")";
      return s;
    }
    private static readonly DAST._INewtype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Type.Default(), Dafny.Sequence<DAST._IStatement>.Empty, Std.Wrappers.Option<DAST._IExpression>.Default());
    public static DAST._INewtype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtype> _TYPE = new Dafny.TypeDescriptor<DAST._INewtype>(DAST.Newtype.Default());
    public static Dafny.TypeDescriptor<DAST._INewtype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr) {
      return new Newtype(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public static _INewtype create_Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr) {
      return create(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public bool is_Newtype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public DAST._IType dtor_base {
      get {
        return this._base;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_witnessStmts {
      get {
        return this._witnessStmts;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_witnessExpr {
      get {
        return this._witnessExpr;
      }
    }
  }

  public interface _IClassItem {
    bool is_Method { get; }
    DAST._IMethod dtor_Method_a0 { get; }
  }
  public class ClassItem : _IClassItem {
    public readonly DAST._IMethod _a0;
    public ClassItem(DAST._IMethod _a0) {
      this._a0 = _a0;
    }
    public static DAST._IMethod DowncastClone(DAST._IMethod _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ClassItem;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ClassItem.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = DAST.Method.Default();
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClassItem create(DAST._IMethod _a0) {
      return new ClassItem(_a0);
    }
    public static _IClassItem create_Method(DAST._IMethod _a0) {
      return create(_a0);
    }
    public bool is_Method { get { return true; } }
    public DAST._IMethod dtor_Method_a0 {
      get {
        return this._a0;
      }
    }
  }

  public interface _IField {
    bool is_Field { get; }
    DAST._IFormal dtor_formal { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_defaultValue { get; }
    _IField DowncastClone();
  }
  public class Field : _IField {
    public readonly DAST._IFormal _formal;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _defaultValue;
    public Field(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      this._formal = formal;
      this._defaultValue = defaultValue;
    }
    public _IField DowncastClone() {
      if (this is _IField dt) { return dt; }
      return new Field(_formal, _defaultValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Field;
      return oth != null && object.Equals(this._formal, oth._formal) && object.Equals(this._defaultValue, oth._defaultValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formal));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._defaultValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Field.Field";
      s += "(";
      s += Dafny.Helpers.ToString(this._formal);
      s += ", ";
      s += Dafny.Helpers.ToString(this._defaultValue);
      s += ")";
      return s;
    }
    private static readonly DAST._IField theDefault = create(DAST.Formal.Default(), Std.Wrappers.Option<DAST._IExpression>.Default());
    public static DAST._IField Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IField> _TYPE = new Dafny.TypeDescriptor<DAST._IField>(DAST.Field.Default());
    public static Dafny.TypeDescriptor<DAST._IField> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IField create(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      return new Field(formal, defaultValue);
    }
    public static _IField create_Field(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      return create(formal, defaultValue);
    }
    public bool is_Field { get { return true; } }
    public DAST._IFormal dtor_formal {
      get {
        return this._formal;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_defaultValue {
      get {
        return this._defaultValue;
      }
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    _IFormal DowncastClone();
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      this._name = name;
      this._typ = typ;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
    private static readonly DAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default());
    public static DAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IFormal> _TYPE = new Dafny.TypeDescriptor<DAST._IFormal>(DAST.Formal.Default());
    public static Dafny.TypeDescriptor<DAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return new Formal(name, typ);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return create(name, typ);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        return this._typ;
      }
    }
  }

  public interface _IMethod {
    bool is_Method { get; }
    bool dtor_isStatic { get; }
    bool dtor_hasBody { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<DAST._IType> dtor_outTypes { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars { get; }
    _IMethod DowncastClone();
  }
  public class Method : _IMethod {
    public readonly bool _isStatic;
    public readonly bool _hasBody;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _overridingPath;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public readonly Dafny.ISequence<DAST._IType> _outTypes;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outVars;
    public Method(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      this._isStatic = isStatic;
      this._hasBody = hasBody;
      this._overridingPath = overridingPath;
      this._name = name;
      this._typeParams = typeParams;
      this._params = @params;
      this._body = body;
      this._outTypes = outTypes;
      this._outVars = outVars;
    }
    public _IMethod DowncastClone() {
      if (this is _IMethod dt) { return dt; }
      return new Method(_isStatic, _hasBody, _overridingPath, _name, _typeParams, _params, _body, _outTypes, _outVars);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Method;
      return oth != null && this._isStatic == oth._isStatic && this._hasBody == oth._hasBody && object.Equals(this._overridingPath, oth._overridingPath) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._params, oth._params) && object.Equals(this._body, oth._body) && object.Equals(this._outTypes, oth._outTypes) && object.Equals(this._outVars, oth._outVars);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasBody));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._overridingPath));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outTypes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outVars));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Method.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasBody);
      s += ", ";
      s += Dafny.Helpers.ToString(this._overridingPath);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outTypes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outVars);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = create(false, false, Std.Wrappers.Option<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, Dafny.Sequence<DAST._IStatement>.Empty, Dafny.Sequence<DAST._IType>.Empty, Std.Wrappers.Option<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default());
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMethod create(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return new Method(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public static _IMethod create_Method(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return create(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public bool is_Method { get { return true; } }
    public bool dtor_isStatic {
      get {
        return this._isStatic;
      }
    }
    public bool dtor_hasBody {
      get {
        return this._hasBody;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath {
      get {
        return this._overridingPath;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        return this._params;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_outTypes {
      get {
        return this._outTypes;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars {
      get {
        return this._outVars;
      }
    }
  }

  public interface _IStatement {
    bool is_DeclareVar { get; }
    bool is_Assign { get; }
    bool is_If { get; }
    bool is_Labeled { get; }
    bool is_While { get; }
    bool is_Foreach { get; }
    bool is_Call { get; }
    bool is_Return { get; }
    bool is_EarlyReturn { get; }
    bool is_Break { get; }
    bool is_TailRecursive { get; }
    bool is_JumpTailCallStart { get; }
    bool is_Halt { get; }
    bool is_Print { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_maybeValue { get; }
    DAST._IAssignLhs dtor_lhs { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IExpression dtor_cond { get; }
    Dafny.ISequence<DAST._IStatement> dtor_thn { get; }
    Dafny.ISequence<DAST._IStatement> dtor_els { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_boundName { get; }
    DAST._IType dtor_boundType { get; }
    DAST._IExpression dtor_over { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs { get; }
    DAST._IExpression dtor_expr { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_toLabel { get; }
    DAST._IExpression dtor_Print_a0 { get; }
    _IStatement DowncastClone();
  }
  public abstract class Statement : _IStatement {
    public Statement() {
    }
    private static readonly DAST._IStatement theDefault = create_DeclareVar(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default(), Std.Wrappers.Option<DAST._IExpression>.Default());
    public static DAST._IStatement Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IStatement> _TYPE = new Dafny.TypeDescriptor<DAST._IStatement>(DAST.Statement.Default());
    public static Dafny.TypeDescriptor<DAST._IStatement> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStatement create_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, Std.Wrappers._IOption<DAST._IExpression> maybeValue) {
      return new Statement_DeclareVar(name, typ, maybeValue);
    }
    public static _IStatement create_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) {
      return new Statement_Assign(lhs, @value);
    }
    public static _IStatement create_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) {
      return new Statement_If(cond, thn, els);
    }
    public static _IStatement create_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Labeled(lbl, body);
    }
    public static _IStatement create_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_While(cond, body);
    }
    public static _IStatement create_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Foreach(boundName, boundType, over, body);
    }
    public static _IStatement create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) {
      return new Statement_Call(@on, name, typeArgs, args, outs);
    }
    public static _IStatement create_Return(DAST._IExpression expr) {
      return new Statement_Return(expr);
    }
    public static _IStatement create_EarlyReturn() {
      return new Statement_EarlyReturn();
    }
    public static _IStatement create_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> toLabel) {
      return new Statement_Break(toLabel);
    }
    public static _IStatement create_TailRecursive(Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_TailRecursive(body);
    }
    public static _IStatement create_JumpTailCallStart() {
      return new Statement_JumpTailCallStart();
    }
    public static _IStatement create_Halt() {
      return new Statement_Halt();
    }
    public static _IStatement create_Print(DAST._IExpression _a0) {
      return new Statement_Print(_a0);
    }
    public bool is_DeclareVar { get { return this is Statement_DeclareVar; } }
    public bool is_Assign { get { return this is Statement_Assign; } }
    public bool is_If { get { return this is Statement_If; } }
    public bool is_Labeled { get { return this is Statement_Labeled; } }
    public bool is_While { get { return this is Statement_While; } }
    public bool is_Foreach { get { return this is Statement_Foreach; } }
    public bool is_Call { get { return this is Statement_Call; } }
    public bool is_Return { get { return this is Statement_Return; } }
    public bool is_EarlyReturn { get { return this is Statement_EarlyReturn; } }
    public bool is_Break { get { return this is Statement_Break; } }
    public bool is_TailRecursive { get { return this is Statement_TailRecursive; } }
    public bool is_JumpTailCallStart { get { return this is Statement_JumpTailCallStart; } }
    public bool is_Halt { get { return this is Statement_Halt; } }
    public bool is_Print { get { return this is Statement_Print; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Statement_DeclareVar) { return ((Statement_DeclareVar)d)._name; }
        return ((Statement_Call)d)._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._typ;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_maybeValue {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._maybeValue;
      }
    }
    public DAST._IAssignLhs dtor_lhs {
      get {
        var d = this;
        return ((Statement_Assign)d)._lhs;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        return ((Statement_Assign)d)._value;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        if (d is Statement_If) { return ((Statement_If)d)._cond; }
        return ((Statement_While)d)._cond;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_thn {
      get {
        var d = this;
        return ((Statement_If)d)._thn;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_els {
      get {
        var d = this;
        return ((Statement_If)d)._els;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Statement_Labeled)d)._lbl;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        if (d is Statement_Labeled) { return ((Statement_Labeled)d)._body; }
        if (d is Statement_While) { return ((Statement_While)d)._body; }
        if (d is Statement_Foreach) { return ((Statement_Foreach)d)._body; }
        return ((Statement_TailRecursive)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_boundName {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundName;
      }
    }
    public DAST._IType dtor_boundType {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundType;
      }
    }
    public DAST._IExpression dtor_over {
      get {
        var d = this;
        return ((Statement_Foreach)d)._over;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        return ((Statement_Call)d)._on;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Statement_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        return ((Statement_Call)d)._args;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs {
      get {
        var d = this;
        return ((Statement_Call)d)._outs;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        return ((Statement_Return)d)._expr;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_toLabel {
      get {
        var d = this;
        return ((Statement_Break)d)._toLabel;
      }
    }
    public DAST._IExpression dtor_Print_a0 {
      get {
        var d = this;
        return ((Statement_Print)d)._a0;
      }
    }
    public abstract _IStatement DowncastClone();
  }
  public class Statement_DeclareVar : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _maybeValue;
    public Statement_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, Std.Wrappers._IOption<DAST._IExpression> maybeValue) : base() {
      this._name = name;
      this._typ = typ;
      this._maybeValue = maybeValue;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_DeclareVar(_name, _typ, _maybeValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_DeclareVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._maybeValue, oth._maybeValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._maybeValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.DeclareVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._maybeValue);
      s += ")";
      return s;
    }
  }
  public class Statement_Assign : Statement {
    public readonly DAST._IAssignLhs _lhs;
    public readonly DAST._IExpression _value;
    public Statement_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) : base() {
      this._lhs = lhs;
      this._value = @value;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Assign(_lhs, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Assign;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Assign";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Statement_If : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _thn;
    public readonly Dafny.ISequence<DAST._IStatement> _els;
    public Statement_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_If(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_If;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.If";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Statement_Labeled : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._lbl = lbl;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Labeled(_lbl, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Labeled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Labeled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_While : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._cond = cond;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_While(_cond, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_While;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.While";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Foreach : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _boundName;
    public readonly DAST._IType _boundType;
    public readonly DAST._IExpression _over;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._boundName = boundName;
      this._boundType = boundType;
      this._over = over;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Foreach(_boundName, _boundType, _over, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Foreach;
      return oth != null && object.Equals(this._boundName, oth._boundName) && object.Equals(this._boundType, oth._boundType) && object.Equals(this._over, oth._over) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._over));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Foreach";
      s += "(";
      s += this._boundName.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._boundType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._over);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Call : Statement {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outs;
    public Statement_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
      this._outs = outs;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Call(_on, _name, _typeArgs, _args, _outs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args) && object.Equals(this._outs, oth._outs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outs);
      s += ")";
      return s;
    }
  }
  public class Statement_Return : Statement {
    public readonly DAST._IExpression _expr;
    public Statement_Return(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Return(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Return;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Statement_EarlyReturn : Statement {
    public Statement_EarlyReturn() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_EarlyReturn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_EarlyReturn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.EarlyReturn";
      return s;
    }
  }
  public class Statement_Break : Statement {
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _toLabel;
    public Statement_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> toLabel) : base() {
      this._toLabel = toLabel;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Break(_toLabel);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Break;
      return oth != null && object.Equals(this._toLabel, oth._toLabel);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._toLabel));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._toLabel);
      s += ")";
      return s;
    }
  }
  public class Statement_TailRecursive : Statement {
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_TailRecursive(Dafny.ISequence<DAST._IStatement> body) : base() {
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_TailRecursive(_body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_TailRecursive;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.TailRecursive";
      s += "(";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_JumpTailCallStart : Statement {
    public Statement_JumpTailCallStart() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_JumpTailCallStart();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_JumpTailCallStart;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.JumpTailCallStart";
      return s;
    }
  }
  public class Statement_Halt : Statement {
    public Statement_Halt() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Halt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Halt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Halt";
      return s;
    }
  }
  public class Statement_Print : Statement {
    public readonly DAST._IExpression _a0;
    public Statement_Print(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IAssignLhs {
    bool is_Ident { get; }
    bool is_Select { get; }
    bool is_Index { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    DAST._IExpression dtor_expr { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    _IAssignLhs DowncastClone();
  }
  public abstract class AssignLhs : _IAssignLhs {
    public AssignLhs() {
    }
    private static readonly DAST._IAssignLhs theDefault = create_Ident(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._IAssignLhs Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IAssignLhs> _TYPE = new Dafny.TypeDescriptor<DAST._IAssignLhs>(DAST.AssignLhs.Default());
    public static Dafny.TypeDescriptor<DAST._IAssignLhs> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignLhs create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new AssignLhs_Ident(_a0);
    }
    public static _IAssignLhs create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) {
      return new AssignLhs_Select(expr, field);
    }
    public static _IAssignLhs create_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) {
      return new AssignLhs_Index(expr, indices);
    }
    public bool is_Ident { get { return this is AssignLhs_Ident; } }
    public bool is_Select { get { return this is AssignLhs_Select; } }
    public bool is_Index { get { return this is AssignLhs_Index; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((AssignLhs_Ident)d)._a0;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is AssignLhs_Select) { return ((AssignLhs_Select)d)._expr; }
        return ((AssignLhs_Index)d)._expr;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((AssignLhs_Select)d)._field;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((AssignLhs_Index)d)._indices;
      }
    }
    public abstract _IAssignLhs DowncastClone();
  }
  public class AssignLhs_Ident : AssignLhs {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public AssignLhs_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Ident";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Select : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public AssignLhs_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._expr = expr;
      this._field = field;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Select(_expr, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Index : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public AssignLhs_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._indices = indices;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Index(_expr, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }

  public interface _ICollKind {
    bool is_Seq { get; }
    bool is_Array { get; }
    bool is_Map { get; }
    _ICollKind DowncastClone();
  }
  public abstract class CollKind : _ICollKind {
    public CollKind() {
    }
    private static readonly DAST._ICollKind theDefault = create_Seq();
    public static DAST._ICollKind Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICollKind> _TYPE = new Dafny.TypeDescriptor<DAST._ICollKind>(DAST.CollKind.Default());
    public static Dafny.TypeDescriptor<DAST._ICollKind> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICollKind create_Seq() {
      return new CollKind_Seq();
    }
    public static _ICollKind create_Array() {
      return new CollKind_Array();
    }
    public static _ICollKind create_Map() {
      return new CollKind_Map();
    }
    public bool is_Seq { get { return this is CollKind_Seq; } }
    public bool is_Array { get { return this is CollKind_Array; } }
    public bool is_Map { get { return this is CollKind_Map; } }
    public static System.Collections.Generic.IEnumerable<_ICollKind> AllSingletonConstructors {
      get {
        yield return CollKind.create_Seq();
        yield return CollKind.create_Array();
        yield return CollKind.create_Map();
      }
    }
    public abstract _ICollKind DowncastClone();
  }
  public class CollKind_Seq : CollKind {
    public CollKind_Seq() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Seq();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Seq;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Seq";
      return s;
    }
  }
  public class CollKind_Array : CollKind {
    public CollKind_Array() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Array();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Array;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Array";
      return s;
    }
  }
  public class CollKind_Map : CollKind {
    public CollKind_Map() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Map();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Map;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Map";
      return s;
    }
  }

  public interface _IBinOp {
    bool is_Eq { get; }
    bool is_Div { get; }
    bool is_EuclidianDiv { get; }
    bool is_Mod { get; }
    bool is_EuclidianMod { get; }
    bool is_Lt { get; }
    bool is_Plus { get; }
    bool is_Minus { get; }
    bool is_Times { get; }
    bool is_BitwiseAnd { get; }
    bool is_BitwiseOr { get; }
    bool is_BitwiseXor { get; }
    bool is_BitwiseShiftRight { get; }
    bool is_BitwiseShiftLeft { get; }
    bool is_And { get; }
    bool is_Or { get; }
    bool is_In { get; }
    bool is_SetDifference { get; }
    bool is_Concat { get; }
    bool is_Passthrough { get; }
    bool dtor_referential { get; }
    bool dtor_nullable { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    _IBinOp DowncastClone();
  }
  public abstract class BinOp : _IBinOp {
    public BinOp() {
    }
    private static readonly DAST._IBinOp theDefault = create_Eq(false, false);
    public static DAST._IBinOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IBinOp> _TYPE = new Dafny.TypeDescriptor<DAST._IBinOp>(DAST.BinOp.Default());
    public static Dafny.TypeDescriptor<DAST._IBinOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOp create_Eq(bool referential, bool nullable) {
      return new BinOp_Eq(referential, nullable);
    }
    public static _IBinOp create_Div() {
      return new BinOp_Div();
    }
    public static _IBinOp create_EuclidianDiv() {
      return new BinOp_EuclidianDiv();
    }
    public static _IBinOp create_Mod() {
      return new BinOp_Mod();
    }
    public static _IBinOp create_EuclidianMod() {
      return new BinOp_EuclidianMod();
    }
    public static _IBinOp create_Lt() {
      return new BinOp_Lt();
    }
    public static _IBinOp create_Plus() {
      return new BinOp_Plus();
    }
    public static _IBinOp create_Minus() {
      return new BinOp_Minus();
    }
    public static _IBinOp create_Times() {
      return new BinOp_Times();
    }
    public static _IBinOp create_BitwiseAnd() {
      return new BinOp_BitwiseAnd();
    }
    public static _IBinOp create_BitwiseOr() {
      return new BinOp_BitwiseOr();
    }
    public static _IBinOp create_BitwiseXor() {
      return new BinOp_BitwiseXor();
    }
    public static _IBinOp create_BitwiseShiftRight() {
      return new BinOp_BitwiseShiftRight();
    }
    public static _IBinOp create_BitwiseShiftLeft() {
      return new BinOp_BitwiseShiftLeft();
    }
    public static _IBinOp create_And() {
      return new BinOp_And();
    }
    public static _IBinOp create_Or() {
      return new BinOp_Or();
    }
    public static _IBinOp create_In() {
      return new BinOp_In();
    }
    public static _IBinOp create_SetDifference() {
      return new BinOp_SetDifference();
    }
    public static _IBinOp create_Concat() {
      return new BinOp_Concat();
    }
    public static _IBinOp create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new BinOp_Passthrough(_a0);
    }
    public bool is_Eq { get { return this is BinOp_Eq; } }
    public bool is_Div { get { return this is BinOp_Div; } }
    public bool is_EuclidianDiv { get { return this is BinOp_EuclidianDiv; } }
    public bool is_Mod { get { return this is BinOp_Mod; } }
    public bool is_EuclidianMod { get { return this is BinOp_EuclidianMod; } }
    public bool is_Lt { get { return this is BinOp_Lt; } }
    public bool is_Plus { get { return this is BinOp_Plus; } }
    public bool is_Minus { get { return this is BinOp_Minus; } }
    public bool is_Times { get { return this is BinOp_Times; } }
    public bool is_BitwiseAnd { get { return this is BinOp_BitwiseAnd; } }
    public bool is_BitwiseOr { get { return this is BinOp_BitwiseOr; } }
    public bool is_BitwiseXor { get { return this is BinOp_BitwiseXor; } }
    public bool is_BitwiseShiftRight { get { return this is BinOp_BitwiseShiftRight; } }
    public bool is_BitwiseShiftLeft { get { return this is BinOp_BitwiseShiftLeft; } }
    public bool is_And { get { return this is BinOp_And; } }
    public bool is_Or { get { return this is BinOp_Or; } }
    public bool is_In { get { return this is BinOp_In; } }
    public bool is_SetDifference { get { return this is BinOp_SetDifference; } }
    public bool is_Concat { get { return this is BinOp_Concat; } }
    public bool is_Passthrough { get { return this is BinOp_Passthrough; } }
    public bool dtor_referential {
      get {
        var d = this;
        return ((BinOp_Eq)d)._referential;
      }
    }
    public bool dtor_nullable {
      get {
        var d = this;
        return ((BinOp_Eq)d)._nullable;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((BinOp_Passthrough)d)._a0;
      }
    }
    public abstract _IBinOp DowncastClone();
  }
  public class BinOp_Eq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Eq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Eq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Eq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Eq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Div : BinOp {
    public BinOp_Div() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Div();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Div;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Div";
      return s;
    }
  }
  public class BinOp_EuclidianDiv : BinOp {
    public BinOp_EuclidianDiv() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianDiv();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianDiv;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianDiv";
      return s;
    }
  }
  public class BinOp_Mod : BinOp {
    public BinOp_Mod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Mod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Mod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Mod";
      return s;
    }
  }
  public class BinOp_EuclidianMod : BinOp {
    public BinOp_EuclidianMod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianMod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianMod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianMod";
      return s;
    }
  }
  public class BinOp_Lt : BinOp {
    public BinOp_Lt() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Lt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Lt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Lt";
      return s;
    }
  }
  public class BinOp_Plus : BinOp {
    public BinOp_Plus() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Plus();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Plus;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Plus";
      return s;
    }
  }
  public class BinOp_Minus : BinOp {
    public BinOp_Minus() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Minus();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Minus;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Minus";
      return s;
    }
  }
  public class BinOp_Times : BinOp {
    public BinOp_Times() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Times();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Times;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Times";
      return s;
    }
  }
  public class BinOp_BitwiseAnd : BinOp {
    public BinOp_BitwiseAnd() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseAnd();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseAnd;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseAnd";
      return s;
    }
  }
  public class BinOp_BitwiseOr : BinOp {
    public BinOp_BitwiseOr() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseOr();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseOr;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseOr";
      return s;
    }
  }
  public class BinOp_BitwiseXor : BinOp {
    public BinOp_BitwiseXor() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseXor();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseXor;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseXor";
      return s;
    }
  }
  public class BinOp_BitwiseShiftRight : BinOp {
    public BinOp_BitwiseShiftRight() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseShiftRight();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseShiftRight;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseShiftRight";
      return s;
    }
  }
  public class BinOp_BitwiseShiftLeft : BinOp {
    public BinOp_BitwiseShiftLeft() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseShiftLeft();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseShiftLeft;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseShiftLeft";
      return s;
    }
  }
  public class BinOp_And : BinOp {
    public BinOp_And() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_And();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_And;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.And";
      return s;
    }
  }
  public class BinOp_Or : BinOp {
    public BinOp_Or() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Or();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Or;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Or";
      return s;
    }
  }
  public class BinOp_In : BinOp {
    public BinOp_In() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_In();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_In;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.In";
      return s;
    }
  }
  public class BinOp_SetDifference : BinOp {
    public BinOp_SetDifference() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetDifference();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetDifference;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetDifference";
      return s;
    }
  }
  public class BinOp_Concat : BinOp {
    public BinOp_Concat() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Concat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Concat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Concat";
      return s;
    }
  }
  public class BinOp_Passthrough : BinOp {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public BinOp_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IExpression {
    bool is_Literal { get; }
    bool is_Ident { get; }
    bool is_Companion { get; }
    bool is_Tuple { get; }
    bool is_New { get; }
    bool is_NewArray { get; }
    bool is_DatatypeValue { get; }
    bool is_Convert { get; }
    bool is_SeqConstruct { get; }
    bool is_SeqValue { get; }
    bool is_SetValue { get; }
    bool is_MapValue { get; }
    bool is_This { get; }
    bool is_Ite { get; }
    bool is_UnOp { get; }
    bool is_BinOp { get; }
    bool is_ArrayLen { get; }
    bool is_Select { get; }
    bool is_SelectFn { get; }
    bool is_Index { get; }
    bool is_IndexRange { get; }
    bool is_TupleSelect { get; }
    bool is_Call { get; }
    bool is_Lambda { get; }
    bool is_BetaRedex { get; }
    bool is_IIFE { get; }
    bool is_Apply { get; }
    bool is_TypeTest { get; }
    bool is_InitializationValue { get; }
    bool is_BoolBoundedPool { get; }
    bool is_SetBoundedPool { get; }
    bool is_SeqBoundedPool { get; }
    bool is_IntRange { get; }
    DAST._ILiteral dtor_Literal_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 { get; }
    Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Dafny.ISequence<DAST._IExpression> dtor_dims { get; }
    DAST._IType dtor_typ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_variant { get; }
    bool dtor_isCo { get; }
    Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IType dtor_from { get; }
    DAST._IExpression dtor_length { get; }
    DAST._IExpression dtor_elem { get; }
    Dafny.ISequence<DAST._IExpression> dtor_elements { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems { get; }
    DAST._IExpression dtor_cond { get; }
    DAST._IExpression dtor_thn { get; }
    DAST._IExpression dtor_els { get; }
    DAST._IUnaryOp dtor_unOp { get; }
    DAST._IExpression dtor_expr { get; }
    DAST.Format._IUnOpFormat dtor_format1 { get; }
    DAST._IBinOp dtor_op { get; }
    DAST._IExpression dtor_left { get; }
    DAST._IExpression dtor_right { get; }
    DAST.Format._IBinOpFormat dtor_format2 { get; }
    BigInteger dtor_dim { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    bool dtor_isConstant { get; }
    bool dtor_onDatatype { get; }
    bool dtor_isStatic { get; }
    BigInteger dtor_arity { get; }
    DAST._ICollKind dtor_collKind { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    bool dtor_isArray { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_low { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_high { get; }
    BigInteger dtor_index { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    DAST._IType dtor_retType { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values { get; }
    DAST._IExpression dtor_iifeBody { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType { get; }
    DAST._IExpression dtor_of { get; }
    bool dtor_includeDuplicates { get; }
    DAST._IExpression dtor_lo { get; }
    DAST._IExpression dtor_hi { get; }
    _IExpression DowncastClone();
  }
  public abstract class Expression : _IExpression {
    public Expression() {
    }
    private static readonly DAST._IExpression theDefault = create_Literal(DAST.Literal.Default());
    public static DAST._IExpression Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IExpression> _TYPE = new Dafny.TypeDescriptor<DAST._IExpression>(DAST.Expression.Default());
    public static Dafny.TypeDescriptor<DAST._IExpression> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpression create_Literal(DAST._ILiteral _a0) {
      return new Expression_Literal(_a0);
    }
    public static _IExpression create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expression_Ident(_a0);
    }
    public static _IExpression create_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) {
      return new Expression_Companion(_a0);
    }
    public static _IExpression create_Tuple(Dafny.ISequence<DAST._IExpression> _a0) {
      return new Expression_Tuple(_a0);
    }
    public static _IExpression create_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_New(path, typeArgs, args);
    }
    public static _IExpression create_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) {
      return new Expression_NewArray(dims, typ);
    }
    public static _IExpression create_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) {
      return new Expression_DatatypeValue(path, typeArgs, variant, isCo, contents);
    }
    public static _IExpression create_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) {
      return new Expression_Convert(@value, @from, typ);
    }
    public static _IExpression create_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) {
      return new Expression_SeqConstruct(length, elem);
    }
    public static _IExpression create_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) {
      return new Expression_SeqValue(elements, typ);
    }
    public static _IExpression create_SetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_SetValue(elements);
    }
    public static _IExpression create_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) {
      return new Expression_MapValue(mapElems);
    }
    public static _IExpression create_This() {
      return new Expression_This();
    }
    public static _IExpression create_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) {
      return new Expression_Ite(cond, thn, els);
    }
    public static _IExpression create_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr, DAST.Format._IUnOpFormat format1) {
      return new Expression_UnOp(unOp, expr, format1);
    }
    public static _IExpression create_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right, DAST.Format._IBinOpFormat format2) {
      return new Expression_BinOp(op, left, right, format2);
    }
    public static _IExpression create_ArrayLen(DAST._IExpression expr, BigInteger dim) {
      return new Expression_ArrayLen(expr, dim);
    }
    public static _IExpression create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) {
      return new Expression_Select(expr, field, isConstant, onDatatype);
    }
    public static _IExpression create_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) {
      return new Expression_SelectFn(expr, field, onDatatype, isStatic, arity);
    }
    public static _IExpression create_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) {
      return new Expression_Index(expr, collKind, indices);
    }
    public static _IExpression create_IndexRange(DAST._IExpression expr, bool isArray, Std.Wrappers._IOption<DAST._IExpression> low, Std.Wrappers._IOption<DAST._IExpression> high) {
      return new Expression_IndexRange(expr, isArray, low, high);
    }
    public static _IExpression create_TupleSelect(DAST._IExpression expr, BigInteger index) {
      return new Expression_TupleSelect(expr, index);
    }
    public static _IExpression create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Call(@on, name, typeArgs, args);
    }
    public static _IExpression create_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) {
      return new Expression_Lambda(@params, retType, body);
    }
    public static _IExpression create_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) {
      return new Expression_BetaRedex(values, retType, expr);
    }
    public static _IExpression create_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) {
      return new Expression_IIFE(name, typ, @value, iifeBody);
    }
    public static _IExpression create_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Apply(expr, args);
    }
    public static _IExpression create_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) {
      return new Expression_TypeTest(@on, dType, variant);
    }
    public static _IExpression create_InitializationValue(DAST._IType typ) {
      return new Expression_InitializationValue(typ);
    }
    public static _IExpression create_BoolBoundedPool() {
      return new Expression_BoolBoundedPool();
    }
    public static _IExpression create_SetBoundedPool(DAST._IExpression of) {
      return new Expression_SetBoundedPool(of);
    }
    public static _IExpression create_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) {
      return new Expression_SeqBoundedPool(of, includeDuplicates);
    }
    public static _IExpression create_IntRange(DAST._IExpression lo, DAST._IExpression hi) {
      return new Expression_IntRange(lo, hi);
    }
    public bool is_Literal { get { return this is Expression_Literal; } }
    public bool is_Ident { get { return this is Expression_Ident; } }
    public bool is_Companion { get { return this is Expression_Companion; } }
    public bool is_Tuple { get { return this is Expression_Tuple; } }
    public bool is_New { get { return this is Expression_New; } }
    public bool is_NewArray { get { return this is Expression_NewArray; } }
    public bool is_DatatypeValue { get { return this is Expression_DatatypeValue; } }
    public bool is_Convert { get { return this is Expression_Convert; } }
    public bool is_SeqConstruct { get { return this is Expression_SeqConstruct; } }
    public bool is_SeqValue { get { return this is Expression_SeqValue; } }
    public bool is_SetValue { get { return this is Expression_SetValue; } }
    public bool is_MapValue { get { return this is Expression_MapValue; } }
    public bool is_This { get { return this is Expression_This; } }
    public bool is_Ite { get { return this is Expression_Ite; } }
    public bool is_UnOp { get { return this is Expression_UnOp; } }
    public bool is_BinOp { get { return this is Expression_BinOp; } }
    public bool is_ArrayLen { get { return this is Expression_ArrayLen; } }
    public bool is_Select { get { return this is Expression_Select; } }
    public bool is_SelectFn { get { return this is Expression_SelectFn; } }
    public bool is_Index { get { return this is Expression_Index; } }
    public bool is_IndexRange { get { return this is Expression_IndexRange; } }
    public bool is_TupleSelect { get { return this is Expression_TupleSelect; } }
    public bool is_Call { get { return this is Expression_Call; } }
    public bool is_Lambda { get { return this is Expression_Lambda; } }
    public bool is_BetaRedex { get { return this is Expression_BetaRedex; } }
    public bool is_IIFE { get { return this is Expression_IIFE; } }
    public bool is_Apply { get { return this is Expression_Apply; } }
    public bool is_TypeTest { get { return this is Expression_TypeTest; } }
    public bool is_InitializationValue { get { return this is Expression_InitializationValue; } }
    public bool is_BoolBoundedPool { get { return this is Expression_BoolBoundedPool; } }
    public bool is_SetBoundedPool { get { return this is Expression_SetBoundedPool; } }
    public bool is_SeqBoundedPool { get { return this is Expression_SeqBoundedPool; } }
    public bool is_IntRange { get { return this is Expression_IntRange; } }
    public DAST._ILiteral dtor_Literal_a0 {
      get {
        var d = this;
        return ((Expression_Literal)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((Expression_Ident)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 {
      get {
        var d = this;
        return ((Expression_Companion)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Expression_Tuple)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._path; }
        return ((Expression_DatatypeValue)d)._path;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._typeArgs; }
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._typeArgs; }
        return ((Expression_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._args; }
        if (d is Expression_Call) { return ((Expression_Call)d)._args; }
        return ((Expression_Apply)d)._args;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_dims {
      get {
        var d = this;
        return ((Expression_NewArray)d)._dims;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        if (d is Expression_NewArray) { return ((Expression_NewArray)d)._typ; }
        if (d is Expression_Convert) { return ((Expression_Convert)d)._typ; }
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._typ; }
        if (d is Expression_IIFE) { return ((Expression_IIFE)d)._typ; }
        return ((Expression_InitializationValue)d)._typ;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_variant {
      get {
        var d = this;
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._variant; }
        return ((Expression_TypeTest)d)._variant;
      }
    }
    public bool dtor_isCo {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._isCo;
      }
    }
    public Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._contents;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        if (d is Expression_Convert) { return ((Expression_Convert)d)._value; }
        return ((Expression_IIFE)d)._value;
      }
    }
    public DAST._IType dtor_from {
      get {
        var d = this;
        return ((Expression_Convert)d)._from;
      }
    }
    public DAST._IExpression dtor_length {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._length;
      }
    }
    public DAST._IExpression dtor_elem {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._elem;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_elements {
      get {
        var d = this;
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._elements; }
        return ((Expression_SetValue)d)._elements;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems {
      get {
        var d = this;
        return ((Expression_MapValue)d)._mapElems;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        return ((Expression_Ite)d)._cond;
      }
    }
    public DAST._IExpression dtor_thn {
      get {
        var d = this;
        return ((Expression_Ite)d)._thn;
      }
    }
    public DAST._IExpression dtor_els {
      get {
        var d = this;
        return ((Expression_Ite)d)._els;
      }
    }
    public DAST._IUnaryOp dtor_unOp {
      get {
        var d = this;
        return ((Expression_UnOp)d)._unOp;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is Expression_UnOp) { return ((Expression_UnOp)d)._expr; }
        if (d is Expression_ArrayLen) { return ((Expression_ArrayLen)d)._expr; }
        if (d is Expression_Select) { return ((Expression_Select)d)._expr; }
        if (d is Expression_SelectFn) { return ((Expression_SelectFn)d)._expr; }
        if (d is Expression_Index) { return ((Expression_Index)d)._expr; }
        if (d is Expression_IndexRange) { return ((Expression_IndexRange)d)._expr; }
        if (d is Expression_TupleSelect) { return ((Expression_TupleSelect)d)._expr; }
        if (d is Expression_BetaRedex) { return ((Expression_BetaRedex)d)._expr; }
        return ((Expression_Apply)d)._expr;
      }
    }
    public DAST.Format._IUnOpFormat dtor_format1 {
      get {
        var d = this;
        return ((Expression_UnOp)d)._format1;
      }
    }
    public DAST._IBinOp dtor_op {
      get {
        var d = this;
        return ((Expression_BinOp)d)._op;
      }
    }
    public DAST._IExpression dtor_left {
      get {
        var d = this;
        return ((Expression_BinOp)d)._left;
      }
    }
    public DAST._IExpression dtor_right {
      get {
        var d = this;
        return ((Expression_BinOp)d)._right;
      }
    }
    public DAST.Format._IBinOpFormat dtor_format2 {
      get {
        var d = this;
        return ((Expression_BinOp)d)._format2;
      }
    }
    public BigInteger dtor_dim {
      get {
        var d = this;
        return ((Expression_ArrayLen)d)._dim;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._field; }
        return ((Expression_SelectFn)d)._field;
      }
    }
    public bool dtor_isConstant {
      get {
        var d = this;
        return ((Expression_Select)d)._isConstant;
      }
    }
    public bool dtor_onDatatype {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._onDatatype; }
        return ((Expression_SelectFn)d)._onDatatype;
      }
    }
    public bool dtor_isStatic {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._isStatic;
      }
    }
    public BigInteger dtor_arity {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._arity;
      }
    }
    public DAST._ICollKind dtor_collKind {
      get {
        var d = this;
        return ((Expression_Index)d)._collKind;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((Expression_Index)d)._indices;
      }
    }
    public bool dtor_isArray {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._isArray;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_low {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._low;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_high {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._high;
      }
    }
    public BigInteger dtor_index {
      get {
        var d = this;
        return ((Expression_TupleSelect)d)._index;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._on; }
        return ((Expression_TypeTest)d)._on;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._name; }
        return ((Expression_IIFE)d)._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        var d = this;
        return ((Expression_Lambda)d)._params;
      }
    }
    public DAST._IType dtor_retType {
      get {
        var d = this;
        if (d is Expression_Lambda) { return ((Expression_Lambda)d)._retType; }
        return ((Expression_BetaRedex)d)._retType;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        return ((Expression_Lambda)d)._body;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values {
      get {
        var d = this;
        return ((Expression_BetaRedex)d)._values;
      }
    }
    public DAST._IExpression dtor_iifeBody {
      get {
        var d = this;
        return ((Expression_IIFE)d)._iifeBody;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType {
      get {
        var d = this;
        return ((Expression_TypeTest)d)._dType;
      }
    }
    public DAST._IExpression dtor_of {
      get {
        var d = this;
        if (d is Expression_SetBoundedPool) { return ((Expression_SetBoundedPool)d)._of; }
        return ((Expression_SeqBoundedPool)d)._of;
      }
    }
    public bool dtor_includeDuplicates {
      get {
        var d = this;
        return ((Expression_SeqBoundedPool)d)._includeDuplicates;
      }
    }
    public DAST._IExpression dtor_lo {
      get {
        var d = this;
        return ((Expression_IntRange)d)._lo;
      }
    }
    public DAST._IExpression dtor_hi {
      get {
        var d = this;
        return ((Expression_IntRange)d)._hi;
      }
    }
    public abstract _IExpression DowncastClone();
  }
  public class Expression_Literal : Expression {
    public readonly DAST._ILiteral _a0;
    public Expression_Literal(DAST._ILiteral _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Literal(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Literal;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Literal";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Ident : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expression_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ident";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_Companion : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public Expression_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Companion(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Companion;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Companion";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Tuple : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _a0;
    public Expression_Tuple(Dafny.ISequence<DAST._IExpression> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_New : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_New(_path, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_New;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_NewArray : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _dims;
    public readonly DAST._IType _typ;
    public Expression_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) : base() {
      this._dims = dims;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_NewArray(_dims, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_NewArray;
      return oth != null && object.Equals(this._dims, oth._dims) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.NewArray";
      s += "(";
      s += Dafny.Helpers.ToString(this._dims);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_DatatypeValue : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public readonly bool _isCo;
    public readonly Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _contents;
    public Expression_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._variant = variant;
      this._isCo = isCo;
      this._contents = contents;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_DatatypeValue(_path, _typeArgs, _variant, _isCo, _contents);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_DatatypeValue;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._variant, oth._variant) && this._isCo == oth._isCo && object.Equals(this._contents, oth._contents);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._contents));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.DatatypeValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._contents);
      s += ")";
      return s;
    }
  }
  public class Expression_Convert : Expression {
    public readonly DAST._IExpression _value;
    public readonly DAST._IType _from;
    public readonly DAST._IType _typ;
    public Expression_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) : base() {
      this._value = @value;
      this._from = @from;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Convert(_value, _from, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Convert;
      return oth != null && object.Equals(this._value, oth._value) && object.Equals(this._from, oth._from) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._from));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Convert";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._from);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqConstruct : Expression {
    public readonly DAST._IExpression _length;
    public readonly DAST._IExpression _elem;
    public Expression_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) : base() {
      this._length = length;
      this._elem = elem;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqConstruct(_length, _elem);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqConstruct;
      return oth != null && object.Equals(this._length, oth._length) && object.Equals(this._elem, oth._elem);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._length));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elem));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqConstruct";
      s += "(";
      s += Dafny.Helpers.ToString(this._length);
      s += ", ";
      s += Dafny.Helpers.ToString(this._elem);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public readonly DAST._IType _typ;
    public Expression_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) : base() {
      this._elements = elements;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqValue(_elements, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqValue;
      return oth != null && object.Equals(this._elements, oth._elements) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_SetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValue : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _mapElems;
    public Expression_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) : base() {
      this._mapElems = mapElems;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValue(_mapElems);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValue;
      return oth != null && object.Equals(this._mapElems, oth._mapElems);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mapElems));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._mapElems);
      s += ")";
      return s;
    }
  }
  public class Expression_This : Expression {
    public Expression_This() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_This();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_This;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.This";
      return s;
    }
  }
  public class Expression_Ite : Expression {
    public readonly DAST._IExpression _cond;
    public readonly DAST._IExpression _thn;
    public readonly DAST._IExpression _els;
    public Expression_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ite(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ite;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expression_UnOp : Expression {
    public readonly DAST._IUnaryOp _unOp;
    public readonly DAST._IExpression _expr;
    public readonly DAST.Format._IUnOpFormat _format1;
    public Expression_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr, DAST.Format._IUnOpFormat format1) : base() {
      this._unOp = unOp;
      this._expr = expr;
      this._format1 = format1;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_UnOp(_unOp, _expr, _format1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_UnOp;
      return oth != null && object.Equals(this._unOp, oth._unOp) && object.Equals(this._expr, oth._expr) && object.Equals(this._format1, oth._format1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._unOp));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.UnOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._unOp);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format1);
      s += ")";
      return s;
    }
  }
  public class Expression_BinOp : Expression {
    public readonly DAST._IBinOp _op;
    public readonly DAST._IExpression _left;
    public readonly DAST._IExpression _right;
    public readonly DAST.Format._IBinOpFormat _format2;
    public Expression_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right, DAST.Format._IBinOpFormat format2) : base() {
      this._op = op;
      this._left = left;
      this._right = right;
      this._format2 = format2;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BinOp(_op, _left, _right, _format2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BinOp;
      return oth != null && object.Equals(this._op, oth._op) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right) && object.Equals(this._format2, oth._format2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format2));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BinOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._op);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format2);
      s += ")";
      return s;
    }
  }
  public class Expression_ArrayLen : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _dim;
    public Expression_ArrayLen(DAST._IExpression expr, BigInteger dim) : base() {
      this._expr = expr;
      this._dim = dim;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ArrayLen(_expr, _dim);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ArrayLen;
      return oth != null && object.Equals(this._expr, oth._expr) && this._dim == oth._dim;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dim));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ArrayLen";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dim);
      s += ")";
      return s;
    }
  }
  public class Expression_Select : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _isConstant;
    public readonly bool _onDatatype;
    public Expression_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) : base() {
      this._expr = expr;
      this._field = field;
      this._isConstant = isConstant;
      this._onDatatype = onDatatype;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Select(_expr, _field, _isConstant, _onDatatype);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._isConstant == oth._isConstant && this._onDatatype == oth._onDatatype;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isConstant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isConstant);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ")";
      return s;
    }
  }
  public class Expression_SelectFn : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _onDatatype;
    public readonly bool _isStatic;
    public readonly BigInteger _arity;
    public Expression_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) : base() {
      this._expr = expr;
      this._field = field;
      this._onDatatype = onDatatype;
      this._isStatic = isStatic;
      this._arity = arity;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SelectFn(_expr, _field, _onDatatype, _isStatic, _arity);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SelectFn;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._onDatatype == oth._onDatatype && this._isStatic == oth._isStatic && this._arity == oth._arity;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arity));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SelectFn";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arity);
      s += ")";
      return s;
    }
  }
  public class Expression_Index : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._ICollKind _collKind;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public Expression_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._collKind = collKind;
      this._indices = indices;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Index(_expr, _collKind, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._collKind, oth._collKind) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._collKind));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._collKind);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }
  public class Expression_IndexRange : Expression {
    public readonly DAST._IExpression _expr;
    public readonly bool _isArray;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _low;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _high;
    public Expression_IndexRange(DAST._IExpression expr, bool isArray, Std.Wrappers._IOption<DAST._IExpression> low, Std.Wrappers._IOption<DAST._IExpression> high) : base() {
      this._expr = expr;
      this._isArray = isArray;
      this._low = low;
      this._high = high;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IndexRange(_expr, _isArray, _low, _high);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IndexRange;
      return oth != null && object.Equals(this._expr, oth._expr) && this._isArray == oth._isArray && object.Equals(this._low, oth._low) && object.Equals(this._high, oth._high);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isArray));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._low));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._high));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IndexRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isArray);
      s += ", ";
      s += Dafny.Helpers.ToString(this._low);
      s += ", ";
      s += Dafny.Helpers.ToString(this._high);
      s += ")";
      return s;
    }
  }
  public class Expression_TupleSelect : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _index;
    public Expression_TupleSelect(DAST._IExpression expr, BigInteger index) : base() {
      this._expr = expr;
      this._index = index;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TupleSelect(_expr, _index);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TupleSelect;
      return oth != null && object.Equals(this._expr, oth._expr) && this._index == oth._index;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._index));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TupleSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._index);
      s += ")";
      return s;
    }
  }
  public class Expression_Call : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Call(_on, _name, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_Lambda : Expression {
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly DAST._IType _retType;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Expression_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._params = @params;
      this._retType = retType;
      this._body = body;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Lambda(_params, _retType, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Lambda;
      return oth != null && object.Equals(this._params, oth._params) && object.Equals(this._retType, oth._retType) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Lambda";
      s += "(";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expression_BetaRedex : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _values;
    public readonly DAST._IType _retType;
    public readonly DAST._IExpression _expr;
    public Expression_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) : base() {
      this._values = values;
      this._retType = retType;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BetaRedex(_values, _retType, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BetaRedex;
      return oth != null && object.Equals(this._values, oth._values) && object.Equals(this._retType, oth._retType) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._values));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BetaRedex";
      s += "(";
      s += Dafny.Helpers.ToString(this._values);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_IIFE : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IExpression _value;
    public readonly DAST._IExpression _iifeBody;
    public Expression_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) : base() {
      this._name = name;
      this._typ = typ;
      this._value = @value;
      this._iifeBody = iifeBody;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IIFE(_name, _typ, _value, _iifeBody);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IIFE;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._value, oth._value) && object.Equals(this._iifeBody, oth._iifeBody);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._iifeBody));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IIFE";
      s += "(";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._iifeBody);
      s += ")";
      return s;
    }
  }
  public class Expression_Apply : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._expr = expr;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Apply(_expr, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Apply;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Apply";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_TypeTest : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _dType;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public Expression_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) : base() {
      this._on = @on;
      this._dType = dType;
      this._variant = variant;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TypeTest(_on, _dType, _variant);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TypeTest;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._dType, oth._dType) && object.Equals(this._variant, oth._variant);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TypeTest";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dType);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_InitializationValue : Expression {
    public readonly DAST._IType _typ;
    public Expression_InitializationValue(DAST._IType typ) : base() {
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_InitializationValue(_typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_InitializationValue;
      return oth != null && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.InitializationValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_BoolBoundedPool : Expression {
    public Expression_BoolBoundedPool() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BoolBoundedPool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BoolBoundedPool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BoolBoundedPool";
      return s;
    }
  }
  public class Expression_SetBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public Expression_SetBoundedPool(DAST._IExpression of) : base() {
      this._of = of;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBoundedPool(_of);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBoundedPool;
      return oth != null && object.Equals(this._of, oth._of);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public readonly bool _includeDuplicates;
    public Expression_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) : base() {
      this._of = of;
      this._includeDuplicates = includeDuplicates;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqBoundedPool(_of, _includeDuplicates);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqBoundedPool;
      return oth != null && object.Equals(this._of, oth._of) && this._includeDuplicates == oth._includeDuplicates;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._includeDuplicates));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ", ";
      s += Dafny.Helpers.ToString(this._includeDuplicates);
      s += ")";
      return s;
    }
  }
  public class Expression_IntRange : Expression {
    public readonly DAST._IExpression _lo;
    public readonly DAST._IExpression _hi;
    public Expression_IntRange(DAST._IExpression lo, DAST._IExpression hi) : base() {
      this._lo = lo;
      this._hi = hi;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IntRange(_lo, _hi);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IntRange;
      return oth != null && object.Equals(this._lo, oth._lo) && object.Equals(this._hi, oth._hi);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hi));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IntRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._lo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hi);
      s += ")";
      return s;
    }
  }

  public interface _IUnaryOp {
    bool is_Not { get; }
    bool is_BitwiseNot { get; }
    bool is_Cardinality { get; }
    _IUnaryOp DowncastClone();
  }
  public abstract class UnaryOp : _IUnaryOp {
    public UnaryOp() {
    }
    private static readonly DAST._IUnaryOp theDefault = create_Not();
    public static DAST._IUnaryOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IUnaryOp> _TYPE = new Dafny.TypeDescriptor<DAST._IUnaryOp>(DAST.UnaryOp.Default());
    public static Dafny.TypeDescriptor<DAST._IUnaryOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnaryOp create_Not() {
      return new UnaryOp_Not();
    }
    public static _IUnaryOp create_BitwiseNot() {
      return new UnaryOp_BitwiseNot();
    }
    public static _IUnaryOp create_Cardinality() {
      return new UnaryOp_Cardinality();
    }
    public bool is_Not { get { return this is UnaryOp_Not; } }
    public bool is_BitwiseNot { get { return this is UnaryOp_BitwiseNot; } }
    public bool is_Cardinality { get { return this is UnaryOp_Cardinality; } }
    public static System.Collections.Generic.IEnumerable<_IUnaryOp> AllSingletonConstructors {
      get {
        yield return UnaryOp.create_Not();
        yield return UnaryOp.create_BitwiseNot();
        yield return UnaryOp.create_Cardinality();
      }
    }
    public abstract _IUnaryOp DowncastClone();
  }
  public class UnaryOp_Not : UnaryOp {
    public UnaryOp_Not() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Not();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Not;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Not";
      return s;
    }
  }
  public class UnaryOp_BitwiseNot : UnaryOp {
    public UnaryOp_BitwiseNot() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_BitwiseNot();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_BitwiseNot;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.BitwiseNot";
      return s;
    }
  }
  public class UnaryOp_Cardinality : UnaryOp {
    public UnaryOp_Cardinality() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Cardinality();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Cardinality;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Cardinality";
      return s;
    }
  }

  public interface _ILiteral {
    bool is_BoolLiteral { get; }
    bool is_IntLiteral { get; }
    bool is_DecLiteral { get; }
    bool is_StringLiteral { get; }
    bool is_CharLiteral { get; }
    bool is_Null { get; }
    bool dtor_BoolLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 { get; }
    DAST._IType dtor_IntLiteral_a1 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 { get; }
    DAST._IType dtor_DecLiteral_a2 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 { get; }
    Dafny.Rune dtor_CharLiteral_a0 { get; }
    DAST._IType dtor_Null_a0 { get; }
    _ILiteral DowncastClone();
  }
  public abstract class Literal : _ILiteral {
    public Literal() {
    }
    private static readonly DAST._ILiteral theDefault = create_BoolLiteral(false);
    public static DAST._ILiteral Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ILiteral> _TYPE = new Dafny.TypeDescriptor<DAST._ILiteral>(DAST.Literal.Default());
    public static Dafny.TypeDescriptor<DAST._ILiteral> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ILiteral create_BoolLiteral(bool _a0) {
      return new Literal_BoolLiteral(_a0);
    }
    public static _ILiteral create_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) {
      return new Literal_IntLiteral(_a0, _a1);
    }
    public static _ILiteral create_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) {
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public static _ILiteral create_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Literal_StringLiteral(_a0);
    }
    public static _ILiteral create_CharLiteral(Dafny.Rune _a0) {
      return new Literal_CharLiteral(_a0);
    }
    public static _ILiteral create_Null(DAST._IType _a0) {
      return new Literal_Null(_a0);
    }
    public bool is_BoolLiteral { get { return this is Literal_BoolLiteral; } }
    public bool is_IntLiteral { get { return this is Literal_IntLiteral; } }
    public bool is_DecLiteral { get { return this is Literal_DecLiteral; } }
    public bool is_StringLiteral { get { return this is Literal_StringLiteral; } }
    public bool is_CharLiteral { get { return this is Literal_CharLiteral; } }
    public bool is_Null { get { return this is Literal_Null; } }
    public bool dtor_BoolLiteral_a0 {
      get {
        var d = this;
        return ((Literal_BoolLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_IntLiteral_a1 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a1;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a1;
      }
    }
    public DAST._IType dtor_DecLiteral_a2 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a2;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 {
      get {
        var d = this;
        return ((Literal_StringLiteral)d)._a0;
      }
    }
    public Dafny.Rune dtor_CharLiteral_a0 {
      get {
        var d = this;
        return ((Literal_CharLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_Null_a0 {
      get {
        var d = this;
        return ((Literal_Null)d)._a0;
      }
    }
    public abstract _ILiteral DowncastClone();
  }
  public class Literal_BoolLiteral : Literal {
    public readonly bool _a0;
    public Literal_BoolLiteral(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_BoolLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_BoolLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.BoolLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_IntLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly DAST._IType _a1;
    public Literal_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_IntLiteral(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_IntLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.IntLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Literal_DecLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly Dafny.ISequence<Dafny.Rune> _a1;
    public readonly DAST._IType _a2;
    public Literal_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
      this._a2 = _a2;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_DecLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1) && object.Equals(this._a2, oth._a2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a2));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.DecLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += this._a1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a2);
      s += ")";
      return s;
    }
  }
  public class Literal_StringLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Literal_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_StringLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_StringLiteral;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.StringLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Literal_CharLiteral : Literal {
    public readonly Dafny.Rune _a0;
    public Literal_CharLiteral(Dafny.Rune _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_CharLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_CharLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.CharLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_Null : Literal {
    public readonly DAST._IType _a0;
    public Literal_Null(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_Null(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_Null;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.Null";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
} // end of namespace DAST

namespace D2DPrettyPrinter {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> PrettyPrint(Dafny.ISequence<DAST._IModule> d) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Microsoft.Dafny.Compilers.WrapException.Throw();
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Not Implemented Yet");
      return s;
    }
  }
} // end of namespace D2DPrettyPrinter
namespace ResolvedDesugaredExecutableDafnyPlugin {


  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _out14;
      _out14 = D2DPrettyPrinter.__default.PrettyPrint(p);
      s = _out14;
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      return s;
    }
  }
} // end of namespace ResolvedDesugaredExecutableDafnyPlugin
namespace RAST {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> SeqToString<__T>(Dafny.ISequence<__T> s, Func<__T, Dafny.ISequence<Dafny.Rune>> f, Dafny.ISequence<Dafny.Rune> separator) {
      if ((new BigInteger((s).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Helpers.Id<Func<__T, Dafny.ISequence<Dafny.Rune>>>(f)((s).Select(BigInteger.Zero)), (((new BigInteger((s).Count)) > (BigInteger.One)) ? (Dafny.Sequence<Dafny.Rune>.Concat(separator, RAST.__default.SeqToString<__T>((s).Drop(BigInteger.One), f, separator))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
      }
    }
    public static BigInteger SeqToHeight<__T>(Dafny.ISequence<__T> s, Func<__T, BigInteger> f) {
      if ((new BigInteger((s).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        BigInteger _801_i = Dafny.Helpers.Id<Func<__T, BigInteger>>(f)((s).Select(BigInteger.Zero));
        BigInteger _802_j = RAST.__default.SeqToHeight<__T>((s).Drop(BigInteger.One), f);
        if ((_801_i) < (_802_j)) {
          return _802_j;
        } else {
          return _801_i;
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> AddIndent(Dafny.ISequence<Dafny.Rune> raw, Dafny.ISequence<Dafny.Rune> ind) {
      Dafny.ISequence<Dafny.Rune> _803___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((raw).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, raw);
      } else if ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[({")).Contains((raw).Select(BigInteger.Zero))) {
        _803___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in103 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in104 = Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND);
        raw = _in103;
        ind = _in104;
        goto TAIL_CALL_START;
      } else if (((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("})]")).Contains((raw).Select(BigInteger.Zero))) && ((new BigInteger((ind).Count)) > (new BigInteger(2)))) {
        _803___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in105 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in106 = (ind).Take((new BigInteger((ind).Count)) - (new BigInteger(2)));
        raw = _in105;
        ind = _in106;
        goto TAIL_CALL_START;
      } else if (((raw).Select(BigInteger.Zero)) == (new Dafny.Rune('\n'))) {
        _803___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)), ind));
        Dafny.ISequence<Dafny.Rune> _in107 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in108 = ind;
        raw = _in107;
        ind = _in108;
        goto TAIL_CALL_START;
      } else {
        _803___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in109 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in110 = ind;
        raw = _in109;
        ind = _in110;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger max(BigInteger i, BigInteger j) {
      if ((i) < (j)) {
        return j;
      } else {
        return i;
      }
    }
    public static byte PUB {
      get {
        return (byte)(1);
      }
    }
    public static byte PRIV {
      get {
        return (byte)(0);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> IND {
      get {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  ");
      }
    }
  }

  public interface _IMod {
    bool is_Mod { get; }
    bool is_ExternMod { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._IModDecl> dtor_body { get; }
    _IMod DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class Mod : _IMod {
    public Mod() {
    }
    private static readonly RAST._IMod theDefault = create_Mod(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IModDecl>.Empty);
    public static RAST._IMod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IMod> _TYPE = new Dafny.TypeDescriptor<RAST._IMod>(RAST.Mod.Default());
    public static Dafny.TypeDescriptor<RAST._IMod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMod create_Mod(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IModDecl> body) {
      return new Mod_Mod(name, body);
    }
    public static _IMod create_ExternMod(Dafny.ISequence<Dafny.Rune> name) {
      return new Mod_ExternMod(name);
    }
    public bool is_Mod { get { return this is Mod_Mod; } }
    public bool is_ExternMod { get { return this is Mod_ExternMod; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Mod_Mod) { return ((Mod_Mod)d)._name; }
        return ((Mod_ExternMod)d)._name;
      }
    }
    public Dafny.ISequence<RAST._IModDecl> dtor_body {
      get {
        var d = this;
        return ((Mod_Mod)d)._body;
      }
    }
    public abstract _IMod DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      RAST._IMod _source25 = this;
      if (_source25.is_Mod) {
        Dafny.ISequence<Dafny.Rune> _804___mcc_h0 = _source25.dtor_name;
        Dafny.ISequence<RAST._IModDecl> _805___mcc_h1 = _source25.dtor_body;
        Dafny.ISequence<RAST._IModDecl> _806_body = _805___mcc_h1;
        Dafny.ISequence<Dafny.Rune> _807_name = _804___mcc_h0;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), _807_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), RAST.__default.IND), RAST.__default.SeqToString<RAST._IModDecl>(_806_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IModDecl, Dafny.ISequence<Dafny.Rune>>>>((_808_ind) => ((System.Func<RAST._IModDecl, Dafny.ISequence<Dafny.Rune>>)((_809_modDecl) => {
          return (_809_modDecl)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_808_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else {
        Dafny.ISequence<Dafny.Rune> _810___mcc_h2 = _source25.dtor_name;
        Dafny.ISequence<Dafny.Rune> _811_name = _810___mcc_h2;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), _811_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      }
    }
  }
  public class Mod_Mod : Mod {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._IModDecl> _body;
    public Mod_Mod(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IModDecl> body) : base() {
      this._name = name;
      this._body = body;
    }
    public override _IMod DowncastClone() {
      if (this is _IMod dt) { return dt; }
      return new Mod_Mod(_name, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Mod_Mod;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Mod.Mod";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Mod_ExternMod : Mod {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Mod_ExternMod(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _IMod DowncastClone() {
      if (this is _IMod dt) { return dt; }
      return new Mod_ExternMod(_name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Mod_ExternMod;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Mod.ExternMod";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IModDecl {
    bool is_RawDecl { get; }
    bool is_ModDecl { get; }
    bool is_StructDecl { get; }
    bool is_EnumDecl { get; }
    bool is_ImplDecl { get; }
    bool is_TraitDecl { get; }
    Dafny.ISequence<Dafny.Rune> dtor_body { get; }
    RAST._IMod dtor_mod { get; }
    RAST._IStruct dtor_struct { get; }
    RAST._IEnum dtor_enum { get; }
    RAST._IImpl dtor_impl { get; }
    RAST._ITrait dtor_tr { get; }
    _IModDecl DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class ModDecl : _IModDecl {
    public ModDecl() {
    }
    private static readonly RAST._IModDecl theDefault = create_RawDecl(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IModDecl Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IModDecl> _TYPE = new Dafny.TypeDescriptor<RAST._IModDecl>(RAST.ModDecl.Default());
    public static Dafny.TypeDescriptor<RAST._IModDecl> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModDecl create_RawDecl(Dafny.ISequence<Dafny.Rune> body) {
      return new ModDecl_RawDecl(body);
    }
    public static _IModDecl create_ModDecl(RAST._IMod mod) {
      return new ModDecl_ModDecl(mod);
    }
    public static _IModDecl create_StructDecl(RAST._IStruct @struct) {
      return new ModDecl_StructDecl(@struct);
    }
    public static _IModDecl create_EnumDecl(RAST._IEnum @enum) {
      return new ModDecl_EnumDecl(@enum);
    }
    public static _IModDecl create_ImplDecl(RAST._IImpl impl) {
      return new ModDecl_ImplDecl(impl);
    }
    public static _IModDecl create_TraitDecl(RAST._ITrait tr) {
      return new ModDecl_TraitDecl(tr);
    }
    public bool is_RawDecl { get { return this is ModDecl_RawDecl; } }
    public bool is_ModDecl { get { return this is ModDecl_ModDecl; } }
    public bool is_StructDecl { get { return this is ModDecl_StructDecl; } }
    public bool is_EnumDecl { get { return this is ModDecl_EnumDecl; } }
    public bool is_ImplDecl { get { return this is ModDecl_ImplDecl; } }
    public bool is_TraitDecl { get { return this is ModDecl_TraitDecl; } }
    public Dafny.ISequence<Dafny.Rune> dtor_body {
      get {
        var d = this;
        return ((ModDecl_RawDecl)d)._body;
      }
    }
    public RAST._IMod dtor_mod {
      get {
        var d = this;
        return ((ModDecl_ModDecl)d)._mod;
      }
    }
    public RAST._IStruct dtor_struct {
      get {
        var d = this;
        return ((ModDecl_StructDecl)d)._struct;
      }
    }
    public RAST._IEnum dtor_enum {
      get {
        var d = this;
        return ((ModDecl_EnumDecl)d)._enum;
      }
    }
    public RAST._IImpl dtor_impl {
      get {
        var d = this;
        return ((ModDecl_ImplDecl)d)._impl;
      }
    }
    public RAST._ITrait dtor_tr {
      get {
        var d = this;
        return ((ModDecl_TraitDecl)d)._tr;
      }
    }
    public abstract _IModDecl DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((this).is_ModDecl) {
        return ((this).dtor_mod)._ToString(ind);
      } else if ((this).is_StructDecl) {
        return ((this).dtor_struct)._ToString(ind);
      } else if ((this).is_ImplDecl) {
        return ((this).dtor_impl)._ToString(ind);
      } else if ((this).is_EnumDecl) {
        return ((this).dtor_enum)._ToString(ind);
      } else if ((this).is_TraitDecl) {
        return ((this).dtor_tr)._ToString(ind);
      } else {
        return (this).dtor_body;
      }
    }
  }
  public class ModDecl_RawDecl : ModDecl {
    public readonly Dafny.ISequence<Dafny.Rune> _body;
    public ModDecl_RawDecl(Dafny.ISequence<Dafny.Rune> body) : base() {
      this._body = body;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_RawDecl(_body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_RawDecl;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.RawDecl";
      s += "(";
      s += this._body.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class ModDecl_ModDecl : ModDecl {
    public readonly RAST._IMod _mod;
    public ModDecl_ModDecl(RAST._IMod mod) : base() {
      this._mod = mod;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_ModDecl(_mod);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_ModDecl;
      return oth != null && object.Equals(this._mod, oth._mod);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mod));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.ModDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._mod);
      s += ")";
      return s;
    }
  }
  public class ModDecl_StructDecl : ModDecl {
    public readonly RAST._IStruct _struct;
    public ModDecl_StructDecl(RAST._IStruct @struct) : base() {
      this._struct = @struct;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_StructDecl(_struct);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_StructDecl;
      return oth != null && object.Equals(this._struct, oth._struct);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._struct));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.StructDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._struct);
      s += ")";
      return s;
    }
  }
  public class ModDecl_EnumDecl : ModDecl {
    public readonly RAST._IEnum _enum;
    public ModDecl_EnumDecl(RAST._IEnum @enum) : base() {
      this._enum = @enum;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_EnumDecl(_enum);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_EnumDecl;
      return oth != null && object.Equals(this._enum, oth._enum);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enum));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.EnumDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._enum);
      s += ")";
      return s;
    }
  }
  public class ModDecl_ImplDecl : ModDecl {
    public readonly RAST._IImpl _impl;
    public ModDecl_ImplDecl(RAST._IImpl impl) : base() {
      this._impl = impl;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_ImplDecl(_impl);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_ImplDecl;
      return oth != null && object.Equals(this._impl, oth._impl);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._impl));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.ImplDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._impl);
      s += ")";
      return s;
    }
  }
  public class ModDecl_TraitDecl : ModDecl {
    public readonly RAST._ITrait _tr;
    public ModDecl_TraitDecl(RAST._ITrait tr) : base() {
      this._tr = tr;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_TraitDecl(_tr);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_TraitDecl;
      return oth != null && object.Equals(this._tr, oth._tr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.TraitDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._tr);
      s += ")";
      return s;
    }
  }

  public interface _IAttribute {
    bool is_RawAttribute { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
  }
  public class Attribute : _IAttribute {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Attribute(Dafny.ISequence<Dafny.Rune> content) {
      this._content = content;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Attribute;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Attribute.RawAttribute";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAttribute create(Dafny.ISequence<Dafny.Rune> content) {
      return new Attribute(content);
    }
    public static _IAttribute create_RawAttribute(Dafny.ISequence<Dafny.Rune> content) {
      return create(content);
    }
    public bool is_RawAttribute { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> ToStringMultiple(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> ind) {
      return RAST.__default.SeqToString<Dafny.ISequence<Dafny.Rune>>(attributes, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>>>((_812_ind) => ((System.Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>)((_813_attribute) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_813_attribute), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _812_ind);
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
    }
  }

  public interface _IStruct {
    bool is_Struct { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_typeParams { get; }
    RAST._IFormals dtor_fields { get; }
    _IStruct DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Struct : _IStruct {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _attributes;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _typeParams;
    public readonly RAST._IFormals _fields;
    public Struct(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, RAST._IFormals fields) {
      this._attributes = attributes;
      this._name = name;
      this._typeParams = typeParams;
      this._fields = fields;
    }
    public _IStruct DowncastClone() {
      if (this is _IStruct dt) { return dt; }
      return new Struct(_attributes, _name, _typeParams, _fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Struct;
      return oth != null && object.Equals(this._attributes, oth._attributes) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Struct.Struct";
      s += "(";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
    private static readonly RAST._IStruct theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, RAST.Formals.Default());
    public static RAST._IStruct Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IStruct> _TYPE = new Dafny.TypeDescriptor<RAST._IStruct>(RAST.Struct.Default());
    public static Dafny.TypeDescriptor<RAST._IStruct> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStruct create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, RAST._IFormals fields) {
      return new Struct(attributes, name, typeParams, fields);
    }
    public static _IStruct create_Struct(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, RAST._IFormals fields) {
      return create(attributes, name, typeParams, fields);
    }
    public bool is_Struct { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes {
      get {
        return this._attributes;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public RAST._IFormals dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Attribute.ToStringMultiple((this).dtor_attributes, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub struct ")), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_fields)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND), ((this).dtor_fields).is_NamedFormals)), ((((this).dtor_fields).is_NamelessFormals) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
    }
  }

  public interface _IFormals {
    bool is_NamedFormals { get; }
    bool is_NamelessFormals { get; }
    Dafny.ISequence<RAST._IFormal> dtor_fields { get; }
    Dafny.ISequence<RAST._IType> dtor_types { get; }
    _IFormals DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine);
  }
  public abstract class Formals : _IFormals {
    public Formals() {
    }
    private static readonly RAST._IFormals theDefault = create_NamedFormals(Dafny.Sequence<RAST._IFormal>.Empty);
    public static RAST._IFormals Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFormals> _TYPE = new Dafny.TypeDescriptor<RAST._IFormals>(RAST.Formals.Default());
    public static Dafny.TypeDescriptor<RAST._IFormals> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormals create_NamedFormals(Dafny.ISequence<RAST._IFormal> fields) {
      return new Formals_NamedFormals(fields);
    }
    public static _IFormals create_NamelessFormals(Dafny.ISequence<RAST._IType> types) {
      return new Formals_NamelessFormals(types);
    }
    public bool is_NamedFormals { get { return this is Formals_NamedFormals; } }
    public bool is_NamelessFormals { get { return this is Formals_NamelessFormals; } }
    public Dafny.ISequence<RAST._IFormal> dtor_fields {
      get {
        var d = this;
        return ((Formals_NamedFormals)d)._fields;
      }
    }
    public Dafny.ISequence<RAST._IType> dtor_types {
      get {
        var d = this;
        return ((Formals_NamelessFormals)d)._types;
      }
    }
    public abstract _IFormals DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine) {
      if ((this).is_NamedFormals) {
        Dafny.ISequence<Dafny.Rune> _814_separator = ((newLine) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"), ind), RAST.__default.IND)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")));
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs40 = (((newLine) && ((new BigInteger(((this).dtor_fields).Count)).Sign == 1)) ? (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind))) : ((((new BigInteger(((this).dtor_fields).Count)).Sign == 1) ? (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "))) : (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))))));
        Dafny.ISequence<Dafny.Rune> _815_beginSpace = _let_tmp_rhs40.dtor__0;
        Dafny.ISequence<Dafny.Rune> _816_endSpace = _let_tmp_rhs40.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"), _815_beginSpace), RAST.__default.SeqToString<RAST._IFormal>((this).dtor_fields, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>>>((_817_ind) => ((System.Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>)((_818_field) => {
          return (_818_field)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_817_ind, RAST.__default.IND));
        })))(ind), _814_separator)), _816_endSpace), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else {
        Dafny.ISequence<Dafny.Rune> _819_separator = ((newLine) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"), ind), RAST.__default.IND)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")));
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), RAST.__default.SeqToString<RAST._IType>((this).dtor_types, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_820_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_821_t) => {
          return (_821_t)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_820_ind, RAST.__default.IND));
        })))(ind), _819_separator)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
    }
  }
  public class Formals_NamedFormals : Formals {
    public readonly Dafny.ISequence<RAST._IFormal> _fields;
    public Formals_NamedFormals(Dafny.ISequence<RAST._IFormal> fields) : base() {
      this._fields = fields;
    }
    public override _IFormals DowncastClone() {
      if (this is _IFormals dt) { return dt; }
      return new Formals_NamedFormals(_fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formals_NamedFormals;
      return oth != null && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Formals.NamedFormals";
      s += "(";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
  }
  public class Formals_NamelessFormals : Formals {
    public readonly Dafny.ISequence<RAST._IType> _types;
    public Formals_NamelessFormals(Dafny.ISequence<RAST._IType> types) : base() {
      this._types = types;
    }
    public override _IFormals DowncastClone() {
      if (this is _IFormals dt) { return dt; }
      return new Formals_NamelessFormals(_types);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formals_NamelessFormals;
      return oth != null && object.Equals(this._types, oth._types);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._types));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Formals.NamelessFormals";
      s += "(";
      s += Dafny.Helpers.ToString(this._types);
      s += ")";
      return s;
    }
  }

  public interface _IEnumCase {
    bool is_EnumCase { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IFormals dtor_fields { get; }
    _IEnumCase DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine);
  }
  public class EnumCase : _IEnumCase {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IFormals _fields;
    public EnumCase(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      this._name = name;
      this._fields = fields;
    }
    public _IEnumCase DowncastClone() {
      if (this is _IEnumCase dt) { return dt; }
      return new EnumCase(_name, _fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.EnumCase;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.EnumCase.EnumCase";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
    private static readonly RAST._IEnumCase theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Formals.Default());
    public static RAST._IEnumCase Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IEnumCase> _TYPE = new Dafny.TypeDescriptor<RAST._IEnumCase>(RAST.EnumCase.Default());
    public static Dafny.TypeDescriptor<RAST._IEnumCase> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEnumCase create(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      return new EnumCase(name, fields);
    }
    public static _IEnumCase create_EnumCase(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      return create(name, fields);
    }
    public bool is_EnumCase { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public RAST._IFormals dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine) {
      return Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_name, ((this).dtor_fields)._ToString(ind, newLine));
    }
  }

  public interface _IEnum {
    bool is_Enum { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_typeParams { get; }
    Dafny.ISequence<RAST._IEnumCase> dtor_variants { get; }
    _IEnum DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Enum : _IEnum {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _attributes;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _typeParams;
    public readonly Dafny.ISequence<RAST._IEnumCase> _variants;
    public Enum(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      this._attributes = attributes;
      this._name = name;
      this._typeParams = typeParams;
      this._variants = variants;
    }
    public _IEnum DowncastClone() {
      if (this is _IEnum dt) { return dt; }
      return new Enum(_attributes, _name, _typeParams, _variants);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Enum;
      return oth != null && object.Equals(this._attributes, oth._attributes) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._variants, oth._variants);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variants));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Enum.Enum";
      s += "(";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._variants);
      s += ")";
      return s;
    }
    private static readonly RAST._IEnum theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<RAST._IEnumCase>.Empty);
    public static RAST._IEnum Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IEnum> _TYPE = new Dafny.TypeDescriptor<RAST._IEnum>(RAST.Enum.Default());
    public static Dafny.TypeDescriptor<RAST._IEnum> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEnum create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      return new Enum(attributes, name, typeParams, variants);
    }
    public static _IEnum create_Enum(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      return create(attributes, name, typeParams, variants);
    }
    public bool is_Enum { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes {
      get {
        return this._attributes;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<RAST._IEnumCase> dtor_variants {
      get {
        return this._variants;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Attribute.ToStringMultiple((this).dtor_attributes, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub enum ")), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IEnumCase>((this).dtor_variants, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IEnumCase, Dafny.ISequence<Dafny.Rune>>>>((_822_ind) => ((System.Func<RAST._IEnumCase, Dafny.ISequence<Dafny.Rune>>)((_823_variant) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _822_ind), RAST.__default.IND), (_823_variant)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_822_ind, RAST.__default.IND), false));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }

  public interface _ITypeParam {
    bool is_RawTypeParam { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
  }
  public class TypeParam : _ITypeParam {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public TypeParam(Dafny.ISequence<Dafny.Rune> content) {
      this._content = content;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as RAST.TypeParam;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.TypeParam.RawTypeParam";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITypeParam create(Dafny.ISequence<Dafny.Rune> content) {
      return new TypeParam(content);
    }
    public static _ITypeParam create_RawTypeParam(Dafny.ISequence<Dafny.Rune> content) {
      return create(content);
    }
    public bool is_RawTypeParam { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> ToStringMultiple(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, Dafny.ISequence<Dafny.Rune> ind) {
      if ((new BigInteger((typeParams).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), RAST.__default.SeqToString<Dafny.ISequence<Dafny.Rune>>(typeParams, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>>>((_824_ind) => ((System.Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>)((_825_t) => {
          return RAST.TypeParam._ToString(_825_t, Dafny.Sequence<Dafny.Rune>.Concat(_824_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> _this, Dafny.ISequence<Dafny.Rune> ind) {
      return (_this);
    }
  }

  public interface _IType {
    bool is_Self { get; }
    bool is_SelfOwned { get; }
    bool is_SelfMut { get; }
    bool is_RawType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    _IType DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly RAST._IType theDefault = create_Self();
    public static RAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IType> _TYPE = new Dafny.TypeDescriptor<RAST._IType>(RAST.Type.Default());
    public static Dafny.TypeDescriptor<RAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_Self() {
      return new Type_Self();
    }
    public static _IType create_SelfOwned() {
      return new Type_SelfOwned();
    }
    public static _IType create_SelfMut() {
      return new Type_SelfMut();
    }
    public static _IType create_RawType(Dafny.ISequence<Dafny.Rune> content) {
      return new Type_RawType(content);
    }
    public bool is_Self { get { return this is Type_Self; } }
    public bool is_SelfOwned { get { return this is Type_SelfOwned; } }
    public bool is_SelfMut { get { return this is Type_SelfMut; } }
    public bool is_RawType { get { return this is Type_RawType; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        var d = this;
        return ((Type_RawType)d)._content;
      }
    }
    public abstract _IType DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((this).is_Self) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&Self");
      } else if ((this).is_SelfOwned) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
      } else if ((this).is_SelfMut) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut Self");
      } else {
        return (this).dtor_content;
      }
    }
  }
  public class Type_Self : Type {
    public Type_Self() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Self();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_Self;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.Self";
      return s;
    }
  }
  public class Type_SelfOwned : Type {
    public Type_SelfOwned() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_SelfOwned();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_SelfOwned;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.SelfOwned";
      return s;
    }
  }
  public class Type_SelfMut : Type {
    public Type_SelfMut() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_SelfMut();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_SelfMut;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.SelfMut";
      return s;
    }
  }
  public class Type_RawType : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Type_RawType(Dafny.ISequence<Dafny.Rune> content) : base() {
      this._content = content;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_RawType(_content);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_RawType;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.RawType";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_typeParams { get; }
    RAST._IType dtor_tpe { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Dafny.ISequence<RAST._IImplMember> dtor_body { get; }
    _ITrait DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._where = @where;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_typeParams, _tpe, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Trait;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Trait.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly RAST._ITrait theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, RAST.Type.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IImplMember>.Empty);
    public static RAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._ITrait> _TYPE = new Dafny.TypeDescriptor<RAST._ITrait>(RAST.Trait.Default());
    public static Dafny.TypeDescriptor<RAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Trait(typeParams, tpe, @where, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return create(typeParams, tpe, @where, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        return this._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        return this._where;
      }
    }
    public Dafny.ISequence<RAST._IImplMember> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("trait "), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_tpe)._ToString(ind)), ((!((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IImplMember>((this).dtor_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>>>((_826_ind) => ((System.Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>)((_827_member) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _826_ind), RAST.__default.IND), (_827_member)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_826_ind, RAST.__default.IND)));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), (((new BigInteger(((this).dtor_body).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }

  public interface _IImpl {
    bool is_ImplFor { get; }
    bool is_Impl { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_typeParams { get; }
    RAST._IType dtor_tpe { get; }
    RAST._IType dtor_forType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Dafny.ISequence<RAST._IImplMember> dtor_body { get; }
    _IImpl DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class Impl : _IImpl {
    public Impl() {
    }
    private static readonly RAST._IImpl theDefault = create_ImplFor(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, RAST.Type.Default(), RAST.Type.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IImplMember>.Empty);
    public static RAST._IImpl Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IImpl> _TYPE = new Dafny.TypeDescriptor<RAST._IImpl>(RAST.Impl.Default());
    public static Dafny.TypeDescriptor<RAST._IImpl> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IImpl create_ImplFor(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, RAST._IType tpe, RAST._IType forType, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Impl_ImplFor(typeParams, tpe, forType, @where, body);
    }
    public static _IImpl create_Impl(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Impl_Impl(typeParams, tpe, @where, body);
    }
    public bool is_ImplFor { get { return this is Impl_ImplFor; } }
    public bool is_Impl { get { return this is Impl_Impl; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_typeParams {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._typeParams; }
        return ((Impl_Impl)d)._typeParams;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._tpe; }
        return ((Impl_Impl)d)._tpe;
      }
    }
    public RAST._IType dtor_forType {
      get {
        var d = this;
        return ((Impl_ImplFor)d)._forType;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._where; }
        return ((Impl_Impl)d)._where;
      }
    }
    public Dafny.ISequence<RAST._IImplMember> dtor_body {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._body; }
        return ((Impl_Impl)d)._body;
      }
    }
    public abstract _IImpl DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_tpe)._ToString(ind)), (((this).is_ImplFor) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" for "), ((this).dtor_forType)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), ((!((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IImplMember>((this).dtor_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>>>((_828_ind) => ((System.Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>)((_829_member) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _828_ind), RAST.__default.IND), (_829_member)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_828_ind, RAST.__default.IND)));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), (((new BigInteger(((this).dtor_body).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }
  public class Impl_ImplFor : Impl {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly RAST._IType _forType;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Impl_ImplFor(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, RAST._IType tpe, RAST._IType forType, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) : base() {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._forType = forType;
      this._where = @where;
      this._body = body;
    }
    public override _IImpl DowncastClone() {
      if (this is _IImpl dt) { return dt; }
      return new Impl_ImplFor(_typeParams, _tpe, _forType, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Impl_ImplFor;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._forType, oth._forType) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._forType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Impl.ImplFor";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += Dafny.Helpers.ToString(this._forType);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Impl_Impl : Impl {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Impl_Impl(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) : base() {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._where = @where;
      this._body = body;
    }
    public override _IImpl DowncastClone() {
      if (this is _IImpl dt) { return dt; }
      return new Impl_Impl(_typeParams, _tpe, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Impl_Impl;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Impl.Impl";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }

  public interface _IImplMember {
    bool is_RawImplMember { get; }
    bool is_FnDecl { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    byte dtor_pub { get; }
    RAST._IFn dtor_fun { get; }
    _IImplMember DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class ImplMember : _IImplMember {
    public ImplMember() {
    }
    private static readonly RAST._IImplMember theDefault = create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IImplMember Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IImplMember> _TYPE = new Dafny.TypeDescriptor<RAST._IImplMember>(RAST.ImplMember.Default());
    public static Dafny.TypeDescriptor<RAST._IImplMember> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IImplMember create_RawImplMember(Dafny.ISequence<Dafny.Rune> content) {
      return new ImplMember_RawImplMember(content);
    }
    public static _IImplMember create_FnDecl(byte pub, RAST._IFn fun) {
      return new ImplMember_FnDecl(pub, fun);
    }
    public bool is_RawImplMember { get { return this is ImplMember_RawImplMember; } }
    public bool is_FnDecl { get { return this is ImplMember_FnDecl; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        var d = this;
        return ((ImplMember_RawImplMember)d)._content;
      }
    }
    public byte dtor_pub {
      get {
        var d = this;
        return ((ImplMember_FnDecl)d)._pub;
      }
    }
    public RAST._IFn dtor_fun {
      get {
        var d = this;
        return ((ImplMember_FnDecl)d)._fun;
      }
    }
    public abstract _IImplMember DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((this).is_FnDecl) {
        return Dafny.Sequence<Dafny.Rune>.Concat(((((this).dtor_pub) == (RAST.__default.PUB)) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), ((this).dtor_fun)._ToString(ind));
      } else {
        return (this).dtor_content;
      }
    }
  }
  public class ImplMember_RawImplMember : ImplMember {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public ImplMember_RawImplMember(Dafny.ISequence<Dafny.Rune> content) : base() {
      this._content = content;
    }
    public override _IImplMember DowncastClone() {
      if (this is _IImplMember dt) { return dt; }
      return new ImplMember_RawImplMember(_content);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ImplMember_RawImplMember;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ImplMember.RawImplMember";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class ImplMember_FnDecl : ImplMember {
    public readonly byte _pub;
    public readonly RAST._IFn _fun;
    public ImplMember_FnDecl(byte pub, RAST._IFn fun) : base() {
      this._pub = pub;
      this._fun = fun;
    }
    public override _IImplMember DowncastClone() {
      if (this is _IImplMember dt) { return dt; }
      return new ImplMember_FnDecl(_pub, _fun);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ImplMember_FnDecl;
      return oth != null && this._pub == oth._pub && object.Equals(this._fun, oth._fun);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pub));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fun));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ImplMember.FnDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._pub);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fun);
      s += ")";
      return s;
    }
  }

  public partial class VISIBILITY {
    public static System.Collections.Generic.IEnumerable<byte> IntegerRange(BigInteger lo, BigInteger hi) {
      for (var j = lo; j < hi; j++) { yield return (byte)j; }
    }
    private static readonly Dafny.TypeDescriptor<byte> _TYPE = new Dafny.TypeDescriptor<byte>(0);
    public static Dafny.TypeDescriptor<byte> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IType dtor_tpe { get; }
    _IFormal DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IType _tpe;
    public Formal(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      this._name = name;
      this._tpe = tpe;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _tpe);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._tpe, oth._tpe);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ")";
      return s;
    }
    private static readonly RAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Type.Default());
    public static RAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFormal> _TYPE = new Dafny.TypeDescriptor<RAST._IFormal>(RAST.Formal.Default());
    public static Dafny.TypeDescriptor<RAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      return new Formal(name, tpe);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      return create(name, tpe);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        return this._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) && (((this).dtor_tpe).is_SelfOwned)) {
        return (this).dtor_name;
      } else if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"))) && (((this).dtor_tpe).is_Self)) {
        return (this).dtor_name;
      } else if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut self"))) && (((this).dtor_tpe).is_SelfMut)) {
        return (this).dtor_name;
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_name, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), ((this).dtor_tpe)._ToString(ind));
      }
    }
    public static RAST._IFormal self {
      get {
        return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"), RAST.Type.create_Self());
      }
    }
    public static RAST._IFormal selfOwned {
      get {
        return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), RAST.Type.create_SelfOwned());
      }
    }
    public static RAST._IFormal selfMut {
      get {
        return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut self"), RAST.Type.create_SelfMut());
      }
    }
  }

  public interface _IPattern {
    bool is_RawPattern { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
  }
  public class Pattern : _IPattern {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Pattern(Dafny.ISequence<Dafny.Rune> content) {
      this._content = content;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Pattern;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Pattern.RawPattern";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPattern create(Dafny.ISequence<Dafny.Rune> content) {
      return new Pattern(content);
    }
    public static _IPattern create_RawPattern(Dafny.ISequence<Dafny.Rune> content) {
      return create(content);
    }
    public bool is_RawPattern { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> _this, Dafny.ISequence<Dafny.Rune> ind) {
      return (_this);
    }
  }

  public interface _IMatchCase {
    bool is_MatchCase { get; }
    Dafny.ISequence<Dafny.Rune> dtor_pattern { get; }
    RAST._IExpr dtor_rhs { get; }
    _IMatchCase DowncastClone();
    BigInteger Height();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class MatchCase : _IMatchCase {
    public readonly Dafny.ISequence<Dafny.Rune> _pattern;
    public readonly RAST._IExpr _rhs;
    public MatchCase(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      this._pattern = pattern;
      this._rhs = rhs;
    }
    public _IMatchCase DowncastClone() {
      if (this is _IMatchCase dt) { return dt; }
      return new MatchCase(_pattern, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.MatchCase;
      return oth != null && object.Equals(this._pattern, oth._pattern) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pattern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.MatchCase.MatchCase";
      s += "(";
      s += Dafny.Helpers.ToString(this._pattern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
    private static readonly RAST._IMatchCase theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Expr.Default());
    public static RAST._IMatchCase Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IMatchCase> _TYPE = new Dafny.TypeDescriptor<RAST._IMatchCase>(RAST.MatchCase.Default());
    public static Dafny.TypeDescriptor<RAST._IMatchCase> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMatchCase create(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      return new MatchCase(pattern, rhs);
    }
    public static _IMatchCase create_MatchCase(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      return create(pattern, rhs);
    }
    public bool is_MatchCase { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_pattern {
      get {
        return this._pattern;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        return this._rhs;
      }
    }
    public BigInteger Height() {
      return (BigInteger.One) + (((this).dtor_rhs).Height());
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      Dafny.ISequence<Dafny.Rune> _830_newIndent = ((((this).dtor_rhs).is_Block) ? (ind) : (Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)));
      Dafny.ISequence<Dafny.Rune> _831_rhsString = ((this).dtor_rhs)._ToString(_830_newIndent);
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Pattern._ToString((this).dtor_pattern, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" =>")), ((((_831_rhsString).Contains(new Dafny.Rune('\n'))) && (((_831_rhsString).Select(BigInteger.Zero)) != (new Dafny.Rune('{')))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), _831_rhsString)) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), _831_rhsString))));
    }
  }

  public interface _IAssignIdentifier {
    bool is_AssignIdentifier { get; }
    Dafny.ISequence<Dafny.Rune> dtor_identifier { get; }
    RAST._IExpr dtor_rhs { get; }
    _IAssignIdentifier DowncastClone();
    BigInteger Height();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class AssignIdentifier : _IAssignIdentifier {
    public readonly Dafny.ISequence<Dafny.Rune> _identifier;
    public readonly RAST._IExpr _rhs;
    public AssignIdentifier(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      this._identifier = identifier;
      this._rhs = rhs;
    }
    public _IAssignIdentifier DowncastClone() {
      if (this is _IAssignIdentifier dt) { return dt; }
      return new AssignIdentifier(_identifier, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.AssignIdentifier;
      return oth != null && object.Equals(this._identifier, oth._identifier) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._identifier));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.AssignIdentifier.AssignIdentifier";
      s += "(";
      s += this._identifier.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
    private static readonly RAST._IAssignIdentifier theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Expr.Default());
    public static RAST._IAssignIdentifier Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IAssignIdentifier> _TYPE = new Dafny.TypeDescriptor<RAST._IAssignIdentifier>(RAST.AssignIdentifier.Default());
    public static Dafny.TypeDescriptor<RAST._IAssignIdentifier> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignIdentifier create(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      return new AssignIdentifier(identifier, rhs);
    }
    public static _IAssignIdentifier create_AssignIdentifier(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      return create(identifier, rhs);
    }
    public bool is_AssignIdentifier { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_identifier {
      get {
        return this._identifier;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        return this._rhs;
      }
    }
    public BigInteger Height() {
      return (BigInteger.One) + (((this).dtor_rhs).Height());
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_identifier, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), ((this).dtor_rhs)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)));
    }
  }

  public interface _IExpr {
    bool is_RawExpr { get; }
    bool is_Match { get; }
    bool is_StmtExpr { get; }
    bool is_Block { get; }
    bool is_StructBuild { get; }
    bool is_UnaryOp { get; }
    bool is_BinaryOp { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    RAST._IExpr dtor_matchee { get; }
    Dafny.ISequence<RAST._IMatchCase> dtor_cases { get; }
    RAST._IExpr dtor_stmt { get; }
    RAST._IExpr dtor_rhs { get; }
    RAST._IExpr dtor_underlying { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._IAssignIdentifier> dtor_assignments { get; }
    Dafny.ISequence<Dafny.Rune> dtor_op1 { get; }
    DAST.Format._IUnOpFormat dtor_format { get; }
    Dafny.ISequence<Dafny.Rune> dtor_op2 { get; }
    RAST._IExpr dtor_left { get; }
    RAST._IExpr dtor_right { get; }
    DAST.Format._IBinOpFormat dtor_format2 { get; }
    _IExpr DowncastClone();
    BigInteger Height();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
    RAST._IExpr Then(RAST._IExpr rhs2);
  }
  public abstract class Expr : _IExpr {
    public Expr() {
    }
    private static readonly RAST._IExpr theDefault = create_RawExpr(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IExpr Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IExpr> _TYPE = new Dafny.TypeDescriptor<RAST._IExpr>(RAST.Expr.Default());
    public static Dafny.TypeDescriptor<RAST._IExpr> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpr create_RawExpr(Dafny.ISequence<Dafny.Rune> content) {
      return new Expr_RawExpr(content);
    }
    public static _IExpr create_Match(RAST._IExpr matchee, Dafny.ISequence<RAST._IMatchCase> cases) {
      return new Expr_Match(matchee, cases);
    }
    public static _IExpr create_StmtExpr(RAST._IExpr stmt, RAST._IExpr rhs) {
      return new Expr_StmtExpr(stmt, rhs);
    }
    public static _IExpr create_Block(RAST._IExpr underlying) {
      return new Expr_Block(underlying);
    }
    public static _IExpr create_StructBuild(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IAssignIdentifier> assignments) {
      return new Expr_StructBuild(name, assignments);
    }
    public static _IExpr create_UnaryOp(Dafny.ISequence<Dafny.Rune> op1, RAST._IExpr underlying, DAST.Format._IUnOpFormat format) {
      return new Expr_UnaryOp(op1, underlying, format);
    }
    public static _IExpr create_BinaryOp(Dafny.ISequence<Dafny.Rune> op2, RAST._IExpr left, RAST._IExpr right, DAST.Format._IBinOpFormat format2) {
      return new Expr_BinaryOp(op2, left, right, format2);
    }
    public bool is_RawExpr { get { return this is Expr_RawExpr; } }
    public bool is_Match { get { return this is Expr_Match; } }
    public bool is_StmtExpr { get { return this is Expr_StmtExpr; } }
    public bool is_Block { get { return this is Expr_Block; } }
    public bool is_StructBuild { get { return this is Expr_StructBuild; } }
    public bool is_UnaryOp { get { return this is Expr_UnaryOp; } }
    public bool is_BinaryOp { get { return this is Expr_BinaryOp; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        var d = this;
        return ((Expr_RawExpr)d)._content;
      }
    }
    public RAST._IExpr dtor_matchee {
      get {
        var d = this;
        return ((Expr_Match)d)._matchee;
      }
    }
    public Dafny.ISequence<RAST._IMatchCase> dtor_cases {
      get {
        var d = this;
        return ((Expr_Match)d)._cases;
      }
    }
    public RAST._IExpr dtor_stmt {
      get {
        var d = this;
        return ((Expr_StmtExpr)d)._stmt;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        var d = this;
        return ((Expr_StmtExpr)d)._rhs;
      }
    }
    public RAST._IExpr dtor_underlying {
      get {
        var d = this;
        if (d is Expr_Block) { return ((Expr_Block)d)._underlying; }
        return ((Expr_UnaryOp)d)._underlying;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        return ((Expr_StructBuild)d)._name;
      }
    }
    public Dafny.ISequence<RAST._IAssignIdentifier> dtor_assignments {
      get {
        var d = this;
        return ((Expr_StructBuild)d)._assignments;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_op1 {
      get {
        var d = this;
        return ((Expr_UnaryOp)d)._op1;
      }
    }
    public DAST.Format._IUnOpFormat dtor_format {
      get {
        var d = this;
        return ((Expr_UnaryOp)d)._format;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_op2 {
      get {
        var d = this;
        return ((Expr_BinaryOp)d)._op2;
      }
    }
    public RAST._IExpr dtor_left {
      get {
        var d = this;
        return ((Expr_BinaryOp)d)._left;
      }
    }
    public RAST._IExpr dtor_right {
      get {
        var d = this;
        return ((Expr_BinaryOp)d)._right;
      }
    }
    public DAST.Format._IBinOpFormat dtor_format2 {
      get {
        var d = this;
        return ((Expr_BinaryOp)d)._format2;
      }
    }
    public abstract _IExpr DowncastClone();
    public BigInteger Height() {
      RAST._IExpr _source26 = this;
      if (_source26.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _832___mcc_h0 = _source26.dtor_content;
        return BigInteger.One;
      } else if (_source26.is_Match) {
        RAST._IExpr _833___mcc_h2 = _source26.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _834___mcc_h3 = _source26.dtor_cases;
        Dafny.ISequence<RAST._IMatchCase> _835_cases = _834___mcc_h3;
        RAST._IExpr _836_matchee = _833___mcc_h2;
        return (BigInteger.One) + (RAST.__default.max((_836_matchee).Height(), RAST.__default.SeqToHeight<RAST._IMatchCase>(_835_cases, ((System.Func<RAST._IMatchCase, BigInteger>)((_837_oneCase) => {
          return (_837_oneCase).Height();
        })))));
      } else if (_source26.is_StmtExpr) {
        RAST._IExpr _838___mcc_h6 = _source26.dtor_stmt;
        RAST._IExpr _839___mcc_h7 = _source26.dtor_rhs;
        RAST._IExpr _840_rhs = _839___mcc_h7;
        RAST._IExpr _841_stmt = _838___mcc_h6;
        return (BigInteger.One) + (RAST.__default.max((_841_stmt).Height(), (_840_rhs).Height()));
      } else if (_source26.is_Block) {
        RAST._IExpr _842___mcc_h10 = _source26.dtor_underlying;
        RAST._IExpr _843_underlying = _842___mcc_h10;
        return (BigInteger.One) + ((_843_underlying).Height());
      } else if (_source26.is_StructBuild) {
        Dafny.ISequence<Dafny.Rune> _844___mcc_h12 = _source26.dtor_name;
        Dafny.ISequence<RAST._IAssignIdentifier> _845___mcc_h13 = _source26.dtor_assignments;
        Dafny.ISequence<RAST._IAssignIdentifier> _846_assignments = _845___mcc_h13;
        Dafny.ISequence<Dafny.Rune> _847_name = _844___mcc_h12;
        return (BigInteger.One) + (RAST.__default.SeqToHeight<RAST._IAssignIdentifier>(_846_assignments, ((System.Func<RAST._IAssignIdentifier, BigInteger>)((_848_assignment) => {
          return (_848_assignment).Height();
        }))));
      } else if (_source26.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _849___mcc_h16 = _source26.dtor_op1;
        RAST._IExpr _850___mcc_h17 = _source26.dtor_underlying;
        DAST.Format._IUnOpFormat _851___mcc_h18 = _source26.dtor_format;
        RAST._IExpr _852_underlying = _850___mcc_h17;
        return (BigInteger.One) + ((_852_underlying).Height());
      } else {
        Dafny.ISequence<Dafny.Rune> _853___mcc_h22 = _source26.dtor_op2;
        RAST._IExpr _854___mcc_h23 = _source26.dtor_left;
        RAST._IExpr _855___mcc_h24 = _source26.dtor_right;
        DAST.Format._IBinOpFormat _856___mcc_h25 = _source26.dtor_format2;
        DAST.Format._IBinOpFormat _857_format = _856___mcc_h25;
        RAST._IExpr _858_right = _855___mcc_h24;
        RAST._IExpr _859_left = _854___mcc_h23;
        Dafny.ISequence<Dafny.Rune> _860_op = _853___mcc_h22;
        return (BigInteger.One) + (RAST.__default.max((_859_left).Height(), (_858_right).Height()));
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      RAST._IExpr _source27 = this;
      if (_source27.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _861___mcc_h0 = _source27.dtor_content;
        return RAST.__default.AddIndent((this).dtor_content, ind);
      } else if (_source27.is_Match) {
        RAST._IExpr _862___mcc_h2 = _source27.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _863___mcc_h3 = _source27.dtor_cases;
        Dafny.ISequence<RAST._IMatchCase> _864_cases = _863___mcc_h3;
        RAST._IExpr _865_matchee = _862___mcc_h2;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match "), (_865_matchee)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IMatchCase>(_864_cases, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IMatchCase, Dafny.ISequence<Dafny.Rune>>>>((_866_ind) => ((System.Func<RAST._IMatchCase, Dafny.ISequence<Dafny.Rune>>)((_867_c) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _866_ind), RAST.__default.IND), (_867_c)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_866_ind, RAST.__default.IND)));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source27.is_StmtExpr) {
        RAST._IExpr _868___mcc_h6 = _source27.dtor_stmt;
        RAST._IExpr _869___mcc_h7 = _source27.dtor_rhs;
        RAST._IExpr _870_rhs = _869___mcc_h7;
        RAST._IExpr _871_stmt = _868___mcc_h6;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_871_stmt)._ToString(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), ind), (_870_rhs)._ToString(ind));
      } else if (_source27.is_Block) {
        RAST._IExpr _872___mcc_h10 = _source27.dtor_underlying;
        RAST._IExpr _873_underlying = _872___mcc_h10;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n"), ind), RAST.__default.IND), (_873_underlying)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source27.is_StructBuild) {
        Dafny.ISequence<Dafny.Rune> _874___mcc_h12 = _source27.dtor_name;
        Dafny.ISequence<RAST._IAssignIdentifier> _875___mcc_h13 = _source27.dtor_assignments;
        Dafny.ISequence<RAST._IAssignIdentifier> _876_assignments = _875___mcc_h13;
        Dafny.ISequence<Dafny.Rune> _877_name = _874___mcc_h12;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_877_name, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IAssignIdentifier>(_876_assignments, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IAssignIdentifier, Dafny.ISequence<Dafny.Rune>>>>((_878_ind) => ((System.Func<RAST._IAssignIdentifier, Dafny.ISequence<Dafny.Rune>>)((_879_assignment) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _878_ind), RAST.__default.IND), (_879_assignment)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_878_ind, RAST.__default.IND)));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), (((new BigInteger((_876_assignments).Count)).Sign == 1) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source27.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _880___mcc_h16 = _source27.dtor_op1;
        RAST._IExpr _881___mcc_h17 = _source27.dtor_underlying;
        DAST.Format._IUnOpFormat _882___mcc_h18 = _source27.dtor_format;
        if (object.Equals(_880___mcc_h16, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"))) {
          RAST._IExpr _source28 = _881___mcc_h17;
          if (_source28.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _883___mcc_h22 = _source28.dtor_content;
            DAST.Format._IUnOpFormat _884_format = _882___mcc_h18;
            RAST._IExpr _885_underlying = _881___mcc_h17;
            Dafny.ISequence<Dafny.Rune> _886_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_886_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_885_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          } else if (_source28.is_Match) {
            RAST._IExpr _887___mcc_h25 = _source28.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _888___mcc_h26 = _source28.dtor_cases;
            DAST.Format._IUnOpFormat _889_format = _882___mcc_h18;
            RAST._IExpr _890_underlying = _881___mcc_h17;
            Dafny.ISequence<Dafny.Rune> _891_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_891_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_890_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          } else if (_source28.is_StmtExpr) {
            RAST._IExpr _892___mcc_h31 = _source28.dtor_stmt;
            RAST._IExpr _893___mcc_h32 = _source28.dtor_rhs;
            DAST.Format._IUnOpFormat _894_format = _882___mcc_h18;
            RAST._IExpr _895_underlying = _881___mcc_h17;
            Dafny.ISequence<Dafny.Rune> _896_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_896_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_895_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          } else if (_source28.is_Block) {
            RAST._IExpr _897___mcc_h37 = _source28.dtor_underlying;
            DAST.Format._IUnOpFormat _898_format = _882___mcc_h18;
            RAST._IExpr _899_underlying = _881___mcc_h17;
            Dafny.ISequence<Dafny.Rune> _900_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_900_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_899_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          } else if (_source28.is_StructBuild) {
            Dafny.ISequence<Dafny.Rune> _901___mcc_h40 = _source28.dtor_name;
            Dafny.ISequence<RAST._IAssignIdentifier> _902___mcc_h41 = _source28.dtor_assignments;
            DAST.Format._IUnOpFormat _903_format = _882___mcc_h18;
            RAST._IExpr _904_underlying = _881___mcc_h17;
            Dafny.ISequence<Dafny.Rune> _905_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_905_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_904_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          } else if (_source28.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _906___mcc_h46 = _source28.dtor_op1;
            RAST._IExpr _907___mcc_h47 = _source28.dtor_underlying;
            DAST.Format._IUnOpFormat _908___mcc_h48 = _source28.dtor_format;
            DAST.Format._IUnOpFormat _909_format = _882___mcc_h18;
            RAST._IExpr _910_underlying = _881___mcc_h17;
            Dafny.ISequence<Dafny.Rune> _911_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_911_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_910_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          } else {
            Dafny.ISequence<Dafny.Rune> _912___mcc_h55 = _source28.dtor_op2;
            RAST._IExpr _913___mcc_h56 = _source28.dtor_left;
            RAST._IExpr _914___mcc_h57 = _source28.dtor_right;
            DAST.Format._IBinOpFormat _915___mcc_h58 = _source28.dtor_format2;
            if (object.Equals(_912___mcc_h55, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="))) {
              DAST.Format._IUnOpFormat _source29 = _882___mcc_h18;
              if (_source29.is_NoFormat) {
                DAST.Format._IUnOpFormat _916_format = _882___mcc_h18;
                RAST._IExpr _917_underlying = _881___mcc_h17;
                Dafny.ISequence<Dafny.Rune> _918_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
                return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_918_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_917_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              } else {
                DAST.Format._IBinOpFormat _919_format = _915___mcc_h58;
                RAST._IExpr _920_right = _914___mcc_h57;
                RAST._IExpr _921_left = _913___mcc_h56;
                return (RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!="), _921_left, _920_right, DAST.Format.BinOpFormat.create_NoFormat()))._ToString(ind);
              }
            } else if (object.Equals(_912___mcc_h55, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"))) {
              DAST.Format._IBinOpFormat _source30 = _915___mcc_h58;
              if (_source30.is_NoFormat) {
                DAST.Format._IUnOpFormat _source31 = _882___mcc_h18;
                if (_source31.is_NoFormat) {
                  DAST.Format._IUnOpFormat _922_format = _882___mcc_h18;
                  RAST._IExpr _923_underlying = _881___mcc_h17;
                  Dafny.ISequence<Dafny.Rune> _924_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
                  return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_924_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_923_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                } else {
                  RAST._IExpr _925_right = _914___mcc_h57;
                  RAST._IExpr _926_left = _913___mcc_h56;
                  return (RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">="), _926_left, _925_right, DAST.Format.BinOpFormat.create_NoFormat()))._ToString(ind);
                }
              } else if (_source30.is_ImpliesFormat) {
                DAST.Format._IUnOpFormat _927_format = _882___mcc_h18;
                RAST._IExpr _928_underlying = _881___mcc_h17;
                Dafny.ISequence<Dafny.Rune> _929_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
                return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_929_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_928_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              } else if (_source30.is_Equivalence) {
                DAST.Format._IUnOpFormat _930_format = _882___mcc_h18;
                RAST._IExpr _931_underlying = _881___mcc_h17;
                Dafny.ISequence<Dafny.Rune> _932_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
                return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_932_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_931_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              } else {
                DAST.Format._IUnOpFormat _source32 = _882___mcc_h18;
                if (_source32.is_NoFormat) {
                  DAST.Format._IUnOpFormat _933_format = _882___mcc_h18;
                  RAST._IExpr _934_underlying = _881___mcc_h17;
                  Dafny.ISequence<Dafny.Rune> _935_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
                  return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_935_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_934_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                } else {
                  RAST._IExpr _936_right = _914___mcc_h57;
                  RAST._IExpr _937_left = _913___mcc_h56;
                  return (RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _936_right, _937_left, DAST.Format.BinOpFormat.create_NoFormat()))._ToString(ind);
                }
              }
            } else {
              DAST.Format._IUnOpFormat _938_format = _882___mcc_h18;
              RAST._IExpr _939_underlying = _881___mcc_h17;
              Dafny.ISequence<Dafny.Rune> _940_op = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!");
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_940_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_939_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          }
        } else {
          DAST.Format._IUnOpFormat _941_format = _882___mcc_h18;
          RAST._IExpr _942_underlying = _881___mcc_h17;
          Dafny.ISequence<Dafny.Rune> _943_op = _880___mcc_h16;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_943_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_942_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _944___mcc_h67 = _source27.dtor_op2;
        RAST._IExpr _945___mcc_h68 = _source27.dtor_left;
        RAST._IExpr _946___mcc_h69 = _source27.dtor_right;
        DAST.Format._IBinOpFormat _947___mcc_h70 = _source27.dtor_format2;
        DAST.Format._IBinOpFormat _948_format = _947___mcc_h70;
        RAST._IExpr _949_right = _946___mcc_h69;
        RAST._IExpr _950_left = _945___mcc_h68;
        Dafny.ISequence<Dafny.Rune> _951_op = _944___mcc_h67;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_950_left)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), (this).dtor_op2), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_949_right)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
    }
    public RAST._IExpr Then(RAST._IExpr rhs2) {
      return RAST.Expr.create_StmtExpr(this, rhs2);
    }
  }
  public class Expr_RawExpr : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Expr_RawExpr(Dafny.ISequence<Dafny.Rune> content) : base() {
      this._content = content;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_RawExpr(_content);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_RawExpr;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.RawExpr";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_Match : Expr {
    public readonly RAST._IExpr _matchee;
    public readonly Dafny.ISequence<RAST._IMatchCase> _cases;
    public Expr_Match(RAST._IExpr matchee, Dafny.ISequence<RAST._IMatchCase> cases) : base() {
      this._matchee = matchee;
      this._cases = cases;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Match(_matchee, _cases);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Match;
      return oth != null && object.Equals(this._matchee, oth._matchee) && object.Equals(this._cases, oth._cases);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._matchee));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cases));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Match";
      s += "(";
      s += Dafny.Helpers.ToString(this._matchee);
      s += ", ";
      s += Dafny.Helpers.ToString(this._cases);
      s += ")";
      return s;
    }
  }
  public class Expr_StmtExpr : Expr {
    public readonly RAST._IExpr _stmt;
    public readonly RAST._IExpr _rhs;
    public Expr_StmtExpr(RAST._IExpr stmt, RAST._IExpr rhs) : base() {
      this._stmt = stmt;
      this._rhs = rhs;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_StmtExpr(_stmt, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_StmtExpr;
      return oth != null && object.Equals(this._stmt, oth._stmt) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._stmt));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.StmtExpr";
      s += "(";
      s += Dafny.Helpers.ToString(this._stmt);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Expr_Block : Expr {
    public readonly RAST._IExpr _underlying;
    public Expr_Block(RAST._IExpr underlying) : base() {
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Block(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Block;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Block";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_StructBuild : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._IAssignIdentifier> _assignments;
    public Expr_StructBuild(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IAssignIdentifier> assignments) : base() {
      this._name = name;
      this._assignments = assignments;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_StructBuild(_name, _assignments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_StructBuild;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._assignments, oth._assignments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._assignments));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.StructBuild";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._assignments);
      s += ")";
      return s;
    }
  }
  public class Expr_UnaryOp : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _op1;
    public readonly RAST._IExpr _underlying;
    public readonly DAST.Format._IUnOpFormat _format;
    public Expr_UnaryOp(Dafny.ISequence<Dafny.Rune> op1, RAST._IExpr underlying, DAST.Format._IUnOpFormat format) : base() {
      this._op1 = op1;
      this._underlying = underlying;
      this._format = format;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_UnaryOp(_op1, _underlying, _format);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_UnaryOp;
      return oth != null && object.Equals(this._op1, oth._op1) && object.Equals(this._underlying, oth._underlying) && object.Equals(this._format, oth._format);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.UnaryOp";
      s += "(";
      s += this._op1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format);
      s += ")";
      return s;
    }
  }
  public class Expr_BinaryOp : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _op2;
    public readonly RAST._IExpr _left;
    public readonly RAST._IExpr _right;
    public readonly DAST.Format._IBinOpFormat _format2;
    public Expr_BinaryOp(Dafny.ISequence<Dafny.Rune> op2, RAST._IExpr left, RAST._IExpr right, DAST.Format._IBinOpFormat format2) : base() {
      this._op2 = op2;
      this._left = left;
      this._right = right;
      this._format2 = format2;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_BinaryOp(_op2, _left, _right, _format2);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_BinaryOp;
      return oth != null && object.Equals(this._op2, oth._op2) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right) && object.Equals(this._format2, oth._format2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op2));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format2));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.BinaryOp";
      s += "(";
      s += this._op2.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format2);
      s += ")";
      return s;
    }
  }

  public interface _IFn {
    bool is_Fn { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_typeParams { get; }
    Dafny.ISequence<RAST._IFormal> dtor_formals { get; }
    Std.Wrappers._IOption<RAST._IType> dtor_returnType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_body { get; }
    _IFn DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Fn : _IFn {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _typeParams;
    public readonly Dafny.ISequence<RAST._IFormal> _formals;
    public readonly Std.Wrappers._IOption<RAST._IType> _returnType;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Std.Wrappers._IOption<RAST._IExpr> _body;
    public Fn(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._formals = formals;
      this._returnType = returnType;
      this._where = @where;
      this._body = body;
    }
    public _IFn DowncastClone() {
      if (this is _IFn dt) { return dt; }
      return new Fn(_name, _typeParams, _formals, _returnType, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Fn;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._formals, oth._formals) && object.Equals(this._returnType, oth._returnType) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formals));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._returnType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Fn.Fn";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._formals);
      s += ", ";
      s += Dafny.Helpers.ToString(this._returnType);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly RAST._IFn theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<RAST._IFormal>.Empty, Std.Wrappers.Option<RAST._IType>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Std.Wrappers.Option<RAST._IExpr>.Default());
    public static RAST._IFn Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFn> _TYPE = new Dafny.TypeDescriptor<RAST._IFn>(RAST.Fn.Default());
    public static Dafny.TypeDescriptor<RAST._IFn> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFn create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      return new Fn(name, typeParams, formals, returnType, @where, body);
    }
    public static _IFn create_Fn(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      return create(name, typeParams, formals, returnType, @where, body);
    }
    public bool is_Fn { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<RAST._IFormal> dtor_formals {
      get {
        return this._formals;
      }
    }
    public Std.Wrappers._IOption<RAST._IType> dtor_returnType {
      get {
        return this._returnType;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        return this._where;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      var _pat_let_tv4 = ind;
      var _pat_let_tv5 = ind;
      var _pat_let_tv6 = ind;
      var _pat_let_tv7 = ind;
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn "), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), RAST.__default.SeqToString<RAST._IFormal>((this).dtor_formals, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>>>((_952_ind) => ((System.Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>)((_953_formal) => {
        return (_953_formal)._ToString(_952_ind);
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), ((System.Func<Std.Wrappers._IOption<RAST._IType>, Dafny.ISequence<Dafny.Rune>>)((_source33) => {
        if (_source33.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
        } else {
          RAST._IType _954___mcc_h0 = _source33.dtor_value;
          RAST._IType _955_t = _954___mcc_h0;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" -> "), (_955_t)._ToString(_pat_let_tv4));
        }
      }))((this).dtor_returnType)), ((((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)))), ((System.Func<Std.Wrappers._IOption<RAST._IExpr>, Dafny.ISequence<Dafny.Rune>>)((_source34) => {
        if (_source34.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";");
        } else {
          RAST._IExpr _956___mcc_h2 = _source34.dtor_value;
          RAST._IExpr _957_body = _956___mcc_h2;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"), _pat_let_tv5), RAST.__default.IND), (_957_body)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_pat_let_tv6, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _pat_let_tv7), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        }
      }))((this).dtor_body));
    }
  }
} // end of namespace RAST
namespace DCOMP {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> runtime(Dafny.ISequence<Dafny.Rune> suffix) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime"), suffix);
    }
    public static bool is__tuple__numeric(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(2))) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(BigInteger.One)))) && (((new BigInteger((i).Count)) == (new BigInteger(2))) || (((new BigInteger((i).Count)) == (new BigInteger(3))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(2))))));
    }
    public static bool has__special(Dafny.ISequence<Dafny.Rune> i) {
    TAIL_CALL_START:;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return false;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('#'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        if ((new BigInteger(2)) <= (new BigInteger((i).Count))) {
          if (((i).Select(BigInteger.One)) != (new Dafny.Rune('_'))) {
            return true;
          } else {
            Dafny.ISequence<Dafny.Rune> _in111 = (i).Drop(new BigInteger(2));
            i = _in111;
            goto TAIL_CALL_START;
          }
        } else {
          return true;
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _in112 = (i).Drop(BigInteger.One);
        i = _in112;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> idiomatic__rust(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _958___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_958___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        _958___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_958___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
        Dafny.ISequence<Dafny.Rune> _in113 = (i).Drop(new BigInteger(2));
        i = _in113;
        goto TAIL_CALL_START;
      } else {
        _958___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_958___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in114 = (i).Drop(BigInteger.One);
        i = _in114;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _959___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_959___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        _959___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_959___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_d"));
        Dafny.ISequence<Dafny.Rune> _in115 = (i).Drop(BigInteger.One);
        i = _in115;
        goto TAIL_CALL_START;
      } else {
        _959___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_959___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in116 = (i).Drop(BigInteger.One);
        i = _in116;
        goto TAIL_CALL_START;
      }
    }
    public static bool is__tuple__builder(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(9))) && (((i).Take(new BigInteger(8))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("___hMake")))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(8))))) && (((new BigInteger((i).Count)) == (new BigInteger(9))) || (((new BigInteger((i).Count)) == (new BigInteger(10))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(9))))));
    }
    public static Dafny.ISequence<Dafny.Rune> better__tuple__builder__name(Dafny.ISequence<Dafny.Rune> i) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_T"), (i).Drop(new BigInteger(8)));
    }
    public static bool is__dafny__generated__id(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)).Sign == 1) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && (!(DCOMP.__default.has__special((i).Drop(BigInteger.One))))) && (!((new BigInteger((i).Count)) >= (new BigInteger(2))) || (((i).Select(BigInteger.One)) != (new Dafny.Rune('T'))));
    }
    public static bool is__idiomatic__rust(Dafny.ISequence<Dafny.Rune> i) {
      return (((new BigInteger((i).Count)).Sign == 1) && (!(DCOMP.__default.has__special(i)))) && (!(DCOMP.__default.reserved__rust).Contains(i));
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      if (DCOMP.__default.is__tuple__numeric(i)) {
        return i;
      } else if (DCOMP.__default.is__tuple__builder(i)) {
        return DCOMP.__default.better__tuple__builder__name(i);
      } else if ((DCOMP.__default.reserved__rust).Contains(i)) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), i);
      } else if (DCOMP.__default.is__idiomatic__rust(i)) {
        return DCOMP.__default.idiomatic__rust(i);
      } else if (DCOMP.__default.is__dafny__generated__id(i)) {
        return i;
      } else {
        Dafny.ISequence<Dafny.Rune> _960_r = DCOMP.__default.replaceDots(i);
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#_"), _960_r);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> DafnyErasable {
      get {
        return DCOMP.__default.runtime(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::DafnyErasable"));
      }
    }
    public static Dafny.ISet<Dafny.ISequence<Dafny.Rune>> reserved__rust {
      get {
        return Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("async"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("await"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("const"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("crate"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("else"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("enum"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("loop"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mut"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ref"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("static"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("struct"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("trait"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("union"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsafe"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("use"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("where"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Keywords"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("The"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("abstract"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("become"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("box"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("do"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("final"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("macro"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("override"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("priv"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("try"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("typeof"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsized"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("virtual"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("yield"));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> IND {
      get {
        return RAST.__default.IND;
      }
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static RAST._IMod GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      RAST._IMod s = RAST.Mod.Default();
      Dafny.ISequence<RAST._IModDecl> _961_body;
      Dafny.ISequence<RAST._IModDecl> _out15;
      _out15 = DCOMP.COMP.GenModuleBody((mod).dtor_body, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
      _961_body = _out15;
      s = (((mod).dtor_isExtern) ? (RAST.Mod.create_ExternMod(DCOMP.__default.escapeIdent((mod).dtor_name))) : (RAST.Mod.create_Mod(DCOMP.__default.escapeIdent((mod).dtor_name), _961_body)));
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      s = Dafny.Sequence<RAST._IModDecl>.FromElements();
      BigInteger _962_i;
      _962_i = BigInteger.Zero;
      while ((_962_i) < (new BigInteger((body).Count))) {
        Dafny.ISequence<RAST._IModDecl> _963_generated = Dafny.Sequence<RAST._IModDecl>.Empty;
        DAST._IModuleItem _source35 = (body).Select(_962_i);
        if (_source35.is_Module) {
          DAST._IModule _964___mcc_h0 = _source35.dtor_Module_a0;
          DAST._IModule _965_m = _964___mcc_h0;
          RAST._IMod _966_mm;
          RAST._IMod _out16;
          _out16 = DCOMP.COMP.GenModule(_965_m, containingPath);
          _966_mm = _out16;
          _963_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ModDecl(_966_mm));
        } else if (_source35.is_Class) {
          DAST._IClass _967___mcc_h1 = _source35.dtor_Class_a0;
          DAST._IClass _968_c = _967___mcc_h1;
          Dafny.ISequence<RAST._IModDecl> _out17;
          _out17 = DCOMP.COMP.GenClass(_968_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_968_c).dtor_name)));
          _963_generated = _out17;
        } else if (_source35.is_Trait) {
          DAST._ITrait _969___mcc_h2 = _source35.dtor_Trait_a0;
          DAST._ITrait _970_t = _969___mcc_h2;
          Dafny.ISequence<Dafny.Rune> _971_tt;
          Dafny.ISequence<Dafny.Rune> _out18;
          _out18 = DCOMP.COMP.GenTrait(_970_t, containingPath);
          _971_tt = _out18;
          _963_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_RawDecl(_971_tt));
        } else if (_source35.is_Newtype) {
          DAST._INewtype _972___mcc_h3 = _source35.dtor_Newtype_a0;
          DAST._INewtype _973_n = _972___mcc_h3;
          Dafny.ISequence<RAST._IModDecl> _out19;
          _out19 = DCOMP.COMP.GenNewtype(_973_n);
          _963_generated = _out19;
        } else {
          DAST._IDatatype _974___mcc_h4 = _source35.dtor_Datatype_a0;
          DAST._IDatatype _975_d = _974___mcc_h4;
          Dafny.ISequence<RAST._IModDecl> _out20;
          _out20 = DCOMP.COMP.GenDatatype(_975_d);
          _963_generated = _out20;
        }
        s = Dafny.Sequence<RAST._IModDecl>.Concat(s, _963_generated);
        _962_i = (_962_i) + (BigInteger.One);
      }
      return s;
    }
    public static void GenTypeParameters(Dafny.ISequence<DAST._IType> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, out Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints, out Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> constrainedEraseParams, out Dafny.ISequence<Dafny.Rune> unerasedParams, out Dafny.ISequence<Dafny.Rune> erasedParams) {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty;
      constrainedTypeParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedEraseParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty;
      unerasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      erasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      constrainedTypeParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedEraseParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _976_tpI;
      _976_tpI = BigInteger.Zero;
      if ((new BigInteger((@params).Count)).Sign == 1) {
        whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where ");
        unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_976_tpI) < (new BigInteger((@params).Count))) {
          DAST._IType _977_tp;
          _977_tp = (@params).Select(_976_tpI);
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_977_tp));
          Dafny.ISequence<Dafny.Rune> _978_genTp;
          Dafny.ISequence<Dafny.Rune> _out21;
          _out21 = DCOMP.COMP.GenType(_977_tp, false, false);
          _978_genTp = _out21;
          typeParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(typeParams, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_978_genTp));
          Dafny.ISequence<Dafny.Rune> _979_baseConstraints;
          _979_baseConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<"), _978_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default"));
          constrainedTypeParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(constrainedTypeParams, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_978_genTp, _979_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static"))));
          whereConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(whereConstraints, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _978_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          constrainedEraseParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(constrainedEraseParams, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_978_genTp, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _978_genTp), _979_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + ::dafny_runtime::DafnyUnerasable<")), _978_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased> + 'static"))));
          unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, _978_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, _978_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _976_tpI = (_976_tpI) + (BigInteger.One);
        }
        unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
    }
    public static Dafny.ISequence<RAST._IModDecl> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _980_typeParamsSet;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _981_sTypeParams;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _982_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _983_whereConstraints;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _984_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _985_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _986_erasedParams;
      Dafny.ISet<DAST._IType> _out22;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out23;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out24;
      Dafny.ISequence<Dafny.Rune> _out25;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out26;
      Dafny.ISequence<Dafny.Rune> _out27;
      Dafny.ISequence<Dafny.Rune> _out28;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out22, out _out23, out _out24, out _out25, out _out26, out _out27, out _out28);
      _980_typeParamsSet = _out22;
      _981_sTypeParams = _out23;
      _982_sConstrainedTypeParams = _out24;
      _983_whereConstraints = _out25;
      _984_constrainedEraseParams = _out26;
      _985_unerasedParams = _out27;
      _986_erasedParams = _out28;
      Dafny.ISequence<Dafny.Rune> _987_constrainedTypeParams;
      _987_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_982_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      Dafny.ISequence<RAST._IFormal> _988_fields;
      _988_fields = Dafny.Sequence<RAST._IFormal>.FromElements();
      Dafny.ISequence<RAST._IAssignIdentifier> _989_fieldInits;
      _989_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
      BigInteger _990_fieldI;
      _990_fieldI = BigInteger.Zero;
      while ((_990_fieldI) < (new BigInteger(((c).dtor_fields).Count))) {
        DAST._IField _991_field;
        _991_field = ((c).dtor_fields).Select(_990_fieldI);
        Dafny.ISequence<Dafny.Rune> _992_fieldType;
        Dafny.ISequence<Dafny.Rune> _out29;
        _out29 = DCOMP.COMP.GenType(((_991_field).dtor_formal).dtor_typ, false, false);
        _992_fieldType = _out29;
        _988_fields = Dafny.Sequence<RAST._IFormal>.Concat(_988_fields, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub "), DCOMP.__default.escapeIdent(((_991_field).dtor_formal).dtor_name)), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cell::RefCell<"), _992_fieldType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))))));
        Std.Wrappers._IOption<DAST._IExpression> _source36 = (_991_field).dtor_defaultValue;
        if (_source36.is_None) {
          {
            _989_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_989_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent(((_991_field).dtor_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cell::RefCell::new(::std::default::Default::default())")))));
          }
        } else {
          DAST._IExpression _993___mcc_h0 = _source36.dtor_value;
          DAST._IExpression _994_e = _993___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _995_eStr;
            bool _996___v5;
            bool _997___v6;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _998___v7;
            Dafny.ISequence<Dafny.Rune> _out30;
            bool _out31;
            bool _out32;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out33;
            DCOMP.COMP.GenExpr(_994_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out30, out _out31, out _out32, out _out33);
            _995_eStr = _out30;
            _996___v5 = _out31;
            _997___v6 = _out32;
            _998___v7 = _out33;
            _989_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_989_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent(((_991_field).dtor_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cell::RefCell::new("), _995_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))))));
          }
        }
        _990_fieldI = (_990_fieldI) + (BigInteger.One);
      }
      BigInteger _999_typeParamI;
      _999_typeParamI = BigInteger.Zero;
      while ((_999_typeParamI) < (new BigInteger(((c).dtor_typeParams).Count))) {
        Dafny.ISequence<Dafny.Rune> _1000_tpeGen;
        Dafny.ISequence<Dafny.Rune> _out34;
        _out34 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_999_typeParamI), false, false);
        _1000_tpeGen = _out34;
        _988_fields = Dafny.Sequence<RAST._IFormal>.Concat(_988_fields, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_999_typeParamI)), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData<"), _1000_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))))));
        _989_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_989_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_999_typeParamI)), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData")))));
        _999_typeParamI = (_999_typeParamI) + (BigInteger.One);
      }
      RAST._IStruct _1001_struct;
      _1001_struct = RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), DCOMP.__default.escapeIdent((c).dtor_name), _981_sTypeParams, RAST.Formals.create_NamedFormals(_988_fields));
      Dafny.ISequence<Dafny.Rune> _1002_typeParams;
      _1002_typeParams = RAST.TypeParam.ToStringMultiple(_981_sTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(_1001_struct));
      Dafny.ISequence<RAST._IImplMember> _1003_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> _1004_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out35;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> _out36;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(path)), _980_typeParamsSet, out _out35, out _out36);
      _1003_implBodyRaw = _out35;
      _1004_traitBodies = _out36;
      Dafny.ISequence<RAST._IImplMember> _1005_implBody;
      _1005_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PUB, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(DCOMP.__default.escapeIdent((c).dtor_name), _989_fieldInits))))), _1003_implBodyRaw);
      RAST._IImpl _1006_i;
      _1006_i = RAST.Impl.create_Impl(_982_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _1002_typeParams)), _983_whereConstraints, _1005_implBody);
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_1006_i)));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _1007_i;
        _1007_i = BigInteger.Zero;
        while ((_1007_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _1008_superClass;
          _1008_superClass = ((c).dtor_superClasses).Select(_1007_i);
          DAST._IType _source37 = _1008_superClass;
          if (_source37.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1009___mcc_h1 = _source37.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _1010___mcc_h2 = _source37.dtor_typeArgs;
            DAST._IResolvedType _1011___mcc_h3 = _source37.dtor_resolved;
            DAST._IResolvedType _source38 = _1011___mcc_h3;
            if (_source38.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1012___mcc_h7 = _source38.dtor_path;
            } else if (_source38.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1013___mcc_h9 = _source38.dtor_path;
              Dafny.ISequence<DAST._IType> _1014_typeArgs = _1010___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1015_traitPath = _1009___mcc_h1;
              {
                Dafny.ISequence<Dafny.Rune> _1016_pathStr;
                Dafny.ISequence<Dafny.Rune> _out37;
                _out37 = DCOMP.COMP.GenPath(_1015_traitPath);
                _1016_pathStr = _out37;
                Dafny.ISequence<Dafny.Rune> _1017_typeArgs;
                Dafny.ISequence<Dafny.Rune> _out38;
                _out38 = DCOMP.COMP.GenTypeArgs(_1014_typeArgs, false, false);
                _1017_typeArgs = _out38;
                Dafny.ISequence<RAST._IImplMember> _1018_body;
                _1018_body = Dafny.Sequence<RAST._IImplMember>.FromElements();
                if ((_1004_traitBodies).Contains(_1015_traitPath)) {
                  _1018_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(_1004_traitBodies, _1015_traitPath);
                }
                Dafny.ISequence<Dafny.Rune> _1019_genSelfPath;
                Dafny.ISequence<Dafny.Rune> _out39;
                _out39 = DCOMP.COMP.GenPath(path);
                _1019_genSelfPath = _out39;
                RAST._IModDecl _1020_x;
                _1020_x = RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_982_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(_1016_pathStr, _1017_typeArgs)), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<"), _1019_genSelfPath), _1002_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))), _983_whereConstraints, _1018_body));
                s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(_1020_x));
              }
            } else {
              DAST._IType _1021___mcc_h11 = _source38.dtor_Newtype_a0;
            }
          } else if (_source37.is_Nullable) {
            DAST._IType _1022___mcc_h13 = _source37.dtor_Nullable_a0;
          } else if (_source37.is_Tuple) {
            Dafny.ISequence<DAST._IType> _1023___mcc_h15 = _source37.dtor_Tuple_a0;
          } else if (_source37.is_Array) {
            DAST._IType _1024___mcc_h17 = _source37.dtor_element;
            BigInteger _1025___mcc_h18 = _source37.dtor_dims;
          } else if (_source37.is_Seq) {
            DAST._IType _1026___mcc_h21 = _source37.dtor_element;
          } else if (_source37.is_Set) {
            DAST._IType _1027___mcc_h23 = _source37.dtor_element;
          } else if (_source37.is_Multiset) {
            DAST._IType _1028___mcc_h25 = _source37.dtor_element;
          } else if (_source37.is_Map) {
            DAST._IType _1029___mcc_h27 = _source37.dtor_key;
            DAST._IType _1030___mcc_h28 = _source37.dtor_value;
          } else if (_source37.is_Arrow) {
            Dafny.ISequence<DAST._IType> _1031___mcc_h31 = _source37.dtor_args;
            DAST._IType _1032___mcc_h32 = _source37.dtor_result;
          } else if (_source37.is_Primitive) {
            DAST._IPrimitive _1033___mcc_h35 = _source37.dtor_Primitive_a0;
          } else if (_source37.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _1034___mcc_h37 = _source37.dtor_Passthrough_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _1035___mcc_h39 = _source37.dtor_TypeArg_a0;
          }
          _1007_i = (_1007_i) + (BigInteger.One);
        }
      }
      RAST._IImpl _1036_d;
      _1036_d = RAST.Impl.create_ImplFor(_982_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default")), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _1002_typeParams)), _983_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new()"))))))));
      Dafny.ISequence<RAST._IModDecl> _1037_defaultImpl;
      _1037_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_1036_d));
      RAST._IImpl _1038_p;
      _1038_p = RAST.Impl.create_ImplFor(_982_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint")), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _1002_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), ((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")"))))))));
      Dafny.ISequence<RAST._IModDecl> _1039_printImpl;
      _1039_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_1038_p));
      RAST._IImpl _1040_pp;
      _1040_pp = RAST.Impl.create_ImplFor(_981_sTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cmp::PartialEq")), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _1002_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("eq"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("other"), RAST.Type.create_Self())), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ptr::eq(self, other)")))))));
      Dafny.ISequence<RAST._IModDecl> _1041_ptrPartialEqImpl;
      _1041_ptrPartialEqImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_1040_pp));
      RAST._IModDecl _1042_ii;
      _1042_ii = RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_982_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable")), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _1002_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = "), DCOMP.__default.escapeIdent((c).dtor_name)), _986_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"))))));
      RAST._IModDecl _1043_u;
      _1043_u = RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_982_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable<"), DCOMP.__default.escapeIdent((c).dtor_name)), _985_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _1002_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements()));
      Dafny.ISequence<RAST._IModDecl> _1044_identEraseImpls;
      _1044_identEraseImpls = Dafny.Sequence<RAST._IModDecl>.FromElements(_1042_ii, _1043_u);
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(s, _1037_defaultImpl), _1039_printImpl), _1041_ptrPartialEqImpl), _1044_identEraseImpls);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _1045_typeParamsSet;
      _1045_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<Dafny.Rune> _1046_typeParams;
      _1046_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _1047_tpI;
      _1047_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        _1046_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_1047_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._IType _1048_tp;
          _1048_tp = ((t).dtor_typeParams).Select(_1047_tpI);
          _1045_typeParamsSet = Dafny.Set<DAST._IType>.Union(_1045_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_1048_tp));
          Dafny.ISequence<Dafny.Rune> _1049_genTp;
          Dafny.ISequence<Dafny.Rune> _out40;
          _out40 = DCOMP.COMP.GenType(_1048_tp, false, false);
          _1049_genTp = _out40;
          _1046_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1046_typeParams, _1049_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _1047_tpI = (_1047_tpI) + (BigInteger.One);
        }
        _1046_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(_1046_typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1050_fullPath;
      _1050_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<RAST._IImplMember> _1051_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> _1052___v10;
      Dafny.ISequence<RAST._IImplMember> _out41;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> _out42;
      DCOMP.COMP.GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_1050_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_1050_fullPath)), _1045_typeParamsSet, out _out41, out _out42);
      _1051_implBody = _out41;
      _1052___v10 = _out42;
      s = (RAST.ModDecl.create_TraitDecl(RAST.Trait.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((t).dtor_name), _1046_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), _1051_implBody)))._ToString(DCOMP.__default.IND);
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenNewtype(DAST._INewtype c) {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _1053_typeParamsSet;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1054_sTypeParams;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1055_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _1056_whereConstraints;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1057___v11;
      Dafny.ISequence<Dafny.Rune> _1058___v12;
      Dafny.ISequence<Dafny.Rune> _1059___v13;
      Dafny.ISet<DAST._IType> _out43;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out44;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out45;
      Dafny.ISequence<Dafny.Rune> _out46;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out47;
      Dafny.ISequence<Dafny.Rune> _out48;
      Dafny.ISequence<Dafny.Rune> _out49;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out43, out _out44, out _out45, out _out46, out _out47, out _out48, out _out49);
      _1053_typeParamsSet = _out43;
      _1054_sTypeParams = _out44;
      _1055_sConstrainedTypeParams = _out45;
      _1056_whereConstraints = _out46;
      _1057___v11 = _out47;
      _1058___v12 = _out48;
      _1059___v13 = _out49;
      Dafny.ISequence<Dafny.Rune> _1060_typeParams;
      _1060_typeParams = RAST.TypeParam.ToStringMultiple(_1054_sTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      Dafny.ISequence<Dafny.Rune> _1061_constrainedTypeParams;
      _1061_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_1055_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      Dafny.ISequence<Dafny.Rune> _1062_underlyingType;
      Dafny.ISequence<Dafny.Rune> _out50;
      _out50 = DCOMP.COMP.GenType((c).dtor_base, false, false);
      _1062_underlyingType = _out50;
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[repr(transparent)]")), DCOMP.__default.escapeIdent((c).dtor_name), _1054_sTypeParams, RAST.Formals.create_NamelessFormals(Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub "), _1062_underlyingType)))))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_1055_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable")), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _1060_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = "), _1062_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"))))))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_1055_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable<"), _1062_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _1060_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements()))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_1055_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable<"), DCOMP.__default.escapeIdent((c).dtor_name)), _1060_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _1060_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements()))));
      Dafny.ISequence<Dafny.Rune> _1063_fnBody;
      _1063_fnBody = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Std.Wrappers._IOption<DAST._IExpression> _source39 = (c).dtor_witnessExpr;
      if (_source39.is_None) {
        {
          _1063_fnBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1063_fnBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(::std::default::Default::default())"));
        }
      } else {
        DAST._IExpression _1064___mcc_h0 = _source39.dtor_value;
        DAST._IExpression _1065_e = _1064___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _1066_eStr;
          bool _1067___v14;
          bool _1068___v15;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1069___v16;
          Dafny.ISequence<Dafny.Rune> _out51;
          bool _out52;
          bool _out53;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out54;
          DCOMP.COMP.GenExpr(_1065_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out51, out _out52, out _out53, out _out54);
          _1066_eStr = _out51;
          _1067___v14 = _out52;
          _1068___v15 = _out53;
          _1069___v16 = _out54;
          _1063_fnBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1063_fnBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1066_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
        }
      }
      RAST._IImplMember _1070_body;
      _1070_body = RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(_1063_fnBody))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_1055_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default")), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _1060_typeParams)), _1056_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(_1070_body)))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_1055_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint")), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _1060_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in_seq"), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)"))))))))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_1055_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref")), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _1060_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = "), _1062_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"))), RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("deref"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&Self::Target"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0"))))))))));
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenDatatype(DAST._IDatatype c) {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _1071_typeParamsSet;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1072_sTypeParams;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1073_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _1074_whereConstraints;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1075_sConstrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _1076_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _1077_erasedParams;
      Dafny.ISet<DAST._IType> _out55;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out56;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out57;
      Dafny.ISequence<Dafny.Rune> _out58;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out59;
      Dafny.ISequence<Dafny.Rune> _out60;
      Dafny.ISequence<Dafny.Rune> _out61;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out55, out _out56, out _out57, out _out58, out _out59, out _out60, out _out61);
      _1071_typeParamsSet = _out55;
      _1072_sTypeParams = _out56;
      _1073_sConstrainedTypeParams = _out57;
      _1074_whereConstraints = _out58;
      _1075_sConstrainedEraseParams = _out59;
      _1076_unerasedParams = _out60;
      _1077_erasedParams = _out61;
      Dafny.ISequence<Dafny.Rune> _1078_typeParams;
      _1078_typeParams = RAST.TypeParam.ToStringMultiple(_1072_sTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.IND, DCOMP.__default.IND));
      Dafny.ISequence<Dafny.Rune> _1079_constrainedTypeParams;
      _1079_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_1073_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.IND, DCOMP.__default.IND));
      Dafny.ISequence<Dafny.Rune> _1080_constrainedEraseParams;
      _1080_constrainedEraseParams = RAST.TypeParam.ToStringMultiple(_1075_sConstrainedEraseParams, DCOMP.__default.IND);
      Dafny.ISequence<RAST._IEnumCase> _1081_ctors;
      _1081_ctors = Dafny.Sequence<RAST._IEnumCase>.FromElements();
      BigInteger _1082_i;
      _1082_i = BigInteger.Zero;
      while ((_1082_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _1083_ctor;
        _1083_ctor = ((c).dtor_ctors).Select(_1082_i);
        Dafny.ISequence<RAST._IFormal> _1084_ctorArgs;
        _1084_ctorArgs = Dafny.Sequence<RAST._IFormal>.FromElements();
        BigInteger _1085_j;
        _1085_j = BigInteger.Zero;
        while ((_1085_j) < (new BigInteger(((_1083_ctor).dtor_args).Count))) {
          DAST._IFormal _1086_formal;
          _1086_formal = ((_1083_ctor).dtor_args).Select(_1085_j);
          Dafny.ISequence<Dafny.Rune> _1087_formalType;
          Dafny.ISequence<Dafny.Rune> _out62;
          _out62 = DCOMP.COMP.GenType((_1086_formal).dtor_typ, false, false);
          _1087_formalType = _out62;
          if ((c).dtor_isCo) {
            _1084_ctorArgs = Dafny.Sequence<RAST._IFormal>.Concat(_1084_ctorArgs, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_1086_formal).dtor_name), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::LazyFieldWrapper<"), _1087_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))))));
          } else {
            _1084_ctorArgs = Dafny.Sequence<RAST._IFormal>.Concat(_1084_ctorArgs, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_1086_formal).dtor_name), RAST.Type.create_RawType(_1087_formalType))));
          }
          _1085_j = (_1085_j) + (BigInteger.One);
        }
        _1081_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_1081_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(DCOMP.__default.escapeIdent((_1083_ctor).dtor_name), RAST.Formals.create_NamedFormals(_1084_ctorArgs))));
        _1082_i = (_1082_i) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1088_selfPath;
      _1088_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<RAST._IImplMember> _1089_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> _1090_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out63;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> _out64;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(_1088_selfPath)), _1071_typeParamsSet, out _out63, out _out64);
      _1089_implBodyRaw = _out63;
      _1090_traitBodies = _out64;
      Dafny.ISequence<RAST._IImplMember> _1091_implBody;
      _1091_implBody = _1089_implBodyRaw;
      _1082_i = BigInteger.Zero;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1092_emittedFields;
      _1092_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      while ((_1082_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _1093_ctor;
        _1093_ctor = ((c).dtor_ctors).Select(_1082_i);
        BigInteger _1094_j;
        _1094_j = BigInteger.Zero;
        while ((_1094_j) < (new BigInteger(((_1093_ctor).dtor_args).Count))) {
          DAST._IFormal _1095_formal;
          _1095_formal = ((_1093_ctor).dtor_args).Select(_1094_j);
          if (!((_1092_emittedFields).Contains((_1095_formal).dtor_name))) {
            _1092_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_1092_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_1095_formal).dtor_name));
            Dafny.ISequence<Dafny.Rune> _1096_formalType;
            Dafny.ISequence<Dafny.Rune> _out65;
            _out65 = DCOMP.COMP.GenType((_1095_formal).dtor_typ, false, false);
            _1096_formalType = _out65;
            Dafny.ISequence<RAST._IMatchCase> _1097_cases;
            _1097_cases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
            BigInteger _1098_k;
            _1098_k = BigInteger.Zero;
            while ((_1098_k) < (new BigInteger(((c).dtor_ctors).Count))) {
              DAST._IDatatypeCtor _1099_ctor2;
              _1099_ctor2 = ((c).dtor_ctors).Select(_1098_k);
              Dafny.ISequence<Dafny.Rune> _1100_pattern;
              _1100_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_1099_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              Dafny.ISequence<Dafny.Rune> _1101_rhs = Dafny.Sequence<Dafny.Rune>.Empty;
              BigInteger _1102_l;
              _1102_l = BigInteger.Zero;
              bool _1103_hasMatchingField;
              _1103_hasMatchingField = false;
              while ((_1102_l) < (new BigInteger(((_1099_ctor2).dtor_args).Count))) {
                DAST._IFormal _1104_formal2;
                _1104_formal2 = ((_1099_ctor2).dtor_args).Select(_1102_l);
                if (((_1095_formal).dtor_name).Equals((_1104_formal2).dtor_name)) {
                  _1103_hasMatchingField = true;
                }
                _1100_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1100_pattern, DCOMP.__default.escapeIdent((_1104_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                _1102_l = (_1102_l) + (BigInteger.One);
              }
              _1100_pattern = Dafny.Sequence<Dafny.Rune>.Concat(_1100_pattern, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
              if (_1103_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _1101_rhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&"), DCOMP.__default.escapeIdent((_1095_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0)"));
                } else {
                  _1101_rhs = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_1095_formal).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              } else {
                _1101_rhs = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"field does not exist on this variant\")");
              }
              RAST._IMatchCase _1105_ctorMatch;
              _1105_ctorMatch = RAST.MatchCase.create(_1100_pattern, RAST.Expr.create_RawExpr(_1101_rhs));
              _1097_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_1097_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(_1105_ctorMatch));
              _1098_k = (_1098_k) + (BigInteger.One);
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _1097_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_1097_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!()")))));
            }
            RAST._IExpr _1106_methodBody;
            _1106_methodBody = RAST.Expr.create_Match(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")), _1097_cases);
            _1091_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(_1091_implBody, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PUB, RAST.Fn.create(DCOMP.__default.escapeIdent((_1095_formal).dtor_name), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _1096_formalType))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_1106_methodBody)))));
          }
          _1094_j = (_1094_j) + (BigInteger.One);
        }
        _1082_i = (_1082_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        BigInteger _1107_typeI;
        _1107_typeI = BigInteger.Zero;
        Dafny.ISequence<RAST._IType> _1108_types;
        _1108_types = Dafny.Sequence<RAST._IType>.FromElements();
        while ((_1107_typeI) < (new BigInteger(((c).dtor_typeParams).Count))) {
          Dafny.ISequence<Dafny.Rune> _1109_genTp;
          Dafny.ISequence<Dafny.Rune> _out66;
          _out66 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_1107_typeI), false, false);
          _1109_genTp = _out66;
          _1108_types = Dafny.Sequence<RAST._IType>.Concat(_1108_types, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData::<"), _1109_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")))));
          _1107_typeI = (_1107_typeI) + (BigInteger.One);
        }
        _1081_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_1081_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant"), RAST.Formals.create_NamelessFormals(_1108_types))));
      }
      Dafny.ISequence<RAST._IModDecl> _1110_enumBody;
      _1110_enumBody = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_EnumDecl(RAST.Enum.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq)]")), DCOMP.__default.escapeIdent((c).dtor_name), _1072_sTypeParams, _1081_ctors)), RAST.ModDecl.create_ImplDecl(RAST.Impl.create_Impl(_1073_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _1078_typeParams)), _1074_whereConstraints, _1091_implBody)));
      Dafny.ISequence<RAST._IModDecl> _1111_identEraseImpls;
      _1111_identEraseImpls = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_1073_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable")), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _1078_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = "), DCOMP.__default.escapeIdent((c).dtor_name)), _1077_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";")))))), RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_1075_sConstrainedEraseParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable<"), DCOMP.__default.escapeIdent((c).dtor_name)), _1076_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _1078_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements())));
      _1082_i = BigInteger.Zero;
      Dafny.ISequence<RAST._IMatchCase> _1112_printImplBodyCases;
      _1112_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
      while ((_1082_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _1113_ctor;
        _1113_ctor = ((c).dtor_ctors).Select(_1082_i);
        Dafny.ISequence<Dafny.Rune> _1114_ctorMatch;
        _1114_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_1113_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _1115_modulePrefix;
        _1115_modulePrefix = (((((c).dtor_enclosingModule)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(((c).dtor_enclosingModule), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        RAST._IExpr _1116_printRhs;
        _1116_printRhs = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), _1115_modulePrefix), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent((_1113_ctor).dtor_name)), (((_1113_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?")))));
        BigInteger _1117_j;
        _1117_j = BigInteger.Zero;
        while ((_1117_j) < (new BigInteger(((_1113_ctor).dtor_args).Count))) {
          DAST._IFormal _1118_formal;
          _1118_formal = ((_1113_ctor).dtor_args).Select(_1117_j);
          _1114_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1114_ctorMatch, DCOMP.__default.escapeIdent((_1118_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          if ((_1117_j).Sign == 1) {
            _1116_printRhs = (_1116_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \", \")?")));
          }
          _1116_printRhs = (_1116_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print("), DCOMP.__default.escapeIdent((_1118_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", _formatter, false)?"))));
          _1117_j = (_1117_j) + (BigInteger.One);
        }
        _1114_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_1114_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_1113_ctor).dtor_hasAnyArgs) {
          _1116_printRhs = (_1116_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \")\")?")));
        }
        _1116_printRhs = (_1116_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Ok(())")));
        _1112_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_1112_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _1114_ctorMatch), RAST.Expr.create_Block(_1116_printRhs))));
        _1082_i = (_1082_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _1112_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_1112_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{panic!()}")))));
      }
      RAST._IExpr _1119_printImplBody;
      _1119_printImplBody = RAST.Expr.create_Match(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")), _1112_printImplBodyCases);
      Dafny.ISequence<RAST._IModDecl> _1120_printImpl;
      _1120_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_1073_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint")), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _1078_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_1119_printImplBody)))))));
      Dafny.ISequence<RAST._IModDecl> _1121_defaultImpl;
      _1121_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements();
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        _1082_i = BigInteger.Zero;
        Dafny.ISequence<Dafny.Rune> _1122_structName;
        _1122_structName = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name));
        Dafny.ISequence<RAST._IAssignIdentifier> _1123_structAssignments;
        _1123_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
        while ((_1082_i) < (new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count))) {
          DAST._IFormal _1124_formal;
          _1124_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_1082_i);
          _1123_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_1123_structAssignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent((_1124_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default::default()")))));
          _1082_i = (_1082_i) + (BigInteger.One);
        }
        _1121_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_1073_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default")), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _1078_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(_1122_structName, _1123_structAssignments))))))));
      }
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(_1110_enumBody, _1111_identEraseImpls), _1120_printImpl), _1121_defaultImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      if ((new BigInteger((p).Count)).Sign == 0) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
        return s;
      } else {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super::");
        BigInteger _1125_i;
        _1125_i = BigInteger.Zero;
        while ((_1125_i) < (new BigInteger((p).Count))) {
          if ((_1125_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(((p).Select(_1125_i))));
          _1125_i = (_1125_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((args).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        BigInteger _1126_i;
        _1126_i = BigInteger.Zero;
        while ((_1126_i) < (new BigInteger((args).Count))) {
          if ((_1126_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _1127_genTp;
          Dafny.ISequence<Dafny.Rune> _out67;
          _out67 = DCOMP.COMP.GenType((args).Select(_1126_i), inBinding, inFn);
          _1127_genTp = _out67;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1127_genTp);
          _1126_i = (_1126_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenType(DAST._IType c, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IType _source40 = c;
      if (_source40.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1128___mcc_h0 = _source40.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _1129___mcc_h1 = _source40.dtor_typeArgs;
        DAST._IResolvedType _1130___mcc_h2 = _source40.dtor_resolved;
        DAST._IResolvedType _1131_resolved = _1130___mcc_h2;
        Dafny.ISequence<DAST._IType> _1132_args = _1129___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1133_p = _1128___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _out68;
          _out68 = DCOMP.COMP.GenPath(_1133_p);
          s = _out68;
          Dafny.ISequence<Dafny.Rune> _1134_typeArgs;
          Dafny.ISequence<Dafny.Rune> _out69;
          _out69 = DCOMP.COMP.GenTypeArgs(_1132_args, inBinding, inFn);
          _1134_typeArgs = _out69;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1134_typeArgs);
          DAST._IResolvedType _source41 = _1131_resolved;
          if (_source41.is_Datatype) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1135___mcc_h18 = _source41.dtor_path;
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
            }
          } else if (_source41.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1136___mcc_h20 = _source41.dtor_path;
            {
              if ((_1133_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
                s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<dyn ::std::any::Any>");
              } else {
                if (inBinding) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              }
            }
          } else {
            DAST._IType _1137___mcc_h22 = _source41.dtor_Newtype_a0;
            DAST._IResolvedType _1138_Primitive = _1131_resolved;
          }
        }
      } else if (_source40.is_Nullable) {
        DAST._IType _1139___mcc_h3 = _source40.dtor_Nullable_a0;
        DAST._IType _1140_inner = _1139___mcc_h3;
        {
          Dafny.ISequence<Dafny.Rune> _1141_innerStr;
          Dafny.ISequence<Dafny.Rune> _out70;
          _out70 = DCOMP.COMP.GenType(_1140_inner, inBinding, inFn);
          _1141_innerStr = _out70;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option<"), _1141_innerStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source40.is_Tuple) {
        Dafny.ISequence<DAST._IType> _1142___mcc_h4 = _source40.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IType> _1143_types = _1142___mcc_h4;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          BigInteger _1144_i;
          _1144_i = BigInteger.Zero;
          while ((_1144_i) < (new BigInteger((_1143_types).Count))) {
            if ((_1144_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _1145_generated;
            Dafny.ISequence<Dafny.Rune> _out71;
            _out71 = DCOMP.COMP.GenType((_1143_types).Select(_1144_i), inBinding, inFn);
            _1145_generated = _out71;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _1145_generated), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            _1144_i = (_1144_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
        }
      } else if (_source40.is_Array) {
        DAST._IType _1146___mcc_h5 = _source40.dtor_element;
        BigInteger _1147___mcc_h6 = _source40.dtor_dims;
        BigInteger _1148_dims = _1147___mcc_h6;
        DAST._IType _1149_element = _1146___mcc_h5;
        {
          Dafny.ISequence<Dafny.Rune> _1150_elemStr;
          Dafny.ISequence<Dafny.Rune> _out72;
          _out72 = DCOMP.COMP.GenType(_1149_element, inBinding, inFn);
          _1150_elemStr = _out72;
          s = _1150_elemStr;
          BigInteger _1151_i;
          _1151_i = BigInteger.Zero;
          while ((_1151_i) < (_1148_dims)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<::std::cell::RefCell<::std::vec::Vec<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>>"));
            _1151_i = (_1151_i) + (BigInteger.One);
          }
        }
      } else if (_source40.is_Seq) {
        DAST._IType _1152___mcc_h7 = _source40.dtor_element;
        DAST._IType _1153_element = _1152___mcc_h7;
        {
          Dafny.ISequence<Dafny.Rune> _1154_elemStr;
          Dafny.ISequence<Dafny.Rune> _out73;
          _out73 = DCOMP.COMP.GenType(_1153_element, inBinding, inFn);
          _1154_elemStr = _out73;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::vec::Vec<"), _1154_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source40.is_Set) {
        DAST._IType _1155___mcc_h8 = _source40.dtor_element;
        DAST._IType _1156_element = _1155___mcc_h8;
        {
          Dafny.ISequence<Dafny.Rune> _1157_elemStr;
          Dafny.ISequence<Dafny.Rune> _out74;
          _out74 = DCOMP.COMP.GenType(_1156_element, inBinding, inFn);
          _1157_elemStr = _out74;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashSet<"), _1157_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source40.is_Multiset) {
        DAST._IType _1158___mcc_h9 = _source40.dtor_element;
        DAST._IType _1159_element = _1158___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _1160_elemStr;
          Dafny.ISequence<Dafny.Rune> _out75;
          _out75 = DCOMP.COMP.GenType(_1159_element, inBinding, inFn);
          _1160_elemStr = _out75;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _1160_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", u64>"));
        }
      } else if (_source40.is_Map) {
        DAST._IType _1161___mcc_h10 = _source40.dtor_key;
        DAST._IType _1162___mcc_h11 = _source40.dtor_value;
        DAST._IType _1163_value = _1162___mcc_h11;
        DAST._IType _1164_key = _1161___mcc_h10;
        {
          Dafny.ISequence<Dafny.Rune> _1165_keyStr;
          Dafny.ISequence<Dafny.Rune> _out76;
          _out76 = DCOMP.COMP.GenType(_1164_key, inBinding, inFn);
          _1165_keyStr = _out76;
          Dafny.ISequence<Dafny.Rune> _1166_valueStr;
          Dafny.ISequence<Dafny.Rune> _out77;
          _out77 = DCOMP.COMP.GenType(_1163_value, inBinding, inFn);
          _1166_valueStr = _out77;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _1165_keyStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _1166_valueStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source40.is_Arrow) {
        Dafny.ISequence<DAST._IType> _1167___mcc_h12 = _source40.dtor_args;
        DAST._IType _1168___mcc_h13 = _source40.dtor_result;
        DAST._IType _1169_result = _1168___mcc_h13;
        Dafny.ISequence<DAST._IType> _1170_args = _1167___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper<::std::rc::Rc<dyn ::std::ops::Fn(");
          BigInteger _1171_i;
          _1171_i = BigInteger.Zero;
          while ((_1171_i) < (new BigInteger((_1170_args).Count))) {
            if ((_1171_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _1172_generated;
            Dafny.ISequence<Dafny.Rune> _out78;
            _out78 = DCOMP.COMP.GenType((_1170_args).Select(_1171_i), inBinding, true);
            _1172_generated = _out78;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _1172_generated);
            _1171_i = (_1171_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _1173_resultType;
          Dafny.ISequence<Dafny.Rune> _out79;
          _out79 = DCOMP.COMP.GenType(_1169_result, inBinding, (inFn) || (inBinding));
          _1173_resultType = _out79;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _1173_resultType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static>>"));
        }
      } else if (_source40.is_Primitive) {
        DAST._IPrimitive _1174___mcc_h14 = _source40.dtor_Primitive_a0;
        DAST._IPrimitive _1175_p = _1174___mcc_h14;
        {
          DAST._IPrimitive _source42 = _1175_p;
          if (_source42.is_Int) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt");
          } else if (_source42.is_Real) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational");
          } else if (_source42.is_String) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Vec<char>");
          } else if (_source42.is_Bool) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool");
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char");
          }
        }
      } else if (_source40.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _1176___mcc_h15 = _source40.dtor_Passthrough_a0;
        Dafny.ISequence<Dafny.Rune> _1177_v = _1176___mcc_h15;
        s = _1177_v;
      } else {
        Dafny.ISequence<Dafny.Rune> _1178___mcc_h16 = _source40.dtor_TypeArg_a0;
        Dafny.ISequence<Dafny.Rune> _source43 = _1178___mcc_h16;
        Dafny.ISequence<Dafny.Rune> _1179___mcc_h17 = _source43;
        Dafny.ISequence<Dafny.Rune> _1180_name = _1179___mcc_h17;
        s = DCOMP.__default.escapeIdent(_1180_name);
      }
      return s;
    }
    public static void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<RAST._IImplMember> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> traitBodies) {
      s = Dafny.Sequence<RAST._IImplMember>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Empty;
      s = Dafny.Sequence<RAST._IImplMember>.FromElements();
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements();
      BigInteger _1181_i;
      _1181_i = BigInteger.Zero;
      while ((_1181_i) < (new BigInteger((body).Count))) {
        DAST._IMethod _source44 = (body).Select(_1181_i);
        DAST._IMethod _1182___mcc_h0 = _source44;
        DAST._IMethod _1183_m = _1182___mcc_h0;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source45 = (_1183_m).dtor_overridingPath;
          if (_source45.is_None) {
            {
              RAST._IImplMember _1184_generated;
              RAST._IImplMember _out80;
              _out80 = DCOMP.COMP.GenMethod(_1183_m, forTrait, enclosingType, enclosingTypeParams);
              _1184_generated = _out80;
              s = Dafny.Sequence<RAST._IImplMember>.Concat(s, Dafny.Sequence<RAST._IImplMember>.FromElements(_1184_generated));
            }
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1185___mcc_h1 = _source45.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1186_p = _1185___mcc_h1;
            {
              Dafny.ISequence<RAST._IImplMember> _1187_existing;
              _1187_existing = Dafny.Sequence<RAST._IImplMember>.FromElements();
              if ((traitBodies).Contains(_1186_p)) {
                _1187_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(traitBodies, _1186_p);
              }
              RAST._IImplMember _1188_genMethod;
              RAST._IImplMember _out81;
              _out81 = DCOMP.COMP.GenMethod(_1183_m, true, enclosingType, enclosingTypeParams);
              _1188_genMethod = _out81;
              _1187_existing = Dafny.Sequence<RAST._IImplMember>.Concat(_1187_existing, Dafny.Sequence<RAST._IImplMember>.FromElements(_1188_genMethod));
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>(_1186_p, _1187_existing)));
            }
          }
        }
        _1181_i = (_1181_i) + (BigInteger.One);
      }
    }
    public static Dafny.ISequence<RAST._IFormal> GenParams(Dafny.ISequence<DAST._IFormal> @params) {
      Dafny.ISequence<RAST._IFormal> s = Dafny.Sequence<RAST._IFormal>.Empty;
      s = Dafny.Sequence<RAST._IFormal>.FromElements();
      BigInteger _1189_i;
      _1189_i = BigInteger.Zero;
      while ((_1189_i) < (new BigInteger((@params).Count))) {
        DAST._IFormal _1190_param;
        _1190_param = (@params).Select(_1189_i);
        Dafny.ISequence<Dafny.Rune> _1191_paramType;
        Dafny.ISequence<Dafny.Rune> _out82;
        _out82 = DCOMP.COMP.GenType((_1190_param).dtor_typ, false, false);
        _1191_paramType = _out82;
        s = Dafny.Sequence<RAST._IFormal>.Concat(s, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_1190_param).dtor_name), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" &"), _1191_paramType)))));
        _1189_i = (_1189_i) + (BigInteger.One);
      }
      return s;
    }
    public static RAST._IImplMember GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams) {
      RAST._IImplMember s = RAST.ImplMember.Default();
      Dafny.ISequence<RAST._IFormal> _1192_params;
      Dafny.ISequence<RAST._IFormal> _out83;
      _out83 = DCOMP.COMP.GenParams((m).dtor_params);
      _1192_params = _out83;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1193_paramNames;
      _1193_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _1194_paramI;
      _1194_paramI = BigInteger.Zero;
      while ((_1194_paramI) < (new BigInteger(((m).dtor_params).Count))) {
        _1193_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_1193_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((m).dtor_params).Select(_1194_paramI)).dtor_name));
        _1194_paramI = (_1194_paramI) + (BigInteger.One);
      }
      if (!((m).dtor_isStatic)) {
        if (forTrait) {
          _1192_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self), _1192_params);
        } else {
          Dafny.ISequence<Dafny.Rune> _1195_enclosingTypeString;
          Dafny.ISequence<Dafny.Rune> _out84;
          _out84 = DCOMP.COMP.GenType(enclosingType, false, false);
          _1195_enclosingTypeString = _out84;
          _1192_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _1195_enclosingTypeString)))), _1192_params);
        }
      }
      Dafny.ISequence<Dafny.Rune> _1196_retType;
      _1196_retType = (((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")));
      BigInteger _1197_typeI;
      _1197_typeI = BigInteger.Zero;
      while ((_1197_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        if ((_1197_typeI).Sign == 1) {
          _1196_retType = Dafny.Sequence<Dafny.Rune>.Concat(_1196_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        Dafny.ISequence<Dafny.Rune> _1198_typeString;
        Dafny.ISequence<Dafny.Rune> _out85;
        _out85 = DCOMP.COMP.GenType(((m).dtor_outTypes).Select(_1197_typeI), false, false);
        _1198_typeString = _out85;
        _1196_retType = Dafny.Sequence<Dafny.Rune>.Concat(_1196_retType, _1198_typeString);
        _1197_typeI = (_1197_typeI) + (BigInteger.One);
      }
      if ((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) {
        _1196_retType = Dafny.Sequence<Dafny.Rune>.Concat(_1196_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      byte _1199_visibility;
      _1199_visibility = RAST.__default.PUB;
      Dafny.ISequence<Dafny.Rune> _1200_fnName;
      _1200_fnName = DCOMP.__default.escapeIdent((m).dtor_name);
      Dafny.ISequence<DAST._IType> _1201_typeParamsFiltered;
      _1201_typeParamsFiltered = Dafny.Sequence<DAST._IType>.FromElements();
      BigInteger _1202_typeParamI;
      _1202_typeParamI = BigInteger.Zero;
      while ((_1202_typeParamI) < (new BigInteger(((m).dtor_typeParams).Count))) {
        DAST._IType _1203_typeParam;
        _1203_typeParam = ((m).dtor_typeParams).Select(_1202_typeParamI);
        if (!((enclosingTypeParams).Contains(_1203_typeParam))) {
          _1201_typeParamsFiltered = Dafny.Sequence<DAST._IType>.Concat(_1201_typeParamsFiltered, Dafny.Sequence<DAST._IType>.FromElements(_1203_typeParam));
        }
        _1202_typeParamI = (_1202_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _1204_whereClauses;
      _1204_whereClauses = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1205_typeParams;
      _1205_typeParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      if ((new BigInteger((_1201_typeParamsFiltered).Count)).Sign == 1) {
        _1204_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_1204_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where "));
        BigInteger _1206_i;
        _1206_i = BigInteger.Zero;
        while ((_1206_i) < (new BigInteger((_1201_typeParamsFiltered).Count))) {
          if ((_1206_i).Sign == 1) {
            _1204_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_1204_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _1207_typeString;
          Dafny.ISequence<Dafny.Rune> _out86;
          _out86 = DCOMP.COMP.GenType((_1201_typeParamsFiltered).Select(_1206_i), false, false);
          _1207_typeString = _out86;
          _1205_typeParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_1205_typeParams, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1207_typeString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<")), _1207_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default + 'static"))));
          _1204_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1204_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _1207_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq"));
          _1206_i = (_1206_i) + (BigInteger.One);
        }
      }
      Std.Wrappers._IOption<RAST._IExpr> _1208_fBody = Std.Wrappers.Option<RAST._IExpr>.Default();
      if ((m).dtor_hasBody) {
        Dafny.ISequence<Dafny.Rune> _1209_earlyReturn;
        _1209_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return;");
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source46 = (m).dtor_outVars;
        if (_source46.is_None) {
        } else {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1210___mcc_h0 = _source46.dtor_value;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1211_outVars = _1210___mcc_h0;
          {
            _1209_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return (");
            BigInteger _1212_outI;
            _1212_outI = BigInteger.Zero;
            while ((_1212_outI) < (new BigInteger((_1211_outVars).Count))) {
              if ((_1212_outI).Sign == 1) {
                _1209_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_1209_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _1213_outVar;
              _1213_outVar = (_1211_outVars).Select(_1212_outI);
              _1209_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_1209_earlyReturn, DCOMP.__default.escapeIdent((_1213_outVar)));
              _1212_outI = (_1212_outI) + (BigInteger.One);
            }
            _1209_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_1209_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
          }
        }
        Dafny.ISequence<Dafny.Rune> _1214_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1215___v19;
        Dafny.ISequence<Dafny.Rune> _out87;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out88;
        DCOMP.COMP.GenStmts((m).dtor_body, (((m).dtor_isStatic) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None()) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))), _1193_paramNames, true, _1209_earlyReturn, out _out87, out _out88);
        _1214_body = _out87;
        _1215___v19 = _out88;
        _1208_fBody = Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(_1214_body));
      } else {
        _1208_fBody = Std.Wrappers.Option<RAST._IExpr>.create_None();
      }
      s = RAST.ImplMember.create_FnDecl(_1199_visibility, RAST.Fn.create(_1200_fnName, _1205_typeParams, _1192_params, Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_RawType(_1196_retType)), _1204_whereClauses, _1208_fBody));
      return s;
    }
    public static void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1216_declarations;
      _1216_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _1217_i;
      _1217_i = BigInteger.Zero;
      while ((_1217_i) < (new BigInteger((stmts).Count))) {
        DAST._IStatement _1218_stmt;
        _1218_stmt = (stmts).Select(_1217_i);
        Dafny.ISequence<Dafny.Rune> _1219_stmtString;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1220_recIdents;
        Dafny.ISequence<Dafny.Rune> _out89;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out90;
        DCOMP.COMP.GenStmt(_1218_stmt, selfIdent, @params, (isLast) && ((_1217_i) == ((new BigInteger((stmts).Count)) - (BigInteger.One))), earlyReturn, out _out89, out _out90);
        _1219_stmtString = _out89;
        _1220_recIdents = _out90;
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_1220_recIdents, _1216_declarations));
        DAST._IStatement _source47 = _1218_stmt;
        if (_source47.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _1221___mcc_h0 = _source47.dtor_name;
          DAST._IType _1222___mcc_h1 = _source47.dtor_typ;
          Std.Wrappers._IOption<DAST._IExpression> _1223___mcc_h2 = _source47.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _1224_name = _1221___mcc_h0;
          {
            _1216_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_1216_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1224_name));
          }
        } else if (_source47.is_Assign) {
          DAST._IAssignLhs _1225___mcc_h6 = _source47.dtor_lhs;
          DAST._IExpression _1226___mcc_h7 = _source47.dtor_value;
        } else if (_source47.is_If) {
          DAST._IExpression _1227___mcc_h10 = _source47.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _1228___mcc_h11 = _source47.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _1229___mcc_h12 = _source47.dtor_els;
        } else if (_source47.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _1230___mcc_h16 = _source47.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _1231___mcc_h17 = _source47.dtor_body;
        } else if (_source47.is_While) {
          DAST._IExpression _1232___mcc_h20 = _source47.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _1233___mcc_h21 = _source47.dtor_body;
        } else if (_source47.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _1234___mcc_h24 = _source47.dtor_boundName;
          DAST._IType _1235___mcc_h25 = _source47.dtor_boundType;
          DAST._IExpression _1236___mcc_h26 = _source47.dtor_over;
          Dafny.ISequence<DAST._IStatement> _1237___mcc_h27 = _source47.dtor_body;
        } else if (_source47.is_Call) {
          DAST._IExpression _1238___mcc_h32 = _source47.dtor_on;
          Dafny.ISequence<Dafny.Rune> _1239___mcc_h33 = _source47.dtor_name;
          Dafny.ISequence<DAST._IType> _1240___mcc_h34 = _source47.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _1241___mcc_h35 = _source47.dtor_args;
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1242___mcc_h36 = _source47.dtor_outs;
        } else if (_source47.is_Return) {
          DAST._IExpression _1243___mcc_h42 = _source47.dtor_expr;
        } else if (_source47.is_EarlyReturn) {
        } else if (_source47.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1244___mcc_h44 = _source47.dtor_toLabel;
        } else if (_source47.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _1245___mcc_h46 = _source47.dtor_body;
        } else if (_source47.is_JumpTailCallStart) {
        } else if (_source47.is_Halt) {
        } else {
          DAST._IExpression _1246___mcc_h48 = _source47.dtor_Print_a0;
        }
        if ((_1217_i).Sign == 1) {
          generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, _1219_stmtString);
        _1217_i = (_1217_i) + (BigInteger.One);
      }
    }
    public static void GenAssignLhs(DAST._IAssignLhs lhs, Dafny.ISequence<Dafny.Rune> rhs, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, out Dafny.ISequence<Dafny.Rune> generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IAssignLhs _source48 = lhs;
      if (_source48.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _1247___mcc_h0 = _source48.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source49 = _1247___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _1248___mcc_h1 = _source49;
        Dafny.ISequence<Dafny.Rune> _1249_id = _1248___mcc_h1;
        {
          if ((@params).Contains(_1249_id)) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), DCOMP.__default.escapeIdent(_1249_id));
          } else {
            generated = DCOMP.__default.escapeIdent(_1249_id);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1249_id);
          needsIIFE = false;
        }
      } else if (_source48.is_Select) {
        DAST._IExpression _1250___mcc_h2 = _source48.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _1251___mcc_h3 = _source48.dtor_field;
        Dafny.ISequence<Dafny.Rune> _1252_field = _1251___mcc_h3;
        DAST._IExpression _1253_on = _1250___mcc_h2;
        {
          Dafny.ISequence<Dafny.Rune> _1254_onExpr;
          bool _1255_onOwned;
          bool _1256_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1257_recIdents;
          Dafny.ISequence<Dafny.Rune> _out91;
          bool _out92;
          bool _out93;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out94;
          DCOMP.COMP.GenExpr(_1253_on, selfIdent, @params, false, out _out91, out _out92, out _out93, out _out94);
          _1254_onExpr = _out91;
          _1255_onOwned = _out92;
          _1256_onErased = _out93;
          _1257_recIdents = _out94;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*("), _1254_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _1252_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()) = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          readIdents = _1257_recIdents;
          needsIIFE = true;
        }
      } else {
        DAST._IExpression _1258___mcc_h4 = _source48.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _1259___mcc_h5 = _source48.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _1260_indices = _1259___mcc_h5;
        DAST._IExpression _1261_on = _1258___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _1262_onExpr;
          bool _1263_onOwned;
          bool _1264_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1265_recIdents;
          Dafny.ISequence<Dafny.Rune> _out95;
          bool _out96;
          bool _out97;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out98;
          DCOMP.COMP.GenExpr(_1261_on, selfIdent, @params, false, out _out95, out _out96, out _out97, out _out98);
          _1262_onExpr = _out95;
          _1263_onOwned = _out96;
          _1264_onErased = _out97;
          _1265_recIdents = _out98;
          readIdents = _1265_recIdents;
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          BigInteger _1266_i;
          _1266_i = BigInteger.Zero;
          while ((_1266_i) < (new BigInteger((_1260_indices).Count))) {
            Dafny.ISequence<Dafny.Rune> _1267_idx;
            bool _1268___v23;
            bool _1269_idxErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1270_recIdentsIdx;
            Dafny.ISequence<Dafny.Rune> _out99;
            bool _out100;
            bool _out101;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out102;
            DCOMP.COMP.GenExpr((_1260_indices).Select(_1266_i), selfIdent, @params, true, out _out99, out _out100, out _out101, out _out102);
            _1267_idx = _out99;
            _1268___v23 = _out100;
            _1269_idxErased = _out101;
            _1270_recIdentsIdx = _out102;
            if (!(_1269_idxErased)) {
              _1267_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1267_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let __idx")), Std.Strings.__default.OfNat(_1266_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = <usize as ::dafny_runtime::NumCast>::from(")), _1267_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap();\n"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1270_recIdentsIdx);
            _1266_i = (_1266_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, _1262_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()"));
          _1266_i = BigInteger.Zero;
          while ((_1266_i) < (new BigInteger((_1260_indices).Count))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[__idx")), Std.Strings.__default.OfNat(_1266_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            _1266_i = (_1266_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}"));
          needsIIFE = true;
        }
      }
    }
    public static void GenStmt(DAST._IStatement stmt, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IStatement _source50 = stmt;
      if (_source50.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _1271___mcc_h0 = _source50.dtor_name;
        DAST._IType _1272___mcc_h1 = _source50.dtor_typ;
        Std.Wrappers._IOption<DAST._IExpression> _1273___mcc_h2 = _source50.dtor_maybeValue;
        Std.Wrappers._IOption<DAST._IExpression> _source51 = _1273___mcc_h2;
        if (_source51.is_None) {
          DAST._IType _1274_typ = _1272___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _1275_name = _1271___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _1276_typeString;
            Dafny.ISequence<Dafny.Rune> _out103;
            _out103 = DCOMP.COMP.GenType(_1274_typ, true, false);
            _1276_typeString = _out103;
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_1275_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _1276_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IExpression _1277___mcc_h3 = _source51.dtor_value;
          DAST._IExpression _1278_expression = _1277___mcc_h3;
          DAST._IType _1279_typ = _1272___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _1280_name = _1271___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _1281_typeString;
            Dafny.ISequence<Dafny.Rune> _out104;
            _out104 = DCOMP.COMP.GenType(_1279_typ, true, false);
            _1281_typeString = _out104;
            Dafny.ISequence<Dafny.Rune> _1282_expr;
            bool _1283___v24;
            bool _1284_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1285_recIdents;
            Dafny.ISequence<Dafny.Rune> _out105;
            bool _out106;
            bool _out107;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out108;
            DCOMP.COMP.GenExpr(_1278_expression, selfIdent, @params, true, out _out105, out _out106, out _out107, out _out108);
            _1282_expr = _out105;
            _1283___v24 = _out106;
            _1284_recErased = _out107;
            _1285_recIdents = _out108;
            if (!(_1284_recErased)) {
              _1282_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1282_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _1282_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1281_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _1282_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_1280_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _1281_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _1282_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = _1285_recIdents;
          }
        }
      } else if (_source50.is_Assign) {
        DAST._IAssignLhs _1286___mcc_h4 = _source50.dtor_lhs;
        DAST._IExpression _1287___mcc_h5 = _source50.dtor_value;
        DAST._IExpression _1288_expression = _1287___mcc_h5;
        DAST._IAssignLhs _1289_lhs = _1286___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _1290_lhsGen;
          bool _1291_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1292_recIdents;
          Dafny.ISequence<Dafny.Rune> _out109;
          bool _out110;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out111;
          DCOMP.COMP.GenAssignLhs(_1289_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), selfIdent, @params, out _out109, out _out110, out _out111);
          _1290_lhsGen = _out109;
          _1291_needsIIFE = _out110;
          _1292_recIdents = _out111;
          Dafny.ISequence<Dafny.Rune> _1293_exprGen;
          bool _1294___v25;
          bool _1295_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1296_exprIdents;
          Dafny.ISequence<Dafny.Rune> _out112;
          bool _out113;
          bool _out114;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out115;
          DCOMP.COMP.GenExpr(_1288_expression, selfIdent, @params, true, out _out112, out _out113, out _out114, out _out115);
          _1293_exprGen = _out112;
          _1294___v25 = _out113;
          _1295_exprErased = _out114;
          _1296_exprIdents = _out115;
          if (!(_1295_exprErased)) {
            _1293_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1293_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          _1293_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1293_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          if (_1291_needsIIFE) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet __rhs = "), _1293_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _1290_lhsGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1290_lhsGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _1293_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_1292_recIdents, _1296_exprIdents);
        }
      } else if (_source50.is_If) {
        DAST._IExpression _1297___mcc_h6 = _source50.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _1298___mcc_h7 = _source50.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _1299___mcc_h8 = _source50.dtor_els;
        Dafny.ISequence<DAST._IStatement> _1300_els = _1299___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _1301_thn = _1298___mcc_h7;
        DAST._IExpression _1302_cond = _1297___mcc_h6;
        {
          Dafny.ISequence<Dafny.Rune> _1303_condString;
          bool _1304___v26;
          bool _1305_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1306_recIdents;
          Dafny.ISequence<Dafny.Rune> _out116;
          bool _out117;
          bool _out118;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out119;
          DCOMP.COMP.GenExpr(_1302_cond, selfIdent, @params, true, out _out116, out _out117, out _out118, out _out119);
          _1303_condString = _out116;
          _1304___v26 = _out117;
          _1305_condErased = _out118;
          _1306_recIdents = _out119;
          if (!(_1305_condErased)) {
            _1303_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1303_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _1306_recIdents;
          Dafny.ISequence<Dafny.Rune> _1307_thnString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1308_thnIdents;
          Dafny.ISequence<Dafny.Rune> _out120;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out121;
          DCOMP.COMP.GenStmts(_1301_thn, selfIdent, @params, isLast, earlyReturn, out _out120, out _out121);
          _1307_thnString = _out120;
          _1308_thnIdents = _out121;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1308_thnIdents);
          Dafny.ISequence<Dafny.Rune> _1309_elsString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1310_elsIdents;
          Dafny.ISequence<Dafny.Rune> _out122;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out123;
          DCOMP.COMP.GenStmts(_1300_els, selfIdent, @params, isLast, earlyReturn, out _out122, out _out123);
          _1309_elsString = _out122;
          _1310_elsIdents = _out123;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1310_elsIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if "), _1303_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1307_thnString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _1309_elsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source50.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _1311___mcc_h9 = _source50.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _1312___mcc_h10 = _source50.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1313_body = _1312___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _1314_lbl = _1311___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _1315_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1316_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out124;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out125;
          DCOMP.COMP.GenStmts(_1313_body, selfIdent, @params, isLast, earlyReturn, out _out124, out _out125);
          _1315_bodyString = _out124;
          _1316_bodyIdents = _out125;
          readIdents = _1316_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'label_"), _1314_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": loop {\n")), _1315_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source50.is_While) {
        DAST._IExpression _1317___mcc_h11 = _source50.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _1318___mcc_h12 = _source50.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1319_body = _1318___mcc_h12;
        DAST._IExpression _1320_cond = _1317___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _1321_condString;
          bool _1322___v27;
          bool _1323_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1324_recIdents;
          Dafny.ISequence<Dafny.Rune> _out126;
          bool _out127;
          bool _out128;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out129;
          DCOMP.COMP.GenExpr(_1320_cond, selfIdent, @params, true, out _out126, out _out127, out _out128, out _out129);
          _1321_condString = _out126;
          _1322___v27 = _out127;
          _1323_condErased = _out128;
          _1324_recIdents = _out129;
          if (!(_1323_condErased)) {
            _1321_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1321_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _1324_recIdents;
          Dafny.ISequence<Dafny.Rune> _1325_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1326_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out130;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out131;
          DCOMP.COMP.GenStmts(_1319_body, selfIdent, @params, false, earlyReturn, out _out130, out _out131);
          _1325_bodyString = _out130;
          _1326_bodyIdents = _out131;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1326_bodyIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while "), _1321_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1325_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source50.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _1327___mcc_h13 = _source50.dtor_boundName;
        DAST._IType _1328___mcc_h14 = _source50.dtor_boundType;
        DAST._IExpression _1329___mcc_h15 = _source50.dtor_over;
        Dafny.ISequence<DAST._IStatement> _1330___mcc_h16 = _source50.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1331_body = _1330___mcc_h16;
        DAST._IExpression _1332_over = _1329___mcc_h15;
        DAST._IType _1333_boundType = _1328___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _1334_boundName = _1327___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _1335_overString;
          bool _1336___v28;
          bool _1337_overErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1338_recIdents;
          Dafny.ISequence<Dafny.Rune> _out132;
          bool _out133;
          bool _out134;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out135;
          DCOMP.COMP.GenExpr(_1332_over, selfIdent, @params, true, out _out132, out _out133, out _out134, out _out135);
          _1335_overString = _out132;
          _1336___v28 = _out133;
          _1337_overErased = _out134;
          _1338_recIdents = _out135;
          Dafny.ISequence<Dafny.Rune> _1339_boundTypeStr;
          Dafny.ISequence<Dafny.Rune> _out136;
          _out136 = DCOMP.COMP.GenType(_1333_boundType, false, false);
          _1339_boundTypeStr = _out136;
          readIdents = _1338_recIdents;
          Dafny.ISequence<Dafny.Rune> _1340_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1341_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out137;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out138;
          DCOMP.COMP.GenStmts(_1331_body, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(@params, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_1334_boundName)), false, earlyReturn, out _out137, out _out138);
          _1340_bodyString = _out137;
          _1341_bodyIdents = _out138;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1341_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1334_boundName));
          Dafny.ISequence<Dafny.Rune> _1342_unerasedIter;
          _1342_unerasedIter = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_iter_erased");
          if (_1337_overErased) {
            _1342_unerasedIter = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1339_boundTypeStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _1342_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for _iter_erased in "), _1335_overString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_1334_boundName)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _1342_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _1340_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source50.is_Call) {
        DAST._IExpression _1343___mcc_h17 = _source50.dtor_on;
        Dafny.ISequence<Dafny.Rune> _1344___mcc_h18 = _source50.dtor_name;
        Dafny.ISequence<DAST._IType> _1345___mcc_h19 = _source50.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _1346___mcc_h20 = _source50.dtor_args;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1347___mcc_h21 = _source50.dtor_outs;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1348_maybeOutVars = _1347___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _1349_args = _1346___mcc_h20;
        Dafny.ISequence<DAST._IType> _1350_typeArgs = _1345___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _1351_name = _1344___mcc_h18;
        DAST._IExpression _1352_on = _1343___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _1353_typeArgString;
          _1353_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_1350_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _1354_typeI;
            _1354_typeI = BigInteger.Zero;
            _1353_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_1354_typeI) < (new BigInteger((_1350_typeArgs).Count))) {
              if ((_1354_typeI).Sign == 1) {
                _1353_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_1353_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _1355_typeString;
              Dafny.ISequence<Dafny.Rune> _out139;
              _out139 = DCOMP.COMP.GenType((_1350_typeArgs).Select(_1354_typeI), false, false);
              _1355_typeString = _out139;
              _1353_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_1353_typeArgString, _1355_typeString);
              _1354_typeI = (_1354_typeI) + (BigInteger.One);
            }
            _1353_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_1353_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _1356_argString;
          _1356_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _1357_i;
          _1357_i = BigInteger.Zero;
          while ((_1357_i) < (new BigInteger((_1349_args).Count))) {
            if ((_1357_i).Sign == 1) {
              _1356_argString = Dafny.Sequence<Dafny.Rune>.Concat(_1356_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _1358_argExpr;
            bool _1359_isOwned;
            bool _1360_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1361_argIdents;
            Dafny.ISequence<Dafny.Rune> _out140;
            bool _out141;
            bool _out142;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out143;
            DCOMP.COMP.GenExpr((_1349_args).Select(_1357_i), selfIdent, @params, false, out _out140, out _out141, out _out142, out _out143);
            _1358_argExpr = _out140;
            _1359_isOwned = _out141;
            _1360_argErased = _out142;
            _1361_argIdents = _out143;
            if (_1359_isOwned) {
              _1358_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _1358_argExpr);
            }
            _1356_argString = Dafny.Sequence<Dafny.Rune>.Concat(_1356_argString, _1358_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1361_argIdents);
            _1357_i = (_1357_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _1362_enclosingString;
          bool _1363___v29;
          bool _1364___v30;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1365_enclosingIdents;
          Dafny.ISequence<Dafny.Rune> _out144;
          bool _out145;
          bool _out146;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out147;
          DCOMP.COMP.GenExpr(_1352_on, selfIdent, @params, false, out _out144, out _out145, out _out146, out _out147);
          _1362_enclosingString = _out144;
          _1363___v29 = _out145;
          _1364___v30 = _out146;
          _1365_enclosingIdents = _out147;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1365_enclosingIdents);
          DAST._IExpression _source52 = _1352_on;
          if (_source52.is_Literal) {
            DAST._ILiteral _1366___mcc_h26 = _source52.dtor_Literal_a0;
            {
              _1362_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1362_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source52.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _1367___mcc_h28 = _source52.dtor_Ident_a0;
            {
              _1362_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1362_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source52.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1368___mcc_h30 = _source52.dtor_Companion_a0;
            {
              _1362_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(_1362_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
            }
          } else if (_source52.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _1369___mcc_h32 = _source52.dtor_Tuple_a0;
            {
              _1362_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1362_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source52.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1370___mcc_h34 = _source52.dtor_path;
            Dafny.ISequence<DAST._IType> _1371___mcc_h35 = _source52.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _1372___mcc_h36 = _source52.dtor_args;
            {
              _1362_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1362_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source52.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _1373___mcc_h40 = _source52.dtor_dims;
            DAST._IType _1374___mcc_h41 = _source52.dtor_typ;
            {
              _1362_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1362_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source52.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1375___mcc_h44 = _source52.dtor_path;
            Dafny.ISequence<DAST._IType> _1376___mcc_h45 = _source52.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _1377___mcc_h46 = _source52.dtor_variant;
            bool _1378___mcc_h47 = _source52.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _1379___mcc_h48 = _source52.dtor_contents;
            {
              _1362_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1362_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source52.is_Convert) {
            DAST._IExpression _1380___mcc_h54 = _source52.dtor_value;
            DAST._IType _1381___mcc_h55 = _source52.dtor_from;
            DAST._IType _1382___mcc_h56 = _source52.dtor_typ;
            {
              _1362_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1362_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source52.is_SeqConstruct) {
            DAST._IExpression _1383___mcc_h60 = _source52.dtor_length;
            DAST._IExpression _1384___mcc_h61 = _source52.dtor_elem;
            {
              _1362_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1362_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source52.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _1385___mcc_h64 = _source52.dtor_elements;
            DAST._IType _1386___mcc_h65 = _source52.dtor_typ;
            {
              _1362_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1362_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source52.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _1387___mcc_h68 = _source52.dtor_elements;
            {
              _1362_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1362_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source52.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _1388___mcc_h70 = _source52.dtor_mapElems;
            {
              _1362_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1362_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source52.is_This) {
            {
              _1362_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1362_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source52.is_Ite) {
            DAST._IExpression _1389___mcc_h72 = _source52.dtor_cond;
            DAST._IExpression _1390___mcc_h73 = _source52.dtor_thn;
            DAST._IExpression _1391___mcc_h74 = _source52.dtor_els;
            {
              _1362_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1362_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source52.is_UnOp) {
            DAST._IUnaryOp _1392___mcc_h78 = _source52.dtor_unOp;
            DAST._IExpression _1393___mcc_h79 = _source52.dtor_expr;
            DAST.Format._IUnOpFormat _1394___mcc_h80 = _source52.dtor_format1;
            {
              _1362_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1362_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source52.is_BinOp) {
            DAST._IBinOp _1395___mcc_h84 = _source52.dtor_op;
            DAST._IExpression _1396___mcc_h85 = _source52.dtor_left;
            DAST._IExpression _1397___mcc_h86 = _source52.dtor_right;
            DAST.Format._IBinOpFormat _1398___mcc_h87 = _source52.dtor_format2;
            {
              _1362_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1362_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source52.is_ArrayLen) {
            DAST._IExpression _1399___mcc_h92 = _source52.dtor_expr;
            BigInteger _1400___mcc_h93 = _source52.dtor_dim;
            {
              _1362_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1362_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source52.is_Select) {
            DAST._IExpression _1401___mcc_h96 = _source52.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _1402___mcc_h97 = _source52.dtor_field;
            bool _1403___mcc_h98 = _source52.dtor_isConstant;
            bool _1404___mcc_h99 = _source52.dtor_onDatatype;
            {
              _1362_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1362_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source52.is_SelectFn) {
            DAST._IExpression _1405___mcc_h104 = _source52.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _1406___mcc_h105 = _source52.dtor_field;
            bool _1407___mcc_h106 = _source52.dtor_onDatatype;
            bool _1408___mcc_h107 = _source52.dtor_isStatic;
            BigInteger _1409___mcc_h108 = _source52.dtor_arity;
            {
              _1362_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1362_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source52.is_Index) {
            DAST._IExpression _1410___mcc_h114 = _source52.dtor_expr;
            DAST._ICollKind _1411___mcc_h115 = _source52.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _1412___mcc_h116 = _source52.dtor_indices;
            {
              _1362_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1362_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source52.is_IndexRange) {
            DAST._IExpression _1413___mcc_h120 = _source52.dtor_expr;
            bool _1414___mcc_h121 = _source52.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _1415___mcc_h122 = _source52.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _1416___mcc_h123 = _source52.dtor_high;
            {
              _1362_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1362_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source52.is_TupleSelect) {
            DAST._IExpression _1417___mcc_h128 = _source52.dtor_expr;
            BigInteger _1418___mcc_h129 = _source52.dtor_index;
            {
              _1362_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1362_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source52.is_Call) {
            DAST._IExpression _1419___mcc_h132 = _source52.dtor_on;
            Dafny.ISequence<Dafny.Rune> _1420___mcc_h133 = _source52.dtor_name;
            Dafny.ISequence<DAST._IType> _1421___mcc_h134 = _source52.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _1422___mcc_h135 = _source52.dtor_args;
            {
              _1362_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1362_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source52.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _1423___mcc_h140 = _source52.dtor_params;
            DAST._IType _1424___mcc_h141 = _source52.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _1425___mcc_h142 = _source52.dtor_body;
            {
              _1362_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1362_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source52.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _1426___mcc_h146 = _source52.dtor_values;
            DAST._IType _1427___mcc_h147 = _source52.dtor_retType;
            DAST._IExpression _1428___mcc_h148 = _source52.dtor_expr;
            {
              _1362_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1362_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source52.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _1429___mcc_h152 = _source52.dtor_name;
            DAST._IType _1430___mcc_h153 = _source52.dtor_typ;
            DAST._IExpression _1431___mcc_h154 = _source52.dtor_value;
            DAST._IExpression _1432___mcc_h155 = _source52.dtor_iifeBody;
            {
              _1362_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1362_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source52.is_Apply) {
            DAST._IExpression _1433___mcc_h160 = _source52.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _1434___mcc_h161 = _source52.dtor_args;
            {
              _1362_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1362_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source52.is_TypeTest) {
            DAST._IExpression _1435___mcc_h164 = _source52.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1436___mcc_h165 = _source52.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _1437___mcc_h166 = _source52.dtor_variant;
            {
              _1362_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1362_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source52.is_InitializationValue) {
            DAST._IType _1438___mcc_h170 = _source52.dtor_typ;
            {
              _1362_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1362_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source52.is_BoolBoundedPool) {
            {
              _1362_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1362_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source52.is_SetBoundedPool) {
            DAST._IExpression _1439___mcc_h172 = _source52.dtor_of;
            {
              _1362_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1362_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source52.is_SeqBoundedPool) {
            DAST._IExpression _1440___mcc_h174 = _source52.dtor_of;
            bool _1441___mcc_h175 = _source52.dtor_includeDuplicates;
            {
              _1362_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1362_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else {
            DAST._IExpression _1442___mcc_h178 = _source52.dtor_lo;
            DAST._IExpression _1443___mcc_h179 = _source52.dtor_hi;
            {
              _1362_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1362_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          }
          Dafny.ISequence<Dafny.Rune> _1444_receiver;
          _1444_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source53 = _1348_maybeOutVars;
          if (_source53.is_None) {
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1445___mcc_h182 = _source53.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1446_outVars = _1445___mcc_h182;
            {
              if ((new BigInteger((_1446_outVars).Count)) > (BigInteger.One)) {
                _1444_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
              }
              BigInteger _1447_outI;
              _1447_outI = BigInteger.Zero;
              while ((_1447_outI) < (new BigInteger((_1446_outVars).Count))) {
                if ((_1447_outI).Sign == 1) {
                  _1444_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_1444_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                }
                Dafny.ISequence<Dafny.Rune> _1448_outVar;
                _1448_outVar = (_1446_outVars).Select(_1447_outI);
                _1444_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_1444_receiver, (_1448_outVar));
                _1447_outI = (_1447_outI) + (BigInteger.One);
              }
              if ((new BigInteger((_1446_outVars).Count)) > (BigInteger.One)) {
                _1444_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_1444_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((!(_1444_receiver).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_1444_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), _1362_enclosingString), DCOMP.__default.escapeIdent(_1351_name)), _1353_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1356_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      } else if (_source50.is_Return) {
        DAST._IExpression _1449___mcc_h22 = _source50.dtor_expr;
        DAST._IExpression _1450_expr = _1449___mcc_h22;
        {
          Dafny.ISequence<Dafny.Rune> _1451_exprString;
          bool _1452___v33;
          bool _1453_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1454_recIdents;
          Dafny.ISequence<Dafny.Rune> _out148;
          bool _out149;
          bool _out150;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out151;
          DCOMP.COMP.GenExpr(_1450_expr, selfIdent, @params, true, out _out148, out _out149, out _out150, out _out151);
          _1451_exprString = _out148;
          _1452___v33 = _out149;
          _1453_recErased = _out150;
          _1454_recIdents = _out151;
          _1451_exprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned(::dafny_runtime::DafnyErasable::erase_owned("), _1451_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          readIdents = _1454_recIdents;
          if (isLast) {
            generated = _1451_exprString;
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return "), _1451_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
        }
      } else if (_source50.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source50.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1455___mcc_h23 = _source50.dtor_toLabel;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1456_toLabel = _1455___mcc_h23;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source54 = _1456_toLabel;
          if (_source54.is_None) {
            {
              generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;");
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _1457___mcc_h183 = _source54.dtor_value;
            Dafny.ISequence<Dafny.Rune> _1458_lbl = _1457___mcc_h183;
            {
              generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break 'label_"), _1458_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source50.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _1459___mcc_h24 = _source50.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1460_body = _1459___mcc_h24;
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut _this = self.clone();\n"));
          }
          BigInteger _1461_paramI;
          _1461_paramI = BigInteger.Zero;
          while ((_1461_paramI) < (new BigInteger((@params).Count))) {
            Dafny.ISequence<Dafny.Rune> _1462_param;
            _1462_param = (@params).Select(_1461_paramI);
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut ")), DCOMP.__default.escapeIdent(_1462_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_1462_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
            _1461_paramI = (_1461_paramI) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _1463_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1464_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out152;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out153;
          DCOMP.COMP.GenStmts(_1460_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), false, earlyReturn, out _out152, out _out153);
          _1463_bodyString = _out152;
          _1464_bodyIdents = _out153;
          readIdents = _1464_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'TAIL_CALL_START: loop {\n")), _1463_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source50.is_JumpTailCallStart) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue 'TAIL_CALL_START;");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source50.is_Halt) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else {
        DAST._IExpression _1465___mcc_h25 = _source50.dtor_Print_a0;
        DAST._IExpression _1466_e = _1465___mcc_h25;
        {
          Dafny.ISequence<Dafny.Rune> _1467_printedExpr;
          bool _1468_isOwned;
          bool _1469___v34;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1470_recIdents;
          Dafny.ISequence<Dafny.Rune> _out154;
          bool _out155;
          bool _out156;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out157;
          DCOMP.COMP.GenExpr(_1466_e, selfIdent, @params, false, out _out154, out _out155, out _out156, out _out157);
          _1467_printedExpr = _out154;
          _1468_isOwned = _out155;
          _1469___v34 = _out156;
          _1470_recIdents = _out157;
          if (_1468_isOwned) {
            _1467_printedExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _1467_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!(\"{}\", ::dafny_runtime::DafnyPrintWrapper("), _1467_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("));"));
          readIdents = _1470_recIdents;
        }
      }
    }
    public static void GenExpr(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool mustOwn, out Dafny.ISequence<Dafny.Rune> s, out bool isOwned, out bool isErased, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      isOwned = false;
      isErased = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source55 = e;
      if (_source55.is_Literal) {
        DAST._ILiteral _1471___mcc_h0 = _source55.dtor_Literal_a0;
        DAST._ILiteral _source56 = _1471___mcc_h0;
        if (_source56.is_BoolLiteral) {
          bool _1472___mcc_h1 = _source56.dtor_BoolLiteral_a0;
          if ((_1472___mcc_h1) == (false)) {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          }
        } else if (_source56.is_IntLiteral) {
          Dafny.ISequence<Dafny.Rune> _1473___mcc_h2 = _source56.dtor_IntLiteral_a0;
          DAST._IType _1474___mcc_h3 = _source56.dtor_IntLiteral_a1;
          DAST._IType _1475_t = _1474___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _1476_i = _1473___mcc_h2;
          {
            DAST._IType _source57 = _1475_t;
            if (_source57.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1477___mcc_h243 = _source57.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _1478___mcc_h244 = _source57.dtor_typeArgs;
              DAST._IResolvedType _1479___mcc_h245 = _source57.dtor_resolved;
              DAST._IType _1480_o = _1475_t;
              {
                Dafny.ISequence<Dafny.Rune> _1481_genType;
                Dafny.ISequence<Dafny.Rune> _out158;
                _out158 = DCOMP.COMP.GenType(_1480_o, false, false);
                _1481_genType = _out158;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1476_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1481_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source57.is_Nullable) {
              DAST._IType _1482___mcc_h249 = _source57.dtor_Nullable_a0;
              DAST._IType _1483_o = _1475_t;
              {
                Dafny.ISequence<Dafny.Rune> _1484_genType;
                Dafny.ISequence<Dafny.Rune> _out159;
                _out159 = DCOMP.COMP.GenType(_1483_o, false, false);
                _1484_genType = _out159;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1476_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1484_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source57.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1485___mcc_h251 = _source57.dtor_Tuple_a0;
              DAST._IType _1486_o = _1475_t;
              {
                Dafny.ISequence<Dafny.Rune> _1487_genType;
                Dafny.ISequence<Dafny.Rune> _out160;
                _out160 = DCOMP.COMP.GenType(_1486_o, false, false);
                _1487_genType = _out160;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1476_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1487_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source57.is_Array) {
              DAST._IType _1488___mcc_h253 = _source57.dtor_element;
              BigInteger _1489___mcc_h254 = _source57.dtor_dims;
              DAST._IType _1490_o = _1475_t;
              {
                Dafny.ISequence<Dafny.Rune> _1491_genType;
                Dafny.ISequence<Dafny.Rune> _out161;
                _out161 = DCOMP.COMP.GenType(_1490_o, false, false);
                _1491_genType = _out161;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1476_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1491_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source57.is_Seq) {
              DAST._IType _1492___mcc_h257 = _source57.dtor_element;
              DAST._IType _1493_o = _1475_t;
              {
                Dafny.ISequence<Dafny.Rune> _1494_genType;
                Dafny.ISequence<Dafny.Rune> _out162;
                _out162 = DCOMP.COMP.GenType(_1493_o, false, false);
                _1494_genType = _out162;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1476_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1494_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source57.is_Set) {
              DAST._IType _1495___mcc_h259 = _source57.dtor_element;
              DAST._IType _1496_o = _1475_t;
              {
                Dafny.ISequence<Dafny.Rune> _1497_genType;
                Dafny.ISequence<Dafny.Rune> _out163;
                _out163 = DCOMP.COMP.GenType(_1496_o, false, false);
                _1497_genType = _out163;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1476_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1497_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source57.is_Multiset) {
              DAST._IType _1498___mcc_h261 = _source57.dtor_element;
              DAST._IType _1499_o = _1475_t;
              {
                Dafny.ISequence<Dafny.Rune> _1500_genType;
                Dafny.ISequence<Dafny.Rune> _out164;
                _out164 = DCOMP.COMP.GenType(_1499_o, false, false);
                _1500_genType = _out164;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1476_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1500_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source57.is_Map) {
              DAST._IType _1501___mcc_h263 = _source57.dtor_key;
              DAST._IType _1502___mcc_h264 = _source57.dtor_value;
              DAST._IType _1503_o = _1475_t;
              {
                Dafny.ISequence<Dafny.Rune> _1504_genType;
                Dafny.ISequence<Dafny.Rune> _out165;
                _out165 = DCOMP.COMP.GenType(_1503_o, false, false);
                _1504_genType = _out165;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1476_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1504_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source57.is_Arrow) {
              Dafny.ISequence<DAST._IType> _1505___mcc_h267 = _source57.dtor_args;
              DAST._IType _1506___mcc_h268 = _source57.dtor_result;
              DAST._IType _1507_o = _1475_t;
              {
                Dafny.ISequence<Dafny.Rune> _1508_genType;
                Dafny.ISequence<Dafny.Rune> _out166;
                _out166 = DCOMP.COMP.GenType(_1507_o, false, false);
                _1508_genType = _out166;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1476_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1508_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source57.is_Primitive) {
              DAST._IPrimitive _1509___mcc_h271 = _source57.dtor_Primitive_a0;
              DAST._IPrimitive _source58 = _1509___mcc_h271;
              if (_source58.is_Int) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::parse_bytes(b\""), _1476_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap()"));
                }
              } else if (_source58.is_Real) {
                DAST._IType _1510_o = _1475_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1511_genType;
                  Dafny.ISequence<Dafny.Rune> _out167;
                  _out167 = DCOMP.COMP.GenType(_1510_o, false, false);
                  _1511_genType = _out167;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1476_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1511_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source58.is_String) {
                DAST._IType _1512_o = _1475_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1513_genType;
                  Dafny.ISequence<Dafny.Rune> _out168;
                  _out168 = DCOMP.COMP.GenType(_1512_o, false, false);
                  _1513_genType = _out168;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1476_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1513_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source58.is_Bool) {
                DAST._IType _1514_o = _1475_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1515_genType;
                  Dafny.ISequence<Dafny.Rune> _out169;
                  _out169 = DCOMP.COMP.GenType(_1514_o, false, false);
                  _1515_genType = _out169;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1476_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1515_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _1516_o = _1475_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1517_genType;
                  Dafny.ISequence<Dafny.Rune> _out170;
                  _out170 = DCOMP.COMP.GenType(_1516_o, false, false);
                  _1517_genType = _out170;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1476_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1517_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source57.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _1518___mcc_h273 = _source57.dtor_Passthrough_a0;
              DAST._IType _1519_o = _1475_t;
              {
                Dafny.ISequence<Dafny.Rune> _1520_genType;
                Dafny.ISequence<Dafny.Rune> _out171;
                _out171 = DCOMP.COMP.GenType(_1519_o, false, false);
                _1520_genType = _out171;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1476_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1520_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _1521___mcc_h275 = _source57.dtor_TypeArg_a0;
              DAST._IType _1522_o = _1475_t;
              {
                Dafny.ISequence<Dafny.Rune> _1523_genType;
                Dafny.ISequence<Dafny.Rune> _out172;
                _out172 = DCOMP.COMP.GenType(_1522_o, false, false);
                _1523_genType = _out172;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1476_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1523_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source56.is_DecLiteral) {
          Dafny.ISequence<Dafny.Rune> _1524___mcc_h4 = _source56.dtor_DecLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _1525___mcc_h5 = _source56.dtor_DecLiteral_a1;
          DAST._IType _1526___mcc_h6 = _source56.dtor_DecLiteral_a2;
          DAST._IType _1527_t = _1526___mcc_h6;
          Dafny.ISequence<Dafny.Rune> _1528_d = _1525___mcc_h5;
          Dafny.ISequence<Dafny.Rune> _1529_n = _1524___mcc_h4;
          {
            DAST._IType _source59 = _1527_t;
            if (_source59.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1530___mcc_h277 = _source59.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _1531___mcc_h278 = _source59.dtor_typeArgs;
              DAST._IResolvedType _1532___mcc_h279 = _source59.dtor_resolved;
              DAST._IType _1533_o = _1527_t;
              {
                Dafny.ISequence<Dafny.Rune> _1534_genType;
                Dafny.ISequence<Dafny.Rune> _out173;
                _out173 = DCOMP.COMP.GenType(_1533_o, false, false);
                _1534_genType = _out173;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1529_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1528_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1534_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source59.is_Nullable) {
              DAST._IType _1535___mcc_h283 = _source59.dtor_Nullable_a0;
              DAST._IType _1536_o = _1527_t;
              {
                Dafny.ISequence<Dafny.Rune> _1537_genType;
                Dafny.ISequence<Dafny.Rune> _out174;
                _out174 = DCOMP.COMP.GenType(_1536_o, false, false);
                _1537_genType = _out174;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1529_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1528_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1537_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source59.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1538___mcc_h285 = _source59.dtor_Tuple_a0;
              DAST._IType _1539_o = _1527_t;
              {
                Dafny.ISequence<Dafny.Rune> _1540_genType;
                Dafny.ISequence<Dafny.Rune> _out175;
                _out175 = DCOMP.COMP.GenType(_1539_o, false, false);
                _1540_genType = _out175;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1529_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1528_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1540_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source59.is_Array) {
              DAST._IType _1541___mcc_h287 = _source59.dtor_element;
              BigInteger _1542___mcc_h288 = _source59.dtor_dims;
              DAST._IType _1543_o = _1527_t;
              {
                Dafny.ISequence<Dafny.Rune> _1544_genType;
                Dafny.ISequence<Dafny.Rune> _out176;
                _out176 = DCOMP.COMP.GenType(_1543_o, false, false);
                _1544_genType = _out176;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1529_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1528_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1544_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source59.is_Seq) {
              DAST._IType _1545___mcc_h291 = _source59.dtor_element;
              DAST._IType _1546_o = _1527_t;
              {
                Dafny.ISequence<Dafny.Rune> _1547_genType;
                Dafny.ISequence<Dafny.Rune> _out177;
                _out177 = DCOMP.COMP.GenType(_1546_o, false, false);
                _1547_genType = _out177;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1529_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1528_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1547_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source59.is_Set) {
              DAST._IType _1548___mcc_h293 = _source59.dtor_element;
              DAST._IType _1549_o = _1527_t;
              {
                Dafny.ISequence<Dafny.Rune> _1550_genType;
                Dafny.ISequence<Dafny.Rune> _out178;
                _out178 = DCOMP.COMP.GenType(_1549_o, false, false);
                _1550_genType = _out178;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1529_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1528_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1550_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source59.is_Multiset) {
              DAST._IType _1551___mcc_h295 = _source59.dtor_element;
              DAST._IType _1552_o = _1527_t;
              {
                Dafny.ISequence<Dafny.Rune> _1553_genType;
                Dafny.ISequence<Dafny.Rune> _out179;
                _out179 = DCOMP.COMP.GenType(_1552_o, false, false);
                _1553_genType = _out179;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1529_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1528_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1553_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source59.is_Map) {
              DAST._IType _1554___mcc_h297 = _source59.dtor_key;
              DAST._IType _1555___mcc_h298 = _source59.dtor_value;
              DAST._IType _1556_o = _1527_t;
              {
                Dafny.ISequence<Dafny.Rune> _1557_genType;
                Dafny.ISequence<Dafny.Rune> _out180;
                _out180 = DCOMP.COMP.GenType(_1556_o, false, false);
                _1557_genType = _out180;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1529_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1528_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1557_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source59.is_Arrow) {
              Dafny.ISequence<DAST._IType> _1558___mcc_h301 = _source59.dtor_args;
              DAST._IType _1559___mcc_h302 = _source59.dtor_result;
              DAST._IType _1560_o = _1527_t;
              {
                Dafny.ISequence<Dafny.Rune> _1561_genType;
                Dafny.ISequence<Dafny.Rune> _out181;
                _out181 = DCOMP.COMP.GenType(_1560_o, false, false);
                _1561_genType = _out181;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1529_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1528_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1561_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source59.is_Primitive) {
              DAST._IPrimitive _1562___mcc_h305 = _source59.dtor_Primitive_a0;
              DAST._IPrimitive _source60 = _1562___mcc_h305;
              if (_source60.is_Int) {
                DAST._IType _1563_o = _1527_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1564_genType;
                  Dafny.ISequence<Dafny.Rune> _out182;
                  _out182 = DCOMP.COMP.GenType(_1563_o, false, false);
                  _1564_genType = _out182;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1529_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1528_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1564_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source60.is_Real) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _1529_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _1528_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"));
                }
              } else if (_source60.is_String) {
                DAST._IType _1565_o = _1527_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1566_genType;
                  Dafny.ISequence<Dafny.Rune> _out183;
                  _out183 = DCOMP.COMP.GenType(_1565_o, false, false);
                  _1566_genType = _out183;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1529_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1528_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1566_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source60.is_Bool) {
                DAST._IType _1567_o = _1527_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1568_genType;
                  Dafny.ISequence<Dafny.Rune> _out184;
                  _out184 = DCOMP.COMP.GenType(_1567_o, false, false);
                  _1568_genType = _out184;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1529_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1528_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1568_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _1569_o = _1527_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1570_genType;
                  Dafny.ISequence<Dafny.Rune> _out185;
                  _out185 = DCOMP.COMP.GenType(_1569_o, false, false);
                  _1570_genType = _out185;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1529_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1528_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1570_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source59.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _1571___mcc_h307 = _source59.dtor_Passthrough_a0;
              DAST._IType _1572_o = _1527_t;
              {
                Dafny.ISequence<Dafny.Rune> _1573_genType;
                Dafny.ISequence<Dafny.Rune> _out186;
                _out186 = DCOMP.COMP.GenType(_1572_o, false, false);
                _1573_genType = _out186;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1529_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1528_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1573_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _1574___mcc_h309 = _source59.dtor_TypeArg_a0;
              DAST._IType _1575_o = _1527_t;
              {
                Dafny.ISequence<Dafny.Rune> _1576_genType;
                Dafny.ISequence<Dafny.Rune> _out187;
                _out187 = DCOMP.COMP.GenType(_1575_o, false, false);
                _1576_genType = _out187;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1529_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1528_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1576_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source56.is_StringLiteral) {
          Dafny.ISequence<Dafny.Rune> _1577___mcc_h7 = _source56.dtor_StringLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _1578_l = _1577___mcc_h7;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""), _1578_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\".chars().collect::<Vec<char>>()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source56.is_CharLiteral) {
          Dafny.Rune _1579___mcc_h8 = _source56.dtor_CharLiteral_a0;
          Dafny.Rune _1580_c = _1579___mcc_h8;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::primitive::char::from_u32("), Std.Strings.__default.OfNat(new BigInteger((_1580_c).Value))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IType _1581___mcc_h9 = _source56.dtor_Null_a0;
          DAST._IType _1582_tpe = _1581___mcc_h9;
          {
            Dafny.ISequence<Dafny.Rune> _1583_tpeGen;
            Dafny.ISequence<Dafny.Rune> _out188;
            _out188 = DCOMP.COMP.GenType(_1582_tpe, false, false);
            _1583_tpeGen = _out188;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(None as "), _1583_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source55.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _1584___mcc_h10 = _source55.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _1585_name = _1584___mcc_h10;
        {
          s = DCOMP.__default.escapeIdent(_1585_name);
          if (!((@params).Contains(_1585_name))) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            isOwned = false;
          }
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1585_name);
        }
      } else if (_source55.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1586___mcc_h11 = _source55.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1587_path = _1586___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _out189;
          _out189 = DCOMP.COMP.GenPath(_1587_path);
          s = _out189;
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source55.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _1588___mcc_h12 = _source55.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IExpression> _1589_values = _1588___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _1590_i;
          _1590_i = BigInteger.Zero;
          while ((_1590_i) < (new BigInteger((_1589_values).Count))) {
            if ((_1590_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _1591_recursiveGen;
            bool _1592___v35;
            bool _1593_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1594_recIdents;
            Dafny.ISequence<Dafny.Rune> _out190;
            bool _out191;
            bool _out192;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out193;
            DCOMP.COMP.GenExpr((_1589_values).Select(_1590_i), selfIdent, @params, true, out _out190, out _out191, out _out192, out _out193);
            _1591_recursiveGen = _out190;
            _1592___v35 = _out191;
            _1593_isErased = _out192;
            _1594_recIdents = _out193;
            if (_1593_isErased) {
              _1591_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1591_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _1591_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1594_recIdents);
            _1590_i = (_1590_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source55.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1595___mcc_h13 = _source55.dtor_path;
        Dafny.ISequence<DAST._IType> _1596___mcc_h14 = _source55.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _1597___mcc_h15 = _source55.dtor_args;
        Dafny.ISequence<DAST._IExpression> _1598_args = _1597___mcc_h15;
        Dafny.ISequence<DAST._IType> _1599_typeArgs = _1596___mcc_h14;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1600_path = _1595___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _1601_path;
          Dafny.ISequence<Dafny.Rune> _out194;
          _out194 = DCOMP.COMP.GenPath(_1600_path);
          _1601_path = _out194;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _1601_path);
          if ((new BigInteger((_1599_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<"));
            BigInteger _1602_i;
            _1602_i = BigInteger.Zero;
            while ((_1602_i) < (new BigInteger((_1599_typeArgs).Count))) {
              if ((_1602_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
              }
              Dafny.ISequence<Dafny.Rune> _1603_typeString;
              Dafny.ISequence<Dafny.Rune> _out195;
              _out195 = DCOMP.COMP.GenType((_1599_typeArgs).Select(_1602_i), false, false);
              _1603_typeString = _out195;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1603_typeString);
              _1602_i = (_1602_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new("));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _1604_i;
          _1604_i = BigInteger.Zero;
          while ((_1604_i) < (new BigInteger((_1598_args).Count))) {
            if ((_1604_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _1605_recursiveGen;
            bool _1606___v36;
            bool _1607_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1608_recIdents;
            Dafny.ISequence<Dafny.Rune> _out196;
            bool _out197;
            bool _out198;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out199;
            DCOMP.COMP.GenExpr((_1598_args).Select(_1604_i), selfIdent, @params, true, out _out196, out _out197, out _out198, out _out199);
            _1605_recursiveGen = _out196;
            _1606___v36 = _out197;
            _1607_isErased = _out198;
            _1608_recIdents = _out199;
            if (_1607_isErased) {
              _1605_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1605_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1605_recursiveGen);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1608_recIdents);
            _1604_i = (_1604_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = true;
        }
      } else if (_source55.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _1609___mcc_h16 = _source55.dtor_dims;
        DAST._IType _1610___mcc_h17 = _source55.dtor_typ;
        DAST._IType _1611_typ = _1610___mcc_h17;
        Dafny.ISequence<DAST._IExpression> _1612_dims = _1609___mcc_h16;
        {
          BigInteger _1613_i;
          _1613_i = (new BigInteger((_1612_dims).Count)) - (BigInteger.One);
          Dafny.ISequence<Dafny.Rune> _1614_genTyp;
          Dafny.ISequence<Dafny.Rune> _out200;
          _out200 = DCOMP.COMP.GenType(_1611_typ, false, false);
          _1614_genTyp = _out200;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1614_genTyp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::std::default::Default>::default()"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          while ((_1613_i).Sign != -1) {
            Dafny.ISequence<Dafny.Rune> _1615_recursiveGen;
            bool _1616___v37;
            bool _1617_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1618_recIdents;
            Dafny.ISequence<Dafny.Rune> _out201;
            bool _out202;
            bool _out203;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out204;
            DCOMP.COMP.GenExpr((_1612_dims).Select(_1613_i), selfIdent, @params, true, out _out201, out _out202, out _out203, out _out204);
            _1615_recursiveGen = _out201;
            _1616___v37 = _out202;
            _1617_isErased = _out203;
            _1618_recIdents = _out204;
            if (!(_1617_isErased)) {
              _1615_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1615_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::std::cell::RefCell::new(vec!["), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("; <usize as ::dafny_runtime::NumCast>::from(")), _1615_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]))"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1618_recIdents);
            _1613_i = (_1613_i) - (BigInteger.One);
          }
          isOwned = true;
          isErased = false;
        }
      } else if (_source55.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1619___mcc_h18 = _source55.dtor_path;
        Dafny.ISequence<DAST._IType> _1620___mcc_h19 = _source55.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _1621___mcc_h20 = _source55.dtor_variant;
        bool _1622___mcc_h21 = _source55.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _1623___mcc_h22 = _source55.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _1624_values = _1623___mcc_h22;
        bool _1625_isCo = _1622___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _1626_variant = _1621___mcc_h20;
        Dafny.ISequence<DAST._IType> _1627_typeArgs = _1620___mcc_h19;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1628_path = _1619___mcc_h18;
        {
          Dafny.ISequence<Dafny.Rune> _1629_path;
          Dafny.ISequence<Dafny.Rune> _out205;
          _out205 = DCOMP.COMP.GenPath(_1628_path);
          _1629_path = _out205;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _1629_path), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          if ((new BigInteger((_1627_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
            BigInteger _1630_i;
            _1630_i = BigInteger.Zero;
            while ((_1630_i) < (new BigInteger((_1627_typeArgs).Count))) {
              if ((_1630_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _1631_typeString;
              Dafny.ISequence<Dafny.Rune> _out206;
              _out206 = DCOMP.COMP.GenType((_1627_typeArgs).Select(_1630_i), false, false);
              _1631_typeString = _out206;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1631_typeString);
              _1630_i = (_1630_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_1626_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _1632_i;
          _1632_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"));
          while ((_1632_i) < (new BigInteger((_1624_values).Count))) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs41 = (_1624_values).Select(_1632_i);
            Dafny.ISequence<Dafny.Rune> _1633_name = _let_tmp_rhs41.dtor__0;
            DAST._IExpression _1634_value = _let_tmp_rhs41.dtor__1;
            if ((_1632_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            if (_1625_isCo) {
              Dafny.ISequence<Dafny.Rune> _1635_recursiveGen;
              bool _1636___v38;
              bool _1637_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1638_recIdents;
              Dafny.ISequence<Dafny.Rune> _out207;
              bool _out208;
              bool _out209;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out210;
              DCOMP.COMP.GenExpr(_1634_value, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out207, out _out208, out _out209, out _out210);
              _1635_recursiveGen = _out207;
              _1636___v38 = _out208;
              _1637_isErased = _out209;
              _1638_recIdents = _out210;
              if (!(_1637_isErased)) {
                _1635_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1635_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _1635_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1635_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1638_recIdents);
              Dafny.ISequence<Dafny.Rune> _1639_allReadCloned;
              _1639_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_1638_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _1640_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_2 in (_1638_recIdents).Elements) {
                  _1640_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_2;
                  if ((_1638_recIdents).Contains(_1640_next)) {
                    goto after__ASSIGN_SUCH_THAT_2;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 1945)");
              after__ASSIGN_SUCH_THAT_2:;
                _1639_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1639_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_1640_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_1640_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _1638_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_1638_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1640_next));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_1633_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n")), _1639_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), _1635_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
            } else {
              Dafny.ISequence<Dafny.Rune> _1641_recursiveGen;
              bool _1642___v39;
              bool _1643_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1644_recIdents;
              Dafny.ISequence<Dafny.Rune> _out211;
              bool _out212;
              bool _out213;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out214;
              DCOMP.COMP.GenExpr(_1634_value, selfIdent, @params, true, out _out211, out _out212, out _out213, out _out214);
              _1641_recursiveGen = _out211;
              _1642___v39 = _out212;
              _1643_isErased = _out213;
              _1644_recIdents = _out214;
              if (!(_1643_isErased)) {
                _1641_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1641_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _1641_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1641_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_1633_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1641_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1644_recIdents);
            }
            _1632_i = (_1632_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" })"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source55.is_Convert) {
        DAST._IExpression _1645___mcc_h23 = _source55.dtor_value;
        DAST._IType _1646___mcc_h24 = _source55.dtor_from;
        DAST._IType _1647___mcc_h25 = _source55.dtor_typ;
        DAST._IType _1648_toTpe = _1647___mcc_h25;
        DAST._IType _1649_fromTpe = _1646___mcc_h24;
        DAST._IExpression _1650_expr = _1645___mcc_h23;
        {
          if (object.Equals(_1649_fromTpe, _1648_toTpe)) {
            Dafny.ISequence<Dafny.Rune> _1651_recursiveGen;
            bool _1652_recOwned;
            bool _1653_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1654_recIdents;
            Dafny.ISequence<Dafny.Rune> _out215;
            bool _out216;
            bool _out217;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out218;
            DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out215, out _out216, out _out217, out _out218);
            _1651_recursiveGen = _out215;
            _1652_recOwned = _out216;
            _1653_recErased = _out217;
            _1654_recIdents = _out218;
            s = _1651_recursiveGen;
            isOwned = _1652_recOwned;
            isErased = _1653_recErased;
            readIdents = _1654_recIdents;
          } else {
            _System._ITuple2<DAST._IType, DAST._IType> _source61 = _System.Tuple2<DAST._IType, DAST._IType>.create(_1649_fromTpe, _1648_toTpe);
            DAST._IType _1655___mcc_h311 = _source61.dtor__0;
            DAST._IType _1656___mcc_h312 = _source61.dtor__1;
            DAST._IType _source62 = _1655___mcc_h311;
            if (_source62.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1657___mcc_h315 = _source62.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _1658___mcc_h316 = _source62.dtor_typeArgs;
              DAST._IResolvedType _1659___mcc_h317 = _source62.dtor_resolved;
              DAST._IResolvedType _source63 = _1659___mcc_h317;
              if (_source63.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1660___mcc_h327 = _source63.dtor_path;
                DAST._IType _source64 = _1656___mcc_h312;
                if (_source64.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1661___mcc_h331 = _source64.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1662___mcc_h332 = _source64.dtor_typeArgs;
                  DAST._IResolvedType _1663___mcc_h333 = _source64.dtor_resolved;
                  DAST._IResolvedType _source65 = _1663___mcc_h333;
                  if (_source65.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1664___mcc_h337 = _source65.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1665_recursiveGen;
                      bool _1666_recOwned;
                      bool _1667_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1668_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out219;
                      bool _out220;
                      bool _out221;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out222;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out219, out _out220, out _out221, out _out222);
                      _1665_recursiveGen = _out219;
                      _1666_recOwned = _out220;
                      _1667_recErased = _out221;
                      _1668_recIdents = _out222;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1665_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1666_recOwned;
                      isErased = _1667_recErased;
                      readIdents = _1668_recIdents;
                    }
                  } else if (_source65.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1669___mcc_h339 = _source65.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1670_recursiveGen;
                      bool _1671_recOwned;
                      bool _1672_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1673_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out223;
                      bool _out224;
                      bool _out225;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out226;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out223, out _out224, out _out225, out _out226);
                      _1670_recursiveGen = _out223;
                      _1671_recOwned = _out224;
                      _1672_recErased = _out225;
                      _1673_recIdents = _out226;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1670_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1671_recOwned;
                      isErased = _1672_recErased;
                      readIdents = _1673_recIdents;
                    }
                  } else {
                    DAST._IType _1674___mcc_h341 = _source65.dtor_Newtype_a0;
                    DAST._IType _1675_b = _1674___mcc_h341;
                    {
                      if (object.Equals(_1649_fromTpe, _1675_b)) {
                        Dafny.ISequence<Dafny.Rune> _1676_recursiveGen;
                        bool _1677_recOwned;
                        bool _1678_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1679_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out227;
                        bool _out228;
                        bool _out229;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out230;
                        DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out227, out _out228, out _out229, out _out230);
                        _1676_recursiveGen = _out227;
                        _1677_recOwned = _out228;
                        _1678_recErased = _out229;
                        _1679_recIdents = _out230;
                        Dafny.ISequence<Dafny.Rune> _1680_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out231;
                        _out231 = DCOMP.COMP.GenType(_1648_toTpe, true, false);
                        _1680_rhsType = _out231;
                        Dafny.ISequence<Dafny.Rune> _1681_uneraseFn;
                        _1681_uneraseFn = ((_1677_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1680_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1681_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1676_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1677_recOwned;
                        isErased = false;
                        readIdents = _1679_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out232;
                        bool _out233;
                        bool _out234;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out235;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1650_expr, _1649_fromTpe, _1675_b), _1675_b, _1648_toTpe), selfIdent, @params, mustOwn, out _out232, out _out233, out _out234, out _out235);
                        s = _out232;
                        isOwned = _out233;
                        isErased = _out234;
                        readIdents = _out235;
                      }
                    }
                  }
                } else if (_source64.is_Nullable) {
                  DAST._IType _1682___mcc_h343 = _source64.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1683_recursiveGen;
                    bool _1684_recOwned;
                    bool _1685_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1686_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out236;
                    bool _out237;
                    bool _out238;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out239;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out236, out _out237, out _out238, out _out239);
                    _1683_recursiveGen = _out236;
                    _1684_recOwned = _out237;
                    _1685_recErased = _out238;
                    _1686_recIdents = _out239;
                    if (!(_1684_recOwned)) {
                      _1683_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1683_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1683_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1685_recErased;
                    readIdents = _1686_recIdents;
                  }
                } else if (_source64.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1687___mcc_h345 = _source64.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1688_recursiveGen;
                    bool _1689_recOwned;
                    bool _1690_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1691_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out240;
                    bool _out241;
                    bool _out242;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out243;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out240, out _out241, out _out242, out _out243);
                    _1688_recursiveGen = _out240;
                    _1689_recOwned = _out241;
                    _1690_recErased = _out242;
                    _1691_recIdents = _out243;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1688_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1689_recOwned;
                    isErased = _1690_recErased;
                    readIdents = _1691_recIdents;
                  }
                } else if (_source64.is_Array) {
                  DAST._IType _1692___mcc_h347 = _source64.dtor_element;
                  BigInteger _1693___mcc_h348 = _source64.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1694_recursiveGen;
                    bool _1695_recOwned;
                    bool _1696_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1697_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out244;
                    bool _out245;
                    bool _out246;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out247;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out244, out _out245, out _out246, out _out247);
                    _1694_recursiveGen = _out244;
                    _1695_recOwned = _out245;
                    _1696_recErased = _out246;
                    _1697_recIdents = _out247;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1694_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1695_recOwned;
                    isErased = _1696_recErased;
                    readIdents = _1697_recIdents;
                  }
                } else if (_source64.is_Seq) {
                  DAST._IType _1698___mcc_h351 = _source64.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1699_recursiveGen;
                    bool _1700_recOwned;
                    bool _1701_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1702_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out248;
                    bool _out249;
                    bool _out250;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out251;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out248, out _out249, out _out250, out _out251);
                    _1699_recursiveGen = _out248;
                    _1700_recOwned = _out249;
                    _1701_recErased = _out250;
                    _1702_recIdents = _out251;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1699_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1700_recOwned;
                    isErased = _1701_recErased;
                    readIdents = _1702_recIdents;
                  }
                } else if (_source64.is_Set) {
                  DAST._IType _1703___mcc_h353 = _source64.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1704_recursiveGen;
                    bool _1705_recOwned;
                    bool _1706_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1707_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out252;
                    bool _out253;
                    bool _out254;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out255;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out252, out _out253, out _out254, out _out255);
                    _1704_recursiveGen = _out252;
                    _1705_recOwned = _out253;
                    _1706_recErased = _out254;
                    _1707_recIdents = _out255;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1704_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1705_recOwned;
                    isErased = _1706_recErased;
                    readIdents = _1707_recIdents;
                  }
                } else if (_source64.is_Multiset) {
                  DAST._IType _1708___mcc_h355 = _source64.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1709_recursiveGen;
                    bool _1710_recOwned;
                    bool _1711_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1712_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out256;
                    bool _out257;
                    bool _out258;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out259;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out256, out _out257, out _out258, out _out259);
                    _1709_recursiveGen = _out256;
                    _1710_recOwned = _out257;
                    _1711_recErased = _out258;
                    _1712_recIdents = _out259;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1709_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1710_recOwned;
                    isErased = _1711_recErased;
                    readIdents = _1712_recIdents;
                  }
                } else if (_source64.is_Map) {
                  DAST._IType _1713___mcc_h357 = _source64.dtor_key;
                  DAST._IType _1714___mcc_h358 = _source64.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1715_recursiveGen;
                    bool _1716_recOwned;
                    bool _1717_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1718_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out260;
                    bool _out261;
                    bool _out262;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out263;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out260, out _out261, out _out262, out _out263);
                    _1715_recursiveGen = _out260;
                    _1716_recOwned = _out261;
                    _1717_recErased = _out262;
                    _1718_recIdents = _out263;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1715_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1716_recOwned;
                    isErased = _1717_recErased;
                    readIdents = _1718_recIdents;
                  }
                } else if (_source64.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1719___mcc_h361 = _source64.dtor_args;
                  DAST._IType _1720___mcc_h362 = _source64.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1721_recursiveGen;
                    bool _1722_recOwned;
                    bool _1723_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1724_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out264;
                    bool _out265;
                    bool _out266;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out267;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out264, out _out265, out _out266, out _out267);
                    _1721_recursiveGen = _out264;
                    _1722_recOwned = _out265;
                    _1723_recErased = _out266;
                    _1724_recIdents = _out267;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1721_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1722_recOwned;
                    isErased = _1723_recErased;
                    readIdents = _1724_recIdents;
                  }
                } else if (_source64.is_Primitive) {
                  DAST._IPrimitive _1725___mcc_h365 = _source64.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1726_recursiveGen;
                    bool _1727_recOwned;
                    bool _1728_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1729_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out268;
                    bool _out269;
                    bool _out270;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out271;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out268, out _out269, out _out270, out _out271);
                    _1726_recursiveGen = _out268;
                    _1727_recOwned = _out269;
                    _1728_recErased = _out270;
                    _1729_recIdents = _out271;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1726_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1727_recOwned;
                    isErased = _1728_recErased;
                    readIdents = _1729_recIdents;
                  }
                } else if (_source64.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1730___mcc_h367 = _source64.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1731_recursiveGen;
                    bool _1732_recOwned;
                    bool _1733_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1734_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out272;
                    bool _out273;
                    bool _out274;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out275;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out272, out _out273, out _out274, out _out275);
                    _1731_recursiveGen = _out272;
                    _1732_recOwned = _out273;
                    _1733_recErased = _out274;
                    _1734_recIdents = _out275;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1731_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1732_recOwned;
                    isErased = _1733_recErased;
                    readIdents = _1734_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1735___mcc_h369 = _source64.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1736_recursiveGen;
                    bool _1737_recOwned;
                    bool _1738_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1739_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out276;
                    bool _out277;
                    bool _out278;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out279;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out276, out _out277, out _out278, out _out279);
                    _1736_recursiveGen = _out276;
                    _1737_recOwned = _out277;
                    _1738_recErased = _out278;
                    _1739_recIdents = _out279;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1736_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1737_recOwned;
                    isErased = _1738_recErased;
                    readIdents = _1739_recIdents;
                  }
                }
              } else if (_source63.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1740___mcc_h371 = _source63.dtor_path;
                DAST._IType _source66 = _1656___mcc_h312;
                if (_source66.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1741___mcc_h375 = _source66.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1742___mcc_h376 = _source66.dtor_typeArgs;
                  DAST._IResolvedType _1743___mcc_h377 = _source66.dtor_resolved;
                  DAST._IResolvedType _source67 = _1743___mcc_h377;
                  if (_source67.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1744___mcc_h381 = _source67.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1745_recursiveGen;
                      bool _1746_recOwned;
                      bool _1747_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1748_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out280;
                      bool _out281;
                      bool _out282;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out283;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out280, out _out281, out _out282, out _out283);
                      _1745_recursiveGen = _out280;
                      _1746_recOwned = _out281;
                      _1747_recErased = _out282;
                      _1748_recIdents = _out283;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1745_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1746_recOwned;
                      isErased = _1747_recErased;
                      readIdents = _1748_recIdents;
                    }
                  } else if (_source67.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1749___mcc_h383 = _source67.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1750_recursiveGen;
                      bool _1751_recOwned;
                      bool _1752_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1753_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out284;
                      bool _out285;
                      bool _out286;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out287;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out284, out _out285, out _out286, out _out287);
                      _1750_recursiveGen = _out284;
                      _1751_recOwned = _out285;
                      _1752_recErased = _out286;
                      _1753_recIdents = _out287;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1750_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1751_recOwned;
                      isErased = _1752_recErased;
                      readIdents = _1753_recIdents;
                    }
                  } else {
                    DAST._IType _1754___mcc_h385 = _source67.dtor_Newtype_a0;
                    DAST._IType _1755_b = _1754___mcc_h385;
                    {
                      if (object.Equals(_1649_fromTpe, _1755_b)) {
                        Dafny.ISequence<Dafny.Rune> _1756_recursiveGen;
                        bool _1757_recOwned;
                        bool _1758_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1759_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out288;
                        bool _out289;
                        bool _out290;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out291;
                        DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out288, out _out289, out _out290, out _out291);
                        _1756_recursiveGen = _out288;
                        _1757_recOwned = _out289;
                        _1758_recErased = _out290;
                        _1759_recIdents = _out291;
                        Dafny.ISequence<Dafny.Rune> _1760_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out292;
                        _out292 = DCOMP.COMP.GenType(_1648_toTpe, true, false);
                        _1760_rhsType = _out292;
                        Dafny.ISequence<Dafny.Rune> _1761_uneraseFn;
                        _1761_uneraseFn = ((_1757_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1760_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1761_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1756_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1757_recOwned;
                        isErased = false;
                        readIdents = _1759_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out293;
                        bool _out294;
                        bool _out295;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out296;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1650_expr, _1649_fromTpe, _1755_b), _1755_b, _1648_toTpe), selfIdent, @params, mustOwn, out _out293, out _out294, out _out295, out _out296);
                        s = _out293;
                        isOwned = _out294;
                        isErased = _out295;
                        readIdents = _out296;
                      }
                    }
                  }
                } else if (_source66.is_Nullable) {
                  DAST._IType _1762___mcc_h387 = _source66.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1763_recursiveGen;
                    bool _1764_recOwned;
                    bool _1765_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1766_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out297;
                    bool _out298;
                    bool _out299;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out300;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out297, out _out298, out _out299, out _out300);
                    _1763_recursiveGen = _out297;
                    _1764_recOwned = _out298;
                    _1765_recErased = _out299;
                    _1766_recIdents = _out300;
                    if (!(_1764_recOwned)) {
                      _1763_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1763_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1763_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1765_recErased;
                    readIdents = _1766_recIdents;
                  }
                } else if (_source66.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1767___mcc_h389 = _source66.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1768_recursiveGen;
                    bool _1769_recOwned;
                    bool _1770_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1771_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out301;
                    bool _out302;
                    bool _out303;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out304;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out301, out _out302, out _out303, out _out304);
                    _1768_recursiveGen = _out301;
                    _1769_recOwned = _out302;
                    _1770_recErased = _out303;
                    _1771_recIdents = _out304;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1768_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1769_recOwned;
                    isErased = _1770_recErased;
                    readIdents = _1771_recIdents;
                  }
                } else if (_source66.is_Array) {
                  DAST._IType _1772___mcc_h391 = _source66.dtor_element;
                  BigInteger _1773___mcc_h392 = _source66.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1774_recursiveGen;
                    bool _1775_recOwned;
                    bool _1776_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1777_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out305;
                    bool _out306;
                    bool _out307;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out308;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out305, out _out306, out _out307, out _out308);
                    _1774_recursiveGen = _out305;
                    _1775_recOwned = _out306;
                    _1776_recErased = _out307;
                    _1777_recIdents = _out308;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1774_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1775_recOwned;
                    isErased = _1776_recErased;
                    readIdents = _1777_recIdents;
                  }
                } else if (_source66.is_Seq) {
                  DAST._IType _1778___mcc_h395 = _source66.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1779_recursiveGen;
                    bool _1780_recOwned;
                    bool _1781_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1782_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out309;
                    bool _out310;
                    bool _out311;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out312;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out309, out _out310, out _out311, out _out312);
                    _1779_recursiveGen = _out309;
                    _1780_recOwned = _out310;
                    _1781_recErased = _out311;
                    _1782_recIdents = _out312;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1779_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1780_recOwned;
                    isErased = _1781_recErased;
                    readIdents = _1782_recIdents;
                  }
                } else if (_source66.is_Set) {
                  DAST._IType _1783___mcc_h397 = _source66.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1784_recursiveGen;
                    bool _1785_recOwned;
                    bool _1786_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1787_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out313;
                    bool _out314;
                    bool _out315;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out316;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out313, out _out314, out _out315, out _out316);
                    _1784_recursiveGen = _out313;
                    _1785_recOwned = _out314;
                    _1786_recErased = _out315;
                    _1787_recIdents = _out316;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1784_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1785_recOwned;
                    isErased = _1786_recErased;
                    readIdents = _1787_recIdents;
                  }
                } else if (_source66.is_Multiset) {
                  DAST._IType _1788___mcc_h399 = _source66.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1789_recursiveGen;
                    bool _1790_recOwned;
                    bool _1791_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1792_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out317;
                    bool _out318;
                    bool _out319;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out320;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out317, out _out318, out _out319, out _out320);
                    _1789_recursiveGen = _out317;
                    _1790_recOwned = _out318;
                    _1791_recErased = _out319;
                    _1792_recIdents = _out320;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1789_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1790_recOwned;
                    isErased = _1791_recErased;
                    readIdents = _1792_recIdents;
                  }
                } else if (_source66.is_Map) {
                  DAST._IType _1793___mcc_h401 = _source66.dtor_key;
                  DAST._IType _1794___mcc_h402 = _source66.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1795_recursiveGen;
                    bool _1796_recOwned;
                    bool _1797_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1798_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out321;
                    bool _out322;
                    bool _out323;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out324;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out321, out _out322, out _out323, out _out324);
                    _1795_recursiveGen = _out321;
                    _1796_recOwned = _out322;
                    _1797_recErased = _out323;
                    _1798_recIdents = _out324;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1795_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1796_recOwned;
                    isErased = _1797_recErased;
                    readIdents = _1798_recIdents;
                  }
                } else if (_source66.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1799___mcc_h405 = _source66.dtor_args;
                  DAST._IType _1800___mcc_h406 = _source66.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1801_recursiveGen;
                    bool _1802_recOwned;
                    bool _1803_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1804_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out325;
                    bool _out326;
                    bool _out327;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out328;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out325, out _out326, out _out327, out _out328);
                    _1801_recursiveGen = _out325;
                    _1802_recOwned = _out326;
                    _1803_recErased = _out327;
                    _1804_recIdents = _out328;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1801_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1802_recOwned;
                    isErased = _1803_recErased;
                    readIdents = _1804_recIdents;
                  }
                } else if (_source66.is_Primitive) {
                  DAST._IPrimitive _1805___mcc_h409 = _source66.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1806_recursiveGen;
                    bool _1807_recOwned;
                    bool _1808_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1809_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out329;
                    bool _out330;
                    bool _out331;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out332;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out329, out _out330, out _out331, out _out332);
                    _1806_recursiveGen = _out329;
                    _1807_recOwned = _out330;
                    _1808_recErased = _out331;
                    _1809_recIdents = _out332;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1806_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1807_recOwned;
                    isErased = _1808_recErased;
                    readIdents = _1809_recIdents;
                  }
                } else if (_source66.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1810___mcc_h411 = _source66.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1811_recursiveGen;
                    bool _1812_recOwned;
                    bool _1813_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1814_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out333;
                    bool _out334;
                    bool _out335;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out336;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out333, out _out334, out _out335, out _out336);
                    _1811_recursiveGen = _out333;
                    _1812_recOwned = _out334;
                    _1813_recErased = _out335;
                    _1814_recIdents = _out336;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1811_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1812_recOwned;
                    isErased = _1813_recErased;
                    readIdents = _1814_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1815___mcc_h413 = _source66.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1816_recursiveGen;
                    bool _1817_recOwned;
                    bool _1818_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1819_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out337;
                    bool _out338;
                    bool _out339;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out340;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out337, out _out338, out _out339, out _out340);
                    _1816_recursiveGen = _out337;
                    _1817_recOwned = _out338;
                    _1818_recErased = _out339;
                    _1819_recIdents = _out340;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1816_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1817_recOwned;
                    isErased = _1818_recErased;
                    readIdents = _1819_recIdents;
                  }
                }
              } else {
                DAST._IType _1820___mcc_h415 = _source63.dtor_Newtype_a0;
                DAST._IType _source68 = _1656___mcc_h312;
                if (_source68.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1821___mcc_h419 = _source68.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1822___mcc_h420 = _source68.dtor_typeArgs;
                  DAST._IResolvedType _1823___mcc_h421 = _source68.dtor_resolved;
                  DAST._IResolvedType _source69 = _1823___mcc_h421;
                  if (_source69.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1824___mcc_h428 = _source69.dtor_path;
                    DAST._IType _1825_b = _1820___mcc_h415;
                    {
                      if (object.Equals(_1825_b, _1648_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _1826_recursiveGen;
                        bool _1827_recOwned;
                        bool _1828_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1829_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out341;
                        bool _out342;
                        bool _out343;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out344;
                        DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out341, out _out342, out _out343, out _out344);
                        _1826_recursiveGen = _out341;
                        _1827_recOwned = _out342;
                        _1828_recErased = _out343;
                        _1829_recIdents = _out344;
                        Dafny.ISequence<Dafny.Rune> _1830_uneraseFn;
                        _1830_uneraseFn = ((_1827_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1830_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1826_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1827_recOwned;
                        isErased = true;
                        readIdents = _1829_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out345;
                        bool _out346;
                        bool _out347;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out348;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1650_expr, _1649_fromTpe, _1825_b), _1825_b, _1648_toTpe), selfIdent, @params, mustOwn, out _out345, out _out346, out _out347, out _out348);
                        s = _out345;
                        isOwned = _out346;
                        isErased = _out347;
                        readIdents = _out348;
                      }
                    }
                  } else if (_source69.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1831___mcc_h431 = _source69.dtor_path;
                    DAST._IType _1832_b = _1820___mcc_h415;
                    {
                      if (object.Equals(_1832_b, _1648_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _1833_recursiveGen;
                        bool _1834_recOwned;
                        bool _1835_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1836_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out349;
                        bool _out350;
                        bool _out351;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out352;
                        DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out349, out _out350, out _out351, out _out352);
                        _1833_recursiveGen = _out349;
                        _1834_recOwned = _out350;
                        _1835_recErased = _out351;
                        _1836_recIdents = _out352;
                        Dafny.ISequence<Dafny.Rune> _1837_uneraseFn;
                        _1837_uneraseFn = ((_1834_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1837_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1833_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1834_recOwned;
                        isErased = true;
                        readIdents = _1836_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out353;
                        bool _out354;
                        bool _out355;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out356;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1650_expr, _1649_fromTpe, _1832_b), _1832_b, _1648_toTpe), selfIdent, @params, mustOwn, out _out353, out _out354, out _out355, out _out356);
                        s = _out353;
                        isOwned = _out354;
                        isErased = _out355;
                        readIdents = _out356;
                      }
                    }
                  } else {
                    DAST._IType _1838___mcc_h434 = _source69.dtor_Newtype_a0;
                    DAST._IType _1839_b = _1838___mcc_h434;
                    {
                      if (object.Equals(_1649_fromTpe, _1839_b)) {
                        Dafny.ISequence<Dafny.Rune> _1840_recursiveGen;
                        bool _1841_recOwned;
                        bool _1842_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1843_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out357;
                        bool _out358;
                        bool _out359;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out360;
                        DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out357, out _out358, out _out359, out _out360);
                        _1840_recursiveGen = _out357;
                        _1841_recOwned = _out358;
                        _1842_recErased = _out359;
                        _1843_recIdents = _out360;
                        Dafny.ISequence<Dafny.Rune> _1844_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out361;
                        _out361 = DCOMP.COMP.GenType(_1648_toTpe, true, false);
                        _1844_rhsType = _out361;
                        Dafny.ISequence<Dafny.Rune> _1845_uneraseFn;
                        _1845_uneraseFn = ((_1841_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1844_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1845_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1840_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1841_recOwned;
                        isErased = false;
                        readIdents = _1843_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out362;
                        bool _out363;
                        bool _out364;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out365;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1650_expr, _1649_fromTpe, _1839_b), _1839_b, _1648_toTpe), selfIdent, @params, mustOwn, out _out362, out _out363, out _out364, out _out365);
                        s = _out362;
                        isOwned = _out363;
                        isErased = _out364;
                        readIdents = _out365;
                      }
                    }
                  }
                } else if (_source68.is_Nullable) {
                  DAST._IType _1846___mcc_h437 = _source68.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1847_recursiveGen;
                    bool _1848_recOwned;
                    bool _1849_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1850_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out366;
                    bool _out367;
                    bool _out368;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out369;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out366, out _out367, out _out368, out _out369);
                    _1847_recursiveGen = _out366;
                    _1848_recOwned = _out367;
                    _1849_recErased = _out368;
                    _1850_recIdents = _out369;
                    if (!(_1848_recOwned)) {
                      _1847_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1847_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1847_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1849_recErased;
                    readIdents = _1850_recIdents;
                  }
                } else if (_source68.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1851___mcc_h440 = _source68.dtor_Tuple_a0;
                  DAST._IType _1852_b = _1820___mcc_h415;
                  {
                    if (object.Equals(_1852_b, _1648_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1853_recursiveGen;
                      bool _1854_recOwned;
                      bool _1855_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1856_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out370;
                      bool _out371;
                      bool _out372;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out373;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out370, out _out371, out _out372, out _out373);
                      _1853_recursiveGen = _out370;
                      _1854_recOwned = _out371;
                      _1855_recErased = _out372;
                      _1856_recIdents = _out373;
                      Dafny.ISequence<Dafny.Rune> _1857_uneraseFn;
                      _1857_uneraseFn = ((_1854_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1857_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1853_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1854_recOwned;
                      isErased = true;
                      readIdents = _1856_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out374;
                      bool _out375;
                      bool _out376;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out377;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1650_expr, _1649_fromTpe, _1852_b), _1852_b, _1648_toTpe), selfIdent, @params, mustOwn, out _out374, out _out375, out _out376, out _out377);
                      s = _out374;
                      isOwned = _out375;
                      isErased = _out376;
                      readIdents = _out377;
                    }
                  }
                } else if (_source68.is_Array) {
                  DAST._IType _1858___mcc_h443 = _source68.dtor_element;
                  BigInteger _1859___mcc_h444 = _source68.dtor_dims;
                  DAST._IType _1860_b = _1820___mcc_h415;
                  {
                    if (object.Equals(_1860_b, _1648_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1861_recursiveGen;
                      bool _1862_recOwned;
                      bool _1863_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1864_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out378;
                      bool _out379;
                      bool _out380;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out381;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out378, out _out379, out _out380, out _out381);
                      _1861_recursiveGen = _out378;
                      _1862_recOwned = _out379;
                      _1863_recErased = _out380;
                      _1864_recIdents = _out381;
                      Dafny.ISequence<Dafny.Rune> _1865_uneraseFn;
                      _1865_uneraseFn = ((_1862_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1865_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1861_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1862_recOwned;
                      isErased = true;
                      readIdents = _1864_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out382;
                      bool _out383;
                      bool _out384;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out385;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1650_expr, _1649_fromTpe, _1860_b), _1860_b, _1648_toTpe), selfIdent, @params, mustOwn, out _out382, out _out383, out _out384, out _out385);
                      s = _out382;
                      isOwned = _out383;
                      isErased = _out384;
                      readIdents = _out385;
                    }
                  }
                } else if (_source68.is_Seq) {
                  DAST._IType _1866___mcc_h449 = _source68.dtor_element;
                  DAST._IType _1867_b = _1820___mcc_h415;
                  {
                    if (object.Equals(_1867_b, _1648_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1868_recursiveGen;
                      bool _1869_recOwned;
                      bool _1870_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1871_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out386;
                      bool _out387;
                      bool _out388;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out389;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out386, out _out387, out _out388, out _out389);
                      _1868_recursiveGen = _out386;
                      _1869_recOwned = _out387;
                      _1870_recErased = _out388;
                      _1871_recIdents = _out389;
                      Dafny.ISequence<Dafny.Rune> _1872_uneraseFn;
                      _1872_uneraseFn = ((_1869_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1872_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1868_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1869_recOwned;
                      isErased = true;
                      readIdents = _1871_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out390;
                      bool _out391;
                      bool _out392;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out393;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1650_expr, _1649_fromTpe, _1867_b), _1867_b, _1648_toTpe), selfIdent, @params, mustOwn, out _out390, out _out391, out _out392, out _out393);
                      s = _out390;
                      isOwned = _out391;
                      isErased = _out392;
                      readIdents = _out393;
                    }
                  }
                } else if (_source68.is_Set) {
                  DAST._IType _1873___mcc_h452 = _source68.dtor_element;
                  DAST._IType _1874_b = _1820___mcc_h415;
                  {
                    if (object.Equals(_1874_b, _1648_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1875_recursiveGen;
                      bool _1876_recOwned;
                      bool _1877_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1878_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out394;
                      bool _out395;
                      bool _out396;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out397;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out394, out _out395, out _out396, out _out397);
                      _1875_recursiveGen = _out394;
                      _1876_recOwned = _out395;
                      _1877_recErased = _out396;
                      _1878_recIdents = _out397;
                      Dafny.ISequence<Dafny.Rune> _1879_uneraseFn;
                      _1879_uneraseFn = ((_1876_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1879_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1875_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1876_recOwned;
                      isErased = true;
                      readIdents = _1878_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out398;
                      bool _out399;
                      bool _out400;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out401;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1650_expr, _1649_fromTpe, _1874_b), _1874_b, _1648_toTpe), selfIdent, @params, mustOwn, out _out398, out _out399, out _out400, out _out401);
                      s = _out398;
                      isOwned = _out399;
                      isErased = _out400;
                      readIdents = _out401;
                    }
                  }
                } else if (_source68.is_Multiset) {
                  DAST._IType _1880___mcc_h455 = _source68.dtor_element;
                  DAST._IType _1881_b = _1820___mcc_h415;
                  {
                    if (object.Equals(_1881_b, _1648_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1882_recursiveGen;
                      bool _1883_recOwned;
                      bool _1884_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1885_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out402;
                      bool _out403;
                      bool _out404;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out405;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out402, out _out403, out _out404, out _out405);
                      _1882_recursiveGen = _out402;
                      _1883_recOwned = _out403;
                      _1884_recErased = _out404;
                      _1885_recIdents = _out405;
                      Dafny.ISequence<Dafny.Rune> _1886_uneraseFn;
                      _1886_uneraseFn = ((_1883_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1886_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1882_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1883_recOwned;
                      isErased = true;
                      readIdents = _1885_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out406;
                      bool _out407;
                      bool _out408;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out409;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1650_expr, _1649_fromTpe, _1881_b), _1881_b, _1648_toTpe), selfIdent, @params, mustOwn, out _out406, out _out407, out _out408, out _out409);
                      s = _out406;
                      isOwned = _out407;
                      isErased = _out408;
                      readIdents = _out409;
                    }
                  }
                } else if (_source68.is_Map) {
                  DAST._IType _1887___mcc_h458 = _source68.dtor_key;
                  DAST._IType _1888___mcc_h459 = _source68.dtor_value;
                  DAST._IType _1889_b = _1820___mcc_h415;
                  {
                    if (object.Equals(_1889_b, _1648_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1890_recursiveGen;
                      bool _1891_recOwned;
                      bool _1892_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1893_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out410;
                      bool _out411;
                      bool _out412;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out413;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out410, out _out411, out _out412, out _out413);
                      _1890_recursiveGen = _out410;
                      _1891_recOwned = _out411;
                      _1892_recErased = _out412;
                      _1893_recIdents = _out413;
                      Dafny.ISequence<Dafny.Rune> _1894_uneraseFn;
                      _1894_uneraseFn = ((_1891_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1894_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1890_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1891_recOwned;
                      isErased = true;
                      readIdents = _1893_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out414;
                      bool _out415;
                      bool _out416;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out417;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1650_expr, _1649_fromTpe, _1889_b), _1889_b, _1648_toTpe), selfIdent, @params, mustOwn, out _out414, out _out415, out _out416, out _out417);
                      s = _out414;
                      isOwned = _out415;
                      isErased = _out416;
                      readIdents = _out417;
                    }
                  }
                } else if (_source68.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1895___mcc_h464 = _source68.dtor_args;
                  DAST._IType _1896___mcc_h465 = _source68.dtor_result;
                  DAST._IType _1897_b = _1820___mcc_h415;
                  {
                    if (object.Equals(_1897_b, _1648_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1898_recursiveGen;
                      bool _1899_recOwned;
                      bool _1900_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1901_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out418;
                      bool _out419;
                      bool _out420;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out421;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out418, out _out419, out _out420, out _out421);
                      _1898_recursiveGen = _out418;
                      _1899_recOwned = _out419;
                      _1900_recErased = _out420;
                      _1901_recIdents = _out421;
                      Dafny.ISequence<Dafny.Rune> _1902_uneraseFn;
                      _1902_uneraseFn = ((_1899_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1902_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1898_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1899_recOwned;
                      isErased = true;
                      readIdents = _1901_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out422;
                      bool _out423;
                      bool _out424;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out425;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1650_expr, _1649_fromTpe, _1897_b), _1897_b, _1648_toTpe), selfIdent, @params, mustOwn, out _out422, out _out423, out _out424, out _out425);
                      s = _out422;
                      isOwned = _out423;
                      isErased = _out424;
                      readIdents = _out425;
                    }
                  }
                } else if (_source68.is_Primitive) {
                  DAST._IPrimitive _1903___mcc_h470 = _source68.dtor_Primitive_a0;
                  DAST._IType _1904_b = _1820___mcc_h415;
                  {
                    if (object.Equals(_1904_b, _1648_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1905_recursiveGen;
                      bool _1906_recOwned;
                      bool _1907_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1908_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out426;
                      bool _out427;
                      bool _out428;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out429;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out426, out _out427, out _out428, out _out429);
                      _1905_recursiveGen = _out426;
                      _1906_recOwned = _out427;
                      _1907_recErased = _out428;
                      _1908_recIdents = _out429;
                      Dafny.ISequence<Dafny.Rune> _1909_uneraseFn;
                      _1909_uneraseFn = ((_1906_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1909_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1905_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1906_recOwned;
                      isErased = true;
                      readIdents = _1908_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out430;
                      bool _out431;
                      bool _out432;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out433;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1650_expr, _1649_fromTpe, _1904_b), _1904_b, _1648_toTpe), selfIdent, @params, mustOwn, out _out430, out _out431, out _out432, out _out433);
                      s = _out430;
                      isOwned = _out431;
                      isErased = _out432;
                      readIdents = _out433;
                    }
                  }
                } else if (_source68.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1910___mcc_h473 = _source68.dtor_Passthrough_a0;
                  DAST._IType _1911_b = _1820___mcc_h415;
                  {
                    if (object.Equals(_1911_b, _1648_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1912_recursiveGen;
                      bool _1913_recOwned;
                      bool _1914_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1915_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out434;
                      bool _out435;
                      bool _out436;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out437;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out434, out _out435, out _out436, out _out437);
                      _1912_recursiveGen = _out434;
                      _1913_recOwned = _out435;
                      _1914_recErased = _out436;
                      _1915_recIdents = _out437;
                      Dafny.ISequence<Dafny.Rune> _1916_uneraseFn;
                      _1916_uneraseFn = ((_1913_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1916_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1912_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1913_recOwned;
                      isErased = true;
                      readIdents = _1915_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out438;
                      bool _out439;
                      bool _out440;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out441;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1650_expr, _1649_fromTpe, _1911_b), _1911_b, _1648_toTpe), selfIdent, @params, mustOwn, out _out438, out _out439, out _out440, out _out441);
                      s = _out438;
                      isOwned = _out439;
                      isErased = _out440;
                      readIdents = _out441;
                    }
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1917___mcc_h476 = _source68.dtor_TypeArg_a0;
                  DAST._IType _1918_b = _1820___mcc_h415;
                  {
                    if (object.Equals(_1918_b, _1648_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1919_recursiveGen;
                      bool _1920_recOwned;
                      bool _1921_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1922_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out442;
                      bool _out443;
                      bool _out444;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out445;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out442, out _out443, out _out444, out _out445);
                      _1919_recursiveGen = _out442;
                      _1920_recOwned = _out443;
                      _1921_recErased = _out444;
                      _1922_recIdents = _out445;
                      Dafny.ISequence<Dafny.Rune> _1923_uneraseFn;
                      _1923_uneraseFn = ((_1920_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1923_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1919_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1920_recOwned;
                      isErased = true;
                      readIdents = _1922_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out446;
                      bool _out447;
                      bool _out448;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out449;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1650_expr, _1649_fromTpe, _1918_b), _1918_b, _1648_toTpe), selfIdent, @params, mustOwn, out _out446, out _out447, out _out448, out _out449);
                      s = _out446;
                      isOwned = _out447;
                      isErased = _out448;
                      readIdents = _out449;
                    }
                  }
                }
              }
            } else if (_source62.is_Nullable) {
              DAST._IType _1924___mcc_h479 = _source62.dtor_Nullable_a0;
              DAST._IType _source70 = _1656___mcc_h312;
              if (_source70.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1925___mcc_h483 = _source70.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1926___mcc_h484 = _source70.dtor_typeArgs;
                DAST._IResolvedType _1927___mcc_h485 = _source70.dtor_resolved;
                DAST._IResolvedType _source71 = _1927___mcc_h485;
                if (_source71.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1928___mcc_h492 = _source71.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1929_recursiveGen;
                    bool _1930_recOwned;
                    bool _1931_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1932_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out450;
                    bool _out451;
                    bool _out452;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out453;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out450, out _out451, out _out452, out _out453);
                    _1929_recursiveGen = _out450;
                    _1930_recOwned = _out451;
                    _1931_recErased = _out452;
                    _1932_recIdents = _out453;
                    if (!(_1930_recOwned)) {
                      _1929_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1929_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1929_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1930_recOwned;
                    isErased = _1931_recErased;
                    readIdents = _1932_recIdents;
                  }
                } else if (_source71.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1933___mcc_h495 = _source71.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1934_recursiveGen;
                    bool _1935_recOwned;
                    bool _1936_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1937_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out454;
                    bool _out455;
                    bool _out456;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out457;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out454, out _out455, out _out456, out _out457);
                    _1934_recursiveGen = _out454;
                    _1935_recOwned = _out455;
                    _1936_recErased = _out456;
                    _1937_recIdents = _out457;
                    if (!(_1935_recOwned)) {
                      _1934_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1934_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1934_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1935_recOwned;
                    isErased = _1936_recErased;
                    readIdents = _1937_recIdents;
                  }
                } else {
                  DAST._IType _1938___mcc_h498 = _source71.dtor_Newtype_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1939_recursiveGen;
                    bool _1940_recOwned;
                    bool _1941_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1942_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out458;
                    bool _out459;
                    bool _out460;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out461;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out458, out _out459, out _out460, out _out461);
                    _1939_recursiveGen = _out458;
                    _1940_recOwned = _out459;
                    _1941_recErased = _out460;
                    _1942_recIdents = _out461;
                    if (!(_1940_recOwned)) {
                      _1939_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1939_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1939_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1940_recOwned;
                    isErased = _1941_recErased;
                    readIdents = _1942_recIdents;
                  }
                }
              } else if (_source70.is_Nullable) {
                DAST._IType _1943___mcc_h501 = _source70.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1944_recursiveGen;
                  bool _1945_recOwned;
                  bool _1946_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1947_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out462;
                  bool _out463;
                  bool _out464;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out465;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out462, out _out463, out _out464, out _out465);
                  _1944_recursiveGen = _out462;
                  _1945_recOwned = _out463;
                  _1946_recErased = _out464;
                  _1947_recIdents = _out465;
                  if (!(_1945_recOwned)) {
                    _1944_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1944_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1944_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1945_recOwned;
                  isErased = _1946_recErased;
                  readIdents = _1947_recIdents;
                }
              } else if (_source70.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1948___mcc_h504 = _source70.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1949_recursiveGen;
                  bool _1950_recOwned;
                  bool _1951_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1952_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out466;
                  bool _out467;
                  bool _out468;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out469;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out466, out _out467, out _out468, out _out469);
                  _1949_recursiveGen = _out466;
                  _1950_recOwned = _out467;
                  _1951_recErased = _out468;
                  _1952_recIdents = _out469;
                  if (!(_1950_recOwned)) {
                    _1949_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1949_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1949_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1950_recOwned;
                  isErased = _1951_recErased;
                  readIdents = _1952_recIdents;
                }
              } else if (_source70.is_Array) {
                DAST._IType _1953___mcc_h507 = _source70.dtor_element;
                BigInteger _1954___mcc_h508 = _source70.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1955_recursiveGen;
                  bool _1956_recOwned;
                  bool _1957_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1958_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out470;
                  bool _out471;
                  bool _out472;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out473;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out470, out _out471, out _out472, out _out473);
                  _1955_recursiveGen = _out470;
                  _1956_recOwned = _out471;
                  _1957_recErased = _out472;
                  _1958_recIdents = _out473;
                  if (!(_1956_recOwned)) {
                    _1955_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1955_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1955_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1956_recOwned;
                  isErased = _1957_recErased;
                  readIdents = _1958_recIdents;
                }
              } else if (_source70.is_Seq) {
                DAST._IType _1959___mcc_h513 = _source70.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1960_recursiveGen;
                  bool _1961_recOwned;
                  bool _1962_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1963_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out474;
                  bool _out475;
                  bool _out476;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out477;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out474, out _out475, out _out476, out _out477);
                  _1960_recursiveGen = _out474;
                  _1961_recOwned = _out475;
                  _1962_recErased = _out476;
                  _1963_recIdents = _out477;
                  if (!(_1961_recOwned)) {
                    _1960_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1960_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1960_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1961_recOwned;
                  isErased = _1962_recErased;
                  readIdents = _1963_recIdents;
                }
              } else if (_source70.is_Set) {
                DAST._IType _1964___mcc_h516 = _source70.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1965_recursiveGen;
                  bool _1966_recOwned;
                  bool _1967_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1968_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out478;
                  bool _out479;
                  bool _out480;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out481;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out478, out _out479, out _out480, out _out481);
                  _1965_recursiveGen = _out478;
                  _1966_recOwned = _out479;
                  _1967_recErased = _out480;
                  _1968_recIdents = _out481;
                  if (!(_1966_recOwned)) {
                    _1965_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1965_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1965_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1966_recOwned;
                  isErased = _1967_recErased;
                  readIdents = _1968_recIdents;
                }
              } else if (_source70.is_Multiset) {
                DAST._IType _1969___mcc_h519 = _source70.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1970_recursiveGen;
                  bool _1971_recOwned;
                  bool _1972_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1973_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out482;
                  bool _out483;
                  bool _out484;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out485;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out482, out _out483, out _out484, out _out485);
                  _1970_recursiveGen = _out482;
                  _1971_recOwned = _out483;
                  _1972_recErased = _out484;
                  _1973_recIdents = _out485;
                  if (!(_1971_recOwned)) {
                    _1970_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1970_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1970_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1971_recOwned;
                  isErased = _1972_recErased;
                  readIdents = _1973_recIdents;
                }
              } else if (_source70.is_Map) {
                DAST._IType _1974___mcc_h522 = _source70.dtor_key;
                DAST._IType _1975___mcc_h523 = _source70.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1976_recursiveGen;
                  bool _1977_recOwned;
                  bool _1978_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1979_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out486;
                  bool _out487;
                  bool _out488;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out489;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out486, out _out487, out _out488, out _out489);
                  _1976_recursiveGen = _out486;
                  _1977_recOwned = _out487;
                  _1978_recErased = _out488;
                  _1979_recIdents = _out489;
                  if (!(_1977_recOwned)) {
                    _1976_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1976_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1976_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1977_recOwned;
                  isErased = _1978_recErased;
                  readIdents = _1979_recIdents;
                }
              } else if (_source70.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1980___mcc_h528 = _source70.dtor_args;
                DAST._IType _1981___mcc_h529 = _source70.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1982_recursiveGen;
                  bool _1983_recOwned;
                  bool _1984_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1985_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out490;
                  bool _out491;
                  bool _out492;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out493;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out490, out _out491, out _out492, out _out493);
                  _1982_recursiveGen = _out490;
                  _1983_recOwned = _out491;
                  _1984_recErased = _out492;
                  _1985_recIdents = _out493;
                  if (!(_1983_recOwned)) {
                    _1982_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1982_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1982_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1983_recOwned;
                  isErased = _1984_recErased;
                  readIdents = _1985_recIdents;
                }
              } else if (_source70.is_Primitive) {
                DAST._IPrimitive _1986___mcc_h534 = _source70.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1987_recursiveGen;
                  bool _1988_recOwned;
                  bool _1989_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1990_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out494;
                  bool _out495;
                  bool _out496;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out497;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out494, out _out495, out _out496, out _out497);
                  _1987_recursiveGen = _out494;
                  _1988_recOwned = _out495;
                  _1989_recErased = _out496;
                  _1990_recIdents = _out497;
                  if (!(_1988_recOwned)) {
                    _1987_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1987_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1987_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1988_recOwned;
                  isErased = _1989_recErased;
                  readIdents = _1990_recIdents;
                }
              } else if (_source70.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1991___mcc_h537 = _source70.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1992_recursiveGen;
                  bool _1993_recOwned;
                  bool _1994_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1995_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out498;
                  bool _out499;
                  bool _out500;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out501;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out498, out _out499, out _out500, out _out501);
                  _1992_recursiveGen = _out498;
                  _1993_recOwned = _out499;
                  _1994_recErased = _out500;
                  _1995_recIdents = _out501;
                  if (!(_1993_recOwned)) {
                    _1992_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1992_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1992_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1993_recOwned;
                  isErased = _1994_recErased;
                  readIdents = _1995_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1996___mcc_h540 = _source70.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1997_recursiveGen;
                  bool _1998_recOwned;
                  bool _1999_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2000_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out502;
                  bool _out503;
                  bool _out504;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out505;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out502, out _out503, out _out504, out _out505);
                  _1997_recursiveGen = _out502;
                  _1998_recOwned = _out503;
                  _1999_recErased = _out504;
                  _2000_recIdents = _out505;
                  if (!(_1998_recOwned)) {
                    _1997_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1997_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1997_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1998_recOwned;
                  isErased = _1999_recErased;
                  readIdents = _2000_recIdents;
                }
              }
            } else if (_source62.is_Tuple) {
              Dafny.ISequence<DAST._IType> _2001___mcc_h543 = _source62.dtor_Tuple_a0;
              DAST._IType _source72 = _1656___mcc_h312;
              if (_source72.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2002___mcc_h547 = _source72.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2003___mcc_h548 = _source72.dtor_typeArgs;
                DAST._IResolvedType _2004___mcc_h549 = _source72.dtor_resolved;
                DAST._IResolvedType _source73 = _2004___mcc_h549;
                if (_source73.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2005___mcc_h553 = _source73.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2006_recursiveGen;
                    bool _2007_recOwned;
                    bool _2008_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2009_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out506;
                    bool _out507;
                    bool _out508;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out509;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out506, out _out507, out _out508, out _out509);
                    _2006_recursiveGen = _out506;
                    _2007_recOwned = _out507;
                    _2008_recErased = _out508;
                    _2009_recIdents = _out509;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2006_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2007_recOwned;
                    isErased = _2008_recErased;
                    readIdents = _2009_recIdents;
                  }
                } else if (_source73.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2010___mcc_h555 = _source73.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2011_recursiveGen;
                    bool _2012_recOwned;
                    bool _2013_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2014_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out510;
                    bool _out511;
                    bool _out512;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out513;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out510, out _out511, out _out512, out _out513);
                    _2011_recursiveGen = _out510;
                    _2012_recOwned = _out511;
                    _2013_recErased = _out512;
                    _2014_recIdents = _out513;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2011_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2012_recOwned;
                    isErased = _2013_recErased;
                    readIdents = _2014_recIdents;
                  }
                } else {
                  DAST._IType _2015___mcc_h557 = _source73.dtor_Newtype_a0;
                  DAST._IType _2016_b = _2015___mcc_h557;
                  {
                    if (object.Equals(_1649_fromTpe, _2016_b)) {
                      Dafny.ISequence<Dafny.Rune> _2017_recursiveGen;
                      bool _2018_recOwned;
                      bool _2019_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2020_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out514;
                      bool _out515;
                      bool _out516;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out517;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out514, out _out515, out _out516, out _out517);
                      _2017_recursiveGen = _out514;
                      _2018_recOwned = _out515;
                      _2019_recErased = _out516;
                      _2020_recIdents = _out517;
                      Dafny.ISequence<Dafny.Rune> _2021_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out518;
                      _out518 = DCOMP.COMP.GenType(_1648_toTpe, true, false);
                      _2021_rhsType = _out518;
                      Dafny.ISequence<Dafny.Rune> _2022_uneraseFn;
                      _2022_uneraseFn = ((_2018_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2021_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2022_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2017_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2018_recOwned;
                      isErased = false;
                      readIdents = _2020_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out519;
                      bool _out520;
                      bool _out521;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out522;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1650_expr, _1649_fromTpe, _2016_b), _2016_b, _1648_toTpe), selfIdent, @params, mustOwn, out _out519, out _out520, out _out521, out _out522);
                      s = _out519;
                      isOwned = _out520;
                      isErased = _out521;
                      readIdents = _out522;
                    }
                  }
                }
              } else if (_source72.is_Nullable) {
                DAST._IType _2023___mcc_h559 = _source72.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2024_recursiveGen;
                  bool _2025_recOwned;
                  bool _2026_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2027_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out523;
                  bool _out524;
                  bool _out525;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out526;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out523, out _out524, out _out525, out _out526);
                  _2024_recursiveGen = _out523;
                  _2025_recOwned = _out524;
                  _2026_recErased = _out525;
                  _2027_recIdents = _out526;
                  if (!(_2025_recOwned)) {
                    _2024_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2024_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2024_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2026_recErased;
                  readIdents = _2027_recIdents;
                }
              } else if (_source72.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2028___mcc_h561 = _source72.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2029_recursiveGen;
                  bool _2030_recOwned;
                  bool _2031_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2032_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out527;
                  bool _out528;
                  bool _out529;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out530;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out527, out _out528, out _out529, out _out530);
                  _2029_recursiveGen = _out527;
                  _2030_recOwned = _out528;
                  _2031_recErased = _out529;
                  _2032_recIdents = _out530;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2029_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2030_recOwned;
                  isErased = _2031_recErased;
                  readIdents = _2032_recIdents;
                }
              } else if (_source72.is_Array) {
                DAST._IType _2033___mcc_h563 = _source72.dtor_element;
                BigInteger _2034___mcc_h564 = _source72.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2035_recursiveGen;
                  bool _2036_recOwned;
                  bool _2037_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2038_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out531;
                  bool _out532;
                  bool _out533;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out534;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out531, out _out532, out _out533, out _out534);
                  _2035_recursiveGen = _out531;
                  _2036_recOwned = _out532;
                  _2037_recErased = _out533;
                  _2038_recIdents = _out534;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2035_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2036_recOwned;
                  isErased = _2037_recErased;
                  readIdents = _2038_recIdents;
                }
              } else if (_source72.is_Seq) {
                DAST._IType _2039___mcc_h567 = _source72.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2040_recursiveGen;
                  bool _2041_recOwned;
                  bool _2042_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2043_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out535;
                  bool _out536;
                  bool _out537;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out538;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out535, out _out536, out _out537, out _out538);
                  _2040_recursiveGen = _out535;
                  _2041_recOwned = _out536;
                  _2042_recErased = _out537;
                  _2043_recIdents = _out538;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2040_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2041_recOwned;
                  isErased = _2042_recErased;
                  readIdents = _2043_recIdents;
                }
              } else if (_source72.is_Set) {
                DAST._IType _2044___mcc_h569 = _source72.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2045_recursiveGen;
                  bool _2046_recOwned;
                  bool _2047_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2048_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out539;
                  bool _out540;
                  bool _out541;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out542;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out539, out _out540, out _out541, out _out542);
                  _2045_recursiveGen = _out539;
                  _2046_recOwned = _out540;
                  _2047_recErased = _out541;
                  _2048_recIdents = _out542;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2045_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2046_recOwned;
                  isErased = _2047_recErased;
                  readIdents = _2048_recIdents;
                }
              } else if (_source72.is_Multiset) {
                DAST._IType _2049___mcc_h571 = _source72.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2050_recursiveGen;
                  bool _2051_recOwned;
                  bool _2052_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2053_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out543;
                  bool _out544;
                  bool _out545;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out546;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out543, out _out544, out _out545, out _out546);
                  _2050_recursiveGen = _out543;
                  _2051_recOwned = _out544;
                  _2052_recErased = _out545;
                  _2053_recIdents = _out546;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2050_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2051_recOwned;
                  isErased = _2052_recErased;
                  readIdents = _2053_recIdents;
                }
              } else if (_source72.is_Map) {
                DAST._IType _2054___mcc_h573 = _source72.dtor_key;
                DAST._IType _2055___mcc_h574 = _source72.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2056_recursiveGen;
                  bool _2057_recOwned;
                  bool _2058_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2059_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out547;
                  bool _out548;
                  bool _out549;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out550;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out547, out _out548, out _out549, out _out550);
                  _2056_recursiveGen = _out547;
                  _2057_recOwned = _out548;
                  _2058_recErased = _out549;
                  _2059_recIdents = _out550;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2056_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2057_recOwned;
                  isErased = _2058_recErased;
                  readIdents = _2059_recIdents;
                }
              } else if (_source72.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2060___mcc_h577 = _source72.dtor_args;
                DAST._IType _2061___mcc_h578 = _source72.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2062_recursiveGen;
                  bool _2063_recOwned;
                  bool _2064_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2065_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out551;
                  bool _out552;
                  bool _out553;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out554;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out551, out _out552, out _out553, out _out554);
                  _2062_recursiveGen = _out551;
                  _2063_recOwned = _out552;
                  _2064_recErased = _out553;
                  _2065_recIdents = _out554;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2062_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2063_recOwned;
                  isErased = _2064_recErased;
                  readIdents = _2065_recIdents;
                }
              } else if (_source72.is_Primitive) {
                DAST._IPrimitive _2066___mcc_h581 = _source72.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2067_recursiveGen;
                  bool _2068_recOwned;
                  bool _2069_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2070_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out555;
                  bool _out556;
                  bool _out557;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out558;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out555, out _out556, out _out557, out _out558);
                  _2067_recursiveGen = _out555;
                  _2068_recOwned = _out556;
                  _2069_recErased = _out557;
                  _2070_recIdents = _out558;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2067_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2068_recOwned;
                  isErased = _2069_recErased;
                  readIdents = _2070_recIdents;
                }
              } else if (_source72.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2071___mcc_h583 = _source72.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2072_recursiveGen;
                  bool _2073_recOwned;
                  bool _2074_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2075_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out559;
                  bool _out560;
                  bool _out561;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out562;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out559, out _out560, out _out561, out _out562);
                  _2072_recursiveGen = _out559;
                  _2073_recOwned = _out560;
                  _2074_recErased = _out561;
                  _2075_recIdents = _out562;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2072_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2073_recOwned;
                  isErased = _2074_recErased;
                  readIdents = _2075_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2076___mcc_h585 = _source72.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2077_recursiveGen;
                  bool _2078_recOwned;
                  bool _2079_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2080_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out563;
                  bool _out564;
                  bool _out565;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out566;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out563, out _out564, out _out565, out _out566);
                  _2077_recursiveGen = _out563;
                  _2078_recOwned = _out564;
                  _2079_recErased = _out565;
                  _2080_recIdents = _out566;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2077_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2078_recOwned;
                  isErased = _2079_recErased;
                  readIdents = _2080_recIdents;
                }
              }
            } else if (_source62.is_Array) {
              DAST._IType _2081___mcc_h587 = _source62.dtor_element;
              BigInteger _2082___mcc_h588 = _source62.dtor_dims;
              DAST._IType _source74 = _1656___mcc_h312;
              if (_source74.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2083___mcc_h595 = _source74.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2084___mcc_h596 = _source74.dtor_typeArgs;
                DAST._IResolvedType _2085___mcc_h597 = _source74.dtor_resolved;
                DAST._IResolvedType _source75 = _2085___mcc_h597;
                if (_source75.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2086___mcc_h601 = _source75.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2087_recursiveGen;
                    bool _2088_recOwned;
                    bool _2089_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2090_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out567;
                    bool _out568;
                    bool _out569;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out570;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out567, out _out568, out _out569, out _out570);
                    _2087_recursiveGen = _out567;
                    _2088_recOwned = _out568;
                    _2089_recErased = _out569;
                    _2090_recIdents = _out570;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2087_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2088_recOwned;
                    isErased = _2089_recErased;
                    readIdents = _2090_recIdents;
                  }
                } else if (_source75.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2091___mcc_h603 = _source75.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2092_recursiveGen;
                    bool _2093_recOwned;
                    bool _2094_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2095_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out571;
                    bool _out572;
                    bool _out573;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out574;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out571, out _out572, out _out573, out _out574);
                    _2092_recursiveGen = _out571;
                    _2093_recOwned = _out572;
                    _2094_recErased = _out573;
                    _2095_recIdents = _out574;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2092_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2093_recOwned;
                    isErased = _2094_recErased;
                    readIdents = _2095_recIdents;
                  }
                } else {
                  DAST._IType _2096___mcc_h605 = _source75.dtor_Newtype_a0;
                  DAST._IType _2097_b = _2096___mcc_h605;
                  {
                    if (object.Equals(_1649_fromTpe, _2097_b)) {
                      Dafny.ISequence<Dafny.Rune> _2098_recursiveGen;
                      bool _2099_recOwned;
                      bool _2100_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2101_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out575;
                      bool _out576;
                      bool _out577;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out578;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out575, out _out576, out _out577, out _out578);
                      _2098_recursiveGen = _out575;
                      _2099_recOwned = _out576;
                      _2100_recErased = _out577;
                      _2101_recIdents = _out578;
                      Dafny.ISequence<Dafny.Rune> _2102_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out579;
                      _out579 = DCOMP.COMP.GenType(_1648_toTpe, true, false);
                      _2102_rhsType = _out579;
                      Dafny.ISequence<Dafny.Rune> _2103_uneraseFn;
                      _2103_uneraseFn = ((_2099_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2102_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2103_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2098_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2099_recOwned;
                      isErased = false;
                      readIdents = _2101_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out580;
                      bool _out581;
                      bool _out582;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out583;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1650_expr, _1649_fromTpe, _2097_b), _2097_b, _1648_toTpe), selfIdent, @params, mustOwn, out _out580, out _out581, out _out582, out _out583);
                      s = _out580;
                      isOwned = _out581;
                      isErased = _out582;
                      readIdents = _out583;
                    }
                  }
                }
              } else if (_source74.is_Nullable) {
                DAST._IType _2104___mcc_h607 = _source74.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2105_recursiveGen;
                  bool _2106_recOwned;
                  bool _2107_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2108_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out584;
                  bool _out585;
                  bool _out586;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out587;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out584, out _out585, out _out586, out _out587);
                  _2105_recursiveGen = _out584;
                  _2106_recOwned = _out585;
                  _2107_recErased = _out586;
                  _2108_recIdents = _out587;
                  if (!(_2106_recOwned)) {
                    _2105_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2105_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2105_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2107_recErased;
                  readIdents = _2108_recIdents;
                }
              } else if (_source74.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2109___mcc_h609 = _source74.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2110_recursiveGen;
                  bool _2111_recOwned;
                  bool _2112_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2113_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out588;
                  bool _out589;
                  bool _out590;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out591;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out588, out _out589, out _out590, out _out591);
                  _2110_recursiveGen = _out588;
                  _2111_recOwned = _out589;
                  _2112_recErased = _out590;
                  _2113_recIdents = _out591;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2110_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2111_recOwned;
                  isErased = _2112_recErased;
                  readIdents = _2113_recIdents;
                }
              } else if (_source74.is_Array) {
                DAST._IType _2114___mcc_h611 = _source74.dtor_element;
                BigInteger _2115___mcc_h612 = _source74.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2116_recursiveGen;
                  bool _2117_recOwned;
                  bool _2118_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2119_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out592;
                  bool _out593;
                  bool _out594;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out595;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out592, out _out593, out _out594, out _out595);
                  _2116_recursiveGen = _out592;
                  _2117_recOwned = _out593;
                  _2118_recErased = _out594;
                  _2119_recIdents = _out595;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2116_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2117_recOwned;
                  isErased = _2118_recErased;
                  readIdents = _2119_recIdents;
                }
              } else if (_source74.is_Seq) {
                DAST._IType _2120___mcc_h615 = _source74.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2121_recursiveGen;
                  bool _2122_recOwned;
                  bool _2123_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2124_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out596;
                  bool _out597;
                  bool _out598;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out599;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out596, out _out597, out _out598, out _out599);
                  _2121_recursiveGen = _out596;
                  _2122_recOwned = _out597;
                  _2123_recErased = _out598;
                  _2124_recIdents = _out599;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2121_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2122_recOwned;
                  isErased = _2123_recErased;
                  readIdents = _2124_recIdents;
                }
              } else if (_source74.is_Set) {
                DAST._IType _2125___mcc_h617 = _source74.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2126_recursiveGen;
                  bool _2127_recOwned;
                  bool _2128_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2129_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out600;
                  bool _out601;
                  bool _out602;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out603;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out600, out _out601, out _out602, out _out603);
                  _2126_recursiveGen = _out600;
                  _2127_recOwned = _out601;
                  _2128_recErased = _out602;
                  _2129_recIdents = _out603;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2126_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2127_recOwned;
                  isErased = _2128_recErased;
                  readIdents = _2129_recIdents;
                }
              } else if (_source74.is_Multiset) {
                DAST._IType _2130___mcc_h619 = _source74.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2131_recursiveGen;
                  bool _2132_recOwned;
                  bool _2133_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2134_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out604;
                  bool _out605;
                  bool _out606;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out607;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out604, out _out605, out _out606, out _out607);
                  _2131_recursiveGen = _out604;
                  _2132_recOwned = _out605;
                  _2133_recErased = _out606;
                  _2134_recIdents = _out607;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2131_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2132_recOwned;
                  isErased = _2133_recErased;
                  readIdents = _2134_recIdents;
                }
              } else if (_source74.is_Map) {
                DAST._IType _2135___mcc_h621 = _source74.dtor_key;
                DAST._IType _2136___mcc_h622 = _source74.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2137_recursiveGen;
                  bool _2138_recOwned;
                  bool _2139_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2140_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out608;
                  bool _out609;
                  bool _out610;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out611;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out608, out _out609, out _out610, out _out611);
                  _2137_recursiveGen = _out608;
                  _2138_recOwned = _out609;
                  _2139_recErased = _out610;
                  _2140_recIdents = _out611;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2137_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2138_recOwned;
                  isErased = _2139_recErased;
                  readIdents = _2140_recIdents;
                }
              } else if (_source74.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2141___mcc_h625 = _source74.dtor_args;
                DAST._IType _2142___mcc_h626 = _source74.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2143_recursiveGen;
                  bool _2144_recOwned;
                  bool _2145_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2146_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out612;
                  bool _out613;
                  bool _out614;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out615;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out612, out _out613, out _out614, out _out615);
                  _2143_recursiveGen = _out612;
                  _2144_recOwned = _out613;
                  _2145_recErased = _out614;
                  _2146_recIdents = _out615;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2143_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2144_recOwned;
                  isErased = _2145_recErased;
                  readIdents = _2146_recIdents;
                }
              } else if (_source74.is_Primitive) {
                DAST._IPrimitive _2147___mcc_h629 = _source74.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2148_recursiveGen;
                  bool _2149_recOwned;
                  bool _2150_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2151_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out616;
                  bool _out617;
                  bool _out618;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out619;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out616, out _out617, out _out618, out _out619);
                  _2148_recursiveGen = _out616;
                  _2149_recOwned = _out617;
                  _2150_recErased = _out618;
                  _2151_recIdents = _out619;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2148_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2149_recOwned;
                  isErased = _2150_recErased;
                  readIdents = _2151_recIdents;
                }
              } else if (_source74.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2152___mcc_h631 = _source74.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2153_recursiveGen;
                  bool _2154_recOwned;
                  bool _2155_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2156_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out620;
                  bool _out621;
                  bool _out622;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out623;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out620, out _out621, out _out622, out _out623);
                  _2153_recursiveGen = _out620;
                  _2154_recOwned = _out621;
                  _2155_recErased = _out622;
                  _2156_recIdents = _out623;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2153_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2154_recOwned;
                  isErased = _2155_recErased;
                  readIdents = _2156_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2157___mcc_h633 = _source74.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2158_recursiveGen;
                  bool _2159_recOwned;
                  bool _2160_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2161_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out624;
                  bool _out625;
                  bool _out626;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out627;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out624, out _out625, out _out626, out _out627);
                  _2158_recursiveGen = _out624;
                  _2159_recOwned = _out625;
                  _2160_recErased = _out626;
                  _2161_recIdents = _out627;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2158_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2159_recOwned;
                  isErased = _2160_recErased;
                  readIdents = _2161_recIdents;
                }
              }
            } else if (_source62.is_Seq) {
              DAST._IType _2162___mcc_h635 = _source62.dtor_element;
              DAST._IType _source76 = _1656___mcc_h312;
              if (_source76.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2163___mcc_h639 = _source76.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2164___mcc_h640 = _source76.dtor_typeArgs;
                DAST._IResolvedType _2165___mcc_h641 = _source76.dtor_resolved;
                DAST._IResolvedType _source77 = _2165___mcc_h641;
                if (_source77.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2166___mcc_h645 = _source77.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2167_recursiveGen;
                    bool _2168_recOwned;
                    bool _2169_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2170_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out628;
                    bool _out629;
                    bool _out630;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out631;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out628, out _out629, out _out630, out _out631);
                    _2167_recursiveGen = _out628;
                    _2168_recOwned = _out629;
                    _2169_recErased = _out630;
                    _2170_recIdents = _out631;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2167_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2168_recOwned;
                    isErased = _2169_recErased;
                    readIdents = _2170_recIdents;
                  }
                } else if (_source77.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2171___mcc_h647 = _source77.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2172_recursiveGen;
                    bool _2173_recOwned;
                    bool _2174_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2175_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out632;
                    bool _out633;
                    bool _out634;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out635;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out632, out _out633, out _out634, out _out635);
                    _2172_recursiveGen = _out632;
                    _2173_recOwned = _out633;
                    _2174_recErased = _out634;
                    _2175_recIdents = _out635;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2172_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2173_recOwned;
                    isErased = _2174_recErased;
                    readIdents = _2175_recIdents;
                  }
                } else {
                  DAST._IType _2176___mcc_h649 = _source77.dtor_Newtype_a0;
                  DAST._IType _2177_b = _2176___mcc_h649;
                  {
                    if (object.Equals(_1649_fromTpe, _2177_b)) {
                      Dafny.ISequence<Dafny.Rune> _2178_recursiveGen;
                      bool _2179_recOwned;
                      bool _2180_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2181_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out636;
                      bool _out637;
                      bool _out638;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out639;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out636, out _out637, out _out638, out _out639);
                      _2178_recursiveGen = _out636;
                      _2179_recOwned = _out637;
                      _2180_recErased = _out638;
                      _2181_recIdents = _out639;
                      Dafny.ISequence<Dafny.Rune> _2182_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out640;
                      _out640 = DCOMP.COMP.GenType(_1648_toTpe, true, false);
                      _2182_rhsType = _out640;
                      Dafny.ISequence<Dafny.Rune> _2183_uneraseFn;
                      _2183_uneraseFn = ((_2179_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2182_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2183_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2178_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2179_recOwned;
                      isErased = false;
                      readIdents = _2181_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out641;
                      bool _out642;
                      bool _out643;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out644;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1650_expr, _1649_fromTpe, _2177_b), _2177_b, _1648_toTpe), selfIdent, @params, mustOwn, out _out641, out _out642, out _out643, out _out644);
                      s = _out641;
                      isOwned = _out642;
                      isErased = _out643;
                      readIdents = _out644;
                    }
                  }
                }
              } else if (_source76.is_Nullable) {
                DAST._IType _2184___mcc_h651 = _source76.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2185_recursiveGen;
                  bool _2186_recOwned;
                  bool _2187_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2188_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out645;
                  bool _out646;
                  bool _out647;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out648;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out645, out _out646, out _out647, out _out648);
                  _2185_recursiveGen = _out645;
                  _2186_recOwned = _out646;
                  _2187_recErased = _out647;
                  _2188_recIdents = _out648;
                  if (!(_2186_recOwned)) {
                    _2185_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2185_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2185_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2187_recErased;
                  readIdents = _2188_recIdents;
                }
              } else if (_source76.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2189___mcc_h653 = _source76.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2190_recursiveGen;
                  bool _2191_recOwned;
                  bool _2192_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2193_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out649;
                  bool _out650;
                  bool _out651;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out652;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out649, out _out650, out _out651, out _out652);
                  _2190_recursiveGen = _out649;
                  _2191_recOwned = _out650;
                  _2192_recErased = _out651;
                  _2193_recIdents = _out652;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2190_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2191_recOwned;
                  isErased = _2192_recErased;
                  readIdents = _2193_recIdents;
                }
              } else if (_source76.is_Array) {
                DAST._IType _2194___mcc_h655 = _source76.dtor_element;
                BigInteger _2195___mcc_h656 = _source76.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2196_recursiveGen;
                  bool _2197_recOwned;
                  bool _2198_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2199_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out653;
                  bool _out654;
                  bool _out655;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out656;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out653, out _out654, out _out655, out _out656);
                  _2196_recursiveGen = _out653;
                  _2197_recOwned = _out654;
                  _2198_recErased = _out655;
                  _2199_recIdents = _out656;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2196_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2197_recOwned;
                  isErased = _2198_recErased;
                  readIdents = _2199_recIdents;
                }
              } else if (_source76.is_Seq) {
                DAST._IType _2200___mcc_h659 = _source76.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2201_recursiveGen;
                  bool _2202_recOwned;
                  bool _2203_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2204_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out657;
                  bool _out658;
                  bool _out659;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out660;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out657, out _out658, out _out659, out _out660);
                  _2201_recursiveGen = _out657;
                  _2202_recOwned = _out658;
                  _2203_recErased = _out659;
                  _2204_recIdents = _out660;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2201_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2202_recOwned;
                  isErased = _2203_recErased;
                  readIdents = _2204_recIdents;
                }
              } else if (_source76.is_Set) {
                DAST._IType _2205___mcc_h661 = _source76.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2206_recursiveGen;
                  bool _2207_recOwned;
                  bool _2208_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2209_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out661;
                  bool _out662;
                  bool _out663;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out664;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out661, out _out662, out _out663, out _out664);
                  _2206_recursiveGen = _out661;
                  _2207_recOwned = _out662;
                  _2208_recErased = _out663;
                  _2209_recIdents = _out664;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2206_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2207_recOwned;
                  isErased = _2208_recErased;
                  readIdents = _2209_recIdents;
                }
              } else if (_source76.is_Multiset) {
                DAST._IType _2210___mcc_h663 = _source76.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2211_recursiveGen;
                  bool _2212_recOwned;
                  bool _2213_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2214_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out665;
                  bool _out666;
                  bool _out667;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out668;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out665, out _out666, out _out667, out _out668);
                  _2211_recursiveGen = _out665;
                  _2212_recOwned = _out666;
                  _2213_recErased = _out667;
                  _2214_recIdents = _out668;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2211_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2212_recOwned;
                  isErased = _2213_recErased;
                  readIdents = _2214_recIdents;
                }
              } else if (_source76.is_Map) {
                DAST._IType _2215___mcc_h665 = _source76.dtor_key;
                DAST._IType _2216___mcc_h666 = _source76.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2217_recursiveGen;
                  bool _2218_recOwned;
                  bool _2219_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2220_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out669;
                  bool _out670;
                  bool _out671;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out672;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out669, out _out670, out _out671, out _out672);
                  _2217_recursiveGen = _out669;
                  _2218_recOwned = _out670;
                  _2219_recErased = _out671;
                  _2220_recIdents = _out672;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2217_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2218_recOwned;
                  isErased = _2219_recErased;
                  readIdents = _2220_recIdents;
                }
              } else if (_source76.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2221___mcc_h669 = _source76.dtor_args;
                DAST._IType _2222___mcc_h670 = _source76.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2223_recursiveGen;
                  bool _2224_recOwned;
                  bool _2225_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2226_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out673;
                  bool _out674;
                  bool _out675;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out676;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out673, out _out674, out _out675, out _out676);
                  _2223_recursiveGen = _out673;
                  _2224_recOwned = _out674;
                  _2225_recErased = _out675;
                  _2226_recIdents = _out676;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2223_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2224_recOwned;
                  isErased = _2225_recErased;
                  readIdents = _2226_recIdents;
                }
              } else if (_source76.is_Primitive) {
                DAST._IPrimitive _2227___mcc_h673 = _source76.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2228_recursiveGen;
                  bool _2229_recOwned;
                  bool _2230_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2231_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out677;
                  bool _out678;
                  bool _out679;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out680;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out677, out _out678, out _out679, out _out680);
                  _2228_recursiveGen = _out677;
                  _2229_recOwned = _out678;
                  _2230_recErased = _out679;
                  _2231_recIdents = _out680;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2228_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2229_recOwned;
                  isErased = _2230_recErased;
                  readIdents = _2231_recIdents;
                }
              } else if (_source76.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2232___mcc_h675 = _source76.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2233_recursiveGen;
                  bool _2234_recOwned;
                  bool _2235_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2236_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out681;
                  bool _out682;
                  bool _out683;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out684;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out681, out _out682, out _out683, out _out684);
                  _2233_recursiveGen = _out681;
                  _2234_recOwned = _out682;
                  _2235_recErased = _out683;
                  _2236_recIdents = _out684;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2233_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2234_recOwned;
                  isErased = _2235_recErased;
                  readIdents = _2236_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2237___mcc_h677 = _source76.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2238_recursiveGen;
                  bool _2239_recOwned;
                  bool _2240_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2241_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out685;
                  bool _out686;
                  bool _out687;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out688;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out685, out _out686, out _out687, out _out688);
                  _2238_recursiveGen = _out685;
                  _2239_recOwned = _out686;
                  _2240_recErased = _out687;
                  _2241_recIdents = _out688;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2238_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2239_recOwned;
                  isErased = _2240_recErased;
                  readIdents = _2241_recIdents;
                }
              }
            } else if (_source62.is_Set) {
              DAST._IType _2242___mcc_h679 = _source62.dtor_element;
              DAST._IType _source78 = _1656___mcc_h312;
              if (_source78.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2243___mcc_h683 = _source78.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2244___mcc_h684 = _source78.dtor_typeArgs;
                DAST._IResolvedType _2245___mcc_h685 = _source78.dtor_resolved;
                DAST._IResolvedType _source79 = _2245___mcc_h685;
                if (_source79.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2246___mcc_h689 = _source79.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2247_recursiveGen;
                    bool _2248_recOwned;
                    bool _2249_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2250_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out689;
                    bool _out690;
                    bool _out691;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out692;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out689, out _out690, out _out691, out _out692);
                    _2247_recursiveGen = _out689;
                    _2248_recOwned = _out690;
                    _2249_recErased = _out691;
                    _2250_recIdents = _out692;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2247_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2248_recOwned;
                    isErased = _2249_recErased;
                    readIdents = _2250_recIdents;
                  }
                } else if (_source79.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2251___mcc_h691 = _source79.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2252_recursiveGen;
                    bool _2253_recOwned;
                    bool _2254_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2255_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out693;
                    bool _out694;
                    bool _out695;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out696;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out693, out _out694, out _out695, out _out696);
                    _2252_recursiveGen = _out693;
                    _2253_recOwned = _out694;
                    _2254_recErased = _out695;
                    _2255_recIdents = _out696;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2252_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2253_recOwned;
                    isErased = _2254_recErased;
                    readIdents = _2255_recIdents;
                  }
                } else {
                  DAST._IType _2256___mcc_h693 = _source79.dtor_Newtype_a0;
                  DAST._IType _2257_b = _2256___mcc_h693;
                  {
                    if (object.Equals(_1649_fromTpe, _2257_b)) {
                      Dafny.ISequence<Dafny.Rune> _2258_recursiveGen;
                      bool _2259_recOwned;
                      bool _2260_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2261_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out697;
                      bool _out698;
                      bool _out699;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out700;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out697, out _out698, out _out699, out _out700);
                      _2258_recursiveGen = _out697;
                      _2259_recOwned = _out698;
                      _2260_recErased = _out699;
                      _2261_recIdents = _out700;
                      Dafny.ISequence<Dafny.Rune> _2262_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out701;
                      _out701 = DCOMP.COMP.GenType(_1648_toTpe, true, false);
                      _2262_rhsType = _out701;
                      Dafny.ISequence<Dafny.Rune> _2263_uneraseFn;
                      _2263_uneraseFn = ((_2259_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2262_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2263_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2258_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2259_recOwned;
                      isErased = false;
                      readIdents = _2261_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out702;
                      bool _out703;
                      bool _out704;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out705;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1650_expr, _1649_fromTpe, _2257_b), _2257_b, _1648_toTpe), selfIdent, @params, mustOwn, out _out702, out _out703, out _out704, out _out705);
                      s = _out702;
                      isOwned = _out703;
                      isErased = _out704;
                      readIdents = _out705;
                    }
                  }
                }
              } else if (_source78.is_Nullable) {
                DAST._IType _2264___mcc_h695 = _source78.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2265_recursiveGen;
                  bool _2266_recOwned;
                  bool _2267_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2268_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out706;
                  bool _out707;
                  bool _out708;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out709;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out706, out _out707, out _out708, out _out709);
                  _2265_recursiveGen = _out706;
                  _2266_recOwned = _out707;
                  _2267_recErased = _out708;
                  _2268_recIdents = _out709;
                  if (!(_2266_recOwned)) {
                    _2265_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2265_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2265_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2267_recErased;
                  readIdents = _2268_recIdents;
                }
              } else if (_source78.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2269___mcc_h697 = _source78.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2270_recursiveGen;
                  bool _2271_recOwned;
                  bool _2272_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2273_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out710;
                  bool _out711;
                  bool _out712;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out713;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out710, out _out711, out _out712, out _out713);
                  _2270_recursiveGen = _out710;
                  _2271_recOwned = _out711;
                  _2272_recErased = _out712;
                  _2273_recIdents = _out713;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2270_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2271_recOwned;
                  isErased = _2272_recErased;
                  readIdents = _2273_recIdents;
                }
              } else if (_source78.is_Array) {
                DAST._IType _2274___mcc_h699 = _source78.dtor_element;
                BigInteger _2275___mcc_h700 = _source78.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2276_recursiveGen;
                  bool _2277_recOwned;
                  bool _2278_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2279_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out714;
                  bool _out715;
                  bool _out716;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out717;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out714, out _out715, out _out716, out _out717);
                  _2276_recursiveGen = _out714;
                  _2277_recOwned = _out715;
                  _2278_recErased = _out716;
                  _2279_recIdents = _out717;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2276_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2277_recOwned;
                  isErased = _2278_recErased;
                  readIdents = _2279_recIdents;
                }
              } else if (_source78.is_Seq) {
                DAST._IType _2280___mcc_h703 = _source78.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2281_recursiveGen;
                  bool _2282_recOwned;
                  bool _2283_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2284_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out718;
                  bool _out719;
                  bool _out720;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out721;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out718, out _out719, out _out720, out _out721);
                  _2281_recursiveGen = _out718;
                  _2282_recOwned = _out719;
                  _2283_recErased = _out720;
                  _2284_recIdents = _out721;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2281_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2282_recOwned;
                  isErased = _2283_recErased;
                  readIdents = _2284_recIdents;
                }
              } else if (_source78.is_Set) {
                DAST._IType _2285___mcc_h705 = _source78.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2286_recursiveGen;
                  bool _2287_recOwned;
                  bool _2288_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2289_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out722;
                  bool _out723;
                  bool _out724;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out725;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out722, out _out723, out _out724, out _out725);
                  _2286_recursiveGen = _out722;
                  _2287_recOwned = _out723;
                  _2288_recErased = _out724;
                  _2289_recIdents = _out725;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2286_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2287_recOwned;
                  isErased = _2288_recErased;
                  readIdents = _2289_recIdents;
                }
              } else if (_source78.is_Multiset) {
                DAST._IType _2290___mcc_h707 = _source78.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2291_recursiveGen;
                  bool _2292_recOwned;
                  bool _2293_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2294_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out726;
                  bool _out727;
                  bool _out728;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out729;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out726, out _out727, out _out728, out _out729);
                  _2291_recursiveGen = _out726;
                  _2292_recOwned = _out727;
                  _2293_recErased = _out728;
                  _2294_recIdents = _out729;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2291_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2292_recOwned;
                  isErased = _2293_recErased;
                  readIdents = _2294_recIdents;
                }
              } else if (_source78.is_Map) {
                DAST._IType _2295___mcc_h709 = _source78.dtor_key;
                DAST._IType _2296___mcc_h710 = _source78.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2297_recursiveGen;
                  bool _2298_recOwned;
                  bool _2299_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2300_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out730;
                  bool _out731;
                  bool _out732;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out733;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out730, out _out731, out _out732, out _out733);
                  _2297_recursiveGen = _out730;
                  _2298_recOwned = _out731;
                  _2299_recErased = _out732;
                  _2300_recIdents = _out733;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2297_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2298_recOwned;
                  isErased = _2299_recErased;
                  readIdents = _2300_recIdents;
                }
              } else if (_source78.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2301___mcc_h713 = _source78.dtor_args;
                DAST._IType _2302___mcc_h714 = _source78.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2303_recursiveGen;
                  bool _2304_recOwned;
                  bool _2305_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2306_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out734;
                  bool _out735;
                  bool _out736;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out737;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out734, out _out735, out _out736, out _out737);
                  _2303_recursiveGen = _out734;
                  _2304_recOwned = _out735;
                  _2305_recErased = _out736;
                  _2306_recIdents = _out737;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2303_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2304_recOwned;
                  isErased = _2305_recErased;
                  readIdents = _2306_recIdents;
                }
              } else if (_source78.is_Primitive) {
                DAST._IPrimitive _2307___mcc_h717 = _source78.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2308_recursiveGen;
                  bool _2309_recOwned;
                  bool _2310_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2311_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out738;
                  bool _out739;
                  bool _out740;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out741;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out738, out _out739, out _out740, out _out741);
                  _2308_recursiveGen = _out738;
                  _2309_recOwned = _out739;
                  _2310_recErased = _out740;
                  _2311_recIdents = _out741;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2308_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2309_recOwned;
                  isErased = _2310_recErased;
                  readIdents = _2311_recIdents;
                }
              } else if (_source78.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2312___mcc_h719 = _source78.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2313_recursiveGen;
                  bool _2314_recOwned;
                  bool _2315_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2316_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out742;
                  bool _out743;
                  bool _out744;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out745;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out742, out _out743, out _out744, out _out745);
                  _2313_recursiveGen = _out742;
                  _2314_recOwned = _out743;
                  _2315_recErased = _out744;
                  _2316_recIdents = _out745;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2313_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2314_recOwned;
                  isErased = _2315_recErased;
                  readIdents = _2316_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2317___mcc_h721 = _source78.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2318_recursiveGen;
                  bool _2319_recOwned;
                  bool _2320_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2321_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out746;
                  bool _out747;
                  bool _out748;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out749;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out746, out _out747, out _out748, out _out749);
                  _2318_recursiveGen = _out746;
                  _2319_recOwned = _out747;
                  _2320_recErased = _out748;
                  _2321_recIdents = _out749;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2318_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2319_recOwned;
                  isErased = _2320_recErased;
                  readIdents = _2321_recIdents;
                }
              }
            } else if (_source62.is_Multiset) {
              DAST._IType _2322___mcc_h723 = _source62.dtor_element;
              DAST._IType _source80 = _1656___mcc_h312;
              if (_source80.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2323___mcc_h727 = _source80.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2324___mcc_h728 = _source80.dtor_typeArgs;
                DAST._IResolvedType _2325___mcc_h729 = _source80.dtor_resolved;
                DAST._IResolvedType _source81 = _2325___mcc_h729;
                if (_source81.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2326___mcc_h733 = _source81.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2327_recursiveGen;
                    bool _2328_recOwned;
                    bool _2329_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2330_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out750;
                    bool _out751;
                    bool _out752;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out753;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out750, out _out751, out _out752, out _out753);
                    _2327_recursiveGen = _out750;
                    _2328_recOwned = _out751;
                    _2329_recErased = _out752;
                    _2330_recIdents = _out753;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2327_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2328_recOwned;
                    isErased = _2329_recErased;
                    readIdents = _2330_recIdents;
                  }
                } else if (_source81.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2331___mcc_h735 = _source81.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2332_recursiveGen;
                    bool _2333_recOwned;
                    bool _2334_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2335_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out754;
                    bool _out755;
                    bool _out756;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out757;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out754, out _out755, out _out756, out _out757);
                    _2332_recursiveGen = _out754;
                    _2333_recOwned = _out755;
                    _2334_recErased = _out756;
                    _2335_recIdents = _out757;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2332_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2333_recOwned;
                    isErased = _2334_recErased;
                    readIdents = _2335_recIdents;
                  }
                } else {
                  DAST._IType _2336___mcc_h737 = _source81.dtor_Newtype_a0;
                  DAST._IType _2337_b = _2336___mcc_h737;
                  {
                    if (object.Equals(_1649_fromTpe, _2337_b)) {
                      Dafny.ISequence<Dafny.Rune> _2338_recursiveGen;
                      bool _2339_recOwned;
                      bool _2340_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2341_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out758;
                      bool _out759;
                      bool _out760;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out761;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out758, out _out759, out _out760, out _out761);
                      _2338_recursiveGen = _out758;
                      _2339_recOwned = _out759;
                      _2340_recErased = _out760;
                      _2341_recIdents = _out761;
                      Dafny.ISequence<Dafny.Rune> _2342_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out762;
                      _out762 = DCOMP.COMP.GenType(_1648_toTpe, true, false);
                      _2342_rhsType = _out762;
                      Dafny.ISequence<Dafny.Rune> _2343_uneraseFn;
                      _2343_uneraseFn = ((_2339_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2342_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2343_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2338_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2339_recOwned;
                      isErased = false;
                      readIdents = _2341_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out763;
                      bool _out764;
                      bool _out765;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out766;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1650_expr, _1649_fromTpe, _2337_b), _2337_b, _1648_toTpe), selfIdent, @params, mustOwn, out _out763, out _out764, out _out765, out _out766);
                      s = _out763;
                      isOwned = _out764;
                      isErased = _out765;
                      readIdents = _out766;
                    }
                  }
                }
              } else if (_source80.is_Nullable) {
                DAST._IType _2344___mcc_h739 = _source80.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2345_recursiveGen;
                  bool _2346_recOwned;
                  bool _2347_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2348_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out767;
                  bool _out768;
                  bool _out769;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out770;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out767, out _out768, out _out769, out _out770);
                  _2345_recursiveGen = _out767;
                  _2346_recOwned = _out768;
                  _2347_recErased = _out769;
                  _2348_recIdents = _out770;
                  if (!(_2346_recOwned)) {
                    _2345_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2345_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2345_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2347_recErased;
                  readIdents = _2348_recIdents;
                }
              } else if (_source80.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2349___mcc_h741 = _source80.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2350_recursiveGen;
                  bool _2351_recOwned;
                  bool _2352_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2353_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out771;
                  bool _out772;
                  bool _out773;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out774;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out771, out _out772, out _out773, out _out774);
                  _2350_recursiveGen = _out771;
                  _2351_recOwned = _out772;
                  _2352_recErased = _out773;
                  _2353_recIdents = _out774;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2350_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2351_recOwned;
                  isErased = _2352_recErased;
                  readIdents = _2353_recIdents;
                }
              } else if (_source80.is_Array) {
                DAST._IType _2354___mcc_h743 = _source80.dtor_element;
                BigInteger _2355___mcc_h744 = _source80.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2356_recursiveGen;
                  bool _2357_recOwned;
                  bool _2358_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2359_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out775;
                  bool _out776;
                  bool _out777;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out778;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out775, out _out776, out _out777, out _out778);
                  _2356_recursiveGen = _out775;
                  _2357_recOwned = _out776;
                  _2358_recErased = _out777;
                  _2359_recIdents = _out778;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2356_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2357_recOwned;
                  isErased = _2358_recErased;
                  readIdents = _2359_recIdents;
                }
              } else if (_source80.is_Seq) {
                DAST._IType _2360___mcc_h747 = _source80.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2361_recursiveGen;
                  bool _2362_recOwned;
                  bool _2363_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2364_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out779;
                  bool _out780;
                  bool _out781;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out782;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out779, out _out780, out _out781, out _out782);
                  _2361_recursiveGen = _out779;
                  _2362_recOwned = _out780;
                  _2363_recErased = _out781;
                  _2364_recIdents = _out782;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2361_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2362_recOwned;
                  isErased = _2363_recErased;
                  readIdents = _2364_recIdents;
                }
              } else if (_source80.is_Set) {
                DAST._IType _2365___mcc_h749 = _source80.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2366_recursiveGen;
                  bool _2367_recOwned;
                  bool _2368_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2369_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out783;
                  bool _out784;
                  bool _out785;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out786;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out783, out _out784, out _out785, out _out786);
                  _2366_recursiveGen = _out783;
                  _2367_recOwned = _out784;
                  _2368_recErased = _out785;
                  _2369_recIdents = _out786;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2366_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2367_recOwned;
                  isErased = _2368_recErased;
                  readIdents = _2369_recIdents;
                }
              } else if (_source80.is_Multiset) {
                DAST._IType _2370___mcc_h751 = _source80.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2371_recursiveGen;
                  bool _2372_recOwned;
                  bool _2373_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2374_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out787;
                  bool _out788;
                  bool _out789;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out790;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out787, out _out788, out _out789, out _out790);
                  _2371_recursiveGen = _out787;
                  _2372_recOwned = _out788;
                  _2373_recErased = _out789;
                  _2374_recIdents = _out790;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2371_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2372_recOwned;
                  isErased = _2373_recErased;
                  readIdents = _2374_recIdents;
                }
              } else if (_source80.is_Map) {
                DAST._IType _2375___mcc_h753 = _source80.dtor_key;
                DAST._IType _2376___mcc_h754 = _source80.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2377_recursiveGen;
                  bool _2378_recOwned;
                  bool _2379_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2380_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out791;
                  bool _out792;
                  bool _out793;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out794;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out791, out _out792, out _out793, out _out794);
                  _2377_recursiveGen = _out791;
                  _2378_recOwned = _out792;
                  _2379_recErased = _out793;
                  _2380_recIdents = _out794;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2377_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2378_recOwned;
                  isErased = _2379_recErased;
                  readIdents = _2380_recIdents;
                }
              } else if (_source80.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2381___mcc_h757 = _source80.dtor_args;
                DAST._IType _2382___mcc_h758 = _source80.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2383_recursiveGen;
                  bool _2384_recOwned;
                  bool _2385_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2386_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out795;
                  bool _out796;
                  bool _out797;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out798;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out795, out _out796, out _out797, out _out798);
                  _2383_recursiveGen = _out795;
                  _2384_recOwned = _out796;
                  _2385_recErased = _out797;
                  _2386_recIdents = _out798;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2383_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2384_recOwned;
                  isErased = _2385_recErased;
                  readIdents = _2386_recIdents;
                }
              } else if (_source80.is_Primitive) {
                DAST._IPrimitive _2387___mcc_h761 = _source80.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2388_recursiveGen;
                  bool _2389_recOwned;
                  bool _2390_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2391_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out799;
                  bool _out800;
                  bool _out801;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out802;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out799, out _out800, out _out801, out _out802);
                  _2388_recursiveGen = _out799;
                  _2389_recOwned = _out800;
                  _2390_recErased = _out801;
                  _2391_recIdents = _out802;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2388_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2389_recOwned;
                  isErased = _2390_recErased;
                  readIdents = _2391_recIdents;
                }
              } else if (_source80.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2392___mcc_h763 = _source80.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2393_recursiveGen;
                  bool _2394_recOwned;
                  bool _2395_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2396_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out803;
                  bool _out804;
                  bool _out805;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out806;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out803, out _out804, out _out805, out _out806);
                  _2393_recursiveGen = _out803;
                  _2394_recOwned = _out804;
                  _2395_recErased = _out805;
                  _2396_recIdents = _out806;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2393_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2394_recOwned;
                  isErased = _2395_recErased;
                  readIdents = _2396_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2397___mcc_h765 = _source80.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2398_recursiveGen;
                  bool _2399_recOwned;
                  bool _2400_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2401_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out807;
                  bool _out808;
                  bool _out809;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out810;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out807, out _out808, out _out809, out _out810);
                  _2398_recursiveGen = _out807;
                  _2399_recOwned = _out808;
                  _2400_recErased = _out809;
                  _2401_recIdents = _out810;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2398_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2399_recOwned;
                  isErased = _2400_recErased;
                  readIdents = _2401_recIdents;
                }
              }
            } else if (_source62.is_Map) {
              DAST._IType _2402___mcc_h767 = _source62.dtor_key;
              DAST._IType _2403___mcc_h768 = _source62.dtor_value;
              DAST._IType _source82 = _1656___mcc_h312;
              if (_source82.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2404___mcc_h775 = _source82.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2405___mcc_h776 = _source82.dtor_typeArgs;
                DAST._IResolvedType _2406___mcc_h777 = _source82.dtor_resolved;
                DAST._IResolvedType _source83 = _2406___mcc_h777;
                if (_source83.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2407___mcc_h781 = _source83.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2408_recursiveGen;
                    bool _2409_recOwned;
                    bool _2410_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2411_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out811;
                    bool _out812;
                    bool _out813;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out814;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out811, out _out812, out _out813, out _out814);
                    _2408_recursiveGen = _out811;
                    _2409_recOwned = _out812;
                    _2410_recErased = _out813;
                    _2411_recIdents = _out814;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2408_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2409_recOwned;
                    isErased = _2410_recErased;
                    readIdents = _2411_recIdents;
                  }
                } else if (_source83.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2412___mcc_h783 = _source83.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2413_recursiveGen;
                    bool _2414_recOwned;
                    bool _2415_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2416_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out815;
                    bool _out816;
                    bool _out817;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out818;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out815, out _out816, out _out817, out _out818);
                    _2413_recursiveGen = _out815;
                    _2414_recOwned = _out816;
                    _2415_recErased = _out817;
                    _2416_recIdents = _out818;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2413_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2414_recOwned;
                    isErased = _2415_recErased;
                    readIdents = _2416_recIdents;
                  }
                } else {
                  DAST._IType _2417___mcc_h785 = _source83.dtor_Newtype_a0;
                  DAST._IType _2418_b = _2417___mcc_h785;
                  {
                    if (object.Equals(_1649_fromTpe, _2418_b)) {
                      Dafny.ISequence<Dafny.Rune> _2419_recursiveGen;
                      bool _2420_recOwned;
                      bool _2421_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2422_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out819;
                      bool _out820;
                      bool _out821;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out822;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out819, out _out820, out _out821, out _out822);
                      _2419_recursiveGen = _out819;
                      _2420_recOwned = _out820;
                      _2421_recErased = _out821;
                      _2422_recIdents = _out822;
                      Dafny.ISequence<Dafny.Rune> _2423_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out823;
                      _out823 = DCOMP.COMP.GenType(_1648_toTpe, true, false);
                      _2423_rhsType = _out823;
                      Dafny.ISequence<Dafny.Rune> _2424_uneraseFn;
                      _2424_uneraseFn = ((_2420_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2423_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2424_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2419_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2420_recOwned;
                      isErased = false;
                      readIdents = _2422_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out824;
                      bool _out825;
                      bool _out826;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out827;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1650_expr, _1649_fromTpe, _2418_b), _2418_b, _1648_toTpe), selfIdent, @params, mustOwn, out _out824, out _out825, out _out826, out _out827);
                      s = _out824;
                      isOwned = _out825;
                      isErased = _out826;
                      readIdents = _out827;
                    }
                  }
                }
              } else if (_source82.is_Nullable) {
                DAST._IType _2425___mcc_h787 = _source82.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2426_recursiveGen;
                  bool _2427_recOwned;
                  bool _2428_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2429_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out828;
                  bool _out829;
                  bool _out830;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out831;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out828, out _out829, out _out830, out _out831);
                  _2426_recursiveGen = _out828;
                  _2427_recOwned = _out829;
                  _2428_recErased = _out830;
                  _2429_recIdents = _out831;
                  if (!(_2427_recOwned)) {
                    _2426_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2426_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2426_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2428_recErased;
                  readIdents = _2429_recIdents;
                }
              } else if (_source82.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2430___mcc_h789 = _source82.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2431_recursiveGen;
                  bool _2432_recOwned;
                  bool _2433_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2434_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out832;
                  bool _out833;
                  bool _out834;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out835;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out832, out _out833, out _out834, out _out835);
                  _2431_recursiveGen = _out832;
                  _2432_recOwned = _out833;
                  _2433_recErased = _out834;
                  _2434_recIdents = _out835;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2431_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2432_recOwned;
                  isErased = _2433_recErased;
                  readIdents = _2434_recIdents;
                }
              } else if (_source82.is_Array) {
                DAST._IType _2435___mcc_h791 = _source82.dtor_element;
                BigInteger _2436___mcc_h792 = _source82.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2437_recursiveGen;
                  bool _2438_recOwned;
                  bool _2439_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2440_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out836;
                  bool _out837;
                  bool _out838;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out839;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out836, out _out837, out _out838, out _out839);
                  _2437_recursiveGen = _out836;
                  _2438_recOwned = _out837;
                  _2439_recErased = _out838;
                  _2440_recIdents = _out839;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2437_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2438_recOwned;
                  isErased = _2439_recErased;
                  readIdents = _2440_recIdents;
                }
              } else if (_source82.is_Seq) {
                DAST._IType _2441___mcc_h795 = _source82.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2442_recursiveGen;
                  bool _2443_recOwned;
                  bool _2444_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2445_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out840;
                  bool _out841;
                  bool _out842;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out843;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out840, out _out841, out _out842, out _out843);
                  _2442_recursiveGen = _out840;
                  _2443_recOwned = _out841;
                  _2444_recErased = _out842;
                  _2445_recIdents = _out843;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2442_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2443_recOwned;
                  isErased = _2444_recErased;
                  readIdents = _2445_recIdents;
                }
              } else if (_source82.is_Set) {
                DAST._IType _2446___mcc_h797 = _source82.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2447_recursiveGen;
                  bool _2448_recOwned;
                  bool _2449_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2450_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out844;
                  bool _out845;
                  bool _out846;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out847;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out844, out _out845, out _out846, out _out847);
                  _2447_recursiveGen = _out844;
                  _2448_recOwned = _out845;
                  _2449_recErased = _out846;
                  _2450_recIdents = _out847;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2447_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2448_recOwned;
                  isErased = _2449_recErased;
                  readIdents = _2450_recIdents;
                }
              } else if (_source82.is_Multiset) {
                DAST._IType _2451___mcc_h799 = _source82.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2452_recursiveGen;
                  bool _2453_recOwned;
                  bool _2454_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2455_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out848;
                  bool _out849;
                  bool _out850;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out851;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out848, out _out849, out _out850, out _out851);
                  _2452_recursiveGen = _out848;
                  _2453_recOwned = _out849;
                  _2454_recErased = _out850;
                  _2455_recIdents = _out851;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2452_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2453_recOwned;
                  isErased = _2454_recErased;
                  readIdents = _2455_recIdents;
                }
              } else if (_source82.is_Map) {
                DAST._IType _2456___mcc_h801 = _source82.dtor_key;
                DAST._IType _2457___mcc_h802 = _source82.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2458_recursiveGen;
                  bool _2459_recOwned;
                  bool _2460_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2461_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out852;
                  bool _out853;
                  bool _out854;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out855;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out852, out _out853, out _out854, out _out855);
                  _2458_recursiveGen = _out852;
                  _2459_recOwned = _out853;
                  _2460_recErased = _out854;
                  _2461_recIdents = _out855;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2458_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2459_recOwned;
                  isErased = _2460_recErased;
                  readIdents = _2461_recIdents;
                }
              } else if (_source82.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2462___mcc_h805 = _source82.dtor_args;
                DAST._IType _2463___mcc_h806 = _source82.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2464_recursiveGen;
                  bool _2465_recOwned;
                  bool _2466_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2467_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out856;
                  bool _out857;
                  bool _out858;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out859;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out856, out _out857, out _out858, out _out859);
                  _2464_recursiveGen = _out856;
                  _2465_recOwned = _out857;
                  _2466_recErased = _out858;
                  _2467_recIdents = _out859;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2464_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2465_recOwned;
                  isErased = _2466_recErased;
                  readIdents = _2467_recIdents;
                }
              } else if (_source82.is_Primitive) {
                DAST._IPrimitive _2468___mcc_h809 = _source82.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2469_recursiveGen;
                  bool _2470_recOwned;
                  bool _2471_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2472_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out860;
                  bool _out861;
                  bool _out862;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out863;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out860, out _out861, out _out862, out _out863);
                  _2469_recursiveGen = _out860;
                  _2470_recOwned = _out861;
                  _2471_recErased = _out862;
                  _2472_recIdents = _out863;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2469_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2470_recOwned;
                  isErased = _2471_recErased;
                  readIdents = _2472_recIdents;
                }
              } else if (_source82.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2473___mcc_h811 = _source82.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2474_recursiveGen;
                  bool _2475_recOwned;
                  bool _2476_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2477_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out864;
                  bool _out865;
                  bool _out866;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out867;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out864, out _out865, out _out866, out _out867);
                  _2474_recursiveGen = _out864;
                  _2475_recOwned = _out865;
                  _2476_recErased = _out866;
                  _2477_recIdents = _out867;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2474_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2475_recOwned;
                  isErased = _2476_recErased;
                  readIdents = _2477_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2478___mcc_h813 = _source82.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2479_recursiveGen;
                  bool _2480_recOwned;
                  bool _2481_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2482_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out868;
                  bool _out869;
                  bool _out870;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out871;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out868, out _out869, out _out870, out _out871);
                  _2479_recursiveGen = _out868;
                  _2480_recOwned = _out869;
                  _2481_recErased = _out870;
                  _2482_recIdents = _out871;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2479_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2480_recOwned;
                  isErased = _2481_recErased;
                  readIdents = _2482_recIdents;
                }
              }
            } else if (_source62.is_Arrow) {
              Dafny.ISequence<DAST._IType> _2483___mcc_h815 = _source62.dtor_args;
              DAST._IType _2484___mcc_h816 = _source62.dtor_result;
              DAST._IType _source84 = _1656___mcc_h312;
              if (_source84.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2485___mcc_h823 = _source84.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2486___mcc_h824 = _source84.dtor_typeArgs;
                DAST._IResolvedType _2487___mcc_h825 = _source84.dtor_resolved;
                DAST._IResolvedType _source85 = _2487___mcc_h825;
                if (_source85.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2488___mcc_h829 = _source85.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2489_recursiveGen;
                    bool _2490_recOwned;
                    bool _2491_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2492_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out872;
                    bool _out873;
                    bool _out874;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out875;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out872, out _out873, out _out874, out _out875);
                    _2489_recursiveGen = _out872;
                    _2490_recOwned = _out873;
                    _2491_recErased = _out874;
                    _2492_recIdents = _out875;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2489_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2490_recOwned;
                    isErased = _2491_recErased;
                    readIdents = _2492_recIdents;
                  }
                } else if (_source85.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2493___mcc_h831 = _source85.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2494_recursiveGen;
                    bool _2495_recOwned;
                    bool _2496_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2497_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out876;
                    bool _out877;
                    bool _out878;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out879;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out876, out _out877, out _out878, out _out879);
                    _2494_recursiveGen = _out876;
                    _2495_recOwned = _out877;
                    _2496_recErased = _out878;
                    _2497_recIdents = _out879;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2494_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2495_recOwned;
                    isErased = _2496_recErased;
                    readIdents = _2497_recIdents;
                  }
                } else {
                  DAST._IType _2498___mcc_h833 = _source85.dtor_Newtype_a0;
                  DAST._IType _2499_b = _2498___mcc_h833;
                  {
                    if (object.Equals(_1649_fromTpe, _2499_b)) {
                      Dafny.ISequence<Dafny.Rune> _2500_recursiveGen;
                      bool _2501_recOwned;
                      bool _2502_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2503_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out880;
                      bool _out881;
                      bool _out882;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out883;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out880, out _out881, out _out882, out _out883);
                      _2500_recursiveGen = _out880;
                      _2501_recOwned = _out881;
                      _2502_recErased = _out882;
                      _2503_recIdents = _out883;
                      Dafny.ISequence<Dafny.Rune> _2504_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out884;
                      _out884 = DCOMP.COMP.GenType(_1648_toTpe, true, false);
                      _2504_rhsType = _out884;
                      Dafny.ISequence<Dafny.Rune> _2505_uneraseFn;
                      _2505_uneraseFn = ((_2501_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2504_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2505_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2500_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2501_recOwned;
                      isErased = false;
                      readIdents = _2503_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out885;
                      bool _out886;
                      bool _out887;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out888;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1650_expr, _1649_fromTpe, _2499_b), _2499_b, _1648_toTpe), selfIdent, @params, mustOwn, out _out885, out _out886, out _out887, out _out888);
                      s = _out885;
                      isOwned = _out886;
                      isErased = _out887;
                      readIdents = _out888;
                    }
                  }
                }
              } else if (_source84.is_Nullable) {
                DAST._IType _2506___mcc_h835 = _source84.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2507_recursiveGen;
                  bool _2508_recOwned;
                  bool _2509_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2510_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out889;
                  bool _out890;
                  bool _out891;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out892;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out889, out _out890, out _out891, out _out892);
                  _2507_recursiveGen = _out889;
                  _2508_recOwned = _out890;
                  _2509_recErased = _out891;
                  _2510_recIdents = _out892;
                  if (!(_2508_recOwned)) {
                    _2507_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2507_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2507_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2509_recErased;
                  readIdents = _2510_recIdents;
                }
              } else if (_source84.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2511___mcc_h837 = _source84.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2512_recursiveGen;
                  bool _2513_recOwned;
                  bool _2514_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2515_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out893;
                  bool _out894;
                  bool _out895;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out896;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out893, out _out894, out _out895, out _out896);
                  _2512_recursiveGen = _out893;
                  _2513_recOwned = _out894;
                  _2514_recErased = _out895;
                  _2515_recIdents = _out896;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2512_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2513_recOwned;
                  isErased = _2514_recErased;
                  readIdents = _2515_recIdents;
                }
              } else if (_source84.is_Array) {
                DAST._IType _2516___mcc_h839 = _source84.dtor_element;
                BigInteger _2517___mcc_h840 = _source84.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2518_recursiveGen;
                  bool _2519_recOwned;
                  bool _2520_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2521_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out897;
                  bool _out898;
                  bool _out899;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out900;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out897, out _out898, out _out899, out _out900);
                  _2518_recursiveGen = _out897;
                  _2519_recOwned = _out898;
                  _2520_recErased = _out899;
                  _2521_recIdents = _out900;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2518_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2519_recOwned;
                  isErased = _2520_recErased;
                  readIdents = _2521_recIdents;
                }
              } else if (_source84.is_Seq) {
                DAST._IType _2522___mcc_h843 = _source84.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2523_recursiveGen;
                  bool _2524_recOwned;
                  bool _2525_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2526_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out901;
                  bool _out902;
                  bool _out903;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out904;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out901, out _out902, out _out903, out _out904);
                  _2523_recursiveGen = _out901;
                  _2524_recOwned = _out902;
                  _2525_recErased = _out903;
                  _2526_recIdents = _out904;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2523_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2524_recOwned;
                  isErased = _2525_recErased;
                  readIdents = _2526_recIdents;
                }
              } else if (_source84.is_Set) {
                DAST._IType _2527___mcc_h845 = _source84.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2528_recursiveGen;
                  bool _2529_recOwned;
                  bool _2530_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2531_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out905;
                  bool _out906;
                  bool _out907;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out908;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out905, out _out906, out _out907, out _out908);
                  _2528_recursiveGen = _out905;
                  _2529_recOwned = _out906;
                  _2530_recErased = _out907;
                  _2531_recIdents = _out908;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2528_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2529_recOwned;
                  isErased = _2530_recErased;
                  readIdents = _2531_recIdents;
                }
              } else if (_source84.is_Multiset) {
                DAST._IType _2532___mcc_h847 = _source84.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2533_recursiveGen;
                  bool _2534_recOwned;
                  bool _2535_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2536_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out909;
                  bool _out910;
                  bool _out911;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out912;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out909, out _out910, out _out911, out _out912);
                  _2533_recursiveGen = _out909;
                  _2534_recOwned = _out910;
                  _2535_recErased = _out911;
                  _2536_recIdents = _out912;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2533_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2534_recOwned;
                  isErased = _2535_recErased;
                  readIdents = _2536_recIdents;
                }
              } else if (_source84.is_Map) {
                DAST._IType _2537___mcc_h849 = _source84.dtor_key;
                DAST._IType _2538___mcc_h850 = _source84.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2539_recursiveGen;
                  bool _2540_recOwned;
                  bool _2541_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2542_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out913;
                  bool _out914;
                  bool _out915;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out916;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out913, out _out914, out _out915, out _out916);
                  _2539_recursiveGen = _out913;
                  _2540_recOwned = _out914;
                  _2541_recErased = _out915;
                  _2542_recIdents = _out916;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2539_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2540_recOwned;
                  isErased = _2541_recErased;
                  readIdents = _2542_recIdents;
                }
              } else if (_source84.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2543___mcc_h853 = _source84.dtor_args;
                DAST._IType _2544___mcc_h854 = _source84.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2545_recursiveGen;
                  bool _2546_recOwned;
                  bool _2547_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2548_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out917;
                  bool _out918;
                  bool _out919;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out920;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out917, out _out918, out _out919, out _out920);
                  _2545_recursiveGen = _out917;
                  _2546_recOwned = _out918;
                  _2547_recErased = _out919;
                  _2548_recIdents = _out920;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2545_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2546_recOwned;
                  isErased = _2547_recErased;
                  readIdents = _2548_recIdents;
                }
              } else if (_source84.is_Primitive) {
                DAST._IPrimitive _2549___mcc_h857 = _source84.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2550_recursiveGen;
                  bool _2551_recOwned;
                  bool _2552_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2553_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out921;
                  bool _out922;
                  bool _out923;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out924;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out921, out _out922, out _out923, out _out924);
                  _2550_recursiveGen = _out921;
                  _2551_recOwned = _out922;
                  _2552_recErased = _out923;
                  _2553_recIdents = _out924;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2550_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2551_recOwned;
                  isErased = _2552_recErased;
                  readIdents = _2553_recIdents;
                }
              } else if (_source84.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2554___mcc_h859 = _source84.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2555_recursiveGen;
                  bool _2556_recOwned;
                  bool _2557_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2558_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out925;
                  bool _out926;
                  bool _out927;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out928;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out925, out _out926, out _out927, out _out928);
                  _2555_recursiveGen = _out925;
                  _2556_recOwned = _out926;
                  _2557_recErased = _out927;
                  _2558_recIdents = _out928;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2555_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2556_recOwned;
                  isErased = _2557_recErased;
                  readIdents = _2558_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2559___mcc_h861 = _source84.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2560_recursiveGen;
                  bool _2561_recOwned;
                  bool _2562_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2563_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out929;
                  bool _out930;
                  bool _out931;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out932;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out929, out _out930, out _out931, out _out932);
                  _2560_recursiveGen = _out929;
                  _2561_recOwned = _out930;
                  _2562_recErased = _out931;
                  _2563_recIdents = _out932;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2560_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2561_recOwned;
                  isErased = _2562_recErased;
                  readIdents = _2563_recIdents;
                }
              }
            } else if (_source62.is_Primitive) {
              DAST._IPrimitive _2564___mcc_h863 = _source62.dtor_Primitive_a0;
              DAST._IPrimitive _source86 = _2564___mcc_h863;
              if (_source86.is_Int) {
                DAST._IType _source87 = _1656___mcc_h312;
                if (_source87.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2565___mcc_h867 = _source87.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2566___mcc_h868 = _source87.dtor_typeArgs;
                  DAST._IResolvedType _2567___mcc_h869 = _source87.dtor_resolved;
                  DAST._IResolvedType _source88 = _2567___mcc_h869;
                  if (_source88.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2568___mcc_h873 = _source88.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2569_recursiveGen;
                      bool _2570_recOwned;
                      bool _2571_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2572_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out933;
                      bool _out934;
                      bool _out935;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out936;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out933, out _out934, out _out935, out _out936);
                      _2569_recursiveGen = _out933;
                      _2570_recOwned = _out934;
                      _2571_recErased = _out935;
                      _2572_recIdents = _out936;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2569_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2570_recOwned;
                      isErased = _2571_recErased;
                      readIdents = _2572_recIdents;
                    }
                  } else if (_source88.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2573___mcc_h875 = _source88.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2574_recursiveGen;
                      bool _2575_recOwned;
                      bool _2576_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2577_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out937;
                      bool _out938;
                      bool _out939;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out940;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out937, out _out938, out _out939, out _out940);
                      _2574_recursiveGen = _out937;
                      _2575_recOwned = _out938;
                      _2576_recErased = _out939;
                      _2577_recIdents = _out940;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2574_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2575_recOwned;
                      isErased = _2576_recErased;
                      readIdents = _2577_recIdents;
                    }
                  } else {
                    DAST._IType _2578___mcc_h877 = _source88.dtor_Newtype_a0;
                    DAST._IType _2579_b = _2578___mcc_h877;
                    {
                      if (object.Equals(_1649_fromTpe, _2579_b)) {
                        Dafny.ISequence<Dafny.Rune> _2580_recursiveGen;
                        bool _2581_recOwned;
                        bool _2582_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2583_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out941;
                        bool _out942;
                        bool _out943;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out944;
                        DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out941, out _out942, out _out943, out _out944);
                        _2580_recursiveGen = _out941;
                        _2581_recOwned = _out942;
                        _2582_recErased = _out943;
                        _2583_recIdents = _out944;
                        Dafny.ISequence<Dafny.Rune> _2584_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out945;
                        _out945 = DCOMP.COMP.GenType(_1648_toTpe, true, false);
                        _2584_rhsType = _out945;
                        Dafny.ISequence<Dafny.Rune> _2585_uneraseFn;
                        _2585_uneraseFn = ((_2581_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2584_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2585_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2580_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2581_recOwned;
                        isErased = false;
                        readIdents = _2583_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out946;
                        bool _out947;
                        bool _out948;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out949;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1650_expr, _1649_fromTpe, _2579_b), _2579_b, _1648_toTpe), selfIdent, @params, mustOwn, out _out946, out _out947, out _out948, out _out949);
                        s = _out946;
                        isOwned = _out947;
                        isErased = _out948;
                        readIdents = _out949;
                      }
                    }
                  }
                } else if (_source87.is_Nullable) {
                  DAST._IType _2586___mcc_h879 = _source87.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2587_recursiveGen;
                    bool _2588_recOwned;
                    bool _2589_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2590_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out950;
                    bool _out951;
                    bool _out952;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out953;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out950, out _out951, out _out952, out _out953);
                    _2587_recursiveGen = _out950;
                    _2588_recOwned = _out951;
                    _2589_recErased = _out952;
                    _2590_recIdents = _out953;
                    if (!(_2588_recOwned)) {
                      _2587_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2587_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2587_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2589_recErased;
                    readIdents = _2590_recIdents;
                  }
                } else if (_source87.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2591___mcc_h881 = _source87.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2592_recursiveGen;
                    bool _2593_recOwned;
                    bool _2594_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2595_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out954;
                    bool _out955;
                    bool _out956;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out957;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out954, out _out955, out _out956, out _out957);
                    _2592_recursiveGen = _out954;
                    _2593_recOwned = _out955;
                    _2594_recErased = _out956;
                    _2595_recIdents = _out957;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2592_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2593_recOwned;
                    isErased = _2594_recErased;
                    readIdents = _2595_recIdents;
                  }
                } else if (_source87.is_Array) {
                  DAST._IType _2596___mcc_h883 = _source87.dtor_element;
                  BigInteger _2597___mcc_h884 = _source87.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2598_recursiveGen;
                    bool _2599_recOwned;
                    bool _2600_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2601_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out958;
                    bool _out959;
                    bool _out960;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out961;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out958, out _out959, out _out960, out _out961);
                    _2598_recursiveGen = _out958;
                    _2599_recOwned = _out959;
                    _2600_recErased = _out960;
                    _2601_recIdents = _out961;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2598_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2599_recOwned;
                    isErased = _2600_recErased;
                    readIdents = _2601_recIdents;
                  }
                } else if (_source87.is_Seq) {
                  DAST._IType _2602___mcc_h887 = _source87.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2603_recursiveGen;
                    bool _2604_recOwned;
                    bool _2605_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2606_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out962;
                    bool _out963;
                    bool _out964;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out965;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out962, out _out963, out _out964, out _out965);
                    _2603_recursiveGen = _out962;
                    _2604_recOwned = _out963;
                    _2605_recErased = _out964;
                    _2606_recIdents = _out965;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2603_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2604_recOwned;
                    isErased = _2605_recErased;
                    readIdents = _2606_recIdents;
                  }
                } else if (_source87.is_Set) {
                  DAST._IType _2607___mcc_h889 = _source87.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2608_recursiveGen;
                    bool _2609_recOwned;
                    bool _2610_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2611_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out966;
                    bool _out967;
                    bool _out968;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out969;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out966, out _out967, out _out968, out _out969);
                    _2608_recursiveGen = _out966;
                    _2609_recOwned = _out967;
                    _2610_recErased = _out968;
                    _2611_recIdents = _out969;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2608_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2609_recOwned;
                    isErased = _2610_recErased;
                    readIdents = _2611_recIdents;
                  }
                } else if (_source87.is_Multiset) {
                  DAST._IType _2612___mcc_h891 = _source87.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2613_recursiveGen;
                    bool _2614_recOwned;
                    bool _2615_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2616_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out970;
                    bool _out971;
                    bool _out972;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out973;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out970, out _out971, out _out972, out _out973);
                    _2613_recursiveGen = _out970;
                    _2614_recOwned = _out971;
                    _2615_recErased = _out972;
                    _2616_recIdents = _out973;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2614_recOwned;
                    isErased = _2615_recErased;
                    readIdents = _2616_recIdents;
                  }
                } else if (_source87.is_Map) {
                  DAST._IType _2617___mcc_h893 = _source87.dtor_key;
                  DAST._IType _2618___mcc_h894 = _source87.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2619_recursiveGen;
                    bool _2620_recOwned;
                    bool _2621_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2622_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out974;
                    bool _out975;
                    bool _out976;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out977;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out974, out _out975, out _out976, out _out977);
                    _2619_recursiveGen = _out974;
                    _2620_recOwned = _out975;
                    _2621_recErased = _out976;
                    _2622_recIdents = _out977;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2619_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2620_recOwned;
                    isErased = _2621_recErased;
                    readIdents = _2622_recIdents;
                  }
                } else if (_source87.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2623___mcc_h897 = _source87.dtor_args;
                  DAST._IType _2624___mcc_h898 = _source87.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2625_recursiveGen;
                    bool _2626_recOwned;
                    bool _2627_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2628_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out978;
                    bool _out979;
                    bool _out980;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out981;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out978, out _out979, out _out980, out _out981);
                    _2625_recursiveGen = _out978;
                    _2626_recOwned = _out979;
                    _2627_recErased = _out980;
                    _2628_recIdents = _out981;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2625_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2626_recOwned;
                    isErased = _2627_recErased;
                    readIdents = _2628_recIdents;
                  }
                } else if (_source87.is_Primitive) {
                  DAST._IPrimitive _2629___mcc_h901 = _source87.dtor_Primitive_a0;
                  DAST._IPrimitive _source89 = _2629___mcc_h901;
                  if (_source89.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2630_recursiveGen;
                      bool _2631_recOwned;
                      bool _2632_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2633_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out982;
                      bool _out983;
                      bool _out984;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out985;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out982, out _out983, out _out984, out _out985);
                      _2630_recursiveGen = _out982;
                      _2631_recOwned = _out983;
                      _2632_recErased = _out984;
                      _2633_recIdents = _out985;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2630_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2631_recOwned;
                      isErased = _2632_recErased;
                      readIdents = _2633_recIdents;
                    }
                  } else if (_source89.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2634_recursiveGen;
                      bool _2635___v50;
                      bool _2636___v51;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2637_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out986;
                      bool _out987;
                      bool _out988;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out989;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, true, out _out986, out _out987, out _out988, out _out989);
                      _2634_recursiveGen = _out986;
                      _2635___v50 = _out987;
                      _2636___v51 = _out988;
                      _2637_recIdents = _out989;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), _2634_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2637_recIdents;
                    }
                  } else if (_source89.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2638_recursiveGen;
                      bool _2639_recOwned;
                      bool _2640_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2641_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out990;
                      bool _out991;
                      bool _out992;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out993;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out990, out _out991, out _out992, out _out993);
                      _2638_recursiveGen = _out990;
                      _2639_recOwned = _out991;
                      _2640_recErased = _out992;
                      _2641_recIdents = _out993;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2638_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2639_recOwned;
                      isErased = _2640_recErased;
                      readIdents = _2641_recIdents;
                    }
                  } else if (_source89.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2642_recursiveGen;
                      bool _2643_recOwned;
                      bool _2644_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2645_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out994;
                      bool _out995;
                      bool _out996;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out997;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out994, out _out995, out _out996, out _out997);
                      _2642_recursiveGen = _out994;
                      _2643_recOwned = _out995;
                      _2644_recErased = _out996;
                      _2645_recIdents = _out997;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2642_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2643_recOwned;
                      isErased = _2644_recErased;
                      readIdents = _2645_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2646_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out998;
                      _out998 = DCOMP.COMP.GenType(_1648_toTpe, true, false);
                      _2646_rhsType = _out998;
                      Dafny.ISequence<Dafny.Rune> _2647_recursiveGen;
                      bool _2648___v60;
                      bool _2649___v61;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2650_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out999;
                      bool _out1000;
                      bool _out1001;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1002;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, true, out _out999, out _out1000, out _out1001, out _out1002);
                      _2647_recursiveGen = _out999;
                      _2648___v60 = _out1000;
                      _2649___v61 = _out1001;
                      _2650_recIdents = _out1002;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), _2647_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2650_recIdents;
                    }
                  }
                } else if (_source87.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2651___mcc_h903 = _source87.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2652_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out1003;
                    _out1003 = DCOMP.COMP.GenType(_1648_toTpe, true, false);
                    _2652_rhsType = _out1003;
                    Dafny.ISequence<Dafny.Rune> _2653_recursiveGen;
                    bool _2654___v55;
                    bool _2655___v56;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2656_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1004;
                    bool _out1005;
                    bool _out1006;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1007;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, true, out _out1004, out _out1005, out _out1006, out _out1007);
                    _2653_recursiveGen = _out1004;
                    _2654___v55 = _out1005;
                    _2655___v56 = _out1006;
                    _2656_recIdents = _out1007;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2652_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), _2653_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _2656_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2657___mcc_h905 = _source87.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2658_recursiveGen;
                    bool _2659_recOwned;
                    bool _2660_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2661_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1008;
                    bool _out1009;
                    bool _out1010;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1011;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1008, out _out1009, out _out1010, out _out1011);
                    _2658_recursiveGen = _out1008;
                    _2659_recOwned = _out1009;
                    _2660_recErased = _out1010;
                    _2661_recIdents = _out1011;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2658_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2659_recOwned;
                    isErased = _2660_recErased;
                    readIdents = _2661_recIdents;
                  }
                }
              } else if (_source86.is_Real) {
                DAST._IType _source90 = _1656___mcc_h312;
                if (_source90.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2662___mcc_h907 = _source90.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2663___mcc_h908 = _source90.dtor_typeArgs;
                  DAST._IResolvedType _2664___mcc_h909 = _source90.dtor_resolved;
                  DAST._IResolvedType _source91 = _2664___mcc_h909;
                  if (_source91.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2665___mcc_h913 = _source91.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2666_recursiveGen;
                      bool _2667_recOwned;
                      bool _2668_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2669_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1012;
                      bool _out1013;
                      bool _out1014;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1015;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1012, out _out1013, out _out1014, out _out1015);
                      _2666_recursiveGen = _out1012;
                      _2667_recOwned = _out1013;
                      _2668_recErased = _out1014;
                      _2669_recIdents = _out1015;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2666_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2667_recOwned;
                      isErased = _2668_recErased;
                      readIdents = _2669_recIdents;
                    }
                  } else if (_source91.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2670___mcc_h915 = _source91.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2671_recursiveGen;
                      bool _2672_recOwned;
                      bool _2673_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2674_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1016;
                      bool _out1017;
                      bool _out1018;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1019;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1016, out _out1017, out _out1018, out _out1019);
                      _2671_recursiveGen = _out1016;
                      _2672_recOwned = _out1017;
                      _2673_recErased = _out1018;
                      _2674_recIdents = _out1019;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2671_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2672_recOwned;
                      isErased = _2673_recErased;
                      readIdents = _2674_recIdents;
                    }
                  } else {
                    DAST._IType _2675___mcc_h917 = _source91.dtor_Newtype_a0;
                    DAST._IType _2676_b = _2675___mcc_h917;
                    {
                      if (object.Equals(_1649_fromTpe, _2676_b)) {
                        Dafny.ISequence<Dafny.Rune> _2677_recursiveGen;
                        bool _2678_recOwned;
                        bool _2679_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2680_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1020;
                        bool _out1021;
                        bool _out1022;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1023;
                        DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1020, out _out1021, out _out1022, out _out1023);
                        _2677_recursiveGen = _out1020;
                        _2678_recOwned = _out1021;
                        _2679_recErased = _out1022;
                        _2680_recIdents = _out1023;
                        Dafny.ISequence<Dafny.Rune> _2681_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1024;
                        _out1024 = DCOMP.COMP.GenType(_1648_toTpe, true, false);
                        _2681_rhsType = _out1024;
                        Dafny.ISequence<Dafny.Rune> _2682_uneraseFn;
                        _2682_uneraseFn = ((_2678_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2681_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2682_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2677_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2678_recOwned;
                        isErased = false;
                        readIdents = _2680_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1025;
                        bool _out1026;
                        bool _out1027;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1028;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1650_expr, _1649_fromTpe, _2676_b), _2676_b, _1648_toTpe), selfIdent, @params, mustOwn, out _out1025, out _out1026, out _out1027, out _out1028);
                        s = _out1025;
                        isOwned = _out1026;
                        isErased = _out1027;
                        readIdents = _out1028;
                      }
                    }
                  }
                } else if (_source90.is_Nullable) {
                  DAST._IType _2683___mcc_h919 = _source90.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2684_recursiveGen;
                    bool _2685_recOwned;
                    bool _2686_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2687_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1029;
                    bool _out1030;
                    bool _out1031;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1032;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1029, out _out1030, out _out1031, out _out1032);
                    _2684_recursiveGen = _out1029;
                    _2685_recOwned = _out1030;
                    _2686_recErased = _out1031;
                    _2687_recIdents = _out1032;
                    if (!(_2685_recOwned)) {
                      _2684_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2684_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2684_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2686_recErased;
                    readIdents = _2687_recIdents;
                  }
                } else if (_source90.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2688___mcc_h921 = _source90.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2689_recursiveGen;
                    bool _2690_recOwned;
                    bool _2691_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2692_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1033;
                    bool _out1034;
                    bool _out1035;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1036;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1033, out _out1034, out _out1035, out _out1036);
                    _2689_recursiveGen = _out1033;
                    _2690_recOwned = _out1034;
                    _2691_recErased = _out1035;
                    _2692_recIdents = _out1036;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2689_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2690_recOwned;
                    isErased = _2691_recErased;
                    readIdents = _2692_recIdents;
                  }
                } else if (_source90.is_Array) {
                  DAST._IType _2693___mcc_h923 = _source90.dtor_element;
                  BigInteger _2694___mcc_h924 = _source90.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2695_recursiveGen;
                    bool _2696_recOwned;
                    bool _2697_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2698_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1037;
                    bool _out1038;
                    bool _out1039;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1040;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1037, out _out1038, out _out1039, out _out1040);
                    _2695_recursiveGen = _out1037;
                    _2696_recOwned = _out1038;
                    _2697_recErased = _out1039;
                    _2698_recIdents = _out1040;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2695_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2696_recOwned;
                    isErased = _2697_recErased;
                    readIdents = _2698_recIdents;
                  }
                } else if (_source90.is_Seq) {
                  DAST._IType _2699___mcc_h927 = _source90.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2700_recursiveGen;
                    bool _2701_recOwned;
                    bool _2702_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2703_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1041;
                    bool _out1042;
                    bool _out1043;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1044;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1041, out _out1042, out _out1043, out _out1044);
                    _2700_recursiveGen = _out1041;
                    _2701_recOwned = _out1042;
                    _2702_recErased = _out1043;
                    _2703_recIdents = _out1044;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2700_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2701_recOwned;
                    isErased = _2702_recErased;
                    readIdents = _2703_recIdents;
                  }
                } else if (_source90.is_Set) {
                  DAST._IType _2704___mcc_h929 = _source90.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2705_recursiveGen;
                    bool _2706_recOwned;
                    bool _2707_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2708_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1045;
                    bool _out1046;
                    bool _out1047;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1048;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1045, out _out1046, out _out1047, out _out1048);
                    _2705_recursiveGen = _out1045;
                    _2706_recOwned = _out1046;
                    _2707_recErased = _out1047;
                    _2708_recIdents = _out1048;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2705_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2706_recOwned;
                    isErased = _2707_recErased;
                    readIdents = _2708_recIdents;
                  }
                } else if (_source90.is_Multiset) {
                  DAST._IType _2709___mcc_h931 = _source90.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2710_recursiveGen;
                    bool _2711_recOwned;
                    bool _2712_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2713_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1049;
                    bool _out1050;
                    bool _out1051;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1052;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1049, out _out1050, out _out1051, out _out1052);
                    _2710_recursiveGen = _out1049;
                    _2711_recOwned = _out1050;
                    _2712_recErased = _out1051;
                    _2713_recIdents = _out1052;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2710_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2711_recOwned;
                    isErased = _2712_recErased;
                    readIdents = _2713_recIdents;
                  }
                } else if (_source90.is_Map) {
                  DAST._IType _2714___mcc_h933 = _source90.dtor_key;
                  DAST._IType _2715___mcc_h934 = _source90.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2716_recursiveGen;
                    bool _2717_recOwned;
                    bool _2718_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2719_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1053;
                    bool _out1054;
                    bool _out1055;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1056;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1053, out _out1054, out _out1055, out _out1056);
                    _2716_recursiveGen = _out1053;
                    _2717_recOwned = _out1054;
                    _2718_recErased = _out1055;
                    _2719_recIdents = _out1056;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2716_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2717_recOwned;
                    isErased = _2718_recErased;
                    readIdents = _2719_recIdents;
                  }
                } else if (_source90.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2720___mcc_h937 = _source90.dtor_args;
                  DAST._IType _2721___mcc_h938 = _source90.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2722_recursiveGen;
                    bool _2723_recOwned;
                    bool _2724_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2725_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1057;
                    bool _out1058;
                    bool _out1059;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1060;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1057, out _out1058, out _out1059, out _out1060);
                    _2722_recursiveGen = _out1057;
                    _2723_recOwned = _out1058;
                    _2724_recErased = _out1059;
                    _2725_recIdents = _out1060;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2722_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2723_recOwned;
                    isErased = _2724_recErased;
                    readIdents = _2725_recIdents;
                  }
                } else if (_source90.is_Primitive) {
                  DAST._IPrimitive _2726___mcc_h941 = _source90.dtor_Primitive_a0;
                  DAST._IPrimitive _source92 = _2726___mcc_h941;
                  if (_source92.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2727_recursiveGen;
                      bool _2728___v52;
                      bool _2729___v53;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2730_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1061;
                      bool _out1062;
                      bool _out1063;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1064;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, false, out _out1061, out _out1062, out _out1063, out _out1064);
                      _2727_recursiveGen = _out1061;
                      _2728___v52 = _out1062;
                      _2729___v53 = _out1063;
                      _2730_recIdents = _out1064;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), _2727_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2730_recIdents;
                    }
                  } else if (_source92.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2731_recursiveGen;
                      bool _2732_recOwned;
                      bool _2733_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2734_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1065;
                      bool _out1066;
                      bool _out1067;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1068;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1065, out _out1066, out _out1067, out _out1068);
                      _2731_recursiveGen = _out1065;
                      _2732_recOwned = _out1066;
                      _2733_recErased = _out1067;
                      _2734_recIdents = _out1068;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2731_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2732_recOwned;
                      isErased = _2733_recErased;
                      readIdents = _2734_recIdents;
                    }
                  } else if (_source92.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2735_recursiveGen;
                      bool _2736_recOwned;
                      bool _2737_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2738_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1069;
                      bool _out1070;
                      bool _out1071;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1072;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1069, out _out1070, out _out1071, out _out1072);
                      _2735_recursiveGen = _out1069;
                      _2736_recOwned = _out1070;
                      _2737_recErased = _out1071;
                      _2738_recIdents = _out1072;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2735_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2736_recOwned;
                      isErased = _2737_recErased;
                      readIdents = _2738_recIdents;
                    }
                  } else if (_source92.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2739_recursiveGen;
                      bool _2740_recOwned;
                      bool _2741_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2742_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1073;
                      bool _out1074;
                      bool _out1075;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1076;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1073, out _out1074, out _out1075, out _out1076);
                      _2739_recursiveGen = _out1073;
                      _2740_recOwned = _out1074;
                      _2741_recErased = _out1075;
                      _2742_recIdents = _out1076;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2739_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2740_recOwned;
                      isErased = _2741_recErased;
                      readIdents = _2742_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2743_recursiveGen;
                      bool _2744_recOwned;
                      bool _2745_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2746_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1077;
                      bool _out1078;
                      bool _out1079;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1080;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1077, out _out1078, out _out1079, out _out1080);
                      _2743_recursiveGen = _out1077;
                      _2744_recOwned = _out1078;
                      _2745_recErased = _out1079;
                      _2746_recIdents = _out1080;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2743_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2744_recOwned;
                      isErased = _2745_recErased;
                      readIdents = _2746_recIdents;
                    }
                  }
                } else if (_source90.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2747___mcc_h943 = _source90.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2748_recursiveGen;
                    bool _2749_recOwned;
                    bool _2750_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2751_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1081;
                    bool _out1082;
                    bool _out1083;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1084;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1081, out _out1082, out _out1083, out _out1084);
                    _2748_recursiveGen = _out1081;
                    _2749_recOwned = _out1082;
                    _2750_recErased = _out1083;
                    _2751_recIdents = _out1084;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2748_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2749_recOwned;
                    isErased = _2750_recErased;
                    readIdents = _2751_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2752___mcc_h945 = _source90.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2753_recursiveGen;
                    bool _2754_recOwned;
                    bool _2755_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2756_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1085;
                    bool _out1086;
                    bool _out1087;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1088;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1085, out _out1086, out _out1087, out _out1088);
                    _2753_recursiveGen = _out1085;
                    _2754_recOwned = _out1086;
                    _2755_recErased = _out1087;
                    _2756_recIdents = _out1088;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2753_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2754_recOwned;
                    isErased = _2755_recErased;
                    readIdents = _2756_recIdents;
                  }
                }
              } else if (_source86.is_String) {
                DAST._IType _source93 = _1656___mcc_h312;
                if (_source93.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2757___mcc_h947 = _source93.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2758___mcc_h948 = _source93.dtor_typeArgs;
                  DAST._IResolvedType _2759___mcc_h949 = _source93.dtor_resolved;
                  DAST._IResolvedType _source94 = _2759___mcc_h949;
                  if (_source94.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2760___mcc_h953 = _source94.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2761_recursiveGen;
                      bool _2762_recOwned;
                      bool _2763_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2764_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1089;
                      bool _out1090;
                      bool _out1091;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1092;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1089, out _out1090, out _out1091, out _out1092);
                      _2761_recursiveGen = _out1089;
                      _2762_recOwned = _out1090;
                      _2763_recErased = _out1091;
                      _2764_recIdents = _out1092;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2761_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2762_recOwned;
                      isErased = _2763_recErased;
                      readIdents = _2764_recIdents;
                    }
                  } else if (_source94.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2765___mcc_h955 = _source94.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2766_recursiveGen;
                      bool _2767_recOwned;
                      bool _2768_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2769_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1093;
                      bool _out1094;
                      bool _out1095;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1096;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1093, out _out1094, out _out1095, out _out1096);
                      _2766_recursiveGen = _out1093;
                      _2767_recOwned = _out1094;
                      _2768_recErased = _out1095;
                      _2769_recIdents = _out1096;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2766_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2767_recOwned;
                      isErased = _2768_recErased;
                      readIdents = _2769_recIdents;
                    }
                  } else {
                    DAST._IType _2770___mcc_h957 = _source94.dtor_Newtype_a0;
                    DAST._IType _2771_b = _2770___mcc_h957;
                    {
                      if (object.Equals(_1649_fromTpe, _2771_b)) {
                        Dafny.ISequence<Dafny.Rune> _2772_recursiveGen;
                        bool _2773_recOwned;
                        bool _2774_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2775_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1097;
                        bool _out1098;
                        bool _out1099;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1100;
                        DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1097, out _out1098, out _out1099, out _out1100);
                        _2772_recursiveGen = _out1097;
                        _2773_recOwned = _out1098;
                        _2774_recErased = _out1099;
                        _2775_recIdents = _out1100;
                        Dafny.ISequence<Dafny.Rune> _2776_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1101;
                        _out1101 = DCOMP.COMP.GenType(_1648_toTpe, true, false);
                        _2776_rhsType = _out1101;
                        Dafny.ISequence<Dafny.Rune> _2777_uneraseFn;
                        _2777_uneraseFn = ((_2773_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2776_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2777_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2772_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2773_recOwned;
                        isErased = false;
                        readIdents = _2775_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1102;
                        bool _out1103;
                        bool _out1104;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1105;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1650_expr, _1649_fromTpe, _2771_b), _2771_b, _1648_toTpe), selfIdent, @params, mustOwn, out _out1102, out _out1103, out _out1104, out _out1105);
                        s = _out1102;
                        isOwned = _out1103;
                        isErased = _out1104;
                        readIdents = _out1105;
                      }
                    }
                  }
                } else if (_source93.is_Nullable) {
                  DAST._IType _2778___mcc_h959 = _source93.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2779_recursiveGen;
                    bool _2780_recOwned;
                    bool _2781_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2782_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1106;
                    bool _out1107;
                    bool _out1108;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1109;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1106, out _out1107, out _out1108, out _out1109);
                    _2779_recursiveGen = _out1106;
                    _2780_recOwned = _out1107;
                    _2781_recErased = _out1108;
                    _2782_recIdents = _out1109;
                    if (!(_2780_recOwned)) {
                      _2779_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2779_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2779_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2781_recErased;
                    readIdents = _2782_recIdents;
                  }
                } else if (_source93.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2783___mcc_h961 = _source93.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2784_recursiveGen;
                    bool _2785_recOwned;
                    bool _2786_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2787_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1110;
                    bool _out1111;
                    bool _out1112;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1113;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1110, out _out1111, out _out1112, out _out1113);
                    _2784_recursiveGen = _out1110;
                    _2785_recOwned = _out1111;
                    _2786_recErased = _out1112;
                    _2787_recIdents = _out1113;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2784_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2785_recOwned;
                    isErased = _2786_recErased;
                    readIdents = _2787_recIdents;
                  }
                } else if (_source93.is_Array) {
                  DAST._IType _2788___mcc_h963 = _source93.dtor_element;
                  BigInteger _2789___mcc_h964 = _source93.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2790_recursiveGen;
                    bool _2791_recOwned;
                    bool _2792_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2793_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1114;
                    bool _out1115;
                    bool _out1116;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1117;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1114, out _out1115, out _out1116, out _out1117);
                    _2790_recursiveGen = _out1114;
                    _2791_recOwned = _out1115;
                    _2792_recErased = _out1116;
                    _2793_recIdents = _out1117;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2791_recOwned;
                    isErased = _2792_recErased;
                    readIdents = _2793_recIdents;
                  }
                } else if (_source93.is_Seq) {
                  DAST._IType _2794___mcc_h967 = _source93.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2795_recursiveGen;
                    bool _2796_recOwned;
                    bool _2797_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2798_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1118;
                    bool _out1119;
                    bool _out1120;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1121;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1118, out _out1119, out _out1120, out _out1121);
                    _2795_recursiveGen = _out1118;
                    _2796_recOwned = _out1119;
                    _2797_recErased = _out1120;
                    _2798_recIdents = _out1121;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2795_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2796_recOwned;
                    isErased = _2797_recErased;
                    readIdents = _2798_recIdents;
                  }
                } else if (_source93.is_Set) {
                  DAST._IType _2799___mcc_h969 = _source93.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2800_recursiveGen;
                    bool _2801_recOwned;
                    bool _2802_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2803_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1122;
                    bool _out1123;
                    bool _out1124;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1125;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1122, out _out1123, out _out1124, out _out1125);
                    _2800_recursiveGen = _out1122;
                    _2801_recOwned = _out1123;
                    _2802_recErased = _out1124;
                    _2803_recIdents = _out1125;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2800_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2801_recOwned;
                    isErased = _2802_recErased;
                    readIdents = _2803_recIdents;
                  }
                } else if (_source93.is_Multiset) {
                  DAST._IType _2804___mcc_h971 = _source93.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2805_recursiveGen;
                    bool _2806_recOwned;
                    bool _2807_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2808_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1126;
                    bool _out1127;
                    bool _out1128;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1129;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1126, out _out1127, out _out1128, out _out1129);
                    _2805_recursiveGen = _out1126;
                    _2806_recOwned = _out1127;
                    _2807_recErased = _out1128;
                    _2808_recIdents = _out1129;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2805_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2806_recOwned;
                    isErased = _2807_recErased;
                    readIdents = _2808_recIdents;
                  }
                } else if (_source93.is_Map) {
                  DAST._IType _2809___mcc_h973 = _source93.dtor_key;
                  DAST._IType _2810___mcc_h974 = _source93.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2811_recursiveGen;
                    bool _2812_recOwned;
                    bool _2813_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2814_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1130;
                    bool _out1131;
                    bool _out1132;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1133;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1130, out _out1131, out _out1132, out _out1133);
                    _2811_recursiveGen = _out1130;
                    _2812_recOwned = _out1131;
                    _2813_recErased = _out1132;
                    _2814_recIdents = _out1133;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2811_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2812_recOwned;
                    isErased = _2813_recErased;
                    readIdents = _2814_recIdents;
                  }
                } else if (_source93.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2815___mcc_h977 = _source93.dtor_args;
                  DAST._IType _2816___mcc_h978 = _source93.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2817_recursiveGen;
                    bool _2818_recOwned;
                    bool _2819_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2820_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1134;
                    bool _out1135;
                    bool _out1136;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1137;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1134, out _out1135, out _out1136, out _out1137);
                    _2817_recursiveGen = _out1134;
                    _2818_recOwned = _out1135;
                    _2819_recErased = _out1136;
                    _2820_recIdents = _out1137;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2817_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2818_recOwned;
                    isErased = _2819_recErased;
                    readIdents = _2820_recIdents;
                  }
                } else if (_source93.is_Primitive) {
                  DAST._IPrimitive _2821___mcc_h981 = _source93.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2822_recursiveGen;
                    bool _2823_recOwned;
                    bool _2824_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2825_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1138;
                    bool _out1139;
                    bool _out1140;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1141;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1138, out _out1139, out _out1140, out _out1141);
                    _2822_recursiveGen = _out1138;
                    _2823_recOwned = _out1139;
                    _2824_recErased = _out1140;
                    _2825_recIdents = _out1141;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2822_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2823_recOwned;
                    isErased = _2824_recErased;
                    readIdents = _2825_recIdents;
                  }
                } else if (_source93.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2826___mcc_h983 = _source93.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2827_recursiveGen;
                    bool _2828_recOwned;
                    bool _2829_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2830_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1142;
                    bool _out1143;
                    bool _out1144;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1145;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1142, out _out1143, out _out1144, out _out1145);
                    _2827_recursiveGen = _out1142;
                    _2828_recOwned = _out1143;
                    _2829_recErased = _out1144;
                    _2830_recIdents = _out1145;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2827_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2828_recOwned;
                    isErased = _2829_recErased;
                    readIdents = _2830_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2831___mcc_h985 = _source93.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2832_recursiveGen;
                    bool _2833_recOwned;
                    bool _2834_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2835_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1146;
                    bool _out1147;
                    bool _out1148;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1149;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1146, out _out1147, out _out1148, out _out1149);
                    _2832_recursiveGen = _out1146;
                    _2833_recOwned = _out1147;
                    _2834_recErased = _out1148;
                    _2835_recIdents = _out1149;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2833_recOwned;
                    isErased = _2834_recErased;
                    readIdents = _2835_recIdents;
                  }
                }
              } else if (_source86.is_Bool) {
                DAST._IType _source95 = _1656___mcc_h312;
                if (_source95.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2836___mcc_h987 = _source95.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2837___mcc_h988 = _source95.dtor_typeArgs;
                  DAST._IResolvedType _2838___mcc_h989 = _source95.dtor_resolved;
                  DAST._IResolvedType _source96 = _2838___mcc_h989;
                  if (_source96.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2839___mcc_h993 = _source96.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2840_recursiveGen;
                      bool _2841_recOwned;
                      bool _2842_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2843_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1150;
                      bool _out1151;
                      bool _out1152;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1153;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1150, out _out1151, out _out1152, out _out1153);
                      _2840_recursiveGen = _out1150;
                      _2841_recOwned = _out1151;
                      _2842_recErased = _out1152;
                      _2843_recIdents = _out1153;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2840_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2841_recOwned;
                      isErased = _2842_recErased;
                      readIdents = _2843_recIdents;
                    }
                  } else if (_source96.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2844___mcc_h995 = _source96.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2845_recursiveGen;
                      bool _2846_recOwned;
                      bool _2847_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2848_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1154;
                      bool _out1155;
                      bool _out1156;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1157;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1154, out _out1155, out _out1156, out _out1157);
                      _2845_recursiveGen = _out1154;
                      _2846_recOwned = _out1155;
                      _2847_recErased = _out1156;
                      _2848_recIdents = _out1157;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2845_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2846_recOwned;
                      isErased = _2847_recErased;
                      readIdents = _2848_recIdents;
                    }
                  } else {
                    DAST._IType _2849___mcc_h997 = _source96.dtor_Newtype_a0;
                    DAST._IType _2850_b = _2849___mcc_h997;
                    {
                      if (object.Equals(_1649_fromTpe, _2850_b)) {
                        Dafny.ISequence<Dafny.Rune> _2851_recursiveGen;
                        bool _2852_recOwned;
                        bool _2853_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2854_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1158;
                        bool _out1159;
                        bool _out1160;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1161;
                        DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1158, out _out1159, out _out1160, out _out1161);
                        _2851_recursiveGen = _out1158;
                        _2852_recOwned = _out1159;
                        _2853_recErased = _out1160;
                        _2854_recIdents = _out1161;
                        Dafny.ISequence<Dafny.Rune> _2855_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1162;
                        _out1162 = DCOMP.COMP.GenType(_1648_toTpe, true, false);
                        _2855_rhsType = _out1162;
                        Dafny.ISequence<Dafny.Rune> _2856_uneraseFn;
                        _2856_uneraseFn = ((_2852_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2855_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2856_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2851_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2852_recOwned;
                        isErased = false;
                        readIdents = _2854_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1163;
                        bool _out1164;
                        bool _out1165;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1166;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1650_expr, _1649_fromTpe, _2850_b), _2850_b, _1648_toTpe), selfIdent, @params, mustOwn, out _out1163, out _out1164, out _out1165, out _out1166);
                        s = _out1163;
                        isOwned = _out1164;
                        isErased = _out1165;
                        readIdents = _out1166;
                      }
                    }
                  }
                } else if (_source95.is_Nullable) {
                  DAST._IType _2857___mcc_h999 = _source95.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2858_recursiveGen;
                    bool _2859_recOwned;
                    bool _2860_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2861_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1167;
                    bool _out1168;
                    bool _out1169;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1170;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1167, out _out1168, out _out1169, out _out1170);
                    _2858_recursiveGen = _out1167;
                    _2859_recOwned = _out1168;
                    _2860_recErased = _out1169;
                    _2861_recIdents = _out1170;
                    if (!(_2859_recOwned)) {
                      _2858_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2858_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2858_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2860_recErased;
                    readIdents = _2861_recIdents;
                  }
                } else if (_source95.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2862___mcc_h1001 = _source95.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2863_recursiveGen;
                    bool _2864_recOwned;
                    bool _2865_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2866_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1171;
                    bool _out1172;
                    bool _out1173;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1174;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1171, out _out1172, out _out1173, out _out1174);
                    _2863_recursiveGen = _out1171;
                    _2864_recOwned = _out1172;
                    _2865_recErased = _out1173;
                    _2866_recIdents = _out1174;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2863_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2864_recOwned;
                    isErased = _2865_recErased;
                    readIdents = _2866_recIdents;
                  }
                } else if (_source95.is_Array) {
                  DAST._IType _2867___mcc_h1003 = _source95.dtor_element;
                  BigInteger _2868___mcc_h1004 = _source95.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2869_recursiveGen;
                    bool _2870_recOwned;
                    bool _2871_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2872_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1175;
                    bool _out1176;
                    bool _out1177;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1178;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1175, out _out1176, out _out1177, out _out1178);
                    _2869_recursiveGen = _out1175;
                    _2870_recOwned = _out1176;
                    _2871_recErased = _out1177;
                    _2872_recIdents = _out1178;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2869_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2870_recOwned;
                    isErased = _2871_recErased;
                    readIdents = _2872_recIdents;
                  }
                } else if (_source95.is_Seq) {
                  DAST._IType _2873___mcc_h1007 = _source95.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2874_recursiveGen;
                    bool _2875_recOwned;
                    bool _2876_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2877_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1179;
                    bool _out1180;
                    bool _out1181;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1182;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1179, out _out1180, out _out1181, out _out1182);
                    _2874_recursiveGen = _out1179;
                    _2875_recOwned = _out1180;
                    _2876_recErased = _out1181;
                    _2877_recIdents = _out1182;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2874_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2875_recOwned;
                    isErased = _2876_recErased;
                    readIdents = _2877_recIdents;
                  }
                } else if (_source95.is_Set) {
                  DAST._IType _2878___mcc_h1009 = _source95.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2879_recursiveGen;
                    bool _2880_recOwned;
                    bool _2881_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2882_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1183;
                    bool _out1184;
                    bool _out1185;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1186;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1183, out _out1184, out _out1185, out _out1186);
                    _2879_recursiveGen = _out1183;
                    _2880_recOwned = _out1184;
                    _2881_recErased = _out1185;
                    _2882_recIdents = _out1186;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2879_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2880_recOwned;
                    isErased = _2881_recErased;
                    readIdents = _2882_recIdents;
                  }
                } else if (_source95.is_Multiset) {
                  DAST._IType _2883___mcc_h1011 = _source95.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2884_recursiveGen;
                    bool _2885_recOwned;
                    bool _2886_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2887_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1187;
                    bool _out1188;
                    bool _out1189;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1190;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1187, out _out1188, out _out1189, out _out1190);
                    _2884_recursiveGen = _out1187;
                    _2885_recOwned = _out1188;
                    _2886_recErased = _out1189;
                    _2887_recIdents = _out1190;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2884_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2885_recOwned;
                    isErased = _2886_recErased;
                    readIdents = _2887_recIdents;
                  }
                } else if (_source95.is_Map) {
                  DAST._IType _2888___mcc_h1013 = _source95.dtor_key;
                  DAST._IType _2889___mcc_h1014 = _source95.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2890_recursiveGen;
                    bool _2891_recOwned;
                    bool _2892_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2893_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1191;
                    bool _out1192;
                    bool _out1193;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1194;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1191, out _out1192, out _out1193, out _out1194);
                    _2890_recursiveGen = _out1191;
                    _2891_recOwned = _out1192;
                    _2892_recErased = _out1193;
                    _2893_recIdents = _out1194;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2890_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2891_recOwned;
                    isErased = _2892_recErased;
                    readIdents = _2893_recIdents;
                  }
                } else if (_source95.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2894___mcc_h1017 = _source95.dtor_args;
                  DAST._IType _2895___mcc_h1018 = _source95.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2896_recursiveGen;
                    bool _2897_recOwned;
                    bool _2898_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2899_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1195;
                    bool _out1196;
                    bool _out1197;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1198;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1195, out _out1196, out _out1197, out _out1198);
                    _2896_recursiveGen = _out1195;
                    _2897_recOwned = _out1196;
                    _2898_recErased = _out1197;
                    _2899_recIdents = _out1198;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2896_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2897_recOwned;
                    isErased = _2898_recErased;
                    readIdents = _2899_recIdents;
                  }
                } else if (_source95.is_Primitive) {
                  DAST._IPrimitive _2900___mcc_h1021 = _source95.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2901_recursiveGen;
                    bool _2902_recOwned;
                    bool _2903_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2904_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1199;
                    bool _out1200;
                    bool _out1201;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1202;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1199, out _out1200, out _out1201, out _out1202);
                    _2901_recursiveGen = _out1199;
                    _2902_recOwned = _out1200;
                    _2903_recErased = _out1201;
                    _2904_recIdents = _out1202;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2901_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2902_recOwned;
                    isErased = _2903_recErased;
                    readIdents = _2904_recIdents;
                  }
                } else if (_source95.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2905___mcc_h1023 = _source95.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2906_recursiveGen;
                    bool _2907_recOwned;
                    bool _2908_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2909_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1203;
                    bool _out1204;
                    bool _out1205;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1206;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1203, out _out1204, out _out1205, out _out1206);
                    _2906_recursiveGen = _out1203;
                    _2907_recOwned = _out1204;
                    _2908_recErased = _out1205;
                    _2909_recIdents = _out1206;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2906_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2907_recOwned;
                    isErased = _2908_recErased;
                    readIdents = _2909_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2910___mcc_h1025 = _source95.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2911_recursiveGen;
                    bool _2912_recOwned;
                    bool _2913_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2914_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1207;
                    bool _out1208;
                    bool _out1209;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1210;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1207, out _out1208, out _out1209, out _out1210);
                    _2911_recursiveGen = _out1207;
                    _2912_recOwned = _out1208;
                    _2913_recErased = _out1209;
                    _2914_recIdents = _out1210;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2911_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2912_recOwned;
                    isErased = _2913_recErased;
                    readIdents = _2914_recIdents;
                  }
                }
              } else {
                DAST._IType _source97 = _1656___mcc_h312;
                if (_source97.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2915___mcc_h1027 = _source97.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2916___mcc_h1028 = _source97.dtor_typeArgs;
                  DAST._IResolvedType _2917___mcc_h1029 = _source97.dtor_resolved;
                  DAST._IResolvedType _source98 = _2917___mcc_h1029;
                  if (_source98.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2918___mcc_h1033 = _source98.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2919_recursiveGen;
                      bool _2920_recOwned;
                      bool _2921_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2922_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1211;
                      bool _out1212;
                      bool _out1213;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1214;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1211, out _out1212, out _out1213, out _out1214);
                      _2919_recursiveGen = _out1211;
                      _2920_recOwned = _out1212;
                      _2921_recErased = _out1213;
                      _2922_recIdents = _out1214;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2919_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2920_recOwned;
                      isErased = _2921_recErased;
                      readIdents = _2922_recIdents;
                    }
                  } else if (_source98.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2923___mcc_h1035 = _source98.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2924_recursiveGen;
                      bool _2925_recOwned;
                      bool _2926_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2927_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1215;
                      bool _out1216;
                      bool _out1217;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1218;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1215, out _out1216, out _out1217, out _out1218);
                      _2924_recursiveGen = _out1215;
                      _2925_recOwned = _out1216;
                      _2926_recErased = _out1217;
                      _2927_recIdents = _out1218;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2924_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2925_recOwned;
                      isErased = _2926_recErased;
                      readIdents = _2927_recIdents;
                    }
                  } else {
                    DAST._IType _2928___mcc_h1037 = _source98.dtor_Newtype_a0;
                    DAST._IType _2929_b = _2928___mcc_h1037;
                    {
                      if (object.Equals(_1649_fromTpe, _2929_b)) {
                        Dafny.ISequence<Dafny.Rune> _2930_recursiveGen;
                        bool _2931_recOwned;
                        bool _2932_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2933_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1219;
                        bool _out1220;
                        bool _out1221;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1222;
                        DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1219, out _out1220, out _out1221, out _out1222);
                        _2930_recursiveGen = _out1219;
                        _2931_recOwned = _out1220;
                        _2932_recErased = _out1221;
                        _2933_recIdents = _out1222;
                        Dafny.ISequence<Dafny.Rune> _2934_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1223;
                        _out1223 = DCOMP.COMP.GenType(_1648_toTpe, true, false);
                        _2934_rhsType = _out1223;
                        Dafny.ISequence<Dafny.Rune> _2935_uneraseFn;
                        _2935_uneraseFn = ((_2931_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2934_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2935_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2930_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2931_recOwned;
                        isErased = false;
                        readIdents = _2933_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1224;
                        bool _out1225;
                        bool _out1226;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1227;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1650_expr, _1649_fromTpe, _2929_b), _2929_b, _1648_toTpe), selfIdent, @params, mustOwn, out _out1224, out _out1225, out _out1226, out _out1227);
                        s = _out1224;
                        isOwned = _out1225;
                        isErased = _out1226;
                        readIdents = _out1227;
                      }
                    }
                  }
                } else if (_source97.is_Nullable) {
                  DAST._IType _2936___mcc_h1039 = _source97.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2937_recursiveGen;
                    bool _2938_recOwned;
                    bool _2939_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2940_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1228;
                    bool _out1229;
                    bool _out1230;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1231;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1228, out _out1229, out _out1230, out _out1231);
                    _2937_recursiveGen = _out1228;
                    _2938_recOwned = _out1229;
                    _2939_recErased = _out1230;
                    _2940_recIdents = _out1231;
                    if (!(_2938_recOwned)) {
                      _2937_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2937_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2937_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2939_recErased;
                    readIdents = _2940_recIdents;
                  }
                } else if (_source97.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2941___mcc_h1041 = _source97.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2942_recursiveGen;
                    bool _2943_recOwned;
                    bool _2944_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2945_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1232;
                    bool _out1233;
                    bool _out1234;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1235;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1232, out _out1233, out _out1234, out _out1235);
                    _2942_recursiveGen = _out1232;
                    _2943_recOwned = _out1233;
                    _2944_recErased = _out1234;
                    _2945_recIdents = _out1235;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2942_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2943_recOwned;
                    isErased = _2944_recErased;
                    readIdents = _2945_recIdents;
                  }
                } else if (_source97.is_Array) {
                  DAST._IType _2946___mcc_h1043 = _source97.dtor_element;
                  BigInteger _2947___mcc_h1044 = _source97.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2948_recursiveGen;
                    bool _2949_recOwned;
                    bool _2950_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2951_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1236;
                    bool _out1237;
                    bool _out1238;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1239;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1236, out _out1237, out _out1238, out _out1239);
                    _2948_recursiveGen = _out1236;
                    _2949_recOwned = _out1237;
                    _2950_recErased = _out1238;
                    _2951_recIdents = _out1239;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2948_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2949_recOwned;
                    isErased = _2950_recErased;
                    readIdents = _2951_recIdents;
                  }
                } else if (_source97.is_Seq) {
                  DAST._IType _2952___mcc_h1047 = _source97.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2953_recursiveGen;
                    bool _2954_recOwned;
                    bool _2955_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2956_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1240;
                    bool _out1241;
                    bool _out1242;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1243;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1240, out _out1241, out _out1242, out _out1243);
                    _2953_recursiveGen = _out1240;
                    _2954_recOwned = _out1241;
                    _2955_recErased = _out1242;
                    _2956_recIdents = _out1243;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2953_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2954_recOwned;
                    isErased = _2955_recErased;
                    readIdents = _2956_recIdents;
                  }
                } else if (_source97.is_Set) {
                  DAST._IType _2957___mcc_h1049 = _source97.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2958_recursiveGen;
                    bool _2959_recOwned;
                    bool _2960_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2961_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1244;
                    bool _out1245;
                    bool _out1246;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1247;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1244, out _out1245, out _out1246, out _out1247);
                    _2958_recursiveGen = _out1244;
                    _2959_recOwned = _out1245;
                    _2960_recErased = _out1246;
                    _2961_recIdents = _out1247;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2958_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2959_recOwned;
                    isErased = _2960_recErased;
                    readIdents = _2961_recIdents;
                  }
                } else if (_source97.is_Multiset) {
                  DAST._IType _2962___mcc_h1051 = _source97.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2963_recursiveGen;
                    bool _2964_recOwned;
                    bool _2965_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2966_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1248;
                    bool _out1249;
                    bool _out1250;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1251;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1248, out _out1249, out _out1250, out _out1251);
                    _2963_recursiveGen = _out1248;
                    _2964_recOwned = _out1249;
                    _2965_recErased = _out1250;
                    _2966_recIdents = _out1251;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2963_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2964_recOwned;
                    isErased = _2965_recErased;
                    readIdents = _2966_recIdents;
                  }
                } else if (_source97.is_Map) {
                  DAST._IType _2967___mcc_h1053 = _source97.dtor_key;
                  DAST._IType _2968___mcc_h1054 = _source97.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2969_recursiveGen;
                    bool _2970_recOwned;
                    bool _2971_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2972_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1252;
                    bool _out1253;
                    bool _out1254;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1255;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1252, out _out1253, out _out1254, out _out1255);
                    _2969_recursiveGen = _out1252;
                    _2970_recOwned = _out1253;
                    _2971_recErased = _out1254;
                    _2972_recIdents = _out1255;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2969_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2970_recOwned;
                    isErased = _2971_recErased;
                    readIdents = _2972_recIdents;
                  }
                } else if (_source97.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2973___mcc_h1057 = _source97.dtor_args;
                  DAST._IType _2974___mcc_h1058 = _source97.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2975_recursiveGen;
                    bool _2976_recOwned;
                    bool _2977_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2978_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1256;
                    bool _out1257;
                    bool _out1258;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1259;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1256, out _out1257, out _out1258, out _out1259);
                    _2975_recursiveGen = _out1256;
                    _2976_recOwned = _out1257;
                    _2977_recErased = _out1258;
                    _2978_recIdents = _out1259;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2975_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2976_recOwned;
                    isErased = _2977_recErased;
                    readIdents = _2978_recIdents;
                  }
                } else if (_source97.is_Primitive) {
                  DAST._IPrimitive _2979___mcc_h1061 = _source97.dtor_Primitive_a0;
                  DAST._IPrimitive _source99 = _2979___mcc_h1061;
                  if (_source99.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2980_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1260;
                      _out1260 = DCOMP.COMP.GenType(_1649_fromTpe, true, false);
                      _2980_rhsType = _out1260;
                      Dafny.ISequence<Dafny.Rune> _2981_recursiveGen;
                      bool _2982___v62;
                      bool _2983___v63;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2984_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1261;
                      bool _out1262;
                      bool _out1263;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1264;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, true, out _out1261, out _out1262, out _out1263, out _out1264);
                      _2981_recursiveGen = _out1261;
                      _2982___v62 = _out1262;
                      _2983___v63 = _out1263;
                      _2984_recIdents = _out1264;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _2981_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u32)"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2984_recIdents;
                    }
                  } else if (_source99.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2985_recursiveGen;
                      bool _2986_recOwned;
                      bool _2987_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2988_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1265;
                      bool _out1266;
                      bool _out1267;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1268;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1265, out _out1266, out _out1267, out _out1268);
                      _2985_recursiveGen = _out1265;
                      _2986_recOwned = _out1266;
                      _2987_recErased = _out1267;
                      _2988_recIdents = _out1268;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2985_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2986_recOwned;
                      isErased = _2987_recErased;
                      readIdents = _2988_recIdents;
                    }
                  } else if (_source99.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2989_recursiveGen;
                      bool _2990_recOwned;
                      bool _2991_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2992_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1269;
                      bool _out1270;
                      bool _out1271;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1272;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1269, out _out1270, out _out1271, out _out1272);
                      _2989_recursiveGen = _out1269;
                      _2990_recOwned = _out1270;
                      _2991_recErased = _out1271;
                      _2992_recIdents = _out1272;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2989_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2990_recOwned;
                      isErased = _2991_recErased;
                      readIdents = _2992_recIdents;
                    }
                  } else if (_source99.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2993_recursiveGen;
                      bool _2994_recOwned;
                      bool _2995_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2996_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1273;
                      bool _out1274;
                      bool _out1275;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1276;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1273, out _out1274, out _out1275, out _out1276);
                      _2993_recursiveGen = _out1273;
                      _2994_recOwned = _out1274;
                      _2995_recErased = _out1275;
                      _2996_recIdents = _out1276;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2993_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2994_recOwned;
                      isErased = _2995_recErased;
                      readIdents = _2996_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2997_recursiveGen;
                      bool _2998_recOwned;
                      bool _2999_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3000_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1277;
                      bool _out1278;
                      bool _out1279;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1280;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1277, out _out1278, out _out1279, out _out1280);
                      _2997_recursiveGen = _out1277;
                      _2998_recOwned = _out1278;
                      _2999_recErased = _out1279;
                      _3000_recIdents = _out1280;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2997_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2998_recOwned;
                      isErased = _2999_recErased;
                      readIdents = _3000_recIdents;
                    }
                  }
                } else if (_source97.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _3001___mcc_h1063 = _source97.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _3002_recursiveGen;
                    bool _3003_recOwned;
                    bool _3004_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3005_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1281;
                    bool _out1282;
                    bool _out1283;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1284;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1281, out _out1282, out _out1283, out _out1284);
                    _3002_recursiveGen = _out1281;
                    _3003_recOwned = _out1282;
                    _3004_recErased = _out1283;
                    _3005_recIdents = _out1284;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3002_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3003_recOwned;
                    isErased = _3004_recErased;
                    readIdents = _3005_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3006___mcc_h1065 = _source97.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _3007_recursiveGen;
                    bool _3008_recOwned;
                    bool _3009_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3010_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1285;
                    bool _out1286;
                    bool _out1287;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1288;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1285, out _out1286, out _out1287, out _out1288);
                    _3007_recursiveGen = _out1285;
                    _3008_recOwned = _out1286;
                    _3009_recErased = _out1287;
                    _3010_recIdents = _out1288;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3007_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3008_recOwned;
                    isErased = _3009_recErased;
                    readIdents = _3010_recIdents;
                  }
                }
              }
            } else if (_source62.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _3011___mcc_h1067 = _source62.dtor_Passthrough_a0;
              DAST._IType _source100 = _1656___mcc_h312;
              if (_source100.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3012___mcc_h1071 = _source100.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _3013___mcc_h1072 = _source100.dtor_typeArgs;
                DAST._IResolvedType _3014___mcc_h1073 = _source100.dtor_resolved;
                DAST._IResolvedType _source101 = _3014___mcc_h1073;
                if (_source101.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3015___mcc_h1077 = _source101.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _3016_recursiveGen;
                    bool _3017_recOwned;
                    bool _3018_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3019_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1289;
                    bool _out1290;
                    bool _out1291;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1292;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1289, out _out1290, out _out1291, out _out1292);
                    _3016_recursiveGen = _out1289;
                    _3017_recOwned = _out1290;
                    _3018_recErased = _out1291;
                    _3019_recIdents = _out1292;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3016_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3017_recOwned;
                    isErased = _3018_recErased;
                    readIdents = _3019_recIdents;
                  }
                } else if (_source101.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3020___mcc_h1079 = _source101.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _3021_recursiveGen;
                    bool _3022_recOwned;
                    bool _3023_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3024_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1293;
                    bool _out1294;
                    bool _out1295;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1296;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1293, out _out1294, out _out1295, out _out1296);
                    _3021_recursiveGen = _out1293;
                    _3022_recOwned = _out1294;
                    _3023_recErased = _out1295;
                    _3024_recIdents = _out1296;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3021_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3022_recOwned;
                    isErased = _3023_recErased;
                    readIdents = _3024_recIdents;
                  }
                } else {
                  DAST._IType _3025___mcc_h1081 = _source101.dtor_Newtype_a0;
                  DAST._IType _3026_b = _3025___mcc_h1081;
                  {
                    if (object.Equals(_1649_fromTpe, _3026_b)) {
                      Dafny.ISequence<Dafny.Rune> _3027_recursiveGen;
                      bool _3028_recOwned;
                      bool _3029_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3030_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1297;
                      bool _out1298;
                      bool _out1299;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1300;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1297, out _out1298, out _out1299, out _out1300);
                      _3027_recursiveGen = _out1297;
                      _3028_recOwned = _out1298;
                      _3029_recErased = _out1299;
                      _3030_recIdents = _out1300;
                      Dafny.ISequence<Dafny.Rune> _3031_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1301;
                      _out1301 = DCOMP.COMP.GenType(_1648_toTpe, true, false);
                      _3031_rhsType = _out1301;
                      Dafny.ISequence<Dafny.Rune> _3032_uneraseFn;
                      _3032_uneraseFn = ((_3028_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3031_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _3032_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3027_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _3028_recOwned;
                      isErased = false;
                      readIdents = _3030_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1302;
                      bool _out1303;
                      bool _out1304;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1305;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1650_expr, _1649_fromTpe, _3026_b), _3026_b, _1648_toTpe), selfIdent, @params, mustOwn, out _out1302, out _out1303, out _out1304, out _out1305);
                      s = _out1302;
                      isOwned = _out1303;
                      isErased = _out1304;
                      readIdents = _out1305;
                    }
                  }
                }
              } else if (_source100.is_Nullable) {
                DAST._IType _3033___mcc_h1083 = _source100.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3034_recursiveGen;
                  bool _3035_recOwned;
                  bool _3036_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3037_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1306;
                  bool _out1307;
                  bool _out1308;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1309;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1306, out _out1307, out _out1308, out _out1309);
                  _3034_recursiveGen = _out1306;
                  _3035_recOwned = _out1307;
                  _3036_recErased = _out1308;
                  _3037_recIdents = _out1309;
                  if (!(_3035_recOwned)) {
                    _3034_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_3034_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3034_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _3036_recErased;
                  readIdents = _3037_recIdents;
                }
              } else if (_source100.is_Tuple) {
                Dafny.ISequence<DAST._IType> _3038___mcc_h1085 = _source100.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3039_recursiveGen;
                  bool _3040_recOwned;
                  bool _3041_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3042_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1310;
                  bool _out1311;
                  bool _out1312;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1313;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1310, out _out1311, out _out1312, out _out1313);
                  _3039_recursiveGen = _out1310;
                  _3040_recOwned = _out1311;
                  _3041_recErased = _out1312;
                  _3042_recIdents = _out1313;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3039_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3040_recOwned;
                  isErased = _3041_recErased;
                  readIdents = _3042_recIdents;
                }
              } else if (_source100.is_Array) {
                DAST._IType _3043___mcc_h1087 = _source100.dtor_element;
                BigInteger _3044___mcc_h1088 = _source100.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _3045_recursiveGen;
                  bool _3046_recOwned;
                  bool _3047_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3048_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1314;
                  bool _out1315;
                  bool _out1316;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1317;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1314, out _out1315, out _out1316, out _out1317);
                  _3045_recursiveGen = _out1314;
                  _3046_recOwned = _out1315;
                  _3047_recErased = _out1316;
                  _3048_recIdents = _out1317;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3045_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3046_recOwned;
                  isErased = _3047_recErased;
                  readIdents = _3048_recIdents;
                }
              } else if (_source100.is_Seq) {
                DAST._IType _3049___mcc_h1091 = _source100.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3050_recursiveGen;
                  bool _3051_recOwned;
                  bool _3052_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3053_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1318;
                  bool _out1319;
                  bool _out1320;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1321;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1318, out _out1319, out _out1320, out _out1321);
                  _3050_recursiveGen = _out1318;
                  _3051_recOwned = _out1319;
                  _3052_recErased = _out1320;
                  _3053_recIdents = _out1321;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3050_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3051_recOwned;
                  isErased = _3052_recErased;
                  readIdents = _3053_recIdents;
                }
              } else if (_source100.is_Set) {
                DAST._IType _3054___mcc_h1093 = _source100.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3055_recursiveGen;
                  bool _3056_recOwned;
                  bool _3057_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3058_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1322;
                  bool _out1323;
                  bool _out1324;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1325;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1322, out _out1323, out _out1324, out _out1325);
                  _3055_recursiveGen = _out1322;
                  _3056_recOwned = _out1323;
                  _3057_recErased = _out1324;
                  _3058_recIdents = _out1325;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3055_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3056_recOwned;
                  isErased = _3057_recErased;
                  readIdents = _3058_recIdents;
                }
              } else if (_source100.is_Multiset) {
                DAST._IType _3059___mcc_h1095 = _source100.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3060_recursiveGen;
                  bool _3061_recOwned;
                  bool _3062_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3063_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1326;
                  bool _out1327;
                  bool _out1328;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1329;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1326, out _out1327, out _out1328, out _out1329);
                  _3060_recursiveGen = _out1326;
                  _3061_recOwned = _out1327;
                  _3062_recErased = _out1328;
                  _3063_recIdents = _out1329;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3060_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3061_recOwned;
                  isErased = _3062_recErased;
                  readIdents = _3063_recIdents;
                }
              } else if (_source100.is_Map) {
                DAST._IType _3064___mcc_h1097 = _source100.dtor_key;
                DAST._IType _3065___mcc_h1098 = _source100.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _3066_recursiveGen;
                  bool _3067_recOwned;
                  bool _3068_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3069_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1330;
                  bool _out1331;
                  bool _out1332;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1333;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1330, out _out1331, out _out1332, out _out1333);
                  _3066_recursiveGen = _out1330;
                  _3067_recOwned = _out1331;
                  _3068_recErased = _out1332;
                  _3069_recIdents = _out1333;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3066_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3067_recOwned;
                  isErased = _3068_recErased;
                  readIdents = _3069_recIdents;
                }
              } else if (_source100.is_Arrow) {
                Dafny.ISequence<DAST._IType> _3070___mcc_h1101 = _source100.dtor_args;
                DAST._IType _3071___mcc_h1102 = _source100.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _3072_recursiveGen;
                  bool _3073_recOwned;
                  bool _3074_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3075_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1334;
                  bool _out1335;
                  bool _out1336;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1337;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1334, out _out1335, out _out1336, out _out1337);
                  _3072_recursiveGen = _out1334;
                  _3073_recOwned = _out1335;
                  _3074_recErased = _out1336;
                  _3075_recIdents = _out1337;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3072_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3073_recOwned;
                  isErased = _3074_recErased;
                  readIdents = _3075_recIdents;
                }
              } else if (_source100.is_Primitive) {
                DAST._IPrimitive _3076___mcc_h1105 = _source100.dtor_Primitive_a0;
                DAST._IPrimitive _source102 = _3076___mcc_h1105;
                if (_source102.is_Int) {
                  {
                    Dafny.ISequence<Dafny.Rune> _3077_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out1338;
                    _out1338 = DCOMP.COMP.GenType(_1649_fromTpe, true, false);
                    _3077_rhsType = _out1338;
                    Dafny.ISequence<Dafny.Rune> _3078_recursiveGen;
                    bool _3079___v58;
                    bool _3080___v59;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3081_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1339;
                    bool _out1340;
                    bool _out1341;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1342;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, true, out _out1339, out _out1340, out _out1341, out _out1342);
                    _3078_recursiveGen = _out1339;
                    _3079___v58 = _out1340;
                    _3080___v59 = _out1341;
                    _3081_recIdents = _out1342;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _3078_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _3081_recIdents;
                  }
                } else if (_source102.is_Real) {
                  {
                    Dafny.ISequence<Dafny.Rune> _3082_recursiveGen;
                    bool _3083_recOwned;
                    bool _3084_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3085_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1343;
                    bool _out1344;
                    bool _out1345;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1346;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1343, out _out1344, out _out1345, out _out1346);
                    _3082_recursiveGen = _out1343;
                    _3083_recOwned = _out1344;
                    _3084_recErased = _out1345;
                    _3085_recIdents = _out1346;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3082_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3083_recOwned;
                    isErased = _3084_recErased;
                    readIdents = _3085_recIdents;
                  }
                } else if (_source102.is_String) {
                  {
                    Dafny.ISequence<Dafny.Rune> _3086_recursiveGen;
                    bool _3087_recOwned;
                    bool _3088_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3089_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1347;
                    bool _out1348;
                    bool _out1349;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1350;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1347, out _out1348, out _out1349, out _out1350);
                    _3086_recursiveGen = _out1347;
                    _3087_recOwned = _out1348;
                    _3088_recErased = _out1349;
                    _3089_recIdents = _out1350;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3086_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3087_recOwned;
                    isErased = _3088_recErased;
                    readIdents = _3089_recIdents;
                  }
                } else if (_source102.is_Bool) {
                  {
                    Dafny.ISequence<Dafny.Rune> _3090_recursiveGen;
                    bool _3091_recOwned;
                    bool _3092_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3093_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1351;
                    bool _out1352;
                    bool _out1353;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1354;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1351, out _out1352, out _out1353, out _out1354);
                    _3090_recursiveGen = _out1351;
                    _3091_recOwned = _out1352;
                    _3092_recErased = _out1353;
                    _3093_recIdents = _out1354;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3090_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3091_recOwned;
                    isErased = _3092_recErased;
                    readIdents = _3093_recIdents;
                  }
                } else {
                  {
                    Dafny.ISequence<Dafny.Rune> _3094_recursiveGen;
                    bool _3095_recOwned;
                    bool _3096_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3097_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1355;
                    bool _out1356;
                    bool _out1357;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1358;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1355, out _out1356, out _out1357, out _out1358);
                    _3094_recursiveGen = _out1355;
                    _3095_recOwned = _out1356;
                    _3096_recErased = _out1357;
                    _3097_recIdents = _out1358;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3094_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3095_recOwned;
                    isErased = _3096_recErased;
                    readIdents = _3097_recIdents;
                  }
                }
              } else if (_source100.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _3098___mcc_h1107 = _source100.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3099_recursiveGen;
                  bool _3100___v66;
                  bool _3101___v67;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3102_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1359;
                  bool _out1360;
                  bool _out1361;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1362;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, true, out _out1359, out _out1360, out _out1361, out _out1362);
                  _3099_recursiveGen = _out1359;
                  _3100___v66 = _out1360;
                  _3101___v67 = _out1361;
                  _3102_recIdents = _out1362;
                  Dafny.ISequence<Dafny.Rune> _3103_toTpeGen;
                  Dafny.ISequence<Dafny.Rune> _out1363;
                  _out1363 = DCOMP.COMP.GenType(_1648_toTpe, true, false);
                  _3103_toTpeGen = _out1363;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _3099_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _3103_toTpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = true;
                  readIdents = _3102_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3104___mcc_h1109 = _source100.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3105_recursiveGen;
                  bool _3106_recOwned;
                  bool _3107_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3108_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1364;
                  bool _out1365;
                  bool _out1366;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1367;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1364, out _out1365, out _out1366, out _out1367);
                  _3105_recursiveGen = _out1364;
                  _3106_recOwned = _out1365;
                  _3107_recErased = _out1366;
                  _3108_recIdents = _out1367;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3105_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3106_recOwned;
                  isErased = _3107_recErased;
                  readIdents = _3108_recIdents;
                }
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3109___mcc_h1111 = _source62.dtor_TypeArg_a0;
              DAST._IType _source103 = _1656___mcc_h312;
              if (_source103.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3110___mcc_h1115 = _source103.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _3111___mcc_h1116 = _source103.dtor_typeArgs;
                DAST._IResolvedType _3112___mcc_h1117 = _source103.dtor_resolved;
                DAST._IResolvedType _source104 = _3112___mcc_h1117;
                if (_source104.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3113___mcc_h1121 = _source104.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _3114_recursiveGen;
                    bool _3115_recOwned;
                    bool _3116_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3117_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1368;
                    bool _out1369;
                    bool _out1370;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1371;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1368, out _out1369, out _out1370, out _out1371);
                    _3114_recursiveGen = _out1368;
                    _3115_recOwned = _out1369;
                    _3116_recErased = _out1370;
                    _3117_recIdents = _out1371;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3114_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3115_recOwned;
                    isErased = _3116_recErased;
                    readIdents = _3117_recIdents;
                  }
                } else if (_source104.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3118___mcc_h1123 = _source104.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _3119_recursiveGen;
                    bool _3120_recOwned;
                    bool _3121_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3122_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1372;
                    bool _out1373;
                    bool _out1374;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1375;
                    DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1372, out _out1373, out _out1374, out _out1375);
                    _3119_recursiveGen = _out1372;
                    _3120_recOwned = _out1373;
                    _3121_recErased = _out1374;
                    _3122_recIdents = _out1375;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3119_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3120_recOwned;
                    isErased = _3121_recErased;
                    readIdents = _3122_recIdents;
                  }
                } else {
                  DAST._IType _3123___mcc_h1125 = _source104.dtor_Newtype_a0;
                  DAST._IType _3124_b = _3123___mcc_h1125;
                  {
                    if (object.Equals(_1649_fromTpe, _3124_b)) {
                      Dafny.ISequence<Dafny.Rune> _3125_recursiveGen;
                      bool _3126_recOwned;
                      bool _3127_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3128_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1376;
                      bool _out1377;
                      bool _out1378;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1379;
                      DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1376, out _out1377, out _out1378, out _out1379);
                      _3125_recursiveGen = _out1376;
                      _3126_recOwned = _out1377;
                      _3127_recErased = _out1378;
                      _3128_recIdents = _out1379;
                      Dafny.ISequence<Dafny.Rune> _3129_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1380;
                      _out1380 = DCOMP.COMP.GenType(_1648_toTpe, true, false);
                      _3129_rhsType = _out1380;
                      Dafny.ISequence<Dafny.Rune> _3130_uneraseFn;
                      _3130_uneraseFn = ((_3126_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3129_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _3130_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3125_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _3126_recOwned;
                      isErased = false;
                      readIdents = _3128_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1381;
                      bool _out1382;
                      bool _out1383;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1384;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1650_expr, _1649_fromTpe, _3124_b), _3124_b, _1648_toTpe), selfIdent, @params, mustOwn, out _out1381, out _out1382, out _out1383, out _out1384);
                      s = _out1381;
                      isOwned = _out1382;
                      isErased = _out1383;
                      readIdents = _out1384;
                    }
                  }
                }
              } else if (_source103.is_Nullable) {
                DAST._IType _3131___mcc_h1127 = _source103.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3132_recursiveGen;
                  bool _3133_recOwned;
                  bool _3134_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3135_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1385;
                  bool _out1386;
                  bool _out1387;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1388;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1385, out _out1386, out _out1387, out _out1388);
                  _3132_recursiveGen = _out1385;
                  _3133_recOwned = _out1386;
                  _3134_recErased = _out1387;
                  _3135_recIdents = _out1388;
                  if (!(_3133_recOwned)) {
                    _3132_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_3132_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3132_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _3134_recErased;
                  readIdents = _3135_recIdents;
                }
              } else if (_source103.is_Tuple) {
                Dafny.ISequence<DAST._IType> _3136___mcc_h1129 = _source103.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3137_recursiveGen;
                  bool _3138_recOwned;
                  bool _3139_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3140_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1389;
                  bool _out1390;
                  bool _out1391;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1392;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1389, out _out1390, out _out1391, out _out1392);
                  _3137_recursiveGen = _out1389;
                  _3138_recOwned = _out1390;
                  _3139_recErased = _out1391;
                  _3140_recIdents = _out1392;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3137_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3138_recOwned;
                  isErased = _3139_recErased;
                  readIdents = _3140_recIdents;
                }
              } else if (_source103.is_Array) {
                DAST._IType _3141___mcc_h1131 = _source103.dtor_element;
                BigInteger _3142___mcc_h1132 = _source103.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _3143_recursiveGen;
                  bool _3144_recOwned;
                  bool _3145_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3146_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1393;
                  bool _out1394;
                  bool _out1395;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1396;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1393, out _out1394, out _out1395, out _out1396);
                  _3143_recursiveGen = _out1393;
                  _3144_recOwned = _out1394;
                  _3145_recErased = _out1395;
                  _3146_recIdents = _out1396;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3143_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3144_recOwned;
                  isErased = _3145_recErased;
                  readIdents = _3146_recIdents;
                }
              } else if (_source103.is_Seq) {
                DAST._IType _3147___mcc_h1135 = _source103.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3148_recursiveGen;
                  bool _3149_recOwned;
                  bool _3150_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3151_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1397;
                  bool _out1398;
                  bool _out1399;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1400;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1397, out _out1398, out _out1399, out _out1400);
                  _3148_recursiveGen = _out1397;
                  _3149_recOwned = _out1398;
                  _3150_recErased = _out1399;
                  _3151_recIdents = _out1400;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3148_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3149_recOwned;
                  isErased = _3150_recErased;
                  readIdents = _3151_recIdents;
                }
              } else if (_source103.is_Set) {
                DAST._IType _3152___mcc_h1137 = _source103.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3153_recursiveGen;
                  bool _3154_recOwned;
                  bool _3155_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3156_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1401;
                  bool _out1402;
                  bool _out1403;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1404;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1401, out _out1402, out _out1403, out _out1404);
                  _3153_recursiveGen = _out1401;
                  _3154_recOwned = _out1402;
                  _3155_recErased = _out1403;
                  _3156_recIdents = _out1404;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3153_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3154_recOwned;
                  isErased = _3155_recErased;
                  readIdents = _3156_recIdents;
                }
              } else if (_source103.is_Multiset) {
                DAST._IType _3157___mcc_h1139 = _source103.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3158_recursiveGen;
                  bool _3159_recOwned;
                  bool _3160_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3161_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1405;
                  bool _out1406;
                  bool _out1407;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1408;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1405, out _out1406, out _out1407, out _out1408);
                  _3158_recursiveGen = _out1405;
                  _3159_recOwned = _out1406;
                  _3160_recErased = _out1407;
                  _3161_recIdents = _out1408;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3158_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3159_recOwned;
                  isErased = _3160_recErased;
                  readIdents = _3161_recIdents;
                }
              } else if (_source103.is_Map) {
                DAST._IType _3162___mcc_h1141 = _source103.dtor_key;
                DAST._IType _3163___mcc_h1142 = _source103.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _3164_recursiveGen;
                  bool _3165_recOwned;
                  bool _3166_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3167_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1409;
                  bool _out1410;
                  bool _out1411;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1412;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1409, out _out1410, out _out1411, out _out1412);
                  _3164_recursiveGen = _out1409;
                  _3165_recOwned = _out1410;
                  _3166_recErased = _out1411;
                  _3167_recIdents = _out1412;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3164_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3165_recOwned;
                  isErased = _3166_recErased;
                  readIdents = _3167_recIdents;
                }
              } else if (_source103.is_Arrow) {
                Dafny.ISequence<DAST._IType> _3168___mcc_h1145 = _source103.dtor_args;
                DAST._IType _3169___mcc_h1146 = _source103.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _3170_recursiveGen;
                  bool _3171_recOwned;
                  bool _3172_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3173_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1413;
                  bool _out1414;
                  bool _out1415;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1416;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1413, out _out1414, out _out1415, out _out1416);
                  _3170_recursiveGen = _out1413;
                  _3171_recOwned = _out1414;
                  _3172_recErased = _out1415;
                  _3173_recIdents = _out1416;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3170_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3171_recOwned;
                  isErased = _3172_recErased;
                  readIdents = _3173_recIdents;
                }
              } else if (_source103.is_Primitive) {
                DAST._IPrimitive _3174___mcc_h1149 = _source103.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3175_recursiveGen;
                  bool _3176_recOwned;
                  bool _3177_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3178_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1417;
                  bool _out1418;
                  bool _out1419;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1420;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1417, out _out1418, out _out1419, out _out1420);
                  _3175_recursiveGen = _out1417;
                  _3176_recOwned = _out1418;
                  _3177_recErased = _out1419;
                  _3178_recIdents = _out1420;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3175_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3176_recOwned;
                  isErased = _3177_recErased;
                  readIdents = _3178_recIdents;
                }
              } else if (_source103.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _3179___mcc_h1151 = _source103.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3180_recursiveGen;
                  bool _3181_recOwned;
                  bool _3182_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3183_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1421;
                  bool _out1422;
                  bool _out1423;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1424;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1421, out _out1422, out _out1423, out _out1424);
                  _3180_recursiveGen = _out1421;
                  _3181_recOwned = _out1422;
                  _3182_recErased = _out1423;
                  _3183_recIdents = _out1424;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3180_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3181_recOwned;
                  isErased = _3182_recErased;
                  readIdents = _3183_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3184___mcc_h1153 = _source103.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3185_recursiveGen;
                  bool _3186_recOwned;
                  bool _3187_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3188_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1425;
                  bool _out1426;
                  bool _out1427;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1428;
                  DCOMP.COMP.GenExpr(_1650_expr, selfIdent, @params, mustOwn, out _out1425, out _out1426, out _out1427, out _out1428);
                  _3185_recursiveGen = _out1425;
                  _3186_recOwned = _out1426;
                  _3187_recErased = _out1427;
                  _3188_recIdents = _out1428;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3185_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3186_recOwned;
                  isErased = _3187_recErased;
                  readIdents = _3188_recIdents;
                }
              }
            }
          }
        }
      } else if (_source55.is_SeqConstruct) {
        DAST._IExpression _3189___mcc_h26 = _source55.dtor_length;
        DAST._IExpression _3190___mcc_h27 = _source55.dtor_elem;
        DAST._IExpression _3191_expr = _3190___mcc_h27;
        DAST._IExpression _3192_length = _3189___mcc_h26;
        {
          Dafny.ISequence<Dafny.Rune> _3193_recursiveGen;
          bool _3194___v69;
          bool _3195_eErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3196_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1429;
          bool _out1430;
          bool _out1431;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1432;
          DCOMP.COMP.GenExpr(_3191_expr, selfIdent, @params, true, out _out1429, out _out1430, out _out1431, out _out1432);
          _3193_recursiveGen = _out1429;
          _3194___v69 = _out1430;
          _3195_eErased = _out1431;
          _3196_recIdents = _out1432;
          Dafny.ISequence<Dafny.Rune> _3197_lengthGen;
          bool _3198___v70;
          bool _3199_lengthErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3200_lengthIdents;
          Dafny.ISequence<Dafny.Rune> _out1433;
          bool _out1434;
          bool _out1435;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1436;
          DCOMP.COMP.GenExpr(_3192_length, selfIdent, @params, true, out _out1433, out _out1434, out _out1435, out _out1436);
          _3197_lengthGen = _out1433;
          _3198___v70 = _out1434;
          _3199_lengthErased = _out1435;
          _3200_lengthIdents = _out1436;
          if (!(_3199_lengthErased)) {
            _3197_lengthGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3197_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), _3193_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), _3197_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer.0(&i)).collect::<Vec<_>>()\n}"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3196_recIdents, _3200_lengthIdents);
          isOwned = true;
          isErased = _3195_eErased;
        }
      } else if (_source55.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _3201___mcc_h28 = _source55.dtor_elements;
        DAST._IType _3202___mcc_h29 = _source55.dtor_typ;
        DAST._IType _3203_typ = _3202___mcc_h29;
        Dafny.ISequence<DAST._IExpression> _3204_exprs = _3201___mcc_h28;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3205_genTpe;
          Dafny.ISequence<Dafny.Rune> _out1437;
          _out1437 = DCOMP.COMP.GenType(_3203_typ, false, false);
          _3205_genTpe = _out1437;
          BigInteger _3206_i;
          _3206_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(vec![");
          _3206_i = BigInteger.Zero;
          while ((_3206_i) < (new BigInteger((_3204_exprs).Count))) {
            if ((_3206_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3207_recursiveGen;
            bool _3208___v71;
            bool _3209_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3210_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1438;
            bool _out1439;
            bool _out1440;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1441;
            DCOMP.COMP.GenExpr((_3204_exprs).Select(_3206_i), selfIdent, @params, true, out _out1438, out _out1439, out _out1440, out _out1441);
            _3207_recursiveGen = _out1438;
            _3208___v71 = _out1439;
            _3209_isErased = _out1440;
            _3210_recIdents = _out1441;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3210_recIdents);
            if (_3209_isErased) {
              _3207_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _3207_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _3207_recursiveGen);
            _3206_i = (_3206_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("] as Vec<")), _3205_genTpe), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source55.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _3211___mcc_h30 = _source55.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _3212_exprs = _3211___mcc_h30;
        {
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>> _3213_generatedValues;
          _3213_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3214_i;
          _3214_i = BigInteger.Zero;
          bool _3215_allErased;
          _3215_allErased = true;
          while ((_3214_i) < (new BigInteger((_3212_exprs).Count))) {
            Dafny.ISequence<Dafny.Rune> _3216_recursiveGen;
            bool _3217___v72;
            bool _3218_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3219_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1442;
            bool _out1443;
            bool _out1444;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1445;
            DCOMP.COMP.GenExpr((_3212_exprs).Select(_3214_i), selfIdent, @params, true, out _out1442, out _out1443, out _out1444, out _out1445);
            _3216_recursiveGen = _out1442;
            _3217___v72 = _out1443;
            _3218_isErased = _out1444;
            _3219_recIdents = _out1445;
            _3215_allErased = (_3215_allErased) && (_3218_isErased);
            _3213_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.Concat(_3213_generatedValues, Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements(_System.Tuple2<Dafny.ISequence<Dafny.Rune>, bool>.create(_3216_recursiveGen, _3218_isErased)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3219_recIdents);
            _3214_i = (_3214_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _3214_i = BigInteger.Zero;
          while ((_3214_i) < (new BigInteger((_3213_generatedValues).Count))) {
            if ((_3214_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3220_gen;
            _3220_gen = ((_3213_generatedValues).Select(_3214_i)).dtor__0;
            if ((((_3213_generatedValues).Select(_3214_i)).dtor__1) && (!(_3215_allErased))) {
              _3220_gen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _3220_gen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _3220_gen);
            _3214_i = (_3214_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashSet<_>>()"));
          isOwned = true;
          isErased = _3215_allErased;
        }
      } else if (_source55.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3221___mcc_h31 = _source55.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3222_mapElems = _3221___mcc_h31;
        {
          Dafny.ISequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>> _3223_generatedValues;
          _3223_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3224_i;
          _3224_i = BigInteger.Zero;
          bool _3225_allErased;
          _3225_allErased = true;
          while ((_3224_i) < (new BigInteger((_3222_mapElems).Count))) {
            Dafny.ISequence<Dafny.Rune> _3226_recursiveGenKey;
            bool _3227___v73;
            bool _3228_isErasedKey;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3229_recIdentsKey;
            Dafny.ISequence<Dafny.Rune> _out1446;
            bool _out1447;
            bool _out1448;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1449;
            DCOMP.COMP.GenExpr(((_3222_mapElems).Select(_3224_i)).dtor__0, selfIdent, @params, true, out _out1446, out _out1447, out _out1448, out _out1449);
            _3226_recursiveGenKey = _out1446;
            _3227___v73 = _out1447;
            _3228_isErasedKey = _out1448;
            _3229_recIdentsKey = _out1449;
            Dafny.ISequence<Dafny.Rune> _3230_recursiveGenValue;
            bool _3231___v74;
            bool _3232_isErasedValue;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3233_recIdentsValue;
            Dafny.ISequence<Dafny.Rune> _out1450;
            bool _out1451;
            bool _out1452;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1453;
            DCOMP.COMP.GenExpr(((_3222_mapElems).Select(_3224_i)).dtor__1, selfIdent, @params, true, out _out1450, out _out1451, out _out1452, out _out1453);
            _3230_recursiveGenValue = _out1450;
            _3231___v74 = _out1451;
            _3232_isErasedValue = _out1452;
            _3233_recIdentsValue = _out1453;
            _3225_allErased = ((_3225_allErased) && (_3228_isErasedKey)) && (_3232_isErasedValue);
            _3223_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.Concat(_3223_generatedValues, Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements(_System.Tuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>.create(_3226_recursiveGenKey, _3230_recursiveGenValue, _3228_isErasedKey, _3232_isErasedValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3229_recIdentsKey), _3233_recIdentsValue);
            _3224_i = (_3224_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _3224_i = BigInteger.Zero;
          while ((_3224_i) < (new BigInteger((_3223_generatedValues).Count))) {
            if ((_3224_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3234_genKey;
            _3234_genKey = ((_3223_generatedValues).Select(_3224_i)).dtor__0;
            Dafny.ISequence<Dafny.Rune> _3235_genValue;
            _3235_genValue = ((_3223_generatedValues).Select(_3224_i)).dtor__1;
            if ((((_3223_generatedValues).Select(_3224_i)).dtor__2) && (!(_3225_allErased))) {
              _3234_genKey = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _3234_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if ((((_3223_generatedValues).Select(_3224_i)).dtor__3) && (!(_3225_allErased))) {
              _3235_genValue = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _3235_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3234_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3235_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _3224_i = (_3224_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashMap<_, _>>()"));
          isOwned = true;
          isErased = _3225_allErased;
        }
      } else if (_source55.is_This) {
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source105 = selfIdent;
          if (_source105.is_None) {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")");
              isOwned = true;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
              isErased = true;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3236___mcc_h1155 = _source105.dtor_value;
            Dafny.ISequence<Dafny.Rune> _3237_id = _3236___mcc_h1155;
            {
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(_3237_id, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                isOwned = true;
              } else {
                if ((_3237_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3237_id);
                }
                isOwned = false;
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3237_id);
              isErased = false;
            }
          }
        }
      } else if (_source55.is_Ite) {
        DAST._IExpression _3238___mcc_h32 = _source55.dtor_cond;
        DAST._IExpression _3239___mcc_h33 = _source55.dtor_thn;
        DAST._IExpression _3240___mcc_h34 = _source55.dtor_els;
        DAST._IExpression _3241_f = _3240___mcc_h34;
        DAST._IExpression _3242_t = _3239___mcc_h33;
        DAST._IExpression _3243_cond = _3238___mcc_h32;
        {
          Dafny.ISequence<Dafny.Rune> _3244_condString;
          bool _3245___v75;
          bool _3246_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3247_recIdentsCond;
          Dafny.ISequence<Dafny.Rune> _out1454;
          bool _out1455;
          bool _out1456;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1457;
          DCOMP.COMP.GenExpr(_3243_cond, selfIdent, @params, true, out _out1454, out _out1455, out _out1456, out _out1457);
          _3244_condString = _out1454;
          _3245___v75 = _out1455;
          _3246_condErased = _out1456;
          _3247_recIdentsCond = _out1457;
          if (!(_3246_condErased)) {
            _3244_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3244_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          Dafny.ISequence<Dafny.Rune> _3248___v76;
          bool _3249_tHasToBeOwned;
          bool _3250___v77;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3251___v78;
          Dafny.ISequence<Dafny.Rune> _out1458;
          bool _out1459;
          bool _out1460;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1461;
          DCOMP.COMP.GenExpr(_3242_t, selfIdent, @params, mustOwn, out _out1458, out _out1459, out _out1460, out _out1461);
          _3248___v76 = _out1458;
          _3249_tHasToBeOwned = _out1459;
          _3250___v77 = _out1460;
          _3251___v78 = _out1461;
          Dafny.ISequence<Dafny.Rune> _3252_fString;
          bool _3253_fOwned;
          bool _3254_fErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3255_recIdentsF;
          Dafny.ISequence<Dafny.Rune> _out1462;
          bool _out1463;
          bool _out1464;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1465;
          DCOMP.COMP.GenExpr(_3241_f, selfIdent, @params, _3249_tHasToBeOwned, out _out1462, out _out1463, out _out1464, out _out1465);
          _3252_fString = _out1462;
          _3253_fOwned = _out1463;
          _3254_fErased = _out1464;
          _3255_recIdentsF = _out1465;
          Dafny.ISequence<Dafny.Rune> _3256_tString;
          bool _3257___v79;
          bool _3258_tErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3259_recIdentsT;
          Dafny.ISequence<Dafny.Rune> _out1466;
          bool _out1467;
          bool _out1468;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1469;
          DCOMP.COMP.GenExpr(_3242_t, selfIdent, @params, _3253_fOwned, out _out1466, out _out1467, out _out1468, out _out1469);
          _3256_tString = _out1466;
          _3257___v79 = _out1467;
          _3258_tErased = _out1468;
          _3259_recIdentsT = _out1469;
          if ((!(_3254_fErased)) || (!(_3258_tErased))) {
            if (_3254_fErased) {
              _3252_fString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3252_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (_3258_tErased) {
              _3256_tString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3256_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _3244_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _3256_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _3252_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})"));
          isOwned = _3253_fOwned;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3247_recIdentsCond, _3259_recIdentsT), _3255_recIdentsF);
          isErased = (_3254_fErased) || (_3258_tErased);
        }
      } else if (_source55.is_UnOp) {
        DAST._IUnaryOp _3260___mcc_h35 = _source55.dtor_unOp;
        DAST._IExpression _3261___mcc_h36 = _source55.dtor_expr;
        DAST.Format._IUnOpFormat _3262___mcc_h37 = _source55.dtor_format1;
        DAST._IUnaryOp _source106 = _3260___mcc_h35;
        if (_source106.is_Not) {
          DAST.Format._IUnOpFormat _3263_format = _3262___mcc_h37;
          DAST._IExpression _3264_e = _3261___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _3265_recursiveGen;
            bool _3266___v80;
            bool _3267_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3268_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1470;
            bool _out1471;
            bool _out1472;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1473;
            DCOMP.COMP.GenExpr(_3264_e, selfIdent, @params, true, out _out1470, out _out1471, out _out1472, out _out1473);
            _3265_recursiveGen = _out1470;
            _3266___v80 = _out1471;
            _3267_recErased = _out1472;
            _3268_recIdents = _out1473;
            if (!(_3267_recErased)) {
              _3265_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3265_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _3265_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _3268_recIdents;
            isErased = true;
          }
        } else if (_source106.is_BitwiseNot) {
          DAST.Format._IUnOpFormat _3269_format = _3262___mcc_h37;
          DAST._IExpression _3270_e = _3261___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _3271_recursiveGen;
            bool _3272___v81;
            bool _3273_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3274_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1474;
            bool _out1475;
            bool _out1476;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1477;
            DCOMP.COMP.GenExpr(_3270_e, selfIdent, @params, true, out _out1474, out _out1475, out _out1476, out _out1477);
            _3271_recursiveGen = _out1474;
            _3272___v81 = _out1475;
            _3273_recErased = _out1476;
            _3274_recIdents = _out1477;
            if (!(_3273_recErased)) {
              _3271_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3271_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~("), _3271_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _3274_recIdents;
            isErased = true;
          }
        } else {
          DAST.Format._IUnOpFormat _3275_format = _3262___mcc_h37;
          DAST._IExpression _3276_e = _3261___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _3277_recursiveGen;
            bool _3278_recOwned;
            bool _3279_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3280_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1478;
            bool _out1479;
            bool _out1480;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1481;
            DCOMP.COMP.GenExpr(_3276_e, selfIdent, @params, false, out _out1478, out _out1479, out _out1480, out _out1481);
            _3277_recursiveGen = _out1478;
            _3278_recOwned = _out1479;
            _3279_recErased = _out1480;
            _3280_recIdents = _out1481;
            if (!(_3279_recErased)) {
              Dafny.ISequence<Dafny.Rune> _3281_eraseFn;
              _3281_eraseFn = ((_3278_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
              _3277_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _3281_eraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3277_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _3277_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").len())"));
            isOwned = true;
            readIdents = _3280_recIdents;
            isErased = true;
          }
        }
      } else if (_source55.is_BinOp) {
        DAST._IBinOp _3282___mcc_h38 = _source55.dtor_op;
        DAST._IExpression _3283___mcc_h39 = _source55.dtor_left;
        DAST._IExpression _3284___mcc_h40 = _source55.dtor_right;
        DAST.Format._IBinOpFormat _3285___mcc_h41 = _source55.dtor_format2;
        DAST.Format._IBinOpFormat _3286_format = _3285___mcc_h41;
        DAST._IExpression _3287_r = _3284___mcc_h40;
        DAST._IExpression _3288_l = _3283___mcc_h39;
        DAST._IBinOp _3289_op = _3282___mcc_h38;
        {
          Dafny.ISequence<Dafny.Rune> _3290_left;
          bool _3291___v82;
          bool _3292_leftErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3293_recIdentsL;
          Dafny.ISequence<Dafny.Rune> _out1482;
          bool _out1483;
          bool _out1484;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1485;
          DCOMP.COMP.GenExpr(_3288_l, selfIdent, @params, true, out _out1482, out _out1483, out _out1484, out _out1485);
          _3290_left = _out1482;
          _3291___v82 = _out1483;
          _3292_leftErased = _out1484;
          _3293_recIdentsL = _out1485;
          Dafny.ISequence<Dafny.Rune> _3294_right;
          bool _3295___v83;
          bool _3296_rightErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3297_recIdentsR;
          Dafny.ISequence<Dafny.Rune> _out1486;
          bool _out1487;
          bool _out1488;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1489;
          DCOMP.COMP.GenExpr(_3287_r, selfIdent, @params, true, out _out1486, out _out1487, out _out1488, out _out1489);
          _3294_right = _out1486;
          _3295___v83 = _out1487;
          _3296_rightErased = _out1488;
          _3297_recIdentsR = _out1489;
          DAST._IBinOp _source107 = _3289_op;
          if (_source107.is_Eq) {
            bool _3298___mcc_h1156 = _source107.dtor_referential;
            bool _3299___mcc_h1157 = _source107.dtor_nullable;
            {
              if (!(_3292_leftErased)) {
                _3290_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3296_rightErased)) {
                _3294_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if ((DCOMP.COMP.OpTable).Contains(_3289_op)) {
                s = (RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3289_op), RAST.Expr.create_RawExpr(_3290_left), RAST.Expr.create_RawExpr(_3294_right), _3286_format))._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
              } else {
                DAST._IBinOp _source108 = _3289_op;
                if (_source108.is_Eq) {
                  bool _3300___mcc_h1162 = _source108.dtor_referential;
                  bool _3301___mcc_h1163 = _source108.dtor_nullable;
                  bool _3302_nullable = _3301___mcc_h1163;
                  bool _3303_referential = _3300___mcc_h1162;
                  {
                    if (_3303_referential) {
                      if (_3302_nullable) {
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      } else {
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                      }
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3290_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3294_right);
                    }
                  }
                } else if (_source108.is_EuclidianDiv) {
                  {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  }
                } else if (_source108.is_EuclidianMod) {
                  {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3304___mcc_h1164 = _source108.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3305_op = _3304___mcc_h1164;
                  {
                    s = (RAST.Expr.create_BinaryOp(_3305_op, RAST.Expr.create_RawExpr(_3290_left), RAST.Expr.create_RawExpr(_3294_right), _3286_format))._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                  }
                }
              }
            }
          } else if (_source107.is_Div) {
            {
              if (!(_3292_leftErased)) {
                _3290_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3296_rightErased)) {
                _3294_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if ((DCOMP.COMP.OpTable).Contains(_3289_op)) {
                s = (RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3289_op), RAST.Expr.create_RawExpr(_3290_left), RAST.Expr.create_RawExpr(_3294_right), _3286_format))._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
              } else {
                DAST._IBinOp _source109 = _3289_op;
                if (_source109.is_Eq) {
                  bool _3306___mcc_h1165 = _source109.dtor_referential;
                  bool _3307___mcc_h1166 = _source109.dtor_nullable;
                  bool _3308_nullable = _3307___mcc_h1166;
                  bool _3309_referential = _3306___mcc_h1165;
                  {
                    if (_3309_referential) {
                      if (_3308_nullable) {
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      } else {
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                      }
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3290_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3294_right);
                    }
                  }
                } else if (_source109.is_EuclidianDiv) {
                  {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  }
                } else if (_source109.is_EuclidianMod) {
                  {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3310___mcc_h1167 = _source109.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3311_op = _3310___mcc_h1167;
                  {
                    s = (RAST.Expr.create_BinaryOp(_3311_op, RAST.Expr.create_RawExpr(_3290_left), RAST.Expr.create_RawExpr(_3294_right), _3286_format))._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                  }
                }
              }
            }
          } else if (_source107.is_EuclidianDiv) {
            {
              if (!(_3292_leftErased)) {
                _3290_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3296_rightErased)) {
                _3294_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if ((DCOMP.COMP.OpTable).Contains(_3289_op)) {
                s = (RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3289_op), RAST.Expr.create_RawExpr(_3290_left), RAST.Expr.create_RawExpr(_3294_right), _3286_format))._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
              } else {
                DAST._IBinOp _source110 = _3289_op;
                if (_source110.is_Eq) {
                  bool _3312___mcc_h1168 = _source110.dtor_referential;
                  bool _3313___mcc_h1169 = _source110.dtor_nullable;
                  bool _3314_nullable = _3313___mcc_h1169;
                  bool _3315_referential = _3312___mcc_h1168;
                  {
                    if (_3315_referential) {
                      if (_3314_nullable) {
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      } else {
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                      }
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3290_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3294_right);
                    }
                  }
                } else if (_source110.is_EuclidianDiv) {
                  {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  }
                } else if (_source110.is_EuclidianMod) {
                  {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3316___mcc_h1170 = _source110.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3317_op = _3316___mcc_h1170;
                  {
                    s = (RAST.Expr.create_BinaryOp(_3317_op, RAST.Expr.create_RawExpr(_3290_left), RAST.Expr.create_RawExpr(_3294_right), _3286_format))._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                  }
                }
              }
            }
          } else if (_source107.is_Mod) {
            {
              if (!(_3292_leftErased)) {
                _3290_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3296_rightErased)) {
                _3294_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if ((DCOMP.COMP.OpTable).Contains(_3289_op)) {
                s = (RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3289_op), RAST.Expr.create_RawExpr(_3290_left), RAST.Expr.create_RawExpr(_3294_right), _3286_format))._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
              } else {
                DAST._IBinOp _source111 = _3289_op;
                if (_source111.is_Eq) {
                  bool _3318___mcc_h1171 = _source111.dtor_referential;
                  bool _3319___mcc_h1172 = _source111.dtor_nullable;
                  bool _3320_nullable = _3319___mcc_h1172;
                  bool _3321_referential = _3318___mcc_h1171;
                  {
                    if (_3321_referential) {
                      if (_3320_nullable) {
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      } else {
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                      }
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3290_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3294_right);
                    }
                  }
                } else if (_source111.is_EuclidianDiv) {
                  {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  }
                } else if (_source111.is_EuclidianMod) {
                  {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3322___mcc_h1173 = _source111.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3323_op = _3322___mcc_h1173;
                  {
                    s = (RAST.Expr.create_BinaryOp(_3323_op, RAST.Expr.create_RawExpr(_3290_left), RAST.Expr.create_RawExpr(_3294_right), _3286_format))._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                  }
                }
              }
            }
          } else if (_source107.is_EuclidianMod) {
            {
              if (!(_3292_leftErased)) {
                _3290_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3296_rightErased)) {
                _3294_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if ((DCOMP.COMP.OpTable).Contains(_3289_op)) {
                s = (RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3289_op), RAST.Expr.create_RawExpr(_3290_left), RAST.Expr.create_RawExpr(_3294_right), _3286_format))._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
              } else {
                DAST._IBinOp _source112 = _3289_op;
                if (_source112.is_Eq) {
                  bool _3324___mcc_h1174 = _source112.dtor_referential;
                  bool _3325___mcc_h1175 = _source112.dtor_nullable;
                  bool _3326_nullable = _3325___mcc_h1175;
                  bool _3327_referential = _3324___mcc_h1174;
                  {
                    if (_3327_referential) {
                      if (_3326_nullable) {
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      } else {
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                      }
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3290_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3294_right);
                    }
                  }
                } else if (_source112.is_EuclidianDiv) {
                  {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  }
                } else if (_source112.is_EuclidianMod) {
                  {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3328___mcc_h1176 = _source112.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3329_op = _3328___mcc_h1176;
                  {
                    s = (RAST.Expr.create_BinaryOp(_3329_op, RAST.Expr.create_RawExpr(_3290_left), RAST.Expr.create_RawExpr(_3294_right), _3286_format))._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                  }
                }
              }
            }
          } else if (_source107.is_Lt) {
            {
              if (!(_3292_leftErased)) {
                _3290_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3296_rightErased)) {
                _3294_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if ((DCOMP.COMP.OpTable).Contains(_3289_op)) {
                s = (RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3289_op), RAST.Expr.create_RawExpr(_3290_left), RAST.Expr.create_RawExpr(_3294_right), _3286_format))._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
              } else {
                DAST._IBinOp _source113 = _3289_op;
                if (_source113.is_Eq) {
                  bool _3330___mcc_h1177 = _source113.dtor_referential;
                  bool _3331___mcc_h1178 = _source113.dtor_nullable;
                  bool _3332_nullable = _3331___mcc_h1178;
                  bool _3333_referential = _3330___mcc_h1177;
                  {
                    if (_3333_referential) {
                      if (_3332_nullable) {
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      } else {
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                      }
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3290_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3294_right);
                    }
                  }
                } else if (_source113.is_EuclidianDiv) {
                  {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  }
                } else if (_source113.is_EuclidianMod) {
                  {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3334___mcc_h1179 = _source113.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3335_op = _3334___mcc_h1179;
                  {
                    s = (RAST.Expr.create_BinaryOp(_3335_op, RAST.Expr.create_RawExpr(_3290_left), RAST.Expr.create_RawExpr(_3294_right), _3286_format))._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                  }
                }
              }
            }
          } else if (_source107.is_Plus) {
            {
              if (!(_3292_leftErased)) {
                _3290_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3296_rightErased)) {
                _3294_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if ((DCOMP.COMP.OpTable).Contains(_3289_op)) {
                s = (RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3289_op), RAST.Expr.create_RawExpr(_3290_left), RAST.Expr.create_RawExpr(_3294_right), _3286_format))._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
              } else {
                DAST._IBinOp _source114 = _3289_op;
                if (_source114.is_Eq) {
                  bool _3336___mcc_h1180 = _source114.dtor_referential;
                  bool _3337___mcc_h1181 = _source114.dtor_nullable;
                  bool _3338_nullable = _3337___mcc_h1181;
                  bool _3339_referential = _3336___mcc_h1180;
                  {
                    if (_3339_referential) {
                      if (_3338_nullable) {
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      } else {
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                      }
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3290_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3294_right);
                    }
                  }
                } else if (_source114.is_EuclidianDiv) {
                  {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  }
                } else if (_source114.is_EuclidianMod) {
                  {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3340___mcc_h1182 = _source114.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3341_op = _3340___mcc_h1182;
                  {
                    s = (RAST.Expr.create_BinaryOp(_3341_op, RAST.Expr.create_RawExpr(_3290_left), RAST.Expr.create_RawExpr(_3294_right), _3286_format))._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                  }
                }
              }
            }
          } else if (_source107.is_Minus) {
            {
              if (!(_3292_leftErased)) {
                _3290_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3296_rightErased)) {
                _3294_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if ((DCOMP.COMP.OpTable).Contains(_3289_op)) {
                s = (RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3289_op), RAST.Expr.create_RawExpr(_3290_left), RAST.Expr.create_RawExpr(_3294_right), _3286_format))._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
              } else {
                DAST._IBinOp _source115 = _3289_op;
                if (_source115.is_Eq) {
                  bool _3342___mcc_h1183 = _source115.dtor_referential;
                  bool _3343___mcc_h1184 = _source115.dtor_nullable;
                  bool _3344_nullable = _3343___mcc_h1184;
                  bool _3345_referential = _3342___mcc_h1183;
                  {
                    if (_3345_referential) {
                      if (_3344_nullable) {
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      } else {
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                      }
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3290_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3294_right);
                    }
                  }
                } else if (_source115.is_EuclidianDiv) {
                  {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  }
                } else if (_source115.is_EuclidianMod) {
                  {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3346___mcc_h1185 = _source115.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3347_op = _3346___mcc_h1185;
                  {
                    s = (RAST.Expr.create_BinaryOp(_3347_op, RAST.Expr.create_RawExpr(_3290_left), RAST.Expr.create_RawExpr(_3294_right), _3286_format))._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                  }
                }
              }
            }
          } else if (_source107.is_Times) {
            {
              if (!(_3292_leftErased)) {
                _3290_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3296_rightErased)) {
                _3294_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if ((DCOMP.COMP.OpTable).Contains(_3289_op)) {
                s = (RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3289_op), RAST.Expr.create_RawExpr(_3290_left), RAST.Expr.create_RawExpr(_3294_right), _3286_format))._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
              } else {
                DAST._IBinOp _source116 = _3289_op;
                if (_source116.is_Eq) {
                  bool _3348___mcc_h1186 = _source116.dtor_referential;
                  bool _3349___mcc_h1187 = _source116.dtor_nullable;
                  bool _3350_nullable = _3349___mcc_h1187;
                  bool _3351_referential = _3348___mcc_h1186;
                  {
                    if (_3351_referential) {
                      if (_3350_nullable) {
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      } else {
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                      }
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3290_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3294_right);
                    }
                  }
                } else if (_source116.is_EuclidianDiv) {
                  {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  }
                } else if (_source116.is_EuclidianMod) {
                  {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3352___mcc_h1188 = _source116.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3353_op = _3352___mcc_h1188;
                  {
                    s = (RAST.Expr.create_BinaryOp(_3353_op, RAST.Expr.create_RawExpr(_3290_left), RAST.Expr.create_RawExpr(_3294_right), _3286_format))._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                  }
                }
              }
            }
          } else if (_source107.is_BitwiseAnd) {
            {
              if (!(_3292_leftErased)) {
                _3290_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3296_rightErased)) {
                _3294_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if ((DCOMP.COMP.OpTable).Contains(_3289_op)) {
                s = (RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3289_op), RAST.Expr.create_RawExpr(_3290_left), RAST.Expr.create_RawExpr(_3294_right), _3286_format))._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
              } else {
                DAST._IBinOp _source117 = _3289_op;
                if (_source117.is_Eq) {
                  bool _3354___mcc_h1189 = _source117.dtor_referential;
                  bool _3355___mcc_h1190 = _source117.dtor_nullable;
                  bool _3356_nullable = _3355___mcc_h1190;
                  bool _3357_referential = _3354___mcc_h1189;
                  {
                    if (_3357_referential) {
                      if (_3356_nullable) {
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      } else {
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                      }
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3290_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3294_right);
                    }
                  }
                } else if (_source117.is_EuclidianDiv) {
                  {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  }
                } else if (_source117.is_EuclidianMod) {
                  {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3358___mcc_h1191 = _source117.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3359_op = _3358___mcc_h1191;
                  {
                    s = (RAST.Expr.create_BinaryOp(_3359_op, RAST.Expr.create_RawExpr(_3290_left), RAST.Expr.create_RawExpr(_3294_right), _3286_format))._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                  }
                }
              }
            }
          } else if (_source107.is_BitwiseOr) {
            {
              if (!(_3292_leftErased)) {
                _3290_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3296_rightErased)) {
                _3294_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if ((DCOMP.COMP.OpTable).Contains(_3289_op)) {
                s = (RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3289_op), RAST.Expr.create_RawExpr(_3290_left), RAST.Expr.create_RawExpr(_3294_right), _3286_format))._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
              } else {
                DAST._IBinOp _source118 = _3289_op;
                if (_source118.is_Eq) {
                  bool _3360___mcc_h1192 = _source118.dtor_referential;
                  bool _3361___mcc_h1193 = _source118.dtor_nullable;
                  bool _3362_nullable = _3361___mcc_h1193;
                  bool _3363_referential = _3360___mcc_h1192;
                  {
                    if (_3363_referential) {
                      if (_3362_nullable) {
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      } else {
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                      }
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3290_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3294_right);
                    }
                  }
                } else if (_source118.is_EuclidianDiv) {
                  {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  }
                } else if (_source118.is_EuclidianMod) {
                  {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3364___mcc_h1194 = _source118.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3365_op = _3364___mcc_h1194;
                  {
                    s = (RAST.Expr.create_BinaryOp(_3365_op, RAST.Expr.create_RawExpr(_3290_left), RAST.Expr.create_RawExpr(_3294_right), _3286_format))._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                  }
                }
              }
            }
          } else if (_source107.is_BitwiseXor) {
            {
              if (!(_3292_leftErased)) {
                _3290_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3296_rightErased)) {
                _3294_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if ((DCOMP.COMP.OpTable).Contains(_3289_op)) {
                s = (RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3289_op), RAST.Expr.create_RawExpr(_3290_left), RAST.Expr.create_RawExpr(_3294_right), _3286_format))._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
              } else {
                DAST._IBinOp _source119 = _3289_op;
                if (_source119.is_Eq) {
                  bool _3366___mcc_h1195 = _source119.dtor_referential;
                  bool _3367___mcc_h1196 = _source119.dtor_nullable;
                  bool _3368_nullable = _3367___mcc_h1196;
                  bool _3369_referential = _3366___mcc_h1195;
                  {
                    if (_3369_referential) {
                      if (_3368_nullable) {
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      } else {
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                      }
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3290_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3294_right);
                    }
                  }
                } else if (_source119.is_EuclidianDiv) {
                  {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  }
                } else if (_source119.is_EuclidianMod) {
                  {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3370___mcc_h1197 = _source119.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3371_op = _3370___mcc_h1197;
                  {
                    s = (RAST.Expr.create_BinaryOp(_3371_op, RAST.Expr.create_RawExpr(_3290_left), RAST.Expr.create_RawExpr(_3294_right), _3286_format))._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                  }
                }
              }
            }
          } else if (_source107.is_BitwiseShiftRight) {
            {
              if (!(_3292_leftErased)) {
                _3290_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3296_rightErased)) {
                _3294_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if ((DCOMP.COMP.OpTable).Contains(_3289_op)) {
                s = (RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3289_op), RAST.Expr.create_RawExpr(_3290_left), RAST.Expr.create_RawExpr(_3294_right), _3286_format))._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
              } else {
                DAST._IBinOp _source120 = _3289_op;
                if (_source120.is_Eq) {
                  bool _3372___mcc_h1198 = _source120.dtor_referential;
                  bool _3373___mcc_h1199 = _source120.dtor_nullable;
                  bool _3374_nullable = _3373___mcc_h1199;
                  bool _3375_referential = _3372___mcc_h1198;
                  {
                    if (_3375_referential) {
                      if (_3374_nullable) {
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      } else {
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                      }
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3290_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3294_right);
                    }
                  }
                } else if (_source120.is_EuclidianDiv) {
                  {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  }
                } else if (_source120.is_EuclidianMod) {
                  {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3376___mcc_h1200 = _source120.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3377_op = _3376___mcc_h1200;
                  {
                    s = (RAST.Expr.create_BinaryOp(_3377_op, RAST.Expr.create_RawExpr(_3290_left), RAST.Expr.create_RawExpr(_3294_right), _3286_format))._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                  }
                }
              }
            }
          } else if (_source107.is_BitwiseShiftLeft) {
            {
              if (!(_3292_leftErased)) {
                _3290_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3296_rightErased)) {
                _3294_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if ((DCOMP.COMP.OpTable).Contains(_3289_op)) {
                s = (RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3289_op), RAST.Expr.create_RawExpr(_3290_left), RAST.Expr.create_RawExpr(_3294_right), _3286_format))._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
              } else {
                DAST._IBinOp _source121 = _3289_op;
                if (_source121.is_Eq) {
                  bool _3378___mcc_h1201 = _source121.dtor_referential;
                  bool _3379___mcc_h1202 = _source121.dtor_nullable;
                  bool _3380_nullable = _3379___mcc_h1202;
                  bool _3381_referential = _3378___mcc_h1201;
                  {
                    if (_3381_referential) {
                      if (_3380_nullable) {
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      } else {
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                      }
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3290_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3294_right);
                    }
                  }
                } else if (_source121.is_EuclidianDiv) {
                  {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  }
                } else if (_source121.is_EuclidianMod) {
                  {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3382___mcc_h1203 = _source121.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3383_op = _3382___mcc_h1203;
                  {
                    s = (RAST.Expr.create_BinaryOp(_3383_op, RAST.Expr.create_RawExpr(_3290_left), RAST.Expr.create_RawExpr(_3294_right), _3286_format))._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                  }
                }
              }
            }
          } else if (_source107.is_And) {
            {
              if (!(_3292_leftErased)) {
                _3290_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3296_rightErased)) {
                _3294_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if ((DCOMP.COMP.OpTable).Contains(_3289_op)) {
                s = (RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3289_op), RAST.Expr.create_RawExpr(_3290_left), RAST.Expr.create_RawExpr(_3294_right), _3286_format))._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
              } else {
                DAST._IBinOp _source122 = _3289_op;
                if (_source122.is_Eq) {
                  bool _3384___mcc_h1204 = _source122.dtor_referential;
                  bool _3385___mcc_h1205 = _source122.dtor_nullable;
                  bool _3386_nullable = _3385___mcc_h1205;
                  bool _3387_referential = _3384___mcc_h1204;
                  {
                    if (_3387_referential) {
                      if (_3386_nullable) {
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      } else {
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                      }
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3290_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3294_right);
                    }
                  }
                } else if (_source122.is_EuclidianDiv) {
                  {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  }
                } else if (_source122.is_EuclidianMod) {
                  {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3388___mcc_h1206 = _source122.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3389_op = _3388___mcc_h1206;
                  {
                    s = (RAST.Expr.create_BinaryOp(_3389_op, RAST.Expr.create_RawExpr(_3290_left), RAST.Expr.create_RawExpr(_3294_right), _3286_format))._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                  }
                }
              }
            }
          } else if (_source107.is_Or) {
            {
              if (!(_3292_leftErased)) {
                _3290_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3296_rightErased)) {
                _3294_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if ((DCOMP.COMP.OpTable).Contains(_3289_op)) {
                s = (RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3289_op), RAST.Expr.create_RawExpr(_3290_left), RAST.Expr.create_RawExpr(_3294_right), _3286_format))._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
              } else {
                DAST._IBinOp _source123 = _3289_op;
                if (_source123.is_Eq) {
                  bool _3390___mcc_h1207 = _source123.dtor_referential;
                  bool _3391___mcc_h1208 = _source123.dtor_nullable;
                  bool _3392_nullable = _3391___mcc_h1208;
                  bool _3393_referential = _3390___mcc_h1207;
                  {
                    if (_3393_referential) {
                      if (_3392_nullable) {
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      } else {
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                      }
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3290_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3294_right);
                    }
                  }
                } else if (_source123.is_EuclidianDiv) {
                  {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  }
                } else if (_source123.is_EuclidianMod) {
                  {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3394___mcc_h1209 = _source123.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3395_op = _3394___mcc_h1209;
                  {
                    s = (RAST.Expr.create_BinaryOp(_3395_op, RAST.Expr.create_RawExpr(_3290_left), RAST.Expr.create_RawExpr(_3294_right), _3286_format))._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                  }
                }
              }
            }
          } else if (_source107.is_In) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3294_right, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          } else if (_source107.is_SetDifference) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3290_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".difference(&")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").cloned().collect::<::std::collections::HashSet<_>>()"));
            }
          } else if (_source107.is_Concat) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].concat()"));
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3396___mcc_h1160 = _source107.dtor_Passthrough_a0;
            {
              if (!(_3292_leftErased)) {
                _3290_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3296_rightErased)) {
                _3294_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if ((DCOMP.COMP.OpTable).Contains(_3289_op)) {
                s = (RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3289_op), RAST.Expr.create_RawExpr(_3290_left), RAST.Expr.create_RawExpr(_3294_right), _3286_format))._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
              } else {
                DAST._IBinOp _source124 = _3289_op;
                if (_source124.is_Eq) {
                  bool _3397___mcc_h1210 = _source124.dtor_referential;
                  bool _3398___mcc_h1211 = _source124.dtor_nullable;
                  bool _3399_nullable = _3398___mcc_h1211;
                  bool _3400_referential = _3397___mcc_h1210;
                  {
                    if (_3400_referential) {
                      if (_3399_nullable) {
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      } else {
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                      }
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3290_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3294_right);
                    }
                  }
                } else if (_source124.is_EuclidianDiv) {
                  {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  }
                } else if (_source124.is_EuclidianMod) {
                  {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3290_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3294_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3401___mcc_h1212 = _source124.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3402_op = _3401___mcc_h1212;
                  {
                    s = (RAST.Expr.create_BinaryOp(_3402_op, RAST.Expr.create_RawExpr(_3290_left), RAST.Expr.create_RawExpr(_3294_right), _3286_format))._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                  }
                }
              }
            }
          }
          isOwned = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3293_recIdentsL, _3297_recIdentsR);
          isErased = true;
        }
      } else if (_source55.is_ArrayLen) {
        DAST._IExpression _3403___mcc_h42 = _source55.dtor_expr;
        BigInteger _3404___mcc_h43 = _source55.dtor_dim;
        BigInteger _3405_dim = _3404___mcc_h43;
        DAST._IExpression _3406_expr = _3403___mcc_h42;
        {
          Dafny.ISequence<Dafny.Rune> _3407_recursiveGen;
          bool _3408___v85;
          bool _3409_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3410_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1490;
          bool _out1491;
          bool _out1492;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1493;
          DCOMP.COMP.GenExpr(_3406_expr, selfIdent, @params, true, out _out1490, out _out1491, out _out1492, out _out1493);
          _3407_recursiveGen = _out1490;
          _3408___v85 = _out1491;
          _3409_recErased = _out1492;
          _3410_recIdents = _out1493;
          if ((_3405_dim).Sign == 0) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _3407_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow().len())"));
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(m.borrow().len())");
            BigInteger _3411_i;
            _3411_i = BigInteger.One;
            while ((_3411_i) < (_3405_dim)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("m.borrow().get(0).map(|m| "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
              _3411_i = (_3411_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3407_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow().get(0).map(|m| ")), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
          }
          isOwned = true;
          readIdents = _3410_recIdents;
          isErased = true;
        }
      } else if (_source55.is_Select) {
        DAST._IExpression _3412___mcc_h44 = _source55.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _3413___mcc_h45 = _source55.dtor_field;
        bool _3414___mcc_h46 = _source55.dtor_isConstant;
        bool _3415___mcc_h47 = _source55.dtor_onDatatype;
        DAST._IExpression _source125 = _3412___mcc_h44;
        if (_source125.is_Literal) {
          DAST._ILiteral _3416___mcc_h48 = _source125.dtor_Literal_a0;
          bool _3417_isDatatype = _3415___mcc_h47;
          bool _3418_isConstant = _3414___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3419_field = _3413___mcc_h45;
          DAST._IExpression _3420_on = _3412___mcc_h44;
          {
            Dafny.ISequence<Dafny.Rune> _3421_onString;
            bool _3422_onOwned;
            bool _3423_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3424_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1494;
            bool _out1495;
            bool _out1496;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1497;
            DCOMP.COMP.GenExpr(_3420_on, selfIdent, @params, false, out _out1494, out _out1495, out _out1496, out _out1497);
            _3421_onString = _out1494;
            _3422_onOwned = _out1495;
            _3423_onErased = _out1496;
            _3424_recIdents = _out1497;
            if ((_3417_isDatatype) || (_3418_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3421_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3419_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3418_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3421_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3419_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3424_recIdents;
          }
        } else if (_source125.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _3425___mcc_h50 = _source125.dtor_Ident_a0;
          bool _3426_isDatatype = _3415___mcc_h47;
          bool _3427_isConstant = _3414___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3428_field = _3413___mcc_h45;
          DAST._IExpression _3429_on = _3412___mcc_h44;
          {
            Dafny.ISequence<Dafny.Rune> _3430_onString;
            bool _3431_onOwned;
            bool _3432_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3433_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1498;
            bool _out1499;
            bool _out1500;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1501;
            DCOMP.COMP.GenExpr(_3429_on, selfIdent, @params, false, out _out1498, out _out1499, out _out1500, out _out1501);
            _3430_onString = _out1498;
            _3431_onOwned = _out1499;
            _3432_onErased = _out1500;
            _3433_recIdents = _out1501;
            if ((_3426_isDatatype) || (_3427_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3430_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3428_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3427_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3430_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3428_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3433_recIdents;
          }
        } else if (_source125.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3434___mcc_h52 = _source125.dtor_Companion_a0;
          bool _3435_isDatatype = _3415___mcc_h47;
          bool _3436_isConstant = _3414___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3437_field = _3413___mcc_h45;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3438_c = _3434___mcc_h52;
          {
            Dafny.ISequence<Dafny.Rune> _3439_onString;
            bool _3440_onOwned;
            bool _3441_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3442_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1502;
            bool _out1503;
            bool _out1504;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1505;
            DCOMP.COMP.GenExpr(DAST.Expression.create_Companion(_3438_c), selfIdent, @params, false, out _out1502, out _out1503, out _out1504, out _out1505);
            _3439_onString = _out1502;
            _3440_onOwned = _out1503;
            _3441_onErased = _out1504;
            _3442_recIdents = _out1505;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3439_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_3437_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
            isOwned = true;
            isErased = false;
            readIdents = _3442_recIdents;
          }
        } else if (_source125.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _3443___mcc_h54 = _source125.dtor_Tuple_a0;
          bool _3444_isDatatype = _3415___mcc_h47;
          bool _3445_isConstant = _3414___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3446_field = _3413___mcc_h45;
          DAST._IExpression _3447_on = _3412___mcc_h44;
          {
            Dafny.ISequence<Dafny.Rune> _3448_onString;
            bool _3449_onOwned;
            bool _3450_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3451_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1506;
            bool _out1507;
            bool _out1508;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1509;
            DCOMP.COMP.GenExpr(_3447_on, selfIdent, @params, false, out _out1506, out _out1507, out _out1508, out _out1509);
            _3448_onString = _out1506;
            _3449_onOwned = _out1507;
            _3450_onErased = _out1508;
            _3451_recIdents = _out1509;
            if ((_3444_isDatatype) || (_3445_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3448_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3446_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3445_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3448_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3446_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3451_recIdents;
          }
        } else if (_source125.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3452___mcc_h56 = _source125.dtor_path;
          Dafny.ISequence<DAST._IType> _3453___mcc_h57 = _source125.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _3454___mcc_h58 = _source125.dtor_args;
          bool _3455_isDatatype = _3415___mcc_h47;
          bool _3456_isConstant = _3414___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3457_field = _3413___mcc_h45;
          DAST._IExpression _3458_on = _3412___mcc_h44;
          {
            Dafny.ISequence<Dafny.Rune> _3459_onString;
            bool _3460_onOwned;
            bool _3461_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3462_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1510;
            bool _out1511;
            bool _out1512;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1513;
            DCOMP.COMP.GenExpr(_3458_on, selfIdent, @params, false, out _out1510, out _out1511, out _out1512, out _out1513);
            _3459_onString = _out1510;
            _3460_onOwned = _out1511;
            _3461_onErased = _out1512;
            _3462_recIdents = _out1513;
            if ((_3455_isDatatype) || (_3456_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3459_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3457_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3456_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3459_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3457_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3462_recIdents;
          }
        } else if (_source125.is_NewArray) {
          Dafny.ISequence<DAST._IExpression> _3463___mcc_h62 = _source125.dtor_dims;
          DAST._IType _3464___mcc_h63 = _source125.dtor_typ;
          bool _3465_isDatatype = _3415___mcc_h47;
          bool _3466_isConstant = _3414___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3467_field = _3413___mcc_h45;
          DAST._IExpression _3468_on = _3412___mcc_h44;
          {
            Dafny.ISequence<Dafny.Rune> _3469_onString;
            bool _3470_onOwned;
            bool _3471_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3472_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1514;
            bool _out1515;
            bool _out1516;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1517;
            DCOMP.COMP.GenExpr(_3468_on, selfIdent, @params, false, out _out1514, out _out1515, out _out1516, out _out1517);
            _3469_onString = _out1514;
            _3470_onOwned = _out1515;
            _3471_onErased = _out1516;
            _3472_recIdents = _out1517;
            if ((_3465_isDatatype) || (_3466_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3469_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3467_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3466_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3469_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3467_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3472_recIdents;
          }
        } else if (_source125.is_DatatypeValue) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3473___mcc_h66 = _source125.dtor_path;
          Dafny.ISequence<DAST._IType> _3474___mcc_h67 = _source125.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _3475___mcc_h68 = _source125.dtor_variant;
          bool _3476___mcc_h69 = _source125.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _3477___mcc_h70 = _source125.dtor_contents;
          bool _3478_isDatatype = _3415___mcc_h47;
          bool _3479_isConstant = _3414___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3480_field = _3413___mcc_h45;
          DAST._IExpression _3481_on = _3412___mcc_h44;
          {
            Dafny.ISequence<Dafny.Rune> _3482_onString;
            bool _3483_onOwned;
            bool _3484_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3485_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1518;
            bool _out1519;
            bool _out1520;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1521;
            DCOMP.COMP.GenExpr(_3481_on, selfIdent, @params, false, out _out1518, out _out1519, out _out1520, out _out1521);
            _3482_onString = _out1518;
            _3483_onOwned = _out1519;
            _3484_onErased = _out1520;
            _3485_recIdents = _out1521;
            if ((_3478_isDatatype) || (_3479_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3482_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3480_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3479_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3482_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3480_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3485_recIdents;
          }
        } else if (_source125.is_Convert) {
          DAST._IExpression _3486___mcc_h76 = _source125.dtor_value;
          DAST._IType _3487___mcc_h77 = _source125.dtor_from;
          DAST._IType _3488___mcc_h78 = _source125.dtor_typ;
          bool _3489_isDatatype = _3415___mcc_h47;
          bool _3490_isConstant = _3414___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3491_field = _3413___mcc_h45;
          DAST._IExpression _3492_on = _3412___mcc_h44;
          {
            Dafny.ISequence<Dafny.Rune> _3493_onString;
            bool _3494_onOwned;
            bool _3495_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3496_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1522;
            bool _out1523;
            bool _out1524;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1525;
            DCOMP.COMP.GenExpr(_3492_on, selfIdent, @params, false, out _out1522, out _out1523, out _out1524, out _out1525);
            _3493_onString = _out1522;
            _3494_onOwned = _out1523;
            _3495_onErased = _out1524;
            _3496_recIdents = _out1525;
            if ((_3489_isDatatype) || (_3490_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3493_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3491_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3490_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3493_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3491_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3496_recIdents;
          }
        } else if (_source125.is_SeqConstruct) {
          DAST._IExpression _3497___mcc_h82 = _source125.dtor_length;
          DAST._IExpression _3498___mcc_h83 = _source125.dtor_elem;
          bool _3499_isDatatype = _3415___mcc_h47;
          bool _3500_isConstant = _3414___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3501_field = _3413___mcc_h45;
          DAST._IExpression _3502_on = _3412___mcc_h44;
          {
            Dafny.ISequence<Dafny.Rune> _3503_onString;
            bool _3504_onOwned;
            bool _3505_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3506_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1526;
            bool _out1527;
            bool _out1528;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1529;
            DCOMP.COMP.GenExpr(_3502_on, selfIdent, @params, false, out _out1526, out _out1527, out _out1528, out _out1529);
            _3503_onString = _out1526;
            _3504_onOwned = _out1527;
            _3505_onErased = _out1528;
            _3506_recIdents = _out1529;
            if ((_3499_isDatatype) || (_3500_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3503_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3501_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3500_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3503_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3501_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3506_recIdents;
          }
        } else if (_source125.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _3507___mcc_h86 = _source125.dtor_elements;
          DAST._IType _3508___mcc_h87 = _source125.dtor_typ;
          bool _3509_isDatatype = _3415___mcc_h47;
          bool _3510_isConstant = _3414___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3511_field = _3413___mcc_h45;
          DAST._IExpression _3512_on = _3412___mcc_h44;
          {
            Dafny.ISequence<Dafny.Rune> _3513_onString;
            bool _3514_onOwned;
            bool _3515_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3516_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1530;
            bool _out1531;
            bool _out1532;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1533;
            DCOMP.COMP.GenExpr(_3512_on, selfIdent, @params, false, out _out1530, out _out1531, out _out1532, out _out1533);
            _3513_onString = _out1530;
            _3514_onOwned = _out1531;
            _3515_onErased = _out1532;
            _3516_recIdents = _out1533;
            if ((_3509_isDatatype) || (_3510_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3513_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3511_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3510_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3513_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3511_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3516_recIdents;
          }
        } else if (_source125.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _3517___mcc_h90 = _source125.dtor_elements;
          bool _3518_isDatatype = _3415___mcc_h47;
          bool _3519_isConstant = _3414___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3520_field = _3413___mcc_h45;
          DAST._IExpression _3521_on = _3412___mcc_h44;
          {
            Dafny.ISequence<Dafny.Rune> _3522_onString;
            bool _3523_onOwned;
            bool _3524_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3525_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1534;
            bool _out1535;
            bool _out1536;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1537;
            DCOMP.COMP.GenExpr(_3521_on, selfIdent, @params, false, out _out1534, out _out1535, out _out1536, out _out1537);
            _3522_onString = _out1534;
            _3523_onOwned = _out1535;
            _3524_onErased = _out1536;
            _3525_recIdents = _out1537;
            if ((_3518_isDatatype) || (_3519_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3522_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3520_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3519_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3522_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3520_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3525_recIdents;
          }
        } else if (_source125.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3526___mcc_h92 = _source125.dtor_mapElems;
          bool _3527_isDatatype = _3415___mcc_h47;
          bool _3528_isConstant = _3414___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3529_field = _3413___mcc_h45;
          DAST._IExpression _3530_on = _3412___mcc_h44;
          {
            Dafny.ISequence<Dafny.Rune> _3531_onString;
            bool _3532_onOwned;
            bool _3533_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3534_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1538;
            bool _out1539;
            bool _out1540;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1541;
            DCOMP.COMP.GenExpr(_3530_on, selfIdent, @params, false, out _out1538, out _out1539, out _out1540, out _out1541);
            _3531_onString = _out1538;
            _3532_onOwned = _out1539;
            _3533_onErased = _out1540;
            _3534_recIdents = _out1541;
            if ((_3527_isDatatype) || (_3528_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3531_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3529_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3528_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3531_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3529_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3534_recIdents;
          }
        } else if (_source125.is_This) {
          bool _3535_isDatatype = _3415___mcc_h47;
          bool _3536_isConstant = _3414___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3537_field = _3413___mcc_h45;
          DAST._IExpression _3538_on = _3412___mcc_h44;
          {
            Dafny.ISequence<Dafny.Rune> _3539_onString;
            bool _3540_onOwned;
            bool _3541_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3542_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1542;
            bool _out1543;
            bool _out1544;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1545;
            DCOMP.COMP.GenExpr(_3538_on, selfIdent, @params, false, out _out1542, out _out1543, out _out1544, out _out1545);
            _3539_onString = _out1542;
            _3540_onOwned = _out1543;
            _3541_onErased = _out1544;
            _3542_recIdents = _out1545;
            if ((_3535_isDatatype) || (_3536_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3539_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3537_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3536_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3539_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3537_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3542_recIdents;
          }
        } else if (_source125.is_Ite) {
          DAST._IExpression _3543___mcc_h94 = _source125.dtor_cond;
          DAST._IExpression _3544___mcc_h95 = _source125.dtor_thn;
          DAST._IExpression _3545___mcc_h96 = _source125.dtor_els;
          bool _3546_isDatatype = _3415___mcc_h47;
          bool _3547_isConstant = _3414___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3548_field = _3413___mcc_h45;
          DAST._IExpression _3549_on = _3412___mcc_h44;
          {
            Dafny.ISequence<Dafny.Rune> _3550_onString;
            bool _3551_onOwned;
            bool _3552_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3553_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1546;
            bool _out1547;
            bool _out1548;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1549;
            DCOMP.COMP.GenExpr(_3549_on, selfIdent, @params, false, out _out1546, out _out1547, out _out1548, out _out1549);
            _3550_onString = _out1546;
            _3551_onOwned = _out1547;
            _3552_onErased = _out1548;
            _3553_recIdents = _out1549;
            if ((_3546_isDatatype) || (_3547_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3550_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3548_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3547_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3550_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3548_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3553_recIdents;
          }
        } else if (_source125.is_UnOp) {
          DAST._IUnaryOp _3554___mcc_h100 = _source125.dtor_unOp;
          DAST._IExpression _3555___mcc_h101 = _source125.dtor_expr;
          DAST.Format._IUnOpFormat _3556___mcc_h102 = _source125.dtor_format1;
          bool _3557_isDatatype = _3415___mcc_h47;
          bool _3558_isConstant = _3414___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3559_field = _3413___mcc_h45;
          DAST._IExpression _3560_on = _3412___mcc_h44;
          {
            Dafny.ISequence<Dafny.Rune> _3561_onString;
            bool _3562_onOwned;
            bool _3563_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3564_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1550;
            bool _out1551;
            bool _out1552;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1553;
            DCOMP.COMP.GenExpr(_3560_on, selfIdent, @params, false, out _out1550, out _out1551, out _out1552, out _out1553);
            _3561_onString = _out1550;
            _3562_onOwned = _out1551;
            _3563_onErased = _out1552;
            _3564_recIdents = _out1553;
            if ((_3557_isDatatype) || (_3558_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3561_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3559_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3558_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3561_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3559_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3564_recIdents;
          }
        } else if (_source125.is_BinOp) {
          DAST._IBinOp _3565___mcc_h106 = _source125.dtor_op;
          DAST._IExpression _3566___mcc_h107 = _source125.dtor_left;
          DAST._IExpression _3567___mcc_h108 = _source125.dtor_right;
          DAST.Format._IBinOpFormat _3568___mcc_h109 = _source125.dtor_format2;
          bool _3569_isDatatype = _3415___mcc_h47;
          bool _3570_isConstant = _3414___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3571_field = _3413___mcc_h45;
          DAST._IExpression _3572_on = _3412___mcc_h44;
          {
            Dafny.ISequence<Dafny.Rune> _3573_onString;
            bool _3574_onOwned;
            bool _3575_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3576_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1554;
            bool _out1555;
            bool _out1556;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1557;
            DCOMP.COMP.GenExpr(_3572_on, selfIdent, @params, false, out _out1554, out _out1555, out _out1556, out _out1557);
            _3573_onString = _out1554;
            _3574_onOwned = _out1555;
            _3575_onErased = _out1556;
            _3576_recIdents = _out1557;
            if ((_3569_isDatatype) || (_3570_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3573_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3571_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3570_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3573_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3571_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3576_recIdents;
          }
        } else if (_source125.is_ArrayLen) {
          DAST._IExpression _3577___mcc_h114 = _source125.dtor_expr;
          BigInteger _3578___mcc_h115 = _source125.dtor_dim;
          bool _3579_isDatatype = _3415___mcc_h47;
          bool _3580_isConstant = _3414___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3581_field = _3413___mcc_h45;
          DAST._IExpression _3582_on = _3412___mcc_h44;
          {
            Dafny.ISequence<Dafny.Rune> _3583_onString;
            bool _3584_onOwned;
            bool _3585_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3586_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1558;
            bool _out1559;
            bool _out1560;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1561;
            DCOMP.COMP.GenExpr(_3582_on, selfIdent, @params, false, out _out1558, out _out1559, out _out1560, out _out1561);
            _3583_onString = _out1558;
            _3584_onOwned = _out1559;
            _3585_onErased = _out1560;
            _3586_recIdents = _out1561;
            if ((_3579_isDatatype) || (_3580_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3583_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3581_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3580_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3583_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3581_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3586_recIdents;
          }
        } else if (_source125.is_Select) {
          DAST._IExpression _3587___mcc_h118 = _source125.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _3588___mcc_h119 = _source125.dtor_field;
          bool _3589___mcc_h120 = _source125.dtor_isConstant;
          bool _3590___mcc_h121 = _source125.dtor_onDatatype;
          bool _3591_isDatatype = _3415___mcc_h47;
          bool _3592_isConstant = _3414___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3593_field = _3413___mcc_h45;
          DAST._IExpression _3594_on = _3412___mcc_h44;
          {
            Dafny.ISequence<Dafny.Rune> _3595_onString;
            bool _3596_onOwned;
            bool _3597_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3598_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1562;
            bool _out1563;
            bool _out1564;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1565;
            DCOMP.COMP.GenExpr(_3594_on, selfIdent, @params, false, out _out1562, out _out1563, out _out1564, out _out1565);
            _3595_onString = _out1562;
            _3596_onOwned = _out1563;
            _3597_onErased = _out1564;
            _3598_recIdents = _out1565;
            if ((_3591_isDatatype) || (_3592_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3595_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3593_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3592_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3595_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3593_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3598_recIdents;
          }
        } else if (_source125.is_SelectFn) {
          DAST._IExpression _3599___mcc_h126 = _source125.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _3600___mcc_h127 = _source125.dtor_field;
          bool _3601___mcc_h128 = _source125.dtor_onDatatype;
          bool _3602___mcc_h129 = _source125.dtor_isStatic;
          BigInteger _3603___mcc_h130 = _source125.dtor_arity;
          bool _3604_isDatatype = _3415___mcc_h47;
          bool _3605_isConstant = _3414___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3606_field = _3413___mcc_h45;
          DAST._IExpression _3607_on = _3412___mcc_h44;
          {
            Dafny.ISequence<Dafny.Rune> _3608_onString;
            bool _3609_onOwned;
            bool _3610_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3611_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1566;
            bool _out1567;
            bool _out1568;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1569;
            DCOMP.COMP.GenExpr(_3607_on, selfIdent, @params, false, out _out1566, out _out1567, out _out1568, out _out1569);
            _3608_onString = _out1566;
            _3609_onOwned = _out1567;
            _3610_onErased = _out1568;
            _3611_recIdents = _out1569;
            if ((_3604_isDatatype) || (_3605_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3608_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3606_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3605_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3608_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3606_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3611_recIdents;
          }
        } else if (_source125.is_Index) {
          DAST._IExpression _3612___mcc_h136 = _source125.dtor_expr;
          DAST._ICollKind _3613___mcc_h137 = _source125.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _3614___mcc_h138 = _source125.dtor_indices;
          bool _3615_isDatatype = _3415___mcc_h47;
          bool _3616_isConstant = _3414___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3617_field = _3413___mcc_h45;
          DAST._IExpression _3618_on = _3412___mcc_h44;
          {
            Dafny.ISequence<Dafny.Rune> _3619_onString;
            bool _3620_onOwned;
            bool _3621_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3622_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1570;
            bool _out1571;
            bool _out1572;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1573;
            DCOMP.COMP.GenExpr(_3618_on, selfIdent, @params, false, out _out1570, out _out1571, out _out1572, out _out1573);
            _3619_onString = _out1570;
            _3620_onOwned = _out1571;
            _3621_onErased = _out1572;
            _3622_recIdents = _out1573;
            if ((_3615_isDatatype) || (_3616_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3619_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3617_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3616_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3619_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3617_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3622_recIdents;
          }
        } else if (_source125.is_IndexRange) {
          DAST._IExpression _3623___mcc_h142 = _source125.dtor_expr;
          bool _3624___mcc_h143 = _source125.dtor_isArray;
          Std.Wrappers._IOption<DAST._IExpression> _3625___mcc_h144 = _source125.dtor_low;
          Std.Wrappers._IOption<DAST._IExpression> _3626___mcc_h145 = _source125.dtor_high;
          bool _3627_isDatatype = _3415___mcc_h47;
          bool _3628_isConstant = _3414___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3629_field = _3413___mcc_h45;
          DAST._IExpression _3630_on = _3412___mcc_h44;
          {
            Dafny.ISequence<Dafny.Rune> _3631_onString;
            bool _3632_onOwned;
            bool _3633_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3634_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1574;
            bool _out1575;
            bool _out1576;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1577;
            DCOMP.COMP.GenExpr(_3630_on, selfIdent, @params, false, out _out1574, out _out1575, out _out1576, out _out1577);
            _3631_onString = _out1574;
            _3632_onOwned = _out1575;
            _3633_onErased = _out1576;
            _3634_recIdents = _out1577;
            if ((_3627_isDatatype) || (_3628_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3631_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3629_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3628_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3631_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3629_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3634_recIdents;
          }
        } else if (_source125.is_TupleSelect) {
          DAST._IExpression _3635___mcc_h150 = _source125.dtor_expr;
          BigInteger _3636___mcc_h151 = _source125.dtor_index;
          bool _3637_isDatatype = _3415___mcc_h47;
          bool _3638_isConstant = _3414___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3639_field = _3413___mcc_h45;
          DAST._IExpression _3640_on = _3412___mcc_h44;
          {
            Dafny.ISequence<Dafny.Rune> _3641_onString;
            bool _3642_onOwned;
            bool _3643_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3644_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1578;
            bool _out1579;
            bool _out1580;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1581;
            DCOMP.COMP.GenExpr(_3640_on, selfIdent, @params, false, out _out1578, out _out1579, out _out1580, out _out1581);
            _3641_onString = _out1578;
            _3642_onOwned = _out1579;
            _3643_onErased = _out1580;
            _3644_recIdents = _out1581;
            if ((_3637_isDatatype) || (_3638_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3641_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3639_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3638_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3641_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3639_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3644_recIdents;
          }
        } else if (_source125.is_Call) {
          DAST._IExpression _3645___mcc_h154 = _source125.dtor_on;
          Dafny.ISequence<Dafny.Rune> _3646___mcc_h155 = _source125.dtor_name;
          Dafny.ISequence<DAST._IType> _3647___mcc_h156 = _source125.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _3648___mcc_h157 = _source125.dtor_args;
          bool _3649_isDatatype = _3415___mcc_h47;
          bool _3650_isConstant = _3414___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3651_field = _3413___mcc_h45;
          DAST._IExpression _3652_on = _3412___mcc_h44;
          {
            Dafny.ISequence<Dafny.Rune> _3653_onString;
            bool _3654_onOwned;
            bool _3655_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3656_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1582;
            bool _out1583;
            bool _out1584;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1585;
            DCOMP.COMP.GenExpr(_3652_on, selfIdent, @params, false, out _out1582, out _out1583, out _out1584, out _out1585);
            _3653_onString = _out1582;
            _3654_onOwned = _out1583;
            _3655_onErased = _out1584;
            _3656_recIdents = _out1585;
            if ((_3649_isDatatype) || (_3650_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3653_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3651_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3650_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3653_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3651_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3656_recIdents;
          }
        } else if (_source125.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _3657___mcc_h162 = _source125.dtor_params;
          DAST._IType _3658___mcc_h163 = _source125.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _3659___mcc_h164 = _source125.dtor_body;
          bool _3660_isDatatype = _3415___mcc_h47;
          bool _3661_isConstant = _3414___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3662_field = _3413___mcc_h45;
          DAST._IExpression _3663_on = _3412___mcc_h44;
          {
            Dafny.ISequence<Dafny.Rune> _3664_onString;
            bool _3665_onOwned;
            bool _3666_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3667_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1586;
            bool _out1587;
            bool _out1588;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1589;
            DCOMP.COMP.GenExpr(_3663_on, selfIdent, @params, false, out _out1586, out _out1587, out _out1588, out _out1589);
            _3664_onString = _out1586;
            _3665_onOwned = _out1587;
            _3666_onErased = _out1588;
            _3667_recIdents = _out1589;
            if ((_3660_isDatatype) || (_3661_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3664_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3662_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3661_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3664_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3662_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3667_recIdents;
          }
        } else if (_source125.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3668___mcc_h168 = _source125.dtor_values;
          DAST._IType _3669___mcc_h169 = _source125.dtor_retType;
          DAST._IExpression _3670___mcc_h170 = _source125.dtor_expr;
          bool _3671_isDatatype = _3415___mcc_h47;
          bool _3672_isConstant = _3414___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3673_field = _3413___mcc_h45;
          DAST._IExpression _3674_on = _3412___mcc_h44;
          {
            Dafny.ISequence<Dafny.Rune> _3675_onString;
            bool _3676_onOwned;
            bool _3677_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3678_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1590;
            bool _out1591;
            bool _out1592;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1593;
            DCOMP.COMP.GenExpr(_3674_on, selfIdent, @params, false, out _out1590, out _out1591, out _out1592, out _out1593);
            _3675_onString = _out1590;
            _3676_onOwned = _out1591;
            _3677_onErased = _out1592;
            _3678_recIdents = _out1593;
            if ((_3671_isDatatype) || (_3672_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3675_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3673_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3672_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3675_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3673_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3678_recIdents;
          }
        } else if (_source125.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _3679___mcc_h174 = _source125.dtor_name;
          DAST._IType _3680___mcc_h175 = _source125.dtor_typ;
          DAST._IExpression _3681___mcc_h176 = _source125.dtor_value;
          DAST._IExpression _3682___mcc_h177 = _source125.dtor_iifeBody;
          bool _3683_isDatatype = _3415___mcc_h47;
          bool _3684_isConstant = _3414___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3685_field = _3413___mcc_h45;
          DAST._IExpression _3686_on = _3412___mcc_h44;
          {
            Dafny.ISequence<Dafny.Rune> _3687_onString;
            bool _3688_onOwned;
            bool _3689_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3690_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1594;
            bool _out1595;
            bool _out1596;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1597;
            DCOMP.COMP.GenExpr(_3686_on, selfIdent, @params, false, out _out1594, out _out1595, out _out1596, out _out1597);
            _3687_onString = _out1594;
            _3688_onOwned = _out1595;
            _3689_onErased = _out1596;
            _3690_recIdents = _out1597;
            if ((_3683_isDatatype) || (_3684_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3687_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3685_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3684_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3687_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3685_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3690_recIdents;
          }
        } else if (_source125.is_Apply) {
          DAST._IExpression _3691___mcc_h182 = _source125.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _3692___mcc_h183 = _source125.dtor_args;
          bool _3693_isDatatype = _3415___mcc_h47;
          bool _3694_isConstant = _3414___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3695_field = _3413___mcc_h45;
          DAST._IExpression _3696_on = _3412___mcc_h44;
          {
            Dafny.ISequence<Dafny.Rune> _3697_onString;
            bool _3698_onOwned;
            bool _3699_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3700_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1598;
            bool _out1599;
            bool _out1600;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1601;
            DCOMP.COMP.GenExpr(_3696_on, selfIdent, @params, false, out _out1598, out _out1599, out _out1600, out _out1601);
            _3697_onString = _out1598;
            _3698_onOwned = _out1599;
            _3699_onErased = _out1600;
            _3700_recIdents = _out1601;
            if ((_3693_isDatatype) || (_3694_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3697_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3695_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3694_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3697_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3695_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3700_recIdents;
          }
        } else if (_source125.is_TypeTest) {
          DAST._IExpression _3701___mcc_h186 = _source125.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3702___mcc_h187 = _source125.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _3703___mcc_h188 = _source125.dtor_variant;
          bool _3704_isDatatype = _3415___mcc_h47;
          bool _3705_isConstant = _3414___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3706_field = _3413___mcc_h45;
          DAST._IExpression _3707_on = _3412___mcc_h44;
          {
            Dafny.ISequence<Dafny.Rune> _3708_onString;
            bool _3709_onOwned;
            bool _3710_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3711_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1602;
            bool _out1603;
            bool _out1604;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1605;
            DCOMP.COMP.GenExpr(_3707_on, selfIdent, @params, false, out _out1602, out _out1603, out _out1604, out _out1605);
            _3708_onString = _out1602;
            _3709_onOwned = _out1603;
            _3710_onErased = _out1604;
            _3711_recIdents = _out1605;
            if ((_3704_isDatatype) || (_3705_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3708_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3706_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3705_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3708_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3706_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3711_recIdents;
          }
        } else if (_source125.is_InitializationValue) {
          DAST._IType _3712___mcc_h192 = _source125.dtor_typ;
          bool _3713_isDatatype = _3415___mcc_h47;
          bool _3714_isConstant = _3414___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3715_field = _3413___mcc_h45;
          DAST._IExpression _3716_on = _3412___mcc_h44;
          {
            Dafny.ISequence<Dafny.Rune> _3717_onString;
            bool _3718_onOwned;
            bool _3719_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3720_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1606;
            bool _out1607;
            bool _out1608;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1609;
            DCOMP.COMP.GenExpr(_3716_on, selfIdent, @params, false, out _out1606, out _out1607, out _out1608, out _out1609);
            _3717_onString = _out1606;
            _3718_onOwned = _out1607;
            _3719_onErased = _out1608;
            _3720_recIdents = _out1609;
            if ((_3713_isDatatype) || (_3714_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3717_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3715_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3714_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3717_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3715_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3720_recIdents;
          }
        } else if (_source125.is_BoolBoundedPool) {
          bool _3721_isDatatype = _3415___mcc_h47;
          bool _3722_isConstant = _3414___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3723_field = _3413___mcc_h45;
          DAST._IExpression _3724_on = _3412___mcc_h44;
          {
            Dafny.ISequence<Dafny.Rune> _3725_onString;
            bool _3726_onOwned;
            bool _3727_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3728_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1610;
            bool _out1611;
            bool _out1612;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1613;
            DCOMP.COMP.GenExpr(_3724_on, selfIdent, @params, false, out _out1610, out _out1611, out _out1612, out _out1613);
            _3725_onString = _out1610;
            _3726_onOwned = _out1611;
            _3727_onErased = _out1612;
            _3728_recIdents = _out1613;
            if ((_3721_isDatatype) || (_3722_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3725_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3723_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3722_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3725_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3723_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3728_recIdents;
          }
        } else if (_source125.is_SetBoundedPool) {
          DAST._IExpression _3729___mcc_h194 = _source125.dtor_of;
          bool _3730_isDatatype = _3415___mcc_h47;
          bool _3731_isConstant = _3414___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3732_field = _3413___mcc_h45;
          DAST._IExpression _3733_on = _3412___mcc_h44;
          {
            Dafny.ISequence<Dafny.Rune> _3734_onString;
            bool _3735_onOwned;
            bool _3736_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3737_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1614;
            bool _out1615;
            bool _out1616;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1617;
            DCOMP.COMP.GenExpr(_3733_on, selfIdent, @params, false, out _out1614, out _out1615, out _out1616, out _out1617);
            _3734_onString = _out1614;
            _3735_onOwned = _out1615;
            _3736_onErased = _out1616;
            _3737_recIdents = _out1617;
            if ((_3730_isDatatype) || (_3731_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3734_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3732_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3731_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3734_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3732_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3737_recIdents;
          }
        } else if (_source125.is_SeqBoundedPool) {
          DAST._IExpression _3738___mcc_h196 = _source125.dtor_of;
          bool _3739___mcc_h197 = _source125.dtor_includeDuplicates;
          bool _3740_isDatatype = _3415___mcc_h47;
          bool _3741_isConstant = _3414___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3742_field = _3413___mcc_h45;
          DAST._IExpression _3743_on = _3412___mcc_h44;
          {
            Dafny.ISequence<Dafny.Rune> _3744_onString;
            bool _3745_onOwned;
            bool _3746_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3747_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1618;
            bool _out1619;
            bool _out1620;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1621;
            DCOMP.COMP.GenExpr(_3743_on, selfIdent, @params, false, out _out1618, out _out1619, out _out1620, out _out1621);
            _3744_onString = _out1618;
            _3745_onOwned = _out1619;
            _3746_onErased = _out1620;
            _3747_recIdents = _out1621;
            if ((_3740_isDatatype) || (_3741_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3744_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3742_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3741_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3744_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3742_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3747_recIdents;
          }
        } else {
          DAST._IExpression _3748___mcc_h200 = _source125.dtor_lo;
          DAST._IExpression _3749___mcc_h201 = _source125.dtor_hi;
          bool _3750_isDatatype = _3415___mcc_h47;
          bool _3751_isConstant = _3414___mcc_h46;
          Dafny.ISequence<Dafny.Rune> _3752_field = _3413___mcc_h45;
          DAST._IExpression _3753_on = _3412___mcc_h44;
          {
            Dafny.ISequence<Dafny.Rune> _3754_onString;
            bool _3755_onOwned;
            bool _3756_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3757_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1622;
            bool _out1623;
            bool _out1624;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1625;
            DCOMP.COMP.GenExpr(_3753_on, selfIdent, @params, false, out _out1622, out _out1623, out _out1624, out _out1625);
            _3754_onString = _out1622;
            _3755_onOwned = _out1623;
            _3756_onErased = _out1624;
            _3757_recIdents = _out1625;
            if ((_3750_isDatatype) || (_3751_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3754_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3752_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3751_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3754_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3752_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3757_recIdents;
          }
        }
      } else if (_source55.is_SelectFn) {
        DAST._IExpression _3758___mcc_h204 = _source55.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _3759___mcc_h205 = _source55.dtor_field;
        bool _3760___mcc_h206 = _source55.dtor_onDatatype;
        bool _3761___mcc_h207 = _source55.dtor_isStatic;
        BigInteger _3762___mcc_h208 = _source55.dtor_arity;
        BigInteger _3763_arity = _3762___mcc_h208;
        bool _3764_isStatic = _3761___mcc_h207;
        bool _3765_isDatatype = _3760___mcc_h206;
        Dafny.ISequence<Dafny.Rune> _3766_field = _3759___mcc_h205;
        DAST._IExpression _3767_on = _3758___mcc_h204;
        {
          Dafny.ISequence<Dafny.Rune> _3768_onString;
          bool _3769_onOwned;
          bool _3770___v86;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3771_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1626;
          bool _out1627;
          bool _out1628;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1629;
          DCOMP.COMP.GenExpr(_3767_on, selfIdent, @params, false, out _out1626, out _out1627, out _out1628, out _out1629);
          _3768_onString = _out1626;
          _3769_onOwned = _out1627;
          _3770___v86 = _out1628;
          _3771_recIdents = _out1629;
          if (_3764_isStatic) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3768_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_3766_field));
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _3768_onString), ((_3769_onOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _3772_args;
            _3772_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _3773_i;
            _3773_i = BigInteger.Zero;
            while ((_3773_i) < (_3763_arity)) {
              if ((_3773_i).Sign == 1) {
                _3772_args = Dafny.Sequence<Dafny.Rune>.Concat(_3772_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _3772_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3772_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), Std.Strings.__default.OfNat(_3773_i));
              _3773_i = (_3773_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _3772_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), _3766_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3772_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _3774_typeShape;
          _3774_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _3775_i;
          _3775_i = BigInteger.Zero;
          while ((_3775_i) < (_3763_arity)) {
            if ((_3775_i).Sign == 1) {
              _3774_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_3774_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _3774_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_3774_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _3775_i = (_3775_i) + (BigInteger.One);
          }
          _3774_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_3774_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper(::std::rc::Rc::new("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _3774_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
          readIdents = _3771_recIdents;
        }
      } else if (_source55.is_Index) {
        DAST._IExpression _3776___mcc_h209 = _source55.dtor_expr;
        DAST._ICollKind _3777___mcc_h210 = _source55.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _3778___mcc_h211 = _source55.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _3779_indices = _3778___mcc_h211;
        DAST._ICollKind _3780_collKind = _3777___mcc_h210;
        DAST._IExpression _3781_on = _3776___mcc_h209;
        {
          Dafny.ISequence<Dafny.Rune> _3782_onString;
          bool _3783_onOwned;
          bool _3784_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3785_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1630;
          bool _out1631;
          bool _out1632;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1633;
          DCOMP.COMP.GenExpr(_3781_on, selfIdent, @params, false, out _out1630, out _out1631, out _out1632, out _out1633);
          _3782_onString = _out1630;
          _3783_onOwned = _out1631;
          _3784_onErased = _out1632;
          _3785_recIdents = _out1633;
          readIdents = _3785_recIdents;
          s = _3782_onString;
          BigInteger _3786_i;
          _3786_i = BigInteger.Zero;
          while ((_3786_i) < (new BigInteger((_3779_indices).Count))) {
            if (object.Equals(_3780_collKind, DAST.CollKind.create_Array())) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
            }
            if (object.Equals(_3780_collKind, DAST.CollKind.create_Map())) {
              Dafny.ISequence<Dafny.Rune> _3787_idx;
              bool _3788_idxOwned;
              bool _3789_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3790_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1634;
              bool _out1635;
              bool _out1636;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1637;
              DCOMP.COMP.GenExpr((_3779_indices).Select(_3786_i), selfIdent, @params, false, out _out1634, out _out1635, out _out1636, out _out1637);
              _3787_idx = _out1634;
              _3788_idxOwned = _out1635;
              _3789_idxErased = _out1636;
              _3790_recIdentsIdx = _out1637;
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[")), ((_3788_idxOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), _3787_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3790_recIdentsIdx);
            } else {
              Dafny.ISequence<Dafny.Rune> _3791_idx;
              bool _3792___v87;
              bool _3793_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3794_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1638;
              bool _out1639;
              bool _out1640;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1641;
              DCOMP.COMP.GenExpr((_3779_indices).Select(_3786_i), selfIdent, @params, true, out _out1638, out _out1639, out _out1640, out _out1641);
              _3791_idx = _out1638;
              _3792___v87 = _out1639;
              _3793_idxErased = _out1640;
              _3794_recIdentsIdx = _out1641;
              if (!(_3793_idxErased)) {
                _3791_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3791_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[<usize as ::dafny_runtime::NumCast>::from(")), _3791_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3794_recIdentsIdx);
            }
            _3786_i = (_3786_i) + (BigInteger.One);
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = false;
          }
          isErased = _3784_onErased;
        }
      } else if (_source55.is_IndexRange) {
        DAST._IExpression _3795___mcc_h212 = _source55.dtor_expr;
        bool _3796___mcc_h213 = _source55.dtor_isArray;
        Std.Wrappers._IOption<DAST._IExpression> _3797___mcc_h214 = _source55.dtor_low;
        Std.Wrappers._IOption<DAST._IExpression> _3798___mcc_h215 = _source55.dtor_high;
        Std.Wrappers._IOption<DAST._IExpression> _3799_high = _3798___mcc_h215;
        Std.Wrappers._IOption<DAST._IExpression> _3800_low = _3797___mcc_h214;
        bool _3801_isArray = _3796___mcc_h213;
        DAST._IExpression _3802_on = _3795___mcc_h212;
        {
          Dafny.ISequence<Dafny.Rune> _3803_onString;
          bool _3804_onOwned;
          bool _3805_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3806_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1642;
          bool _out1643;
          bool _out1644;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1645;
          DCOMP.COMP.GenExpr(_3802_on, selfIdent, @params, false, out _out1642, out _out1643, out _out1644, out _out1645);
          _3803_onString = _out1642;
          _3804_onOwned = _out1643;
          _3805_onErased = _out1644;
          _3806_recIdents = _out1645;
          readIdents = _3806_recIdents;
          s = _3803_onString;
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _3807_lowString;
          _3807_lowString = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
          Std.Wrappers._IOption<DAST._IExpression> _source126 = _3800_low;
          if (_source126.is_None) {
          } else {
            DAST._IExpression _3808___mcc_h1213 = _source126.dtor_value;
            DAST._IExpression _3809_l = _3808___mcc_h1213;
            {
              Dafny.ISequence<Dafny.Rune> _3810_lString;
              bool _3811___v88;
              bool _3812_lErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3813_recIdentsL;
              Dafny.ISequence<Dafny.Rune> _out1646;
              bool _out1647;
              bool _out1648;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1649;
              DCOMP.COMP.GenExpr(_3809_l, selfIdent, @params, true, out _out1646, out _out1647, out _out1648, out _out1649);
              _3810_lString = _out1646;
              _3811___v88 = _out1647;
              _3812_lErased = _out1648;
              _3813_recIdentsL = _out1649;
              if (!(_3812_lErased)) {
                _3810_lString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3810_lString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _3807_lowString = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(_3810_lString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3813_recIdentsL);
            }
          }
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _3814_highString;
          _3814_highString = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
          Std.Wrappers._IOption<DAST._IExpression> _source127 = _3799_high;
          if (_source127.is_None) {
          } else {
            DAST._IExpression _3815___mcc_h1214 = _source127.dtor_value;
            DAST._IExpression _3816_h = _3815___mcc_h1214;
            {
              Dafny.ISequence<Dafny.Rune> _3817_hString;
              bool _3818___v89;
              bool _3819_hErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3820_recIdentsH;
              Dafny.ISequence<Dafny.Rune> _out1650;
              bool _out1651;
              bool _out1652;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1653;
              DCOMP.COMP.GenExpr(_3816_h, selfIdent, @params, true, out _out1650, out _out1651, out _out1652, out _out1653);
              _3817_hString = _out1650;
              _3818___v89 = _out1651;
              _3819_hErased = _out1652;
              _3820_recIdentsH = _out1653;
              if (!(_3819_hErased)) {
                _3817_hString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3817_hString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _3814_highString = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(_3817_hString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3820_recIdentsH);
            }
          }
          if (_3801_isArray) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[")), ((System.Func<Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source128) => {
            if (_source128.is_None) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            } else {
              Dafny.ISequence<Dafny.Rune> _3821___mcc_h1215 = _source128.dtor_value;
              Dafny.ISequence<Dafny.Rune> _3822_l = _3821___mcc_h1215;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _3822_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            }
          }))(_3807_lowString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("..")), ((System.Func<Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source129) => {
            if (_source129.is_None) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            } else {
              Dafny.ISequence<Dafny.Rune> _3823___mcc_h1216 = _source129.dtor_value;
              Dafny.ISequence<Dafny.Rune> _3824_h = _3823___mcc_h1216;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _3824_h), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            }
          }))(_3814_highString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
          isErased = _3805_onErased;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".to_vec())"));
          isOwned = true;
        }
      } else if (_source55.is_TupleSelect) {
        DAST._IExpression _3825___mcc_h216 = _source55.dtor_expr;
        BigInteger _3826___mcc_h217 = _source55.dtor_index;
        BigInteger _3827_idx = _3826___mcc_h217;
        DAST._IExpression _3828_on = _3825___mcc_h216;
        {
          Dafny.ISequence<Dafny.Rune> _3829_onString;
          bool _3830___v90;
          bool _3831_tupErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3832_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1654;
          bool _out1655;
          bool _out1656;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1657;
          DCOMP.COMP.GenExpr(_3828_on, selfIdent, @params, false, out _out1654, out _out1655, out _out1656, out _out1657);
          _3829_onString = _out1654;
          _3830___v90 = _out1655;
          _3831_tupErased = _out1656;
          _3832_recIdents = _out1657;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3829_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), Std.Strings.__default.OfNat(_3827_idx));
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
            isOwned = false;
          }
          isErased = _3831_tupErased;
          readIdents = _3832_recIdents;
        }
      } else if (_source55.is_Call) {
        DAST._IExpression _3833___mcc_h218 = _source55.dtor_on;
        Dafny.ISequence<Dafny.Rune> _3834___mcc_h219 = _source55.dtor_name;
        Dafny.ISequence<DAST._IType> _3835___mcc_h220 = _source55.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _3836___mcc_h221 = _source55.dtor_args;
        Dafny.ISequence<DAST._IExpression> _3837_args = _3836___mcc_h221;
        Dafny.ISequence<DAST._IType> _3838_typeArgs = _3835___mcc_h220;
        Dafny.ISequence<Dafny.Rune> _3839_name = _3834___mcc_h219;
        DAST._IExpression _3840_on = _3833___mcc_h218;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3841_typeArgString;
          _3841_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_3838_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _3842_typeI;
            _3842_typeI = BigInteger.Zero;
            _3841_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_3842_typeI) < (new BigInteger((_3838_typeArgs).Count))) {
              if ((_3842_typeI).Sign == 1) {
                _3841_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3841_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _3843_typeString;
              Dafny.ISequence<Dafny.Rune> _out1658;
              _out1658 = DCOMP.COMP.GenType((_3838_typeArgs).Select(_3842_typeI), false, false);
              _3843_typeString = _out1658;
              _3841_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3841_typeArgString, _3843_typeString);
              _3842_typeI = (_3842_typeI) + (BigInteger.One);
            }
            _3841_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3841_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _3844_argString;
          _3844_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _3845_i;
          _3845_i = BigInteger.Zero;
          while ((_3845_i) < (new BigInteger((_3837_args).Count))) {
            if ((_3845_i).Sign == 1) {
              _3844_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3844_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3846_argExpr;
            bool _3847_isOwned;
            bool _3848_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3849_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1659;
            bool _out1660;
            bool _out1661;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1662;
            DCOMP.COMP.GenExpr((_3837_args).Select(_3845_i), selfIdent, @params, false, out _out1659, out _out1660, out _out1661, out _out1662);
            _3846_argExpr = _out1659;
            _3847_isOwned = _out1660;
            _3848_argErased = _out1661;
            _3849_argIdents = _out1662;
            if (_3847_isOwned) {
              _3846_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _3846_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (!(_3848_argErased)) {
              _3846_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase("), _3846_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _3846_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::unerase("), _3846_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _3844_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3844_argString, _3846_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3849_argIdents);
            _3845_i = (_3845_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3850_enclosingString;
          bool _3851___v91;
          bool _3852___v92;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3853_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1663;
          bool _out1664;
          bool _out1665;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1666;
          DCOMP.COMP.GenExpr(_3840_on, selfIdent, @params, false, out _out1663, out _out1664, out _out1665, out _out1666);
          _3850_enclosingString = _out1663;
          _3851___v91 = _out1664;
          _3852___v92 = _out1665;
          _3853_recIdents = _out1666;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3853_recIdents);
          DAST._IExpression _source130 = _3840_on;
          if (_source130.is_Literal) {
            DAST._ILiteral _3854___mcc_h1217 = _source130.dtor_Literal_a0;
            {
              _3850_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3850_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3839_name)));
            }
          } else if (_source130.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _3855___mcc_h1219 = _source130.dtor_Ident_a0;
            {
              _3850_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3850_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3839_name)));
            }
          } else if (_source130.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3856___mcc_h1221 = _source130.dtor_Companion_a0;
            {
              _3850_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3850_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_3839_name)));
            }
          } else if (_source130.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _3857___mcc_h1223 = _source130.dtor_Tuple_a0;
            {
              _3850_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3850_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3839_name)));
            }
          } else if (_source130.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3858___mcc_h1225 = _source130.dtor_path;
            Dafny.ISequence<DAST._IType> _3859___mcc_h1226 = _source130.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _3860___mcc_h1227 = _source130.dtor_args;
            {
              _3850_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3850_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3839_name)));
            }
          } else if (_source130.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _3861___mcc_h1231 = _source130.dtor_dims;
            DAST._IType _3862___mcc_h1232 = _source130.dtor_typ;
            {
              _3850_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3850_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3839_name)));
            }
          } else if (_source130.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3863___mcc_h1235 = _source130.dtor_path;
            Dafny.ISequence<DAST._IType> _3864___mcc_h1236 = _source130.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _3865___mcc_h1237 = _source130.dtor_variant;
            bool _3866___mcc_h1238 = _source130.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _3867___mcc_h1239 = _source130.dtor_contents;
            {
              _3850_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3850_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3839_name)));
            }
          } else if (_source130.is_Convert) {
            DAST._IExpression _3868___mcc_h1245 = _source130.dtor_value;
            DAST._IType _3869___mcc_h1246 = _source130.dtor_from;
            DAST._IType _3870___mcc_h1247 = _source130.dtor_typ;
            {
              _3850_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3850_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3839_name)));
            }
          } else if (_source130.is_SeqConstruct) {
            DAST._IExpression _3871___mcc_h1251 = _source130.dtor_length;
            DAST._IExpression _3872___mcc_h1252 = _source130.dtor_elem;
            {
              _3850_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3850_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3839_name)));
            }
          } else if (_source130.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _3873___mcc_h1255 = _source130.dtor_elements;
            DAST._IType _3874___mcc_h1256 = _source130.dtor_typ;
            {
              _3850_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3850_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3839_name)));
            }
          } else if (_source130.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _3875___mcc_h1259 = _source130.dtor_elements;
            {
              _3850_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3850_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3839_name)));
            }
          } else if (_source130.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3876___mcc_h1261 = _source130.dtor_mapElems;
            {
              _3850_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3850_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3839_name)));
            }
          } else if (_source130.is_This) {
            {
              _3850_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3850_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3839_name)));
            }
          } else if (_source130.is_Ite) {
            DAST._IExpression _3877___mcc_h1263 = _source130.dtor_cond;
            DAST._IExpression _3878___mcc_h1264 = _source130.dtor_thn;
            DAST._IExpression _3879___mcc_h1265 = _source130.dtor_els;
            {
              _3850_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3850_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3839_name)));
            }
          } else if (_source130.is_UnOp) {
            DAST._IUnaryOp _3880___mcc_h1269 = _source130.dtor_unOp;
            DAST._IExpression _3881___mcc_h1270 = _source130.dtor_expr;
            DAST.Format._IUnOpFormat _3882___mcc_h1271 = _source130.dtor_format1;
            {
              _3850_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3850_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3839_name)));
            }
          } else if (_source130.is_BinOp) {
            DAST._IBinOp _3883___mcc_h1275 = _source130.dtor_op;
            DAST._IExpression _3884___mcc_h1276 = _source130.dtor_left;
            DAST._IExpression _3885___mcc_h1277 = _source130.dtor_right;
            DAST.Format._IBinOpFormat _3886___mcc_h1278 = _source130.dtor_format2;
            {
              _3850_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3850_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3839_name)));
            }
          } else if (_source130.is_ArrayLen) {
            DAST._IExpression _3887___mcc_h1283 = _source130.dtor_expr;
            BigInteger _3888___mcc_h1284 = _source130.dtor_dim;
            {
              _3850_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3850_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3839_name)));
            }
          } else if (_source130.is_Select) {
            DAST._IExpression _3889___mcc_h1287 = _source130.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _3890___mcc_h1288 = _source130.dtor_field;
            bool _3891___mcc_h1289 = _source130.dtor_isConstant;
            bool _3892___mcc_h1290 = _source130.dtor_onDatatype;
            {
              _3850_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3850_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3839_name)));
            }
          } else if (_source130.is_SelectFn) {
            DAST._IExpression _3893___mcc_h1295 = _source130.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _3894___mcc_h1296 = _source130.dtor_field;
            bool _3895___mcc_h1297 = _source130.dtor_onDatatype;
            bool _3896___mcc_h1298 = _source130.dtor_isStatic;
            BigInteger _3897___mcc_h1299 = _source130.dtor_arity;
            {
              _3850_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3850_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3839_name)));
            }
          } else if (_source130.is_Index) {
            DAST._IExpression _3898___mcc_h1305 = _source130.dtor_expr;
            DAST._ICollKind _3899___mcc_h1306 = _source130.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _3900___mcc_h1307 = _source130.dtor_indices;
            {
              _3850_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3850_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3839_name)));
            }
          } else if (_source130.is_IndexRange) {
            DAST._IExpression _3901___mcc_h1311 = _source130.dtor_expr;
            bool _3902___mcc_h1312 = _source130.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _3903___mcc_h1313 = _source130.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _3904___mcc_h1314 = _source130.dtor_high;
            {
              _3850_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3850_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3839_name)));
            }
          } else if (_source130.is_TupleSelect) {
            DAST._IExpression _3905___mcc_h1319 = _source130.dtor_expr;
            BigInteger _3906___mcc_h1320 = _source130.dtor_index;
            {
              _3850_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3850_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3839_name)));
            }
          } else if (_source130.is_Call) {
            DAST._IExpression _3907___mcc_h1323 = _source130.dtor_on;
            Dafny.ISequence<Dafny.Rune> _3908___mcc_h1324 = _source130.dtor_name;
            Dafny.ISequence<DAST._IType> _3909___mcc_h1325 = _source130.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _3910___mcc_h1326 = _source130.dtor_args;
            {
              _3850_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3850_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3839_name)));
            }
          } else if (_source130.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _3911___mcc_h1331 = _source130.dtor_params;
            DAST._IType _3912___mcc_h1332 = _source130.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _3913___mcc_h1333 = _source130.dtor_body;
            {
              _3850_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3850_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3839_name)));
            }
          } else if (_source130.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3914___mcc_h1337 = _source130.dtor_values;
            DAST._IType _3915___mcc_h1338 = _source130.dtor_retType;
            DAST._IExpression _3916___mcc_h1339 = _source130.dtor_expr;
            {
              _3850_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3850_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3839_name)));
            }
          } else if (_source130.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _3917___mcc_h1343 = _source130.dtor_name;
            DAST._IType _3918___mcc_h1344 = _source130.dtor_typ;
            DAST._IExpression _3919___mcc_h1345 = _source130.dtor_value;
            DAST._IExpression _3920___mcc_h1346 = _source130.dtor_iifeBody;
            {
              _3850_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3850_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3839_name)));
            }
          } else if (_source130.is_Apply) {
            DAST._IExpression _3921___mcc_h1351 = _source130.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _3922___mcc_h1352 = _source130.dtor_args;
            {
              _3850_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3850_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3839_name)));
            }
          } else if (_source130.is_TypeTest) {
            DAST._IExpression _3923___mcc_h1355 = _source130.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3924___mcc_h1356 = _source130.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _3925___mcc_h1357 = _source130.dtor_variant;
            {
              _3850_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3850_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3839_name)));
            }
          } else if (_source130.is_InitializationValue) {
            DAST._IType _3926___mcc_h1361 = _source130.dtor_typ;
            {
              _3850_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3850_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3839_name)));
            }
          } else if (_source130.is_BoolBoundedPool) {
            {
              _3850_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3850_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3839_name)));
            }
          } else if (_source130.is_SetBoundedPool) {
            DAST._IExpression _3927___mcc_h1363 = _source130.dtor_of;
            {
              _3850_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3850_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3839_name)));
            }
          } else if (_source130.is_SeqBoundedPool) {
            DAST._IExpression _3928___mcc_h1365 = _source130.dtor_of;
            bool _3929___mcc_h1366 = _source130.dtor_includeDuplicates;
            {
              _3850_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3850_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3839_name)));
            }
          } else {
            DAST._IExpression _3930___mcc_h1369 = _source130.dtor_lo;
            DAST._IExpression _3931___mcc_h1370 = _source130.dtor_hi;
            {
              _3850_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3850_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3839_name)));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3850_enclosingString, _3841_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3844_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source55.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _3932___mcc_h222 = _source55.dtor_params;
        DAST._IType _3933___mcc_h223 = _source55.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _3934___mcc_h224 = _source55.dtor_body;
        Dafny.ISequence<DAST._IStatement> _3935_body = _3934___mcc_h224;
        DAST._IType _3936_retType = _3933___mcc_h223;
        Dafny.ISequence<DAST._IFormal> _3937_params = _3932___mcc_h222;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3938_paramNames;
          _3938_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3939_i;
          _3939_i = BigInteger.Zero;
          while ((_3939_i) < (new BigInteger((_3937_params).Count))) {
            _3938_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_3938_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(((_3937_params).Select(_3939_i)).dtor_name));
            _3939_i = (_3939_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3940_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3941_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1667;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1668;
          DCOMP.COMP.GenStmts(_3935_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), _3938_paramNames, true, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), out _out1667, out _out1668);
          _3940_recursiveGen = _out1667;
          _3941_recIdents = _out1668;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3942_allReadCloned;
          _3942_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          while (!(_3941_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _3943_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_3 in (_3941_recIdents).Elements) {
              _3943_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_3;
              if ((_3941_recIdents).Contains(_3943_next)) {
                goto after__ASSIGN_SUCH_THAT_3;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 2626)");
          after__ASSIGN_SUCH_THAT_3:;
            if ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) && ((_3943_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
                _3942_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(_3942_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let _this = self.clone();\n"));
              }
            } else if (!((_3938_paramNames).Contains(_3943_next))) {
              _3942_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3942_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_3943_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_3943_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3943_next));
            }
            _3941_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3941_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3943_next));
          }
          Dafny.ISequence<Dafny.Rune> _3944_paramsString;
          _3944_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Dafny.ISequence<Dafny.Rune> _3945_paramTypes;
          _3945_paramTypes = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _3939_i = BigInteger.Zero;
          while ((_3939_i) < (new BigInteger((_3937_params).Count))) {
            if ((_3939_i).Sign == 1) {
              _3944_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_3944_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              _3945_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_3945_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3946_typStr;
            Dafny.ISequence<Dafny.Rune> _out1669;
            _out1669 = DCOMP.COMP.GenType(((_3937_params).Select(_3939_i)).dtor_typ, false, true);
            _3946_typStr = _out1669;
            _3944_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3944_paramsString, DCOMP.__default.escapeIdent(((_3937_params).Select(_3939_i)).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _3946_typStr);
            _3945_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3945_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _3946_typStr);
            _3939_i = (_3939_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3947_retTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1670;
          _out1670 = DCOMP.COMP.GenType(_3936_retType, false, true);
          _3947_retTypeGen = _out1670;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper::<::std::rc::Rc<dyn ::std::ops::Fn("), _3945_paramTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _3947_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>({\n")), _3942_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(move |")), _3944_paramsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| -> ")), _3947_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _3940_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})})"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source55.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3948___mcc_h225 = _source55.dtor_values;
        DAST._IType _3949___mcc_h226 = _source55.dtor_retType;
        DAST._IExpression _3950___mcc_h227 = _source55.dtor_expr;
        DAST._IExpression _3951_expr = _3950___mcc_h227;
        DAST._IType _3952_retType = _3949___mcc_h226;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3953_values = _3948___mcc_h225;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3954_paramNames;
          _3954_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3955_paramNamesSet;
          _3955_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3956_i;
          _3956_i = BigInteger.Zero;
          while ((_3956_i) < (new BigInteger((_3953_values).Count))) {
            _3954_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_3954_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((_3953_values).Select(_3956_i)).dtor__0).dtor_name));
            _3955_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3955_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((((_3953_values).Select(_3956_i)).dtor__0).dtor_name));
            _3956_i = (_3956_i) + (BigInteger.One);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          Dafny.ISequence<Dafny.Rune> _3957_paramsString;
          _3957_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _3956_i = BigInteger.Zero;
          while ((_3956_i) < (new BigInteger((_3953_values).Count))) {
            if ((_3956_i).Sign == 1) {
              _3957_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_3957_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3958_typStr;
            Dafny.ISequence<Dafny.Rune> _out1671;
            _out1671 = DCOMP.COMP.GenType((((_3953_values).Select(_3956_i)).dtor__0).dtor_typ, false, true);
            _3958_typStr = _out1671;
            Dafny.ISequence<Dafny.Rune> _3959_valueGen;
            bool _3960___v95;
            bool _3961_valueErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3962_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1672;
            bool _out1673;
            bool _out1674;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1675;
            DCOMP.COMP.GenExpr(((_3953_values).Select(_3956_i)).dtor__1, selfIdent, @params, true, out _out1672, out _out1673, out _out1674, out _out1675);
            _3959_valueGen = _out1672;
            _3960___v95 = _out1673;
            _3961_valueErased = _out1674;
            _3962_recIdents = _out1675;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent((((_3953_values).Select(_3956_i)).dtor__0).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _3958_typStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3962_recIdents);
            if (_3961_valueErased) {
              _3959_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3959_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _3959_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            _3956_i = (_3956_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3963_recGen;
          bool _3964_recOwned;
          bool _3965_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3966_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1676;
          bool _out1677;
          bool _out1678;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1679;
          DCOMP.COMP.GenExpr(_3951_expr, selfIdent, _3954_paramNames, mustOwn, out _out1676, out _out1677, out _out1678, out _out1679);
          _3963_recGen = _out1676;
          _3964_recOwned = _out1677;
          _3965_recErased = _out1678;
          _3966_recIdents = _out1679;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3966_recIdents, _3955_paramNamesSet);
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _3963_recGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = _3964_recOwned;
          isErased = _3965_recErased;
        }
      } else if (_source55.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _3967___mcc_h228 = _source55.dtor_name;
        DAST._IType _3968___mcc_h229 = _source55.dtor_typ;
        DAST._IExpression _3969___mcc_h230 = _source55.dtor_value;
        DAST._IExpression _3970___mcc_h231 = _source55.dtor_iifeBody;
        DAST._IExpression _3971_iifeBody = _3970___mcc_h231;
        DAST._IExpression _3972_value = _3969___mcc_h230;
        DAST._IType _3973_tpe = _3968___mcc_h229;
        Dafny.ISequence<Dafny.Rune> _3974_name = _3967___mcc_h228;
        {
          Dafny.ISequence<Dafny.Rune> _3975_valueGen;
          bool _3976___v96;
          bool _3977_valueErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3978_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1680;
          bool _out1681;
          bool _out1682;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1683;
          DCOMP.COMP.GenExpr(_3972_value, selfIdent, @params, true, out _out1680, out _out1681, out _out1682, out _out1683);
          _3975_valueGen = _out1680;
          _3976___v96 = _out1681;
          _3977_valueErased = _out1682;
          _3978_recIdents = _out1683;
          if (_3977_valueErased) {
            _3975_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3975_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _3978_recIdents;
          Dafny.ISequence<Dafny.Rune> _3979_valueTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1684;
          _out1684 = DCOMP.COMP.GenType(_3973_tpe, false, true);
          _3979_valueTypeGen = _out1684;
          Dafny.ISequence<Dafny.Rune> _3980_bodyGen;
          bool _3981___v97;
          bool _3982_bodyErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3983_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out1685;
          bool _out1686;
          bool _out1687;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1688;
          DCOMP.COMP.GenExpr(_3971_iifeBody, selfIdent, @params, true, out _out1685, out _out1686, out _out1687, out _out1688);
          _3980_bodyGen = _out1685;
          _3981___v97 = _out1686;
          _3982_bodyErased = _out1687;
          _3983_bodyIdents = _out1688;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3983_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_3974_name))));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet "), DCOMP.__default.escapeIdent((_3974_name))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _3979_valueTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _3975_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _3980_bodyGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = true;
          isErased = _3982_bodyErased;
        }
      } else if (_source55.is_Apply) {
        DAST._IExpression _3984___mcc_h232 = _source55.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _3985___mcc_h233 = _source55.dtor_args;
        Dafny.ISequence<DAST._IExpression> _3986_args = _3985___mcc_h233;
        DAST._IExpression _3987_func = _3984___mcc_h232;
        {
          Dafny.ISequence<Dafny.Rune> _3988_funcString;
          bool _3989___v98;
          bool _3990_funcErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3991_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1689;
          bool _out1690;
          bool _out1691;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1692;
          DCOMP.COMP.GenExpr(_3987_func, selfIdent, @params, false, out _out1689, out _out1690, out _out1691, out _out1692);
          _3988_funcString = _out1689;
          _3989___v98 = _out1690;
          _3990_funcErased = _out1691;
          _3991_recIdents = _out1692;
          readIdents = _3991_recIdents;
          Dafny.ISequence<Dafny.Rune> _3992_argString;
          _3992_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _3993_i;
          _3993_i = BigInteger.Zero;
          while ((_3993_i) < (new BigInteger((_3986_args).Count))) {
            if ((_3993_i).Sign == 1) {
              _3992_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3992_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3994_argExpr;
            bool _3995_isOwned;
            bool _3996_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3997_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1693;
            bool _out1694;
            bool _out1695;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1696;
            DCOMP.COMP.GenExpr((_3986_args).Select(_3993_i), selfIdent, @params, false, out _out1693, out _out1694, out _out1695, out _out1696);
            _3994_argExpr = _out1693;
            _3995_isOwned = _out1694;
            _3996_argErased = _out1695;
            _3997_argIdents = _out1696;
            if (_3995_isOwned) {
              _3994_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3994_argExpr);
            }
            _3992_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3992_argString, _3994_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3997_argIdents);
            _3993_i = (_3993_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _3988_funcString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3992_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source55.is_TypeTest) {
        DAST._IExpression _3998___mcc_h234 = _source55.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3999___mcc_h235 = _source55.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _4000___mcc_h236 = _source55.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _4001_variant = _4000___mcc_h236;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4002_dType = _3999___mcc_h235;
        DAST._IExpression _4003_on = _3998___mcc_h234;
        {
          Dafny.ISequence<Dafny.Rune> _4004_exprGen;
          bool _4005___v99;
          bool _4006_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4007_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1697;
          bool _out1698;
          bool _out1699;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1700;
          DCOMP.COMP.GenExpr(_4003_on, selfIdent, @params, false, out _out1697, out _out1698, out _out1699, out _out1700);
          _4004_exprGen = _out1697;
          _4005___v99 = _out1698;
          _4006_exprErased = _out1699;
          _4007_recIdents = _out1700;
          Dafny.ISequence<Dafny.Rune> _4008_dTypePath;
          Dafny.ISequence<Dafny.Rune> _out1701;
          _out1701 = DCOMP.COMP.GenPath(_4002_dType);
          _4008_dTypePath = _out1701;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!("), _4004_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref(), ")), _4008_dTypePath), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_4001_variant)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. })"));
          isOwned = true;
          isErased = true;
          readIdents = _4007_recIdents;
        }
      } else if (_source55.is_InitializationValue) {
        DAST._IType _4009___mcc_h237 = _source55.dtor_typ;
        DAST._IType _4010_typ = _4009___mcc_h237;
        {
          Dafny.ISequence<Dafny.Rune> _4011_typString;
          Dafny.ISequence<Dafny.Rune> _out1702;
          _out1702 = DCOMP.COMP.GenType(_4010_typ, false, false);
          _4011_typString = _out1702;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _4011_typString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()"));
          isOwned = true;
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source55.is_BoolBoundedPool) {
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]");
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source55.is_SetBoundedPool) {
        DAST._IExpression _4012___mcc_h238 = _source55.dtor_of;
        DAST._IExpression _4013_of = _4012___mcc_h238;
        {
          Dafny.ISequence<Dafny.Rune> _4014_exprGen;
          bool _4015___v100;
          bool _4016_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4017_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1703;
          bool _out1704;
          bool _out1705;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1706;
          DCOMP.COMP.GenExpr(_4013_of, selfIdent, @params, false, out _out1703, out _out1704, out _out1705, out _out1706);
          _4014_exprGen = _out1703;
          _4015___v100 = _out1704;
          _4016_exprErased = _out1705;
          _4017_recIdents = _out1706;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4014_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          isOwned = true;
          isErased = _4016_exprErased;
          readIdents = _4017_recIdents;
        }
      } else if (_source55.is_SeqBoundedPool) {
        DAST._IExpression _4018___mcc_h239 = _source55.dtor_of;
        bool _4019___mcc_h240 = _source55.dtor_includeDuplicates;
        bool _4020_includeDuplicates = _4019___mcc_h240;
        DAST._IExpression _4021_of = _4018___mcc_h239;
        {
          Dafny.ISequence<Dafny.Rune> _4022_exprGen;
          bool _4023___v101;
          bool _4024_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4025_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1707;
          bool _out1708;
          bool _out1709;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1710;
          DCOMP.COMP.GenExpr(_4021_of, selfIdent, @params, false, out _out1707, out _out1708, out _out1709, out _out1710);
          _4022_exprGen = _out1707;
          _4023___v101 = _out1708;
          _4024_exprErased = _out1709;
          _4025_recIdents = _out1710;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4022_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          if (!(_4020_includeDuplicates)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::itertools::Itertools::unique("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          isOwned = true;
          isErased = _4024_exprErased;
          readIdents = _4025_recIdents;
        }
      } else {
        DAST._IExpression _4026___mcc_h241 = _source55.dtor_lo;
        DAST._IExpression _4027___mcc_h242 = _source55.dtor_hi;
        DAST._IExpression _4028_hi = _4027___mcc_h242;
        DAST._IExpression _4029_lo = _4026___mcc_h241;
        {
          Dafny.ISequence<Dafny.Rune> _4030_loString;
          bool _4031___v102;
          bool _4032_loErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4033_recIdentsLo;
          Dafny.ISequence<Dafny.Rune> _out1711;
          bool _out1712;
          bool _out1713;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1714;
          DCOMP.COMP.GenExpr(_4029_lo, selfIdent, @params, true, out _out1711, out _out1712, out _out1713, out _out1714);
          _4030_loString = _out1711;
          _4031___v102 = _out1712;
          _4032_loErased = _out1713;
          _4033_recIdentsLo = _out1714;
          Dafny.ISequence<Dafny.Rune> _4034_hiString;
          bool _4035___v103;
          bool _4036_hiErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4037_recIdentsHi;
          Dafny.ISequence<Dafny.Rune> _out1715;
          bool _out1716;
          bool _out1717;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1718;
          DCOMP.COMP.GenExpr(_4028_hi, selfIdent, @params, true, out _out1715, out _out1716, out _out1717, out _out1718);
          _4034_hiString = _out1715;
          _4035___v103 = _out1716;
          _4036_hiErased = _out1717;
          _4037_recIdentsHi = _out1718;
          if (!(_4032_loErased)) {
            _4030_loString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _4030_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (!(_4036_hiErased)) {
            _4034_hiString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _4034_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::integer_range("), _4030_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _4034_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_4033_recIdentsLo, _4037_recIdentsHi);
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(nonstandard_style)]\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern crate dafny_runtime;\n"));
      BigInteger _4038_i;
      _4038_i = BigInteger.Zero;
      while ((_4038_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _4039_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        RAST._IMod _4040_m;
        RAST._IMod _out1719;
        _out1719 = DCOMP.COMP.GenModule((p).Select(_4038_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _4040_m = _out1719;
        _4039_generated = (_4040_m)._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        if ((_4038_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _4039_generated);
        _4038_i = (_4038_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _4041_i;
      _4041_i = BigInteger.Zero;
      while ((_4041_i) < (new BigInteger((fullName).Count))) {
        if ((_4041_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((fullName).Select(_4041_i)));
        _4041_i = (_4041_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
    public static Dafny.IMap<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>> OpTable {
      get {
        return Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Mod(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("%")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_And(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&&")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Or(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("||")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Div(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Lt(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Plus(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Minus(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Times(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseAnd(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseOr(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseXor(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("^")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseShiftRight(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseShiftLeft(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<<")));
      }
    }
  }
} // end of namespace DCOMP

